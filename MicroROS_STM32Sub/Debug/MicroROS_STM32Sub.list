
MicroROS_STM32Sub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014100  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  080142a0  080142a0  000152a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fe4  08014fe4  00016110  2**0
                  CONTENTS
  4 .ARM          00000008  08014fe4  08014fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fec  08014fec  00016110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014fec  08014fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014ff4  08014ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08014ff8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db00  20000110  08015108  00016110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc10  08015108  00016c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155b7  00000000  00000000  00016140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362e  00000000  00000000  0002b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  0002fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082f8  00000000  00000000  00030a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014700  00000000  00000000  00038d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae61  00000000  00000000  0004d482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000e82e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051dc  00000000  00000000  000e835c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ed538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014288 	.word	0x08014288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08014288 	.word	0x08014288

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f004 fff6 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f004 ff65 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003d34 	.word	0x20003d34
 80007c0:	20003d40 	.word	0x20003d40
 80007c4:	20003d38 	.word	0x20003d38
 80007c8:	20003d2c 	.word	0x20003d2c
 80007cc:	20003d3c 	.word	0x20003d3c

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f004 feee 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f004 fef0 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f004 feb5 	bl	800563c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f012 fdea 	bl	80134de <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f004 fea2 	bl	8005658 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f004 fe88 	bl	800563c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f004 fe7e 	bl	8005658 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fe3a 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81a 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d6 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 f8ac 	bl	8000c4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 f880 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 fc82 	bl	8004400 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000afc:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <main+0x34>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <main+0x38>)
 8000b02:	f003 fcc7 	bl	8004494 <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <main+0x3c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f003 fc9c 	bl	8004448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <main+0x30>
 8000b14:	08014324 	.word	0x08014324
 8000b18:	08000da5 	.word	0x08000da5
 8000b1c:	20003e4c 	.word	0x20003e4c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f012 fc0c 	bl	801334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a28      	ldr	r2, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b94:	2310      	movs	r3, #16
 8000b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fcfa 	bl	80025a4 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 f98b 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 ff5c 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000be2:	f000 f975 	bl	8000ed0 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f002 f950 	bl	8002ed4 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f949 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20003d44 	.word	0x20003d44
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2010      	movs	r0, #16
 8000c74:	f000 febf 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f000 fed8 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	2011      	movs	r0, #17
 8000c84:	f000 feb7 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f000 fed0 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a2c      	ldr	r2, [pc, #176]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2120      	movs	r1, #32
 8000d26:	4812      	ldr	r0, [pc, #72]	@ (8000d70 <MX_GPIO_Init+0xd4>)
 8000d28:	f001 fc22 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <MX_GPIO_Init+0xd8>)
 8000d44:	f001 fa90 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <MX_GPIO_Init+0xd4>)
 8000d60:	f001 fa82 	bl	8002268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020800 	.word	0x40020800

08000d78 <subscription_callback>:

void (* rclc_subscription_callback)(const void *);



void subscription_callback(const void * msgin){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	const std_msgs__msg__Int32 * msg= (const std_msgs__msg__Int32 *)msgin;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	60fb      	str	r3, [r7, #12]

	    // Process message
	        // Turn ON GPIOA5 (set the pin high)
	if(msg->data >10){
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	dd04      	ble.n	8000d96 <subscription_callback+0x1e>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2120      	movs	r1, #32
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <subscription_callback+0x28>)
 8000d92:	f001 fbed 	bl	8002570 <HAL_GPIO_WritePin>
	}



}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000

08000da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	b0c8      	sub	sp, #288	@ 0x120
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8000dac:	4b3a      	ldr	r3, [pc, #232]	@ (8000e98 <StartDefaultTask+0xf4>)
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	4b3a      	ldr	r3, [pc, #232]	@ (8000e9c <StartDefaultTask+0xf8>)
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea0 <StartDefaultTask+0xfc>)
 8000db6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ea4 <StartDefaultTask+0x100>)
 8000db8:	493b      	ldr	r1, [pc, #236]	@ (8000ea8 <StartDefaultTask+0x104>)
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f007 f868 	bl	8007e90 <rmw_uros_set_custom_transport>
	        cubemx_transport_open,
	        cubemx_transport_close,
	        cubemx_transport_write,
	        cubemx_transport_read);

	    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000dc0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 ff99 	bl	8007cfc <rcutils_get_zero_initialized_allocator>
	    freeRTOS_allocator.allocate = microros_allocate;
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <StartDefaultTask+0x108>)
 8000dcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	    freeRTOS_allocator.deallocate = microros_deallocate;
 8000dd0:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <StartDefaultTask+0x10c>)
 8000dd2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	    freeRTOS_allocator.reallocate = microros_reallocate;
 8000dd6:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <StartDefaultTask+0x110>)
 8000dd8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	    freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000ddc:	4b36      	ldr	r3, [pc, #216]	@ (8000eb8 <StartDefaultTask+0x114>)
 8000dde:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000de2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 ff96 	bl	8007d18 <rcutils_set_default_allocator>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f083 0301 	eor.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <StartDefaultTask+0x5e>
	        printf("Error on default allocators (line %d)\n", __LINE__);
 8000df8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000dfc:	482f      	ldr	r0, [pc, #188]	@ (8000ebc <StartDefaultTask+0x118>)
 8000dfe:	f012 f9b9 	bl	8013174 <iprintf>
	    rclc_support_t support;
	    rclc_executor_t executor;
	    rcl_allocator_t allocator;
	    rcl_node_t node;

	    allocator = rcl_get_default_allocator();
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 ffa5 	bl	8007d54 <rcutils_get_default_allocator>
 8000e0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e12:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000e16:	461d      	mov	r5, r3
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	6023      	str	r3, [r4, #0]

	    // create init_options
	    rclc_support_init(&support, 0, NULL, &allocator);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f006 fea4 	bl	8007b78 <rclc_support_init>
	    rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000e30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e34:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8000e38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f006 fbd3 	bl	80075e8 <rclc_executor_init>

	    // create node
	    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000e42:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec0 <StartDefaultTask+0x11c>)
 8000e4c:	491d      	ldr	r1, [pc, #116]	@ (8000ec4 <StartDefaultTask+0x120>)
 8000e4e:	f006 fedd 	bl	8007c0c <rclc_node_init_default>

	    // create subscription
	    rclc_subscription_init_default(
 8000e52:	f007 f833 	bl	8007ebc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e5c:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <StartDefaultTask+0x124>)
 8000e62:	f006 ff0f 	bl	8007c84 <rclc_subscription_init_default>
	        &subscriber,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	        "stm32_topic");
	    rclc_executor_add_subscription(
 8000e66:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 8000e6a:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8000e6e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e72:	2300      	movs	r3, #0
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <StartDefaultTask+0x128>)
 8000e78:	f006 fc26 	bl	80076c8 <rclc_executor_add_subscription>
	      &subscription_callback, ON_NEW_DATA);
	    // Spin and wait for messages
    	//rclc_executor_spin(&executor);
	    while (1)
	    {
	    	rclc_executor_spin_some(&executor, 100);
 8000e7c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000e80:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	f006 fe3d 	bl	8007b08 <rclc_executor_spin_some>
	        osDelay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f003 fb92 	bl	80045b8 <osDelay>
	    	rclc_executor_spin_some(&executor, 100);
 8000e94:	bf00      	nop
 8000e96:	e7f1      	b.n	8000e7c <StartDefaultTask+0xd8>
 8000e98:	08001661 	.word	0x08001661
 8000e9c:	080015f9 	.word	0x080015f9
 8000ea0:	080015d9 	.word	0x080015d9
 8000ea4:	080015ad 	.word	0x080015ad
 8000ea8:	20003d44 	.word	0x20003d44
 8000eac:	08000edd 	.word	0x08000edd
 8000eb0:	08000f21 	.word	0x08000f21
 8000eb4:	08000f59 	.word	0x08000f59
 8000eb8:	08000fc5 	.word	0x08000fc5
 8000ebc:	080142ac 	.word	0x080142ac
 8000ec0:	080142d4 	.word	0x080142d4
 8000ec4:	080142d8 	.word	0x080142d8
 8000ec8:	080142e4 	.word	0x080142e4
 8000ecc:	08000d79 	.word	0x08000d79

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <microros_allocate+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <microros_allocate+0x3c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <microros_allocate+0x40>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <microros_allocate+0x40>)
 8000f04:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fb9a 	bl	8000640 <pvPortMallocMicroROS>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20003e50 	.word	0x20003e50
 8000f1c:	20003e54 	.word	0x20003e54

08000f20 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fca9 	bl	8000888 <getBlockSize>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <microros_deallocate+0x34>)
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <microros_deallocate+0x34>)
 8000f42:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fc43 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20003e54 	.word	0x20003e54

08000f58 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <microros_reallocate+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <microros_reallocate+0x64>)
 8000f72:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f82:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000f8a:	68b8      	ldr	r0, [r7, #8]
 8000f8c:	f7ff fb58 	bl	8000640 <pvPortMallocMicroROS>
 8000f90:	4603      	mov	r3, r0
 8000f92:	e00e      	b.n	8000fb2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fc77 	bl	8000888 <getBlockSize>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <microros_reallocate+0x68>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <microros_reallocate+0x68>)
 8000fa6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff fc8a 	bl	80008c4 <pvPortReallocMicroROS>
 8000fb0:	4603      	mov	r3, r0
  }
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20003e50 	.word	0x20003e50
 8000fc0:	20003e54 	.word	0x20003e54

08000fc4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <microros_zero_allocate+0x48>)
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <microros_zero_allocate+0x48>)
 8000fe2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <microros_zero_allocate+0x4c>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <microros_zero_allocate+0x4c>)
 8000ff6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fc8f 	bl	800091e <pvPortCallocMicroROS>
 8001000:	4603      	mov	r3, r0
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20003e50 	.word	0x20003e50
 8001010:	20003e54 	.word	0x20003e54
 8001014:	00000000 	.word	0x00000000

08001018 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800102a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102e:	a320      	add	r3, pc, #128	@ (adr r3, 80010b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff f93c 	bl	80002b0 <__aeabi_ldivmod>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001042:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001046:	a31a      	add	r3, pc, #104	@ (adr r3, 80010b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f930 	bl	80002b0 <__aeabi_ldivmod>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da20      	bge.n	800109e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1712      	asrs	r2, r2, #28
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	17c8      	asrs	r0, r1, #31
 800107a:	460c      	mov	r4, r1
 800107c:	4605      	mov	r5, r0
 800107e:	ebb2 0804 	subs.w	r8, r2, r4
 8001082:	eb63 0905 	sbc.w	r9, r3, r5
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4906      	ldr	r1, [pc, #24]	@ (80010ac <UTILS_NanosecondsToTimespec+0x94>)
 8001094:	fb01 f303 	mul.w	r3, r1, r3
 8001098:	441a      	add	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
    }
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010a8:	44b82fa1 	.word	0x44b82fa1
 80010ac:	3b9aca00 	.word	0x3b9aca00
 80010b0:	3b9aca00 	.word	0x3b9aca00
 80010b4:	00000000 	.word	0x00000000

080010b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80010b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010bc:	b08e      	sub	sp, #56	@ 0x38
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80010c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80010c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010c8:	2300      	movs	r3, #0
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80010da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fd36 	bl	8005b50 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80010e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e6:	17da      	asrs	r2, r3, #31
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	61fa      	str	r2, [r7, #28]
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	69b9      	ldr	r1, [r7, #24]
 80010f6:	000b      	movs	r3, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80010fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001100:	2200      	movs	r2, #0
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800110a:	1911      	adds	r1, r2, r4
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	416b      	adcs	r3, r5
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001116:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800111a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	f04f 0400 	mov.w	r4, #0
 8001126:	f04f 0500 	mov.w	r5, #0
 800112a:	015d      	lsls	r5, r3, #5
 800112c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001130:	0154      	lsls	r4, r2, #5
 8001132:	4622      	mov	r2, r4
 8001134:	462b      	mov	r3, r5
 8001136:	ebb2 0800 	subs.w	r8, r2, r0
 800113a:	eb63 0901 	sbc.w	r9, r3, r1
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800114a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800114e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	eb18 0a00 	adds.w	sl, r8, r0
 800115a:	eb49 0b01 	adc.w	fp, r9, r1
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800116a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800116e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001172:	ebb2 040a 	subs.w	r4, r2, sl
 8001176:	603c      	str	r4, [r7, #0]
 8001178:	eb63 030b 	sbc.w	r3, r3, fp
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001182:	4623      	mov	r3, r4
 8001184:	181b      	adds	r3, r3, r0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	462b      	mov	r3, r5
 800118a:	eb41 0303 	adc.w	r3, r1, r3
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	6a3a      	ldr	r2, [r7, #32]
 8001192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001196:	f7ff ff3f 	bl	8001018 <UTILS_NanosecondsToTimespec>

    return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	4618      	mov	r0, r3
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_MspInit+0x54>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <HAL_MspInit+0x54>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_MspInit+0x54>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_MspInit+0x54>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_MspInit+0x54>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_MspInit+0x54>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	f06f 0001 	mvn.w	r0, #1
 80011ee:	f000 fc02 	bl	80019f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4d      	ldr	r2, [pc, #308]	@ (8001354 <HAL_UART_MspInit+0x154>)
 800121e:	4293      	cmp	r3, r2
 8001220:	f040 8093 	bne.w	800134a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	4a4a      	ldr	r2, [pc, #296]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001232:	6413      	str	r3, [r2, #64]	@ 0x40
 8001234:	4b48      	ldr	r3, [pc, #288]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4b44      	ldr	r3, [pc, #272]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	4a43      	ldr	r2, [pc, #268]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001250:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_UART_MspInit+0x158>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125c:	230c      	movs	r3, #12
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126c:	2307      	movs	r3, #7
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4839      	ldr	r0, [pc, #228]	@ (800135c <HAL_UART_MspInit+0x15c>)
 8001278:	f000 fff6 	bl	8002268 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800127c:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_UART_MspInit+0x160>)
 800127e:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <HAL_UART_MspInit+0x164>)
 8001280:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001284:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001288:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <HAL_UART_MspInit+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_UART_MspInit+0x160>)
 8001298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012c0:	4827      	ldr	r0, [pc, #156]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012c2:	f000 fbcf 	bl	8001a64 <HAL_DMA_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012cc:	f7ff fe00 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_UART_MspInit+0x160>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <HAL_UART_MspInit+0x16c>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012ec:	2240      	movs	r2, #64	@ 0x40
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_UART_MspInit+0x168>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_UART_MspInit+0x168>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001312:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001316:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_UART_MspInit+0x168>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800131e:	4812      	ldr	r0, [pc, #72]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001320:	f000 fba0 	bl	8001a64 <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800132a:	f7ff fdd1 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <HAL_UART_MspInit+0x168>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2026      	movs	r0, #38	@ 0x26
 8001340:	f000 fb59 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001344:	2026      	movs	r0, #38	@ 0x26
 8001346:	f000 fb72 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004400 	.word	0x40004400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	20003d8c 	.word	0x20003d8c
 8001364:	40026088 	.word	0x40026088
 8001368:	20003dec 	.word	0x20003dec
 800136c:	400260a0 	.word	0x400260a0

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 fa29 	bl	8001800 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ae:	f004 fd53 	bl	8005e58 <xTaskGetSchedulerState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d001      	beq.n	80013bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013b8:	f005 fb4e 	bl	8006a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA1_Stream5_IRQHandler+0x10>)
 80013c6:	f000 fce5 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20003d8c 	.word	0x20003d8c

080013d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <DMA1_Stream6_IRQHandler+0x10>)
 80013da:	f000 fcdb 	bl	8001d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20003dec 	.word	0x20003dec

080013e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <USART2_IRQHandler+0x10>)
 80013ee:	f001 fed5 	bl	800319c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20003d44 	.word	0x20003d44

080013fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_kill>:

int _kill(int pid, int sig)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001416:	f012 f82d 	bl	8013474 <__errno>
 800141a:	4603      	mov	r3, r0
 800141c:	2216      	movs	r2, #22
 800141e:	601a      	str	r2, [r3, #0]
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_exit>:

void _exit (int status)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffe7 	bl	800140c <_kill>
  while (1) {}    /* Make sure we hang here */
 800143e:	bf00      	nop
 8001440:	e7fd      	b.n	800143e <_exit+0x12>

08001442 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e00a      	b.n	800146a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001454:	f3af 8000 	nop.w
 8001458:	4601      	mov	r1, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	b2ca      	uxtb	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbf0      	blt.n	8001454 <_read+0x12>
  }

  return len;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e009      	b.n	80014a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf1      	blt.n	800148e <_write+0x12>
  }
  return len;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_close>:

int _close(int file)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014dc:	605a      	str	r2, [r3, #4]
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_isatty>:

int _isatty(int file)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f011 ff92 	bl	8013474 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20018000 	.word	0x20018000
 800157c:	00000400 	.word	0x00000400
 8001580:	20003e5c 	.word	0x20003e5c
 8001584:	2000dc10 	.word	0x2000dc10

08001588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80015bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015c0:	4904      	ldr	r1, [pc, #16]	@ (80015d4 <cubemx_transport_open+0x28>)
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 fd46 	bl	8003054 <HAL_UART_Receive_DMA>
    return true;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20003e60 	.word	0x20003e60

080015d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f001 fd58 	bl	800309e <HAL_UART_DMAStop>
    return true;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800160c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	d11c      	bne.n	8001654 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f001 fca6 	bl	8002f74 <HAL_UART_Transmit_DMA>
 8001628:	4603      	mov	r3, r0
 800162a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800162c:	e002      	b.n	8001634 <cubemx_transport_write+0x3c>
            osDelay(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f002 ffc2 	bl	80045b8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001634:	7cfb      	ldrb	r3, [r7, #19]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d105      	bne.n	8001646 <cubemx_transport_write+0x4e>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b20      	cmp	r3, #32
 8001644:	d1f3      	bne.n	800162e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <cubemx_transport_write+0x58>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e002      	b.n	8001656 <cubemx_transport_write+0x5e>
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001654:	2300      	movs	r3, #0
    }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001674:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800167a:	b672      	cpsid	i
}
 800167c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <cubemx_transport_read+0x9c>)
 800168c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800168e:	b662      	cpsie	i
}
 8001690:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001698:	2001      	movs	r0, #1
 800169a:	f002 ff8d 	bl	80045b8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <cubemx_transport_read+0x9c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d103      	bne.n	80016b2 <cubemx_transport_read+0x52>
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbe3      	blt.n	800167a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016b6:	e011      	b.n	80016dc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	440b      	add	r3, r1
 80016c2:	4910      	ldr	r1, [pc, #64]	@ (8001704 <cubemx_transport_read+0xa4>)
 80016c4:	5c8a      	ldrb	r2, [r1, r2]
 80016c6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016d4:	6013      	str	r3, [r2, #0]
        wrote++;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	3301      	adds	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <cubemx_transport_read+0xa0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <cubemx_transport_read+0x9c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d003      	beq.n	80016f0 <cubemx_transport_read+0x90>
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3e3      	bcc.n	80016b8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80016f0:	69bb      	ldr	r3, [r7, #24]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20004664 	.word	0x20004664
 8001700:	20004660 	.word	0x20004660
 8001704:	20003e60 	.word	0x20003e60

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800170c:	f7ff ff3c 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001736:	f011 fea3 	bl	8013480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff f9d1 	bl	8000ae0 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800174c:	08014ff8 	.word	0x08014ff8
  ldr r2, =_sbss
 8001750:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001754:	2000dc10 	.word	0x2000dc10

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f92b 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fd0a 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f943 	bl	8001a4a <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f000 f90b 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000004 	.word	0x20000004
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20000008 	.word	0x20000008

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20004668 	.word	0x20004668

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20004668 	.word	0x20004668

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	@ (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	@ (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff3e 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff31 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff feda 	bl	8001828 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e099      	b.n	8001bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa0:	e00f      	b.n	8001ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa2:	f7ff fec1 	bl	8001828 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d908      	bls.n	8001ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e078      	b.n	8001bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e8      	bne.n	8001aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <HAL_DMA_Init+0x158>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d107      	bne.n	8001b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	4313      	orrs	r3, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d117      	bne.n	8001b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fb01 	bl	8002170 <DMA_CheckFifoParam>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b82:	2301      	movs	r3, #1
 8001b84:	e016      	b.n	8001bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fab8 	bl	8002104 <DMA_CalcBaseAndBitshift>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	223f      	movs	r2, #63	@ 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f010803f 	.word	0xf010803f

08001bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Start_IT+0x26>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e040      	b.n	8001c68 <HAL_DMA_Start_IT+0xa8>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d12f      	bne.n	8001c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa4a 	bl	80020a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c18:	223f      	movs	r2, #63	@ 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0216 	orr.w	r2, r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0208 	orr.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e005      	b.n	8001c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c7e:	f7ff fdd3 	bl	8001828 <HAL_GetTick>
 8001c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e052      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_Abort+0x62>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	e013      	b.n	8001d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf4:	f7ff fd98 	bl	8001828 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d90c      	bls.n	8001d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e015      	b.n	8001d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e4      	bne.n	8001cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	223f      	movs	r2, #63	@ 0x3f
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00c      	b.n	8001d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da0:	4b8e      	ldr	r3, [pc, #568]	@ (8001fdc <HAL_DMA_IRQHandler+0x248>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a8e      	ldr	r2, [pc, #568]	@ (8001fe0 <HAL_DMA_IRQHandler+0x24c>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2208      	movs	r2, #8
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2201      	movs	r2, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2201      	movs	r2, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	2204      	movs	r2, #4
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	f043 0204 	orr.w	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	2210      	movs	r2, #16
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d043      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03c      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2210      	movs	r2, #16
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d024      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e01f      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e016      	b.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0208 	bic.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	2220      	movs	r2, #32
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 808f 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8087 	beq.w	8002034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d136      	bne.n	8001fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0216 	bic.w	r2, r2, #22
 8001f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x1da>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0208 	bic.w	r2, r2, #8
 8001f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	223f      	movs	r2, #63	@ 0x3f
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d07e      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
        }
        return;
 8001faa:	e079      	b.n	80020a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d031      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e02c      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e01e      	b.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0210 	bic.w	r2, r2, #16
 8002012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d032      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d022      	beq.n	800208e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2205      	movs	r2, #5
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	3301      	adds	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d307      	bcc.n	800207c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f2      	bne.n	8002060 <HAL_DMA_IRQHandler+0x2cc>
 800207a:	e000      	b.n	800207e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800207c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e000      	b.n	80020a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a0:	bf00      	nop
    }
  }
}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b40      	cmp	r3, #64	@ 0x40
 80020d4:	d108      	bne.n	80020e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020e6:	e007      	b.n	80020f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3b10      	subs	r3, #16
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <DMA_CalcBaseAndBitshift+0x64>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211e:	4a13      	ldr	r2, [pc, #76]	@ (800216c <DMA_CalcBaseAndBitshift+0x68>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d909      	bls.n	8002146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	@ 0x58
 8002144:	e007      	b.n	8002156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	aaaaaaab 	.word	0xaaaaaaab
 800216c:	08014360 	.word	0x08014360

08002170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11f      	bne.n	80021ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d856      	bhi.n	800223e <DMA_CheckFifoParam+0xce>
 8002190:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <DMA_CheckFifoParam+0x28>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021bb 	.word	0x080021bb
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	0800223f 	.word	0x0800223f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d046      	beq.n	8002242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e043      	b.n	8002242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c2:	d140      	bne.n	8002246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c8:	e03d      	b.n	8002246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d2:	d121      	bne.n	8002218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d837      	bhi.n	800224a <DMA_CheckFifoParam+0xda>
 80021da:	a201      	add	r2, pc, #4	@ (adr r2, 80021e0 <DMA_CheckFifoParam+0x70>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f7 	.word	0x080021f7
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002209 	.word	0x08002209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e030      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d025      	beq.n	800224e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e022      	b.n	800224e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002216:	e01c      	b.n	8002252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d903      	bls.n	8002226 <DMA_CheckFifoParam+0xb6>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d003      	beq.n	800222c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002224:	e018      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      break;
 800222a:	e015      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e00b      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 800223e:	bf00      	nop
 8002240:	e00a      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e008      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e006      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e004      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e002      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;   
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
    }
  } 
  
  return status; 
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e159      	b.n	8002538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8148 	bne.w	8002532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a2 	beq.w	8002532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <HAL_GPIO_Init+0x2e8>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_GPIO_Init+0x2ec>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	@ (8002558 <HAL_GPIO_Init+0x2f0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x202>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a48      	ldr	r2, [pc, #288]	@ (800255c <HAL_GPIO_Init+0x2f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x1fe>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a47      	ldr	r2, [pc, #284]	@ (8002560 <HAL_GPIO_Init+0x2f8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x1fa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a46      	ldr	r2, [pc, #280]	@ (8002564 <HAL_GPIO_Init+0x2fc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x1f6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a45      	ldr	r2, [pc, #276]	@ (8002568 <HAL_GPIO_Init+0x300>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x1f2>
 8002456:	2304      	movs	r3, #4
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245a:	2307      	movs	r3, #7
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x204>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	@ (8002554 <HAL_GPIO_Init+0x2ec>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <HAL_GPIO_Init+0x304>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a2f      	ldr	r2, [pc, #188]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_GPIO_Init+0x304>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <HAL_GPIO_Init+0x304>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a0f      	ldr	r2, [pc, #60]	@ (800256c <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f aea2 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	@ 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e267      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025c2:	4b88      	ldr	r3, [pc, #544]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b82      	ldr	r3, [pc, #520]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e242      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a75      	ldr	r2, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6f      	ldr	r2, [pc, #444]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6d      	ldr	r3, [pc, #436]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6c      	ldr	r2, [pc, #432]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a65      	ldr	r2, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff f8e4 	bl	8001828 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f8e0 	bl	8001828 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e207      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5b      	ldr	r3, [pc, #364]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f8d0 	bl	8001828 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f8cc 	bl	8001828 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f3      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ba:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c7      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4937      	ldr	r1, [pc, #220]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7ff f885 	bl	8001828 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff f881 	bl	8001828 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a8      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4925      	ldr	r1, [pc, #148]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x244>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f864 	bl	8001828 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff f860 	bl	8001828 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e187      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d036      	beq.n	80027fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff f844 	bl	8001828 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff f840 	bl	8001828 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e167      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e01b      	b.n	80027fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_OscConfig+0x248>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7ff f82d 	bl	8001828 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d2:	f7ff f829 	bl	8001828 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d907      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e150      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470000 	.word	0x42470000
 80027ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ea      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8097 	beq.w	8002938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a7c      	ldr	r2, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b77      	ldr	r3, [pc, #476]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b74      	ldr	r3, [pc, #464]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe ffe9 	bl	8001828 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe ffe5 	bl	8001828 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e10c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a18 <HAL_RCC_OscConfig+0x474>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
 8002880:	4b64      	ldr	r3, [pc, #400]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x30c>
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x324>
 80028b0:	4b58      	ldr	r3, [pc, #352]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a57      	ldr	r2, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a54      	ldr	r2, [pc, #336]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe ffaa 	bl	8001828 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fe ffa6 	bl	8001828 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0cb      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ee      	beq.n	80028d8 <HAL_RCC_OscConfig+0x334>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe ff94 	bl	8001828 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe ff90 	bl	8001828 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0b5      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ee      	bne.n	8002904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a1 	beq.w	8002a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d05c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d141      	bne.n	80029da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe ff64 	bl	8001828 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe ff60 	bl	8001828 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e087      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	491b      	ldr	r1, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe ff39 	bl	8001828 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe ff35 	bl	8001828 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e05c      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x416>
 80029d8:	e054      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe ff22 	bl	8001828 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe ff1e 	bl	8001828 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e045      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x444>
 8002a06:	e03d      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e038      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fe50 	bl	8001828 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fe4c 	bl	8001828 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fdb0 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08014348 	.word	0x08014348
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b094      	sub	sp, #80	@ 0x50
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b79      	ldr	r3, [pc, #484]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80e1 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e0db      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b73      	ldr	r3, [pc, #460]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c98:	e0db      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b73      	ldr	r3, [pc, #460]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c9e:	e0d8      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cca:	2300      	movs	r3, #0
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce4:	0150      	lsls	r0, r2, #5
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4621      	mov	r1, r4
 8002cec:	1a51      	subs	r1, r2, r1
 8002cee:	6139      	str	r1, [r7, #16]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d04:	4659      	mov	r1, fp
 8002d06:	018b      	lsls	r3, r1, #6
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d0e:	4651      	mov	r1, sl
 8002d10:	018a      	lsls	r2, r1, #6
 8002d12:	4651      	mov	r1, sl
 8002d14:	ebb2 0801 	subs.w	r8, r2, r1
 8002d18:	4659      	mov	r1, fp
 8002d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	eb18 0303 	adds.w	r3, r8, r3
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	462b      	mov	r3, r5
 8002d40:	eb49 0303 	adc.w	r3, r9, r3
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d52:	4629      	mov	r1, r5
 8002d54:	024b      	lsls	r3, r1, #9
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	024a      	lsls	r2, r1, #9
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d66:	2200      	movs	r2, #0
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d70:	f7fd faee 	bl	8000350 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d7c:	e058      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	4611      	mov	r1, r2
 8002d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0159      	lsls	r1, r3, #5
 8002da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002daa:	0150      	lsls	r0, r2, #5
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4641      	mov	r1, r8
 8002db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	18e3      	adds	r3, r4, r3
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb45 0303 	adc.w	r3, r5, r3
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e06:	4629      	mov	r1, r5
 8002e08:	028b      	lsls	r3, r1, #10
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e10:	4621      	mov	r1, r4
 8002e12:	028a      	lsls	r2, r1, #10
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	61fa      	str	r2, [r7, #28]
 8002e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e24:	f7fd fa94 	bl	8000350 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3750      	adds	r7, #80	@ 0x50
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	007a1200 	.word	0x007a1200

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08014358 	.word	0x08014358

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb0:	f7ff ffdc 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0b5b      	lsrs	r3, r3, #13
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	@ (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08014358 	.word	0x08014358

08002ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe f980 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	@ 0x24
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 ffc9 	bl	8003eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	@ 0x30
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d156      	bne.n	800303c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_Transmit_DMA+0x26>
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e04f      	b.n	800303e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2221      	movs	r2, #33	@ 0x21
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	4a21      	ldr	r2, [pc, #132]	@ (8003048 <HAL_UART_Transmit_DMA+0xd4>)
 8002fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <HAL_UART_Transmit_DMA+0xd8>)
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <HAL_UART_Transmit_DMA+0xdc>)
 8002fd4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	2200      	movs	r2, #0
 8002fdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	f7fe fde3 	bl	8001bc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003002:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	617b      	str	r3, [r7, #20]
   return(result);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003024:	627a      	str	r2, [r7, #36]	@ 0x24
 8003026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	61fb      	str	r3, [r7, #28]
   return(result);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3730      	adds	r7, #48	@ 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	0800373d 	.word	0x0800373d
 800304c:	080037d7 	.word	0x080037d7
 8003050:	0800395b 	.word	0x0800395b

08003054 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	d112      	bne.n	8003094 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_Receive_DMA+0x26>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00b      	b.n	8003096 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	461a      	mov	r2, r3
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fcb0 	bl	80039f0 <UART_Start_Receive_DMA>
 8003090:	4603      	mov	r3, r0
 8003092:	e000      	b.n	8003096 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b090      	sub	sp, #64	@ 0x40
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b21      	cmp	r3, #33	@ 0x21
 80030ca:	d128      	bne.n	800311e <HAL_UART_DMAStop+0x80>
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d025      	beq.n	800311e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	623b      	str	r3, [r7, #32]
   return(result);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e5      	bne.n	80030d2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fdac 	bl	8001c70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fd03 	bl	8003b24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b22      	cmp	r3, #34	@ 0x22
 800313e:	d128      	bne.n	8003192 <HAL_UART_DMAStop+0xf4>
 8003140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d025      	beq.n	8003192 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	60fb      	str	r3, [r7, #12]
   return(result);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003166:	61fa      	str	r2, [r7, #28]
 8003168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	617b      	str	r3, [r7, #20]
   return(result);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e5      	bne.n	8003146 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fd72 	bl	8001c70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fcf1 	bl	8003b74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3740      	adds	r7, #64	@ 0x40
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0ba      	sub	sp, #232	@ 0xe8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fd99 	bl	8003d32 <UART_Receive_IT>
      return;
 8003200:	e25b      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80de 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
 800320c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80d1 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
 8003232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 81f2 	beq.w	80036b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fd24 	bl	8003d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_UART_IRQHandler+0x17a>
 800330e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fc2c 	bl	8003b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003382:	4a7e      	ldr	r2, [pc, #504]	@ (800357c <HAL_UART_IRQHandler+0x3e0>)
 8003384:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fce0 	bl	8001d50 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00e      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9b2 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00a      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9ae 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e006      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9aa 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033c2:	e175      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	bf00      	nop
    return;
 80033c6:	e173      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 814f 	bne.w	8003670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8148 	beq.w	8003670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8141 	beq.w	8003670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	f040 80b6 	bne.w	8003580 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8145 	beq.w	80036b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 813e 	bcs.w	80036b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800343e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344a:	f000 8088 	beq.w	800355e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800347a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1d9      	bne.n	800344e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e1      	bne.n	800349a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800352c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003540:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003542:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800354e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fb89 	bl	8001c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8d5 	bl	8003724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800357a:	e09b      	b.n	80036b4 <HAL_UART_IRQHandler+0x518>
 800357c:	08003c3b 	.word	0x08003c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 808e 	beq.w	80036b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800359c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8089 	beq.w	80036b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e3      	bne.n	80035a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	623b      	str	r3, [r7, #32]
   return(result);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003602:	633a      	str	r2, [r7, #48]	@ 0x30
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e3      	bne.n	80035de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003648:	61fa      	str	r2, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	617b      	str	r3, [r7, #20]
   return(result);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e3      	bne.n	8003624 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f85b 	bl	8003724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800366e:	e023      	b.n	80036b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x4f4>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 faea 	bl	8003c62 <UART_Transmit_IT>
    return;
 800368e:	e014      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_UART_IRQHandler+0x51e>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb2a 	bl	8003d02 <UART_EndTransmit_IT>
    return;
 80036ae:	e004      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
    return;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
      return;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_UART_IRQHandler+0x51e>
      return;
 80036b8:	bf00      	nop
  }
}
 80036ba:	37e8      	adds	r7, #232	@ 0xe8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b090      	sub	sp, #64	@ 0x40
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d137      	bne.n	80037c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375a:	2200      	movs	r2, #0
 800375c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800375e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	623b      	str	r3, [r7, #32]
   return(result);
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800377e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037b2:	61fa      	str	r2, [r7, #28]
 80037b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	69b9      	ldr	r1, [r7, #24]
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	617b      	str	r3, [r7, #20]
   return(result);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e5      	bne.n	8003792 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037c6:	e002      	b.n	80037ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037ca:	f7ff ff79 	bl	80036c0 <HAL_UART_TxCpltCallback>
}
 80037ce:	bf00      	nop
 80037d0:	3740      	adds	r7, #64	@ 0x40
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff75 	bl	80036d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b09c      	sub	sp, #112	@ 0x70
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d172      	bne.n	80038f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800380e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003810:	2200      	movs	r2, #0
 8003812:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800382a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800382c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003834:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003836:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800383a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003868:	647a      	str	r2, [r7, #68]	@ 0x44
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800386e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	623b      	str	r3, [r7, #32]
   return(result);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003892:	663b      	str	r3, [r7, #96]	@ 0x60
 8003894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800389c:	633a      	str	r2, [r7, #48]	@ 0x30
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d119      	bne.n	80038f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0310 	bic.w	r3, r3, #16
 80038d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038e0:	61fa      	str	r2, [r7, #28]
 80038e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	617b      	str	r3, [r7, #20]
   return(result);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e5      	bne.n	80038c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d106      	bne.n	8003910 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003904:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003906:	4619      	mov	r1, r3
 8003908:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800390a:	f7ff ff0b 	bl	8003724 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800390e:	e002      	b.n	8003916 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003910:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003912:	f7ff fee9 	bl	80036e8 <HAL_UART_RxCpltCallback>
}
 8003916:	bf00      	nop
 8003918:	3770      	adds	r7, #112	@ 0x70
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	2b01      	cmp	r3, #1
 8003938:	d108      	bne.n	800394c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff feed 	bl	8003724 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800394a:	e002      	b.n	8003952 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fed5 	bl	80036fc <HAL_UART_RxHalfCpltCallback>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b21      	cmp	r3, #33	@ 0x21
 800398c:	d108      	bne.n	80039a0 <UART_DMAError+0x46>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800399a:	68b8      	ldr	r0, [r7, #8]
 800399c:	f000 f8c2 	bl	8003b24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b22      	cmp	r3, #34	@ 0x22
 80039c0:	d108      	bne.n	80039d4 <UART_DMAError+0x7a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f000 f8d0 	bl	8003b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039e0:	68b8      	ldr	r0, [r7, #8]
 80039e2:	f7ff fe95 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b098      	sub	sp, #96	@ 0x60
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	@ 0x22
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b18 <UART_Start_Receive_DMA+0x128>)
 8003a1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	4a3d      	ldr	r2, [pc, #244]	@ (8003b1c <UART_Start_Receive_DMA+0x12c>)
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b20 <UART_Start_Receive_DMA+0x130>)
 8003a2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a34:	2200      	movs	r2, #0
 8003a36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a38:	f107 0308 	add.w	r3, r7, #8
 8003a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f7fe f8b6 	bl	8001bc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ac6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003acc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003afa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6a39      	ldr	r1, [r7, #32]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3760      	adds	r7, #96	@ 0x60
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	080037f3 	.word	0x080037f3
 8003b1c:	0800391f 	.word	0x0800391f
 8003b20:	0800395b 	.word	0x0800395b

08003b24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	61ba      	str	r2, [r7, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6979      	ldr	r1, [r7, #20]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e5      	bne.n	8003b2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b68:	bf00      	nop
 8003b6a:	3724      	adds	r7, #36	@ 0x24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b095      	sub	sp, #84	@ 0x54
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c0c:	61ba      	str	r2, [r7, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c2e:	bf00      	nop
 8003c30:	3754      	adds	r7, #84	@ 0x54
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fd5b 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b21      	cmp	r3, #33	@ 0x21
 8003c74:	d13e      	bne.n	8003cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7e:	d114      	bne.n	8003caa <UART_Transmit_IT+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e008      	b.n	8003cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6211      	str	r1, [r2, #32]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fccc 	bl	80036c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08c      	sub	sp, #48	@ 0x30
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b22      	cmp	r3, #34	@ 0x22
 8003d44:	f040 80ae 	bne.w	8003ea4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d50:	d117      	bne.n	8003d82 <UART_Receive_IT+0x50>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d113      	bne.n	8003d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d80:	e026      	b.n	8003dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d007      	beq.n	8003da6 <UART_Receive_IT+0x74>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <UART_Receive_IT+0x82>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	e008      	b.n	8003dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d15d      	bne.n	8003ea0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0220 	bic.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d135      	bne.n	8003e96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 0310 	bic.w	r3, r3, #16
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	623a      	str	r2, [r7, #32]
 8003e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	69f9      	ldr	r1, [r7, #28]
 8003e56:	6a3a      	ldr	r2, [r7, #32]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d10a      	bne.n	8003e88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fc48 	bl	8003724 <HAL_UARTEx_RxEventCallback>
 8003e94:	e002      	b.n	8003e9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fc26 	bl	80036e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e002      	b.n	8003ea6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3730      	adds	r7, #48	@ 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb4:	b0c0      	sub	sp, #256	@ 0x100
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	68d9      	ldr	r1, [r3, #12]
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	ea40 0301 	orr.w	r3, r0, r1
 8003ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f08:	f021 010c 	bic.w	r1, r1, #12
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f16:	430b      	orrs	r3, r1
 8003f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	6999      	ldr	r1, [r3, #24]
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	ea40 0301 	orr.w	r3, r0, r1
 8003f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800417c <UART_SetConfig+0x2cc>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d005      	beq.n	8003f50 <UART_SetConfig+0xa0>
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004180 <UART_SetConfig+0x2d0>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d104      	bne.n	8003f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe ffac 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 8003f54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f58:	e003      	b.n	8003f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f5a:	f7fe ff93 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8003f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6c:	f040 810c 	bne.w	8004188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f82:	4622      	mov	r2, r4
 8003f84:	462b      	mov	r3, r5
 8003f86:	1891      	adds	r1, r2, r2
 8003f88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f92:	4621      	mov	r1, r4
 8003f94:	eb12 0801 	adds.w	r8, r2, r1
 8003f98:	4629      	mov	r1, r5
 8003f9a:	eb43 0901 	adc.w	r9, r3, r1
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb2:	4690      	mov	r8, r2
 8003fb4:	4699      	mov	r9, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	eb18 0303 	adds.w	r3, r8, r3
 8003fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	eb49 0303 	adc.w	r3, r9, r3
 8003fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fde:	460b      	mov	r3, r1
 8003fe0:	18db      	adds	r3, r3, r3
 8003fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	eb42 0303 	adc.w	r3, r2, r3
 8003fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ff4:	f7fc f9ac 	bl	8000350 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b61      	ldr	r3, [pc, #388]	@ (8004184 <UART_SetConfig+0x2d4>)
 8003ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004010:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004020:	415b      	adcs	r3, r3
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004028:	4641      	mov	r1, r8
 800402a:	eb12 0a01 	adds.w	sl, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb43 0b01 	adc.w	fp, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004048:	4692      	mov	sl, r2
 800404a:	469b      	mov	fp, r3
 800404c:	4643      	mov	r3, r8
 800404e:	eb1a 0303 	adds.w	r3, sl, r3
 8004052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004056:	464b      	mov	r3, r9
 8004058:	eb4b 0303 	adc.w	r3, fp, r3
 800405c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800406c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004074:	460b      	mov	r3, r1
 8004076:	18db      	adds	r3, r3, r3
 8004078:	643b      	str	r3, [r7, #64]	@ 0x40
 800407a:	4613      	mov	r3, r2
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800408a:	f7fc f961 	bl	8000350 <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4611      	mov	r1, r2
 8004094:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <UART_SetConfig+0x2d4>)
 8004096:	fba3 2301 	umull	r2, r3, r3, r1
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2264      	movs	r2, #100	@ 0x64
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	1acb      	subs	r3, r1, r3
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040aa:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <UART_SetConfig+0x2d4>)
 80040ac:	fba3 2302 	umull	r2, r3, r3, r2
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040b8:	441c      	add	r4, r3
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040d4:	415b      	adcs	r3, r3
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040dc:	4641      	mov	r1, r8
 80040de:	1851      	adds	r1, r2, r1
 80040e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80040e2:	4649      	mov	r1, r9
 80040e4:	414b      	adcs	r3, r1
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040f4:	4659      	mov	r1, fp
 80040f6:	00cb      	lsls	r3, r1, #3
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fe:	4651      	mov	r1, sl
 8004100:	00ca      	lsls	r2, r1, #3
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	4603      	mov	r3, r0
 8004108:	4642      	mov	r2, r8
 800410a:	189b      	adds	r3, r3, r2
 800410c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004110:	464b      	mov	r3, r9
 8004112:	460a      	mov	r2, r1
 8004114:	eb42 0303 	adc.w	r3, r2, r3
 8004118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004128:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800412c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004130:	460b      	mov	r3, r1
 8004132:	18db      	adds	r3, r3, r3
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004136:	4613      	mov	r3, r2
 8004138:	eb42 0303 	adc.w	r3, r2, r3
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004146:	f7fc f903 	bl	8000350 <__aeabi_uldivmod>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4b0d      	ldr	r3, [pc, #52]	@ (8004184 <UART_SetConfig+0x2d4>)
 8004150:	fba3 1302 	umull	r1, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	2164      	movs	r1, #100	@ 0x64
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	3332      	adds	r3, #50	@ 0x32
 8004162:	4a08      	ldr	r2, [pc, #32]	@ (8004184 <UART_SetConfig+0x2d4>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	f003 0207 	and.w	r2, r3, #7
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4422      	add	r2, r4
 8004176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004178:	e106      	b.n	8004388 <UART_SetConfig+0x4d8>
 800417a:	bf00      	nop
 800417c:	40011000 	.word	0x40011000
 8004180:	40011400 	.word	0x40011400
 8004184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004192:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800419a:	4642      	mov	r2, r8
 800419c:	464b      	mov	r3, r9
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	6239      	str	r1, [r7, #32]
 80041a2:	415b      	adcs	r3, r3
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041aa:	4641      	mov	r1, r8
 80041ac:	1854      	adds	r4, r2, r1
 80041ae:	4649      	mov	r1, r9
 80041b0:	eb43 0501 	adc.w	r5, r3, r1
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	00eb      	lsls	r3, r5, #3
 80041be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c2:	00e2      	lsls	r2, r4, #3
 80041c4:	4614      	mov	r4, r2
 80041c6:	461d      	mov	r5, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	18e3      	adds	r3, r4, r3
 80041cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041d0:	464b      	mov	r3, r9
 80041d2:	eb45 0303 	adc.w	r3, r5, r3
 80041d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041f6:	4629      	mov	r1, r5
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	4621      	mov	r1, r4
 80041fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004200:	4621      	mov	r1, r4
 8004202:	008a      	lsls	r2, r1, #2
 8004204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004208:	f7fc f8a2 	bl	8000350 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4b60      	ldr	r3, [pc, #384]	@ (8004394 <UART_SetConfig+0x4e4>)
 8004212:	fba3 2302 	umull	r2, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	011c      	lsls	r4, r3, #4
 800421a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004224:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	1891      	adds	r1, r2, r2
 8004232:	61b9      	str	r1, [r7, #24]
 8004234:	415b      	adcs	r3, r3
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423c:	4641      	mov	r1, r8
 800423e:	1851      	adds	r1, r2, r1
 8004240:	6139      	str	r1, [r7, #16]
 8004242:	4649      	mov	r1, r9
 8004244:	414b      	adcs	r3, r1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004254:	4659      	mov	r1, fp
 8004256:	00cb      	lsls	r3, r1, #3
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425e:	4651      	mov	r1, sl
 8004260:	00ca      	lsls	r2, r1, #3
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	4603      	mov	r3, r0
 8004268:	4642      	mov	r2, r8
 800426a:	189b      	adds	r3, r3, r2
 800426c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004270:	464b      	mov	r3, r9
 8004272:	460a      	mov	r2, r1
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004286:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004294:	4649      	mov	r1, r9
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	4641      	mov	r1, r8
 800429a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429e:	4641      	mov	r1, r8
 80042a0:	008a      	lsls	r2, r1, #2
 80042a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042a6:	f7fc f853 	bl	8000350 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <UART_SetConfig+0x4e4>)
 80042b2:	fba3 2301 	umull	r2, r3, r3, r1
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2264      	movs	r2, #100	@ 0x64
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	1acb      	subs	r3, r1, r3
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	3332      	adds	r3, #50	@ 0x32
 80042c4:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <UART_SetConfig+0x4e4>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d0:	441c      	add	r4, r3
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042da:	677a      	str	r2, [r7, #116]	@ 0x74
 80042dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	415b      	adcs	r3, r3
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f0:	4641      	mov	r1, r8
 80042f2:	1851      	adds	r1, r2, r1
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	4649      	mov	r1, r9
 80042f8:	414b      	adcs	r3, r1
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004308:	4659      	mov	r1, fp
 800430a:	00cb      	lsls	r3, r1, #3
 800430c:	4651      	mov	r1, sl
 800430e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004312:	4651      	mov	r1, sl
 8004314:	00ca      	lsls	r2, r1, #3
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	4603      	mov	r3, r0
 800431c:	4642      	mov	r2, r8
 800431e:	189b      	adds	r3, r3, r2
 8004320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004322:	464b      	mov	r3, r9
 8004324:	460a      	mov	r2, r1
 8004326:	eb42 0303 	adc.w	r3, r2, r3
 800432a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	663b      	str	r3, [r7, #96]	@ 0x60
 8004336:	667a      	str	r2, [r7, #100]	@ 0x64
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004344:	4649      	mov	r1, r9
 8004346:	008b      	lsls	r3, r1, #2
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434e:	4641      	mov	r1, r8
 8004350:	008a      	lsls	r2, r1, #2
 8004352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004356:	f7fb fffb 	bl	8000350 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <UART_SetConfig+0x4e4>)
 8004360:	fba3 1302 	umull	r1, r3, r3, r2
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	2164      	movs	r1, #100	@ 0x64
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	3332      	adds	r3, #50	@ 0x32
 8004372:	4a08      	ldr	r2, [pc, #32]	@ (8004394 <UART_SetConfig+0x4e4>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4422      	add	r2, r4
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800438e:	46bd      	mov	sp, r7
 8004390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004394:	51eb851f 	.word	0x51eb851f

08004398 <__NVIC_SetPriority>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	db0a      	blt.n	80043c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	490c      	ldr	r1, [pc, #48]	@ (80043e4 <__NVIC_SetPriority+0x4c>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	0112      	lsls	r2, r2, #4
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	440b      	add	r3, r1
 80043bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043c0:	e00a      	b.n	80043d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4908      	ldr	r1, [pc, #32]	@ (80043e8 <__NVIC_SetPriority+0x50>)
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	3b04      	subs	r3, #4
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	440b      	add	r3, r1
 80043d6:	761a      	strb	r2, [r3, #24]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000e100 	.word	0xe000e100
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043f0:	2100      	movs	r1, #0
 80043f2:	f06f 0004 	mvn.w	r0, #4
 80043f6:	f7ff ffcf 	bl	8004398 <__NVIC_SetPriority>
#endif
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	603b      	str	r3, [r7, #0]
  return(result);
 800440c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004412:	f06f 0305 	mvn.w	r3, #5
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	e00c      	b.n	8004434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <osKernelInitialize+0x44>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <osKernelInitialize+0x44>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004428:	2300      	movs	r3, #0
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	e002      	b.n	8004434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000466c 	.word	0x2000466c

08004448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800444e:	f3ef 8305 	mrs	r3, IPSR
 8004452:	603b      	str	r3, [r7, #0]
  return(result);
 8004454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800445a:	f06f 0305 	mvn.w	r3, #5
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e010      	b.n	8004484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004462:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <osKernelStart+0x48>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d109      	bne.n	800447e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800446a:	f7ff ffbf 	bl	80043ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800446e:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <osKernelStart+0x48>)
 8004470:	2202      	movs	r2, #2
 8004472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004474:	f001 f87a 	bl	800556c <vTaskStartScheduler>
      stat = osOK;
 8004478:	2300      	movs	r3, #0
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	e002      	b.n	8004484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004484:	687b      	ldr	r3, [r7, #4]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000466c 	.word	0x2000466c

08004494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b08e      	sub	sp, #56	@ 0x38
 8004498:	af04      	add	r7, sp, #16
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a4:	f3ef 8305 	mrs	r3, IPSR
 80044a8:	617b      	str	r3, [r7, #20]
  return(result);
 80044aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d17e      	bne.n	80045ae <osThreadNew+0x11a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d07b      	beq.n	80045ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ba:	2318      	movs	r3, #24
 80044bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d045      	beq.n	800455a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <osThreadNew+0x48>
        name = attr->name;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <osThreadNew+0x6e>
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b38      	cmp	r3, #56	@ 0x38
 80044f4:	d805      	bhi.n	8004502 <osThreadNew+0x6e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <osThreadNew+0x72>
        return (NULL);
 8004502:	2300      	movs	r3, #0
 8004504:	e054      	b.n	80045b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <osThreadNew+0xa8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2b5b      	cmp	r3, #91	@ 0x5b
 8004524:	d90a      	bls.n	800453c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <osThreadNew+0xa8>
        mem = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e010      	b.n	800455e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <osThreadNew+0xca>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <osThreadNew+0xca>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <osThreadNew+0xca>
          mem = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	e001      	b.n	800455e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d110      	bne.n	8004586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800456c:	9202      	str	r2, [sp, #8]
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6a3a      	ldr	r2, [r7, #32]
 8004578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fe1a 	bl	80051b4 <xTaskCreateStatic>
 8004580:	4603      	mov	r3, r0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e013      	b.n	80045ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d110      	bne.n	80045ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	b29a      	uxth	r2, r3
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fe68 	bl	8005274 <xTaskCreate>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <osThreadNew+0x11a>
            hTask = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045ae:	693b      	ldr	r3, [r7, #16]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3728      	adds	r7, #40	@ 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c0:	f3ef 8305 	mrs	r3, IPSR
 80045c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <osDelay+0x1c>
    stat = osErrorISR;
 80045cc:	f06f 0305 	mvn.w	r3, #5
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e007      	b.n	80045e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 ff8e 	bl	8005500 <vTaskDelay>
    }
  }

  return (stat);
 80045e4:	68fb      	ldr	r3, [r7, #12]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a07      	ldr	r2, [pc, #28]	@ (800461c <vApplicationGetIdleTaskMemory+0x2c>)
 8004600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a06      	ldr	r2, [pc, #24]	@ (8004620 <vApplicationGetIdleTaskMemory+0x30>)
 8004606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2280      	movs	r2, #128	@ 0x80
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20004670 	.word	0x20004670
 8004620:	200046cc 	.word	0x200046cc

08004624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a07      	ldr	r2, [pc, #28]	@ (8004650 <vApplicationGetTimerTaskMemory+0x2c>)
 8004634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4a06      	ldr	r2, [pc, #24]	@ (8004654 <vApplicationGetTimerTaskMemory+0x30>)
 800463a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	200048cc 	.word	0x200048cc
 8004654:	20004928 	.word	0x20004928

08004658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f103 0208 	add.w	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f103 0208 	add.w	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004710:	d103      	bne.n	800471a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e00c      	b.n	8004734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3308      	adds	r3, #8
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e002      	b.n	8004728 <vListInsert+0x2e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d2f6      	bcs.n	8004722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6892      	ldr	r2, [r2, #8]
 8004782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6852      	ldr	r2, [r2, #4]
 800478c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d103      	bne.n	80047a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericReset+0x2c>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60bb      	str	r3, [r7, #8]
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047ec:	f002 f8a4 	bl	8006938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481c:	3b01      	subs	r3, #1
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	@ 0xff
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	22ff      	movs	r2, #255	@ 0xff
 8004838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d114      	bne.n	800486c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01a      	beq.n	8004880 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3310      	adds	r3, #16
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f91a 	bl	8005a88 <xTaskRemoveFromEventList>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <xQueueGenericReset+0xd0>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e009      	b.n	8004880 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3310      	adds	r3, #16
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fef1 	bl	8004658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3324      	adds	r3, #36	@ 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff feec 	bl	8004658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004880:	f002 f88c 	bl	800699c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004884:	2301      	movs	r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	@ 0x38
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <xQueueGenericCreateStatic+0x56>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xQueueGenericCreateStatic+0x5a>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueGenericCreateStatic+0x5c>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <xQueueGenericCreateStatic+0x84>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <xQueueGenericCreateStatic+0x88>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <xQueueGenericCreateStatic+0x8a>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	61fb      	str	r3, [r7, #28]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800493a:	2350      	movs	r3, #80	@ 0x50
 800493c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b50      	cmp	r3, #80	@ 0x50
 8004942:	d00b      	beq.n	800495c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	61bb      	str	r3, [r7, #24]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800495c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004970:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f805 	bl	800498e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	@ 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e002      	b.n	80049b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049bc:	2101      	movs	r1, #1
 80049be:	69b8      	ldr	r0, [r7, #24]
 80049c0:	f7ff fefe 	bl	80047c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	@ 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueGenericSend+0x34>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericSend+0x42>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <xQueueGenericSend+0x46>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <xQueueGenericSend+0x48>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xQueueGenericSend+0x64>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSend+0x72>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericSend+0x76>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericSend+0x78>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <xQueueGenericSend+0x94>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a68:	f001 f9f6 	bl	8005e58 <xTaskGetSchedulerState>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <xQueueGenericSend+0xa4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <xQueueGenericSend+0xa8>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <xQueueGenericSend+0xaa>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <xQueueGenericSend+0xc6>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	61fb      	str	r3, [r7, #28]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a9a:	f001 ff4d 	bl	8006938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <xQueueGenericSend+0xdc>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d129      	bne.n	8004b04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ab6:	f000 fa0f 	bl	8004ed8 <prvCopyDataToQueue>
 8004aba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	3324      	adds	r3, #36	@ 0x24
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 ffdd 	bl	8005a88 <xTaskRemoveFromEventList>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd4 <xQueueGenericSend+0x200>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	e00a      	b.n	8004afc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004aec:	4b39      	ldr	r3, [pc, #228]	@ (8004bd4 <xQueueGenericSend+0x200>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004afc:	f001 ff4e 	bl	800699c <vPortExitCritical>
				return pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e063      	b.n	8004bcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b0a:	f001 ff47 	bl	800699c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e05c      	b.n	8004bcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 f83f 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b26:	f001 ff39 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2a:	f000 fd87 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b2e:	f001 ff03 	bl	8006938 <vPortEnterCritical>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b38:	b25b      	sxtb	r3, r3
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b3e:	d103      	bne.n	8004b48 <xQueueGenericSend+0x174>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b54:	d103      	bne.n	8004b5e <xQueueGenericSend+0x18a>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b5e:	f001 ff1d 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b62:	1d3a      	adds	r2, r7, #4
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 f82e 	bl	8005bcc <xTaskCheckForTimeOut>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d124      	bne.n	8004bc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b78:	f000 faa6 	bl	80050c8 <prvIsQueueFull>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d018      	beq.n	8004bb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	3310      	adds	r3, #16
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ff2a 	bl	80059e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b92:	f000 fa31 	bl	8004ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b96:	f000 fd5f 	bl	8005658 <xTaskResumeAll>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f47f af7c 	bne.w	8004a9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <xQueueGenericSend+0x200>)
 8004ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	e772      	b.n	8004a9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bb6:	f000 fa1f 	bl	8004ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bba:	f000 fd4d 	bl	8005658 <xTaskResumeAll>
 8004bbe:	e76c      	b.n	8004a9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bc2:	f000 fa19 	bl	8004ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc6:	f000 fd47 	bl	8005658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3738      	adds	r7, #56	@ 0x38
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b090      	sub	sp, #64	@ 0x40
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <xQueueGenericSendFromISR+0x3e>
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <xQueueGenericSendFromISR+0x42>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueGenericSendFromISR+0x44>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d103      	bne.n	8004c46 <xQueueGenericSendFromISR+0x6e>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <xQueueGenericSendFromISR+0x72>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <xQueueGenericSendFromISR+0x74>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	623b      	str	r3, [r7, #32]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c68:	f001 ff46 	bl	8006af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c6c:	f3ef 8211 	mrs	r2, BASEPRI
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61fa      	str	r2, [r7, #28]
 8004c82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <xQueueGenericSendFromISR+0xc2>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d12f      	bne.n	8004cfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cb0:	f000 f912 	bl	8004ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cbc:	d112      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc8:	3324      	adds	r3, #36	@ 0x24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fedc 	bl	8005a88 <xTaskRemoveFromEventList>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00e      	beq.n	8004cf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e007      	b.n	8004cf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ce8:	3301      	adds	r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	b25a      	sxtb	r2, r3
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004cf8:	e001      	b.n	8004cfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3740      	adds	r7, #64	@ 0x40
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	@ 0x30
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <xQueueReceive+0x32>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	623b      	str	r3, [r7, #32]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <xQueueReceive+0x40>
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <xQueueReceive+0x44>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <xQueueReceive+0x46>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <xQueueReceive+0x62>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	61fb      	str	r3, [r7, #28]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d76:	f001 f86f 	bl	8005e58 <xTaskGetSchedulerState>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <xQueueReceive+0x72>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <xQueueReceive+0x76>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <xQueueReceive+0x78>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueReceive+0x94>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	61bb      	str	r3, [r7, #24]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004da8:	f001 fdc6 	bl	8006938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01f      	beq.n	8004df8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dbc:	f000 f8f6 	bl	8004fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00f      	beq.n	8004df0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fe57 	bl	8005a88 <xTaskRemoveFromEventList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004de0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ed4 <xQueueReceive+0x1c0>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004df0:	f001 fdd4 	bl	800699c <vPortExitCritical>
				return pdPASS;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e069      	b.n	8004ecc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dfe:	f001 fdcd 	bl	800699c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e062      	b.n	8004ecc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fec5 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e1a:	f001 fdbf 	bl	800699c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e1e:	f000 fc0d 	bl	800563c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e22:	f001 fd89 	bl	8006938 <vPortEnterCritical>
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e32:	d103      	bne.n	8004e3c <xQueueReceive+0x128>
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e48:	d103      	bne.n	8004e52 <xQueueReceive+0x13e>
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e52:	f001 fda3 	bl	800699c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e56:	1d3a      	adds	r2, r7, #4
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 feb4 	bl	8005bcc <xTaskCheckForTimeOut>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d123      	bne.n	8004eb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6c:	f000 f916 	bl	800509c <prvIsQueueEmpty>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	3324      	adds	r3, #36	@ 0x24
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fdb0 	bl	80059e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e86:	f000 f8b7 	bl	8004ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e8a:	f000 fbe5 	bl	8005658 <xTaskResumeAll>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d189      	bne.n	8004da8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed4 <xQueueReceive+0x1c0>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	e780      	b.n	8004da8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea8:	f000 f8a6 	bl	8004ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eac:	f000 fbd4 	bl	8005658 <xTaskResumeAll>
 8004eb0:	e77a      	b.n	8004da8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb4:	f000 f8a0 	bl	8004ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eb8:	f000 fbce 	bl	8005658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebe:	f000 f8ed 	bl	800509c <prvIsQueueEmpty>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f43f af6f 	beq.w	8004da8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d14d      	bne.n	8004f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 ffc6 	bl	8005e94 <xTaskPriorityDisinherit>
 8004f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	e043      	b.n	8004f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d119      	bne.n	8004f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6858      	ldr	r0, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	461a      	mov	r2, r3
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	f00e fadb 	bl	80134de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	441a      	add	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d32b      	bcc.n	8004f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	e026      	b.n	8004f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68d8      	ldr	r0, [r3, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	461a      	mov	r2, r3
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	f00e fac1 	bl	80134de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	425b      	negs	r3, r3
 8004f66:	441a      	add	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d207      	bcs.n	8004f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	425b      	negs	r3, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d105      	bne.n	8004f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fa2:	697b      	ldr	r3, [r7, #20]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d018      	beq.n	8004ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	441a      	add	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d303      	bcc.n	8004fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68d9      	ldr	r1, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6838      	ldr	r0, [r7, #0]
 8004fec:	f00e fa77 	bl	80134de <memcpy>
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005000:	f001 fc9a 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800500a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800500c:	e011      	b.n	8005032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d012      	beq.n	800503c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3324      	adds	r3, #36	@ 0x24
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fd34 	bl	8005a88 <xTaskRemoveFromEventList>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005026:	f000 fe35 	bl	8005c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	3b01      	subs	r3, #1
 800502e:	b2db      	uxtb	r3, r3
 8005030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	dce9      	bgt.n	800500e <prvUnlockQueue+0x16>
 800503a:	e000      	b.n	800503e <prvUnlockQueue+0x46>
					break;
 800503c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	22ff      	movs	r2, #255	@ 0xff
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005046:	f001 fca9 	bl	800699c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800504a:	f001 fc75 	bl	8006938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005056:	e011      	b.n	800507c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3310      	adds	r3, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd0f 	bl	8005a88 <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005070:	f000 fe10 	bl	8005c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	3b01      	subs	r3, #1
 8005078:	b2db      	uxtb	r3, r3
 800507a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800507c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005080:	2b00      	cmp	r3, #0
 8005082:	dce9      	bgt.n	8005058 <prvUnlockQueue+0x60>
 8005084:	e000      	b.n	8005088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	22ff      	movs	r2, #255	@ 0xff
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005090:	f001 fc84 	bl	800699c <vPortExitCritical>
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050a4:	f001 fc48 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e001      	b.n	80050ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ba:	f001 fc6f 	bl	800699c <vPortExitCritical>

	return xReturn;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050d0:	f001 fc32 	bl	8006938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d102      	bne.n	80050e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e001      	b.n	80050ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ea:	f001 fc57 	bl	800699c <vPortExitCritical>

	return xReturn;
 80050ee:	68fb      	ldr	r3, [r7, #12]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e014      	b.n	8005132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005108:	4a0f      	ldr	r2, [pc, #60]	@ (8005148 <vQueueAddToRegistry+0x50>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005114:	490c      	ldr	r1, [pc, #48]	@ (8005148 <vQueueAddToRegistry+0x50>)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <vQueueAddToRegistry+0x50>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800512a:	e006      	b.n	800513a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b07      	cmp	r3, #7
 8005136:	d9e7      	bls.n	8005108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20004d28 	.word	0x20004d28

0800514c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800515c:	f001 fbec 	bl	8006938 <vPortEnterCritical>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005166:	b25b      	sxtb	r3, r3
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800516c:	d103      	bne.n	8005176 <vQueueWaitForMessageRestricted+0x2a>
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800517c:	b25b      	sxtb	r3, r3
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005182:	d103      	bne.n	800518c <vQueueWaitForMessageRestricted+0x40>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800518c:	f001 fc06 	bl	800699c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3324      	adds	r3, #36	@ 0x24
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fc45 	bl	8005a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f7ff ff26 	bl	8004ff8 <prvUnlockQueue>
	}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08e      	sub	sp, #56	@ 0x38
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	623b      	str	r3, [r7, #32]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61fb      	str	r3, [r7, #28]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fe:	235c      	movs	r3, #92	@ 0x5c
 8005200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b5c      	cmp	r3, #92	@ 0x5c
 8005206:	d00b      	beq.n	8005220 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61bb      	str	r3, [r7, #24]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01e      	beq.n	8005266 <xTaskCreateStatic+0xb2>
 8005228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005240:	2300      	movs	r3, #0
 8005242:	9303      	str	r3, [sp, #12]
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f850 	bl	80052fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800525e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005260:	f000 f8de 	bl	8005420 <prvAddNewTaskToReadyList>
 8005264:	e001      	b.n	800526a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
	}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	@ 0x30
 8005278:	af04      	add	r7, sp, #16
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fc77 	bl	8006b7c <pvPortMalloc>
 800528e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005296:	205c      	movs	r0, #92	@ 0x5c
 8005298:	f001 fc70 	bl	8006b7c <pvPortMalloc>
 800529c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80052aa:	e005      	b.n	80052b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f001 fd33 	bl	8006d18 <vPortFree>
 80052b2:	e001      	b.n	80052b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d017      	beq.n	80052ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	2300      	movs	r3, #0
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f80e 	bl	80052fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052e2:	69f8      	ldr	r0, [r7, #28]
 80052e4:	f000 f89c 	bl	8005420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	e002      	b.n	80052f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052f4:	69bb      	ldr	r3, [r7, #24]
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b088      	sub	sp, #32
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	461a      	mov	r2, r3
 8005316:	21a5      	movs	r1, #165	@ 0xa5
 8005318:	f00e f818 	bl	801334c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005326:	3b01      	subs	r3, #1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	617b      	str	r3, [r7, #20]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01f      	beq.n	800539e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e012      	b.n	800538a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	7819      	ldrb	r1, [r3, #0]
 800536c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	3334      	adds	r3, #52	@ 0x34
 8005374:	460a      	mov	r2, r1
 8005376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d9e9      	bls.n	8005364 <prvInitialiseNewTask+0x66>
 8005390:	e000      	b.n	8005394 <prvInitialiseNewTask+0x96>
			{
				break;
 8005392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800539c:	e003      	b.n	80053a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b37      	cmp	r3, #55	@ 0x37
 80053aa:	d901      	bls.n	80053b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053ac:	2337      	movs	r3, #55	@ 0x37
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	2200      	movs	r2, #0
 80053c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	3304      	adds	r3, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f966 	bl	8004698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	3318      	adds	r3, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f961 	bl	8004698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	69b8      	ldr	r0, [r7, #24]
 8005400:	f001 f966 	bl	80066d0 <pxPortInitialiseStack>
 8005404:	4602      	mov	r2, r0
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005416:	bf00      	nop
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005428:	f001 fa86 	bl	8006938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800542c:	4b2d      	ldr	r3, [pc, #180]	@ (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a2c      	ldr	r2, [pc, #176]	@ (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 8005434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005436:	4b2c      	ldr	r3, [pc, #176]	@ (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800543e:	4a2a      	ldr	r2, [pc, #168]	@ (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005444:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d110      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800544c:	f000 fc46 	bl	8005cdc <prvInitialiseTaskLists>
 8005450:	e00d      	b.n	800546e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005452:	4b26      	ldr	r3, [pc, #152]	@ (80054ec <prvAddNewTaskToReadyList+0xcc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d802      	bhi.n	800546e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005468:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800546e:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a1e      	ldr	r2, [pc, #120]	@ (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 8005476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005478:	4b1d      	ldr	r3, [pc, #116]	@ (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <prvAddNewTaskToReadyList+0xd4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d903      	bls.n	8005494 <prvAddNewTaskToReadyList+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <prvAddNewTaskToReadyList+0xd4>)
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <prvAddNewTaskToReadyList+0xd8>)
 80054a2:	441a      	add	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7ff f901 	bl	80046b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054b0:	f001 fa74 	bl	800699c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054b4:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <prvAddNewTaskToReadyList+0xcc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054bc:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d207      	bcs.n	80054da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ca:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <prvAddNewTaskToReadyList+0xdc>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2000523c 	.word	0x2000523c
 80054e8:	20004d68 	.word	0x20004d68
 80054ec:	20005248 	.word	0x20005248
 80054f0:	20005258 	.word	0x20005258
 80054f4:	20005244 	.word	0x20005244
 80054f8:	20004d6c 	.word	0x20004d6c
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <vTaskDelay+0x64>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <vTaskDelay+0x32>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60bb      	str	r3, [r7, #8]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005532:	f000 f883 	bl	800563c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005536:	2100      	movs	r1, #0
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fd1b 	bl	8005f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800553e:	f000 f88b 	bl	8005658 <xTaskResumeAll>
 8005542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800554a:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <vTaskDelay+0x68>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20005264 	.word	0x20005264
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	@ 0x28
 8005570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800557a:	463a      	mov	r2, r7
 800557c:	1d39      	adds	r1, r7, #4
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f834 	bl	80045f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	2300      	movs	r3, #0
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	460a      	mov	r2, r1
 800559a:	4922      	ldr	r1, [pc, #136]	@ (8005624 <vTaskStartScheduler+0xb8>)
 800559c:	4822      	ldr	r0, [pc, #136]	@ (8005628 <vTaskStartScheduler+0xbc>)
 800559e:	f7ff fe09 	bl	80051b4 <xTaskCreateStatic>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <vTaskStartScheduler+0xc0>)
 80055a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055a8:	4b20      	ldr	r3, [pc, #128]	@ (800562c <vTaskStartScheduler+0xc0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b0:	2301      	movs	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e001      	b.n	80055ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d102      	bne.n	80055c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055c0:	f000 fd2c 	bl	800601c <xTimerCreateTimerTask>
 80055c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d116      	bne.n	80055fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e0:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <vTaskStartScheduler+0xc4>)
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055e8:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <vTaskStartScheduler+0xc8>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <vTaskStartScheduler+0xcc>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055f4:	f001 f8fc 	bl	80067f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055f8:	e00f      	b.n	800561a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005600:	d10b      	bne.n	800561a <vTaskStartScheduler+0xae>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <vTaskStartScheduler+0xaa>
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	080142f0 	.word	0x080142f0
 8005628:	08005cad 	.word	0x08005cad
 800562c:	20005260 	.word	0x20005260
 8005630:	2000525c 	.word	0x2000525c
 8005634:	20005248 	.word	0x20005248
 8005638:	20005240 	.word	0x20005240

0800563c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005640:	4b04      	ldr	r3, [pc, #16]	@ (8005654 <vTaskSuspendAll+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a03      	ldr	r2, [pc, #12]	@ (8005654 <vTaskSuspendAll+0x18>)
 8005648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20005264 	.word	0x20005264

08005658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005666:	4b42      	ldr	r3, [pc, #264]	@ (8005770 <xTaskResumeAll+0x118>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <xTaskResumeAll+0x2e>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005686:	f001 f957 	bl	8006938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800568a:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <xTaskResumeAll+0x118>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3b01      	subs	r3, #1
 8005690:	4a37      	ldr	r2, [pc, #220]	@ (8005770 <xTaskResumeAll+0x118>)
 8005692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <xTaskResumeAll+0x118>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d162      	bne.n	8005762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800569c:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <xTaskResumeAll+0x11c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d05e      	beq.n	8005762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a4:	e02f      	b.n	8005706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a6:	4b34      	ldr	r3, [pc, #208]	@ (8005778 <xTaskResumeAll+0x120>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f85a 	bl	800476c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f855 	bl	800476c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c6:	4b2d      	ldr	r3, [pc, #180]	@ (800577c <xTaskResumeAll+0x124>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d903      	bls.n	80056d6 <xTaskResumeAll+0x7e>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	4a2a      	ldr	r2, [pc, #168]	@ (800577c <xTaskResumeAll+0x124>)
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <xTaskResumeAll+0x128>)
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe ffe0 	bl	80046b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <xTaskResumeAll+0x12c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005700:	4b21      	ldr	r3, [pc, #132]	@ (8005788 <xTaskResumeAll+0x130>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005706:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <xTaskResumeAll+0x120>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cb      	bne.n	80056a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005714:	f000 fb80 	bl	8005e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005718:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <xTaskResumeAll+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005724:	f000 f846 	bl	80057b4 <xTaskIncrementTick>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800572e:	4b16      	ldr	r3, [pc, #88]	@ (8005788 <xTaskResumeAll+0x130>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3b01      	subs	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f1      	bne.n	8005724 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005740:	4b12      	ldr	r3, [pc, #72]	@ (800578c <xTaskResumeAll+0x134>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <xTaskResumeAll+0x130>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800574e:	2301      	movs	r3, #1
 8005750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005752:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <xTaskResumeAll+0x138>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005762:	f001 f91b 	bl	800699c <vPortExitCritical>

	return xAlreadyYielded;
 8005766:	68bb      	ldr	r3, [r7, #8]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20005264 	.word	0x20005264
 8005774:	2000523c 	.word	0x2000523c
 8005778:	200051fc 	.word	0x200051fc
 800577c:	20005244 	.word	0x20005244
 8005780:	20004d6c 	.word	0x20004d6c
 8005784:	20004d68 	.word	0x20004d68
 8005788:	20005250 	.word	0x20005250
 800578c:	2000524c 	.word	0x2000524c
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <xTaskGetTickCount+0x1c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057a0:	687b      	ldr	r3, [r7, #4]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20005240 	.word	0x20005240

080057b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057be:	4b4f      	ldr	r3, [pc, #316]	@ (80058fc <xTaskIncrementTick+0x148>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8090 	bne.w	80058e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005900 <xTaskIncrementTick+0x14c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005900 <xTaskIncrementTick+0x14c>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d121      	bne.n	8005820 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057dc:	4b49      	ldr	r3, [pc, #292]	@ (8005904 <xTaskIncrementTick+0x150>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	603b      	str	r3, [r7, #0]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <xTaskIncrementTick+0x46>
 80057fe:	4b41      	ldr	r3, [pc, #260]	@ (8005904 <xTaskIncrementTick+0x150>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	4b40      	ldr	r3, [pc, #256]	@ (8005908 <xTaskIncrementTick+0x154>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a3e      	ldr	r2, [pc, #248]	@ (8005904 <xTaskIncrementTick+0x150>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4a3e      	ldr	r2, [pc, #248]	@ (8005908 <xTaskIncrementTick+0x154>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b3e      	ldr	r3, [pc, #248]	@ (800590c <xTaskIncrementTick+0x158>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	4a3c      	ldr	r2, [pc, #240]	@ (800590c <xTaskIncrementTick+0x158>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	f000 fafc 	bl	8005e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005820:	4b3b      	ldr	r3, [pc, #236]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	d349      	bcc.n	80058be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582a:	4b36      	ldr	r3, [pc, #216]	@ (8005904 <xTaskIncrementTick+0x150>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800583a:	601a      	str	r2, [r3, #0]
					break;
 800583c:	e03f      	b.n	80058be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <xTaskIncrementTick+0x150>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d203      	bcs.n	800585e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005856:	4a2e      	ldr	r2, [pc, #184]	@ (8005910 <xTaskIncrementTick+0x15c>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800585c:	e02f      	b.n	80058be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe ff82 	bl	800476c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	3318      	adds	r3, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ff79 	bl	800476c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <xTaskIncrementTick+0x160>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d903      	bls.n	800588e <xTaskIncrementTick+0xda>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	4a22      	ldr	r2, [pc, #136]	@ (8005914 <xTaskIncrementTick+0x160>)
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4a1f      	ldr	r2, [pc, #124]	@ (8005918 <xTaskIncrementTick+0x164>)
 800589c:	441a      	add	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7fe ff04 	bl	80046b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <xTaskIncrementTick+0x168>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3b8      	bcc.n	800582a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058bc:	e7b5      	b.n	800582a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058be:	4b17      	ldr	r3, [pc, #92]	@ (800591c <xTaskIncrementTick+0x168>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4914      	ldr	r1, [pc, #80]	@ (8005918 <xTaskIncrementTick+0x164>)
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d901      	bls.n	80058da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058da:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <xTaskIncrementTick+0x16c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e004      	b.n	80058f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <xTaskIncrementTick+0x170>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005924 <xTaskIncrementTick+0x170>)
 80058f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20005264 	.word	0x20005264
 8005900:	20005240 	.word	0x20005240
 8005904:	200051f4 	.word	0x200051f4
 8005908:	200051f8 	.word	0x200051f8
 800590c:	20005254 	.word	0x20005254
 8005910:	2000525c 	.word	0x2000525c
 8005914:	20005244 	.word	0x20005244
 8005918:	20004d6c 	.word	0x20004d6c
 800591c:	20004d68 	.word	0x20004d68
 8005920:	20005250 	.word	0x20005250
 8005924:	2000524c 	.word	0x2000524c

08005928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592e:	4b28      	ldr	r3, [pc, #160]	@ (80059d0 <vTaskSwitchContext+0xa8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005936:	4b27      	ldr	r3, [pc, #156]	@ (80059d4 <vTaskSwitchContext+0xac>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800593c:	e042      	b.n	80059c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800593e:	4b25      	ldr	r3, [pc, #148]	@ (80059d4 <vTaskSwitchContext+0xac>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <vTaskSwitchContext+0xb0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e011      	b.n	8005970 <vTaskSwitchContext+0x48>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <vTaskSwitchContext+0x42>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <vTaskSwitchContext+0x3e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b01      	subs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	491a      	ldr	r1, [pc, #104]	@ (80059dc <vTaskSwitchContext+0xb4>)
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0e3      	beq.n	800594c <vTaskSwitchContext+0x24>
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a13      	ldr	r2, [pc, #76]	@ (80059dc <vTaskSwitchContext+0xb4>)
 8005990:	4413      	add	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3308      	adds	r3, #8
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d104      	bne.n	80059b4 <vTaskSwitchContext+0x8c>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4a09      	ldr	r2, [pc, #36]	@ (80059e0 <vTaskSwitchContext+0xb8>)
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4a06      	ldr	r2, [pc, #24]	@ (80059d8 <vTaskSwitchContext+0xb0>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6013      	str	r3, [r2, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20005264 	.word	0x20005264
 80059d4:	20005250 	.word	0x20005250
 80059d8:	20005244 	.word	0x20005244
 80059dc:	20004d6c 	.word	0x20004d6c
 80059e0:	20004d68 	.word	0x20004d68

080059e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60fb      	str	r3, [r7, #12]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <vTaskPlaceOnEventList+0x48>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fe fe70 	bl	80046fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f000 faa9 	bl	8005f74 <prvAddCurrentTaskToDelayedList>
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20004d68 	.word	0x20004d68

08005a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	617b      	str	r3, [r7, #20]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4619      	mov	r1, r3
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7fe fe25 	bl	80046b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	f000 fa7c 	bl	8005f74 <prvAddCurrentTaskToDelayedList>
	}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20004d68 	.word	0x20004d68

08005a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60fb      	str	r3, [r7, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe56 	bl	800476c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <xTaskRemoveFromEventList+0xb0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11d      	bne.n	8005b04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fe4d 	bl	800476c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d903      	bls.n	8005ae6 <xTaskRemoveFromEventList+0x5e>
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4a13      	ldr	r2, [pc, #76]	@ (8005b40 <xTaskRemoveFromEventList+0xb8>)
 8005af4:	441a      	add	r2, r3
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f7fe fdd8 	bl	80046b2 <vListInsertEnd>
 8005b02:	e005      	b.n	8005b10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4619      	mov	r1, r3
 8005b0a:	480e      	ldr	r0, [pc, #56]	@ (8005b44 <xTaskRemoveFromEventList+0xbc>)
 8005b0c:	f7fe fdd1 	bl	80046b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <xTaskRemoveFromEventList+0xc0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d905      	bls.n	8005b2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <xTaskRemoveFromEventList+0xc4>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e001      	b.n	8005b2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b2e:	697b      	ldr	r3, [r7, #20]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20005264 	.word	0x20005264
 8005b3c:	20005244 	.word	0x20005244
 8005b40:	20004d6c 	.word	0x20004d6c
 8005b44:	200051fc 	.word	0x200051fc
 8005b48:	20004d68 	.word	0x20004d68
 8005b4c:	20005250 	.word	0x20005250

08005b50 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005b76:	f000 fedf 	bl	8006938 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b7a:	4b07      	ldr	r3, [pc, #28]	@ (8005b98 <vTaskSetTimeOutState+0x48>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <vTaskSetTimeOutState+0x4c>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005b8a:	f000 ff07 	bl	800699c <vPortExitCritical>
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20005254 	.word	0x20005254
 8005b9c:	20005240 	.word	0x20005240

08005ba0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <vTaskInternalSetTimeOutState+0x24>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <vTaskInternalSetTimeOutState+0x28>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20005254 	.word	0x20005254
 8005bc8:	20005240 	.word	0x20005240

08005bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60fb      	str	r3, [r7, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	e7fd      	b.n	8005c0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c12:	f000 fe91 	bl	8006938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <xTaskCheckForTimeOut+0xc0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c2e:	d102      	bne.n	8005c36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	e023      	b.n	8005c7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <xTaskCheckForTimeOut+0xc4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d007      	beq.n	8005c52 <xTaskCheckForTimeOut+0x86>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d302      	bcc.n	8005c52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e015      	b.n	8005c7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d20b      	bcs.n	8005c74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff ff99 	bl	8005ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e004      	b.n	8005c7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c7e:	f000 fe8d 	bl	800699c <vPortExitCritical>

	return xReturn;
 8005c82:	69fb      	ldr	r3, [r7, #28]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20005240 	.word	0x20005240
 8005c90:	20005254 	.word	0x20005254

08005c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <vTaskMissedYield+0x14>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20005250 	.word	0x20005250

08005cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cb4:	f000 f852 	bl	8005d5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cb8:	4b06      	ldr	r3, [pc, #24]	@ (8005cd4 <prvIdleTask+0x28>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d9f9      	bls.n	8005cb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cc0:	4b05      	ldr	r3, [pc, #20]	@ (8005cd8 <prvIdleTask+0x2c>)
 8005cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cd0:	e7f0      	b.n	8005cb4 <prvIdleTask+0x8>
 8005cd2:	bf00      	nop
 8005cd4:	20004d6c 	.word	0x20004d6c
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	e00c      	b.n	8005d02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <prvInitialiseTaskLists+0x60>)
 8005cf4:	4413      	add	r3, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fcae 	bl	8004658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b37      	cmp	r3, #55	@ 0x37
 8005d06:	d9ef      	bls.n	8005ce8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d08:	480d      	ldr	r0, [pc, #52]	@ (8005d40 <prvInitialiseTaskLists+0x64>)
 8005d0a:	f7fe fca5 	bl	8004658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d0e:	480d      	ldr	r0, [pc, #52]	@ (8005d44 <prvInitialiseTaskLists+0x68>)
 8005d10:	f7fe fca2 	bl	8004658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d14:	480c      	ldr	r0, [pc, #48]	@ (8005d48 <prvInitialiseTaskLists+0x6c>)
 8005d16:	f7fe fc9f 	bl	8004658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d1a:	480c      	ldr	r0, [pc, #48]	@ (8005d4c <prvInitialiseTaskLists+0x70>)
 8005d1c:	f7fe fc9c 	bl	8004658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d20:	480b      	ldr	r0, [pc, #44]	@ (8005d50 <prvInitialiseTaskLists+0x74>)
 8005d22:	f7fe fc99 	bl	8004658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <prvInitialiseTaskLists+0x78>)
 8005d28:	4a05      	ldr	r2, [pc, #20]	@ (8005d40 <prvInitialiseTaskLists+0x64>)
 8005d2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <prvInitialiseTaskLists+0x7c>)
 8005d2e:	4a05      	ldr	r2, [pc, #20]	@ (8005d44 <prvInitialiseTaskLists+0x68>)
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20004d6c 	.word	0x20004d6c
 8005d40:	200051cc 	.word	0x200051cc
 8005d44:	200051e0 	.word	0x200051e0
 8005d48:	200051fc 	.word	0x200051fc
 8005d4c:	20005210 	.word	0x20005210
 8005d50:	20005228 	.word	0x20005228
 8005d54:	200051f4 	.word	0x200051f4
 8005d58:	200051f8 	.word	0x200051f8

08005d5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d62:	e019      	b.n	8005d98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d64:	f000 fde8 	bl	8006938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d68:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <prvCheckTasksWaitingTermination+0x50>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fcf9 	bl	800476c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <prvCheckTasksWaitingTermination+0x54>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	4a0b      	ldr	r2, [pc, #44]	@ (8005db0 <prvCheckTasksWaitingTermination+0x54>)
 8005d82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d84:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <prvCheckTasksWaitingTermination+0x58>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <prvCheckTasksWaitingTermination+0x58>)
 8005d8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d8e:	f000 fe05 	bl	800699c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f810 	bl	8005db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d98:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <prvCheckTasksWaitingTermination+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e1      	bne.n	8005d64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20005210 	.word	0x20005210
 8005db0:	2000523c 	.word	0x2000523c
 8005db4:	20005224 	.word	0x20005224

08005db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d108      	bne.n	8005ddc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 ffa2 	bl	8006d18 <vPortFree>
				vPortFree( pxTCB );
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 ff9f 	bl	8006d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dda:	e019      	b.n	8005e10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d103      	bne.n	8005dee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 ff96 	bl	8006d18 <vPortFree>
	}
 8005dec:	e010      	b.n	8005e10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d00b      	beq.n	8005e10 <prvDeleteTCB+0x58>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60fb      	str	r3, [r7, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <prvDeleteTCB+0x54>
	}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <prvResetNextTaskUnblockTime+0x38>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e28:	4b0a      	ldr	r3, [pc, #40]	@ (8005e54 <prvResetNextTaskUnblockTime+0x3c>)
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e30:	e008      	b.n	8005e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <prvResetNextTaskUnblockTime+0x38>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <prvResetNextTaskUnblockTime+0x3c>)
 8005e42:	6013      	str	r3, [r2, #0]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200051f4 	.word	0x200051f4
 8005e54:	2000525c 	.word	0x2000525c

08005e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <xTaskGetSchedulerState+0x34>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e66:	2301      	movs	r3, #1
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e008      	b.n	8005e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6c:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <xTaskGetSchedulerState+0x38>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e74:	2302      	movs	r3, #2
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	e001      	b.n	8005e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e7e:	687b      	ldr	r3, [r7, #4]
	}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20005248 	.word	0x20005248
 8005e90:	20005264 	.word	0x20005264

08005e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d058      	beq.n	8005f5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005f68 <xTaskPriorityDisinherit+0xd4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d00b      	beq.n	8005ecc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60bb      	str	r3, [r7, #8]
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d02c      	beq.n	8005f5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d128      	bne.n	8005f5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fc2c 	bl	800476c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f6c <xTaskPriorityDisinherit+0xd8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d903      	bls.n	8005f3c <xTaskPriorityDisinherit+0xa8>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	4a0c      	ldr	r2, [pc, #48]	@ (8005f6c <xTaskPriorityDisinherit+0xd8>)
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <xTaskPriorityDisinherit+0xdc>)
 8005f4a:	441a      	add	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7fe fbad 	bl	80046b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f5c:	697b      	ldr	r3, [r7, #20]
	}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20004d68 	.word	0x20004d68
 8005f6c:	20005244 	.word	0x20005244
 8005f70:	20004d6c 	.word	0x20004d6c

08005f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f7e:	4b21      	ldr	r3, [pc, #132]	@ (8006004 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f84:	4b20      	ldr	r3, [pc, #128]	@ (8006008 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fbee 	bl	800476c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f96:	d10a      	bne.n	8005fae <prvAddCurrentTaskToDelayedList+0x3a>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006008 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4819      	ldr	r0, [pc, #100]	@ (800600c <prvAddCurrentTaskToDelayedList+0x98>)
 8005fa8:	f7fe fb83 	bl	80046b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fac:	e026      	b.n	8005ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fb6:	4b14      	ldr	r3, [pc, #80]	@ (8006008 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d209      	bcs.n	8005fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc6:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7fe fb91 	bl	80046fa <vListInsert>
}
 8005fd8:	e010      	b.n	8005ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fda:	4b0e      	ldr	r3, [pc, #56]	@ (8006014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f7fe fb87 	bl	80046fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d202      	bcs.n	8005ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20005240 	.word	0x20005240
 8006008:	20004d68 	.word	0x20004d68
 800600c:	20005228 	.word	0x20005228
 8006010:	200051f8 	.word	0x200051f8
 8006014:	200051f4 	.word	0x200051f4
 8006018:	2000525c 	.word	0x2000525c

0800601c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	@ 0x28
 8006020:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006026:	f000 fb13 	bl	8006650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800602a:	4b1d      	ldr	r3, [pc, #116]	@ (80060a0 <xTimerCreateTimerTask+0x84>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d021      	beq.n	8006076 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800603a:	1d3a      	adds	r2, r7, #4
 800603c:	f107 0108 	add.w	r1, r7, #8
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe faed 	bl	8004624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	9202      	str	r2, [sp, #8]
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	2302      	movs	r3, #2
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	2300      	movs	r3, #0
 800605a:	460a      	mov	r2, r1
 800605c:	4911      	ldr	r1, [pc, #68]	@ (80060a4 <xTimerCreateTimerTask+0x88>)
 800605e:	4812      	ldr	r0, [pc, #72]	@ (80060a8 <xTimerCreateTimerTask+0x8c>)
 8006060:	f7ff f8a8 	bl	80051b4 <xTaskCreateStatic>
 8006064:	4603      	mov	r3, r0
 8006066:	4a11      	ldr	r2, [pc, #68]	@ (80060ac <xTimerCreateTimerTask+0x90>)
 8006068:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800606a:	4b10      	ldr	r3, [pc, #64]	@ (80060ac <xTimerCreateTimerTask+0x90>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	613b      	str	r3, [r7, #16]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006094:	697b      	ldr	r3, [r7, #20]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20005298 	.word	0x20005298
 80060a4:	080142f8 	.word	0x080142f8
 80060a8:	080061e9 	.word	0x080061e9
 80060ac:	2000529c 	.word	0x2000529c

080060b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	@ 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	623b      	str	r3, [r7, #32]
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060e0:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <xTimerGenericCommand+0x98>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02a      	beq.n	800613e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	dc18      	bgt.n	800612c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060fa:	f7ff fead 	bl	8005e58 <xTaskGetSchedulerState>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b02      	cmp	r3, #2
 8006102:	d109      	bne.n	8006118 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <xTimerGenericCommand+0x98>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	f107 0110 	add.w	r1, r7, #16
 800610c:	2300      	movs	r3, #0
 800610e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006110:	f7fe fc60 	bl	80049d4 <xQueueGenericSend>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24
 8006116:	e012      	b.n	800613e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006118:	4b0b      	ldr	r3, [pc, #44]	@ (8006148 <xTimerGenericCommand+0x98>)
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	f107 0110 	add.w	r1, r7, #16
 8006120:	2300      	movs	r3, #0
 8006122:	2200      	movs	r2, #0
 8006124:	f7fe fc56 	bl	80049d4 <xQueueGenericSend>
 8006128:	6278      	str	r0, [r7, #36]	@ 0x24
 800612a:	e008      	b.n	800613e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <xTimerGenericCommand+0x98>)
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	f107 0110 	add.w	r1, r7, #16
 8006134:	2300      	movs	r3, #0
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	f7fe fd4e 	bl	8004bd8 <xQueueGenericSendFromISR>
 800613c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006140:	4618      	mov	r0, r3
 8006142:	3728      	adds	r7, #40	@ 0x28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20005298 	.word	0x20005298

0800614c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b23      	ldr	r3, [pc, #140]	@ (80061e4 <prvProcessExpiredTimer+0x98>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fb01 	bl	800476c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d023      	beq.n	80061c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	18d1      	adds	r1, r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f000 f8d5 	bl	8006334 <prvInsertTimerInActiveList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d020      	beq.n	80061d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006190:	2300      	movs	r3, #0
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	2100      	movs	r1, #0
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff88 	bl	80060b0 <xTimerGenericCommand>
 80061a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d114      	bne.n	80061d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	6978      	ldr	r0, [r7, #20]
 80061d8:	4798      	blx	r3
}
 80061da:	bf00      	nop
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20005290 	.word	0x20005290

080061e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f859 	bl	80062ac <prvGetNextExpireTime>
 80061fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4619      	mov	r1, r3
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f805 	bl	8006210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006206:	f000 f8d7 	bl	80063b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800620a:	bf00      	nop
 800620c:	e7f0      	b.n	80061f0 <prvTimerTask+0x8>
	...

08006210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800621a:	f7ff fa0f 	bl	800563c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f866 	bl	80062f4 <prvSampleTimeNow>
 8006228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d130      	bne.n	8006292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <prvProcessTimerOrBlockTask+0x3c>
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	429a      	cmp	r2, r3
 800623c:	d806      	bhi.n	800624c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800623e:	f7ff fa0b 	bl	8005658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ff81 	bl	800614c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800624a:	e024      	b.n	8006296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006252:	4b13      	ldr	r3, [pc, #76]	@ (80062a0 <prvProcessTimerOrBlockTask+0x90>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <prvProcessTimerOrBlockTask+0x50>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <prvProcessTimerOrBlockTask+0x52>
 8006260:	2300      	movs	r3, #0
 8006262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006264:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <prvProcessTimerOrBlockTask+0x94>)
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	f7fe ff6b 	bl	800514c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006276:	f7ff f9ef 	bl	8005658 <xTaskResumeAll>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006280:	4b09      	ldr	r3, [pc, #36]	@ (80062a8 <prvProcessTimerOrBlockTask+0x98>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
}
 8006290:	e001      	b.n	8006296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006292:	f7ff f9e1 	bl	8005658 <xTaskResumeAll>
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20005294 	.word	0x20005294
 80062a4:	20005298 	.word	0x20005298
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062b4:	4b0e      	ldr	r3, [pc, #56]	@ (80062f0 <prvGetNextExpireTime+0x44>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <prvGetNextExpireTime+0x16>
 80062be:	2201      	movs	r2, #1
 80062c0:	e000      	b.n	80062c4 <prvGetNextExpireTime+0x18>
 80062c2:	2200      	movs	r2, #0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d105      	bne.n	80062dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <prvGetNextExpireTime+0x44>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e001      	b.n	80062e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062e0:	68fb      	ldr	r3, [r7, #12]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20005290 	.word	0x20005290

080062f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062fc:	f7ff fa4a 	bl	8005794 <xTaskGetTickCount>
 8006300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006302:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <prvSampleTimeNow+0x3c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d205      	bcs.n	8006318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800630c:	f000 f93a 	bl	8006584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e002      	b.n	800631e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800631e:	4a04      	ldr	r2, [pc, #16]	@ (8006330 <prvSampleTimeNow+0x3c>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200052a0 	.word	0x200052a0

08006334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	429a      	cmp	r2, r3
 8006358:	d812      	bhi.n	8006380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e01b      	b.n	80063a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800636e:	4b10      	ldr	r3, [pc, #64]	@ (80063b0 <prvInsertTimerInActiveList+0x7c>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3304      	adds	r3, #4
 8006376:	4619      	mov	r1, r3
 8006378:	4610      	mov	r0, r2
 800637a:	f7fe f9be 	bl	80046fa <vListInsert>
 800637e:	e012      	b.n	80063a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d206      	bcs.n	8006396 <prvInsertTimerInActiveList+0x62>
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d302      	bcc.n	8006396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e007      	b.n	80063a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <prvInsertTimerInActiveList+0x80>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe f9aa 	bl	80046fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063a6:	697b      	ldr	r3, [r7, #20]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20005294 	.word	0x20005294
 80063b4:	20005290 	.word	0x20005290

080063b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	@ 0x38
 80063bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063be:	e0ce      	b.n	800655e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da19      	bge.n	80063fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	3304      	adds	r3, #4
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	61fb      	str	r3, [r7, #28]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f0:	6850      	ldr	r0, [r2, #4]
 80063f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	4611      	mov	r1, r2
 80063f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f2c0 80ae 	blt.w	800655e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe f9aa 	bl	800476c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006418:	463b      	mov	r3, r7
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff6a 	bl	80062f4 <prvSampleTimeNow>
 8006420:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b09      	cmp	r3, #9
 8006426:	f200 8097 	bhi.w	8006558 <prvProcessReceivedCommands+0x1a0>
 800642a:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <prvProcessReceivedCommands+0x78>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006459 	.word	0x08006459
 8006434:	08006459 	.word	0x08006459
 8006438:	08006459 	.word	0x08006459
 800643c:	080064cf 	.word	0x080064cf
 8006440:	080064e3 	.word	0x080064e3
 8006444:	0800652f 	.word	0x0800652f
 8006448:	08006459 	.word	0x08006459
 800644c:	08006459 	.word	0x08006459
 8006450:	080064cf 	.word	0x080064cf
 8006454:	080064e3 	.word	0x080064e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	18d1      	adds	r1, r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006478:	f7ff ff5c 	bl	8006334 <prvInsertTimerInActiveList>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d06c      	beq.n	800655c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d061      	beq.n	800655c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	441a      	add	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064aa:	f7ff fe01 	bl	80060b0 <xTimerGenericCommand>
 80064ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d152      	bne.n	800655c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61bb      	str	r3, [r7, #24]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80064e0:	e03d      	b.n	800655e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	617b      	str	r3, [r7, #20]
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	e7fd      	b.n	8006516 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	18d1      	adds	r1, r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006528:	f7ff ff04 	bl	8006334 <prvInsertTimerInActiveList>
					break;
 800652c:	e017      	b.n	800655e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800653c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800653e:	f000 fbeb 	bl	8006d18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006542:	e00c      	b.n	800655e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006556:	e002      	b.n	800655e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <prvProcessReceivedCommands+0x1a6>
					break;
 800655c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800655e:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <prvProcessReceivedCommands+0x1c8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	1d39      	adds	r1, r7, #4
 8006564:	2200      	movs	r2, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fbd4 	bl	8004d14 <xQueueReceive>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f47f af26 	bne.w	80063c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3730      	adds	r7, #48	@ 0x30
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20005298 	.word	0x20005298

08006584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800658a:	e049      	b.n	8006620 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800658c:	4b2e      	ldr	r3, [pc, #184]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f8e1 	bl	800476c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02f      	beq.n	8006620 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4413      	add	r3, r2
 80065c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d90e      	bls.n	80065f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7fe f886 	bl	80046fa <vListInsert>
 80065ee:	e017      	b.n	8006620 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	2100      	movs	r1, #0
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff fd58 	bl	80060b0 <xTimerGenericCommand>
 8006600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	603b      	str	r3, [r7, #0]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006620:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1b0      	bne.n	800658c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800662a:	4b07      	ldr	r3, [pc, #28]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <prvSwitchTimerLists+0xc8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a04      	ldr	r2, [pc, #16]	@ (8006648 <prvSwitchTimerLists+0xc4>)
 8006636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006638:	4a04      	ldr	r2, [pc, #16]	@ (800664c <prvSwitchTimerLists+0xc8>)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6013      	str	r3, [r2, #0]
}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20005290 	.word	0x20005290
 800664c:	20005294 	.word	0x20005294

08006650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006656:	f000 f96f 	bl	8006938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800665a:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <prvCheckForValidListAndQueue+0x60>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d120      	bne.n	80066a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006662:	4814      	ldr	r0, [pc, #80]	@ (80066b4 <prvCheckForValidListAndQueue+0x64>)
 8006664:	f7fd fff8 	bl	8004658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006668:	4813      	ldr	r0, [pc, #76]	@ (80066b8 <prvCheckForValidListAndQueue+0x68>)
 800666a:	f7fd fff5 	bl	8004658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800666e:	4b13      	ldr	r3, [pc, #76]	@ (80066bc <prvCheckForValidListAndQueue+0x6c>)
 8006670:	4a10      	ldr	r2, [pc, #64]	@ (80066b4 <prvCheckForValidListAndQueue+0x64>)
 8006672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006674:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <prvCheckForValidListAndQueue+0x70>)
 8006676:	4a10      	ldr	r2, [pc, #64]	@ (80066b8 <prvCheckForValidListAndQueue+0x68>)
 8006678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800667a:	2300      	movs	r3, #0
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	4b11      	ldr	r3, [pc, #68]	@ (80066c4 <prvCheckForValidListAndQueue+0x74>)
 8006680:	4a11      	ldr	r2, [pc, #68]	@ (80066c8 <prvCheckForValidListAndQueue+0x78>)
 8006682:	2110      	movs	r1, #16
 8006684:	200a      	movs	r0, #10
 8006686:	f7fe f905 	bl	8004894 <xQueueGenericCreateStatic>
 800668a:	4603      	mov	r3, r0
 800668c:	4a08      	ldr	r2, [pc, #32]	@ (80066b0 <prvCheckForValidListAndQueue+0x60>)
 800668e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006690:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <prvCheckForValidListAndQueue+0x60>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <prvCheckForValidListAndQueue+0x60>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	490b      	ldr	r1, [pc, #44]	@ (80066cc <prvCheckForValidListAndQueue+0x7c>)
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fd2a 	bl	80050f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a4:	f000 f97a 	bl	800699c <vPortExitCritical>
}
 80066a8:	bf00      	nop
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20005298 	.word	0x20005298
 80066b4:	20005268 	.word	0x20005268
 80066b8:	2000527c 	.word	0x2000527c
 80066bc:	20005290 	.word	0x20005290
 80066c0:	20005294 	.word	0x20005294
 80066c4:	20005344 	.word	0x20005344
 80066c8:	200052a4 	.word	0x200052a4
 80066cc:	08014300 	.word	0x08014300

080066d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3b04      	subs	r3, #4
 80066e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0201 	bic.w	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b04      	subs	r3, #4
 80066fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006700:	4a0c      	ldr	r2, [pc, #48]	@ (8006734 <pxPortInitialiseStack+0x64>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3b14      	subs	r3, #20
 800670a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3b04      	subs	r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f06f 0202 	mvn.w	r2, #2
 800671e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3b20      	subs	r3, #32
 8006724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006726:	68fb      	ldr	r3, [r7, #12]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	08006739 	.word	0x08006739

08006738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006742:	4b13      	ldr	r3, [pc, #76]	@ (8006790 <prvTaskExitError+0x58>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800674a:	d00b      	beq.n	8006764 <prvTaskExitError+0x2c>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60fb      	str	r3, [r7, #12]
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <prvTaskExitError+0x28>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60bb      	str	r3, [r7, #8]
}
 8006776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006778:	bf00      	nop
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0fc      	beq.n	800677a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000010 	.word	0x20000010
	...

080067a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <pxCurrentTCBConst2>)
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	6808      	ldr	r0, [r1, #0]
 80067a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	f380 8809 	msr	PSP, r0
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8811 	msr	BASEPRI, r0
 80067ba:	4770      	bx	lr
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst2>:
 80067c0:	20004d68 	.word	0x20004d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067c8:	4808      	ldr	r0, [pc, #32]	@ (80067ec <prvPortStartFirstTask+0x24>)
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f380 8808 	msr	MSP, r0
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8814 	msr	CONTROL, r0
 80067da:	b662      	cpsie	i
 80067dc:	b661      	cpsie	f
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	df00      	svc	0
 80067e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ea:	bf00      	nop
 80067ec:	e000ed08 	.word	0xe000ed08

080067f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <xPortStartScheduler+0x124>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a47      	ldr	r2, [pc, #284]	@ (8006918 <xPortStartScheduler+0x128>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10b      	bne.n	8006818 <xPortStartScheduler+0x28>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	613b      	str	r3, [r7, #16]
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006818:	4b3e      	ldr	r3, [pc, #248]	@ (8006914 <xPortStartScheduler+0x124>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3f      	ldr	r2, [pc, #252]	@ (800691c <xPortStartScheduler+0x12c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10b      	bne.n	800683a <xPortStartScheduler+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60fb      	str	r3, [r7, #12]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <xPortStartScheduler+0x130>)
 800683c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	22ff      	movs	r2, #255	@ 0xff
 800684a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800685c:	b2da      	uxtb	r2, r3
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <xPortStartScheduler+0x134>)
 8006860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006862:	4b31      	ldr	r3, [pc, #196]	@ (8006928 <xPortStartScheduler+0x138>)
 8006864:	2207      	movs	r2, #7
 8006866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006868:	e009      	b.n	800687e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800686a:	4b2f      	ldr	r3, [pc, #188]	@ (8006928 <xPortStartScheduler+0x138>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3b01      	subs	r3, #1
 8006870:	4a2d      	ldr	r2, [pc, #180]	@ (8006928 <xPortStartScheduler+0x138>)
 8006872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006886:	2b80      	cmp	r3, #128	@ 0x80
 8006888:	d0ef      	beq.n	800686a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800688a:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <xPortStartScheduler+0x138>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1c3 0307 	rsb	r3, r3, #7
 8006892:	2b04      	cmp	r3, #4
 8006894:	d00b      	beq.n	80068ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60bb      	str	r3, [r7, #8]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <xPortStartScheduler+0x138>)
 80068b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006928 <xPortStartScheduler+0x138>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068cc:	4b17      	ldr	r3, [pc, #92]	@ (800692c <xPortStartScheduler+0x13c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <xPortStartScheduler+0x13c>)
 80068d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068d8:	4b14      	ldr	r3, [pc, #80]	@ (800692c <xPortStartScheduler+0x13c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <xPortStartScheduler+0x13c>)
 80068de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068e4:	f000 f8da 	bl	8006a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <xPortStartScheduler+0x140>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068ee:	f000 f8f9 	bl	8006ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068f2:	4b10      	ldr	r3, [pc, #64]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006934 <xPortStartScheduler+0x144>)
 80068f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068fe:	f7ff ff63 	bl	80067c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006902:	f7ff f811 	bl	8005928 <vTaskSwitchContext>
	prvTaskExitError();
 8006906:	f7ff ff17 	bl	8006738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	e000ed00 	.word	0xe000ed00
 8006918:	410fc271 	.word	0x410fc271
 800691c:	410fc270 	.word	0x410fc270
 8006920:	e000e400 	.word	0xe000e400
 8006924:	20005394 	.word	0x20005394
 8006928:	20005398 	.word	0x20005398
 800692c:	e000ed20 	.word	0xe000ed20
 8006930:	20000010 	.word	0x20000010
 8006934:	e000ef34 	.word	0xe000ef34

08006938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <vPortEnterCritical+0x5c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <vPortEnterCritical+0x5c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d110      	bne.n	8006986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006964:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <vPortEnterCritical+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <vPortEnterCritical+0x4e>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <vPortEnterCritical+0x4a>
	}
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069a2:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <vPortExitCritical+0x50>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <vPortExitCritical+0x26>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <vPortExitCritical+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a08      	ldr	r2, [pc, #32]	@ (80069ec <vPortExitCritical+0x50>)
 80069ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <vPortExitCritical+0x50>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <vPortExitCritical+0x44>
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
}
 80069de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000010 	.word	0x20000010

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a14:	f380 8811 	msr	BASEPRI, r0
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f7fe ff82 	bl	8005928 <vTaskSwitchContext>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f380 8811 	msr	BASEPRI, r0
 8006a2c:	bc09      	pop	{r0, r3}
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	f01e 0f10 	tst.w	lr, #16
 8006a3a:	bf08      	it	eq
 8006a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a40:	f380 8809 	msr	PSP, r0
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst>:
 8006a50:	20004d68 	.word	0x20004d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
}
 8006a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a72:	f7fe fe9f 	bl	80057b4 <xTaskIncrementTick>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <xPortSysTickHandler+0x40>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <vPortSetupTimerInterrupt+0x38>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vPortSetupTimerInterrupt+0x3c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <vPortSetupTimerInterrupt+0x40>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vPortSetupTimerInterrupt+0x44>)
 8006aba:	3b01      	subs	r3, #1
 8006abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <vPortSetupTimerInterrupt+0x34>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e010 	.word	0xe000e010
 8006ad4:	e000e018 	.word	0xe000e018
 8006ad8:	20000004 	.word	0x20000004
 8006adc:	10624dd3 	.word	0x10624dd3
 8006ae0:	e000e014 	.word	0xe000e014

08006ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006af4 <vPortEnableVFP+0x10>
 8006ae8:	6801      	ldr	r1, [r0, #0]
 8006aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006aee:	6001      	str	r1, [r0, #0]
 8006af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006af2:	bf00      	nop
 8006af4:	e000ed88 	.word	0xe000ed88

08006af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006afe:	f3ef 8305 	mrs	r3, IPSR
 8006b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b0f      	cmp	r3, #15
 8006b08:	d915      	bls.n	8006b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <vPortValidateInterruptPriority+0x74>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b14:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <vPortValidateInterruptPriority+0x78>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	7afa      	ldrb	r2, [r7, #11]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20b      	bcs.n	8006b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <vPortValidateInterruptPriority+0x7c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b78 <vPortValidateInterruptPriority+0x80>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d90b      	bls.n	8006b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortValidateInterruptPriority+0x62>
	}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	e000e3f0 	.word	0xe000e3f0
 8006b70:	20005394 	.word	0x20005394
 8006b74:	e000ed0c 	.word	0xe000ed0c
 8006b78:	20005398 	.word	0x20005398

08006b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	@ 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b88:	f7fe fd58 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006d00 <pvPortMalloc+0x184>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b94:	f000 f924 	bl	8006de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b98:	4b5a      	ldr	r3, [pc, #360]	@ (8006d04 <pvPortMalloc+0x188>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 8095 	bne.w	8006cd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01e      	beq.n	8006bea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bac:	2208      	movs	r2, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d015      	beq.n	8006bea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f023 0307 	bic.w	r3, r3, #7
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <pvPortMalloc+0x6e>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	617b      	str	r3, [r7, #20]
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop
 8006be8:	e7fd      	b.n	8006be6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06f      	beq.n	8006cd0 <pvPortMalloc+0x154>
 8006bf0:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d86a      	bhi.n	8006cd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bfa:	4b44      	ldr	r3, [pc, #272]	@ (8006d0c <pvPortMalloc+0x190>)
 8006bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bfe:	4b43      	ldr	r3, [pc, #268]	@ (8006d0c <pvPortMalloc+0x190>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c04:	e004      	b.n	8006c10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d903      	bls.n	8006c22 <pvPortMalloc+0xa6>
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f1      	bne.n	8006c06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c22:	4b37      	ldr	r3, [pc, #220]	@ (8006d00 <pvPortMalloc+0x184>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d051      	beq.n	8006cd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	2308      	movs	r3, #8
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d920      	bls.n	8006c90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <pvPortMalloc+0xfc>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	613b      	str	r3, [r7, #16]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c8a:	69b8      	ldr	r0, [r7, #24]
 8006c8c:	f000 f90a 	bl	8006ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c90:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <pvPortMalloc+0x194>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d203      	bcs.n	8006cb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <pvPortMalloc+0x18c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <pvPortMalloc+0x194>)
 8006cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <pvPortMalloc+0x188>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cc6:	4b13      	ldr	r3, [pc, #76]	@ (8006d14 <pvPortMalloc+0x198>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a11      	ldr	r2, [pc, #68]	@ (8006d14 <pvPortMalloc+0x198>)
 8006cce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cd0:	f7fe fcc2 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <pvPortMalloc+0x17a>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <pvPortMalloc+0x176>
	return pvReturn;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	@ 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20008fa4 	.word	0x20008fa4
 8006d04:	20008fb8 	.word	0x20008fb8
 8006d08:	20008fa8 	.word	0x20008fa8
 8006d0c:	20008f9c 	.word	0x20008f9c
 8006d10:	20008fac 	.word	0x20008fac
 8006d14:	20008fb0 	.word	0x20008fb0

08006d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04f      	beq.n	8006dca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <vPortFree+0xbc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <vPortFree+0x46>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <vPortFree+0x66>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b14      	ldr	r3, [pc, #80]	@ (8006dd4 <vPortFree+0xbc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01e      	beq.n	8006dca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11a      	bne.n	8006dca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd4 <vPortFree+0xbc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da4:	f7fe fc4a 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <vPortFree+0xc0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4413      	add	r3, r2
 8006db2:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <vPortFree+0xc0>)
 8006db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006db6:	6938      	ldr	r0, [r7, #16]
 8006db8:	f000 f874 	bl	8006ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dbc:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <vPortFree+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a06      	ldr	r2, [pc, #24]	@ (8006ddc <vPortFree+0xc4>)
 8006dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dc6:	f7fe fc47 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20008fb8 	.word	0x20008fb8
 8006dd8:	20008fa8 	.word	0x20008fa8
 8006ddc:	20008fb4 	.word	0x20008fb4

08006de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006de6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006dec:	4b27      	ldr	r3, [pc, #156]	@ (8006e8c <prvHeapInit+0xac>)
 8006dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e8c <prvHeapInit+0xac>)
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e18:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <prvHeapInit+0xb0>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <prvHeapInit+0xb0>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4413      	add	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e42:	4b14      	ldr	r3, [pc, #80]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e4a:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e60:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <prvHeapInit+0xb4>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e98 <prvHeapInit+0xb8>)
 8006e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4a09      	ldr	r2, [pc, #36]	@ (8006e9c <prvHeapInit+0xbc>)
 8006e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e78:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <prvHeapInit+0xc0>)
 8006e7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	2000539c 	.word	0x2000539c
 8006e90:	20008f9c 	.word	0x20008f9c
 8006e94:	20008fa4 	.word	0x20008fa4
 8006e98:	20008fac 	.word	0x20008fac
 8006e9c:	20008fa8 	.word	0x20008fa8
 8006ea0:	20008fb8 	.word	0x20008fb8

08006ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <prvInsertBlockIntoFreeList+0xac>)
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e002      	b.n	8006eb8 <prvInsertBlockIntoFreeList+0x14>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d8f7      	bhi.n	8006eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	4413      	add	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d108      	bne.n	8006ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	441a      	add	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d118      	bne.n	8006f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <prvInsertBlockIntoFreeList+0xb0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d00d      	beq.n	8006f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e008      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <prvInsertBlockIntoFreeList+0xb0>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e003      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d002      	beq.n	8006f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20008f9c 	.word	0x20008f9c
 8006f54:	20008fa4 	.word	0x20008fa4

08006f58 <_rclc_check_for_new_data>:
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d046      	beq.n	8006fea <_rclc_check_for_new_data+0x92>
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	7802      	ldrb	r2, [r0, #0]
 8006f60:	b084      	sub	sp, #16
 8006f62:	4603      	mov	r3, r0
 8006f64:	2a0a      	cmp	r2, #10
 8006f66:	d842      	bhi.n	8006fee <_rclc_check_for_new_data+0x96>
 8006f68:	e8df f002 	tbb	[pc, r2]
 8006f6c:	14181212 	.word	0x14181212
 8006f70:	06060614 	.word	0x06060614
 8006f74:	2e1a      	.short	0x2e1a
 8006f76:	16          	.byte	0x16
 8006f77:	00          	.byte	0x00
 8006f78:	6a0a      	ldr	r2, [r1, #32]
 8006f7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f7c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006f80:	2000      	movs	r0, #0
 8006f82:	1a12      	subs	r2, r2, r0
 8006f84:	bf18      	it	ne
 8006f86:	2201      	movne	r2, #1
 8006f88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8006f8c:	b004      	add	sp, #16
 8006f8e:	bd10      	pop	{r4, pc}
 8006f90:	680a      	ldr	r2, [r1, #0]
 8006f92:	e7f2      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f94:	698a      	ldr	r2, [r1, #24]
 8006f96:	e7f0      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f98:	688a      	ldr	r2, [r1, #8]
 8006f9a:	e7ee      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006f9c:	690a      	ldr	r2, [r1, #16]
 8006f9e:	e7ec      	b.n	8006f7a <_rclc_check_for_new_data+0x22>
 8006fa0:	685c      	ldr	r4, [r3, #4]
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8006fa8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8006fac:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8006fb0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8006fba:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8006fbe:	f104 0110 	add.w	r1, r4, #16
 8006fc2:	f004 f9b1 	bl	800b328 <rcl_action_client_wait_set_get_entities_ready>
 8006fc6:	e7e1      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006fc8:	685c      	ldr	r4, [r3, #4]
 8006fca:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8006fce:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8006fd2:	e9cd 3200 	strd	r3, r2, [sp]
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8006fdc:	f104 0220 	add.w	r2, r4, #32
 8006fe0:	f104 0110 	add.w	r1, r4, #16
 8006fe4:	f004 fbb8 	bl	800b758 <rcl_action_server_wait_set_get_entities_ready>
 8006fe8:	e7d0      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006fea:	200b      	movs	r0, #11
 8006fec:	4770      	bx	lr
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7cc      	b.n	8006f8c <_rclc_check_for_new_data+0x34>
 8006ff2:	bf00      	nop

08006ff4 <_rclc_take_new_data>:
 8006ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff6:	b09b      	sub	sp, #108	@ 0x6c
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f000 8088 	beq.w	800710e <_rclc_take_new_data+0x11a>
 8006ffe:	7803      	ldrb	r3, [r0, #0]
 8007000:	4604      	mov	r4, r0
 8007002:	2b0a      	cmp	r3, #10
 8007004:	f200 8167 	bhi.w	80072d6 <_rclc_take_new_data+0x2e2>
 8007008:	e8df f003 	tbb	[pc, r3]
 800700c:	44152d2d 	.word	0x44152d2d
 8007010:	19191944 	.word	0x19191944
 8007014:	065a      	.short	0x065a
 8007016:	15          	.byte	0x15
 8007017:	00          	.byte	0x00
 8007018:	6840      	ldr	r0, [r0, #4]
 800701a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 80b2 	bne.w	8007188 <_rclc_take_new_data+0x194>
 8007024:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 80e4 	bne.w	80071f6 <_rclc_take_new_data+0x202>
 800702e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007032:	2b00      	cmp	r3, #0
 8007034:	d16f      	bne.n	8007116 <_rclc_take_new_data+0x122>
 8007036:	2500      	movs	r5, #0
 8007038:	4628      	mov	r0, r5
 800703a:	b01b      	add	sp, #108	@ 0x6c
 800703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007040:	6a0b      	ldr	r3, [r1, #32]
 8007042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f5      	beq.n	8007036 <_rclc_take_new_data+0x42>
 800704a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800704e:	f104 0110 	add.w	r1, r4, #16
 8007052:	f002 fe45 	bl	8009ce0 <rcl_take_request>
 8007056:	4605      	mov	r5, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d0ec      	beq.n	8007036 <_rclc_take_new_data+0x42>
 800705c:	f240 2359 	movw	r3, #601	@ 0x259
 8007060:	4298      	cmp	r0, r3
 8007062:	d013      	beq.n	800708c <_rclc_take_new_data+0x98>
 8007064:	e029      	b.n	80070ba <_rclc_take_new_data+0xc6>
 8007066:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007068:	680b      	ldr	r3, [r1, #0]
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0e1      	beq.n	8007036 <_rclc_take_new_data+0x42>
 8007072:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007076:	2300      	movs	r3, #0
 8007078:	aa0a      	add	r2, sp, #40	@ 0x28
 800707a:	f002 ff6f 	bl	8009f5c <rcl_take>
 800707e:	4605      	mov	r5, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	d0d9      	beq.n	8007038 <_rclc_take_new_data+0x44>
 8007084:	f240 1391 	movw	r3, #401	@ 0x191
 8007088:	4298      	cmp	r0, r3
 800708a:	d116      	bne.n	80070ba <_rclc_take_new_data+0xc6>
 800708c:	2300      	movs	r3, #0
 800708e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8007092:	e7d1      	b.n	8007038 <_rclc_take_new_data+0x44>
 8007094:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007096:	698b      	ldr	r3, [r1, #24]
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ca      	beq.n	8007036 <_rclc_take_new_data+0x42>
 80070a0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80070a4:	f104 0110 	add.w	r1, r4, #16
 80070a8:	f001 ffe6 	bl	8009078 <rcl_take_response>
 80070ac:	4605      	mov	r5, r0
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d0c1      	beq.n	8007036 <_rclc_take_new_data+0x42>
 80070b2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80070b6:	4298      	cmp	r0, r3
 80070b8:	d0be      	beq.n	8007038 <_rclc_take_new_data+0x44>
 80070ba:	f000 fe7d 	bl	8007db8 <rcutils_reset_error>
 80070be:	e7bb      	b.n	8007038 <_rclc_take_new_data+0x44>
 80070c0:	6840      	ldr	r0, [r0, #4]
 80070c2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d17d      	bne.n	80071c6 <_rclc_take_new_data+0x1d2>
 80070ca:	69c3      	ldr	r3, [r0, #28]
 80070cc:	b11b      	cbz	r3, 80070d6 <_rclc_take_new_data+0xe2>
 80070ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d144      	bne.n	8007160 <_rclc_take_new_data+0x16c>
 80070d6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 80ac 	bne.w	8007238 <_rclc_take_new_data+0x244>
 80070e0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0a6      	beq.n	8007036 <_rclc_take_new_data+0x42>
 80070e8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80070ea:	a90a      	add	r1, sp, #40	@ 0x28
 80070ec:	3010      	adds	r0, #16
 80070ee:	f003 fff3 	bl	800b0d8 <rcl_action_take_result_response>
 80070f2:	4605      	mov	r5, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1e0      	bne.n	80070ba <_rclc_take_new_data+0xc6>
 80070f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070fc:	6860      	ldr	r0, [r4, #4]
 80070fe:	f004 fc4f 	bl	800b9a0 <rclc_action_find_handle_by_result_request_sequence_number>
 8007102:	2800      	cmp	r0, #0
 8007104:	d098      	beq.n	8007038 <_rclc_take_new_data+0x44>
 8007106:	2301      	movs	r3, #1
 8007108:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800710c:	e794      	b.n	8007038 <_rclc_take_new_data+0x44>
 800710e:	250b      	movs	r5, #11
 8007110:	4628      	mov	r0, r5
 8007112:	b01b      	add	sp, #108	@ 0x6c
 8007114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007116:	ae04      	add	r6, sp, #16
 8007118:	aa0a      	add	r2, sp, #40	@ 0x28
 800711a:	3010      	adds	r0, #16
 800711c:	4631      	mov	r1, r6
 800711e:	f004 fa4f 	bl	800b5c0 <rcl_action_take_cancel_request>
 8007122:	4605      	mov	r5, r0
 8007124:	2800      	cmp	r0, #0
 8007126:	d1c8      	bne.n	80070ba <_rclc_take_new_data+0xc6>
 8007128:	6860      	ldr	r0, [r4, #4]
 800712a:	a90a      	add	r1, sp, #40	@ 0x28
 800712c:	f004 fbf6 	bl	800b91c <rclc_action_find_goal_handle_by_uuid>
 8007130:	4607      	mov	r7, r0
 8007132:	2800      	cmp	r0, #0
 8007134:	f000 80bb 	beq.w	80072ae <_rclc_take_new_data+0x2ba>
 8007138:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800713c:	2101      	movs	r1, #1
 800713e:	f004 fb77 	bl	800b830 <rcl_action_transition_goal_state>
 8007142:	2803      	cmp	r0, #3
 8007144:	4684      	mov	ip, r0
 8007146:	f040 80a7 	bne.w	8007298 <_rclc_take_new_data+0x2a4>
 800714a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800714c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8007150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007152:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007156:	e884 0003 	stmia.w	r4, {r0, r1}
 800715a:	f887 c008 	strb.w	ip, [r7, #8]
 800715e:	e76b      	b.n	8007038 <_rclc_take_new_data+0x44>
 8007160:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007162:	3010      	adds	r0, #16
 8007164:	f004 f838 	bl	800b1d8 <rcl_action_take_feedback>
 8007168:	4605      	mov	r5, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d1a5      	bne.n	80070ba <_rclc_take_new_data+0xc6>
 800716e:	6860      	ldr	r0, [r4, #4]
 8007170:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007172:	f004 fbd3 	bl	800b91c <rclc_action_find_goal_handle_by_uuid>
 8007176:	4603      	mov	r3, r0
 8007178:	2800      	cmp	r0, #0
 800717a:	f000 80a3 	beq.w	80072c4 <_rclc_take_new_data+0x2d0>
 800717e:	2201      	movs	r2, #1
 8007180:	6860      	ldr	r0, [r4, #4]
 8007182:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8007186:	e7a6      	b.n	80070d6 <_rclc_take_new_data+0xe2>
 8007188:	f004 fba2 	bl	800b8d0 <rclc_action_take_goal_handle>
 800718c:	4606      	mov	r6, r0
 800718e:	6860      	ldr	r0, [r4, #4]
 8007190:	2e00      	cmp	r6, #0
 8007192:	f43f af47 	beq.w	8007024 <_rclc_take_new_data+0x30>
 8007196:	6070      	str	r0, [r6, #4]
 8007198:	69f2      	ldr	r2, [r6, #28]
 800719a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800719e:	3010      	adds	r0, #16
 80071a0:	f004 f956 	bl	800b450 <rcl_action_take_goal_request>
 80071a4:	4605      	mov	r5, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f040 808e 	bne.w	80072c8 <_rclc_take_new_data+0x2d4>
 80071ac:	69f7      	ldr	r7, [r6, #28]
 80071ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80071b0:	7235      	strb	r5, [r6, #8]
 80071b2:	f8c6 0009 	str.w	r0, [r6, #9]
 80071b6:	f8c6 100d 	str.w	r1, [r6, #13]
 80071ba:	6860      	ldr	r0, [r4, #4]
 80071bc:	f8c6 2011 	str.w	r2, [r6, #17]
 80071c0:	f8c6 3015 	str.w	r3, [r6, #21]
 80071c4:	e72e      	b.n	8007024 <_rclc_take_new_data+0x30>
 80071c6:	aa04      	add	r2, sp, #16
 80071c8:	a90a      	add	r1, sp, #40	@ 0x28
 80071ca:	3010      	adds	r0, #16
 80071cc:	f003 ff0c 	bl	800afe8 <rcl_action_take_goal_response>
 80071d0:	4605      	mov	r5, r0
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f47f af71 	bne.w	80070ba <_rclc_take_new_data+0xc6>
 80071d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071dc:	6860      	ldr	r0, [r4, #4]
 80071de:	f004 fbcd 	bl	800b97c <rclc_action_find_handle_by_goal_request_sequence_number>
 80071e2:	b130      	cbz	r0, 80071f2 <_rclc_take_new_data+0x1fe>
 80071e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80071e8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80071ec:	2201      	movs	r2, #1
 80071ee:	f880 2020 	strb.w	r2, [r0, #32]
 80071f2:	6860      	ldr	r0, [r4, #4]
 80071f4:	e769      	b.n	80070ca <_rclc_take_new_data+0xd6>
 80071f6:	aa04      	add	r2, sp, #16
 80071f8:	3010      	adds	r0, #16
 80071fa:	a90a      	add	r1, sp, #40	@ 0x28
 80071fc:	f004 f9a0 	bl	800b540 <rcl_action_take_result_request>
 8007200:	4605      	mov	r5, r0
 8007202:	2800      	cmp	r0, #0
 8007204:	f47f af59 	bne.w	80070ba <_rclc_take_new_data+0xc6>
 8007208:	6860      	ldr	r0, [r4, #4]
 800720a:	a904      	add	r1, sp, #16
 800720c:	f004 fb86 	bl	800b91c <rclc_action_find_goal_handle_by_uuid>
 8007210:	4607      	mov	r7, r0
 8007212:	b160      	cbz	r0, 800722e <_rclc_take_new_data+0x23a>
 8007214:	ad0a      	add	r5, sp, #40	@ 0x28
 8007216:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800721a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800721c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800721e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007222:	f04f 0c02 	mov.w	ip, #2
 8007226:	e886 0003 	stmia.w	r6, {r0, r1}
 800722a:	f887 c008 	strb.w	ip, [r7, #8]
 800722e:	6860      	ldr	r0, [r4, #4]
 8007230:	2300      	movs	r3, #0
 8007232:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8007236:	e6fa      	b.n	800702e <_rclc_take_new_data+0x3a>
 8007238:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800723c:	a90a      	add	r1, sp, #40	@ 0x28
 800723e:	3010      	adds	r0, #16
 8007240:	f003 ff8a 	bl	800b158 <rcl_action_take_cancel_response>
 8007244:	4605      	mov	r5, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	f47f af37 	bne.w	80070ba <_rclc_take_new_data+0xc6>
 800724c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007250:	6860      	ldr	r0, [r4, #4]
 8007252:	f004 fbb7 	bl	800b9c4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8007256:	4606      	mov	r6, r0
 8007258:	6860      	ldr	r0, [r4, #4]
 800725a:	2e00      	cmp	r6, #0
 800725c:	f43f af40 	beq.w	80070e0 <_rclc_take_new_data+0xec>
 8007260:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007262:	2701      	movs	r7, #1
 8007264:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	f43f af3a 	beq.w	80070e0 <_rclc_take_new_data+0xec>
 800726c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800726e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007272:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007276:	f004 fb51 	bl	800b91c <rclc_action_find_goal_handle_by_uuid>
 800727a:	b138      	cbz	r0, 800728c <_rclc_take_new_data+0x298>
 800727c:	6860      	ldr	r0, [r4, #4]
 800727e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007280:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8007284:	3501      	adds	r5, #1
 8007286:	42ab      	cmp	r3, r5
 8007288:	d8f0      	bhi.n	800726c <_rclc_take_new_data+0x278>
 800728a:	e729      	b.n	80070e0 <_rclc_take_new_data+0xec>
 800728c:	6860      	ldr	r0, [r4, #4]
 800728e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007290:	3501      	adds	r5, #1
 8007292:	42ab      	cmp	r3, r5
 8007294:	d8ea      	bhi.n	800726c <_rclc_take_new_data+0x278>
 8007296:	e723      	b.n	80070e0 <_rclc_take_new_data+0xec>
 8007298:	ab06      	add	r3, sp, #24
 800729a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800729c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80072a0:	2103      	movs	r1, #3
 80072a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80072a6:	6860      	ldr	r0, [r4, #4]
 80072a8:	f004 fc02 	bl	800bab0 <rclc_action_server_goal_cancel_reject>
 80072ac:	e6c4      	b.n	8007038 <_rclc_take_new_data+0x44>
 80072ae:	ab06      	add	r3, sp, #24
 80072b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80072b6:	2102      	movs	r1, #2
 80072b8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80072bc:	6860      	ldr	r0, [r4, #4]
 80072be:	f004 fbf7 	bl	800bab0 <rclc_action_server_goal_cancel_reject>
 80072c2:	e6b9      	b.n	8007038 <_rclc_take_new_data+0x44>
 80072c4:	6860      	ldr	r0, [r4, #4]
 80072c6:	e706      	b.n	80070d6 <_rclc_take_new_data+0xe2>
 80072c8:	6860      	ldr	r0, [r4, #4]
 80072ca:	4631      	mov	r1, r6
 80072cc:	f004 fb10 	bl	800b8f0 <rclc_action_remove_used_goal_handle>
 80072d0:	f000 fd72 	bl	8007db8 <rcutils_reset_error>
 80072d4:	e6b0      	b.n	8007038 <_rclc_take_new_data+0x44>
 80072d6:	2501      	movs	r5, #1
 80072d8:	e6ae      	b.n	8007038 <_rclc_take_new_data+0x44>
 80072da:	bf00      	nop

080072dc <_rclc_execute.part.0>:
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	7803      	ldrb	r3, [r0, #0]
 80072e0:	b087      	sub	sp, #28
 80072e2:	4604      	mov	r4, r0
 80072e4:	2b0a      	cmp	r3, #10
 80072e6:	f200 8136 	bhi.w	8007556 <_rclc_execute.part.0+0x27a>
 80072ea:	e8df f003 	tbb	[pc, r3]
 80072ee:	435e      	.short	0x435e
 80072f0:	06a1664f 	.word	0x06a1664f
 80072f4:	6c1e0606 	.word	0x6c1e0606
 80072f8:	59          	.byte	0x59
 80072f9:	00          	.byte	0x00
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	f000 8122 	beq.w	8007544 <_rclc_execute.part.0+0x268>
 8007300:	2b07      	cmp	r3, #7
 8007302:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007304:	f040 8118 	bne.w	8007538 <_rclc_execute.part.0+0x25c>
 8007308:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800730c:	6880      	ldr	r0, [r0, #8]
 800730e:	4798      	blx	r3
 8007310:	f104 0110 	add.w	r1, r4, #16
 8007314:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007316:	6860      	ldr	r0, [r4, #4]
 8007318:	f002 fd22 	bl	8009d60 <rcl_send_response>
 800731c:	2800      	cmp	r0, #0
 800731e:	d033      	beq.n	8007388 <_rclc_execute.part.0+0xac>
 8007320:	9005      	str	r0, [sp, #20]
 8007322:	f000 fd49 	bl	8007db8 <rcutils_reset_error>
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	e02e      	b.n	8007388 <_rclc_execute.part.0+0xac>
 800732a:	6840      	ldr	r0, [r0, #4]
 800732c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8086 	beq.w	8007442 <_rclc_execute.part.0+0x166>
 8007336:	2600      	movs	r6, #0
 8007338:	2701      	movs	r7, #1
 800733a:	e004      	b.n	8007346 <_rclc_execute.part.0+0x6a>
 800733c:	f004 faa2 	bl	800b884 <rclc_action_send_result_request>
 8007340:	b998      	cbnz	r0, 800736a <_rclc_execute.part.0+0x8e>
 8007342:	722f      	strb	r7, [r5, #8]
 8007344:	6860      	ldr	r0, [r4, #4]
 8007346:	f004 fb4f 	bl	800b9e8 <rclc_action_find_first_handle_with_goal_response>
 800734a:	4605      	mov	r5, r0
 800734c:	2800      	cmp	r0, #0
 800734e:	d077      	beq.n	8007440 <_rclc_execute.part.0+0x164>
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800735a:	f885 6020 	strb.w	r6, [r5, #32]
 800735e:	4798      	blx	r3
 8007360:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8007364:	4628      	mov	r0, r5
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e8      	bne.n	800733c <_rclc_execute.part.0+0x60>
 800736a:	6860      	ldr	r0, [r4, #4]
 800736c:	4629      	mov	r1, r5
 800736e:	f004 fabf 	bl	800b8f0 <rclc_action_remove_used_goal_handle>
 8007372:	e7e7      	b.n	8007344 <_rclc_execute.part.0+0x68>
 8007374:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8007378:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800737c:	2d00      	cmp	r5, #0
 800737e:	f000 80c9 	beq.w	8007514 <_rclc_execute.part.0+0x238>
 8007382:	6880      	ldr	r0, [r0, #8]
 8007384:	4798      	blx	r3
 8007386:	2000      	movs	r0, #0
 8007388:	b007      	add	sp, #28
 800738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738c:	6840      	ldr	r0, [r0, #4]
 800738e:	f002 fee9 	bl	800a164 <rcl_timer_call>
 8007392:	f240 3321 	movw	r3, #801	@ 0x321
 8007396:	4298      	cmp	r0, r3
 8007398:	d004      	beq.n	80073a4 <_rclc_execute.part.0+0xc8>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0f4      	beq.n	8007388 <_rclc_execute.part.0+0xac>
 800739e:	e7bf      	b.n	8007320 <_rclc_execute.part.0+0x44>
 80073a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073a2:	4798      	blx	r3
 80073a4:	2000      	movs	r0, #0
 80073a6:	b007      	add	sp, #28
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80073ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073b0:	b925      	cbnz	r5, 80073bc <_rclc_execute.part.0+0xe0>
 80073b2:	4628      	mov	r0, r5
 80073b4:	4798      	blx	r3
 80073b6:	4628      	mov	r0, r5
 80073b8:	e7e6      	b.n	8007388 <_rclc_execute.part.0+0xac>
 80073ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073bc:	68a0      	ldr	r0, [r4, #8]
 80073be:	4798      	blx	r3
 80073c0:	2000      	movs	r0, #0
 80073c2:	b007      	add	sp, #28
 80073c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c6:	6840      	ldr	r0, [r0, #4]
 80073c8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80073cc:	bb3b      	cbnz	r3, 800741e <_rclc_execute.part.0+0x142>
 80073ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d07b      	beq.n	80074ce <_rclc_execute.part.0+0x1f2>
 80073d6:	f640 0634 	movw	r6, #2100	@ 0x834
 80073da:	2701      	movs	r7, #1
 80073dc:	e007      	b.n	80073ee <_rclc_execute.part.0+0x112>
 80073de:	4628      	mov	r0, r5
 80073e0:	f004 fb1a 	bl	800ba18 <rclc_action_server_response_goal_request>
 80073e4:	6860      	ldr	r0, [r4, #4]
 80073e6:	4629      	mov	r1, r5
 80073e8:	f004 fa82 	bl	800b8f0 <rclc_action_remove_used_goal_handle>
 80073ec:	6860      	ldr	r0, [r4, #4]
 80073ee:	2100      	movs	r1, #0
 80073f0:	f004 faac 	bl	800b94c <rclc_action_find_first_handle_by_status>
 80073f4:	4605      	mov	r5, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d066      	beq.n	80074c8 <_rclc_execute.part.0+0x1ec>
 80073fa:	6863      	ldr	r3, [r4, #4]
 80073fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	4798      	blx	r3
 8007402:	42b0      	cmp	r0, r6
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	d1e9      	bne.n	80073de <_rclc_execute.part.0+0x102>
 800740a:	2101      	movs	r1, #1
 800740c:	4628      	mov	r0, r5
 800740e:	f004 fb03 	bl	800ba18 <rclc_action_server_response_goal_request>
 8007412:	722f      	strb	r7, [r5, #8]
 8007414:	e7ea      	b.n	80073ec <_rclc_execute.part.0+0x110>
 8007416:	6848      	ldr	r0, [r1, #4]
 8007418:	f004 fa6a 	bl	800b8f0 <rclc_action_remove_used_goal_handle>
 800741c:	6860      	ldr	r0, [r4, #4]
 800741e:	f004 faa1 	bl	800b964 <rclc_action_find_first_terminated_handle>
 8007422:	4601      	mov	r1, r0
 8007424:	2800      	cmp	r0, #0
 8007426:	d1f6      	bne.n	8007416 <_rclc_execute.part.0+0x13a>
 8007428:	6860      	ldr	r0, [r4, #4]
 800742a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800742e:	e7ce      	b.n	80073ce <_rclc_execute.part.0+0xf2>
 8007430:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007432:	6880      	ldr	r0, [r0, #8]
 8007434:	f104 0110 	add.w	r1, r4, #16
 8007438:	4798      	blx	r3
 800743a:	2000      	movs	r0, #0
 800743c:	b007      	add	sp, #28
 800743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007440:	6860      	ldr	r0, [r4, #4]
 8007442:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007446:	b18b      	cbz	r3, 800746c <_rclc_execute.part.0+0x190>
 8007448:	68c5      	ldr	r5, [r0, #12]
 800744a:	b32d      	cbz	r5, 8007498 <_rclc_execute.part.0+0x1bc>
 800744c:	2600      	movs	r6, #0
 800744e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8007452:	b143      	cbz	r3, 8007466 <_rclc_execute.part.0+0x18a>
 8007454:	69c3      	ldr	r3, [r0, #28]
 8007456:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800745a:	b123      	cbz	r3, 8007466 <_rclc_execute.part.0+0x18a>
 800745c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800745e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007460:	4628      	mov	r0, r5
 8007462:	4798      	blx	r3
 8007464:	6860      	ldr	r0, [r4, #4]
 8007466:	682d      	ldr	r5, [r5, #0]
 8007468:	2d00      	cmp	r5, #0
 800746a:	d1f0      	bne.n	800744e <_rclc_execute.part.0+0x172>
 800746c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8007470:	b193      	cbz	r3, 8007498 <_rclc_execute.part.0+0x1bc>
 8007472:	68c5      	ldr	r5, [r0, #12]
 8007474:	b185      	cbz	r5, 8007498 <_rclc_execute.part.0+0x1bc>
 8007476:	2600      	movs	r6, #0
 8007478:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800747c:	b14b      	cbz	r3, 8007492 <_rclc_execute.part.0+0x1b6>
 800747e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007480:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8007484:	b12b      	cbz	r3, 8007492 <_rclc_execute.part.0+0x1b6>
 8007486:	4628      	mov	r0, r5
 8007488:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800748c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800748e:	4798      	blx	r3
 8007490:	6860      	ldr	r0, [r4, #4]
 8007492:	682d      	ldr	r5, [r5, #0]
 8007494:	2d00      	cmp	r5, #0
 8007496:	d1ef      	bne.n	8007478 <_rclc_execute.part.0+0x19c>
 8007498:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800749c:	2b00      	cmp	r3, #0
 800749e:	d081      	beq.n	80073a4 <_rclc_execute.part.0+0xc8>
 80074a0:	2700      	movs	r7, #0
 80074a2:	e00b      	b.n	80074bc <_rclc_execute.part.0+0x1e0>
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80074a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80074aa:	6a1e      	ldr	r6, [r3, #32]
 80074ac:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80074b0:	47b0      	blx	r6
 80074b2:	6860      	ldr	r0, [r4, #4]
 80074b4:	4629      	mov	r1, r5
 80074b6:	f004 fa1b 	bl	800b8f0 <rclc_action_remove_used_goal_handle>
 80074ba:	6860      	ldr	r0, [r4, #4]
 80074bc:	f004 faa0 	bl	800ba00 <rclc_action_find_first_handle_with_result_response>
 80074c0:	4605      	mov	r5, r0
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d1ee      	bne.n	80074a4 <_rclc_execute.part.0+0x1c8>
 80074c6:	e76d      	b.n	80073a4 <_rclc_execute.part.0+0xc8>
 80074c8:	6860      	ldr	r0, [r4, #4]
 80074ca:	f880 5020 	strb.w	r5, [r0, #32]
 80074ce:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f43f af66 	beq.w	80073a4 <_rclc_execute.part.0+0xc8>
 80074d8:	68c5      	ldr	r5, [r0, #12]
 80074da:	b1b5      	cbz	r5, 800750a <_rclc_execute.part.0+0x22e>
 80074dc:	2602      	movs	r6, #2
 80074de:	e001      	b.n	80074e4 <_rclc_execute.part.0+0x208>
 80074e0:	682d      	ldr	r5, [r5, #0]
 80074e2:	b195      	cbz	r5, 800750a <_rclc_execute.part.0+0x22e>
 80074e4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d1f9      	bne.n	80074e0 <_rclc_execute.part.0+0x204>
 80074ec:	69c3      	ldr	r3, [r0, #28]
 80074ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80074f0:	4628      	mov	r0, r5
 80074f2:	4798      	blx	r3
 80074f4:	4603      	mov	r3, r0
 80074f6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80074fa:	4628      	mov	r0, r5
 80074fc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8007500:	b163      	cbz	r3, 800751c <_rclc_execute.part.0+0x240>
 8007502:	f004 faa9 	bl	800ba58 <rclc_action_server_goal_cancel_accept>
 8007506:	6860      	ldr	r0, [r4, #4]
 8007508:	e7ea      	b.n	80074e0 <_rclc_execute.part.0+0x204>
 800750a:	2300      	movs	r3, #0
 800750c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8007510:	4618      	mov	r0, r3
 8007512:	e739      	b.n	8007388 <_rclc_execute.part.0+0xac>
 8007514:	4628      	mov	r0, r5
 8007516:	4798      	blx	r3
 8007518:	4628      	mov	r0, r5
 800751a:	e735      	b.n	8007388 <_rclc_execute.part.0+0xac>
 800751c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800751e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007522:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8007526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752a:	6860      	ldr	r0, [r4, #4]
 800752c:	2101      	movs	r1, #1
 800752e:	f004 fabf 	bl	800bab0 <rclc_action_server_goal_cancel_reject>
 8007532:	722e      	strb	r6, [r5, #8]
 8007534:	6860      	ldr	r0, [r4, #4]
 8007536:	e7d3      	b.n	80074e0 <_rclc_execute.part.0+0x204>
 8007538:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800753a:	6880      	ldr	r0, [r0, #8]
 800753c:	4798      	blx	r3
 800753e:	f104 0110 	add.w	r1, r4, #16
 8007542:	e6e7      	b.n	8007314 <_rclc_execute.part.0+0x38>
 8007544:	f100 0110 	add.w	r1, r0, #16
 8007548:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800754a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800754c:	6880      	ldr	r0, [r0, #8]
 800754e:	9105      	str	r1, [sp, #20]
 8007550:	4798      	blx	r3
 8007552:	9905      	ldr	r1, [sp, #20]
 8007554:	e6de      	b.n	8007314 <_rclc_execute.part.0+0x38>
 8007556:	2001      	movs	r0, #1
 8007558:	e716      	b.n	8007388 <_rclc_execute.part.0+0xac>
 800755a:	bf00      	nop

0800755c <rclc_executor_trigger_any>:
 800755c:	2800      	cmp	r0, #0
 800755e:	d03f      	beq.n	80075e0 <rclc_executor_trigger_any+0x84>
 8007560:	2900      	cmp	r1, #0
 8007562:	d03e      	beq.n	80075e2 <rclc_executor_trigger_any+0x86>
 8007564:	4603      	mov	r3, r0
 8007566:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800756a:	2200      	movs	r2, #0
 800756c:	2800      	cmp	r0, #0
 800756e:	d037      	beq.n	80075e0 <rclc_executor_trigger_any+0x84>
 8007570:	b430      	push	{r4, r5}
 8007572:	f893 c000 	ldrb.w	ip, [r3]
 8007576:	f1bc 0f08 	cmp.w	ip, #8
 800757a:	d11e      	bne.n	80075ba <rclc_executor_trigger_any+0x5e>
 800757c:	685c      	ldr	r4, [r3, #4]
 800757e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007580:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8007584:	d105      	bne.n	8007592 <rclc_executor_trigger_any+0x36>
 8007586:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800758a:	b910      	cbnz	r0, 8007592 <rclc_executor_trigger_any+0x36>
 800758c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8007590:	b128      	cbz	r0, 800759e <rclc_executor_trigger_any+0x42>
 8007592:	bc30      	pop	{r4, r5}
 8007594:	4770      	bx	lr
 8007596:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800759a:	2800      	cmp	r0, #0
 800759c:	d1f9      	bne.n	8007592 <rclc_executor_trigger_any+0x36>
 800759e:	3201      	adds	r2, #1
 80075a0:	4291      	cmp	r1, r2
 80075a2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80075a6:	d018      	beq.n	80075da <rclc_executor_trigger_any+0x7e>
 80075a8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d0f0      	beq.n	8007592 <rclc_executor_trigger_any+0x36>
 80075b0:	f893 c000 	ldrb.w	ip, [r3]
 80075b4:	f1bc 0f08 	cmp.w	ip, #8
 80075b8:	d0e0      	beq.n	800757c <rclc_executor_trigger_any+0x20>
 80075ba:	f1bc 0f09 	cmp.w	ip, #9
 80075be:	d1ea      	bne.n	8007596 <rclc_executor_trigger_any+0x3a>
 80075c0:	685c      	ldr	r4, [r3, #4]
 80075c2:	6a25      	ldr	r5, [r4, #32]
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	d1e4      	bne.n	8007592 <rclc_executor_trigger_any+0x36>
 80075c8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1e0      	bne.n	8007592 <rclc_executor_trigger_any+0x36>
 80075d0:	3201      	adds	r2, #1
 80075d2:	4291      	cmp	r1, r2
 80075d4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80075d8:	d1e6      	bne.n	80075a8 <rclc_executor_trigger_any+0x4c>
 80075da:	2000      	movs	r0, #0
 80075dc:	bc30      	pop	{r4, r5}
 80075de:	4770      	bx	lr
 80075e0:	4770      	bx	lr
 80075e2:	4608      	mov	r0, r1
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <rclc_executor_init>:
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d05f      	beq.n	80076ac <rclc_executor_init+0xc4>
 80075ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	b0b0      	sub	sp, #192	@ 0xc0
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d051      	beq.n	800769c <rclc_executor_init+0xb4>
 80075f8:	4605      	mov	r5, r0
 80075fa:	4618      	mov	r0, r3
 80075fc:	4616      	mov	r6, r2
 80075fe:	461f      	mov	r7, r3
 8007600:	f000 fbb6 	bl	8007d70 <rcutils_allocator_is_valid>
 8007604:	2800      	cmp	r0, #0
 8007606:	d049      	beq.n	800769c <rclc_executor_init+0xb4>
 8007608:	2e00      	cmp	r6, #0
 800760a:	d047      	beq.n	800769c <rclc_executor_init+0xb4>
 800760c:	492c      	ldr	r1, [pc, #176]	@ (80076c0 <rclc_executor_init+0xd8>)
 800760e:	2288      	movs	r2, #136	@ 0x88
 8007610:	a80e      	add	r0, sp, #56	@ 0x38
 8007612:	f00b ff64 	bl	80134de <memcpy>
 8007616:	a90e      	add	r1, sp, #56	@ 0x38
 8007618:	2288      	movs	r2, #136	@ 0x88
 800761a:	4628      	mov	r0, r5
 800761c:	f00b ff5f 	bl	80134de <memcpy>
 8007620:	602c      	str	r4, [r5, #0]
 8007622:	4668      	mov	r0, sp
 8007624:	60ae      	str	r6, [r5, #8]
 8007626:	466c      	mov	r4, sp
 8007628:	f002 ff0e 	bl	800a448 <rcl_get_zero_initialized_wait_set>
 800762c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800762e:	f105 0c14 	add.w	ip, r5, #20
 8007632:	f8d7 8000 	ldr.w	r8, [r7]
 8007636:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800763a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800763c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007646:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80076b8 <rclc_executor_init+0xd0>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f8cc 3000 	str.w	r3, [ip]
 8007650:	6939      	ldr	r1, [r7, #16]
 8007652:	612f      	str	r7, [r5, #16]
 8007654:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8007658:	01b0      	lsls	r0, r6, #6
 800765a:	47c0      	blx	r8
 800765c:	6068      	str	r0, [r5, #4]
 800765e:	b338      	cbz	r0, 80076b0 <rclc_executor_init+0xc8>
 8007660:	2400      	movs	r4, #0
 8007662:	e000      	b.n	8007666 <rclc_executor_init+0x7e>
 8007664:	6868      	ldr	r0, [r5, #4]
 8007666:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800766a:	4631      	mov	r1, r6
 800766c:	3401      	adds	r4, #1
 800766e:	f000 fa6b 	bl	8007b48 <rclc_executor_handle_init>
 8007672:	42a6      	cmp	r6, r4
 8007674:	d1f6      	bne.n	8007664 <rclc_executor_init+0x7c>
 8007676:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800767a:	f000 fa5b 	bl	8007b34 <rclc_executor_handle_counters_zero_init>
 800767e:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <rclc_executor_init+0xdc>)
 8007680:	686b      	ldr	r3, [r5, #4]
 8007682:	2000      	movs	r0, #0
 8007684:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8007688:	b163      	cbz	r3, 80076a4 <rclc_executor_init+0xbc>
 800768a:	692b      	ldr	r3, [r5, #16]
 800768c:	b153      	cbz	r3, 80076a4 <rclc_executor_init+0xbc>
 800768e:	68ab      	ldr	r3, [r5, #8]
 8007690:	b143      	cbz	r3, 80076a4 <rclc_executor_init+0xbc>
 8007692:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8007696:	b030      	add	sp, #192	@ 0xc0
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	200b      	movs	r0, #11
 800769e:	b030      	add	sp, #192	@ 0xc0
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	4618      	mov	r0, r3
 80076a6:	b030      	add	sp, #192	@ 0xc0
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	200b      	movs	r0, #11
 80076ae:	4770      	bx	lr
 80076b0:	200a      	movs	r0, #10
 80076b2:	e7f4      	b.n	800769e <rclc_executor_init+0xb6>
 80076b4:	f3af 8000 	nop.w
 80076b8:	3b9aca00 	.word	0x3b9aca00
 80076bc:	00000000 	.word	0x00000000
 80076c0:	08014368 	.word	0x08014368
 80076c4:	0800755d 	.word	0x0800755d

080076c8 <rclc_executor_add_subscription>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	f89d e018 	ldrb.w	lr, [sp, #24]
 80076ce:	b338      	cbz	r0, 8007720 <rclc_executor_add_subscription+0x58>
 80076d0:	b331      	cbz	r1, 8007720 <rclc_executor_add_subscription+0x58>
 80076d2:	b32a      	cbz	r2, 8007720 <rclc_executor_add_subscription+0x58>
 80076d4:	b323      	cbz	r3, 8007720 <rclc_executor_add_subscription+0x58>
 80076d6:	4604      	mov	r4, r0
 80076d8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 80076dc:	42a8      	cmp	r0, r5
 80076de:	d301      	bcc.n	80076e4 <rclc_executor_add_subscription+0x1c>
 80076e0:	2001      	movs	r0, #1
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	6866      	ldr	r6, [r4, #4]
 80076e6:	0187      	lsls	r7, r0, #6
 80076e8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 80076ec:	2500      	movs	r5, #0
 80076ee:	55f5      	strb	r5, [r6, r7]
 80076f0:	3001      	adds	r0, #1
 80076f2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 80076f6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 80076fa:	2301      	movs	r3, #1
 80076fc:	f104 0514 	add.w	r5, r4, #20
 8007700:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8007704:	f88c e001 	strb.w	lr, [ip, #1]
 8007708:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800770c:	60e0      	str	r0, [r4, #12]
 800770e:	4628      	mov	r0, r5
 8007710:	f002 feae 	bl	800a470 <rcl_wait_set_is_valid>
 8007714:	b930      	cbnz	r0, 8007724 <rclc_executor_add_subscription+0x5c>
 8007716:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007718:	3301      	adds	r3, #1
 800771a:	2000      	movs	r0, #0
 800771c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007720:	200b      	movs	r0, #11
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007724:	4628      	mov	r0, r5
 8007726:	f002 fea9 	bl	800a47c <rcl_wait_set_fini>
 800772a:	2800      	cmp	r0, #0
 800772c:	d0f3      	beq.n	8007716 <rclc_executor_add_subscription+0x4e>
 800772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007730 <rclc_executor_prepare>:
 8007730:	2800      	cmp	r0, #0
 8007732:	d044      	beq.n	80077be <rclc_executor_prepare+0x8e>
 8007734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007736:	f100 0514 	add.w	r5, r0, #20
 800773a:	b09b      	sub	sp, #108	@ 0x6c
 800773c:	4604      	mov	r4, r0
 800773e:	4628      	mov	r0, r5
 8007740:	f002 fe96 	bl	800a470 <rcl_wait_set_is_valid>
 8007744:	b110      	cbz	r0, 800774c <rclc_executor_prepare+0x1c>
 8007746:	2000      	movs	r0, #0
 8007748:	b01b      	add	sp, #108	@ 0x6c
 800774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800774c:	4628      	mov	r0, r5
 800774e:	f002 fe95 	bl	800a47c <rcl_wait_set_fini>
 8007752:	2800      	cmp	r0, #0
 8007754:	d130      	bne.n	80077b8 <rclc_executor_prepare+0x88>
 8007756:	a80c      	add	r0, sp, #48	@ 0x30
 8007758:	f002 fe76 	bl	800a448 <rcl_get_zero_initialized_wait_set>
 800775c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8007760:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007764:	46ae      	mov	lr, r5
 8007766:	6927      	ldr	r7, [r4, #16]
 8007768:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800776c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007770:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007774:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007778:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800777c:	f8dc 3000 	ldr.w	r3, [ip]
 8007780:	f8ce 3000 	str.w	r3, [lr]
 8007784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007786:	ae04      	add	r6, sp, #16
 8007788:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007792:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007794:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007798:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800779c:	e9cd 2100 	strd	r2, r1, [sp]
 80077a0:	4628      	mov	r0, r5
 80077a2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80077a4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077a6:	f003 f967 	bl	800aa78 <rcl_wait_set_init>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d0cc      	beq.n	8007748 <rclc_executor_prepare+0x18>
 80077ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 80077b0:	f000 fb02 	bl	8007db8 <rcutils_reset_error>
 80077b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077b6:	e7c7      	b.n	8007748 <rclc_executor_prepare+0x18>
 80077b8:	f000 fafe 	bl	8007db8 <rcutils_reset_error>
 80077bc:	e7cb      	b.n	8007756 <rclc_executor_prepare+0x26>
 80077be:	200b      	movs	r0, #11
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <rclc_executor_spin_some.part.0>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	f100 0614 	add.w	r6, r0, #20
 80077cc:	b083      	sub	sp, #12
 80077ce:	4691      	mov	r9, r2
 80077d0:	4698      	mov	r8, r3
 80077d2:	4605      	mov	r5, r0
 80077d4:	f7ff ffac 	bl	8007730 <rclc_executor_prepare>
 80077d8:	4630      	mov	r0, r6
 80077da:	f002 ff1b 	bl	800a614 <rcl_wait_set_clear>
 80077de:	4607      	mov	r7, r0
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f040 80ed 	bne.w	80079c0 <rclc_executor_spin_some.part.0+0x1fc>
 80077e6:	68ab      	ldr	r3, [r5, #8]
 80077e8:	4604      	mov	r4, r0
 80077ea:	b303      	cbz	r3, 800782e <rclc_executor_spin_some.part.0+0x6a>
 80077ec:	6869      	ldr	r1, [r5, #4]
 80077ee:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80077f2:	01a2      	lsls	r2, r4, #6
 80077f4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 80077f8:	b1cb      	cbz	r3, 800782e <rclc_executor_spin_some.part.0+0x6a>
 80077fa:	5c8b      	ldrb	r3, [r1, r2]
 80077fc:	2b0a      	cmp	r3, #10
 80077fe:	f200 80d8 	bhi.w	80079b2 <rclc_executor_spin_some.part.0+0x1ee>
 8007802:	e8df f003 	tbb	[pc, r3]
 8007806:	9c9c      	.short	0x9c9c
 8007808:	068c8ca7 	.word	0x068c8ca7
 800780c:	bdc90606 	.word	0xbdc90606
 8007810:	b2          	.byte	0xb2
 8007811:	00          	.byte	0x00
 8007812:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007816:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800781a:	4630      	mov	r0, r6
 800781c:	f003 fa42 	bl	800aca4 <rcl_wait_set_add_service>
 8007820:	2800      	cmp	r0, #0
 8007822:	f040 8086 	bne.w	8007932 <rclc_executor_spin_some.part.0+0x16e>
 8007826:	68ab      	ldr	r3, [r5, #8]
 8007828:	3401      	adds	r4, #1
 800782a:	429c      	cmp	r4, r3
 800782c:	d3de      	bcc.n	80077ec <rclc_executor_spin_some.part.0+0x28>
 800782e:	4643      	mov	r3, r8
 8007830:	464a      	mov	r2, r9
 8007832:	4630      	mov	r0, r6
 8007834:	f003 fa64 	bl	800ad00 <rcl_wait>
 8007838:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80c7 	beq.w	80079d0 <rclc_executor_spin_some.part.0+0x20c>
 8007842:	2b01      	cmp	r3, #1
 8007844:	f040 80b5 	bne.w	80079b2 <rclc_executor_spin_some.part.0+0x1ee>
 8007848:	68ab      	ldr	r3, [r5, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8159 	beq.w	8007b02 <rclc_executor_spin_some.part.0+0x33e>
 8007850:	2400      	movs	r4, #0
 8007852:	46a0      	mov	r8, r4
 8007854:	f240 1991 	movw	r9, #401	@ 0x191
 8007858:	e00a      	b.n	8007870 <rclc_executor_spin_some.part.0+0xac>
 800785a:	f7ff fb7d 	bl	8006f58 <_rclc_check_for_new_data>
 800785e:	4604      	mov	r4, r0
 8007860:	b110      	cbz	r0, 8007868 <rclc_executor_spin_some.part.0+0xa4>
 8007862:	4548      	cmp	r0, r9
 8007864:	f040 80b2 	bne.w	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007868:	68ab      	ldr	r3, [r5, #8]
 800786a:	4598      	cmp	r8, r3
 800786c:	f080 8126 	bcs.w	8007abc <rclc_executor_spin_some.part.0+0x2f8>
 8007870:	686a      	ldr	r2, [r5, #4]
 8007872:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8007876:	4631      	mov	r1, r6
 8007878:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800787c:	f108 0801 	add.w	r8, r8, #1
 8007880:	f1bc 0f00 	cmp.w	ip, #0
 8007884:	d1e9      	bne.n	800785a <rclc_executor_spin_some.part.0+0x96>
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800788e:	4798      	blx	r3
 8007890:	2800      	cmp	r0, #0
 8007892:	f000 809b 	beq.w	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007896:	68ab      	ldr	r3, [r5, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8097 	beq.w	80079cc <rclc_executor_spin_some.part.0+0x208>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	f240 1991 	movw	r9, #401	@ 0x191
 80078a6:	e009      	b.n	80078bc <rclc_executor_spin_some.part.0+0xf8>
 80078a8:	f7ff fba4 	bl	8006ff4 <_rclc_take_new_data>
 80078ac:	4604      	mov	r4, r0
 80078ae:	b110      	cbz	r0, 80078b6 <rclc_executor_spin_some.part.0+0xf2>
 80078b0:	4548      	cmp	r0, r9
 80078b2:	f040 808b 	bne.w	80079cc <rclc_executor_spin_some.part.0+0x208>
 80078b6:	68ab      	ldr	r3, [r5, #8]
 80078b8:	4598      	cmp	r8, r3
 80078ba:	d209      	bcs.n	80078d0 <rclc_executor_spin_some.part.0+0x10c>
 80078bc:	6868      	ldr	r0, [r5, #4]
 80078be:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80078c2:	4631      	mov	r1, r6
 80078c4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80078c8:	f108 0801 	add.w	r8, r8, #1
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	d1eb      	bne.n	80078a8 <rclc_executor_spin_some.part.0+0xe4>
 80078d0:	2600      	movs	r6, #0
 80078d2:	b97b      	cbnz	r3, 80078f4 <rclc_executor_spin_some.part.0+0x130>
 80078d4:	e07a      	b.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 80078d6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80078da:	2a08      	cmp	r2, #8
 80078dc:	f000 80fd 	beq.w	8007ada <rclc_executor_spin_some.part.0+0x316>
 80078e0:	2a09      	cmp	r2, #9
 80078e2:	f000 80ef 	beq.w	8007ac4 <rclc_executor_spin_some.part.0+0x300>
 80078e6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80078ea:	b98a      	cbnz	r2, 8007910 <rclc_executor_spin_some.part.0+0x14c>
 80078ec:	3601      	adds	r6, #1
 80078ee:	429e      	cmp	r6, r3
 80078f0:	d262      	bcs.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 80078f2:	2400      	movs	r4, #0
 80078f4:	686a      	ldr	r2, [r5, #4]
 80078f6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80078fa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80078fe:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8007902:	2900      	cmp	r1, #0
 8007904:	d062      	beq.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007906:	7841      	ldrb	r1, [r0, #1]
 8007908:	2900      	cmp	r1, #0
 800790a:	d0e4      	beq.n	80078d6 <rclc_executor_spin_some.part.0+0x112>
 800790c:	2901      	cmp	r1, #1
 800790e:	d1ed      	bne.n	80078ec <rclc_executor_spin_some.part.0+0x128>
 8007910:	f7ff fce4 	bl	80072dc <_rclc_execute.part.0>
 8007914:	2800      	cmp	r0, #0
 8007916:	f040 80b6 	bne.w	8007a86 <rclc_executor_spin_some.part.0+0x2c2>
 800791a:	68ab      	ldr	r3, [r5, #8]
 800791c:	e7e6      	b.n	80078ec <rclc_executor_spin_some.part.0+0x128>
 800791e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007922:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007926:	4630      	mov	r0, r6
 8007928:	f003 f990 	bl	800ac4c <rcl_wait_set_add_client>
 800792c:	2800      	cmp	r0, #0
 800792e:	f43f af7a 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 8007932:	9001      	str	r0, [sp, #4]
 8007934:	f000 fa40 	bl	8007db8 <rcutils_reset_error>
 8007938:	9801      	ldr	r0, [sp, #4]
 800793a:	4607      	mov	r7, r0
 800793c:	e03c      	b.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 800793e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007942:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007946:	4630      	mov	r0, r6
 8007948:	f002 fe38 	bl	800a5bc <rcl_wait_set_add_subscription>
 800794c:	2800      	cmp	r0, #0
 800794e:	f43f af6a 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 8007952:	e7ee      	b.n	8007932 <rclc_executor_spin_some.part.0+0x16e>
 8007954:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007958:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800795c:	4630      	mov	r0, r6
 800795e:	f003 f945 	bl	800abec <rcl_wait_set_add_timer>
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f af5f 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 8007968:	e7e3      	b.n	8007932 <rclc_executor_spin_some.part.0+0x16e>
 800796a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800796e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007972:	4630      	mov	r0, r6
 8007974:	f003 f90e 	bl	800ab94 <rcl_wait_set_add_guard_condition>
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f af54 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 800797e:	e7d8      	b.n	8007932 <rclc_executor_spin_some.part.0+0x16e>
 8007980:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007984:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007988:	3110      	adds	r1, #16
 800798a:	4630      	mov	r0, r6
 800798c:	f003 fe90 	bl	800b6b0 <rcl_action_wait_set_add_action_server>
 8007990:	2800      	cmp	r0, #0
 8007992:	f43f af48 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 8007996:	e7cc      	b.n	8007932 <rclc_executor_spin_some.part.0+0x16e>
 8007998:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800799c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80079a0:	3110      	adds	r1, #16
 80079a2:	2300      	movs	r3, #0
 80079a4:	4630      	mov	r0, r6
 80079a6:	f003 fc5b 	bl	800b260 <rcl_action_wait_set_add_action_client>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	f43f af3b 	beq.w	8007826 <rclc_executor_spin_some.part.0+0x62>
 80079b0:	e7bf      	b.n	8007932 <rclc_executor_spin_some.part.0+0x16e>
 80079b2:	f000 fa01 	bl	8007db8 <rcutils_reset_error>
 80079b6:	2701      	movs	r7, #1
 80079b8:	4638      	mov	r0, r7
 80079ba:	b003      	add	sp, #12
 80079bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c0:	f000 f9fa 	bl	8007db8 <rcutils_reset_error>
 80079c4:	4638      	mov	r0, r7
 80079c6:	b003      	add	sp, #12
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	4627      	mov	r7, r4
 80079ce:	e7f3      	b.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 80079d0:	68ab      	ldr	r3, [r5, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8092 	beq.w	8007afc <rclc_executor_spin_some.part.0+0x338>
 80079d8:	2400      	movs	r4, #0
 80079da:	46a0      	mov	r8, r4
 80079dc:	f240 1991 	movw	r9, #401	@ 0x191
 80079e0:	e008      	b.n	80079f4 <rclc_executor_spin_some.part.0+0x230>
 80079e2:	f7ff fab9 	bl	8006f58 <_rclc_check_for_new_data>
 80079e6:	4604      	mov	r4, r0
 80079e8:	b108      	cbz	r0, 80079ee <rclc_executor_spin_some.part.0+0x22a>
 80079ea:	4548      	cmp	r0, r9
 80079ec:	d1ee      	bne.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 80079ee:	68ab      	ldr	r3, [r5, #8]
 80079f0:	4598      	cmp	r8, r3
 80079f2:	d265      	bcs.n	8007ac0 <rclc_executor_spin_some.part.0+0x2fc>
 80079f4:	686a      	ldr	r2, [r5, #4]
 80079f6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80079fa:	4631      	mov	r1, r6
 80079fc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8007a00:	f108 0801 	add.w	r8, r8, #1
 8007a04:	f1bc 0f00 	cmp.w	ip, #0
 8007a08:	d1eb      	bne.n	80079e2 <rclc_executor_spin_some.part.0+0x21e>
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8007a12:	4798      	blx	r3
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d0d9      	beq.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007a18:	68ab      	ldr	r3, [r5, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0d6      	beq.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	f240 1991 	movw	r9, #401	@ 0x191
 8007a26:	f240 2a59 	movw	sl, #601	@ 0x259
 8007a2a:	e00e      	b.n	8007a4a <rclc_executor_spin_some.part.0+0x286>
 8007a2c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d033      	beq.n	8007a9c <rclc_executor_spin_some.part.0+0x2d8>
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d028      	beq.n	8007a8a <rclc_executor_spin_some.part.0+0x2c6>
 8007a38:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8007a3c:	b9fb      	cbnz	r3, 8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007a3e:	68ab      	ldr	r3, [r5, #8]
 8007a40:	f108 0801 	add.w	r8, r8, #1
 8007a44:	4598      	cmp	r8, r3
 8007a46:	d2b7      	bcs.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 8007a48:	2400      	movs	r4, #0
 8007a4a:	6868      	ldr	r0, [r5, #4]
 8007a4c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8007a50:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007a54:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0b7      	beq.n	80079cc <rclc_executor_spin_some.part.0+0x208>
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	f7ff fac9 	bl	8006ff4 <_rclc_take_new_data>
 8007a62:	b118      	cbz	r0, 8007a6c <rclc_executor_spin_some.part.0+0x2a8>
 8007a64:	4548      	cmp	r0, r9
 8007a66:	d001      	beq.n	8007a6c <rclc_executor_spin_some.part.0+0x2a8>
 8007a68:	4550      	cmp	r0, sl
 8007a6a:	d10c      	bne.n	8007a86 <rclc_executor_spin_some.part.0+0x2c2>
 8007a6c:	686b      	ldr	r3, [r5, #4]
 8007a6e:	eb13 000b 	adds.w	r0, r3, fp
 8007a72:	d021      	beq.n	8007ab8 <rclc_executor_spin_some.part.0+0x2f4>
 8007a74:	7842      	ldrb	r2, [r0, #1]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d0d8      	beq.n	8007a2c <rclc_executor_spin_some.part.0+0x268>
 8007a7a:	2a01      	cmp	r2, #1
 8007a7c:	d1df      	bne.n	8007a3e <rclc_executor_spin_some.part.0+0x27a>
 8007a7e:	f7ff fc2d 	bl	80072dc <_rclc_execute.part.0>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0db      	beq.n	8007a3e <rclc_executor_spin_some.part.0+0x27a>
 8007a86:	4607      	mov	r7, r0
 8007a88:	e796      	b.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 8007a8a:	6843      	ldr	r3, [r0, #4]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	2a00      	cmp	r2, #0
 8007a90:	d1f5      	bne.n	8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007a92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0d1      	beq.n	8007a3e <rclc_executor_spin_some.part.0+0x27a>
 8007a9a:	e7f0      	b.n	8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007a9c:	6843      	ldr	r3, [r0, #4]
 8007a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007aa0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8007aa4:	d1eb      	bne.n	8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007aa6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d1e7      	bne.n	8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007aae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0c3      	beq.n	8007a3e <rclc_executor_spin_some.part.0+0x27a>
 8007ab6:	e7e2      	b.n	8007a7e <rclc_executor_spin_some.part.0+0x2ba>
 8007ab8:	270b      	movs	r7, #11
 8007aba:	e77d      	b.n	80079b8 <rclc_executor_spin_some.part.0+0x1f4>
 8007abc:	686a      	ldr	r2, [r5, #4]
 8007abe:	e6e2      	b.n	8007886 <rclc_executor_spin_some.part.0+0xc2>
 8007ac0:	686a      	ldr	r2, [r5, #4]
 8007ac2:	e7a2      	b.n	8007a0a <rclc_executor_spin_some.part.0+0x246>
 8007ac4:	6842      	ldr	r2, [r0, #4]
 8007ac6:	6a11      	ldr	r1, [r2, #32]
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	f47f af21 	bne.w	8007910 <rclc_executor_spin_some.part.0+0x14c>
 8007ace:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	f43f af0a 	beq.w	80078ec <rclc_executor_spin_some.part.0+0x128>
 8007ad8:	e71a      	b.n	8007910 <rclc_executor_spin_some.part.0+0x14c>
 8007ada:	6842      	ldr	r2, [r0, #4]
 8007adc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8007ade:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8007ae2:	f47f af15 	bne.w	8007910 <rclc_executor_spin_some.part.0+0x14c>
 8007ae6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8007aea:	2900      	cmp	r1, #0
 8007aec:	f47f af10 	bne.w	8007910 <rclc_executor_spin_some.part.0+0x14c>
 8007af0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	f43f aef9 	beq.w	80078ec <rclc_executor_spin_some.part.0+0x128>
 8007afa:	e709      	b.n	8007910 <rclc_executor_spin_some.part.0+0x14c>
 8007afc:	686a      	ldr	r2, [r5, #4]
 8007afe:	461c      	mov	r4, r3
 8007b00:	e783      	b.n	8007a0a <rclc_executor_spin_some.part.0+0x246>
 8007b02:	686a      	ldr	r2, [r5, #4]
 8007b04:	461c      	mov	r4, r3
 8007b06:	e6be      	b.n	8007886 <rclc_executor_spin_some.part.0+0xc2>

08007b08 <rclc_executor_spin_some>:
 8007b08:	b190      	cbz	r0, 8007b30 <rclc_executor_spin_some+0x28>
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	6800      	ldr	r0, [r0, #0]
 8007b10:	4616      	mov	r6, r2
 8007b12:	461d      	mov	r5, r3
 8007b14:	f001 fb0c 	bl	8009130 <rcl_context_is_valid>
 8007b18:	b130      	cbz	r0, 8007b28 <rclc_executor_spin_some+0x20>
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b24:	f7ff be4e 	b.w	80077c4 <rclc_executor_spin_some.part.0>
 8007b28:	f000 f946 	bl	8007db8 <rcutils_reset_error>
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	200b      	movs	r0, #11
 8007b32:	4770      	bx	lr

08007b34 <rclc_executor_handle_counters_zero_init>:
 8007b34:	b130      	cbz	r0, 8007b44 <rclc_executor_handle_counters_zero_init+0x10>
 8007b36:	b508      	push	{r3, lr}
 8007b38:	2220      	movs	r2, #32
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f00b fc06 	bl	801334c <memset>
 8007b40:	2000      	movs	r0, #0
 8007b42:	bd08      	pop	{r3, pc}
 8007b44:	200b      	movs	r0, #11
 8007b46:	4770      	bx	lr

08007b48 <rclc_executor_handle_init>:
 8007b48:	b168      	cbz	r0, 8007b66 <rclc_executor_handle_init+0x1e>
 8007b4a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8007b70 <rclc_executor_handle_init+0x28>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220b      	movs	r2, #11
 8007b52:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8007b56:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8007b5a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8007b5e:	8002      	strh	r2, [r0, #0]
 8007b60:	8703      	strh	r3, [r0, #56]	@ 0x38
 8007b62:	4618      	mov	r0, r3
 8007b64:	4770      	bx	lr
 8007b66:	200b      	movs	r0, #11
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w
	...

08007b78 <rclc_support_init>:
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	b086      	sub	sp, #24
 8007b7e:	b3b8      	cbz	r0, 8007bf0 <rclc_support_init+0x78>
 8007b80:	461c      	mov	r4, r3
 8007b82:	b3ab      	cbz	r3, 8007bf0 <rclc_support_init+0x78>
 8007b84:	460f      	mov	r7, r1
 8007b86:	4690      	mov	r8, r2
 8007b88:	4606      	mov	r6, r0
 8007b8a:	f001 fc3b 	bl	8009404 <rcl_get_zero_initialized_init_options>
 8007b8e:	f104 030c 	add.w	r3, r4, #12
 8007b92:	9005      	str	r0, [sp, #20]
 8007b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b98:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007b9c:	a805      	add	r0, sp, #20
 8007b9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007ba2:	f001 fc31 	bl	8009408 <rcl_init_options_init>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b9e0      	cbnz	r0, 8007be4 <rclc_support_init+0x6c>
 8007baa:	ad02      	add	r5, sp, #8
 8007bac:	4628      	mov	r0, r5
 8007bae:	f001 fab5 	bl	800911c <rcl_get_zero_initialized_context>
 8007bb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bb6:	4633      	mov	r3, r6
 8007bb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8007bbc:	aa05      	add	r2, sp, #20
 8007bbe:	4641      	mov	r1, r8
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f001 fb1b 	bl	80091fc <rcl_init>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b9b8      	cbnz	r0, 8007bfa <rclc_support_init+0x82>
 8007bca:	60b4      	str	r4, [r6, #8]
 8007bcc:	4622      	mov	r2, r4
 8007bce:	f106 010c 	add.w	r1, r6, #12
 8007bd2:	2003      	movs	r0, #3
 8007bd4:	f002 fa42 	bl	800a05c <rcl_clock_init>
 8007bd8:	4605      	mov	r5, r0
 8007bda:	b970      	cbnz	r0, 8007bfa <rclc_support_init+0x82>
 8007bdc:	a805      	add	r0, sp, #20
 8007bde:	f001 fc79 	bl	80094d4 <rcl_init_options_fini>
 8007be2:	b108      	cbz	r0, 8007be8 <rclc_support_init+0x70>
 8007be4:	f000 f8e8 	bl	8007db8 <rcutils_reset_error>
 8007be8:	4628      	mov	r0, r5
 8007bea:	b006      	add	sp, #24
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	250b      	movs	r5, #11
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	b006      	add	sp, #24
 8007bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfa:	f000 f8dd 	bl	8007db8 <rcutils_reset_error>
 8007bfe:	a805      	add	r0, sp, #20
 8007c00:	f001 fc68 	bl	80094d4 <rcl_init_options_fini>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d0ef      	beq.n	8007be8 <rclc_support_init+0x70>
 8007c08:	e7ec      	b.n	8007be4 <rclc_support_init+0x6c>
 8007c0a:	bf00      	nop

08007c0c <rclc_node_init_default>:
 8007c0c:	b3b8      	cbz	r0, 8007c7e <rclc_node_init_default+0x72>
 8007c0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c12:	460d      	mov	r5, r1
 8007c14:	b0a1      	sub	sp, #132	@ 0x84
 8007c16:	b329      	cbz	r1, 8007c64 <rclc_node_init_default+0x58>
 8007c18:	4616      	mov	r6, r2
 8007c1a:	b31a      	cbz	r2, 8007c64 <rclc_node_init_default+0x58>
 8007c1c:	461f      	mov	r7, r3
 8007c1e:	b30b      	cbz	r3, 8007c64 <rclc_node_init_default+0x58>
 8007c20:	f10d 0810 	add.w	r8, sp, #16
 8007c24:	4604      	mov	r4, r0
 8007c26:	4640      	mov	r0, r8
 8007c28:	f001 fd0c 	bl	8009644 <rcl_get_zero_initialized_node>
 8007c2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c30:	f10d 0918 	add.w	r9, sp, #24
 8007c34:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c38:	4648      	mov	r0, r9
 8007c3a:	f001 fe7b 	bl	8009934 <rcl_node_get_default_options>
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f001 fd00 	bl	8009644 <rcl_get_zero_initialized_node>
 8007c44:	f8cd 9000 	str.w	r9, [sp]
 8007c48:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c52:	4632      	mov	r2, r6
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f001 fcfe 	bl	8009658 <rcl_node_init>
 8007c5c:	b930      	cbnz	r0, 8007c6c <rclc_node_init_default+0x60>
 8007c5e:	b021      	add	sp, #132	@ 0x84
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c64:	200b      	movs	r0, #11
 8007c66:	b021      	add	sp, #132	@ 0x84
 8007c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6c:	9003      	str	r0, [sp, #12]
 8007c6e:	f000 f8a3 	bl	8007db8 <rcutils_reset_error>
 8007c72:	f000 f8a1 	bl	8007db8 <rcutils_reset_error>
 8007c76:	9803      	ldr	r0, [sp, #12]
 8007c78:	b021      	add	sp, #132	@ 0x84
 8007c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c7e:	200b      	movs	r0, #11
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop

08007c84 <rclc_subscription_init_default>:
 8007c84:	b368      	cbz	r0, 8007ce2 <rclc_subscription_init_default+0x5e>
 8007c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	b0a0      	sub	sp, #128	@ 0x80
 8007c8e:	b321      	cbz	r1, 8007cda <rclc_subscription_init_default+0x56>
 8007c90:	4616      	mov	r6, r2
 8007c92:	b312      	cbz	r2, 8007cda <rclc_subscription_init_default+0x56>
 8007c94:	461f      	mov	r7, r3
 8007c96:	b303      	cbz	r3, 8007cda <rclc_subscription_init_default+0x56>
 8007c98:	4604      	mov	r4, r0
 8007c9a:	f002 f883 	bl	8009da4 <rcl_get_zero_initialized_subscription>
 8007c9e:	f10d 0810 	add.w	r8, sp, #16
 8007ca2:	6020      	str	r0, [r4, #0]
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	f002 f92b 	bl	8009f00 <rcl_subscription_get_default_options>
 8007caa:	490f      	ldr	r1, [pc, #60]	@ (8007ce8 <rclc_subscription_init_default+0x64>)
 8007cac:	2250      	movs	r2, #80	@ 0x50
 8007cae:	4640      	mov	r0, r8
 8007cb0:	f00b fc15 	bl	80134de <memcpy>
 8007cb4:	f8cd 8000 	str.w	r8, [sp]
 8007cb8:	463b      	mov	r3, r7
 8007cba:	4632      	mov	r2, r6
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f002 f876 	bl	8009db0 <rcl_subscription_init>
 8007cc4:	b910      	cbnz	r0, 8007ccc <rclc_subscription_init_default+0x48>
 8007cc6:	b020      	add	sp, #128	@ 0x80
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	9003      	str	r0, [sp, #12]
 8007cce:	f000 f873 	bl	8007db8 <rcutils_reset_error>
 8007cd2:	9803      	ldr	r0, [sp, #12]
 8007cd4:	b020      	add	sp, #128	@ 0x80
 8007cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cda:	200b      	movs	r0, #11
 8007cdc:	b020      	add	sp, #128	@ 0x80
 8007cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce2:	200b      	movs	r0, #11
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	080143f0 	.word	0x080143f0

08007cec <__default_zero_allocate>:
 8007cec:	f00a bf44 	b.w	8012b78 <calloc>

08007cf0 <__default_reallocate>:
 8007cf0:	f00b b8d0 	b.w	8012e94 <realloc>

08007cf4 <__default_deallocate>:
 8007cf4:	f00a bfac 	b.w	8012c50 <free>

08007cf8 <__default_allocate>:
 8007cf8:	f00a bfa2 	b.w	8012c40 <malloc>

08007cfc <rcutils_get_zero_initialized_allocator>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4c05      	ldr	r4, [pc, #20]	@ (8007d14 <rcutils_get_zero_initialized_allocator+0x18>)
 8007d00:	4686      	mov	lr, r0
 8007d02:	4684      	mov	ip, r0
 8007d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f8cc 3000 	str.w	r3, [ip]
 8007d10:	4670      	mov	r0, lr
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	08014440 	.word	0x08014440

08007d18 <rcutils_set_default_allocator>:
 8007d18:	b1a8      	cbz	r0, 8007d46 <rcutils_set_default_allocator+0x2e>
 8007d1a:	6802      	ldr	r2, [r0, #0]
 8007d1c:	b1a2      	cbz	r2, 8007d48 <rcutils_set_default_allocator+0x30>
 8007d1e:	6841      	ldr	r1, [r0, #4]
 8007d20:	b1a1      	cbz	r1, 8007d4c <rcutils_set_default_allocator+0x34>
 8007d22:	b410      	push	{r4}
 8007d24:	68c4      	ldr	r4, [r0, #12]
 8007d26:	b164      	cbz	r4, 8007d42 <rcutils_set_default_allocator+0x2a>
 8007d28:	6880      	ldr	r0, [r0, #8]
 8007d2a:	b138      	cbz	r0, 8007d3c <rcutils_set_default_allocator+0x24>
 8007d2c:	4b08      	ldr	r3, [pc, #32]	@ (8007d50 <rcutils_set_default_allocator+0x38>)
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	2200      	movs	r2, #0
 8007d32:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007d36:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	4620      	mov	r0, r4
 8007d44:	e7fa      	b.n	8007d3c <rcutils_set_default_allocator+0x24>
 8007d46:	4770      	bx	lr
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4770      	bx	lr
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4770      	bx	lr
 8007d50:	20000014 	.word	0x20000014

08007d54 <rcutils_get_default_allocator>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4c05      	ldr	r4, [pc, #20]	@ (8007d6c <rcutils_get_default_allocator+0x18>)
 8007d58:	4686      	mov	lr, r0
 8007d5a:	4684      	mov	ip, r0
 8007d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	f8cc 3000 	str.w	r3, [ip]
 8007d68:	4670      	mov	r0, lr
 8007d6a:	bd10      	pop	{r4, pc}
 8007d6c:	20000014 	.word	0x20000014

08007d70 <rcutils_allocator_is_valid>:
 8007d70:	b158      	cbz	r0, 8007d8a <rcutils_allocator_is_valid+0x1a>
 8007d72:	6803      	ldr	r3, [r0, #0]
 8007d74:	b143      	cbz	r3, 8007d88 <rcutils_allocator_is_valid+0x18>
 8007d76:	6843      	ldr	r3, [r0, #4]
 8007d78:	b133      	cbz	r3, 8007d88 <rcutils_allocator_is_valid+0x18>
 8007d7a:	68c3      	ldr	r3, [r0, #12]
 8007d7c:	b123      	cbz	r3, 8007d88 <rcutils_allocator_is_valid+0x18>
 8007d7e:	6880      	ldr	r0, [r0, #8]
 8007d80:	3800      	subs	r0, #0
 8007d82:	bf18      	it	ne
 8007d84:	2001      	movne	r0, #1
 8007d86:	4770      	bx	lr
 8007d88:	4618      	mov	r0, r3
 8007d8a:	4770      	bx	lr

08007d8c <rcutils_get_error_string>:
 8007d8c:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <rcutils_get_error_string+0x1c>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b13b      	cbz	r3, 8007da2 <rcutils_get_error_string+0x16>
 8007d92:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <rcutils_get_error_string+0x20>)
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	b90a      	cbnz	r2, 8007d9c <rcutils_get_error_string+0x10>
 8007d98:	2201      	movs	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <rcutils_get_error_string+0x24>)
 8007d9e:	7818      	ldrb	r0, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	4b04      	ldr	r3, [pc, #16]	@ (8007db4 <rcutils_get_error_string+0x28>)
 8007da4:	7818      	ldrb	r0, [r3, #0]
 8007da6:	4770      	bx	lr
 8007da8:	20008fbc 	.word	0x20008fbc
 8007dac:	20008fd1 	.word	0x20008fd1
 8007db0:	20008fd0 	.word	0x20008fd0
 8007db4:	08014454 	.word	0x08014454

08007db8 <rcutils_reset_error>:
 8007db8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007dd8 <rcutils_reset_error+0x20>
 8007dbc:	4a08      	ldr	r2, [pc, #32]	@ (8007de0 <rcutils_reset_error+0x28>)
 8007dbe:	4809      	ldr	r0, [pc, #36]	@ (8007de4 <rcutils_reset_error+0x2c>)
 8007dc0:	4909      	ldr	r1, [pc, #36]	@ (8007de8 <rcutils_reset_error+0x30>)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	8013      	strh	r3, [r2, #0]
 8007dc6:	ed82 7b02 	vstr	d7, [r2, #8]
 8007dca:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <rcutils_reset_error+0x34>)
 8007dcc:	7003      	strb	r3, [r0, #0]
 8007dce:	700b      	strb	r3, [r1, #0]
 8007dd0:	7013      	strb	r3, [r2, #0]
 8007dd2:	4770      	bx	lr
 8007dd4:	f3af 8000 	nop.w
	...
 8007de0:	20008fc0 	.word	0x20008fc0
 8007de4:	20008fd1 	.word	0x20008fd1
 8007de8:	20008fd0 	.word	0x20008fd0
 8007dec:	20008fbc 	.word	0x20008fbc

08007df0 <rcutils_system_time_now>:
 8007df0:	b308      	cbz	r0, 8007e36 <rcutils_system_time_now+0x46>
 8007df2:	b570      	push	{r4, r5, r6, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	4604      	mov	r4, r0
 8007df8:	4669      	mov	r1, sp
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	f7f9 f95c 	bl	80010b8 <clock_gettime>
 8007e00:	e9dd 3500 	ldrd	r3, r5, [sp]
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	db13      	blt.n	8007e30 <rcutils_system_time_now+0x40>
 8007e08:	9902      	ldr	r1, [sp, #8]
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	db0d      	blt.n	8007e2a <rcutils_system_time_now+0x3a>
 8007e0e:	4e0b      	ldr	r6, [pc, #44]	@ (8007e3c <rcutils_system_time_now+0x4c>)
 8007e10:	fba3 3206 	umull	r3, r2, r3, r6
 8007e14:	185b      	adds	r3, r3, r1
 8007e16:	fb06 2205 	mla	r2, r6, r5, r2
 8007e1a:	f04f 0000 	mov.w	r0, #0
 8007e1e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8007e22:	e9c4 3200 	strd	r3, r2, [r4]
 8007e26:	b004      	add	sp, #16
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	ea53 0205 	orrs.w	r2, r3, r5
 8007e2e:	d1ee      	bne.n	8007e0e <rcutils_system_time_now+0x1e>
 8007e30:	2002      	movs	r0, #2
 8007e32:	b004      	add	sp, #16
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
 8007e36:	200b      	movs	r0, #11
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	3b9aca00 	.word	0x3b9aca00

08007e40 <rcutils_steady_time_now>:
 8007e40:	b308      	cbz	r0, 8007e86 <rcutils_steady_time_now+0x46>
 8007e42:	b570      	push	{r4, r5, r6, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	4604      	mov	r4, r0
 8007e48:	4669      	mov	r1, sp
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7f9 f934 	bl	80010b8 <clock_gettime>
 8007e50:	e9dd 3500 	ldrd	r3, r5, [sp]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	db13      	blt.n	8007e80 <rcutils_steady_time_now+0x40>
 8007e58:	9902      	ldr	r1, [sp, #8]
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	db0d      	blt.n	8007e7a <rcutils_steady_time_now+0x3a>
 8007e5e:	4e0b      	ldr	r6, [pc, #44]	@ (8007e8c <rcutils_steady_time_now+0x4c>)
 8007e60:	fba3 3206 	umull	r3, r2, r3, r6
 8007e64:	185b      	adds	r3, r3, r1
 8007e66:	fb06 2205 	mla	r2, r6, r5, r2
 8007e6a:	f04f 0000 	mov.w	r0, #0
 8007e6e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8007e72:	e9c4 3200 	strd	r3, r2, [r4]
 8007e76:	b004      	add	sp, #16
 8007e78:	bd70      	pop	{r4, r5, r6, pc}
 8007e7a:	ea53 0205 	orrs.w	r2, r3, r5
 8007e7e:	d1ee      	bne.n	8007e5e <rcutils_steady_time_now+0x1e>
 8007e80:	2002      	movs	r0, #2
 8007e82:	b004      	add	sp, #16
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
 8007e86:	200b      	movs	r0, #11
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	3b9aca00 	.word	0x3b9aca00

08007e90 <rmw_uros_set_custom_transport>:
 8007e90:	b470      	push	{r4, r5, r6}
 8007e92:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8007e96:	b162      	cbz	r2, 8007eb2 <rmw_uros_set_custom_transport+0x22>
 8007e98:	b15b      	cbz	r3, 8007eb2 <rmw_uros_set_custom_transport+0x22>
 8007e9a:	b155      	cbz	r5, 8007eb2 <rmw_uros_set_custom_transport+0x22>
 8007e9c:	b14e      	cbz	r6, 8007eb2 <rmw_uros_set_custom_transport+0x22>
 8007e9e:	4c06      	ldr	r4, [pc, #24]	@ (8007eb8 <rmw_uros_set_custom_transport+0x28>)
 8007ea0:	7020      	strb	r0, [r4, #0]
 8007ea2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007ea6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007eaa:	6166      	str	r6, [r4, #20]
 8007eac:	2000      	movs	r0, #0
 8007eae:	bc70      	pop	{r4, r5, r6}
 8007eb0:	4770      	bx	lr
 8007eb2:	200b      	movs	r0, #11
 8007eb4:	bc70      	pop	{r4, r5, r6}
 8007eb6:	4770      	bx	lr
 8007eb8:	20008fd4 	.word	0x20008fd4

08007ebc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007ebc:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	b10a      	cbz	r2, 8007ec6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007ec2:	4803      	ldr	r0, [pc, #12]	@ (8007ed0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007ec4:	4770      	bx	lr
 8007ec6:	4a03      	ldr	r2, [pc, #12]	@ (8007ed4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007ec8:	4801      	ldr	r0, [pc, #4]	@ (8007ed0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007eca:	6812      	ldr	r2, [r2, #0]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	4770      	bx	lr
 8007ed0:	20000030 	.word	0x20000030
 8007ed4:	200000ac 	.word	0x200000ac

08007ed8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007ed8:	4a02      	ldr	r2, [pc, #8]	@ (8007ee4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8007eda:	4b03      	ldr	r3, [pc, #12]	@ (8007ee8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	200000ac 	.word	0x200000ac
 8007ee8:	20000030 	.word	0x20000030

08007eec <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8007eec:	f005 bf76 	b.w	800dddc <std_msgs__msg__Int32__init>

08007ef0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8007ef0:	f005 bf78 	b.w	800dde4 <std_msgs__msg__Int32__fini>

08007ef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007ef4:	4b04      	ldr	r3, [pc, #16]	@ (8007f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	b10a      	cbz	r2, 8007efe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8007efa:	4803      	ldr	r0, [pc, #12]	@ (8007f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007efc:	4770      	bx	lr
 8007efe:	4a03      	ldr	r2, [pc, #12]	@ (8007f0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8007f00:	4801      	ldr	r0, [pc, #4]	@ (8007f08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	4770      	bx	lr
 8007f08:	20000078 	.word	0x20000078
 8007f0c:	200000b0 	.word	0x200000b0

08007f10 <_Int32__max_serialized_size>:
 8007f10:	b508      	push	{r3, lr}
 8007f12:	2104      	movs	r1, #4
 8007f14:	2000      	movs	r0, #0
 8007f16:	f001 f807 	bl	8008f28 <ucdr_alignment>
 8007f1a:	3004      	adds	r0, #4
 8007f1c:	bd08      	pop	{r3, pc}
 8007f1e:	bf00      	nop

08007f20 <_Int32__cdr_deserialize>:
 8007f20:	b109      	cbz	r1, 8007f26 <_Int32__cdr_deserialize+0x6>
 8007f22:	f000 bf19 	b.w	8008d58 <ucdr_deserialize_int32_t>
 8007f26:	4608      	mov	r0, r1
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop

08007f2c <get_serialized_size_std_msgs__msg__Int32>:
 8007f2c:	b138      	cbz	r0, 8007f3e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8007f2e:	b508      	push	{r3, lr}
 8007f30:	460b      	mov	r3, r1
 8007f32:	4618      	mov	r0, r3
 8007f34:	2104      	movs	r1, #4
 8007f36:	f000 fff7 	bl	8008f28 <ucdr_alignment>
 8007f3a:	3004      	adds	r0, #4
 8007f3c:	bd08      	pop	{r3, pc}
 8007f3e:	4770      	bx	lr

08007f40 <_Int32__cdr_serialize>:
 8007f40:	460a      	mov	r2, r1
 8007f42:	b118      	cbz	r0, 8007f4c <_Int32__cdr_serialize+0xc>
 8007f44:	6801      	ldr	r1, [r0, #0]
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 be6e 	b.w	8008c28 <ucdr_serialize_int32_t>
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop

08007f50 <_Int32__get_serialized_size>:
 8007f50:	b130      	cbz	r0, 8007f60 <_Int32__get_serialized_size+0x10>
 8007f52:	b508      	push	{r3, lr}
 8007f54:	2104      	movs	r1, #4
 8007f56:	2000      	movs	r0, #0
 8007f58:	f000 ffe6 	bl	8008f28 <ucdr_alignment>
 8007f5c:	3004      	adds	r0, #4
 8007f5e:	bd08      	pop	{r3, pc}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop

08007f64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8007f64:	4800      	ldr	r0, [pc, #0]	@ (8007f68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8007f66:	4770      	bx	lr
 8007f68:	20000084 	.word	0x20000084

08007f6c <ucdr_serialize_bool>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	460d      	mov	r5, r1
 8007f70:	2101      	movs	r1, #1
 8007f72:	4604      	mov	r4, r0
 8007f74:	f000 ff8c 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8007f78:	b148      	cbz	r0, 8007f8e <ucdr_serialize_bool+0x22>
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	701d      	strb	r5, [r3, #0]
 8007f7e:	68a2      	ldr	r2, [r4, #8]
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	2101      	movs	r1, #1
 8007f84:	440a      	add	r2, r1
 8007f86:	440b      	add	r3, r1
 8007f88:	60a2      	str	r2, [r4, #8]
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	7561      	strb	r1, [r4, #21]
 8007f8e:	7da0      	ldrb	r0, [r4, #22]
 8007f90:	f080 0001 	eor.w	r0, r0, #1
 8007f94:	bd38      	pop	{r3, r4, r5, pc}
 8007f96:	bf00      	nop

08007f98 <ucdr_deserialize_bool>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	f000 ff76 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8007fa4:	b160      	cbz	r0, 8007fc0 <ucdr_deserialize_bool+0x28>
 8007fa6:	68a2      	ldr	r2, [r4, #8]
 8007fa8:	6923      	ldr	r3, [r4, #16]
 8007faa:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007fae:	3900      	subs	r1, #0
 8007fb0:	bf18      	it	ne
 8007fb2:	2101      	movne	r1, #1
 8007fb4:	7029      	strb	r1, [r5, #0]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	2101      	movs	r1, #1
 8007fba:	60a2      	str	r2, [r4, #8]
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	7561      	strb	r1, [r4, #21]
 8007fc0:	7da0      	ldrb	r0, [r4, #22]
 8007fc2:	f080 0001 	eor.w	r0, r0, #1
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}

08007fc8 <ucdr_serialize_uint8_t>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	460d      	mov	r5, r1
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4604      	mov	r4, r0
 8007fd0:	f000 ff5e 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8007fd4:	b148      	cbz	r0, 8007fea <ucdr_serialize_uint8_t+0x22>
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	701d      	strb	r5, [r3, #0]
 8007fda:	68a2      	ldr	r2, [r4, #8]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	2101      	movs	r1, #1
 8007fe0:	440a      	add	r2, r1
 8007fe2:	440b      	add	r3, r1
 8007fe4:	60a2      	str	r2, [r4, #8]
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	7561      	strb	r1, [r4, #21]
 8007fea:	7da0      	ldrb	r0, [r4, #22]
 8007fec:	f080 0001 	eor.w	r0, r0, #1
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	bf00      	nop

08007ff4 <ucdr_deserialize_uint8_t>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f000 ff48 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008000:	b150      	cbz	r0, 8008018 <ucdr_deserialize_uint8_t+0x24>
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	702b      	strb	r3, [r5, #0]
 8008008:	68a2      	ldr	r2, [r4, #8]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	2101      	movs	r1, #1
 800800e:	440a      	add	r2, r1
 8008010:	440b      	add	r3, r1
 8008012:	60a2      	str	r2, [r4, #8]
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	7561      	strb	r1, [r4, #21]
 8008018:	7da0      	ldrb	r0, [r4, #22]
 800801a:	f080 0001 	eor.w	r0, r0, #1
 800801e:	bd38      	pop	{r3, r4, r5, pc}

08008020 <ucdr_serialize_uint16_t>:
 8008020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	460b      	mov	r3, r1
 8008028:	2102      	movs	r1, #2
 800802a:	4604      	mov	r4, r0
 800802c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008030:	f000 ff82 	bl	8008f38 <ucdr_buffer_alignment>
 8008034:	4601      	mov	r1, r0
 8008036:	4620      	mov	r0, r4
 8008038:	7d67      	ldrb	r7, [r4, #21]
 800803a:	f000 ffc1 	bl	8008fc0 <ucdr_advance_buffer>
 800803e:	2102      	movs	r1, #2
 8008040:	4620      	mov	r0, r4
 8008042:	f000 ff19 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008046:	bb78      	cbnz	r0, 80080a8 <ucdr_serialize_uint16_t+0x88>
 8008048:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800804c:	42ab      	cmp	r3, r5
 800804e:	d926      	bls.n	800809e <ucdr_serialize_uint16_t+0x7e>
 8008050:	1b5e      	subs	r6, r3, r5
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	f1c6 0802 	rsb	r8, r6, #2
 800805a:	4433      	add	r3, r6
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	4641      	mov	r1, r8
 8008060:	4620      	mov	r0, r4
 8008062:	f000 ff15 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008066:	2800      	cmp	r0, #0
 8008068:	d03b      	beq.n	80080e2 <ucdr_serialize_uint16_t+0xc2>
 800806a:	7d23      	ldrb	r3, [r4, #20]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d04a      	beq.n	8008106 <ucdr_serialize_uint16_t+0xe6>
 8008070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008074:	702b      	strb	r3, [r5, #0]
 8008076:	2e00      	cmp	r6, #0
 8008078:	d040      	beq.n	80080fc <ucdr_serialize_uint16_t+0xdc>
 800807a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800807e:	706b      	strb	r3, [r5, #1]
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	68a2      	ldr	r2, [r4, #8]
 8008084:	7da0      	ldrb	r0, [r4, #22]
 8008086:	3302      	adds	r3, #2
 8008088:	1b9e      	subs	r6, r3, r6
 800808a:	4442      	add	r2, r8
 800808c:	2302      	movs	r3, #2
 800808e:	f080 0001 	eor.w	r0, r0, #1
 8008092:	60a2      	str	r2, [r4, #8]
 8008094:	6126      	str	r6, [r4, #16]
 8008096:	7563      	strb	r3, [r4, #21]
 8008098:	b002      	add	sp, #8
 800809a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809e:	2102      	movs	r1, #2
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fef5 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80080a6:	b190      	cbz	r0, 80080ce <ucdr_serialize_uint16_t+0xae>
 80080a8:	7d23      	ldrb	r3, [r4, #20]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	68a3      	ldr	r3, [r4, #8]
 80080ae:	d014      	beq.n	80080da <ucdr_serialize_uint16_t+0xba>
 80080b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80080bc:	705a      	strb	r2, [r3, #1]
 80080be:	68a2      	ldr	r2, [r4, #8]
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	3202      	adds	r2, #2
 80080c4:	3302      	adds	r3, #2
 80080c6:	2102      	movs	r1, #2
 80080c8:	60a2      	str	r2, [r4, #8]
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	7561      	strb	r1, [r4, #21]
 80080ce:	7da0      	ldrb	r0, [r4, #22]
 80080d0:	f080 0001 	eor.w	r0, r0, #1
 80080d4:	b002      	add	sp, #8
 80080d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e7ed      	b.n	80080be <ucdr_serialize_uint16_t+0x9e>
 80080e2:	68a2      	ldr	r2, [r4, #8]
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	7da0      	ldrb	r0, [r4, #22]
 80080e8:	7567      	strb	r7, [r4, #21]
 80080ea:	1b92      	subs	r2, r2, r6
 80080ec:	1b9b      	subs	r3, r3, r6
 80080ee:	f080 0001 	eor.w	r0, r0, #1
 80080f2:	60a2      	str	r2, [r4, #8]
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	b002      	add	sp, #8
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e7bc      	b.n	8008080 <ucdr_serialize_uint16_t+0x60>
 8008106:	4628      	mov	r0, r5
 8008108:	f10d 0506 	add.w	r5, sp, #6
 800810c:	4629      	mov	r1, r5
 800810e:	4632      	mov	r2, r6
 8008110:	f00b f9e5 	bl	80134de <memcpy>
 8008114:	68a0      	ldr	r0, [r4, #8]
 8008116:	4642      	mov	r2, r8
 8008118:	19a9      	adds	r1, r5, r6
 800811a:	f00b f9e0 	bl	80134de <memcpy>
 800811e:	e7af      	b.n	8008080 <ucdr_serialize_uint16_t+0x60>

08008120 <ucdr_serialize_endian_uint16_t>:
 8008120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008124:	b083      	sub	sp, #12
 8008126:	460d      	mov	r5, r1
 8008128:	2102      	movs	r1, #2
 800812a:	4604      	mov	r4, r0
 800812c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008130:	f000 ff02 	bl	8008f38 <ucdr_buffer_alignment>
 8008134:	4601      	mov	r1, r0
 8008136:	4620      	mov	r0, r4
 8008138:	f894 8015 	ldrb.w	r8, [r4, #21]
 800813c:	f000 ff40 	bl	8008fc0 <ucdr_advance_buffer>
 8008140:	2102      	movs	r1, #2
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fe98 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008148:	bb70      	cbnz	r0, 80081a8 <ucdr_serialize_endian_uint16_t+0x88>
 800814a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800814e:	42be      	cmp	r6, r7
 8008150:	d925      	bls.n	800819e <ucdr_serialize_endian_uint16_t+0x7e>
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	60a6      	str	r6, [r4, #8]
 8008156:	1bf6      	subs	r6, r6, r7
 8008158:	4433      	add	r3, r6
 800815a:	f1c6 0902 	rsb	r9, r6, #2
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	4649      	mov	r1, r9
 8008162:	4620      	mov	r0, r4
 8008164:	f000 fe94 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008168:	2800      	cmp	r0, #0
 800816a:	d039      	beq.n	80081e0 <ucdr_serialize_endian_uint16_t+0xc0>
 800816c:	2d01      	cmp	r5, #1
 800816e:	d04a      	beq.n	8008206 <ucdr_serialize_endian_uint16_t+0xe6>
 8008170:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008174:	703b      	strb	r3, [r7, #0]
 8008176:	2e00      	cmp	r6, #0
 8008178:	d040      	beq.n	80081fc <ucdr_serialize_endian_uint16_t+0xdc>
 800817a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800817e:	707b      	strb	r3, [r7, #1]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	68a2      	ldr	r2, [r4, #8]
 8008184:	7da0      	ldrb	r0, [r4, #22]
 8008186:	3302      	adds	r3, #2
 8008188:	444a      	add	r2, r9
 800818a:	1b9b      	subs	r3, r3, r6
 800818c:	2102      	movs	r1, #2
 800818e:	f080 0001 	eor.w	r0, r0, #1
 8008192:	60a2      	str	r2, [r4, #8]
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	7561      	strb	r1, [r4, #21]
 8008198:	b003      	add	sp, #12
 800819a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819e:	2102      	movs	r1, #2
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fe75 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80081a6:	b188      	cbz	r0, 80081cc <ucdr_serialize_endian_uint16_t+0xac>
 80081a8:	2d01      	cmp	r5, #1
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	d014      	beq.n	80081d8 <ucdr_serialize_endian_uint16_t+0xb8>
 80081ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80081ba:	705a      	strb	r2, [r3, #1]
 80081bc:	68a2      	ldr	r2, [r4, #8]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	3202      	adds	r2, #2
 80081c2:	3302      	adds	r3, #2
 80081c4:	2102      	movs	r1, #2
 80081c6:	60a2      	str	r2, [r4, #8]
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	7561      	strb	r1, [r4, #21]
 80081cc:	7da0      	ldrb	r0, [r4, #22]
 80081ce:	f080 0001 	eor.w	r0, r0, #1
 80081d2:	b003      	add	sp, #12
 80081d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e7ed      	b.n	80081bc <ucdr_serialize_endian_uint16_t+0x9c>
 80081e0:	68a2      	ldr	r2, [r4, #8]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	7da0      	ldrb	r0, [r4, #22]
 80081e6:	f884 8015 	strb.w	r8, [r4, #21]
 80081ea:	1b92      	subs	r2, r2, r6
 80081ec:	1b9b      	subs	r3, r3, r6
 80081ee:	f080 0001 	eor.w	r0, r0, #1
 80081f2:	60a2      	str	r2, [r4, #8]
 80081f4:	6123      	str	r3, [r4, #16]
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081fc:	68a3      	ldr	r3, [r4, #8]
 80081fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e7bc      	b.n	8008180 <ucdr_serialize_endian_uint16_t+0x60>
 8008206:	f10d 0506 	add.w	r5, sp, #6
 800820a:	4629      	mov	r1, r5
 800820c:	4632      	mov	r2, r6
 800820e:	4638      	mov	r0, r7
 8008210:	f00b f965 	bl	80134de <memcpy>
 8008214:	68a0      	ldr	r0, [r4, #8]
 8008216:	464a      	mov	r2, r9
 8008218:	19a9      	adds	r1, r5, r6
 800821a:	f00b f960 	bl	80134de <memcpy>
 800821e:	e7af      	b.n	8008180 <ucdr_serialize_endian_uint16_t+0x60>

08008220 <ucdr_deserialize_uint16_t>:
 8008220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008224:	460d      	mov	r5, r1
 8008226:	2102      	movs	r1, #2
 8008228:	4604      	mov	r4, r0
 800822a:	f000 fe85 	bl	8008f38 <ucdr_buffer_alignment>
 800822e:	4601      	mov	r1, r0
 8008230:	4620      	mov	r0, r4
 8008232:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008236:	f000 fec3 	bl	8008fc0 <ucdr_advance_buffer>
 800823a:	2102      	movs	r1, #2
 800823c:	4620      	mov	r0, r4
 800823e:	f000 fe1b 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008242:	bb60      	cbnz	r0, 800829e <ucdr_deserialize_uint16_t+0x7e>
 8008244:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008248:	42be      	cmp	r6, r7
 800824a:	d923      	bls.n	8008294 <ucdr_deserialize_uint16_t+0x74>
 800824c:	6923      	ldr	r3, [r4, #16]
 800824e:	60a6      	str	r6, [r4, #8]
 8008250:	1bf6      	subs	r6, r6, r7
 8008252:	4433      	add	r3, r6
 8008254:	f1c6 0902 	rsb	r9, r6, #2
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	4649      	mov	r1, r9
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fe17 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008262:	2800      	cmp	r0, #0
 8008264:	d034      	beq.n	80082d0 <ucdr_deserialize_uint16_t+0xb0>
 8008266:	7d23      	ldrb	r3, [r4, #20]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d042      	beq.n	80082f2 <ucdr_deserialize_uint16_t+0xd2>
 800826c:	787b      	ldrb	r3, [r7, #1]
 800826e:	702b      	strb	r3, [r5, #0]
 8008270:	2e00      	cmp	r6, #0
 8008272:	d03a      	beq.n	80082ea <ucdr_deserialize_uint16_t+0xca>
 8008274:	783b      	ldrb	r3, [r7, #0]
 8008276:	706b      	strb	r3, [r5, #1]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	68a2      	ldr	r2, [r4, #8]
 800827c:	7da0      	ldrb	r0, [r4, #22]
 800827e:	2102      	movs	r1, #2
 8008280:	3302      	adds	r3, #2
 8008282:	444a      	add	r2, r9
 8008284:	1b9b      	subs	r3, r3, r6
 8008286:	7561      	strb	r1, [r4, #21]
 8008288:	60a2      	str	r2, [r4, #8]
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	f080 0001 	eor.w	r0, r0, #1
 8008290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008294:	2102      	movs	r1, #2
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fdfa 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 800829c:	b180      	cbz	r0, 80082c0 <ucdr_deserialize_uint16_t+0xa0>
 800829e:	7d23      	ldrb	r3, [r4, #20]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	68a3      	ldr	r3, [r4, #8]
 80082a4:	d011      	beq.n	80082ca <ucdr_deserialize_uint16_t+0xaa>
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	702b      	strb	r3, [r5, #0]
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	706b      	strb	r3, [r5, #1]
 80082b0:	68a2      	ldr	r2, [r4, #8]
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	3202      	adds	r2, #2
 80082b6:	3302      	adds	r3, #2
 80082b8:	2102      	movs	r1, #2
 80082ba:	60a2      	str	r2, [r4, #8]
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	7561      	strb	r1, [r4, #21]
 80082c0:	7da0      	ldrb	r0, [r4, #22]
 80082c2:	f080 0001 	eor.w	r0, r0, #1
 80082c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	802b      	strh	r3, [r5, #0]
 80082ce:	e7ef      	b.n	80082b0 <ucdr_deserialize_uint16_t+0x90>
 80082d0:	68a2      	ldr	r2, [r4, #8]
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	7da0      	ldrb	r0, [r4, #22]
 80082d6:	f884 8015 	strb.w	r8, [r4, #21]
 80082da:	1b92      	subs	r2, r2, r6
 80082dc:	1b9b      	subs	r3, r3, r6
 80082de:	60a2      	str	r2, [r4, #8]
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	f080 0001 	eor.w	r0, r0, #1
 80082e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	706b      	strb	r3, [r5, #1]
 80082f0:	e7c2      	b.n	8008278 <ucdr_deserialize_uint16_t+0x58>
 80082f2:	4639      	mov	r1, r7
 80082f4:	4632      	mov	r2, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	f00b f8f1 	bl	80134de <memcpy>
 80082fc:	68a1      	ldr	r1, [r4, #8]
 80082fe:	464a      	mov	r2, r9
 8008300:	19a8      	adds	r0, r5, r6
 8008302:	f00b f8ec 	bl	80134de <memcpy>
 8008306:	e7b7      	b.n	8008278 <ucdr_deserialize_uint16_t+0x58>

08008308 <ucdr_deserialize_endian_uint16_t>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	460e      	mov	r6, r1
 800830e:	2102      	movs	r1, #2
 8008310:	4604      	mov	r4, r0
 8008312:	4615      	mov	r5, r2
 8008314:	f000 fe10 	bl	8008f38 <ucdr_buffer_alignment>
 8008318:	4601      	mov	r1, r0
 800831a:	4620      	mov	r0, r4
 800831c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008320:	f000 fe4e 	bl	8008fc0 <ucdr_advance_buffer>
 8008324:	2102      	movs	r1, #2
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fda6 	bl	8008e78 <ucdr_check_buffer_available_for>
 800832c:	bb70      	cbnz	r0, 800838c <ucdr_deserialize_endian_uint16_t+0x84>
 800832e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008332:	4547      	cmp	r7, r8
 8008334:	d925      	bls.n	8008382 <ucdr_deserialize_endian_uint16_t+0x7a>
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	60a7      	str	r7, [r4, #8]
 800833a:	eba7 0708 	sub.w	r7, r7, r8
 800833e:	443b      	add	r3, r7
 8008340:	f1c7 0a02 	rsb	sl, r7, #2
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	4651      	mov	r1, sl
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fda1 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 800834e:	2800      	cmp	r0, #0
 8008350:	d034      	beq.n	80083bc <ucdr_deserialize_endian_uint16_t+0xb4>
 8008352:	2e01      	cmp	r6, #1
 8008354:	d043      	beq.n	80083de <ucdr_deserialize_endian_uint16_t+0xd6>
 8008356:	f898 3001 	ldrb.w	r3, [r8, #1]
 800835a:	702b      	strb	r3, [r5, #0]
 800835c:	2f00      	cmp	r7, #0
 800835e:	d03a      	beq.n	80083d6 <ucdr_deserialize_endian_uint16_t+0xce>
 8008360:	f898 3000 	ldrb.w	r3, [r8]
 8008364:	706b      	strb	r3, [r5, #1]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	68a2      	ldr	r2, [r4, #8]
 800836a:	7da0      	ldrb	r0, [r4, #22]
 800836c:	2102      	movs	r1, #2
 800836e:	3302      	adds	r3, #2
 8008370:	4452      	add	r2, sl
 8008372:	1bdb      	subs	r3, r3, r7
 8008374:	7561      	strb	r1, [r4, #21]
 8008376:	60a2      	str	r2, [r4, #8]
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	f080 0001 	eor.w	r0, r0, #1
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	2102      	movs	r1, #2
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fd83 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 800838a:	b178      	cbz	r0, 80083ac <ucdr_deserialize_endian_uint16_t+0xa4>
 800838c:	2e01      	cmp	r6, #1
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	d011      	beq.n	80083b6 <ucdr_deserialize_endian_uint16_t+0xae>
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	702b      	strb	r3, [r5, #0]
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	706b      	strb	r3, [r5, #1]
 800839c:	68a2      	ldr	r2, [r4, #8]
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	3202      	adds	r2, #2
 80083a2:	3302      	adds	r3, #2
 80083a4:	2102      	movs	r1, #2
 80083a6:	60a2      	str	r2, [r4, #8]
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	7561      	strb	r1, [r4, #21]
 80083ac:	7da0      	ldrb	r0, [r4, #22]
 80083ae:	f080 0001 	eor.w	r0, r0, #1
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	802b      	strh	r3, [r5, #0]
 80083ba:	e7ef      	b.n	800839c <ucdr_deserialize_endian_uint16_t+0x94>
 80083bc:	68a2      	ldr	r2, [r4, #8]
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	7da0      	ldrb	r0, [r4, #22]
 80083c2:	f884 9015 	strb.w	r9, [r4, #21]
 80083c6:	1bd2      	subs	r2, r2, r7
 80083c8:	1bdb      	subs	r3, r3, r7
 80083ca:	60a2      	str	r2, [r4, #8]
 80083cc:	6123      	str	r3, [r4, #16]
 80083ce:	f080 0001 	eor.w	r0, r0, #1
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	706b      	strb	r3, [r5, #1]
 80083dc:	e7c3      	b.n	8008366 <ucdr_deserialize_endian_uint16_t+0x5e>
 80083de:	4641      	mov	r1, r8
 80083e0:	463a      	mov	r2, r7
 80083e2:	4628      	mov	r0, r5
 80083e4:	f00b f87b 	bl	80134de <memcpy>
 80083e8:	68a1      	ldr	r1, [r4, #8]
 80083ea:	4652      	mov	r2, sl
 80083ec:	19e8      	adds	r0, r5, r7
 80083ee:	f00b f876 	bl	80134de <memcpy>
 80083f2:	e7b8      	b.n	8008366 <ucdr_deserialize_endian_uint16_t+0x5e>

080083f4 <ucdr_serialize_uint32_t>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	4604      	mov	r4, r0
 80083fc:	9101      	str	r1, [sp, #4]
 80083fe:	2104      	movs	r1, #4
 8008400:	f000 fd9a 	bl	8008f38 <ucdr_buffer_alignment>
 8008404:	4601      	mov	r1, r0
 8008406:	4620      	mov	r0, r4
 8008408:	7d67      	ldrb	r7, [r4, #21]
 800840a:	f000 fdd9 	bl	8008fc0 <ucdr_advance_buffer>
 800840e:	2104      	movs	r1, #4
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fd31 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008416:	2800      	cmp	r0, #0
 8008418:	d139      	bne.n	800848e <ucdr_serialize_uint32_t+0x9a>
 800841a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800841e:	42ab      	cmp	r3, r5
 8008420:	d930      	bls.n	8008484 <ucdr_serialize_uint32_t+0x90>
 8008422:	1b5e      	subs	r6, r3, r5
 8008424:	60a3      	str	r3, [r4, #8]
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	f1c6 0804 	rsb	r8, r6, #4
 800842c:	4433      	add	r3, r6
 800842e:	6123      	str	r3, [r4, #16]
 8008430:	4641      	mov	r1, r8
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fd2c 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008438:	2800      	cmp	r0, #0
 800843a:	d04c      	beq.n	80084d6 <ucdr_serialize_uint32_t+0xe2>
 800843c:	7d23      	ldrb	r3, [r4, #20]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d063      	beq.n	800850a <ucdr_serialize_uint32_t+0x116>
 8008442:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008446:	702b      	strb	r3, [r5, #0]
 8008448:	2e00      	cmp	r6, #0
 800844a:	d051      	beq.n	80084f0 <ucdr_serialize_uint32_t+0xfc>
 800844c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008450:	706b      	strb	r3, [r5, #1]
 8008452:	2e01      	cmp	r6, #1
 8008454:	d050      	beq.n	80084f8 <ucdr_serialize_uint32_t+0x104>
 8008456:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800845a:	70ab      	strb	r3, [r5, #2]
 800845c:	2e02      	cmp	r6, #2
 800845e:	d04f      	beq.n	8008500 <ucdr_serialize_uint32_t+0x10c>
 8008460:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008464:	70eb      	strb	r3, [r5, #3]
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	68a2      	ldr	r2, [r4, #8]
 800846a:	7da0      	ldrb	r0, [r4, #22]
 800846c:	3304      	adds	r3, #4
 800846e:	1b9e      	subs	r6, r3, r6
 8008470:	4442      	add	r2, r8
 8008472:	2304      	movs	r3, #4
 8008474:	f080 0001 	eor.w	r0, r0, #1
 8008478:	60a2      	str	r2, [r4, #8]
 800847a:	6126      	str	r6, [r4, #16]
 800847c:	7563      	strb	r3, [r4, #21]
 800847e:	b002      	add	sp, #8
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008484:	2104      	movs	r1, #4
 8008486:	4620      	mov	r0, r4
 8008488:	f000 fd02 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 800848c:	b1d0      	cbz	r0, 80084c4 <ucdr_serialize_uint32_t+0xd0>
 800848e:	7d23      	ldrb	r3, [r4, #20]
 8008490:	2b01      	cmp	r3, #1
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	d01c      	beq.n	80084d0 <ucdr_serialize_uint32_t+0xdc>
 8008496:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084a2:	705a      	strb	r2, [r3, #1]
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80084aa:	709a      	strb	r2, [r3, #2]
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80084b2:	70da      	strb	r2, [r3, #3]
 80084b4:	68a2      	ldr	r2, [r4, #8]
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	3204      	adds	r2, #4
 80084ba:	3304      	adds	r3, #4
 80084bc:	2104      	movs	r1, #4
 80084be:	60a2      	str	r2, [r4, #8]
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	7561      	strb	r1, [r4, #21]
 80084c4:	7da0      	ldrb	r0, [r4, #22]
 80084c6:	f080 0001 	eor.w	r0, r0, #1
 80084ca:	b002      	add	sp, #8
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d0:	9a01      	ldr	r2, [sp, #4]
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e7ee      	b.n	80084b4 <ucdr_serialize_uint32_t+0xc0>
 80084d6:	68a2      	ldr	r2, [r4, #8]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	7da0      	ldrb	r0, [r4, #22]
 80084dc:	7567      	strb	r7, [r4, #21]
 80084de:	1b92      	subs	r2, r2, r6
 80084e0:	1b9b      	subs	r3, r3, r6
 80084e2:	f080 0001 	eor.w	r0, r0, #1
 80084e6:	60a2      	str	r2, [r4, #8]
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	b002      	add	sp, #8
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80084fe:	701a      	strb	r2, [r3, #0]
 8008500:	68a3      	ldr	r3, [r4, #8]
 8008502:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e7ad      	b.n	8008466 <ucdr_serialize_uint32_t+0x72>
 800850a:	4628      	mov	r0, r5
 800850c:	ad01      	add	r5, sp, #4
 800850e:	4629      	mov	r1, r5
 8008510:	4632      	mov	r2, r6
 8008512:	f00a ffe4 	bl	80134de <memcpy>
 8008516:	68a0      	ldr	r0, [r4, #8]
 8008518:	4642      	mov	r2, r8
 800851a:	19a9      	adds	r1, r5, r6
 800851c:	f00a ffdf 	bl	80134de <memcpy>
 8008520:	e7a1      	b.n	8008466 <ucdr_serialize_uint32_t+0x72>
 8008522:	bf00      	nop

08008524 <ucdr_serialize_endian_uint32_t>:
 8008524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008528:	b083      	sub	sp, #12
 800852a:	460d      	mov	r5, r1
 800852c:	2104      	movs	r1, #4
 800852e:	4604      	mov	r4, r0
 8008530:	9201      	str	r2, [sp, #4]
 8008532:	f000 fd01 	bl	8008f38 <ucdr_buffer_alignment>
 8008536:	4601      	mov	r1, r0
 8008538:	4620      	mov	r0, r4
 800853a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800853e:	f000 fd3f 	bl	8008fc0 <ucdr_advance_buffer>
 8008542:	2104      	movs	r1, #4
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fc97 	bl	8008e78 <ucdr_check_buffer_available_for>
 800854a:	2800      	cmp	r0, #0
 800854c:	d138      	bne.n	80085c0 <ucdr_serialize_endian_uint32_t+0x9c>
 800854e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008552:	42b7      	cmp	r7, r6
 8008554:	d92f      	bls.n	80085b6 <ucdr_serialize_endian_uint32_t+0x92>
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	60a7      	str	r7, [r4, #8]
 800855a:	1bbf      	subs	r7, r7, r6
 800855c:	443b      	add	r3, r7
 800855e:	f1c7 0904 	rsb	r9, r7, #4
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	4649      	mov	r1, r9
 8008566:	4620      	mov	r0, r4
 8008568:	f000 fc92 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 800856c:	2800      	cmp	r0, #0
 800856e:	d04a      	beq.n	8008606 <ucdr_serialize_endian_uint32_t+0xe2>
 8008570:	2d01      	cmp	r5, #1
 8008572:	d063      	beq.n	800863c <ucdr_serialize_endian_uint32_t+0x118>
 8008574:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008578:	7033      	strb	r3, [r6, #0]
 800857a:	2f00      	cmp	r7, #0
 800857c:	d051      	beq.n	8008622 <ucdr_serialize_endian_uint32_t+0xfe>
 800857e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008582:	7073      	strb	r3, [r6, #1]
 8008584:	2f01      	cmp	r7, #1
 8008586:	d050      	beq.n	800862a <ucdr_serialize_endian_uint32_t+0x106>
 8008588:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800858c:	70b3      	strb	r3, [r6, #2]
 800858e:	2f02      	cmp	r7, #2
 8008590:	d04f      	beq.n	8008632 <ucdr_serialize_endian_uint32_t+0x10e>
 8008592:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008596:	70f3      	strb	r3, [r6, #3]
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	68a2      	ldr	r2, [r4, #8]
 800859c:	7da0      	ldrb	r0, [r4, #22]
 800859e:	3304      	adds	r3, #4
 80085a0:	444a      	add	r2, r9
 80085a2:	1bdb      	subs	r3, r3, r7
 80085a4:	2104      	movs	r1, #4
 80085a6:	f080 0001 	eor.w	r0, r0, #1
 80085aa:	60a2      	str	r2, [r4, #8]
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	7561      	strb	r1, [r4, #21]
 80085b0:	b003      	add	sp, #12
 80085b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085b6:	2104      	movs	r1, #4
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fc69 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80085be:	b1c8      	cbz	r0, 80085f4 <ucdr_serialize_endian_uint32_t+0xd0>
 80085c0:	2d01      	cmp	r5, #1
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	d01c      	beq.n	8008600 <ucdr_serialize_endian_uint32_t+0xdc>
 80085c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	68a3      	ldr	r3, [r4, #8]
 80085ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80085d2:	705a      	strb	r2, [r3, #1]
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085da:	709a      	strb	r2, [r3, #2]
 80085dc:	68a3      	ldr	r3, [r4, #8]
 80085de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085e2:	70da      	strb	r2, [r3, #3]
 80085e4:	68a2      	ldr	r2, [r4, #8]
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	3204      	adds	r2, #4
 80085ea:	3304      	adds	r3, #4
 80085ec:	2104      	movs	r1, #4
 80085ee:	60a2      	str	r2, [r4, #8]
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	7561      	strb	r1, [r4, #21]
 80085f4:	7da0      	ldrb	r0, [r4, #22]
 80085f6:	f080 0001 	eor.w	r0, r0, #1
 80085fa:	b003      	add	sp, #12
 80085fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008600:	9a01      	ldr	r2, [sp, #4]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e7ee      	b.n	80085e4 <ucdr_serialize_endian_uint32_t+0xc0>
 8008606:	68a2      	ldr	r2, [r4, #8]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	7da0      	ldrb	r0, [r4, #22]
 800860c:	f884 8015 	strb.w	r8, [r4, #21]
 8008610:	1bd2      	subs	r2, r2, r7
 8008612:	1bdb      	subs	r3, r3, r7
 8008614:	f080 0001 	eor.w	r0, r0, #1
 8008618:	60a2      	str	r2, [r4, #8]
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	b003      	add	sp, #12
 800861e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e7ad      	b.n	8008598 <ucdr_serialize_endian_uint32_t+0x74>
 800863c:	ad01      	add	r5, sp, #4
 800863e:	4629      	mov	r1, r5
 8008640:	463a      	mov	r2, r7
 8008642:	4630      	mov	r0, r6
 8008644:	f00a ff4b 	bl	80134de <memcpy>
 8008648:	68a0      	ldr	r0, [r4, #8]
 800864a:	464a      	mov	r2, r9
 800864c:	19e9      	adds	r1, r5, r7
 800864e:	f00a ff46 	bl	80134de <memcpy>
 8008652:	e7a1      	b.n	8008598 <ucdr_serialize_endian_uint32_t+0x74>

08008654 <ucdr_deserialize_uint32_t>:
 8008654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008658:	460d      	mov	r5, r1
 800865a:	2104      	movs	r1, #4
 800865c:	4604      	mov	r4, r0
 800865e:	f000 fc6b 	bl	8008f38 <ucdr_buffer_alignment>
 8008662:	4601      	mov	r1, r0
 8008664:	4620      	mov	r0, r4
 8008666:	f894 8015 	ldrb.w	r8, [r4, #21]
 800866a:	f000 fca9 	bl	8008fc0 <ucdr_advance_buffer>
 800866e:	2104      	movs	r1, #4
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fc01 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008676:	2800      	cmp	r0, #0
 8008678:	d138      	bne.n	80086ec <ucdr_deserialize_uint32_t+0x98>
 800867a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800867e:	42b7      	cmp	r7, r6
 8008680:	d92f      	bls.n	80086e2 <ucdr_deserialize_uint32_t+0x8e>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	60a7      	str	r7, [r4, #8]
 8008686:	1bbf      	subs	r7, r7, r6
 8008688:	443b      	add	r3, r7
 800868a:	f1c7 0904 	rsb	r9, r7, #4
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	4649      	mov	r1, r9
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fbfc 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008698:	2800      	cmp	r0, #0
 800869a:	d046      	beq.n	800872a <ucdr_deserialize_uint32_t+0xd6>
 800869c:	7d23      	ldrb	r3, [r4, #20]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d05c      	beq.n	800875c <ucdr_deserialize_uint32_t+0x108>
 80086a2:	78f3      	ldrb	r3, [r6, #3]
 80086a4:	702b      	strb	r3, [r5, #0]
 80086a6:	2f00      	cmp	r7, #0
 80086a8:	d04c      	beq.n	8008744 <ucdr_deserialize_uint32_t+0xf0>
 80086aa:	78b3      	ldrb	r3, [r6, #2]
 80086ac:	706b      	strb	r3, [r5, #1]
 80086ae:	2f01      	cmp	r7, #1
 80086b0:	f105 0302 	add.w	r3, r5, #2
 80086b4:	d04a      	beq.n	800874c <ucdr_deserialize_uint32_t+0xf8>
 80086b6:	7873      	ldrb	r3, [r6, #1]
 80086b8:	70ab      	strb	r3, [r5, #2]
 80086ba:	2f02      	cmp	r7, #2
 80086bc:	f105 0303 	add.w	r3, r5, #3
 80086c0:	d048      	beq.n	8008754 <ucdr_deserialize_uint32_t+0x100>
 80086c2:	7833      	ldrb	r3, [r6, #0]
 80086c4:	70eb      	strb	r3, [r5, #3]
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	68a2      	ldr	r2, [r4, #8]
 80086ca:	7da0      	ldrb	r0, [r4, #22]
 80086cc:	2104      	movs	r1, #4
 80086ce:	3304      	adds	r3, #4
 80086d0:	444a      	add	r2, r9
 80086d2:	1bdb      	subs	r3, r3, r7
 80086d4:	7561      	strb	r1, [r4, #21]
 80086d6:	60a2      	str	r2, [r4, #8]
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	f080 0001 	eor.w	r0, r0, #1
 80086de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e2:	2104      	movs	r1, #4
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fbd3 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80086ea:	b1b0      	cbz	r0, 800871a <ucdr_deserialize_uint32_t+0xc6>
 80086ec:	7d23      	ldrb	r3, [r4, #20]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	d017      	beq.n	8008724 <ucdr_deserialize_uint32_t+0xd0>
 80086f4:	78db      	ldrb	r3, [r3, #3]
 80086f6:	702b      	strb	r3, [r5, #0]
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	789b      	ldrb	r3, [r3, #2]
 80086fc:	706b      	strb	r3, [r5, #1]
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	70ab      	strb	r3, [r5, #2]
 8008704:	68a3      	ldr	r3, [r4, #8]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	70eb      	strb	r3, [r5, #3]
 800870a:	68a2      	ldr	r2, [r4, #8]
 800870c:	6923      	ldr	r3, [r4, #16]
 800870e:	3204      	adds	r2, #4
 8008710:	3304      	adds	r3, #4
 8008712:	2104      	movs	r1, #4
 8008714:	60a2      	str	r2, [r4, #8]
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	7561      	strb	r1, [r4, #21]
 800871a:	7da0      	ldrb	r0, [r4, #22]
 800871c:	f080 0001 	eor.w	r0, r0, #1
 8008720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	e7ef      	b.n	800870a <ucdr_deserialize_uint32_t+0xb6>
 800872a:	68a2      	ldr	r2, [r4, #8]
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	7da0      	ldrb	r0, [r4, #22]
 8008730:	f884 8015 	strb.w	r8, [r4, #21]
 8008734:	1bd2      	subs	r2, r2, r7
 8008736:	1bdb      	subs	r3, r3, r7
 8008738:	60a2      	str	r2, [r4, #8]
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	f080 0001 	eor.w	r0, r0, #1
 8008740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008744:	68a3      	ldr	r3, [r4, #8]
 8008746:	789b      	ldrb	r3, [r3, #2]
 8008748:	706b      	strb	r3, [r5, #1]
 800874a:	1cab      	adds	r3, r5, #2
 800874c:	68a2      	ldr	r2, [r4, #8]
 800874e:	7852      	ldrb	r2, [r2, #1]
 8008750:	f803 2b01 	strb.w	r2, [r3], #1
 8008754:	68a2      	ldr	r2, [r4, #8]
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e7b4      	b.n	80086c6 <ucdr_deserialize_uint32_t+0x72>
 800875c:	4631      	mov	r1, r6
 800875e:	463a      	mov	r2, r7
 8008760:	4628      	mov	r0, r5
 8008762:	f00a febc 	bl	80134de <memcpy>
 8008766:	68a1      	ldr	r1, [r4, #8]
 8008768:	464a      	mov	r2, r9
 800876a:	19e8      	adds	r0, r5, r7
 800876c:	f00a feb7 	bl	80134de <memcpy>
 8008770:	e7a9      	b.n	80086c6 <ucdr_deserialize_uint32_t+0x72>
 8008772:	bf00      	nop

08008774 <ucdr_deserialize_endian_uint32_t>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460e      	mov	r6, r1
 800877a:	2104      	movs	r1, #4
 800877c:	4604      	mov	r4, r0
 800877e:	4615      	mov	r5, r2
 8008780:	f000 fbda 	bl	8008f38 <ucdr_buffer_alignment>
 8008784:	4601      	mov	r1, r0
 8008786:	4620      	mov	r0, r4
 8008788:	f894 9015 	ldrb.w	r9, [r4, #21]
 800878c:	f000 fc18 	bl	8008fc0 <ucdr_advance_buffer>
 8008790:	2104      	movs	r1, #4
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fb70 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008798:	2800      	cmp	r0, #0
 800879a:	d13c      	bne.n	8008816 <ucdr_deserialize_endian_uint32_t+0xa2>
 800879c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80087a0:	42bb      	cmp	r3, r7
 80087a2:	d933      	bls.n	800880c <ucdr_deserialize_endian_uint32_t+0x98>
 80087a4:	eba3 0807 	sub.w	r8, r3, r7
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	f1c8 0a04 	rsb	sl, r8, #4
 80087b0:	4443      	add	r3, r8
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	4651      	mov	r1, sl
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fb6a 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d048      	beq.n	8008852 <ucdr_deserialize_endian_uint32_t+0xde>
 80087c0:	2e01      	cmp	r6, #1
 80087c2:	d061      	beq.n	8008888 <ucdr_deserialize_endian_uint32_t+0x114>
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	702b      	strb	r3, [r5, #0]
 80087c8:	f1b8 0f00 	cmp.w	r8, #0
 80087cc:	d050      	beq.n	8008870 <ucdr_deserialize_endian_uint32_t+0xfc>
 80087ce:	78bb      	ldrb	r3, [r7, #2]
 80087d0:	706b      	strb	r3, [r5, #1]
 80087d2:	f1b8 0f01 	cmp.w	r8, #1
 80087d6:	f105 0302 	add.w	r3, r5, #2
 80087da:	d04d      	beq.n	8008878 <ucdr_deserialize_endian_uint32_t+0x104>
 80087dc:	787b      	ldrb	r3, [r7, #1]
 80087de:	70ab      	strb	r3, [r5, #2]
 80087e0:	f1b8 0f02 	cmp.w	r8, #2
 80087e4:	f105 0303 	add.w	r3, r5, #3
 80087e8:	d04a      	beq.n	8008880 <ucdr_deserialize_endian_uint32_t+0x10c>
 80087ea:	783b      	ldrb	r3, [r7, #0]
 80087ec:	70eb      	strb	r3, [r5, #3]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	68a2      	ldr	r2, [r4, #8]
 80087f2:	7da0      	ldrb	r0, [r4, #22]
 80087f4:	2104      	movs	r1, #4
 80087f6:	3304      	adds	r3, #4
 80087f8:	4452      	add	r2, sl
 80087fa:	eba3 0308 	sub.w	r3, r3, r8
 80087fe:	7561      	strb	r1, [r4, #21]
 8008800:	60a2      	str	r2, [r4, #8]
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	f080 0001 	eor.w	r0, r0, #1
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	2104      	movs	r1, #4
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fb3e 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008814:	b1a8      	cbz	r0, 8008842 <ucdr_deserialize_endian_uint32_t+0xce>
 8008816:	2e01      	cmp	r6, #1
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	d017      	beq.n	800884c <ucdr_deserialize_endian_uint32_t+0xd8>
 800881c:	78db      	ldrb	r3, [r3, #3]
 800881e:	702b      	strb	r3, [r5, #0]
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	789b      	ldrb	r3, [r3, #2]
 8008824:	706b      	strb	r3, [r5, #1]
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	70ab      	strb	r3, [r5, #2]
 800882c:	68a3      	ldr	r3, [r4, #8]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	70eb      	strb	r3, [r5, #3]
 8008832:	68a2      	ldr	r2, [r4, #8]
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	3204      	adds	r2, #4
 8008838:	3304      	adds	r3, #4
 800883a:	2104      	movs	r1, #4
 800883c:	60a2      	str	r2, [r4, #8]
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	7561      	strb	r1, [r4, #21]
 8008842:	7da0      	ldrb	r0, [r4, #22]
 8008844:	f080 0001 	eor.w	r0, r0, #1
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	e7ef      	b.n	8008832 <ucdr_deserialize_endian_uint32_t+0xbe>
 8008852:	68a2      	ldr	r2, [r4, #8]
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	7da0      	ldrb	r0, [r4, #22]
 8008858:	f884 9015 	strb.w	r9, [r4, #21]
 800885c:	eba2 0208 	sub.w	r2, r2, r8
 8008860:	eba3 0308 	sub.w	r3, r3, r8
 8008864:	60a2      	str	r2, [r4, #8]
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	f080 0001 	eor.w	r0, r0, #1
 800886c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	789b      	ldrb	r3, [r3, #2]
 8008874:	706b      	strb	r3, [r5, #1]
 8008876:	1cab      	adds	r3, r5, #2
 8008878:	68a2      	ldr	r2, [r4, #8]
 800887a:	7852      	ldrb	r2, [r2, #1]
 800887c:	f803 2b01 	strb.w	r2, [r3], #1
 8008880:	68a2      	ldr	r2, [r4, #8]
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e7b2      	b.n	80087ee <ucdr_deserialize_endian_uint32_t+0x7a>
 8008888:	4639      	mov	r1, r7
 800888a:	4642      	mov	r2, r8
 800888c:	4628      	mov	r0, r5
 800888e:	f00a fe26 	bl	80134de <memcpy>
 8008892:	68a1      	ldr	r1, [r4, #8]
 8008894:	4652      	mov	r2, sl
 8008896:	eb05 0008 	add.w	r0, r5, r8
 800889a:	f00a fe20 	bl	80134de <memcpy>
 800889e:	e7a6      	b.n	80087ee <ucdr_deserialize_endian_uint32_t+0x7a>

080088a0 <ucdr_serialize_uint64_t>:
 80088a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a4:	2108      	movs	r1, #8
 80088a6:	b082      	sub	sp, #8
 80088a8:	4604      	mov	r4, r0
 80088aa:	e9cd 2300 	strd	r2, r3, [sp]
 80088ae:	f000 fb43 	bl	8008f38 <ucdr_buffer_alignment>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	7d67      	ldrb	r7, [r4, #21]
 80088b8:	f000 fb82 	bl	8008fc0 <ucdr_advance_buffer>
 80088bc:	2108      	movs	r1, #8
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fada 	bl	8008e78 <ucdr_check_buffer_available_for>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d14e      	bne.n	8008966 <ucdr_serialize_uint64_t+0xc6>
 80088c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	d945      	bls.n	800895c <ucdr_serialize_uint64_t+0xbc>
 80088d0:	1b5e      	subs	r6, r3, r5
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	f1c6 0808 	rsb	r8, r6, #8
 80088da:	4433      	add	r3, r6
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	4641      	mov	r1, r8
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fad5 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d074      	beq.n	80089d4 <ucdr_serialize_uint64_t+0x134>
 80088ea:	7d23      	ldrb	r3, [r4, #20]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	f000 809b 	beq.w	8008a28 <ucdr_serialize_uint64_t+0x188>
 80088f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088f6:	702b      	strb	r3, [r5, #0]
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	d078      	beq.n	80089ee <ucdr_serialize_uint64_t+0x14e>
 80088fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008900:	706b      	strb	r3, [r5, #1]
 8008902:	2e01      	cmp	r6, #1
 8008904:	d077      	beq.n	80089f6 <ucdr_serialize_uint64_t+0x156>
 8008906:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800890a:	70ab      	strb	r3, [r5, #2]
 800890c:	2e02      	cmp	r6, #2
 800890e:	d076      	beq.n	80089fe <ucdr_serialize_uint64_t+0x15e>
 8008910:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008914:	70eb      	strb	r3, [r5, #3]
 8008916:	2e03      	cmp	r6, #3
 8008918:	d075      	beq.n	8008a06 <ucdr_serialize_uint64_t+0x166>
 800891a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800891e:	712b      	strb	r3, [r5, #4]
 8008920:	2e04      	cmp	r6, #4
 8008922:	d074      	beq.n	8008a0e <ucdr_serialize_uint64_t+0x16e>
 8008924:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008928:	716b      	strb	r3, [r5, #5]
 800892a:	2e05      	cmp	r6, #5
 800892c:	d073      	beq.n	8008a16 <ucdr_serialize_uint64_t+0x176>
 800892e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008932:	71ab      	strb	r3, [r5, #6]
 8008934:	2e06      	cmp	r6, #6
 8008936:	d072      	beq.n	8008a1e <ucdr_serialize_uint64_t+0x17e>
 8008938:	f89d 3000 	ldrb.w	r3, [sp]
 800893c:	71eb      	strb	r3, [r5, #7]
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	68a2      	ldr	r2, [r4, #8]
 8008942:	7da0      	ldrb	r0, [r4, #22]
 8008944:	3308      	adds	r3, #8
 8008946:	1b9e      	subs	r6, r3, r6
 8008948:	4442      	add	r2, r8
 800894a:	2308      	movs	r3, #8
 800894c:	f080 0001 	eor.w	r0, r0, #1
 8008950:	60a2      	str	r2, [r4, #8]
 8008952:	6126      	str	r6, [r4, #16]
 8008954:	7563      	strb	r3, [r4, #21]
 8008956:	b002      	add	sp, #8
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	2108      	movs	r1, #8
 800895e:	4620      	mov	r0, r4
 8008960:	f000 fa96 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008964:	b350      	cbz	r0, 80089bc <ucdr_serialize_uint64_t+0x11c>
 8008966:	7d23      	ldrb	r3, [r4, #20]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d02d      	beq.n	80089c8 <ucdr_serialize_uint64_t+0x128>
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800897a:	705a      	strb	r2, [r3, #1]
 800897c:	68a3      	ldr	r3, [r4, #8]
 800897e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008982:	709a      	strb	r2, [r3, #2]
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800898a:	70da      	strb	r2, [r3, #3]
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008992:	711a      	strb	r2, [r3, #4]
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800899a:	715a      	strb	r2, [r3, #5]
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80089a2:	719a      	strb	r2, [r3, #6]
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	f89d 2000 	ldrb.w	r2, [sp]
 80089aa:	71da      	strb	r2, [r3, #7]
 80089ac:	68a2      	ldr	r2, [r4, #8]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	3208      	adds	r2, #8
 80089b2:	3308      	adds	r3, #8
 80089b4:	2108      	movs	r1, #8
 80089b6:	60a2      	str	r2, [r4, #8]
 80089b8:	6123      	str	r3, [r4, #16]
 80089ba:	7561      	strb	r1, [r4, #21]
 80089bc:	7da0      	ldrb	r0, [r4, #22]
 80089be:	f080 0001 	eor.w	r0, r0, #1
 80089c2:	b002      	add	sp, #8
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c8:	466b      	mov	r3, sp
 80089ca:	cb03      	ldmia	r3!, {r0, r1}
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	6018      	str	r0, [r3, #0]
 80089d0:	6059      	str	r1, [r3, #4]
 80089d2:	e7eb      	b.n	80089ac <ucdr_serialize_uint64_t+0x10c>
 80089d4:	68a2      	ldr	r2, [r4, #8]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	7da0      	ldrb	r0, [r4, #22]
 80089da:	7567      	strb	r7, [r4, #21]
 80089dc:	1b92      	subs	r2, r2, r6
 80089de:	1b9b      	subs	r3, r3, r6
 80089e0:	f080 0001 	eor.w	r0, r0, #1
 80089e4:	60a2      	str	r2, [r4, #8]
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	b002      	add	sp, #8
 80089ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ee:	68a3      	ldr	r3, [r4, #8]
 80089f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	68a3      	ldr	r3, [r4, #8]
 80089f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	f89d 2000 	ldrb.w	r2, [sp]
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e78a      	b.n	800893e <ucdr_serialize_uint64_t+0x9e>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	466d      	mov	r5, sp
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4632      	mov	r2, r6
 8008a30:	f00a fd55 	bl	80134de <memcpy>
 8008a34:	68a0      	ldr	r0, [r4, #8]
 8008a36:	4642      	mov	r2, r8
 8008a38:	19a9      	adds	r1, r5, r6
 8008a3a:	f00a fd50 	bl	80134de <memcpy>
 8008a3e:	e77e      	b.n	800893e <ucdr_serialize_uint64_t+0x9e>

08008a40 <ucdr_serialize_int16_t>:
 8008a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	460b      	mov	r3, r1
 8008a48:	2102      	movs	r1, #2
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008a50:	f000 fa72 	bl	8008f38 <ucdr_buffer_alignment>
 8008a54:	4601      	mov	r1, r0
 8008a56:	4620      	mov	r0, r4
 8008a58:	7d67      	ldrb	r7, [r4, #21]
 8008a5a:	f000 fab1 	bl	8008fc0 <ucdr_advance_buffer>
 8008a5e:	2102      	movs	r1, #2
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fa09 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008a66:	bb78      	cbnz	r0, 8008ac8 <ucdr_serialize_int16_t+0x88>
 8008a68:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008a6c:	42ab      	cmp	r3, r5
 8008a6e:	d926      	bls.n	8008abe <ucdr_serialize_int16_t+0x7e>
 8008a70:	1b5e      	subs	r6, r3, r5
 8008a72:	60a3      	str	r3, [r4, #8]
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	f1c6 0802 	rsb	r8, r6, #2
 8008a7a:	4433      	add	r3, r6
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fa05 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d03b      	beq.n	8008b02 <ucdr_serialize_int16_t+0xc2>
 8008a8a:	7d23      	ldrb	r3, [r4, #20]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d04a      	beq.n	8008b26 <ucdr_serialize_int16_t+0xe6>
 8008a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a94:	702b      	strb	r3, [r5, #0]
 8008a96:	2e00      	cmp	r6, #0
 8008a98:	d040      	beq.n	8008b1c <ucdr_serialize_int16_t+0xdc>
 8008a9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a9e:	706b      	strb	r3, [r5, #1]
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	68a2      	ldr	r2, [r4, #8]
 8008aa4:	7da0      	ldrb	r0, [r4, #22]
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	1b9e      	subs	r6, r3, r6
 8008aaa:	4442      	add	r2, r8
 8008aac:	2302      	movs	r3, #2
 8008aae:	f080 0001 	eor.w	r0, r0, #1
 8008ab2:	60a2      	str	r2, [r4, #8]
 8008ab4:	6126      	str	r6, [r4, #16]
 8008ab6:	7563      	strb	r3, [r4, #21]
 8008ab8:	b002      	add	sp, #8
 8008aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008abe:	2102      	movs	r1, #2
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 f9e5 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008ac6:	b190      	cbz	r0, 8008aee <ucdr_serialize_int16_t+0xae>
 8008ac8:	7d23      	ldrb	r3, [r4, #20]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	d014      	beq.n	8008afa <ucdr_serialize_int16_t+0xba>
 8008ad0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008adc:	705a      	strb	r2, [r3, #1]
 8008ade:	68a2      	ldr	r2, [r4, #8]
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	3202      	adds	r2, #2
 8008ae4:	3302      	adds	r3, #2
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	60a2      	str	r2, [r4, #8]
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	7561      	strb	r1, [r4, #21]
 8008aee:	7da0      	ldrb	r0, [r4, #22]
 8008af0:	f080 0001 	eor.w	r0, r0, #1
 8008af4:	b002      	add	sp, #8
 8008af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008afa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	e7ed      	b.n	8008ade <ucdr_serialize_int16_t+0x9e>
 8008b02:	68a2      	ldr	r2, [r4, #8]
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	7da0      	ldrb	r0, [r4, #22]
 8008b08:	7567      	strb	r7, [r4, #21]
 8008b0a:	1b92      	subs	r2, r2, r6
 8008b0c:	1b9b      	subs	r3, r3, r6
 8008b0e:	f080 0001 	eor.w	r0, r0, #1
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	b002      	add	sp, #8
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	68a3      	ldr	r3, [r4, #8]
 8008b1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e7bc      	b.n	8008aa0 <ucdr_serialize_int16_t+0x60>
 8008b26:	4628      	mov	r0, r5
 8008b28:	f10d 0506 	add.w	r5, sp, #6
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4632      	mov	r2, r6
 8008b30:	f00a fcd5 	bl	80134de <memcpy>
 8008b34:	68a0      	ldr	r0, [r4, #8]
 8008b36:	4642      	mov	r2, r8
 8008b38:	19a9      	adds	r1, r5, r6
 8008b3a:	f00a fcd0 	bl	80134de <memcpy>
 8008b3e:	e7af      	b.n	8008aa0 <ucdr_serialize_int16_t+0x60>

08008b40 <ucdr_deserialize_int16_t>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	460d      	mov	r5, r1
 8008b46:	2102      	movs	r1, #2
 8008b48:	4604      	mov	r4, r0
 8008b4a:	f000 f9f5 	bl	8008f38 <ucdr_buffer_alignment>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4620      	mov	r0, r4
 8008b52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008b56:	f000 fa33 	bl	8008fc0 <ucdr_advance_buffer>
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f98b 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008b62:	bb60      	cbnz	r0, 8008bbe <ucdr_deserialize_int16_t+0x7e>
 8008b64:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b68:	42be      	cmp	r6, r7
 8008b6a:	d923      	bls.n	8008bb4 <ucdr_deserialize_int16_t+0x74>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	60a6      	str	r6, [r4, #8]
 8008b70:	1bf6      	subs	r6, r6, r7
 8008b72:	4433      	add	r3, r6
 8008b74:	f1c6 0902 	rsb	r9, r6, #2
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f987 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d034      	beq.n	8008bf0 <ucdr_deserialize_int16_t+0xb0>
 8008b86:	7d23      	ldrb	r3, [r4, #20]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d042      	beq.n	8008c12 <ucdr_deserialize_int16_t+0xd2>
 8008b8c:	787b      	ldrb	r3, [r7, #1]
 8008b8e:	702b      	strb	r3, [r5, #0]
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	d03a      	beq.n	8008c0a <ucdr_deserialize_int16_t+0xca>
 8008b94:	783b      	ldrb	r3, [r7, #0]
 8008b96:	706b      	strb	r3, [r5, #1]
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	68a2      	ldr	r2, [r4, #8]
 8008b9c:	7da0      	ldrb	r0, [r4, #22]
 8008b9e:	2102      	movs	r1, #2
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	444a      	add	r2, r9
 8008ba4:	1b9b      	subs	r3, r3, r6
 8008ba6:	7561      	strb	r1, [r4, #21]
 8008ba8:	60a2      	str	r2, [r4, #8]
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	f080 0001 	eor.w	r0, r0, #1
 8008bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f96a 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008bbc:	b180      	cbz	r0, 8008be0 <ucdr_deserialize_int16_t+0xa0>
 8008bbe:	7d23      	ldrb	r3, [r4, #20]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	d011      	beq.n	8008bea <ucdr_deserialize_int16_t+0xaa>
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	702b      	strb	r3, [r5, #0]
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	706b      	strb	r3, [r5, #1]
 8008bd0:	68a2      	ldr	r2, [r4, #8]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	3202      	adds	r2, #2
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	2102      	movs	r1, #2
 8008bda:	60a2      	str	r2, [r4, #8]
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	7561      	strb	r1, [r4, #21]
 8008be0:	7da0      	ldrb	r0, [r4, #22]
 8008be2:	f080 0001 	eor.w	r0, r0, #1
 8008be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	802b      	strh	r3, [r5, #0]
 8008bee:	e7ef      	b.n	8008bd0 <ucdr_deserialize_int16_t+0x90>
 8008bf0:	68a2      	ldr	r2, [r4, #8]
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	7da0      	ldrb	r0, [r4, #22]
 8008bf6:	f884 8015 	strb.w	r8, [r4, #21]
 8008bfa:	1b92      	subs	r2, r2, r6
 8008bfc:	1b9b      	subs	r3, r3, r6
 8008bfe:	60a2      	str	r2, [r4, #8]
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	f080 0001 	eor.w	r0, r0, #1
 8008c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	706b      	strb	r3, [r5, #1]
 8008c10:	e7c2      	b.n	8008b98 <ucdr_deserialize_int16_t+0x58>
 8008c12:	4639      	mov	r1, r7
 8008c14:	4632      	mov	r2, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	f00a fc61 	bl	80134de <memcpy>
 8008c1c:	68a1      	ldr	r1, [r4, #8]
 8008c1e:	464a      	mov	r2, r9
 8008c20:	19a8      	adds	r0, r5, r6
 8008c22:	f00a fc5c 	bl	80134de <memcpy>
 8008c26:	e7b7      	b.n	8008b98 <ucdr_deserialize_int16_t+0x58>

08008c28 <ucdr_serialize_int32_t>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	4604      	mov	r4, r0
 8008c30:	9101      	str	r1, [sp, #4]
 8008c32:	2104      	movs	r1, #4
 8008c34:	f000 f980 	bl	8008f38 <ucdr_buffer_alignment>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	7d67      	ldrb	r7, [r4, #21]
 8008c3e:	f000 f9bf 	bl	8008fc0 <ucdr_advance_buffer>
 8008c42:	2104      	movs	r1, #4
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 f917 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d139      	bne.n	8008cc2 <ucdr_serialize_int32_t+0x9a>
 8008c4e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008c52:	42ab      	cmp	r3, r5
 8008c54:	d930      	bls.n	8008cb8 <ucdr_serialize_int32_t+0x90>
 8008c56:	1b5e      	subs	r6, r3, r5
 8008c58:	60a3      	str	r3, [r4, #8]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	f1c6 0804 	rsb	r8, r6, #4
 8008c60:	4433      	add	r3, r6
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	4641      	mov	r1, r8
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f912 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d04c      	beq.n	8008d0a <ucdr_serialize_int32_t+0xe2>
 8008c70:	7d23      	ldrb	r3, [r4, #20]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d063      	beq.n	8008d3e <ucdr_serialize_int32_t+0x116>
 8008c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c7a:	702b      	strb	r3, [r5, #0]
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	d051      	beq.n	8008d24 <ucdr_serialize_int32_t+0xfc>
 8008c80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c84:	706b      	strb	r3, [r5, #1]
 8008c86:	2e01      	cmp	r6, #1
 8008c88:	d050      	beq.n	8008d2c <ucdr_serialize_int32_t+0x104>
 8008c8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008c8e:	70ab      	strb	r3, [r5, #2]
 8008c90:	2e02      	cmp	r6, #2
 8008c92:	d04f      	beq.n	8008d34 <ucdr_serialize_int32_t+0x10c>
 8008c94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c98:	70eb      	strb	r3, [r5, #3]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	68a2      	ldr	r2, [r4, #8]
 8008c9e:	7da0      	ldrb	r0, [r4, #22]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	1b9e      	subs	r6, r3, r6
 8008ca4:	4442      	add	r2, r8
 8008ca6:	2304      	movs	r3, #4
 8008ca8:	f080 0001 	eor.w	r0, r0, #1
 8008cac:	60a2      	str	r2, [r4, #8]
 8008cae:	6126      	str	r6, [r4, #16]
 8008cb0:	7563      	strb	r3, [r4, #21]
 8008cb2:	b002      	add	sp, #8
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	2104      	movs	r1, #4
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 f8e8 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008cc0:	b1d0      	cbz	r0, 8008cf8 <ucdr_serialize_int32_t+0xd0>
 8008cc2:	7d23      	ldrb	r3, [r4, #20]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	d01c      	beq.n	8008d04 <ucdr_serialize_int32_t+0xdc>
 8008cca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008cd6:	705a      	strb	r2, [r3, #1]
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008cde:	709a      	strb	r2, [r3, #2]
 8008ce0:	68a3      	ldr	r3, [r4, #8]
 8008ce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ce6:	70da      	strb	r2, [r3, #3]
 8008ce8:	68a2      	ldr	r2, [r4, #8]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	3204      	adds	r2, #4
 8008cee:	3304      	adds	r3, #4
 8008cf0:	2104      	movs	r1, #4
 8008cf2:	60a2      	str	r2, [r4, #8]
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	7561      	strb	r1, [r4, #21]
 8008cf8:	7da0      	ldrb	r0, [r4, #22]
 8008cfa:	f080 0001 	eor.w	r0, r0, #1
 8008cfe:	b002      	add	sp, #8
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d04:	9a01      	ldr	r2, [sp, #4]
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e7ee      	b.n	8008ce8 <ucdr_serialize_int32_t+0xc0>
 8008d0a:	68a2      	ldr	r2, [r4, #8]
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	7da0      	ldrb	r0, [r4, #22]
 8008d10:	7567      	strb	r7, [r4, #21]
 8008d12:	1b92      	subs	r2, r2, r6
 8008d14:	1b9b      	subs	r3, r3, r6
 8008d16:	f080 0001 	eor.w	r0, r0, #1
 8008d1a:	60a2      	str	r2, [r4, #8]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	b002      	add	sp, #8
 8008d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d24:	68a3      	ldr	r3, [r4, #8]
 8008d26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	68a3      	ldr	r3, [r4, #8]
 8008d36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e7ad      	b.n	8008c9a <ucdr_serialize_int32_t+0x72>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	ad01      	add	r5, sp, #4
 8008d42:	4629      	mov	r1, r5
 8008d44:	4632      	mov	r2, r6
 8008d46:	f00a fbca 	bl	80134de <memcpy>
 8008d4a:	68a0      	ldr	r0, [r4, #8]
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	19a9      	adds	r1, r5, r6
 8008d50:	f00a fbc5 	bl	80134de <memcpy>
 8008d54:	e7a1      	b.n	8008c9a <ucdr_serialize_int32_t+0x72>
 8008d56:	bf00      	nop

08008d58 <ucdr_deserialize_int32_t>:
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	2104      	movs	r1, #4
 8008d60:	4604      	mov	r4, r0
 8008d62:	f000 f8e9 	bl	8008f38 <ucdr_buffer_alignment>
 8008d66:	4601      	mov	r1, r0
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008d6e:	f000 f927 	bl	8008fc0 <ucdr_advance_buffer>
 8008d72:	2104      	movs	r1, #4
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 f87f 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d138      	bne.n	8008df0 <ucdr_deserialize_int32_t+0x98>
 8008d7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008d82:	42b7      	cmp	r7, r6
 8008d84:	d92f      	bls.n	8008de6 <ucdr_deserialize_int32_t+0x8e>
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	60a7      	str	r7, [r4, #8]
 8008d8a:	1bbf      	subs	r7, r7, r6
 8008d8c:	443b      	add	r3, r7
 8008d8e:	f1c7 0904 	rsb	r9, r7, #4
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	4649      	mov	r1, r9
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f87a 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d046      	beq.n	8008e2e <ucdr_deserialize_int32_t+0xd6>
 8008da0:	7d23      	ldrb	r3, [r4, #20]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d05c      	beq.n	8008e60 <ucdr_deserialize_int32_t+0x108>
 8008da6:	78f3      	ldrb	r3, [r6, #3]
 8008da8:	702b      	strb	r3, [r5, #0]
 8008daa:	2f00      	cmp	r7, #0
 8008dac:	d04c      	beq.n	8008e48 <ucdr_deserialize_int32_t+0xf0>
 8008dae:	78b3      	ldrb	r3, [r6, #2]
 8008db0:	706b      	strb	r3, [r5, #1]
 8008db2:	2f01      	cmp	r7, #1
 8008db4:	f105 0302 	add.w	r3, r5, #2
 8008db8:	d04a      	beq.n	8008e50 <ucdr_deserialize_int32_t+0xf8>
 8008dba:	7873      	ldrb	r3, [r6, #1]
 8008dbc:	70ab      	strb	r3, [r5, #2]
 8008dbe:	2f02      	cmp	r7, #2
 8008dc0:	f105 0303 	add.w	r3, r5, #3
 8008dc4:	d048      	beq.n	8008e58 <ucdr_deserialize_int32_t+0x100>
 8008dc6:	7833      	ldrb	r3, [r6, #0]
 8008dc8:	70eb      	strb	r3, [r5, #3]
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	68a2      	ldr	r2, [r4, #8]
 8008dce:	7da0      	ldrb	r0, [r4, #22]
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	444a      	add	r2, r9
 8008dd6:	1bdb      	subs	r3, r3, r7
 8008dd8:	7561      	strb	r1, [r4, #21]
 8008dda:	60a2      	str	r2, [r4, #8]
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	f080 0001 	eor.w	r0, r0, #1
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	2104      	movs	r1, #4
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 f851 	bl	8008e90 <ucdr_check_final_buffer_behavior>
 8008dee:	b1b0      	cbz	r0, 8008e1e <ucdr_deserialize_int32_t+0xc6>
 8008df0:	7d23      	ldrb	r3, [r4, #20]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	d017      	beq.n	8008e28 <ucdr_deserialize_int32_t+0xd0>
 8008df8:	78db      	ldrb	r3, [r3, #3]
 8008dfa:	702b      	strb	r3, [r5, #0]
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	789b      	ldrb	r3, [r3, #2]
 8008e00:	706b      	strb	r3, [r5, #1]
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	70ab      	strb	r3, [r5, #2]
 8008e08:	68a3      	ldr	r3, [r4, #8]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	70eb      	strb	r3, [r5, #3]
 8008e0e:	68a2      	ldr	r2, [r4, #8]
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	3204      	adds	r2, #4
 8008e14:	3304      	adds	r3, #4
 8008e16:	2104      	movs	r1, #4
 8008e18:	60a2      	str	r2, [r4, #8]
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	7561      	strb	r1, [r4, #21]
 8008e1e:	7da0      	ldrb	r0, [r4, #22]
 8008e20:	f080 0001 	eor.w	r0, r0, #1
 8008e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	e7ef      	b.n	8008e0e <ucdr_deserialize_int32_t+0xb6>
 8008e2e:	68a2      	ldr	r2, [r4, #8]
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	7da0      	ldrb	r0, [r4, #22]
 8008e34:	f884 8015 	strb.w	r8, [r4, #21]
 8008e38:	1bd2      	subs	r2, r2, r7
 8008e3a:	1bdb      	subs	r3, r3, r7
 8008e3c:	60a2      	str	r2, [r4, #8]
 8008e3e:	6123      	str	r3, [r4, #16]
 8008e40:	f080 0001 	eor.w	r0, r0, #1
 8008e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	789b      	ldrb	r3, [r3, #2]
 8008e4c:	706b      	strb	r3, [r5, #1]
 8008e4e:	1cab      	adds	r3, r5, #2
 8008e50:	68a2      	ldr	r2, [r4, #8]
 8008e52:	7852      	ldrb	r2, [r2, #1]
 8008e54:	f803 2b01 	strb.w	r2, [r3], #1
 8008e58:	68a2      	ldr	r2, [r4, #8]
 8008e5a:	7812      	ldrb	r2, [r2, #0]
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	e7b4      	b.n	8008dca <ucdr_deserialize_int32_t+0x72>
 8008e60:	4631      	mov	r1, r6
 8008e62:	463a      	mov	r2, r7
 8008e64:	4628      	mov	r0, r5
 8008e66:	f00a fb3a 	bl	80134de <memcpy>
 8008e6a:	68a1      	ldr	r1, [r4, #8]
 8008e6c:	464a      	mov	r2, r9
 8008e6e:	19e8      	adds	r0, r5, r7
 8008e70:	f00a fb35 	bl	80134de <memcpy>
 8008e74:	e7a9      	b.n	8008dca <ucdr_deserialize_int32_t+0x72>
 8008e76:	bf00      	nop

08008e78 <ucdr_check_buffer_available_for>:
 8008e78:	7d83      	ldrb	r3, [r0, #22]
 8008e7a:	b93b      	cbnz	r3, 8008e8c <ucdr_check_buffer_available_for+0x14>
 8008e7c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008e80:	4419      	add	r1, r3
 8008e82:	4288      	cmp	r0, r1
 8008e84:	bf34      	ite	cc
 8008e86:	2000      	movcc	r0, #0
 8008e88:	2001      	movcs	r0, #1
 8008e8a:	4770      	bx	lr
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4770      	bx	lr

08008e90 <ucdr_check_final_buffer_behavior>:
 8008e90:	7d83      	ldrb	r3, [r0, #22]
 8008e92:	b943      	cbnz	r3, 8008ea6 <ucdr_check_final_buffer_behavior+0x16>
 8008e94:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008e98:	4291      	cmp	r1, r2
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	d205      	bcs.n	8008eac <ucdr_check_final_buffer_behavior+0x1c>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	4770      	bx	lr
 8008eac:	6982      	ldr	r2, [r0, #24]
 8008eae:	b13a      	cbz	r2, 8008ec0 <ucdr_check_final_buffer_behavior+0x30>
 8008eb0:	69c1      	ldr	r1, [r0, #28]
 8008eb2:	4790      	blx	r2
 8008eb4:	f080 0301 	eor.w	r3, r0, #1
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	75a0      	strb	r0, [r4, #22]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	bd10      	pop	{r4, pc}
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	75a0      	strb	r0, [r4, #22]
 8008ec4:	e7fa      	b.n	8008ebc <ucdr_check_final_buffer_behavior+0x2c>
 8008ec6:	bf00      	nop

08008ec8 <ucdr_set_on_full_buffer_callback>:
 8008ec8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop

08008ed0 <ucdr_init_buffer_origin_offset_endian>:
 8008ed0:	b410      	push	{r4}
 8008ed2:	9c01      	ldr	r4, [sp, #4]
 8008ed4:	6001      	str	r1, [r0, #0]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	6042      	str	r2, [r0, #4]
 8008eda:	190a      	adds	r2, r1, r4
 8008edc:	441c      	add	r4, r3
 8008ede:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008ee2:	6082      	str	r2, [r0, #8]
 8008ee4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008ee8:	7503      	strb	r3, [r0, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef4:	7542      	strb	r2, [r0, #21]
 8008ef6:	7582      	strb	r2, [r0, #22]
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <ucdr_init_buffer_origin_offset>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	9c04      	ldr	r4, [sp, #16]
 8008f02:	9400      	str	r4, [sp, #0]
 8008f04:	2401      	movs	r4, #1
 8008f06:	9401      	str	r4, [sp, #4]
 8008f08:	f7ff ffe2 	bl	8008ed0 <ucdr_init_buffer_origin_offset_endian>
 8008f0c:	b002      	add	sp, #8
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <ucdr_init_buffer_origin>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	2400      	movs	r4, #0
 8008f16:	9400      	str	r4, [sp, #0]
 8008f18:	f7ff fff0 	bl	8008efc <ucdr_init_buffer_origin_offset>
 8008f1c:	b002      	add	sp, #8
 8008f1e:	bd10      	pop	{r4, pc}

08008f20 <ucdr_init_buffer>:
 8008f20:	2300      	movs	r3, #0
 8008f22:	f7ff bff5 	b.w	8008f10 <ucdr_init_buffer_origin>
 8008f26:	bf00      	nop

08008f28 <ucdr_alignment>:
 8008f28:	fbb0 f3f1 	udiv	r3, r0, r1
 8008f2c:	fb03 0011 	mls	r0, r3, r1, r0
 8008f30:	1a08      	subs	r0, r1, r0
 8008f32:	3901      	subs	r1, #1
 8008f34:	4008      	ands	r0, r1
 8008f36:	4770      	bx	lr

08008f38 <ucdr_buffer_alignment>:
 8008f38:	7d43      	ldrb	r3, [r0, #21]
 8008f3a:	428b      	cmp	r3, r1
 8008f3c:	d208      	bcs.n	8008f50 <ucdr_buffer_alignment+0x18>
 8008f3e:	6900      	ldr	r0, [r0, #16]
 8008f40:	fbb0 f3f1 	udiv	r3, r0, r1
 8008f44:	fb01 0013 	mls	r0, r1, r3, r0
 8008f48:	1a08      	subs	r0, r1, r0
 8008f4a:	3901      	subs	r1, #1
 8008f4c:	4008      	ands	r0, r1
 8008f4e:	4770      	bx	lr
 8008f50:	2000      	movs	r0, #0
 8008f52:	4770      	bx	lr

08008f54 <ucdr_align_to>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7ff ffed 	bl	8008f38 <ucdr_buffer_alignment>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	6921      	ldr	r1, [r4, #16]
 8008f62:	7565      	strb	r5, [r4, #21]
 8008f64:	181a      	adds	r2, r3, r0
 8008f66:	6863      	ldr	r3, [r4, #4]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	4408      	add	r0, r1
 8008f6c:	bf28      	it	cs
 8008f6e:	4613      	movcs	r3, r2
 8008f70:	6120      	str	r0, [r4, #16]
 8008f72:	60a3      	str	r3, [r4, #8]
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	bf00      	nop

08008f78 <ucdr_buffer_length>:
 8008f78:	6882      	ldr	r2, [r0, #8]
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	1a10      	subs	r0, r2, r0
 8008f7e:	4770      	bx	lr

08008f80 <ucdr_buffer_remaining>:
 8008f80:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008f84:	1a10      	subs	r0, r2, r0
 8008f86:	4770      	bx	lr

08008f88 <ucdr_check_final_buffer_behavior_array>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	7d83      	ldrb	r3, [r0, #22]
 8008f8c:	b963      	cbnz	r3, 8008fa8 <ucdr_check_final_buffer_behavior_array+0x20>
 8008f8e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	d308      	bcc.n	8008fac <ucdr_check_final_buffer_behavior_array+0x24>
 8008f9a:	b139      	cbz	r1, 8008fac <ucdr_check_final_buffer_behavior_array+0x24>
 8008f9c:	6983      	ldr	r3, [r0, #24]
 8008f9e:	b163      	cbz	r3, 8008fba <ucdr_check_final_buffer_behavior_array+0x32>
 8008fa0:	69c1      	ldr	r1, [r0, #28]
 8008fa2:	4798      	blx	r3
 8008fa4:	75a0      	strb	r0, [r4, #22]
 8008fa6:	b108      	cbz	r0, 8008fac <ucdr_check_final_buffer_behavior_array+0x24>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff ffe7 	bl	8008f80 <ucdr_buffer_remaining>
 8008fb2:	42a8      	cmp	r0, r5
 8008fb4:	bf28      	it	cs
 8008fb6:	4628      	movcs	r0, r5
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
 8008fba:	2301      	movs	r3, #1
 8008fbc:	7583      	strb	r3, [r0, #22]
 8008fbe:	e7f3      	b.n	8008fa8 <ucdr_check_final_buffer_behavior_array+0x20>

08008fc0 <ucdr_advance_buffer>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	f7ff ff57 	bl	8008e78 <ucdr_check_buffer_available_for>
 8008fca:	b178      	cbz	r0, 8008fec <ucdr_advance_buffer+0x2c>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	68a2      	ldr	r2, [r4, #8]
 8008fd0:	442b      	add	r3, r5
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	442a      	add	r2, r5
 8008fd8:	7563      	strb	r3, [r4, #21]
 8008fda:	60a2      	str	r2, [r4, #8]
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	68a2      	ldr	r2, [r4, #8]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	4402      	add	r2, r0
 8008fe4:	4403      	add	r3, r0
 8008fe6:	1a2d      	subs	r5, r5, r0
 8008fe8:	60a2      	str	r2, [r4, #8]
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	4629      	mov	r1, r5
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7ff ffc9 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d1f1      	bne.n	8008fde <ucdr_advance_buffer+0x1e>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	7563      	strb	r3, [r4, #21]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}

08009000 <rcl_client_get_rmw_handle>:
 8009000:	b118      	cbz	r0, 800900a <rcl_client_get_rmw_handle+0xa>
 8009002:	6800      	ldr	r0, [r0, #0]
 8009004:	b108      	cbz	r0, 800900a <rcl_client_get_rmw_handle+0xa>
 8009006:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800900a:	4770      	bx	lr

0800900c <rcl_send_request>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	b1e8      	cbz	r0, 800904e <rcl_send_request+0x42>
 8009012:	4604      	mov	r4, r0
 8009014:	6800      	ldr	r0, [r0, #0]
 8009016:	b1d0      	cbz	r0, 800904e <rcl_send_request+0x42>
 8009018:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800901c:	b1bb      	cbz	r3, 800904e <rcl_send_request+0x42>
 800901e:	460e      	mov	r6, r1
 8009020:	b1d1      	cbz	r1, 8009058 <rcl_send_request+0x4c>
 8009022:	4615      	mov	r5, r2
 8009024:	b1c2      	cbz	r2, 8009058 <rcl_send_request+0x4c>
 8009026:	2105      	movs	r1, #5
 8009028:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800902c:	f002 fd60 	bl	800baf0 <__atomic_load_8>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	e9c5 0100 	strd	r0, r1, [r5]
 8009036:	462a      	mov	r2, r5
 8009038:	4631      	mov	r1, r6
 800903a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800903e:	f003 fe43 	bl	800ccc8 <rmw_send_request>
 8009042:	4606      	mov	r6, r0
 8009044:	b160      	cbz	r0, 8009060 <rcl_send_request+0x54>
 8009046:	2601      	movs	r6, #1
 8009048:	4630      	mov	r0, r6
 800904a:	b002      	add	sp, #8
 800904c:	bd70      	pop	{r4, r5, r6, pc}
 800904e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8009052:	4630      	mov	r0, r6
 8009054:	b002      	add	sp, #8
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	260b      	movs	r6, #11
 800905a:	4630      	mov	r0, r6
 800905c:	b002      	add	sp, #8
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	2105      	movs	r1, #5
 8009064:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009068:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800906c:	9100      	str	r1, [sp, #0]
 800906e:	f002 fdab 	bl	800bbc8 <__atomic_exchange_8>
 8009072:	4630      	mov	r0, r6
 8009074:	b002      	add	sp, #8
 8009076:	bd70      	pop	{r4, r5, r6, pc}

08009078 <rcl_take_response>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	468e      	mov	lr, r1
 800907c:	460c      	mov	r4, r1
 800907e:	4616      	mov	r6, r2
 8009080:	4605      	mov	r5, r0
 8009082:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009086:	b08c      	sub	sp, #48	@ 0x30
 8009088:	f10d 0c18 	add.w	ip, sp, #24
 800908c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009090:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009094:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009098:	b35d      	cbz	r5, 80090f2 <rcl_take_response+0x7a>
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	b34b      	cbz	r3, 80090f2 <rcl_take_response+0x7a>
 800909e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80090a2:	b330      	cbz	r0, 80090f2 <rcl_take_response+0x7a>
 80090a4:	b346      	cbz	r6, 80090f8 <rcl_take_response+0x80>
 80090a6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8009100 <rcl_take_response+0x88>
 80090aa:	2300      	movs	r3, #0
 80090ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80090b0:	4632      	mov	r2, r6
 80090b2:	f10d 0307 	add.w	r3, sp, #7
 80090b6:	a902      	add	r1, sp, #8
 80090b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80090c0:	f003 ff0a 	bl	800ced8 <rmw_take_response>
 80090c4:	4605      	mov	r5, r0
 80090c6:	b9c8      	cbnz	r0, 80090fc <rcl_take_response+0x84>
 80090c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80090cc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	bf08      	it	eq
 80090d4:	461d      	moveq	r5, r3
 80090d6:	f10d 0e18 	add.w	lr, sp, #24
 80090da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80090de:	46a4      	mov	ip, r4
 80090e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80090e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80090e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80090ec:	4628      	mov	r0, r5
 80090ee:	b00c      	add	sp, #48	@ 0x30
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80090f6:	e7ee      	b.n	80090d6 <rcl_take_response+0x5e>
 80090f8:	250b      	movs	r5, #11
 80090fa:	e7ec      	b.n	80090d6 <rcl_take_response+0x5e>
 80090fc:	2501      	movs	r5, #1
 80090fe:	e7ea      	b.n	80090d6 <rcl_take_response+0x5e>
	...

08009108 <rcl_client_is_valid>:
 8009108:	b130      	cbz	r0, 8009118 <rcl_client_is_valid+0x10>
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	b120      	cbz	r0, 8009118 <rcl_client_is_valid+0x10>
 800910e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009112:	3800      	subs	r0, #0
 8009114:	bf18      	it	ne
 8009116:	2001      	movne	r0, #1
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop

0800911c <rcl_get_zero_initialized_context>:
 800911c:	4a03      	ldr	r2, [pc, #12]	@ (800912c <rcl_get_zero_initialized_context+0x10>)
 800911e:	4603      	mov	r3, r0
 8009120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009124:	e883 0003 	stmia.w	r3, {r0, r1}
 8009128:	4618      	mov	r0, r3
 800912a:	4770      	bx	lr
 800912c:	080145cc 	.word	0x080145cc

08009130 <rcl_context_is_valid>:
 8009130:	b118      	cbz	r0, 800913a <rcl_context_is_valid+0xa>
 8009132:	6840      	ldr	r0, [r0, #4]
 8009134:	3800      	subs	r0, #0
 8009136:	bf18      	it	ne
 8009138:	2001      	movne	r0, #1
 800913a:	4770      	bx	lr

0800913c <__cleanup_context>:
 800913c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009140:	4606      	mov	r6, r0
 8009142:	6800      	ldr	r0, [r0, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	6073      	str	r3, [r6, #4]
 8009148:	2800      	cmp	r0, #0
 800914a:	d049      	beq.n	80091e0 <__cleanup_context+0xa4>
 800914c:	6947      	ldr	r7, [r0, #20]
 800914e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009152:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8009156:	b137      	cbz	r7, 8009166 <__cleanup_context+0x2a>
 8009158:	3014      	adds	r0, #20
 800915a:	f000 f9bb 	bl	80094d4 <rcl_init_options_fini>
 800915e:	4607      	mov	r7, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d144      	bne.n	80091ee <__cleanup_context+0xb2>
 8009164:	6830      	ldr	r0, [r6, #0]
 8009166:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009168:	b143      	cbz	r3, 800917c <__cleanup_context+0x40>
 800916a:	3028      	adds	r0, #40	@ 0x28
 800916c:	f003 fc14 	bl	800c998 <rmw_context_fini>
 8009170:	b118      	cbz	r0, 800917a <__cleanup_context+0x3e>
 8009172:	2f00      	cmp	r7, #0
 8009174:	d03e      	beq.n	80091f4 <__cleanup_context+0xb8>
 8009176:	f7fe fe1f 	bl	8007db8 <rcutils_reset_error>
 800917a:	6830      	ldr	r0, [r6, #0]
 800917c:	6a03      	ldr	r3, [r0, #32]
 800917e:	b1db      	cbz	r3, 80091b8 <__cleanup_context+0x7c>
 8009180:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8009184:	2a01      	cmp	r2, #1
 8009186:	f17c 0100 	sbcs.w	r1, ip, #0
 800918a:	db11      	blt.n	80091b0 <__cleanup_context+0x74>
 800918c:	2400      	movs	r4, #0
 800918e:	4625      	mov	r5, r4
 8009190:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009194:	4649      	mov	r1, r9
 8009196:	b1b8      	cbz	r0, 80091c8 <__cleanup_context+0x8c>
 8009198:	47c0      	blx	r8
 800919a:	6833      	ldr	r3, [r6, #0]
 800919c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80091a0:	3401      	adds	r4, #1
 80091a2:	f145 0500 	adc.w	r5, r5, #0
 80091a6:	4294      	cmp	r4, r2
 80091a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	dbef      	blt.n	8009190 <__cleanup_context+0x54>
 80091b0:	4618      	mov	r0, r3
 80091b2:	4649      	mov	r1, r9
 80091b4:	47c0      	blx	r8
 80091b6:	6830      	ldr	r0, [r6, #0]
 80091b8:	4649      	mov	r1, r9
 80091ba:	47c0      	blx	r8
 80091bc:	2300      	movs	r3, #0
 80091be:	e9c6 3300 	strd	r3, r3, [r6]
 80091c2:	4638      	mov	r0, r7
 80091c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c8:	3401      	adds	r4, #1
 80091ca:	f145 0500 	adc.w	r5, r5, #0
 80091ce:	4294      	cmp	r4, r2
 80091d0:	eb75 010c 	sbcs.w	r1, r5, ip
 80091d4:	dbdc      	blt.n	8009190 <__cleanup_context+0x54>
 80091d6:	4618      	mov	r0, r3
 80091d8:	4649      	mov	r1, r9
 80091da:	47c0      	blx	r8
 80091dc:	6830      	ldr	r0, [r6, #0]
 80091de:	e7eb      	b.n	80091b8 <__cleanup_context+0x7c>
 80091e0:	4607      	mov	r7, r0
 80091e2:	2300      	movs	r3, #0
 80091e4:	e9c6 3300 	strd	r3, r3, [r6]
 80091e8:	4638      	mov	r0, r7
 80091ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ee:	f7fe fde3 	bl	8007db8 <rcutils_reset_error>
 80091f2:	e7b7      	b.n	8009164 <__cleanup_context+0x28>
 80091f4:	f008 f82a 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 80091f8:	4607      	mov	r7, r0
 80091fa:	e7bc      	b.n	8009176 <__cleanup_context+0x3a>

080091fc <rcl_init>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	1e05      	subs	r5, r0, #0
 8009202:	b09e      	sub	sp, #120	@ 0x78
 8009204:	460e      	mov	r6, r1
 8009206:	4690      	mov	r8, r2
 8009208:	461f      	mov	r7, r3
 800920a:	f340 809c 	ble.w	8009346 <rcl_init+0x14a>
 800920e:	2900      	cmp	r1, #0
 8009210:	f000 809c 	beq.w	800934c <rcl_init+0x150>
 8009214:	f1a1 0e04 	sub.w	lr, r1, #4
 8009218:	f04f 0c00 	mov.w	ip, #0
 800921c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8009220:	f10c 0c01 	add.w	ip, ip, #1
 8009224:	2c00      	cmp	r4, #0
 8009226:	f000 8091 	beq.w	800934c <rcl_init+0x150>
 800922a:	4565      	cmp	r5, ip
 800922c:	d1f6      	bne.n	800921c <rcl_init+0x20>
 800922e:	f1b8 0f00 	cmp.w	r8, #0
 8009232:	f000 808b 	beq.w	800934c <rcl_init+0x150>
 8009236:	f8d8 4000 	ldr.w	r4, [r8]
 800923a:	2c00      	cmp	r4, #0
 800923c:	f000 8086 	beq.w	800934c <rcl_init+0x150>
 8009240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009242:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8009246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	f8cc 3000 	str.w	r3, [ip]
 8009250:	a819      	add	r0, sp, #100	@ 0x64
 8009252:	f7fe fd8d 	bl	8007d70 <rcutils_allocator_is_valid>
 8009256:	2800      	cmp	r0, #0
 8009258:	d078      	beq.n	800934c <rcl_init+0x150>
 800925a:	2f00      	cmp	r7, #0
 800925c:	d076      	beq.n	800934c <rcl_init+0x150>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d178      	bne.n	8009356 <rcl_init+0x15a>
 8009264:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8009268:	2178      	movs	r1, #120	@ 0x78
 800926a:	2001      	movs	r0, #1
 800926c:	4798      	blx	r3
 800926e:	4604      	mov	r4, r0
 8009270:	6038      	str	r0, [r7, #0]
 8009272:	2800      	cmp	r0, #0
 8009274:	f000 80b6 	beq.w	80093e4 <rcl_init+0x1e8>
 8009278:	a802      	add	r0, sp, #8
 800927a:	f002 ff89 	bl	800c190 <rmw_get_zero_initialized_context>
 800927e:	a902      	add	r1, sp, #8
 8009280:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009284:	2250      	movs	r2, #80	@ 0x50
 8009286:	ac19      	add	r4, sp, #100	@ 0x64
 8009288:	f00a f929 	bl	80134de <memcpy>
 800928c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800928e:	f8d7 e000 	ldr.w	lr, [r7]
 8009292:	46f4      	mov	ip, lr
 8009294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f8cc 3000 	str.w	r3, [ip]
 800929e:	f10e 0114 	add.w	r1, lr, #20
 80092a2:	4640      	mov	r0, r8
 80092a4:	f000 f940 	bl	8009528 <rcl_init_options_copy>
 80092a8:	4604      	mov	r4, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d144      	bne.n	8009338 <rcl_init+0x13c>
 80092ae:	f8d7 9000 	ldr.w	r9, [r7]
 80092b2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80092b6:	f8c9 0020 	str.w	r0, [r9, #32]
 80092ba:	f8c9 5018 	str.w	r5, [r9, #24]
 80092be:	f8c9 801c 	str.w	r8, [r9, #28]
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	d04e      	beq.n	8009364 <rcl_init+0x168>
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	d04c      	beq.n	8009364 <rcl_init+0x168>
 80092ca:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80092ce:	2104      	movs	r1, #4
 80092d0:	4628      	mov	r0, r5
 80092d2:	4798      	blx	r3
 80092d4:	f8c9 0020 	str.w	r0, [r9, #32]
 80092d8:	f8d7 9000 	ldr.w	r9, [r7]
 80092dc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80092e0:	46ca      	mov	sl, r9
 80092e2:	b343      	cbz	r3, 8009336 <rcl_init+0x13a>
 80092e4:	2d01      	cmp	r5, #1
 80092e6:	f178 0300 	sbcs.w	r3, r8, #0
 80092ea:	db3b      	blt.n	8009364 <rcl_init+0x168>
 80092ec:	2400      	movs	r4, #0
 80092ee:	3e04      	subs	r6, #4
 80092f0:	46a1      	mov	r9, r4
 80092f2:	e00b      	b.n	800930c <rcl_init+0x110>
 80092f4:	6831      	ldr	r1, [r6, #0]
 80092f6:	f00a f8f2 	bl	80134de <memcpy>
 80092fa:	3401      	adds	r4, #1
 80092fc:	f149 0900 	adc.w	r9, r9, #0
 8009300:	45c8      	cmp	r8, r9
 8009302:	bf08      	it	eq
 8009304:	42a5      	cmpeq	r5, r4
 8009306:	d02b      	beq.n	8009360 <rcl_init+0x164>
 8009308:	f8d7 a000 	ldr.w	sl, [r7]
 800930c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8009310:	f7f6 ff70 	bl	80001f4 <strlen>
 8009314:	1c42      	adds	r2, r0, #1
 8009316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009318:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800931a:	f8da a020 	ldr.w	sl, [sl, #32]
 800931e:	9201      	str	r2, [sp, #4]
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009332:	2800      	cmp	r0, #0
 8009334:	d1de      	bne.n	80092f4 <rcl_init+0xf8>
 8009336:	240a      	movs	r4, #10
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff feff 	bl	800913c <__cleanup_context>
 800933e:	4620      	mov	r0, r4
 8009340:	b01e      	add	sp, #120	@ 0x78
 8009342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009346:	2900      	cmp	r1, #0
 8009348:	f43f af71 	beq.w	800922e <rcl_init+0x32>
 800934c:	240b      	movs	r4, #11
 800934e:	4620      	mov	r0, r4
 8009350:	b01e      	add	sp, #120	@ 0x78
 8009352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009356:	2464      	movs	r4, #100	@ 0x64
 8009358:	4620      	mov	r0, r4
 800935a:	b01e      	add	sp, #120	@ 0x78
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	f8d7 9000 	ldr.w	r9, [r7]
 8009364:	4926      	ldr	r1, [pc, #152]	@ (8009400 <rcl_init+0x204>)
 8009366:	680b      	ldr	r3, [r1, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	d036      	beq.n	80093da <rcl_init+0x1de>
 800936c:	600b      	str	r3, [r1, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	2400      	movs	r4, #0
 8009372:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800937a:	3301      	adds	r3, #1
 800937c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8009380:	d034      	beq.n	80093ec <rcl_init+0x1f0>
 8009382:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009386:	b93b      	cbnz	r3, 8009398 <rcl_init+0x19c>
 8009388:	3030      	adds	r0, #48	@ 0x30
 800938a:	f000 f939 	bl	8009600 <rcl_get_localhost_only>
 800938e:	4604      	mov	r4, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	d1d1      	bne.n	8009338 <rcl_init+0x13c>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	6958      	ldr	r0, [r3, #20]
 8009398:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800939a:	aa18      	add	r2, sp, #96	@ 0x60
 800939c:	a917      	add	r1, sp, #92	@ 0x5c
 800939e:	f001 f841 	bl	800a424 <rcl_validate_enclave_name>
 80093a2:	4604      	mov	r4, r0
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d1c7      	bne.n	8009338 <rcl_init+0x13c>
 80093a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093aa:	b9eb      	cbnz	r3, 80093e8 <rcl_init+0x1ec>
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	694b      	ldr	r3, [r1, #20]
 80093b0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80093b2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80093b6:	f000 fc3d 	bl	8009c34 <rcl_get_security_options_from_environment>
 80093ba:	4604      	mov	r4, r0
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1bb      	bne.n	8009338 <rcl_init+0x13c>
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6948      	ldr	r0, [r1, #20]
 80093c4:	3128      	adds	r1, #40	@ 0x28
 80093c6:	3018      	adds	r0, #24
 80093c8:	f003 f9b0 	bl	800c72c <rmw_init>
 80093cc:	4604      	mov	r4, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d0bd      	beq.n	800934e <rcl_init+0x152>
 80093d2:	f007 ff3b 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 80093d6:	4604      	mov	r4, r0
 80093d8:	e7ae      	b.n	8009338 <rcl_init+0x13c>
 80093da:	2201      	movs	r2, #1
 80093dc:	461c      	mov	r4, r3
 80093de:	600a      	str	r2, [r1, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	e7c6      	b.n	8009372 <rcl_init+0x176>
 80093e4:	240a      	movs	r4, #10
 80093e6:	e7b2      	b.n	800934e <rcl_init+0x152>
 80093e8:	2401      	movs	r4, #1
 80093ea:	e7a5      	b.n	8009338 <rcl_init+0x13c>
 80093ec:	3024      	adds	r0, #36	@ 0x24
 80093ee:	f007 ff41 	bl	8011274 <rcl_get_default_domain_id>
 80093f2:	4604      	mov	r4, r0
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d19f      	bne.n	8009338 <rcl_init+0x13c>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	6958      	ldr	r0, [r3, #20]
 80093fc:	e7c1      	b.n	8009382 <rcl_init+0x186>
 80093fe:	bf00      	nop
 8009400:	20008ff0 	.word	0x20008ff0

08009404 <rcl_get_zero_initialized_init_options>:
 8009404:	2000      	movs	r0, #0
 8009406:	4770      	bx	lr

08009408 <rcl_init_options_init>:
 8009408:	b084      	sub	sp, #16
 800940a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940c:	b097      	sub	sp, #92	@ 0x5c
 800940e:	ae1d      	add	r6, sp, #116	@ 0x74
 8009410:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009414:	2800      	cmp	r0, #0
 8009416:	d058      	beq.n	80094ca <rcl_init_options_init+0xc2>
 8009418:	6803      	ldr	r3, [r0, #0]
 800941a:	4605      	mov	r5, r0
 800941c:	b133      	cbz	r3, 800942c <rcl_init_options_init+0x24>
 800941e:	2464      	movs	r4, #100	@ 0x64
 8009420:	4620      	mov	r0, r4
 8009422:	b017      	add	sp, #92	@ 0x5c
 8009424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009428:	b004      	add	sp, #16
 800942a:	4770      	bx	lr
 800942c:	4630      	mov	r0, r6
 800942e:	f7fe fc9f 	bl	8007d70 <rcutils_allocator_is_valid>
 8009432:	2800      	cmp	r0, #0
 8009434:	d049      	beq.n	80094ca <rcl_init_options_init+0xc2>
 8009436:	46b4      	mov	ip, r6
 8009438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800943c:	ac11      	add	r4, sp, #68	@ 0x44
 800943e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009440:	f8dc 3000 	ldr.w	r3, [ip]
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009448:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800944a:	2050      	movs	r0, #80	@ 0x50
 800944c:	4798      	blx	r3
 800944e:	4604      	mov	r4, r0
 8009450:	6028      	str	r0, [r5, #0]
 8009452:	2800      	cmp	r0, #0
 8009454:	d03b      	beq.n	80094ce <rcl_init_options_init+0xc6>
 8009456:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800945a:	4686      	mov	lr, r0
 800945c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009460:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009464:	f8dc 3000 	ldr.w	r3, [ip]
 8009468:	f8ce 3000 	str.w	r3, [lr]
 800946c:	a802      	add	r0, sp, #8
 800946e:	f002 fe9f 	bl	800c1b0 <rmw_get_zero_initialized_init_options>
 8009472:	f10d 0e08 	add.w	lr, sp, #8
 8009476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800947a:	f104 0c18 	add.w	ip, r4, #24
 800947e:	682f      	ldr	r7, [r5, #0]
 8009480:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009484:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800948c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009494:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009498:	ac20      	add	r4, sp, #128	@ 0x80
 800949a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800949e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80094a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80094aa:	f107 0018 	add.w	r0, r7, #24
 80094ae:	f003 f845 	bl	800c53c <rmw_init_options_init>
 80094b2:	4604      	mov	r4, r0
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0b3      	beq.n	8009420 <rcl_init_options_init+0x18>
 80094b8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80094ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80094bc:	6828      	ldr	r0, [r5, #0]
 80094be:	4798      	blx	r3
 80094c0:	4620      	mov	r0, r4
 80094c2:	f007 fec3 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 80094c6:	4604      	mov	r4, r0
 80094c8:	e7aa      	b.n	8009420 <rcl_init_options_init+0x18>
 80094ca:	240b      	movs	r4, #11
 80094cc:	e7a8      	b.n	8009420 <rcl_init_options_init+0x18>
 80094ce:	240a      	movs	r4, #10
 80094d0:	e7a6      	b.n	8009420 <rcl_init_options_init+0x18>
 80094d2:	bf00      	nop

080094d4 <rcl_init_options_fini>:
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	b087      	sub	sp, #28
 80094d8:	b1f0      	cbz	r0, 8009518 <rcl_init_options_fini+0x44>
 80094da:	6803      	ldr	r3, [r0, #0]
 80094dc:	4604      	mov	r4, r0
 80094de:	b1db      	cbz	r3, 8009518 <rcl_init_options_fini+0x44>
 80094e0:	469c      	mov	ip, r3
 80094e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094e6:	f10d 0e04 	add.w	lr, sp, #4
 80094ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094ee:	f8dc 3000 	ldr.w	r3, [ip]
 80094f2:	f8ce 3000 	str.w	r3, [lr]
 80094f6:	a801      	add	r0, sp, #4
 80094f8:	f7fe fc3a 	bl	8007d70 <rcutils_allocator_is_valid>
 80094fc:	b160      	cbz	r0, 8009518 <rcl_init_options_fini+0x44>
 80094fe:	6820      	ldr	r0, [r4, #0]
 8009500:	3018      	adds	r0, #24
 8009502:	f003 f8cb 	bl	800c69c <rmw_init_options_fini>
 8009506:	4605      	mov	r5, r0
 8009508:	b950      	cbnz	r0, 8009520 <rcl_init_options_fini+0x4c>
 800950a:	6820      	ldr	r0, [r4, #0]
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	9905      	ldr	r1, [sp, #20]
 8009510:	4798      	blx	r3
 8009512:	4628      	mov	r0, r5
 8009514:	b007      	add	sp, #28
 8009516:	bd30      	pop	{r4, r5, pc}
 8009518:	250b      	movs	r5, #11
 800951a:	4628      	mov	r0, r5
 800951c:	b007      	add	sp, #28
 800951e:	bd30      	pop	{r4, r5, pc}
 8009520:	f007 fe94 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 8009524:	4605      	mov	r5, r0
 8009526:	e7f8      	b.n	800951a <rcl_init_options_fini+0x46>

08009528 <rcl_init_options_copy>:
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	b094      	sub	sp, #80	@ 0x50
 800952e:	2800      	cmp	r0, #0
 8009530:	d058      	beq.n	80095e4 <rcl_init_options_copy+0xbc>
 8009532:	4604      	mov	r4, r0
 8009534:	6800      	ldr	r0, [r0, #0]
 8009536:	2800      	cmp	r0, #0
 8009538:	d054      	beq.n	80095e4 <rcl_init_options_copy+0xbc>
 800953a:	460e      	mov	r6, r1
 800953c:	f7fe fc18 	bl	8007d70 <rcutils_allocator_is_valid>
 8009540:	2800      	cmp	r0, #0
 8009542:	d04f      	beq.n	80095e4 <rcl_init_options_copy+0xbc>
 8009544:	2e00      	cmp	r6, #0
 8009546:	d04d      	beq.n	80095e4 <rcl_init_options_copy+0xbc>
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	b123      	cbz	r3, 8009556 <rcl_init_options_copy+0x2e>
 800954c:	2464      	movs	r4, #100	@ 0x64
 800954e:	4620      	mov	r0, r4
 8009550:	b014      	add	sp, #80	@ 0x50
 8009552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009556:	6827      	ldr	r7, [r4, #0]
 8009558:	46bc      	mov	ip, r7
 800955a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800955e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009562:	f8dc 3000 	ldr.w	r3, [ip]
 8009566:	f8d7 8000 	ldr.w	r8, [r7]
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	4619      	mov	r1, r3
 800956e:	2050      	movs	r0, #80	@ 0x50
 8009570:	47c0      	blx	r8
 8009572:	4605      	mov	r5, r0
 8009574:	6030      	str	r0, [r6, #0]
 8009576:	b3d0      	cbz	r0, 80095ee <rcl_init_options_copy+0xc6>
 8009578:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800957c:	4686      	mov	lr, r0
 800957e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009582:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009586:	f8dc 3000 	ldr.w	r3, [ip]
 800958a:	f8ce 3000 	str.w	r3, [lr]
 800958e:	4668      	mov	r0, sp
 8009590:	f002 fe0e 	bl	800c1b0 <rmw_get_zero_initialized_init_options>
 8009594:	46ee      	mov	lr, sp
 8009596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800959a:	f105 0c18 	add.w	ip, r5, #24
 800959e:	6824      	ldr	r4, [r4, #0]
 80095a0:	6835      	ldr	r5, [r6, #0]
 80095a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095b6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80095ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 80095be:	f104 0018 	add.w	r0, r4, #24
 80095c2:	f105 0118 	add.w	r1, r5, #24
 80095c6:	f003 f821 	bl	800c60c <rmw_init_options_copy>
 80095ca:	4604      	mov	r4, r0
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0be      	beq.n	800954e <rcl_init_options_copy+0x26>
 80095d0:	f7fe fbdc 	bl	8007d8c <rcutils_get_error_string>
 80095d4:	f7fe fbf0 	bl	8007db8 <rcutils_reset_error>
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff ff7b 	bl	80094d4 <rcl_init_options_fini>
 80095de:	b140      	cbz	r0, 80095f2 <rcl_init_options_copy+0xca>
 80095e0:	4604      	mov	r4, r0
 80095e2:	e7b4      	b.n	800954e <rcl_init_options_copy+0x26>
 80095e4:	240b      	movs	r4, #11
 80095e6:	4620      	mov	r0, r4
 80095e8:	b014      	add	sp, #80	@ 0x50
 80095ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ee:	240a      	movs	r4, #10
 80095f0:	e7ad      	b.n	800954e <rcl_init_options_copy+0x26>
 80095f2:	4620      	mov	r0, r4
 80095f4:	b014      	add	sp, #80	@ 0x50
 80095f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095fa:	f007 be27 	b.w	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 80095fe:	bf00      	nop

08009600 <rcl_get_localhost_only>:
 8009600:	b510      	push	{r4, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	2300      	movs	r3, #0
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	b1b8      	cbz	r0, 800963a <rcl_get_localhost_only+0x3a>
 800960a:	4604      	mov	r4, r0
 800960c:	a901      	add	r1, sp, #4
 800960e:	480c      	ldr	r0, [pc, #48]	@ (8009640 <rcl_get_localhost_only+0x40>)
 8009610:	f002 fb12 	bl	800bc38 <rcutils_get_env>
 8009614:	b110      	cbz	r0, 800961c <rcl_get_localhost_only+0x1c>
 8009616:	2001      	movs	r0, #1
 8009618:	b002      	add	sp, #8
 800961a:	bd10      	pop	{r4, pc}
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	b113      	cbz	r3, 8009626 <rcl_get_localhost_only+0x26>
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	2a31      	cmp	r2, #49	@ 0x31
 8009624:	d004      	beq.n	8009630 <rcl_get_localhost_only+0x30>
 8009626:	2302      	movs	r3, #2
 8009628:	2000      	movs	r0, #0
 800962a:	7023      	strb	r3, [r4, #0]
 800962c:	b002      	add	sp, #8
 800962e:	bd10      	pop	{r4, pc}
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f7      	bne.n	8009626 <rcl_get_localhost_only+0x26>
 8009636:	2301      	movs	r3, #1
 8009638:	e7f6      	b.n	8009628 <rcl_get_localhost_only+0x28>
 800963a:	200b      	movs	r0, #11
 800963c:	b002      	add	sp, #8
 800963e:	bd10      	pop	{r4, pc}
 8009640:	080145d4 	.word	0x080145d4

08009644 <rcl_get_zero_initialized_node>:
 8009644:	4a03      	ldr	r2, [pc, #12]	@ (8009654 <rcl_get_zero_initialized_node+0x10>)
 8009646:	4603      	mov	r3, r0
 8009648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800964c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009650:	4618      	mov	r0, r3
 8009652:	4770      	bx	lr
 8009654:	08014604 	.word	0x08014604

08009658 <rcl_node_init>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	b0a9      	sub	sp, #164	@ 0xa4
 800965e:	4604      	mov	r4, r0
 8009660:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8009664:	a823      	add	r0, sp, #140	@ 0x8c
 8009666:	460e      	mov	r6, r1
 8009668:	4615      	mov	r5, r2
 800966a:	461f      	mov	r7, r3
 800966c:	f008 f82a 	bl	80116c4 <rcl_guard_condition_get_default_options>
 8009670:	f1b8 0f00 	cmp.w	r8, #0
 8009674:	f000 80e6 	beq.w	8009844 <rcl_node_init+0x1ec>
 8009678:	4640      	mov	r0, r8
 800967a:	f7fe fb79 	bl	8007d70 <rcutils_allocator_is_valid>
 800967e:	2800      	cmp	r0, #0
 8009680:	f000 80e0 	beq.w	8009844 <rcl_node_init+0x1ec>
 8009684:	2e00      	cmp	r6, #0
 8009686:	f000 80dd 	beq.w	8009844 <rcl_node_init+0x1ec>
 800968a:	2d00      	cmp	r5, #0
 800968c:	f000 80da 	beq.w	8009844 <rcl_node_init+0x1ec>
 8009690:	2c00      	cmp	r4, #0
 8009692:	f000 80d7 	beq.w	8009844 <rcl_node_init+0x1ec>
 8009696:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800969a:	f1b9 0f00 	cmp.w	r9, #0
 800969e:	f040 80fd 	bne.w	800989c <rcl_node_init+0x244>
 80096a2:	2f00      	cmp	r7, #0
 80096a4:	f000 80ce 	beq.w	8009844 <rcl_node_init+0x1ec>
 80096a8:	4638      	mov	r0, r7
 80096aa:	f7ff fd41 	bl	8009130 <rcl_context_is_valid>
 80096ae:	4682      	mov	sl, r0
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f000 80cd 	beq.w	8009850 <rcl_node_init+0x1f8>
 80096b6:	464a      	mov	r2, r9
 80096b8:	a922      	add	r1, sp, #136	@ 0x88
 80096ba:	4630      	mov	r0, r6
 80096bc:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80096c0:	f002 fe94 	bl	800c3ec <rmw_validate_node_name>
 80096c4:	4681      	mov	r9, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f040 80be 	bne.w	8009848 <rcl_node_init+0x1f0>
 80096cc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f040 80f0 	bne.w	80098b4 <rcl_node_init+0x25c>
 80096d4:	4628      	mov	r0, r5
 80096d6:	f7f6 fd8d 	bl	80001f4 <strlen>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f040 80bb 	bne.w	8009856 <rcl_node_init+0x1fe>
 80096e0:	4d7c      	ldr	r5, [pc, #496]	@ (80098d4 <rcl_node_init+0x27c>)
 80096e2:	a922      	add	r1, sp, #136	@ 0x88
 80096e4:	2200      	movs	r2, #0
 80096e6:	4628      	mov	r0, r5
 80096e8:	f002 fe62 	bl	800c3b0 <rmw_validate_namespace>
 80096ec:	4681      	mov	r9, r0
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f040 80aa 	bne.w	8009848 <rcl_node_init+0x1f0>
 80096f4:	4682      	mov	sl, r0
 80096f6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f040 80e0 	bne.w	80098be <rcl_node_init+0x266>
 80096fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009706:	2078      	movs	r0, #120	@ 0x78
 8009708:	4798      	blx	r3
 800970a:	4681      	mov	r9, r0
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	2800      	cmp	r0, #0
 8009710:	f000 80ca 	beq.w	80098a8 <rcl_node_init+0x250>
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800971c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8009720:	a808      	add	r0, sp, #32
 8009722:	f000 f907 	bl	8009934 <rcl_node_get_default_options>
 8009726:	a908      	add	r1, sp, #32
 8009728:	4648      	mov	r0, r9
 800972a:	2268      	movs	r2, #104	@ 0x68
 800972c:	f009 fed7 	bl	80134de <memcpy>
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	6027      	str	r7, [r4, #0]
 8009734:	4640      	mov	r0, r8
 8009736:	f000 f90b 	bl	8009950 <rcl_node_options_copy>
 800973a:	2800      	cmp	r0, #0
 800973c:	d158      	bne.n	80097f0 <rcl_node_init+0x198>
 800973e:	4628      	mov	r0, r5
 8009740:	f7f6 fd58 	bl	80001f4 <strlen>
 8009744:	4428      	add	r0, r5
 8009746:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800974a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800974e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009750:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	bf0c      	ite	eq
 8009758:	4b5f      	ldreq	r3, [pc, #380]	@ (80098d8 <rcl_node_init+0x280>)
 800975a:	4b60      	ldrne	r3, [pc, #384]	@ (80098dc <rcl_node_init+0x284>)
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009768:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800976c:	f002 fa8c 	bl	800bc88 <rcutils_format_string_limit>
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	4631      	mov	r1, r6
 800977a:	3028      	adds	r0, #40	@ 0x28
 800977c:	462a      	mov	r2, r5
 800977e:	6866      	ldr	r6, [r4, #4]
 8009780:	f003 f9b6 	bl	800caf0 <rmw_create_node>
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	66b0      	str	r0, [r6, #104]	@ 0x68
 8009788:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800978a:	2800      	cmp	r0, #0
 800978c:	d032      	beq.n	80097f4 <rcl_node_init+0x19c>
 800978e:	f003 fa43 	bl	800cc18 <rmw_node_get_graph_guard_condition>
 8009792:	4681      	mov	r9, r0
 8009794:	b360      	cbz	r0, 80097f0 <rcl_node_init+0x198>
 8009796:	f8d8 3000 	ldr.w	r3, [r8]
 800979a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800979e:	6866      	ldr	r6, [r4, #4]
 80097a0:	2008      	movs	r0, #8
 80097a2:	4798      	blx	r3
 80097a4:	6863      	ldr	r3, [r4, #4]
 80097a6:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80097a8:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80097ac:	f1bb 0f00 	cmp.w	fp, #0
 80097b0:	d020      	beq.n	80097f4 <rcl_node_init+0x19c>
 80097b2:	a806      	add	r0, sp, #24
 80097b4:	f007 fef6 	bl	80115a4 <rcl_get_zero_initialized_guard_condition>
 80097b8:	a806      	add	r0, sp, #24
 80097ba:	c803      	ldmia	r0, {r0, r1}
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	46c4      	mov	ip, r8
 80097c0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80097c4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80097c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80097cc:	ae23      	add	r6, sp, #140	@ 0x8c
 80097ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097d0:	f8dc 3000 	ldr.w	r3, [ip]
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	ab28      	add	r3, sp, #160	@ 0xa0
 80097d8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80097dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80097e0:	4649      	mov	r1, r9
 80097e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097e4:	463a      	mov	r2, r7
 80097e6:	4670      	mov	r0, lr
 80097e8:	f007 fee6 	bl	80115b8 <rcl_guard_condition_init_from_rmw>
 80097ec:	4681      	mov	r9, r0
 80097ee:	b328      	cbz	r0, 800983c <rcl_node_init+0x1e4>
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	b1f3      	cbz	r3, 8009832 <rcl_node_init+0x1da>
 80097f4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80097f6:	b128      	cbz	r0, 8009804 <rcl_node_init+0x1ac>
 80097f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097fc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009800:	4798      	blx	r3
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009806:	b110      	cbz	r0, 800980e <rcl_node_init+0x1b6>
 8009808:	f003 f98a 	bl	800cb20 <rmw_destroy_node>
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009810:	b148      	cbz	r0, 8009826 <rcl_node_init+0x1ce>
 8009812:	f007 ff31 	bl	8011678 <rcl_guard_condition_fini>
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800981c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800981e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009822:	4798      	blx	r3
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800982a:	4618      	mov	r0, r3
 800982c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009830:	4798      	blx	r3
 8009832:	2300      	movs	r3, #0
 8009834:	e9c4 3300 	strd	r3, r3, [r4]
 8009838:	f04f 0901 	mov.w	r9, #1
 800983c:	f1ba 0f00 	cmp.w	sl, #0
 8009840:	d125      	bne.n	800988e <rcl_node_init+0x236>
 8009842:	e001      	b.n	8009848 <rcl_node_init+0x1f0>
 8009844:	f04f 090b 	mov.w	r9, #11
 8009848:	4648      	mov	r0, r9
 800984a:	b029      	add	sp, #164	@ 0xa4
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8009854:	e7f8      	b.n	8009848 <rcl_node_init+0x1f0>
 8009856:	782b      	ldrb	r3, [r5, #0]
 8009858:	2b2f      	cmp	r3, #47	@ 0x2f
 800985a:	f43f af42 	beq.w	80096e2 <rcl_node_init+0x8a>
 800985e:	9503      	str	r5, [sp, #12]
 8009860:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	4b1e      	ldr	r3, [pc, #120]	@ (80098e0 <rcl_node_init+0x288>)
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8009874:	f002 fa08 	bl	800bc88 <rcutils_format_string_limit>
 8009878:	4605      	mov	r5, r0
 800987a:	b340      	cbz	r0, 80098ce <rcl_node_init+0x276>
 800987c:	2200      	movs	r2, #0
 800987e:	a922      	add	r1, sp, #136	@ 0x88
 8009880:	9222      	str	r2, [sp, #136]	@ 0x88
 8009882:	f002 fd95 	bl	800c3b0 <rmw_validate_namespace>
 8009886:	4681      	mov	r9, r0
 8009888:	2800      	cmp	r0, #0
 800988a:	f43f af34 	beq.w	80096f6 <rcl_node_init+0x9e>
 800988e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009892:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009896:	4628      	mov	r0, r5
 8009898:	4798      	blx	r3
 800989a:	e7d5      	b.n	8009848 <rcl_node_init+0x1f0>
 800989c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80098a0:	4648      	mov	r0, r9
 80098a2:	b029      	add	sp, #164	@ 0xa4
 80098a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a8:	f04f 090a 	mov.w	r9, #10
 80098ac:	f1ba 0f00 	cmp.w	sl, #0
 80098b0:	d1ed      	bne.n	800988e <rcl_node_init+0x236>
 80098b2:	e7c9      	b.n	8009848 <rcl_node_init+0x1f0>
 80098b4:	f002 fdec 	bl	800c490 <rmw_node_name_validation_result_string>
 80098b8:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80098bc:	e7c4      	b.n	8009848 <rcl_node_init+0x1f0>
 80098be:	f002 fd89 	bl	800c3d4 <rmw_namespace_validation_result_string>
 80098c2:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80098c6:	f1ba 0f00 	cmp.w	sl, #0
 80098ca:	d1e0      	bne.n	800988e <rcl_node_init+0x236>
 80098cc:	e7bc      	b.n	8009848 <rcl_node_init+0x1f0>
 80098ce:	f04f 090a 	mov.w	r9, #10
 80098d2:	e7b9      	b.n	8009848 <rcl_node_init+0x1f0>
 80098d4:	080145ec 	.word	0x080145ec
 80098d8:	080145f4 	.word	0x080145f4
 80098dc:	080145fc 	.word	0x080145fc
 80098e0:	080145f0 	.word	0x080145f0

080098e4 <rcl_node_is_valid>:
 80098e4:	b130      	cbz	r0, 80098f4 <rcl_node_is_valid+0x10>
 80098e6:	6843      	ldr	r3, [r0, #4]
 80098e8:	b123      	cbz	r3, 80098f4 <rcl_node_is_valid+0x10>
 80098ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098ec:	b113      	cbz	r3, 80098f4 <rcl_node_is_valid+0x10>
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	f7ff bc1e 	b.w	8009130 <rcl_context_is_valid>
 80098f4:	2000      	movs	r0, #0
 80098f6:	4770      	bx	lr

080098f8 <rcl_node_get_name>:
 80098f8:	b120      	cbz	r0, 8009904 <rcl_node_get_name+0xc>
 80098fa:	6840      	ldr	r0, [r0, #4]
 80098fc:	b110      	cbz	r0, 8009904 <rcl_node_get_name+0xc>
 80098fe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8009900:	b100      	cbz	r0, 8009904 <rcl_node_get_name+0xc>
 8009902:	6880      	ldr	r0, [r0, #8]
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop

08009908 <rcl_node_get_namespace>:
 8009908:	b120      	cbz	r0, 8009914 <rcl_node_get_namespace+0xc>
 800990a:	6840      	ldr	r0, [r0, #4]
 800990c:	b110      	cbz	r0, 8009914 <rcl_node_get_namespace+0xc>
 800990e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8009910:	b100      	cbz	r0, 8009914 <rcl_node_get_namespace+0xc>
 8009912:	68c0      	ldr	r0, [r0, #12]
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop

08009918 <rcl_node_get_options>:
 8009918:	b128      	cbz	r0, 8009926 <rcl_node_get_options+0xe>
 800991a:	6840      	ldr	r0, [r0, #4]
 800991c:	b118      	cbz	r0, 8009926 <rcl_node_get_options+0xe>
 800991e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8009920:	2b00      	cmp	r3, #0
 8009922:	bf08      	it	eq
 8009924:	2000      	moveq	r0, #0
 8009926:	4770      	bx	lr

08009928 <rcl_node_get_rmw_handle>:
 8009928:	b110      	cbz	r0, 8009930 <rcl_node_get_rmw_handle+0x8>
 800992a:	6840      	ldr	r0, [r0, #4]
 800992c:	b100      	cbz	r0, 8009930 <rcl_node_get_rmw_handle+0x8>
 800992e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop

08009934 <rcl_node_get_default_options>:
 8009934:	b510      	push	{r4, lr}
 8009936:	2268      	movs	r2, #104	@ 0x68
 8009938:	4604      	mov	r4, r0
 800993a:	2100      	movs	r1, #0
 800993c:	f009 fd06 	bl	801334c <memset>
 8009940:	4620      	mov	r0, r4
 8009942:	f7fe fa07 	bl	8007d54 <rcutils_get_default_allocator>
 8009946:	2301      	movs	r3, #1
 8009948:	7523      	strb	r3, [r4, #20]
 800994a:	4620      	mov	r0, r4
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop

08009950 <rcl_node_options_copy>:
 8009950:	b1d0      	cbz	r0, 8009988 <rcl_node_options_copy+0x38>
 8009952:	b570      	push	{r4, r5, r6, lr}
 8009954:	460c      	mov	r4, r1
 8009956:	b1a9      	cbz	r1, 8009984 <rcl_node_options_copy+0x34>
 8009958:	4288      	cmp	r0, r1
 800995a:	4684      	mov	ip, r0
 800995c:	d012      	beq.n	8009984 <rcl_node_options_copy+0x34>
 800995e:	4605      	mov	r5, r0
 8009960:	8a86      	ldrh	r6, [r0, #20]
 8009962:	468e      	mov	lr, r1
 8009964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009966:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	f8ce 3000 	str.w	r3, [lr]
 8009970:	f10c 0118 	add.w	r1, ip, #24
 8009974:	2250      	movs	r2, #80	@ 0x50
 8009976:	82a6      	strh	r6, [r4, #20]
 8009978:	f104 0018 	add.w	r0, r4, #24
 800997c:	f009 fdaf 	bl	80134de <memcpy>
 8009980:	2000      	movs	r0, #0
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	200b      	movs	r0, #11
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	200b      	movs	r0, #11
 800998a:	4770      	bx	lr

0800998c <rcl_node_resolve_name>:
 800998c:	b082      	sub	sp, #8
 800998e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009992:	b091      	sub	sp, #68	@ 0x44
 8009994:	ac1a      	add	r4, sp, #104	@ 0x68
 8009996:	e884 000c 	stmia.w	r4, {r2, r3}
 800999a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800999e:	2800      	cmp	r0, #0
 80099a0:	d03b      	beq.n	8009a1a <rcl_node_resolve_name+0x8e>
 80099a2:	460c      	mov	r4, r1
 80099a4:	4605      	mov	r5, r0
 80099a6:	f7ff ffb7 	bl	8009918 <rcl_node_get_options>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d037      	beq.n	8009a1e <rcl_node_resolve_name+0x92>
 80099ae:	4628      	mov	r0, r5
 80099b0:	f7ff ffa2 	bl	80098f8 <rcl_node_get_name>
 80099b4:	4606      	mov	r6, r0
 80099b6:	4628      	mov	r0, r5
 80099b8:	f7ff ffa6 	bl	8009908 <rcl_node_get_namespace>
 80099bc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80099c0:	4681      	mov	r9, r0
 80099c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80099c6:	ad0b      	add	r5, sp, #44	@ 0x2c
 80099c8:	46ac      	mov	ip, r5
 80099ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099ce:	f8de 3000 	ldr.w	r3, [lr]
 80099d2:	f8cc 3000 	str.w	r3, [ip]
 80099d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099d8:	b1fb      	cbz	r3, 8009a1a <rcl_node_resolve_name+0x8e>
 80099da:	468a      	mov	sl, r1
 80099dc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80099e0:	f002 faaa 	bl	800bf38 <rcutils_get_zero_initialized_string_map>
 80099e4:	ab10      	add	r3, sp, #64	@ 0x40
 80099e6:	9008      	str	r0, [sp, #32]
 80099e8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80099ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80099f0:	2100      	movs	r1, #0
 80099f2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80099f6:	a808      	add	r0, sp, #32
 80099f8:	f002 fb16 	bl	800c028 <rcutils_string_map_init>
 80099fc:	4607      	mov	r7, r0
 80099fe:	b180      	cbz	r0, 8009a22 <rcl_node_resolve_name+0x96>
 8009a00:	f7fe f9c4 	bl	8007d8c <rcutils_get_error_string>
 8009a04:	f7fe f9d8 	bl	8007db8 <rcutils_reset_error>
 8009a08:	2f0a      	cmp	r7, #10
 8009a0a:	bf18      	it	ne
 8009a0c:	2701      	movne	r7, #1
 8009a0e:	4638      	mov	r0, r7
 8009a10:	b011      	add	sp, #68	@ 0x44
 8009a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a16:	b002      	add	sp, #8
 8009a18:	4770      	bx	lr
 8009a1a:	270b      	movs	r7, #11
 8009a1c:	e7f7      	b.n	8009a0e <rcl_node_resolve_name+0x82>
 8009a1e:	2701      	movs	r7, #1
 8009a20:	e7f5      	b.n	8009a0e <rcl_node_resolve_name+0x82>
 8009a22:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a24:	9007      	str	r0, [sp, #28]
 8009a26:	a808      	add	r0, sp, #32
 8009a28:	f007 fdb6 	bl	8011598 <rcl_get_default_topic_name_substitutions>
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	b1a8      	cbz	r0, 8009a5c <rcl_node_resolve_name+0xd0>
 8009a30:	280a      	cmp	r0, #10
 8009a32:	9c07      	ldr	r4, [sp, #28]
 8009a34:	d000      	beq.n	8009a38 <rcl_node_resolve_name+0xac>
 8009a36:	2701      	movs	r7, #1
 8009a38:	a808      	add	r0, sp, #32
 8009a3a:	f002 fb35 	bl	800c0a8 <rcutils_string_map_fini>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d13d      	bne.n	8009abe <rcl_node_resolve_name+0x132>
 8009a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a44:	4659      	mov	r1, fp
 8009a46:	47d0      	blx	sl
 8009a48:	4659      	mov	r1, fp
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	47d0      	blx	sl
 8009a4e:	f1b8 0f00 	cmp.w	r8, #0
 8009a52:	d0dc      	beq.n	8009a0e <rcl_node_resolve_name+0x82>
 8009a54:	2f67      	cmp	r7, #103	@ 0x67
 8009a56:	bf08      	it	eq
 8009a58:	2768      	moveq	r7, #104	@ 0x68
 8009a5a:	e7d8      	b.n	8009a0e <rcl_node_resolve_name+0x82>
 8009a5c:	ab09      	add	r3, sp, #36	@ 0x24
 8009a5e:	9305      	str	r3, [sp, #20]
 8009a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a62:	46ec      	mov	ip, sp
 8009a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	f8cc 3000 	str.w	r3, [ip]
 8009a6e:	464a      	mov	r2, r9
 8009a70:	4631      	mov	r1, r6
 8009a72:	4620      	mov	r0, r4
 8009a74:	ab08      	add	r3, sp, #32
 8009a76:	f007 fc31 	bl	80112dc <rcl_expand_topic_name>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	b9b8      	cbnz	r0, 8009aae <rcl_node_resolve_name+0x122>
 8009a7e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8009a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a82:	4602      	mov	r2, r0
 8009a84:	a90a      	add	r1, sp, #40	@ 0x28
 8009a86:	4620      	mov	r0, r4
 8009a88:	f002 fbce 	bl	800c228 <rmw_validate_full_topic_name>
 8009a8c:	b988      	cbnz	r0, 8009ab2 <rcl_node_resolve_name+0x126>
 8009a8e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009a90:	b9d5      	cbnz	r5, 8009ac8 <rcl_node_resolve_name+0x13c>
 8009a92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a94:	a808      	add	r0, sp, #32
 8009a96:	601c      	str	r4, [r3, #0]
 8009a98:	f002 fb06 	bl	800c0a8 <rcutils_string_map_fini>
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	b1a8      	cbz	r0, 8009acc <rcl_node_resolve_name+0x140>
 8009aa0:	f7fe f974 	bl	8007d8c <rcutils_get_error_string>
 8009aa4:	462c      	mov	r4, r5
 8009aa6:	f7fe f987 	bl	8007db8 <rcutils_reset_error>
 8009aaa:	2701      	movs	r7, #1
 8009aac:	e7c9      	b.n	8009a42 <rcl_node_resolve_name+0xb6>
 8009aae:	9c07      	ldr	r4, [sp, #28]
 8009ab0:	e7c2      	b.n	8009a38 <rcl_node_resolve_name+0xac>
 8009ab2:	f7fe f96b 	bl	8007d8c <rcutils_get_error_string>
 8009ab6:	2701      	movs	r7, #1
 8009ab8:	f7fe f97e 	bl	8007db8 <rcutils_reset_error>
 8009abc:	e7bc      	b.n	8009a38 <rcl_node_resolve_name+0xac>
 8009abe:	f7fe f965 	bl	8007d8c <rcutils_get_error_string>
 8009ac2:	f7fe f979 	bl	8007db8 <rcutils_reset_error>
 8009ac6:	e7bc      	b.n	8009a42 <rcl_node_resolve_name+0xb6>
 8009ac8:	2767      	movs	r7, #103	@ 0x67
 8009aca:	e7b5      	b.n	8009a38 <rcl_node_resolve_name+0xac>
 8009acc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ace:	4659      	mov	r1, fp
 8009ad0:	47d0      	blx	sl
 8009ad2:	4659      	mov	r1, fp
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	47d0      	blx	sl
 8009ad8:	e799      	b.n	8009a0e <rcl_node_resolve_name+0x82>
 8009ada:	bf00      	nop

08009adc <exact_match_lookup>:
 8009adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ade:	f102 0708 	add.w	r7, r2, #8
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009aec:	b085      	sub	sp, #20
 8009aee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009af2:	4618      	mov	r0, r3
 8009af4:	4919      	ldr	r1, [pc, #100]	@ (8009b5c <exact_match_lookup+0x80>)
 8009af6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009afa:	f002 f8b7 	bl	800bc6c <rcutils_join_path>
 8009afe:	7833      	ldrb	r3, [r6, #0]
 8009b00:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b02:	4605      	mov	r5, r0
 8009b04:	d023      	beq.n	8009b4e <exact_match_lookup+0x72>
 8009b06:	f104 030c 	add.w	r3, r4, #12
 8009b0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009b12:	1c70      	adds	r0, r6, #1
 8009b14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009b18:	f002 f8ae 	bl	800bc78 <rcutils_to_native_path>
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009b22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009b26:	4631      	mov	r1, r6
 8009b28:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f002 f89d 	bl	800bc6c <rcutils_join_path>
 8009b32:	6862      	ldr	r2, [r4, #4]
 8009b34:	6921      	ldr	r1, [r4, #16]
 8009b36:	4603      	mov	r3, r0
 8009b38:	4630      	mov	r0, r6
 8009b3a:	461e      	mov	r6, r3
 8009b3c:	4790      	blx	r2
 8009b3e:	4628      	mov	r0, r5
 8009b40:	6863      	ldr	r3, [r4, #4]
 8009b42:	6921      	ldr	r1, [r4, #16]
 8009b44:	4798      	blx	r3
 8009b46:	4635      	mov	r5, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	b005      	add	sp, #20
 8009b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4e:	7873      	ldrb	r3, [r6, #1]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1d8      	bne.n	8009b06 <exact_match_lookup+0x2a>
 8009b54:	4628      	mov	r0, r5
 8009b56:	b005      	add	sp, #20
 8009b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	08014648 	.word	0x08014648

08009b60 <rcl_get_secure_root>:
 8009b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b64:	b085      	sub	sp, #20
 8009b66:	b168      	cbz	r0, 8009b84 <rcl_get_secure_root+0x24>
 8009b68:	4607      	mov	r7, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	f7fe f8ff 	bl	8007d70 <rcutils_allocator_is_valid>
 8009b72:	b138      	cbz	r0, 8009b84 <rcl_get_secure_root+0x24>
 8009b74:	2300      	movs	r3, #0
 8009b76:	482d      	ldr	r0, [pc, #180]	@ (8009c2c <rcl_get_secure_root+0xcc>)
 8009b78:	9303      	str	r3, [sp, #12]
 8009b7a:	a903      	add	r1, sp, #12
 8009b7c:	f002 f85c 	bl	800bc38 <rcutils_get_env>
 8009b80:	4605      	mov	r5, r0
 8009b82:	b120      	cbz	r0, 8009b8e <rcl_get_secure_root+0x2e>
 8009b84:	2500      	movs	r5, #0
 8009b86:	4628      	mov	r0, r5
 8009b88:	b005      	add	sp, #20
 8009b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	d0f6      	beq.n	8009b84 <rcl_get_secure_root+0x24>
 8009b96:	f104 090c 	add.w	r9, r4, #12
 8009b9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009b9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009ba8:	f002 f988 	bl	800bebc <rcutils_strdup>
 8009bac:	4680      	mov	r8, r0
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d0e8      	beq.n	8009b84 <rcl_get_secure_root+0x24>
 8009bb2:	481f      	ldr	r0, [pc, #124]	@ (8009c30 <rcl_get_secure_root+0xd0>)
 8009bb4:	9503      	str	r5, [sp, #12]
 8009bb6:	a903      	add	r1, sp, #12
 8009bb8:	f002 f83e 	bl	800bc38 <rcutils_get_env>
 8009bbc:	b160      	cbz	r0, 8009bd8 <rcl_get_secure_root+0x78>
 8009bbe:	2600      	movs	r6, #0
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	6921      	ldr	r1, [r4, #16]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4798      	blx	r3
 8009bc8:	4640      	mov	r0, r8
 8009bca:	6863      	ldr	r3, [r4, #4]
 8009bcc:	6921      	ldr	r1, [r4, #16]
 8009bce:	4798      	blx	r3
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	b005      	add	sp, #20
 8009bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	781e      	ldrb	r6, [r3, #0]
 8009bdc:	b1f6      	cbz	r6, 8009c1c <rcl_get_secure_root+0xbc>
 8009bde:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009be2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009be6:	4618      	mov	r0, r3
 8009be8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009bec:	f002 f966 	bl	800bebc <rcutils_strdup>
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0e3      	beq.n	8009bbe <rcl_get_secure_root+0x5e>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	f7ff ff6f 	bl	8009adc <exact_match_lookup>
 8009bfe:	4605      	mov	r5, r0
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	d0dd      	beq.n	8009bc0 <rcl_get_secure_root+0x60>
 8009c04:	4628      	mov	r0, r5
 8009c06:	f002 f82f 	bl	800bc68 <rcutils_is_directory>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1d7      	bne.n	8009bc0 <rcl_get_secure_root+0x60>
 8009c10:	4628      	mov	r0, r5
 8009c12:	6921      	ldr	r1, [r4, #16]
 8009c14:	461d      	mov	r5, r3
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	e7d1      	b.n	8009bc0 <rcl_get_secure_root+0x60>
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	4638      	mov	r0, r7
 8009c20:	4641      	mov	r1, r8
 8009c22:	f7ff ff5b 	bl	8009adc <exact_match_lookup>
 8009c26:	4605      	mov	r5, r0
 8009c28:	e7ea      	b.n	8009c00 <rcl_get_secure_root+0xa0>
 8009c2a:	bf00      	nop
 8009c2c:	08014654 	.word	0x08014654
 8009c30:	0801466c 	.word	0x0801466c

08009c34 <rcl_get_security_options_from_environment>:
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	4820      	ldr	r0, [pc, #128]	@ (8009cc4 <rcl_get_security_options_from_environment+0x90>)
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	a901      	add	r1, sp, #4
 8009c46:	4690      	mov	r8, r2
 8009c48:	f001 fff6 	bl	800bc38 <rcutils_get_env>
 8009c4c:	b120      	cbz	r0, 8009c58 <rcl_get_security_options_from_environment+0x24>
 8009c4e:	2501      	movs	r5, #1
 8009c50:	4628      	mov	r0, r5
 8009c52:	b002      	add	sp, #8
 8009c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c58:	491b      	ldr	r1, [pc, #108]	@ (8009cc8 <rcl_get_security_options_from_environment+0x94>)
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	9801      	ldr	r0, [sp, #4]
 8009c5e:	f7f6 fabf 	bl	80001e0 <strcmp>
 8009c62:	4605      	mov	r5, r0
 8009c64:	b9e8      	cbnz	r0, 8009ca2 <rcl_get_security_options_from_environment+0x6e>
 8009c66:	9001      	str	r0, [sp, #4]
 8009c68:	f1b8 0f00 	cmp.w	r8, #0
 8009c6c:	d020      	beq.n	8009cb0 <rcl_get_security_options_from_environment+0x7c>
 8009c6e:	4817      	ldr	r0, [pc, #92]	@ (8009ccc <rcl_get_security_options_from_environment+0x98>)
 8009c70:	a901      	add	r1, sp, #4
 8009c72:	f001 ffe1 	bl	800bc38 <rcutils_get_env>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d1e9      	bne.n	8009c4e <rcl_get_security_options_from_environment+0x1a>
 8009c7a:	4915      	ldr	r1, [pc, #84]	@ (8009cd0 <rcl_get_security_options_from_environment+0x9c>)
 8009c7c:	9801      	ldr	r0, [sp, #4]
 8009c7e:	f7f6 faaf 	bl	80001e0 <strcmp>
 8009c82:	fab0 f080 	clz	r0, r0
 8009c86:	0940      	lsrs	r0, r0, #5
 8009c88:	f888 0000 	strb.w	r0, [r8]
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7ff ff66 	bl	8009b60 <rcl_get_secure_root>
 8009c94:	b170      	cbz	r0, 8009cb4 <rcl_get_security_options_from_environment+0x80>
 8009c96:	f8c8 0004 	str.w	r0, [r8, #4]
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	b002      	add	sp, #8
 8009c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca2:	4625      	mov	r5, r4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f888 4000 	strb.w	r4, [r8]
 8009caa:	b002      	add	sp, #8
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	250b      	movs	r5, #11
 8009cb2:	e7cd      	b.n	8009c50 <rcl_get_security_options_from_environment+0x1c>
 8009cb4:	f898 5000 	ldrb.w	r5, [r8]
 8009cb8:	f1a5 0501 	sub.w	r5, r5, #1
 8009cbc:	fab5 f585 	clz	r5, r5
 8009cc0:	096d      	lsrs	r5, r5, #5
 8009cc2:	e7c5      	b.n	8009c50 <rcl_get_security_options_from_environment+0x1c>
 8009cc4:	0801460c 	.word	0x0801460c
 8009cc8:	08014620 	.word	0x08014620
 8009ccc:	08014628 	.word	0x08014628
 8009cd0:	08014640 	.word	0x08014640

08009cd4 <rcl_service_get_rmw_handle>:
 8009cd4:	b118      	cbz	r0, 8009cde <rcl_service_get_rmw_handle+0xa>
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	b108      	cbz	r0, 8009cde <rcl_service_get_rmw_handle+0xa>
 8009cda:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009cde:	4770      	bx	lr

08009ce0 <rcl_take_request>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	468e      	mov	lr, r1
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	4605      	mov	r5, r0
 8009cea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009cee:	b08c      	sub	sp, #48	@ 0x30
 8009cf0:	f10d 0c18 	add.w	ip, sp, #24
 8009cf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009cf8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009cfc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009d00:	b30d      	cbz	r5, 8009d46 <rcl_take_request+0x66>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b1fb      	cbz	r3, 8009d46 <rcl_take_request+0x66>
 8009d06:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8009d0a:	b1e0      	cbz	r0, 8009d46 <rcl_take_request+0x66>
 8009d0c:	b336      	cbz	r6, 8009d5c <rcl_take_request+0x7c>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f88d 3007 	strb.w	r3, [sp, #7]
 8009d14:	4632      	mov	r2, r6
 8009d16:	f10d 0307 	add.w	r3, sp, #7
 8009d1a:	a902      	add	r1, sp, #8
 8009d1c:	f003 f822 	bl	800cd64 <rmw_take_request>
 8009d20:	4605      	mov	r5, r0
 8009d22:	b198      	cbz	r0, 8009d4c <rcl_take_request+0x6c>
 8009d24:	280a      	cmp	r0, #10
 8009d26:	bf18      	it	ne
 8009d28:	2501      	movne	r5, #1
 8009d2a:	f10d 0e18 	add.w	lr, sp, #24
 8009d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009d32:	46a4      	mov	ip, r4
 8009d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009d3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009d40:	4628      	mov	r0, r5
 8009d42:	b00c      	add	sp, #48	@ 0x30
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8009d4a:	e7ee      	b.n	8009d2a <rcl_take_request+0x4a>
 8009d4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009d50:	f240 2359 	movw	r3, #601	@ 0x259
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	bf08      	it	eq
 8009d58:	461d      	moveq	r5, r3
 8009d5a:	e7e6      	b.n	8009d2a <rcl_take_request+0x4a>
 8009d5c:	250b      	movs	r5, #11
 8009d5e:	e7e4      	b.n	8009d2a <rcl_take_request+0x4a>

08009d60 <rcl_send_response>:
 8009d60:	b170      	cbz	r0, 8009d80 <rcl_send_response+0x20>
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	b160      	cbz	r0, 8009d80 <rcl_send_response+0x20>
 8009d66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009d6a:	b148      	cbz	r0, 8009d80 <rcl_send_response+0x20>
 8009d6c:	b159      	cbz	r1, 8009d86 <rcl_send_response+0x26>
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	b15a      	cbz	r2, 8009d8a <rcl_send_response+0x2a>
 8009d72:	f003 f855 	bl	800ce20 <rmw_send_response>
 8009d76:	b110      	cbz	r0, 8009d7e <rcl_send_response+0x1e>
 8009d78:	2802      	cmp	r0, #2
 8009d7a:	bf18      	it	ne
 8009d7c:	2001      	movne	r0, #1
 8009d7e:	bd10      	pop	{r4, pc}
 8009d80:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009d84:	4770      	bx	lr
 8009d86:	200b      	movs	r0, #11
 8009d88:	4770      	bx	lr
 8009d8a:	200b      	movs	r0, #11
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	bf00      	nop

08009d90 <rcl_service_is_valid>:
 8009d90:	b130      	cbz	r0, 8009da0 <rcl_service_is_valid+0x10>
 8009d92:	6800      	ldr	r0, [r0, #0]
 8009d94:	b120      	cbz	r0, 8009da0 <rcl_service_is_valid+0x10>
 8009d96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8009d9a:	3800      	subs	r0, #0
 8009d9c:	bf18      	it	ne
 8009d9e:	2001      	movne	r0, #1
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop

08009da4 <rcl_get_zero_initialized_subscription>:
 8009da4:	4b01      	ldr	r3, [pc, #4]	@ (8009dac <rcl_get_zero_initialized_subscription+0x8>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	0801468c 	.word	0x0801468c

08009db0 <rcl_subscription_init>:
 8009db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009db4:	b089      	sub	sp, #36	@ 0x24
 8009db6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009db8:	b1d6      	cbz	r6, 8009df0 <rcl_subscription_init+0x40>
 8009dba:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	4690      	mov	r8, r2
 8009dc6:	461f      	mov	r7, r3
 8009dc8:	f7fd ffd2 	bl	8007d70 <rcutils_allocator_is_valid>
 8009dcc:	b180      	cbz	r0, 8009df0 <rcl_subscription_init+0x40>
 8009dce:	b17c      	cbz	r4, 8009df0 <rcl_subscription_init+0x40>
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7ff fd87 	bl	80098e4 <rcl_node_is_valid>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d054      	beq.n	8009e84 <rcl_subscription_init+0xd4>
 8009dda:	f1b8 0f00 	cmp.w	r8, #0
 8009dde:	d007      	beq.n	8009df0 <rcl_subscription_init+0x40>
 8009de0:	b137      	cbz	r7, 8009df0 <rcl_subscription_init+0x40>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	b14b      	cbz	r3, 8009dfa <rcl_subscription_init+0x4a>
 8009de6:	2764      	movs	r7, #100	@ 0x64
 8009de8:	4638      	mov	r0, r7
 8009dea:	b009      	add	sp, #36	@ 0x24
 8009dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df0:	270b      	movs	r7, #11
 8009df2:	4638      	mov	r0, r7
 8009df4:	b009      	add	sp, #36	@ 0x24
 8009df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dfa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009dfe:	aa07      	add	r2, sp, #28
 8009e00:	9205      	str	r2, [sp, #20]
 8009e02:	9307      	str	r3, [sp, #28]
 8009e04:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8009e08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009e10:	4639      	mov	r1, r7
 8009e12:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7ff fdb8 	bl	800998c <rcl_node_resolve_name>
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d15f      	bne.n	8009ee2 <rcl_subscription_init+0x132>
 8009e22:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8009e26:	21c8      	movs	r1, #200	@ 0xc8
 8009e28:	2001      	movs	r0, #1
 8009e2a:	4798      	blx	r3
 8009e2c:	6020      	str	r0, [r4, #0]
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d05d      	beq.n	8009eee <rcl_subscription_init+0x13e>
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7ff fd78 	bl	8009928 <rcl_node_get_rmw_handle>
 8009e38:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	9a07      	ldr	r2, [sp, #28]
 8009e40:	6827      	ldr	r7, [r4, #0]
 8009e42:	4641      	mov	r1, r8
 8009e44:	4633      	mov	r3, r6
 8009e46:	f003 f8d5 	bl	800cff4 <rmw_create_subscription>
 8009e4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8009e4e:	6827      	ldr	r7, [r4, #0]
 8009e50:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8009e54:	b348      	cbz	r0, 8009eaa <rcl_subscription_init+0xfa>
 8009e56:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8009e5a:	f003 f9ad 	bl	800d1b8 <rmw_subscription_get_actual_qos>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	b9a8      	cbnz	r0, 8009e8e <rcl_subscription_init+0xde>
 8009e62:	6820      	ldr	r0, [r4, #0]
 8009e64:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8009e68:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8009e6c:	2270      	movs	r2, #112	@ 0x70
 8009e6e:	4631      	mov	r1, r6
 8009e70:	f009 fb35 	bl	80134de <memcpy>
 8009e74:	9807      	ldr	r0, [sp, #28]
 8009e76:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009e78:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009e7a:	4798      	blx	r3
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	b009      	add	sp, #36	@ 0x24
 8009e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e84:	27c8      	movs	r7, #200	@ 0xc8
 8009e86:	4638      	mov	r0, r7
 8009e88:	b009      	add	sp, #36	@ 0x24
 8009e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	6827      	ldr	r7, [r4, #0]
 8009e90:	b32f      	cbz	r7, 8009ede <rcl_subscription_init+0x12e>
 8009e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e96:	b14b      	cbz	r3, 8009eac <rcl_subscription_init+0xfc>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f7ff fd45 	bl	8009928 <rcl_node_get_rmw_handle>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009ea4:	f003 f998 	bl	800d1d8 <rmw_destroy_subscription>
 8009ea8:	6827      	ldr	r7, [r4, #0]
 8009eaa:	b197      	cbz	r7, 8009ed2 <rcl_subscription_init+0x122>
 8009eac:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f7fd ff5d 	bl	8007d70 <rcutils_allocator_is_valid>
 8009eb6:	b158      	cbz	r0, 8009ed0 <rcl_subscription_init+0x120>
 8009eb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009eba:	b148      	cbz	r0, 8009ed0 <rcl_subscription_init+0x120>
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f002 f98b 	bl	800c1d8 <rmw_subscription_content_filter_options_fini>
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	b9b8      	cbnz	r0, 8009ef6 <rcl_subscription_init+0x146>
 8009ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ec8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009eca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ecc:	4798      	blx	r3
 8009ece:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8009ed0:	6827      	ldr	r7, [r4, #0]
 8009ed2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009ed4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	4798      	blx	r3
 8009eda:	2300      	movs	r3, #0
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	2701      	movs	r7, #1
 8009ee0:	e7c8      	b.n	8009e74 <rcl_subscription_init+0xc4>
 8009ee2:	2867      	cmp	r0, #103	@ 0x67
 8009ee4:	d0c6      	beq.n	8009e74 <rcl_subscription_init+0xc4>
 8009ee6:	2869      	cmp	r0, #105	@ 0x69
 8009ee8:	d003      	beq.n	8009ef2 <rcl_subscription_init+0x142>
 8009eea:	280a      	cmp	r0, #10
 8009eec:	d1f7      	bne.n	8009ede <rcl_subscription_init+0x12e>
 8009eee:	270a      	movs	r7, #10
 8009ef0:	e7c0      	b.n	8009e74 <rcl_subscription_init+0xc4>
 8009ef2:	2767      	movs	r7, #103	@ 0x67
 8009ef4:	e7be      	b.n	8009e74 <rcl_subscription_init+0xc4>
 8009ef6:	f007 f9a9 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 8009efa:	6827      	ldr	r7, [r4, #0]
 8009efc:	e7e9      	b.n	8009ed2 <rcl_subscription_init+0x122>
 8009efe:	bf00      	nop

08009f00 <rcl_subscription_get_default_options>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4d14      	ldr	r5, [pc, #80]	@ (8009f54 <rcl_subscription_get_default_options+0x54>)
 8009f04:	4914      	ldr	r1, [pc, #80]	@ (8009f58 <rcl_subscription_get_default_options+0x58>)
 8009f06:	b08a      	sub	sp, #40	@ 0x28
 8009f08:	4604      	mov	r4, r0
 8009f0a:	2250      	movs	r2, #80	@ 0x50
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f009 fae6 	bl	80134de <memcpy>
 8009f12:	a804      	add	r0, sp, #16
 8009f14:	f7fd ff1e 	bl	8007d54 <rcutils_get_default_allocator>
 8009f18:	f10d 0c10 	add.w	ip, sp, #16
 8009f1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f20:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009f24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f28:	466e      	mov	r6, sp
 8009f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f2e:	f8ce 3000 	str.w	r3, [lr]
 8009f32:	4630      	mov	r0, r6
 8009f34:	f002 f96a 	bl	800c20c <rmw_get_default_subscription_options>
 8009f38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009f3c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f44:	2270      	movs	r2, #112	@ 0x70
 8009f46:	4629      	mov	r1, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f009 fac8 	bl	80134de <memcpy>
 8009f4e:	4620      	mov	r0, r4
 8009f50:	b00a      	add	sp, #40	@ 0x28
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	20008ff8 	.word	0x20008ff8
 8009f58:	08014690 	.word	0x08014690

08009f5c <rcl_take>:
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d04a      	beq.n	8009ff6 <rcl_take+0x9a>
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	4604      	mov	r4, r0
 8009f66:	6800      	ldr	r0, [r0, #0]
 8009f68:	b0a4      	sub	sp, #144	@ 0x90
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d03b      	beq.n	8009fe6 <rcl_take+0x8a>
 8009f6e:	461f      	mov	r7, r3
 8009f70:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d036      	beq.n	8009fe6 <rcl_take+0x8a>
 8009f78:	460e      	mov	r6, r1
 8009f7a:	2900      	cmp	r1, #0
 8009f7c:	d039      	beq.n	8009ff2 <rcl_take+0x96>
 8009f7e:	4615      	mov	r5, r2
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d03c      	beq.n	8009ffe <rcl_take+0xa2>
 8009f84:	a802      	add	r0, sp, #8
 8009f86:	f002 f947 	bl	800c218 <rmw_get_zero_initialized_message_info>
 8009f8a:	f10d 0c08 	add.w	ip, sp, #8
 8009f8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f92:	46ae      	mov	lr, r5
 8009f94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009fa0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009fa4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009fa8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8009fac:	f04f 0800 	mov.w	r8, #0
 8009fb0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009fb4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	462b      	mov	r3, r5
 8009fbc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8009fc0:	9700      	str	r7, [sp, #0]
 8009fc2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	f003 f966 	bl	800d298 <rmw_take_with_info>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	b9c0      	cbnz	r0, 800a002 <rcl_take+0xa6>
 8009fd0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8009fd4:	f240 1291 	movw	r2, #401	@ 0x191
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	bf08      	it	eq
 8009fdc:	4613      	moveq	r3, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	b024      	add	sp, #144	@ 0x90
 8009fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009fea:	4618      	mov	r0, r3
 8009fec:	b024      	add	sp, #144	@ 0x90
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff2:	230b      	movs	r3, #11
 8009ff4:	e7f3      	b.n	8009fde <rcl_take+0x82>
 8009ff6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	4770      	bx	lr
 8009ffe:	ad14      	add	r5, sp, #80	@ 0x50
 800a000:	e7c0      	b.n	8009f84 <rcl_take+0x28>
 800a002:	f007 f923 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 800a006:	4603      	mov	r3, r0
 800a008:	e7e9      	b.n	8009fde <rcl_take+0x82>
 800a00a:	bf00      	nop

0800a00c <rcl_subscription_get_rmw_handle>:
 800a00c:	b118      	cbz	r0, 800a016 <rcl_subscription_get_rmw_handle+0xa>
 800a00e:	6800      	ldr	r0, [r0, #0]
 800a010:	b108      	cbz	r0, 800a016 <rcl_subscription_get_rmw_handle+0xa>
 800a012:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800a016:	4770      	bx	lr

0800a018 <rcl_subscription_is_valid>:
 800a018:	b130      	cbz	r0, 800a028 <rcl_subscription_is_valid+0x10>
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	b120      	cbz	r0, 800a028 <rcl_subscription_is_valid+0x10>
 800a01e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800a022:	3800      	subs	r0, #0
 800a024:	bf18      	it	ne
 800a026:	2001      	movne	r0, #1
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop

0800a02c <rcl_get_system_time>:
 800a02c:	4608      	mov	r0, r1
 800a02e:	f7fd bedf 	b.w	8007df0 <rcutils_system_time_now>
 800a032:	bf00      	nop

0800a034 <rcl_get_steady_time>:
 800a034:	4608      	mov	r0, r1
 800a036:	f7fd bf03 	b.w	8007e40 <rcutils_steady_time_now>
 800a03a:	bf00      	nop

0800a03c <rcl_get_ros_time>:
 800a03c:	7a03      	ldrb	r3, [r0, #8]
 800a03e:	b510      	push	{r4, lr}
 800a040:	460c      	mov	r4, r1
 800a042:	b133      	cbz	r3, 800a052 <rcl_get_ros_time+0x16>
 800a044:	2105      	movs	r1, #5
 800a046:	f001 fd53 	bl	800baf0 <__atomic_load_8>
 800a04a:	e9c4 0100 	strd	r0, r1, [r4]
 800a04e:	2000      	movs	r0, #0
 800a050:	bd10      	pop	{r4, pc}
 800a052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a056:	4608      	mov	r0, r1
 800a058:	f7fd beca 	b.w	8007df0 <rcutils_system_time_now>

0800a05c <rcl_clock_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	4605      	mov	r5, r0
 800a060:	4610      	mov	r0, r2
 800a062:	4614      	mov	r4, r2
 800a064:	460e      	mov	r6, r1
 800a066:	f7fd fe83 	bl	8007d70 <rcutils_allocator_is_valid>
 800a06a:	b128      	cbz	r0, 800a078 <rcl_clock_init+0x1c>
 800a06c:	2d03      	cmp	r5, #3
 800a06e:	d803      	bhi.n	800a078 <rcl_clock_init+0x1c>
 800a070:	e8df f005 	tbb	[pc, r5]
 800a074:	06532e1d 	.word	0x06532e1d
 800a078:	f04f 0c0b 	mov.w	ip, #11
 800a07c:	4660      	mov	r0, ip
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a080:	2e00      	cmp	r6, #0
 800a082:	d0f9      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a084:	2c00      	cmp	r4, #0
 800a086:	d0f7      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a088:	2300      	movs	r3, #0
 800a08a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a08e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800a144 <rcl_clock_init+0xe8>
 800a092:	6133      	str	r3, [r6, #16]
 800a094:	f106 0514 	add.w	r5, r6, #20
 800a098:	469c      	mov	ip, r3
 800a09a:	2703      	movs	r7, #3
 800a09c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a09e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	7037      	strb	r7, [r6, #0]
 800a0a6:	f8c6 e00c 	str.w	lr, [r6, #12]
 800a0aa:	4660      	mov	r0, ip
 800a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	d0e2      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	7033      	strb	r3, [r6, #0]
 800a0b6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a0ba:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800a0be:	469c      	mov	ip, r3
 800a0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0c2:	f106 0514 	add.w	r5, r6, #20
 800a0c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	4660      	mov	r0, ip
 800a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d0:	2e00      	cmp	r6, #0
 800a0d2:	d0d1      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d0cf      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a0d8:	2700      	movs	r7, #0
 800a0da:	7037      	strb	r7, [r6, #0]
 800a0dc:	46a4      	mov	ip, r4
 800a0de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0e2:	f106 0514 	add.w	r5, r6, #20
 800a0e6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800a0ea:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800a0ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0f0:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	6921      	ldr	r1, [r4, #16]
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	2010      	movs	r0, #16
 800a0fc:	4798      	blx	r3
 800a0fe:	6130      	str	r0, [r6, #16]
 800a100:	b1d0      	cbz	r0, 800a138 <rcl_clock_init+0xdc>
 800a102:	2200      	movs	r2, #0
 800a104:	2300      	movs	r3, #0
 800a106:	e9c0 2300 	strd	r2, r3, [r0]
 800a10a:	2301      	movs	r3, #1
 800a10c:	7207      	strb	r7, [r0, #8]
 800a10e:	4a0c      	ldr	r2, [pc, #48]	@ (800a140 <rcl_clock_init+0xe4>)
 800a110:	7033      	strb	r3, [r6, #0]
 800a112:	46bc      	mov	ip, r7
 800a114:	60f2      	str	r2, [r6, #12]
 800a116:	4660      	mov	r0, ip
 800a118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	d0ac      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d0aa      	beq.n	800a078 <rcl_clock_init+0x1c>
 800a122:	2300      	movs	r3, #0
 800a124:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a128:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800a148 <rcl_clock_init+0xec>
 800a12c:	6133      	str	r3, [r6, #16]
 800a12e:	f106 0514 	add.w	r5, r6, #20
 800a132:	469c      	mov	ip, r3
 800a134:	2702      	movs	r7, #2
 800a136:	e7b1      	b.n	800a09c <rcl_clock_init+0x40>
 800a138:	f04f 0c0a 	mov.w	ip, #10
 800a13c:	e79e      	b.n	800a07c <rcl_clock_init+0x20>
 800a13e:	bf00      	nop
 800a140:	0800a03d 	.word	0x0800a03d
 800a144:	0800a035 	.word	0x0800a035
 800a148:	0800a02d 	.word	0x0800a02d

0800a14c <rcl_clock_get_now>:
 800a14c:	b140      	cbz	r0, 800a160 <rcl_clock_get_now+0x14>
 800a14e:	b139      	cbz	r1, 800a160 <rcl_clock_get_now+0x14>
 800a150:	7803      	ldrb	r3, [r0, #0]
 800a152:	b11b      	cbz	r3, 800a15c <rcl_clock_get_now+0x10>
 800a154:	68c3      	ldr	r3, [r0, #12]
 800a156:	b10b      	cbz	r3, 800a15c <rcl_clock_get_now+0x10>
 800a158:	6900      	ldr	r0, [r0, #16]
 800a15a:	4718      	bx	r3
 800a15c:	2001      	movs	r0, #1
 800a15e:	4770      	bx	lr
 800a160:	200b      	movs	r0, #11
 800a162:	4770      	bx	lr

0800a164 <rcl_timer_call>:
 800a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	b087      	sub	sp, #28
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d06d      	beq.n	800a24a <rcl_timer_call+0xe6>
 800a16e:	6803      	ldr	r3, [r0, #0]
 800a170:	4604      	mov	r4, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d063      	beq.n	800a23e <rcl_timer_call+0xda>
 800a176:	f3bf 8f5b 	dmb	ish
 800a17a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a17e:	f3bf 8f5b 	dmb	ish
 800a182:	2b00      	cmp	r3, #0
 800a184:	d150      	bne.n	800a228 <rcl_timer_call+0xc4>
 800a186:	6803      	ldr	r3, [r0, #0]
 800a188:	a904      	add	r1, sp, #16
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	f7ff ffde 	bl	800a14c <rcl_clock_get_now>
 800a190:	4605      	mov	r5, r0
 800a192:	2800      	cmp	r0, #0
 800a194:	d14a      	bne.n	800a22c <rcl_timer_call+0xc8>
 800a196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	db4a      	blt.n	800a234 <rcl_timer_call+0xd0>
 800a19e:	6820      	ldr	r0, [r4, #0]
 800a1a0:	f04f 0a05 	mov.w	sl, #5
 800a1a4:	f8cd a000 	str.w	sl, [sp]
 800a1a8:	3020      	adds	r0, #32
 800a1aa:	f001 fd0d 	bl	800bbc8 <__atomic_exchange_8>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	f3bf 8f5b 	dmb	ish
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800a1ba:	f3bf 8f5b 	dmb	ish
 800a1be:	6820      	ldr	r0, [r4, #0]
 800a1c0:	4689      	mov	r9, r1
 800a1c2:	3028      	adds	r0, #40	@ 0x28
 800a1c4:	4651      	mov	r1, sl
 800a1c6:	f001 fc93 	bl	800baf0 <__atomic_load_8>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	3018      	adds	r0, #24
 800a1d2:	4651      	mov	r1, sl
 800a1d4:	f001 fc8c 	bl	800baf0 <__atomic_load_8>
 800a1d8:	1836      	adds	r6, r6, r0
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4682      	mov	sl, r0
 800a1de:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800a1e2:	eb47 0701 	adc.w	r7, r7, r1
 800a1e6:	4286      	cmp	r6, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	eb77 010c 	sbcs.w	r1, r7, ip
 800a1ee:	da04      	bge.n	800a1fa <rcl_timer_call+0x96>
 800a1f0:	ea53 0102 	orrs.w	r1, r3, r2
 800a1f4:	d12e      	bne.n	800a254 <rcl_timer_call+0xf0>
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	4667      	mov	r7, ip
 800a1fa:	6820      	ldr	r0, [r4, #0]
 800a1fc:	2105      	movs	r1, #5
 800a1fe:	4632      	mov	r2, r6
 800a200:	463b      	mov	r3, r7
 800a202:	3028      	adds	r0, #40	@ 0x28
 800a204:	9100      	str	r1, [sp, #0]
 800a206:	f001 fca9 	bl	800bb5c <__atomic_store_8>
 800a20a:	f1bb 0f00 	cmp.w	fp, #0
 800a20e:	d00d      	beq.n	800a22c <rcl_timer_call+0xc8>
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	9b05      	ldr	r3, [sp, #20]
 800a214:	ebb2 0208 	subs.w	r2, r2, r8
 800a218:	4620      	mov	r0, r4
 800a21a:	eb63 0309 	sbc.w	r3, r3, r9
 800a21e:	47d8      	blx	fp
 800a220:	4628      	mov	r0, r5
 800a222:	b007      	add	sp, #28
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a228:	f240 3521 	movw	r5, #801	@ 0x321
 800a22c:	4628      	mov	r0, r5
 800a22e:	b007      	add	sp, #28
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	2501      	movs	r5, #1
 800a236:	4628      	mov	r0, r5
 800a238:	b007      	add	sp, #28
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800a242:	4628      	mov	r0, r5
 800a244:	b007      	add	sp, #28
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24a:	250b      	movs	r5, #11
 800a24c:	4628      	mov	r0, r5
 800a24e:	b007      	add	sp, #28
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	1b80      	subs	r0, r0, r6
 800a256:	eb6c 0107 	sbc.w	r1, ip, r7
 800a25a:	3801      	subs	r0, #1
 800a25c:	f161 0100 	sbc.w	r1, r1, #0
 800a260:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a264:	f7f6 f824 	bl	80002b0 <__aeabi_ldivmod>
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	3001      	adds	r0, #1
 800a26c:	f141 0100 	adc.w	r1, r1, #0
 800a270:	fb00 f303 	mul.w	r3, r0, r3
 800a274:	fb01 330a 	mla	r3, r1, sl, r3
 800a278:	fba0 0a0a 	umull	r0, sl, r0, sl
 800a27c:	1986      	adds	r6, r0, r6
 800a27e:	4453      	add	r3, sl
 800a280:	eb43 0707 	adc.w	r7, r3, r7
 800a284:	e7b9      	b.n	800a1fa <rcl_timer_call+0x96>
 800a286:	bf00      	nop

0800a288 <rcl_timer_is_ready>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	b378      	cbz	r0, 800a2ee <rcl_timer_is_ready+0x66>
 800a28e:	6803      	ldr	r3, [r0, #0]
 800a290:	4604      	mov	r4, r0
 800a292:	b383      	cbz	r3, 800a2f6 <rcl_timer_is_ready+0x6e>
 800a294:	460d      	mov	r5, r1
 800a296:	b351      	cbz	r1, 800a2ee <rcl_timer_is_ready+0x66>
 800a298:	f3bf 8f5b 	dmb	ish
 800a29c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a2a0:	f3bf 8f5b 	dmb	ish
 800a2a4:	b953      	cbnz	r3, 800a2bc <rcl_timer_is_ready+0x34>
 800a2a6:	6803      	ldr	r3, [r0, #0]
 800a2a8:	4669      	mov	r1, sp
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	f7ff ff4e 	bl	800a14c <rcl_clock_get_now>
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	b140      	cbz	r0, 800a2c6 <rcl_timer_is_ready+0x3e>
 800a2b4:	f240 3321 	movw	r3, #801	@ 0x321
 800a2b8:	4298      	cmp	r0, r3
 800a2ba:	d101      	bne.n	800a2c0 <rcl_timer_is_ready+0x38>
 800a2bc:	2600      	movs	r6, #0
 800a2be:	702e      	strb	r6, [r5, #0]
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	b002      	add	sp, #8
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	6820      	ldr	r0, [r4, #0]
 800a2c8:	2105      	movs	r1, #5
 800a2ca:	3028      	adds	r0, #40	@ 0x28
 800a2cc:	f001 fc10 	bl	800baf0 <__atomic_load_8>
 800a2d0:	9b00      	ldr	r3, [sp, #0]
 800a2d2:	1ac0      	subs	r0, r0, r3
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	eb61 0103 	sbc.w	r1, r1, r3
 800a2da:	2801      	cmp	r0, #1
 800a2dc:	f171 0300 	sbcs.w	r3, r1, #0
 800a2e0:	bfb4      	ite	lt
 800a2e2:	2301      	movlt	r3, #1
 800a2e4:	2300      	movge	r3, #0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	702b      	strb	r3, [r5, #0]
 800a2ea:	b002      	add	sp, #8
 800a2ec:	bd70      	pop	{r4, r5, r6, pc}
 800a2ee:	260b      	movs	r6, #11
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	b002      	add	sp, #8
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800a2fa:	e7e1      	b.n	800a2c0 <rcl_timer_is_ready+0x38>

0800a2fc <rcl_timer_get_time_until_next_call>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	b330      	cbz	r0, 800a350 <rcl_timer_get_time_until_next_call+0x54>
 800a302:	6803      	ldr	r3, [r0, #0]
 800a304:	4604      	mov	r4, r0
 800a306:	b33b      	cbz	r3, 800a358 <rcl_timer_get_time_until_next_call+0x5c>
 800a308:	460d      	mov	r5, r1
 800a30a:	b309      	cbz	r1, 800a350 <rcl_timer_get_time_until_next_call+0x54>
 800a30c:	f3bf 8f5b 	dmb	ish
 800a310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a314:	f3bf 8f5b 	dmb	ish
 800a318:	b9ab      	cbnz	r3, 800a346 <rcl_timer_get_time_until_next_call+0x4a>
 800a31a:	6803      	ldr	r3, [r0, #0]
 800a31c:	4669      	mov	r1, sp
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	f7ff ff14 	bl	800a14c <rcl_clock_get_now>
 800a324:	4606      	mov	r6, r0
 800a326:	b958      	cbnz	r0, 800a340 <rcl_timer_get_time_until_next_call+0x44>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	2105      	movs	r1, #5
 800a32c:	3028      	adds	r0, #40	@ 0x28
 800a32e:	f001 fbdf 	bl	800baf0 <__atomic_load_8>
 800a332:	9b00      	ldr	r3, [sp, #0]
 800a334:	1ac0      	subs	r0, r0, r3
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	6028      	str	r0, [r5, #0]
 800a33a:	eb61 0103 	sbc.w	r1, r1, r3
 800a33e:	6069      	str	r1, [r5, #4]
 800a340:	4630      	mov	r0, r6
 800a342:	b002      	add	sp, #8
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	f240 3621 	movw	r6, #801	@ 0x321
 800a34a:	4630      	mov	r0, r6
 800a34c:	b002      	add	sp, #8
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	260b      	movs	r6, #11
 800a352:	4630      	mov	r0, r6
 800a354:	b002      	add	sp, #8
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800a35c:	e7f0      	b.n	800a340 <rcl_timer_get_time_until_next_call+0x44>
 800a35e:	bf00      	nop

0800a360 <rcl_timer_get_guard_condition>:
 800a360:	b130      	cbz	r0, 800a370 <rcl_timer_get_guard_condition+0x10>
 800a362:	6800      	ldr	r0, [r0, #0]
 800a364:	b120      	cbz	r0, 800a370 <rcl_timer_get_guard_condition+0x10>
 800a366:	68c3      	ldr	r3, [r0, #12]
 800a368:	b10b      	cbz	r3, 800a36e <rcl_timer_get_guard_condition+0xe>
 800a36a:	3008      	adds	r0, #8
 800a36c:	4770      	bx	lr
 800a36e:	4618      	mov	r0, r3
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop

0800a374 <rcl_validate_enclave_name_with_size>:
 800a374:	b378      	cbz	r0, 800a3d6 <rcl_validate_enclave_name_with_size+0x62>
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	4615      	mov	r5, r2
 800a37a:	b0c2      	sub	sp, #264	@ 0x108
 800a37c:	b302      	cbz	r2, 800a3c0 <rcl_validate_enclave_name_with_size+0x4c>
 800a37e:	461e      	mov	r6, r3
 800a380:	466a      	mov	r2, sp
 800a382:	ab01      	add	r3, sp, #4
 800a384:	460c      	mov	r4, r1
 800a386:	f001 ffc5 	bl	800c314 <rmw_validate_namespace_with_size>
 800a38a:	4684      	mov	ip, r0
 800a38c:	b9e8      	cbnz	r0, 800a3ca <rcl_validate_enclave_name_with_size+0x56>
 800a38e:	9b00      	ldr	r3, [sp, #0]
 800a390:	b923      	cbnz	r3, 800a39c <rcl_validate_enclave_name_with_size+0x28>
 800a392:	2300      	movs	r3, #0
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	4660      	mov	r0, ip
 800a398:	b042      	add	sp, #264	@ 0x108
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	2b07      	cmp	r3, #7
 800a39e:	d007      	beq.n	800a3b0 <rcl_validate_enclave_name_with_size+0x3c>
 800a3a0:	1e5a      	subs	r2, r3, #1
 800a3a2:	2a05      	cmp	r2, #5
 800a3a4:	d833      	bhi.n	800a40e <rcl_validate_enclave_name_with_size+0x9a>
 800a3a6:	e8df f002 	tbb	[pc, r2]
 800a3aa:	2c2f      	.short	0x2c2f
 800a3ac:	1a232629 	.word	0x1a232629
 800a3b0:	2cff      	cmp	r4, #255	@ 0xff
 800a3b2:	d9ee      	bls.n	800a392 <rcl_validate_enclave_name_with_size+0x1e>
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	d0ed      	beq.n	800a396 <rcl_validate_enclave_name_with_size+0x22>
 800a3ba:	23fe      	movs	r3, #254	@ 0xfe
 800a3bc:	6033      	str	r3, [r6, #0]
 800a3be:	e7ea      	b.n	800a396 <rcl_validate_enclave_name_with_size+0x22>
 800a3c0:	f04f 0c0b 	mov.w	ip, #11
 800a3c4:	4660      	mov	r0, ip
 800a3c6:	b042      	add	sp, #264	@ 0x108
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	f006 ff3f 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 800a3ce:	4684      	mov	ip, r0
 800a3d0:	4660      	mov	r0, ip
 800a3d2:	b042      	add	sp, #264	@ 0x108
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	f04f 0c0b 	mov.w	ip, #11
 800a3da:	4660      	mov	r0, ip
 800a3dc:	4770      	bx	lr
 800a3de:	2306      	movs	r3, #6
 800a3e0:	602b      	str	r3, [r5, #0]
 800a3e2:	2e00      	cmp	r6, #0
 800a3e4:	d0d7      	beq.n	800a396 <rcl_validate_enclave_name_with_size+0x22>
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	6033      	str	r3, [r6, #0]
 800a3ea:	4660      	mov	r0, ip
 800a3ec:	b042      	add	sp, #264	@ 0x108
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	2305      	movs	r3, #5
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	e7f5      	b.n	800a3e2 <rcl_validate_enclave_name_with_size+0x6e>
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	e7f2      	b.n	800a3e2 <rcl_validate_enclave_name_with_size+0x6e>
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	e7ef      	b.n	800a3e2 <rcl_validate_enclave_name_with_size+0x6e>
 800a402:	2302      	movs	r3, #2
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	e7ec      	b.n	800a3e2 <rcl_validate_enclave_name_with_size+0x6e>
 800a408:	2301      	movs	r3, #1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	e7e9      	b.n	800a3e2 <rcl_validate_enclave_name_with_size+0x6e>
 800a40e:	4a04      	ldr	r2, [pc, #16]	@ (800a420 <rcl_validate_enclave_name_with_size+0xac>)
 800a410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a414:	a802      	add	r0, sp, #8
 800a416:	f001 fd25 	bl	800be64 <rcutils_snprintf>
 800a41a:	f04f 0c01 	mov.w	ip, #1
 800a41e:	e7ba      	b.n	800a396 <rcl_validate_enclave_name_with_size+0x22>
 800a420:	080146e0 	.word	0x080146e0

0800a424 <rcl_validate_enclave_name>:
 800a424:	b168      	cbz	r0, 800a442 <rcl_validate_enclave_name+0x1e>
 800a426:	b570      	push	{r4, r5, r6, lr}
 800a428:	460d      	mov	r5, r1
 800a42a:	4616      	mov	r6, r2
 800a42c:	4604      	mov	r4, r0
 800a42e:	f7f5 fee1 	bl	80001f4 <strlen>
 800a432:	4633      	mov	r3, r6
 800a434:	4601      	mov	r1, r0
 800a436:	462a      	mov	r2, r5
 800a438:	4620      	mov	r0, r4
 800a43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a43e:	f7ff bf99 	b.w	800a374 <rcl_validate_enclave_name_with_size>
 800a442:	200b      	movs	r0, #11
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop

0800a448 <rcl_get_zero_initialized_wait_set>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	4c08      	ldr	r4, [pc, #32]	@ (800a46c <rcl_get_zero_initialized_wait_set+0x24>)
 800a44c:	4686      	mov	lr, r0
 800a44e:	4684      	mov	ip, r0
 800a450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a45e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	f8cc 3000 	str.w	r3, [ip]
 800a468:	4670      	mov	r0, lr
 800a46a:	bd10      	pop	{r4, pc}
 800a46c:	08014740 	.word	0x08014740

0800a470 <rcl_wait_set_is_valid>:
 800a470:	b118      	cbz	r0, 800a47a <rcl_wait_set_is_valid+0xa>
 800a472:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a474:	3800      	subs	r0, #0
 800a476:	bf18      	it	ne
 800a478:	2001      	movne	r0, #1
 800a47a:	4770      	bx	lr

0800a47c <rcl_wait_set_fini>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	2800      	cmp	r0, #0
 800a484:	f000 8095 	beq.w	800a5b2 <rcl_wait_set_fini+0x136>
 800a488:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800a48a:	4604      	mov	r4, r0
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	f000 808c 	beq.w	800a5aa <rcl_wait_set_fini+0x12e>
 800a492:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800a494:	f003 f8ee 	bl	800d674 <rmw_destroy_wait_set>
 800a498:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a49a:	1e06      	subs	r6, r0, #0
 800a49c:	bf18      	it	ne
 800a49e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800a4a2:	2d00      	cmp	r5, #0
 800a4a4:	f000 8081 	beq.w	800a5aa <rcl_wait_set_fini+0x12e>
 800a4a8:	6820      	ldr	r0, [r4, #0]
 800a4aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800a4ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a4b0:	2700      	movs	r7, #0
 800a4b2:	6067      	str	r7, [r4, #4]
 800a4b4:	602f      	str	r7, [r5, #0]
 800a4b6:	b120      	cbz	r0, 800a4c2 <rcl_wait_set_fini+0x46>
 800a4b8:	9101      	str	r1, [sp, #4]
 800a4ba:	47c0      	blx	r8
 800a4bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a4be:	9901      	ldr	r1, [sp, #4]
 800a4c0:	6027      	str	r7, [r4, #0]
 800a4c2:	68a8      	ldr	r0, [r5, #8]
 800a4c4:	b120      	cbz	r0, 800a4d0 <rcl_wait_set_fini+0x54>
 800a4c6:	47c0      	blx	r8
 800a4c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800a4d0:	68a0      	ldr	r0, [r4, #8]
 800a4d2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800a4d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	f8c4 800c 	str.w	r8, [r4, #12]
 800a4de:	f8c5 800c 	str.w	r8, [r5, #12]
 800a4e2:	b128      	cbz	r0, 800a4f0 <rcl_wait_set_fini+0x74>
 800a4e4:	47b8      	blx	r7
 800a4e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a4e8:	f8c4 8008 	str.w	r8, [r4, #8]
 800a4ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800a4ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a4f0:	6968      	ldr	r0, [r5, #20]
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	f8c5 8010 	str.w	r8, [r5, #16]
 800a4fa:	b128      	cbz	r0, 800a508 <rcl_wait_set_fini+0x8c>
 800a4fc:	47b8      	blx	r7
 800a4fe:	f8c5 8014 	str.w	r8, [r5, #20]
 800a502:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a504:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800a506:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a508:	6920      	ldr	r0, [r4, #16]
 800a50a:	f04f 0800 	mov.w	r8, #0
 800a50e:	f8c4 8014 	str.w	r8, [r4, #20]
 800a512:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800a516:	b128      	cbz	r0, 800a524 <rcl_wait_set_fini+0xa8>
 800a518:	47b8      	blx	r7
 800a51a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a51c:	f8c4 8010 	str.w	r8, [r4, #16]
 800a520:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800a522:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a524:	69a0      	ldr	r0, [r4, #24]
 800a526:	f04f 0800 	mov.w	r8, #0
 800a52a:	f8c4 801c 	str.w	r8, [r4, #28]
 800a52e:	f8c5 8018 	str.w	r8, [r5, #24]
 800a532:	b128      	cbz	r0, 800a540 <rcl_wait_set_fini+0xc4>
 800a534:	9101      	str	r1, [sp, #4]
 800a536:	47b8      	blx	r7
 800a538:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a53a:	9901      	ldr	r1, [sp, #4]
 800a53c:	f8c4 8018 	str.w	r8, [r4, #24]
 800a540:	6a28      	ldr	r0, [r5, #32]
 800a542:	b120      	cbz	r0, 800a54e <rcl_wait_set_fini+0xd2>
 800a544:	47b8      	blx	r7
 800a546:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a548:	2300      	movs	r3, #0
 800a54a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800a54e:	6a20      	ldr	r0, [r4, #32]
 800a550:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800a554:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a556:	2700      	movs	r7, #0
 800a558:	6267      	str	r7, [r4, #36]	@ 0x24
 800a55a:	626f      	str	r7, [r5, #36]	@ 0x24
 800a55c:	b120      	cbz	r0, 800a568 <rcl_wait_set_fini+0xec>
 800a55e:	9101      	str	r1, [sp, #4]
 800a560:	47c0      	blx	r8
 800a562:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a564:	9901      	ldr	r1, [sp, #4]
 800a566:	6227      	str	r7, [r4, #32]
 800a568:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800a56a:	b120      	cbz	r0, 800a576 <rcl_wait_set_fini+0xfa>
 800a56c:	47c0      	blx	r8
 800a56e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a570:	2300      	movs	r3, #0
 800a572:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800a576:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a578:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800a57c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a57e:	2700      	movs	r7, #0
 800a580:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800a582:	632f      	str	r7, [r5, #48]	@ 0x30
 800a584:	b120      	cbz	r0, 800a590 <rcl_wait_set_fini+0x114>
 800a586:	9101      	str	r1, [sp, #4]
 800a588:	47c0      	blx	r8
 800a58a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a58c:	9901      	ldr	r1, [sp, #4]
 800a58e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800a590:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800a592:	b120      	cbz	r0, 800a59e <rcl_wait_set_fini+0x122>
 800a594:	47c0      	blx	r8
 800a596:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800a598:	2300      	movs	r3, #0
 800a59a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800a59e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a5a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	4798      	blx	r3
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	b002      	add	sp, #8
 800a5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b2:	260b      	movs	r6, #11
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	b002      	add	sp, #8
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a5bc <rcl_wait_set_add_subscription>:
 800a5bc:	b318      	cbz	r0, 800a606 <rcl_wait_set_add_subscription+0x4a>
 800a5be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	b30b      	cbz	r3, 800a60a <rcl_wait_set_add_subscription+0x4e>
 800a5c6:	b319      	cbz	r1, 800a610 <rcl_wait_set_add_subscription+0x54>
 800a5c8:	681d      	ldr	r5, [r3, #0]
 800a5ca:	6840      	ldr	r0, [r0, #4]
 800a5cc:	4285      	cmp	r5, r0
 800a5ce:	d217      	bcs.n	800a600 <rcl_wait_set_add_subscription+0x44>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	1c6e      	adds	r6, r5, #1
 800a5d4:	601e      	str	r6, [r3, #0]
 800a5d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800a5da:	b102      	cbz	r2, 800a5de <rcl_wait_set_add_subscription+0x22>
 800a5dc:	6015      	str	r5, [r2, #0]
 800a5de:	4608      	mov	r0, r1
 800a5e0:	f7ff fd14 	bl	800a00c <rcl_subscription_get_rmw_handle>
 800a5e4:	b150      	cbz	r0, 800a5fc <rcl_wait_set_add_subscription+0x40>
 800a5e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a5e8:	6842      	ldr	r2, [r0, #4]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a5f2:	6853      	ldr	r3, [r2, #4]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	6053      	str	r3, [r2, #4]
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	f240 3086 	movw	r0, #902	@ 0x386
 800a604:	bd70      	pop	{r4, r5, r6, pc}
 800a606:	200b      	movs	r0, #11
 800a608:	4770      	bx	lr
 800a60a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	200b      	movs	r0, #11
 800a612:	bd70      	pop	{r4, r5, r6, pc}

0800a614 <rcl_wait_set_clear>:
 800a614:	2800      	cmp	r0, #0
 800a616:	d073      	beq.n	800a700 <rcl_wait_set_clear+0xec>
 800a618:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a61a:	b510      	push	{r4, lr}
 800a61c:	4604      	mov	r4, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d070      	beq.n	800a704 <rcl_wait_set_clear+0xf0>
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	b138      	cbz	r0, 800a636 <rcl_wait_set_clear+0x22>
 800a626:	6862      	ldr	r2, [r4, #4]
 800a628:	2100      	movs	r1, #0
 800a62a:	0092      	lsls	r2, r2, #2
 800a62c:	f008 fe8e 	bl	801334c <memset>
 800a630:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	68a0      	ldr	r0, [r4, #8]
 800a638:	b138      	cbz	r0, 800a64a <rcl_wait_set_clear+0x36>
 800a63a:	68e2      	ldr	r2, [r4, #12]
 800a63c:	2100      	movs	r1, #0
 800a63e:	0092      	lsls	r2, r2, #2
 800a640:	f008 fe84 	bl	801334c <memset>
 800a644:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a646:	2200      	movs	r2, #0
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	69a0      	ldr	r0, [r4, #24]
 800a64c:	b138      	cbz	r0, 800a65e <rcl_wait_set_clear+0x4a>
 800a64e:	69e2      	ldr	r2, [r4, #28]
 800a650:	2100      	movs	r1, #0
 800a652:	0092      	lsls	r2, r2, #2
 800a654:	f008 fe7a 	bl	801334c <memset>
 800a658:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a65a:	2200      	movs	r2, #0
 800a65c:	619a      	str	r2, [r3, #24]
 800a65e:	6a20      	ldr	r0, [r4, #32]
 800a660:	b138      	cbz	r0, 800a672 <rcl_wait_set_clear+0x5e>
 800a662:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a664:	2100      	movs	r1, #0
 800a666:	0092      	lsls	r2, r2, #2
 800a668:	f008 fe70 	bl	801334c <memset>
 800a66c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a66e:	2200      	movs	r2, #0
 800a670:	625a      	str	r2, [r3, #36]	@ 0x24
 800a672:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a674:	b138      	cbz	r0, 800a686 <rcl_wait_set_clear+0x72>
 800a676:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a678:	2100      	movs	r1, #0
 800a67a:	0092      	lsls	r2, r2, #2
 800a67c:	f008 fe66 	bl	801334c <memset>
 800a680:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a682:	2200      	movs	r2, #0
 800a684:	631a      	str	r2, [r3, #48]	@ 0x30
 800a686:	6920      	ldr	r0, [r4, #16]
 800a688:	b138      	cbz	r0, 800a69a <rcl_wait_set_clear+0x86>
 800a68a:	6962      	ldr	r2, [r4, #20]
 800a68c:	2100      	movs	r1, #0
 800a68e:	0092      	lsls	r2, r2, #2
 800a690:	f008 fe5c 	bl	801334c <memset>
 800a694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a696:	2200      	movs	r2, #0
 800a698:	641a      	str	r2, [r3, #64]	@ 0x40
 800a69a:	6898      	ldr	r0, [r3, #8]
 800a69c:	b138      	cbz	r0, 800a6ae <rcl_wait_set_clear+0x9a>
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	0092      	lsls	r2, r2, #2
 800a6a4:	f008 fe52 	bl	801334c <memset>
 800a6a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	6958      	ldr	r0, [r3, #20]
 800a6b0:	b138      	cbz	r0, 800a6c2 <rcl_wait_set_clear+0xae>
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	0092      	lsls	r2, r2, #2
 800a6b8:	f008 fe48 	bl	801334c <memset>
 800a6bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	611a      	str	r2, [r3, #16]
 800a6c2:	6a18      	ldr	r0, [r3, #32]
 800a6c4:	b138      	cbz	r0, 800a6d6 <rcl_wait_set_clear+0xc2>
 800a6c6:	69da      	ldr	r2, [r3, #28]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	f008 fe3e 	bl	801334c <memset>
 800a6d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	61da      	str	r2, [r3, #28]
 800a6d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a6d8:	b138      	cbz	r0, 800a6ea <rcl_wait_set_clear+0xd6>
 800a6da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6dc:	2100      	movs	r1, #0
 800a6de:	0092      	lsls	r2, r2, #2
 800a6e0:	f008 fe34 	bl	801334c <memset>
 800a6e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a6ec:	b138      	cbz	r0, 800a6fe <rcl_wait_set_clear+0xea>
 800a6ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	0092      	lsls	r2, r2, #2
 800a6f4:	f008 fe2a 	bl	801334c <memset>
 800a6f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	6358      	str	r0, [r3, #52]	@ 0x34
 800a6fe:	bd10      	pop	{r4, pc}
 800a700:	200b      	movs	r0, #11
 800a702:	4770      	bx	lr
 800a704:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	bf00      	nop

0800a70c <rcl_wait_set_resize>:
 800a70c:	2800      	cmp	r0, #0
 800a70e:	f000 8185 	beq.w	800aa1c <rcl_wait_set_resize+0x310>
 800a712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a716:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800a718:	b083      	sub	sp, #12
 800a71a:	4605      	mov	r5, r0
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	f000 817f 	beq.w	800aa20 <rcl_wait_set_resize+0x314>
 800a722:	f04f 0900 	mov.w	r9, #0
 800a726:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800a72a:	461f      	mov	r7, r3
 800a72c:	4688      	mov	r8, r1
 800a72e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800a732:	4616      	mov	r6, r2
 800a734:	f8c0 9004 	str.w	r9, [r0, #4]
 800a738:	f8c4 9000 	str.w	r9, [r4]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	f000 80bd 	beq.w	800a8bc <rcl_wait_set_resize+0x1b0>
 800a742:	008c      	lsls	r4, r1, #2
 800a744:	6800      	ldr	r0, [r0, #0]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	4652      	mov	r2, sl
 800a74a:	4621      	mov	r1, r4
 800a74c:	4798      	blx	r3
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	6028      	str	r0, [r5, #0]
 800a752:	2800      	cmp	r0, #0
 800a754:	f000 80cb 	beq.w	800a8ee <rcl_wait_set_resize+0x1e2>
 800a758:	4622      	mov	r2, r4
 800a75a:	4649      	mov	r1, r9
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	f008 fdf5 	bl	801334c <memset>
 800a762:	f8c5 8004 	str.w	r8, [r5, #4]
 800a766:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a770:	f8c8 9004 	str.w	r9, [r8, #4]
 800a774:	4652      	mov	r2, sl
 800a776:	4621      	mov	r1, r4
 800a778:	4798      	blx	r3
 800a77a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a77c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80ac 	beq.w	800a8e0 <rcl_wait_set_resize+0x1d4>
 800a788:	4622      	mov	r2, r4
 800a78a:	4649      	mov	r1, r9
 800a78c:	4618      	mov	r0, r3
 800a78e:	f008 fddd 	bl	801334c <memset>
 800a792:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a794:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a798:	f04f 0800 	mov.w	r8, #0
 800a79c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800a7a0:	f8c5 800c 	str.w	r8, [r5, #12]
 800a7a4:	f8c4 800c 	str.w	r8, [r4, #12]
 800a7a8:	2e00      	cmp	r6, #0
 800a7aa:	f040 80a4 	bne.w	800a8f6 <rcl_wait_set_resize+0x1ea>
 800a7ae:	68a8      	ldr	r0, [r5, #8]
 800a7b0:	b128      	cbz	r0, 800a7be <rcl_wait_set_resize+0xb2>
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	4790      	blx	r2
 800a7b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a7b8:	60ae      	str	r6, [r5, #8]
 800a7ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a7be:	f04f 0800 	mov.w	r8, #0
 800a7c2:	19f6      	adds	r6, r6, r7
 800a7c4:	f8c4 8010 	str.w	r8, [r4, #16]
 800a7c8:	f040 80ac 	bne.w	800a924 <rcl_wait_set_resize+0x218>
 800a7cc:	6960      	ldr	r0, [r4, #20]
 800a7ce:	b130      	cbz	r0, 800a7de <rcl_wait_set_resize+0xd2>
 800a7d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	4798      	blx	r3
 800a7d6:	6166      	str	r6, [r4, #20]
 800a7d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a7da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a7de:	2600      	movs	r6, #0
 800a7e0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800a7e4:	616e      	str	r6, [r5, #20]
 800a7e6:	6426      	str	r6, [r4, #64]	@ 0x40
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	f040 80ad 	bne.w	800a948 <rcl_wait_set_resize+0x23c>
 800a7ee:	6928      	ldr	r0, [r5, #16]
 800a7f0:	b138      	cbz	r0, 800a802 <rcl_wait_set_resize+0xf6>
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	47d0      	blx	sl
 800a7f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a7f8:	612f      	str	r7, [r5, #16]
 800a7fa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800a7fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a802:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a804:	2600      	movs	r6, #0
 800a806:	61ee      	str	r6, [r5, #28]
 800a808:	61a6      	str	r6, [r4, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f040 80af 	bne.w	800a96e <rcl_wait_set_resize+0x262>
 800a810:	69a8      	ldr	r0, [r5, #24]
 800a812:	b120      	cbz	r0, 800a81e <rcl_wait_set_resize+0x112>
 800a814:	4649      	mov	r1, r9
 800a816:	47d0      	blx	sl
 800a818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a81a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a81c:	61ab      	str	r3, [r5, #24]
 800a81e:	6a20      	ldr	r0, [r4, #32]
 800a820:	b128      	cbz	r0, 800a82e <rcl_wait_set_resize+0x122>
 800a822:	4649      	mov	r1, r9
 800a824:	47d0      	blx	sl
 800a826:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a828:	2300      	movs	r3, #0
 800a82a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a82e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a830:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a832:	2600      	movs	r6, #0
 800a834:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800a838:	626e      	str	r6, [r5, #36]	@ 0x24
 800a83a:	6266      	str	r6, [r4, #36]	@ 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80b6 	beq.w	800a9ae <rcl_wait_set_resize+0x2a2>
 800a842:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a846:	6a28      	ldr	r0, [r5, #32]
 800a848:	463a      	mov	r2, r7
 800a84a:	4651      	mov	r1, sl
 800a84c:	47c8      	blx	r9
 800a84e:	6228      	str	r0, [r5, #32]
 800a850:	2800      	cmp	r0, #0
 800a852:	d04c      	beq.n	800a8ee <rcl_wait_set_resize+0x1e2>
 800a854:	4652      	mov	r2, sl
 800a856:	4631      	mov	r1, r6
 800a858:	f008 fd78 	bl	801334c <memset>
 800a85c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a860:	626b      	str	r3, [r5, #36]	@ 0x24
 800a862:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a864:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a866:	463a      	mov	r2, r7
 800a868:	4651      	mov	r1, sl
 800a86a:	47c8      	blx	r9
 800a86c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a86e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800a870:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800a872:	2c00      	cmp	r4, #0
 800a874:	f000 80f0 	beq.w	800aa58 <rcl_wait_set_resize+0x34c>
 800a878:	4620      	mov	r0, r4
 800a87a:	4652      	mov	r2, sl
 800a87c:	4631      	mov	r1, r6
 800a87e:	f008 fd65 	bl	801334c <memset>
 800a882:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a886:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800a888:	2600      	movs	r6, #0
 800a88a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800a88e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800a890:	6326      	str	r6, [r4, #48]	@ 0x30
 800a892:	2b00      	cmp	r3, #0
 800a894:	f040 809d 	bne.w	800a9d2 <rcl_wait_set_resize+0x2c6>
 800a898:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800a89a:	b120      	cbz	r0, 800a8a6 <rcl_wait_set_resize+0x19a>
 800a89c:	4639      	mov	r1, r7
 800a89e:	47c0      	blx	r8
 800a8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a8a4:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a8a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a8a8:	b310      	cbz	r0, 800a8f0 <rcl_wait_set_resize+0x1e4>
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	47c0      	blx	r8
 800a8ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800a8b6:	b003      	add	sp, #12
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	6800      	ldr	r0, [r0, #0]
 800a8be:	b120      	cbz	r0, 800a8ca <rcl_wait_set_resize+0x1be>
 800a8c0:	4651      	mov	r1, sl
 800a8c2:	47d8      	blx	fp
 800a8c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a8c6:	f8c5 8000 	str.w	r8, [r5]
 800a8ca:	68a0      	ldr	r0, [r4, #8]
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f43f af61 	beq.w	800a794 <rcl_wait_set_resize+0x88>
 800a8d2:	4651      	mov	r1, sl
 800a8d4:	47d8      	blx	fp
 800a8d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a8de:	e759      	b.n	800a794 <rcl_wait_set_resize+0x88>
 800a8e0:	6828      	ldr	r0, [r5, #0]
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	4651      	mov	r1, sl
 800a8e6:	47d8      	blx	fp
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	e9c5 3300 	strd	r3, r3, [r5]
 800a8ee:	200a      	movs	r0, #10
 800a8f0:	b003      	add	sp, #12
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	00b4      	lsls	r4, r6, #2
 800a8f8:	68a8      	ldr	r0, [r5, #8]
 800a8fa:	464a      	mov	r2, r9
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4798      	blx	r3
 800a900:	60a8      	str	r0, [r5, #8]
 800a902:	2800      	cmp	r0, #0
 800a904:	d0f3      	beq.n	800a8ee <rcl_wait_set_resize+0x1e2>
 800a906:	4622      	mov	r2, r4
 800a908:	4641      	mov	r1, r8
 800a90a:	f008 fd1f 	bl	801334c <memset>
 800a90e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a910:	60ee      	str	r6, [r5, #12]
 800a912:	f04f 0800 	mov.w	r8, #0
 800a916:	19f6      	adds	r6, r6, r7
 800a918:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a91c:	f8c4 8010 	str.w	r8, [r4, #16]
 800a920:	f43f af54 	beq.w	800a7cc <rcl_wait_set_resize+0xc0>
 800a924:	00b6      	lsls	r6, r6, #2
 800a926:	464a      	mov	r2, r9
 800a928:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a92a:	6960      	ldr	r0, [r4, #20]
 800a92c:	4631      	mov	r1, r6
 800a92e:	4798      	blx	r3
 800a930:	4681      	mov	r9, r0
 800a932:	6160      	str	r0, [r4, #20]
 800a934:	2800      	cmp	r0, #0
 800a936:	d076      	beq.n	800aa26 <rcl_wait_set_resize+0x31a>
 800a938:	4632      	mov	r2, r6
 800a93a:	4641      	mov	r1, r8
 800a93c:	f008 fd06 	bl	801334c <memset>
 800a940:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a942:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a946:	e74a      	b.n	800a7de <rcl_wait_set_resize+0xd2>
 800a948:	00bc      	lsls	r4, r7, #2
 800a94a:	6928      	ldr	r0, [r5, #16]
 800a94c:	464a      	mov	r2, r9
 800a94e:	4621      	mov	r1, r4
 800a950:	47c0      	blx	r8
 800a952:	6128      	str	r0, [r5, #16]
 800a954:	2800      	cmp	r0, #0
 800a956:	d0ca      	beq.n	800a8ee <rcl_wait_set_resize+0x1e2>
 800a958:	4622      	mov	r2, r4
 800a95a:	4631      	mov	r1, r6
 800a95c:	f008 fcf6 	bl	801334c <memset>
 800a960:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a962:	616f      	str	r7, [r5, #20]
 800a964:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800a968:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800a96c:	e749      	b.n	800a802 <rcl_wait_set_resize+0xf6>
 800a96e:	009c      	lsls	r4, r3, #2
 800a970:	69a8      	ldr	r0, [r5, #24]
 800a972:	464a      	mov	r2, r9
 800a974:	4621      	mov	r1, r4
 800a976:	47c0      	blx	r8
 800a978:	61a8      	str	r0, [r5, #24]
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d0b7      	beq.n	800a8ee <rcl_wait_set_resize+0x1e2>
 800a97e:	4622      	mov	r2, r4
 800a980:	4631      	mov	r1, r6
 800a982:	f008 fce3 	bl	801334c <memset>
 800a986:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800a988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a98a:	61eb      	str	r3, [r5, #28]
 800a98c:	6a38      	ldr	r0, [r7, #32]
 800a98e:	61fe      	str	r6, [r7, #28]
 800a990:	464a      	mov	r2, r9
 800a992:	4621      	mov	r1, r4
 800a994:	47c0      	blx	r8
 800a996:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a998:	6238      	str	r0, [r7, #32]
 800a99a:	6a1f      	ldr	r7, [r3, #32]
 800a99c:	2f00      	cmp	r7, #0
 800a99e:	d054      	beq.n	800aa4a <rcl_wait_set_resize+0x33e>
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	f008 fcd1 	bl	801334c <memset>
 800a9aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a9ac:	e73f      	b.n	800a82e <rcl_wait_set_resize+0x122>
 800a9ae:	6a28      	ldr	r0, [r5, #32]
 800a9b0:	b120      	cbz	r0, 800a9bc <rcl_wait_set_resize+0x2b0>
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	47c0      	blx	r8
 800a9b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a9ba:	622b      	str	r3, [r5, #32]
 800a9bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f43f af60 	beq.w	800a884 <rcl_wait_set_resize+0x178>
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	47c0      	blx	r8
 800a9c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800a9d0:	e758      	b.n	800a884 <rcl_wait_set_resize+0x178>
 800a9d2:	009c      	lsls	r4, r3, #2
 800a9d4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800a9d6:	463a      	mov	r2, r7
 800a9d8:	4621      	mov	r1, r4
 800a9da:	47c8      	blx	r9
 800a9dc:	62a8      	str	r0, [r5, #40]	@ 0x28
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d085      	beq.n	800a8ee <rcl_wait_set_resize+0x1e2>
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	f008 fcb1 	bl	801334c <memset>
 800a9ea:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800a9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a9f2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800a9f6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800a9fa:	463a      	mov	r2, r7
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	47c8      	blx	r9
 800aa00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aa02:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800aa06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa08:	b36b      	cbz	r3, 800aa66 <rcl_wait_set_resize+0x35a>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f008 fc9c 	bl	801334c <memset>
 800aa14:	4630      	mov	r0, r6
 800aa16:	b003      	add	sp, #12
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	200b      	movs	r0, #11
 800aa1e:	4770      	bx	lr
 800aa20:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800aa24:	e764      	b.n	800a8f0 <rcl_wait_set_resize+0x1e4>
 800aa26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aa28:	68a8      	ldr	r0, [r5, #8]
 800aa2a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800aa2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2e:	4798      	blx	r3
 800aa30:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aa32:	6928      	ldr	r0, [r5, #16]
 800aa34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa36:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800aa38:	f8c5 900c 	str.w	r9, [r5, #12]
 800aa3c:	f8c5 9008 	str.w	r9, [r5, #8]
 800aa40:	4790      	blx	r2
 800aa42:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800aa46:	200a      	movs	r0, #10
 800aa48:	e752      	b.n	800a8f0 <rcl_wait_set_resize+0x1e4>
 800aa4a:	69a8      	ldr	r0, [r5, #24]
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	47d0      	blx	sl
 800aa50:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800aa54:	200a      	movs	r0, #10
 800aa56:	e74b      	b.n	800a8f0 <rcl_wait_set_resize+0x1e4>
 800aa58:	6a28      	ldr	r0, [r5, #32]
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800aa62:	200a      	movs	r0, #10
 800aa64:	e744      	b.n	800a8f0 <rcl_wait_set_resize+0x1e4>
 800aa66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	47c0      	blx	r8
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	200a      	movs	r0, #10
 800aa72:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800aa76:	e73b      	b.n	800a8f0 <rcl_wait_set_resize+0x1e4>

0800aa78 <rcl_wait_set_init>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	4604      	mov	r4, r0
 800aa80:	a810      	add	r0, sp, #64	@ 0x40
 800aa82:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800aa86:	460f      	mov	r7, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	f7fd f970 	bl	8007d70 <rcutils_allocator_is_valid>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d06b      	beq.n	800ab6c <rcl_wait_set_init+0xf4>
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	d069      	beq.n	800ab6c <rcl_wait_set_init+0xf4>
 800aa98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800aa9a:	b125      	cbz	r5, 800aaa6 <rcl_wait_set_init+0x2e>
 800aa9c:	2564      	movs	r5, #100	@ 0x64
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	b004      	add	sp, #16
 800aaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa6:	f1ba 0f00 	cmp.w	sl, #0
 800aaaa:	d05f      	beq.n	800ab6c <rcl_wait_set_init+0xf4>
 800aaac:	4650      	mov	r0, sl
 800aaae:	f7fe fb3f 	bl	8009130 <rcl_context_is_valid>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d067      	beq.n	800ab86 <rcl_wait_set_init+0x10e>
 800aab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aab8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800aaba:	205c      	movs	r0, #92	@ 0x5c
 800aabc:	4798      	blx	r3
 800aabe:	6320      	str	r0, [r4, #48]	@ 0x30
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d062      	beq.n	800ab8a <rcl_wait_set_init+0x112>
 800aac4:	4629      	mov	r1, r5
 800aac6:	225c      	movs	r2, #92	@ 0x5c
 800aac8:	f008 fc40 	bl	801334c <memset>
 800aacc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800aad0:	eb03 0e02 	add.w	lr, r3, r2
 800aad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aad6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800aad8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800aadc:	449e      	add	lr, r3
 800aade:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aae2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800aae6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800aaea:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800aaee:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800aaf2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800aaf6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800aafa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800aafe:	f8da a000 	ldr.w	sl, [sl]
 800ab02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab04:	44c6      	add	lr, r8
 800ab06:	f8dc 3000 	ldr.w	r3, [ip]
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800ab10:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800ab14:	f002 fda4 	bl	800d660 <rmw_create_wait_set>
 800ab18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab1a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800ab1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ab1e:	b350      	cbz	r0, 800ab76 <rcl_wait_set_init+0xfe>
 800ab20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab22:	9302      	str	r3, [sp, #8]
 800ab24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	464b      	mov	r3, r9
 800ab30:	4639      	mov	r1, r7
 800ab32:	4620      	mov	r0, r4
 800ab34:	f7ff fdea 	bl	800a70c <rcl_wait_set_resize>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0af      	beq.n	800aa9e <rcl_wait_set_init+0x26>
 800ab3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab40:	bb2b      	cbnz	r3, 800ab8e <rcl_wait_set_init+0x116>
 800ab42:	2600      	movs	r6, #0
 800ab44:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800ab48:	9600      	str	r6, [sp, #0]
 800ab4a:	4633      	mov	r3, r6
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f7ff fddb 	bl	800a70c <rcl_wait_set_resize>
 800ab56:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d0a0      	beq.n	800aa9e <rcl_wait_set_init+0x26>
 800ab5c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ab5e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800ab60:	4798      	blx	r3
 800ab62:	4628      	mov	r0, r5
 800ab64:	6326      	str	r6, [r4, #48]	@ 0x30
 800ab66:	b004      	add	sp, #16
 800ab68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6c:	250b      	movs	r5, #11
 800ab6e:	4628      	mov	r0, r5
 800ab70:	b004      	add	sp, #16
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	2501      	movs	r5, #1
 800ab78:	f002 fd7c 	bl	800d674 <rmw_destroy_wait_set>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	bf18      	it	ne
 800ab80:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800ab84:	e7dd      	b.n	800ab42 <rcl_wait_set_init+0xca>
 800ab86:	2565      	movs	r5, #101	@ 0x65
 800ab88:	e789      	b.n	800aa9e <rcl_wait_set_init+0x26>
 800ab8a:	250a      	movs	r5, #10
 800ab8c:	e787      	b.n	800aa9e <rcl_wait_set_init+0x26>
 800ab8e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ab90:	e7f2      	b.n	800ab78 <rcl_wait_set_init+0x100>
 800ab92:	bf00      	nop

0800ab94 <rcl_wait_set_add_guard_condition>:
 800ab94:	b318      	cbz	r0, 800abde <rcl_wait_set_add_guard_condition+0x4a>
 800ab96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b30b      	cbz	r3, 800abe2 <rcl_wait_set_add_guard_condition+0x4e>
 800ab9e:	b319      	cbz	r1, 800abe8 <rcl_wait_set_add_guard_condition+0x54>
 800aba0:	68dd      	ldr	r5, [r3, #12]
 800aba2:	68c0      	ldr	r0, [r0, #12]
 800aba4:	4285      	cmp	r5, r0
 800aba6:	d217      	bcs.n	800abd8 <rcl_wait_set_add_guard_condition+0x44>
 800aba8:	68a0      	ldr	r0, [r4, #8]
 800abaa:	1c6e      	adds	r6, r5, #1
 800abac:	60de      	str	r6, [r3, #12]
 800abae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800abb2:	b102      	cbz	r2, 800abb6 <rcl_wait_set_add_guard_condition+0x22>
 800abb4:	6015      	str	r5, [r2, #0]
 800abb6:	4608      	mov	r0, r1
 800abb8:	f006 fda0 	bl	80116fc <rcl_guard_condition_get_rmw_handle>
 800abbc:	b150      	cbz	r0, 800abd4 <rcl_wait_set_add_guard_condition+0x40>
 800abbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800abc0:	6842      	ldr	r2, [r0, #4]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abc8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800abca:	6913      	ldr	r3, [r2, #16]
 800abcc:	3301      	adds	r3, #1
 800abce:	2000      	movs	r0, #0
 800abd0:	6113      	str	r3, [r2, #16]
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	2001      	movs	r0, #1
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	f240 3086 	movw	r0, #902	@ 0x386
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
 800abde:	200b      	movs	r0, #11
 800abe0:	4770      	bx	lr
 800abe2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	200b      	movs	r0, #11
 800abea:	bd70      	pop	{r4, r5, r6, pc}

0800abec <rcl_wait_set_add_timer>:
 800abec:	b328      	cbz	r0, 800ac3a <rcl_wait_set_add_timer+0x4e>
 800abee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	b31b      	cbz	r3, 800ac3e <rcl_wait_set_add_timer+0x52>
 800abf6:	b329      	cbz	r1, 800ac44 <rcl_wait_set_add_timer+0x58>
 800abf8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800abfa:	6965      	ldr	r5, [r4, #20]
 800abfc:	42a8      	cmp	r0, r5
 800abfe:	d219      	bcs.n	800ac34 <rcl_wait_set_add_timer+0x48>
 800ac00:	6925      	ldr	r5, [r4, #16]
 800ac02:	1c46      	adds	r6, r0, #1
 800ac04:	641e      	str	r6, [r3, #64]	@ 0x40
 800ac06:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800ac0a:	b102      	cbz	r2, 800ac0e <rcl_wait_set_add_timer+0x22>
 800ac0c:	6010      	str	r0, [r2, #0]
 800ac0e:	4608      	mov	r0, r1
 800ac10:	f7ff fba6 	bl	800a360 <rcl_timer_get_guard_condition>
 800ac14:	b168      	cbz	r0, 800ac32 <rcl_wait_set_add_timer+0x46>
 800ac16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ac18:	68e3      	ldr	r3, [r4, #12]
 800ac1a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	441d      	add	r5, r3
 800ac20:	f006 fd6c 	bl	80116fc <rcl_guard_condition_get_rmw_handle>
 800ac24:	b180      	cbz	r0, 800ac48 <rcl_wait_set_add_timer+0x5c>
 800ac26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ac28:	6842      	ldr	r2, [r0, #4]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac30:	2000      	movs	r0, #0
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	f240 3086 	movw	r0, #902	@ 0x386
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	200b      	movs	r0, #11
 800ac3c:	4770      	bx	lr
 800ac3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	200b      	movs	r0, #11
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	2001      	movs	r0, #1
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}

0800ac4c <rcl_wait_set_add_client>:
 800ac4c:	b318      	cbz	r0, 800ac96 <rcl_wait_set_add_client+0x4a>
 800ac4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	4604      	mov	r4, r0
 800ac54:	b30b      	cbz	r3, 800ac9a <rcl_wait_set_add_client+0x4e>
 800ac56:	b319      	cbz	r1, 800aca0 <rcl_wait_set_add_client+0x54>
 800ac58:	699d      	ldr	r5, [r3, #24]
 800ac5a:	69c0      	ldr	r0, [r0, #28]
 800ac5c:	4285      	cmp	r5, r0
 800ac5e:	d217      	bcs.n	800ac90 <rcl_wait_set_add_client+0x44>
 800ac60:	69a0      	ldr	r0, [r4, #24]
 800ac62:	1c6e      	adds	r6, r5, #1
 800ac64:	619e      	str	r6, [r3, #24]
 800ac66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ac6a:	b102      	cbz	r2, 800ac6e <rcl_wait_set_add_client+0x22>
 800ac6c:	6015      	str	r5, [r2, #0]
 800ac6e:	4608      	mov	r0, r1
 800ac70:	f7fe f9c6 	bl	8009000 <rcl_client_get_rmw_handle>
 800ac74:	b150      	cbz	r0, 800ac8c <rcl_wait_set_add_client+0x40>
 800ac76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ac78:	6842      	ldr	r2, [r0, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ac82:	69d3      	ldr	r3, [r2, #28]
 800ac84:	3301      	adds	r3, #1
 800ac86:	2000      	movs	r0, #0
 800ac88:	61d3      	str	r3, [r2, #28]
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	f240 3086 	movw	r0, #902	@ 0x386
 800ac94:	bd70      	pop	{r4, r5, r6, pc}
 800ac96:	200b      	movs	r0, #11
 800ac98:	4770      	bx	lr
 800ac9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	200b      	movs	r0, #11
 800aca2:	bd70      	pop	{r4, r5, r6, pc}

0800aca4 <rcl_wait_set_add_service>:
 800aca4:	b318      	cbz	r0, 800acee <rcl_wait_set_add_service+0x4a>
 800aca6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4604      	mov	r4, r0
 800acac:	b30b      	cbz	r3, 800acf2 <rcl_wait_set_add_service+0x4e>
 800acae:	b319      	cbz	r1, 800acf8 <rcl_wait_set_add_service+0x54>
 800acb0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800acb2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800acb4:	4285      	cmp	r5, r0
 800acb6:	d217      	bcs.n	800ace8 <rcl_wait_set_add_service+0x44>
 800acb8:	6a20      	ldr	r0, [r4, #32]
 800acba:	1c6e      	adds	r6, r5, #1
 800acbc:	625e      	str	r6, [r3, #36]	@ 0x24
 800acbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800acc2:	b102      	cbz	r2, 800acc6 <rcl_wait_set_add_service+0x22>
 800acc4:	6015      	str	r5, [r2, #0]
 800acc6:	4608      	mov	r0, r1
 800acc8:	f7ff f804 	bl	8009cd4 <rcl_service_get_rmw_handle>
 800accc:	b150      	cbz	r0, 800ace4 <rcl_wait_set_add_service+0x40>
 800acce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800acd0:	6842      	ldr	r2, [r0, #4]
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acd8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800acda:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800acdc:	3301      	adds	r3, #1
 800acde:	2000      	movs	r0, #0
 800ace0:	6293      	str	r3, [r2, #40]	@ 0x28
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	2001      	movs	r0, #1
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	f240 3086 	movw	r0, #902	@ 0x386
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	200b      	movs	r0, #11
 800acf0:	4770      	bx	lr
 800acf2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	200b      	movs	r0, #11
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	0000      	movs	r0, r0
	...

0800ad00 <rcl_wait>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	ed2d 8b02 	vpush	{d8}
 800ad08:	b08d      	sub	sp, #52	@ 0x34
 800ad0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f000 8143 	beq.w	800af9a <rcl_wait+0x29a>
 800ad14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800ad16:	4605      	mov	r5, r0
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	f000 8112 	beq.w	800af42 <rcl_wait+0x242>
 800ad1e:	6843      	ldr	r3, [r0, #4]
 800ad20:	b983      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad22:	68eb      	ldr	r3, [r5, #12]
 800ad24:	b973      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad26:	696b      	ldr	r3, [r5, #20]
 800ad28:	b963      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad2a:	69eb      	ldr	r3, [r5, #28]
 800ad2c:	b953      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad2e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ad30:	b943      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ad34:	b933      	cbnz	r3, 800ad44 <rcl_wait+0x44>
 800ad36:	f240 3085 	movw	r0, #901	@ 0x385
 800ad3a:	b00d      	add	sp, #52	@ 0x34
 800ad3c:	ecbd 8b02 	vpop	{d8}
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	f173 0300 	sbcs.w	r3, r3, #0
 800ad50:	f2c0 80f0 	blt.w	800af34 <rcl_wait+0x234>
 800ad54:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800ad58:	4643      	mov	r3, r8
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	f000 8133 	beq.w	800afc6 <rcl_wait+0x2c6>
 800ad60:	2400      	movs	r4, #0
 800ad62:	4613      	mov	r3, r2
 800ad64:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800afd8 <rcl_wait+0x2d8>
 800ad68:	46a2      	mov	sl, r4
 800ad6a:	46a3      	mov	fp, r4
 800ad6c:	f240 3921 	movw	r9, #801	@ 0x321
 800ad70:	4632      	mov	r2, r6
 800ad72:	e014      	b.n	800ad9e <rcl_wait+0x9e>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1e0      	bne.n	800ad3a <rcl_wait+0x3a>
 800ad78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad7c:	4542      	cmp	r2, r8
 800ad7e:	eb73 0107 	sbcs.w	r1, r3, r7
 800ad82:	da03      	bge.n	800ad8c <rcl_wait+0x8c>
 800ad84:	4690      	mov	r8, r2
 800ad86:	461f      	mov	r7, r3
 800ad88:	f04f 0b01 	mov.w	fp, #1
 800ad8c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800ad8e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ad90:	3401      	adds	r4, #1
 800ad92:	f14a 0a00 	adc.w	sl, sl, #0
 800ad96:	429c      	cmp	r4, r3
 800ad98:	f17a 0100 	sbcs.w	r1, sl, #0
 800ad9c:	d228      	bcs.n	800adf0 <rcl_wait+0xf0>
 800ad9e:	6928      	ldr	r0, [r5, #16]
 800ada0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ada4:	a908      	add	r1, sp, #32
 800ada6:	00a6      	lsls	r6, r4, #2
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d0f1      	beq.n	800ad90 <rcl_wait+0x90>
 800adac:	68eb      	ldr	r3, [r5, #12]
 800adae:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800adb2:	4423      	add	r3, r4
 800adb4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800adb8:	f1be 0f00 	cmp.w	lr, #0
 800adbc:	d006      	beq.n	800adcc <rcl_wait+0xcc>
 800adbe:	6913      	ldr	r3, [r2, #16]
 800adc0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800adc4:	3301      	adds	r3, #1
 800adc6:	6113      	str	r3, [r2, #16]
 800adc8:	692b      	ldr	r3, [r5, #16]
 800adca:	5998      	ldr	r0, [r3, r6]
 800adcc:	ed8d 8b08 	vstr	d8, [sp, #32]
 800add0:	f7ff fa94 	bl	800a2fc <rcl_timer_get_time_until_next_call>
 800add4:	4548      	cmp	r0, r9
 800add6:	d1cd      	bne.n	800ad74 <rcl_wait+0x74>
 800add8:	692b      	ldr	r3, [r5, #16]
 800adda:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800addc:	2100      	movs	r1, #0
 800adde:	5199      	str	r1, [r3, r6]
 800ade0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800ade2:	3401      	adds	r4, #1
 800ade4:	f14a 0a00 	adc.w	sl, sl, #0
 800ade8:	429c      	cmp	r4, r3
 800adea:	f17a 0100 	sbcs.w	r1, sl, #0
 800adee:	d3d6      	bcc.n	800ad9e <rcl_wait+0x9e>
 800adf0:	4616      	mov	r6, r2
 800adf2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	46d9      	mov	r9, fp
 800adfa:	f040 80a9 	bne.w	800af50 <rcl_wait+0x250>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2200      	movs	r2, #0
 800ae02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae06:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800ae0a:	ab08      	add	r3, sp, #32
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800ae10:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800ae14:	e9cd 3200 	strd	r3, r2, [sp]
 800ae18:	f106 0110 	add.w	r1, r6, #16
 800ae1c:	f106 031c 	add.w	r3, r6, #28
 800ae20:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800ae24:	1d30      	adds	r0, r6, #4
 800ae26:	f002 faa3 	bl	800d370 <rmw_wait>
 800ae2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ae2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae2e:	4680      	mov	r8, r0
 800ae30:	b1ca      	cbz	r2, 800ae66 <rcl_wait+0x166>
 800ae32:	2400      	movs	r4, #0
 800ae34:	4627      	mov	r7, r4
 800ae36:	692a      	ldr	r2, [r5, #16]
 800ae38:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800ae3c:	f10d 011f 	add.w	r1, sp, #31
 800ae40:	00a6      	lsls	r6, r4, #2
 800ae42:	b160      	cbz	r0, 800ae5e <rcl_wait+0x15e>
 800ae44:	f88d 701f 	strb.w	r7, [sp, #31]
 800ae48:	f7ff fa1e 	bl	800a288 <rcl_timer_is_ready>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	f47f af74 	bne.w	800ad3a <rcl_wait+0x3a>
 800ae52:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ae56:	b90b      	cbnz	r3, 800ae5c <rcl_wait+0x15c>
 800ae58:	692a      	ldr	r2, [r5, #16]
 800ae5a:	5193      	str	r3, [r2, r6]
 800ae5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ae5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae60:	3401      	adds	r4, #1
 800ae62:	42a2      	cmp	r2, r4
 800ae64:	d8e7      	bhi.n	800ae36 <rcl_wait+0x136>
 800ae66:	f038 0002 	bics.w	r0, r8, #2
 800ae6a:	f040 8090 	bne.w	800af8e <rcl_wait+0x28e>
 800ae6e:	686e      	ldr	r6, [r5, #4]
 800ae70:	4602      	mov	r2, r0
 800ae72:	b91e      	cbnz	r6, 800ae7c <rcl_wait+0x17c>
 800ae74:	e00d      	b.n	800ae92 <rcl_wait+0x192>
 800ae76:	3201      	adds	r2, #1
 800ae78:	42b2      	cmp	r2, r6
 800ae7a:	d00a      	beq.n	800ae92 <rcl_wait+0x192>
 800ae7c:	6899      	ldr	r1, [r3, #8]
 800ae7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ae82:	2900      	cmp	r1, #0
 800ae84:	d1f7      	bne.n	800ae76 <rcl_wait+0x176>
 800ae86:	682c      	ldr	r4, [r5, #0]
 800ae88:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ae8c:	3201      	adds	r2, #1
 800ae8e:	42b2      	cmp	r2, r6
 800ae90:	d1f4      	bne.n	800ae7c <rcl_wait+0x17c>
 800ae92:	68ee      	ldr	r6, [r5, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	b91e      	cbnz	r6, 800aea0 <rcl_wait+0x1a0>
 800ae98:	e00d      	b.n	800aeb6 <rcl_wait+0x1b6>
 800ae9a:	3201      	adds	r2, #1
 800ae9c:	42b2      	cmp	r2, r6
 800ae9e:	d00a      	beq.n	800aeb6 <rcl_wait+0x1b6>
 800aea0:	6959      	ldr	r1, [r3, #20]
 800aea2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d1f7      	bne.n	800ae9a <rcl_wait+0x19a>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800aeb0:	3201      	adds	r2, #1
 800aeb2:	42b2      	cmp	r2, r6
 800aeb4:	d1f4      	bne.n	800aea0 <rcl_wait+0x1a0>
 800aeb6:	69ee      	ldr	r6, [r5, #28]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	b91e      	cbnz	r6, 800aec4 <rcl_wait+0x1c4>
 800aebc:	e00d      	b.n	800aeda <rcl_wait+0x1da>
 800aebe:	3201      	adds	r2, #1
 800aec0:	42b2      	cmp	r2, r6
 800aec2:	d00a      	beq.n	800aeda <rcl_wait+0x1da>
 800aec4:	6a19      	ldr	r1, [r3, #32]
 800aec6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d1f7      	bne.n	800aebe <rcl_wait+0x1be>
 800aece:	69ac      	ldr	r4, [r5, #24]
 800aed0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800aed4:	3201      	adds	r2, #1
 800aed6:	42b2      	cmp	r2, r6
 800aed8:	d1f4      	bne.n	800aec4 <rcl_wait+0x1c4>
 800aeda:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800aedc:	2200      	movs	r2, #0
 800aede:	b91e      	cbnz	r6, 800aee8 <rcl_wait+0x1e8>
 800aee0:	e00d      	b.n	800aefe <rcl_wait+0x1fe>
 800aee2:	3201      	adds	r2, #1
 800aee4:	4296      	cmp	r6, r2
 800aee6:	d00a      	beq.n	800aefe <rcl_wait+0x1fe>
 800aee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aeea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800aeee:	2900      	cmp	r1, #0
 800aef0:	d1f7      	bne.n	800aee2 <rcl_wait+0x1e2>
 800aef2:	6a2c      	ldr	r4, [r5, #32]
 800aef4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800aef8:	3201      	adds	r2, #1
 800aefa:	4296      	cmp	r6, r2
 800aefc:	d1f4      	bne.n	800aee8 <rcl_wait+0x1e8>
 800aefe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800af00:	2200      	movs	r2, #0
 800af02:	b91e      	cbnz	r6, 800af0c <rcl_wait+0x20c>
 800af04:	e00d      	b.n	800af22 <rcl_wait+0x222>
 800af06:	3201      	adds	r2, #1
 800af08:	42b2      	cmp	r2, r6
 800af0a:	d00a      	beq.n	800af22 <rcl_wait+0x222>
 800af0c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800af0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800af12:	2900      	cmp	r1, #0
 800af14:	d1f7      	bne.n	800af06 <rcl_wait+0x206>
 800af16:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800af18:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800af1c:	3201      	adds	r2, #1
 800af1e:	42b2      	cmp	r2, r6
 800af20:	d1f4      	bne.n	800af0c <rcl_wait+0x20c>
 800af22:	f1b8 0f02 	cmp.w	r8, #2
 800af26:	f47f af08 	bne.w	800ad3a <rcl_wait+0x3a>
 800af2a:	464b      	mov	r3, r9
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bf08      	it	eq
 800af30:	2002      	moveq	r0, #2
 800af32:	e702      	b.n	800ad3a <rcl_wait+0x3a>
 800af34:	2a00      	cmp	r2, #0
 800af36:	d03a      	beq.n	800afae <rcl_wait+0x2ae>
 800af38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800af3c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800af40:	e70e      	b.n	800ad60 <rcl_wait+0x60>
 800af42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800af46:	b00d      	add	sp, #52	@ 0x34
 800af48:	ecbd 8b02 	vpop	{d8}
 800af4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af50:	9b04      	ldr	r3, [sp, #16]
 800af52:	2b01      	cmp	r3, #1
 800af54:	9b05      	ldr	r3, [sp, #20]
 800af56:	f173 0300 	sbcs.w	r3, r3, #0
 800af5a:	db24      	blt.n	800afa6 <rcl_wait+0x2a6>
 800af5c:	2f00      	cmp	r7, #0
 800af5e:	bfbc      	itt	lt
 800af60:	f04f 0800 	movlt.w	r8, #0
 800af64:	4647      	movlt	r7, r8
 800af66:	a31e      	add	r3, pc, #120	@ (adr r3, 800afe0 <rcl_wait+0x2e0>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	4640      	mov	r0, r8
 800af6e:	4639      	mov	r1, r7
 800af70:	f7f5 f99e 	bl	80002b0 <__aeabi_ldivmod>
 800af74:	a31a      	add	r3, pc, #104	@ (adr r3, 800afe0 <rcl_wait+0x2e0>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af7e:	4640      	mov	r0, r8
 800af80:	4639      	mov	r1, r7
 800af82:	f7f5 f995 	bl	80002b0 <__aeabi_ldivmod>
 800af86:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800af8a:	ab08      	add	r3, sp, #32
 800af8c:	e73e      	b.n	800ae0c <rcl_wait+0x10c>
 800af8e:	2001      	movs	r0, #1
 800af90:	b00d      	add	sp, #52	@ 0x34
 800af92:	ecbd 8b02 	vpop	{d8}
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	200b      	movs	r0, #11
 800af9c:	b00d      	add	sp, #52	@ 0x34
 800af9e:	ecbd 8b02 	vpop	{d8}
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	465b      	mov	r3, fp
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1d7      	bne.n	800af5c <rcl_wait+0x25c>
 800afac:	e72e      	b.n	800ae0c <rcl_wait+0x10c>
 800afae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800afb2:	430b      	orrs	r3, r1
 800afb4:	bf08      	it	eq
 800afb6:	4691      	moveq	r9, r2
 800afb8:	f43f af21 	beq.w	800adfe <rcl_wait+0xfe>
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800afc2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	9b05      	ldr	r3, [sp, #20]
 800afca:	f173 0300 	sbcs.w	r3, r3, #0
 800afce:	f04f 0300 	mov.w	r3, #0
 800afd2:	4699      	mov	r9, r3
 800afd4:	dac2      	bge.n	800af5c <rcl_wait+0x25c>
 800afd6:	e719      	b.n	800ae0c <rcl_wait+0x10c>
 800afd8:	ffffffff 	.word	0xffffffff
 800afdc:	7fffffff 	.word	0x7fffffff
 800afe0:	3b9aca00 	.word	0x3b9aca00
 800afe4:	00000000 	.word	0x00000000

0800afe8 <rcl_action_take_goal_response>:
 800afe8:	2800      	cmp	r0, #0
 800afea:	d039      	beq.n	800b060 <rcl_action_take_goal_response+0x78>
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4604      	mov	r4, r0
 800aff0:	6800      	ldr	r0, [r0, #0]
 800aff2:	b380      	cbz	r0, 800b056 <rcl_action_take_goal_response+0x6e>
 800aff4:	460d      	mov	r5, r1
 800aff6:	4616      	mov	r6, r2
 800aff8:	f7fe f886 	bl	8009108 <rcl_client_is_valid>
 800affc:	b330      	cbz	r0, 800b04c <rcl_action_take_goal_response+0x64>
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	3004      	adds	r0, #4
 800b002:	f7fe f881 	bl	8009108 <rcl_client_is_valid>
 800b006:	b308      	cbz	r0, 800b04c <rcl_action_take_goal_response+0x64>
 800b008:	6820      	ldr	r0, [r4, #0]
 800b00a:	3008      	adds	r0, #8
 800b00c:	f7fe f87c 	bl	8009108 <rcl_client_is_valid>
 800b010:	b1e0      	cbz	r0, 800b04c <rcl_action_take_goal_response+0x64>
 800b012:	6820      	ldr	r0, [r4, #0]
 800b014:	300c      	adds	r0, #12
 800b016:	f7fe ffff 	bl	800a018 <rcl_subscription_is_valid>
 800b01a:	b1b8      	cbz	r0, 800b04c <rcl_action_take_goal_response+0x64>
 800b01c:	6820      	ldr	r0, [r4, #0]
 800b01e:	3010      	adds	r0, #16
 800b020:	f7fe fffa 	bl	800a018 <rcl_subscription_is_valid>
 800b024:	b190      	cbz	r0, 800b04c <rcl_action_take_goal_response+0x64>
 800b026:	b1cd      	cbz	r5, 800b05c <rcl_action_take_goal_response+0x74>
 800b028:	b1c6      	cbz	r6, 800b05c <rcl_action_take_goal_response+0x74>
 800b02a:	6820      	ldr	r0, [r4, #0]
 800b02c:	4632      	mov	r2, r6
 800b02e:	4629      	mov	r1, r5
 800b030:	f7fe f822 	bl	8009078 <rcl_take_response>
 800b034:	b148      	cbz	r0, 800b04a <rcl_action_take_goal_response+0x62>
 800b036:	280a      	cmp	r0, #10
 800b038:	d007      	beq.n	800b04a <rcl_action_take_goal_response+0x62>
 800b03a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b03e:	f640 0337 	movw	r3, #2103	@ 0x837
 800b042:	4290      	cmp	r0, r2
 800b044:	bf0c      	ite	eq
 800b046:	4618      	moveq	r0, r3
 800b048:	2001      	movne	r0, #1
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	f7fc feb4 	bl	8007db8 <rcutils_reset_error>
 800b050:	f640 0036 	movw	r0, #2102	@ 0x836
 800b054:	bd70      	pop	{r4, r5, r6, pc}
 800b056:	f640 0036 	movw	r0, #2102	@ 0x836
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	200b      	movs	r0, #11
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	f640 0036 	movw	r0, #2102	@ 0x836
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <rcl_action_send_result_request>:
 800b068:	b390      	cbz	r0, 800b0d0 <rcl_action_send_result_request+0x68>
 800b06a:	b570      	push	{r4, r5, r6, lr}
 800b06c:	4604      	mov	r4, r0
 800b06e:	6800      	ldr	r0, [r0, #0]
 800b070:	b348      	cbz	r0, 800b0c6 <rcl_action_send_result_request+0x5e>
 800b072:	460d      	mov	r5, r1
 800b074:	4616      	mov	r6, r2
 800b076:	f7fe f847 	bl	8009108 <rcl_client_is_valid>
 800b07a:	b1f8      	cbz	r0, 800b0bc <rcl_action_send_result_request+0x54>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	3004      	adds	r0, #4
 800b080:	f7fe f842 	bl	8009108 <rcl_client_is_valid>
 800b084:	b1d0      	cbz	r0, 800b0bc <rcl_action_send_result_request+0x54>
 800b086:	6820      	ldr	r0, [r4, #0]
 800b088:	3008      	adds	r0, #8
 800b08a:	f7fe f83d 	bl	8009108 <rcl_client_is_valid>
 800b08e:	b1a8      	cbz	r0, 800b0bc <rcl_action_send_result_request+0x54>
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	300c      	adds	r0, #12
 800b094:	f7fe ffc0 	bl	800a018 <rcl_subscription_is_valid>
 800b098:	b180      	cbz	r0, 800b0bc <rcl_action_send_result_request+0x54>
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	3010      	adds	r0, #16
 800b09e:	f7fe ffbb 	bl	800a018 <rcl_subscription_is_valid>
 800b0a2:	b158      	cbz	r0, 800b0bc <rcl_action_send_result_request+0x54>
 800b0a4:	b195      	cbz	r5, 800b0cc <rcl_action_send_result_request+0x64>
 800b0a6:	b18e      	cbz	r6, 800b0cc <rcl_action_send_result_request+0x64>
 800b0a8:	6820      	ldr	r0, [r4, #0]
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	3008      	adds	r0, #8
 800b0b0:	f7fd ffac 	bl	800900c <rcl_send_request>
 800b0b4:	3800      	subs	r0, #0
 800b0b6:	bf18      	it	ne
 800b0b8:	2001      	movne	r0, #1
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	f7fc fe7c 	bl	8007db8 <rcutils_reset_error>
 800b0c0:	f640 0036 	movw	r0, #2102	@ 0x836
 800b0c4:	bd70      	pop	{r4, r5, r6, pc}
 800b0c6:	f640 0036 	movw	r0, #2102	@ 0x836
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	200b      	movs	r0, #11
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	f640 0036 	movw	r0, #2102	@ 0x836
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop

0800b0d8 <rcl_action_take_result_response>:
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d03a      	beq.n	800b152 <rcl_action_take_result_response+0x7a>
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	6800      	ldr	r0, [r0, #0]
 800b0e2:	b388      	cbz	r0, 800b148 <rcl_action_take_result_response+0x70>
 800b0e4:	460d      	mov	r5, r1
 800b0e6:	4616      	mov	r6, r2
 800b0e8:	f7fe f80e 	bl	8009108 <rcl_client_is_valid>
 800b0ec:	b338      	cbz	r0, 800b13e <rcl_action_take_result_response+0x66>
 800b0ee:	6820      	ldr	r0, [r4, #0]
 800b0f0:	3004      	adds	r0, #4
 800b0f2:	f7fe f809 	bl	8009108 <rcl_client_is_valid>
 800b0f6:	b310      	cbz	r0, 800b13e <rcl_action_take_result_response+0x66>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	3008      	adds	r0, #8
 800b0fc:	f7fe f804 	bl	8009108 <rcl_client_is_valid>
 800b100:	b1e8      	cbz	r0, 800b13e <rcl_action_take_result_response+0x66>
 800b102:	6820      	ldr	r0, [r4, #0]
 800b104:	300c      	adds	r0, #12
 800b106:	f7fe ff87 	bl	800a018 <rcl_subscription_is_valid>
 800b10a:	b1c0      	cbz	r0, 800b13e <rcl_action_take_result_response+0x66>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	3010      	adds	r0, #16
 800b110:	f7fe ff82 	bl	800a018 <rcl_subscription_is_valid>
 800b114:	b198      	cbz	r0, 800b13e <rcl_action_take_result_response+0x66>
 800b116:	b1d5      	cbz	r5, 800b14e <rcl_action_take_result_response+0x76>
 800b118:	b1ce      	cbz	r6, 800b14e <rcl_action_take_result_response+0x76>
 800b11a:	6820      	ldr	r0, [r4, #0]
 800b11c:	4632      	mov	r2, r6
 800b11e:	4629      	mov	r1, r5
 800b120:	3008      	adds	r0, #8
 800b122:	f7fd ffa9 	bl	8009078 <rcl_take_response>
 800b126:	b148      	cbz	r0, 800b13c <rcl_action_take_result_response+0x64>
 800b128:	280a      	cmp	r0, #10
 800b12a:	d007      	beq.n	800b13c <rcl_action_take_result_response+0x64>
 800b12c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b130:	f640 0337 	movw	r3, #2103	@ 0x837
 800b134:	4290      	cmp	r0, r2
 800b136:	bf0c      	ite	eq
 800b138:	4618      	moveq	r0, r3
 800b13a:	2001      	movne	r0, #1
 800b13c:	bd70      	pop	{r4, r5, r6, pc}
 800b13e:	f7fc fe3b 	bl	8007db8 <rcutils_reset_error>
 800b142:	f640 0036 	movw	r0, #2102	@ 0x836
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	f640 0036 	movw	r0, #2102	@ 0x836
 800b14c:	bd70      	pop	{r4, r5, r6, pc}
 800b14e:	200b      	movs	r0, #11
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	f640 0036 	movw	r0, #2102	@ 0x836
 800b156:	4770      	bx	lr

0800b158 <rcl_action_take_cancel_response>:
 800b158:	2800      	cmp	r0, #0
 800b15a:	d03a      	beq.n	800b1d2 <rcl_action_take_cancel_response+0x7a>
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4604      	mov	r4, r0
 800b160:	6800      	ldr	r0, [r0, #0]
 800b162:	b388      	cbz	r0, 800b1c8 <rcl_action_take_cancel_response+0x70>
 800b164:	460d      	mov	r5, r1
 800b166:	4616      	mov	r6, r2
 800b168:	f7fd ffce 	bl	8009108 <rcl_client_is_valid>
 800b16c:	b338      	cbz	r0, 800b1be <rcl_action_take_cancel_response+0x66>
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	3004      	adds	r0, #4
 800b172:	f7fd ffc9 	bl	8009108 <rcl_client_is_valid>
 800b176:	b310      	cbz	r0, 800b1be <rcl_action_take_cancel_response+0x66>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	3008      	adds	r0, #8
 800b17c:	f7fd ffc4 	bl	8009108 <rcl_client_is_valid>
 800b180:	b1e8      	cbz	r0, 800b1be <rcl_action_take_cancel_response+0x66>
 800b182:	6820      	ldr	r0, [r4, #0]
 800b184:	300c      	adds	r0, #12
 800b186:	f7fe ff47 	bl	800a018 <rcl_subscription_is_valid>
 800b18a:	b1c0      	cbz	r0, 800b1be <rcl_action_take_cancel_response+0x66>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	3010      	adds	r0, #16
 800b190:	f7fe ff42 	bl	800a018 <rcl_subscription_is_valid>
 800b194:	b198      	cbz	r0, 800b1be <rcl_action_take_cancel_response+0x66>
 800b196:	b1d5      	cbz	r5, 800b1ce <rcl_action_take_cancel_response+0x76>
 800b198:	b1ce      	cbz	r6, 800b1ce <rcl_action_take_cancel_response+0x76>
 800b19a:	6820      	ldr	r0, [r4, #0]
 800b19c:	4632      	mov	r2, r6
 800b19e:	4629      	mov	r1, r5
 800b1a0:	3004      	adds	r0, #4
 800b1a2:	f7fd ff69 	bl	8009078 <rcl_take_response>
 800b1a6:	b148      	cbz	r0, 800b1bc <rcl_action_take_cancel_response+0x64>
 800b1a8:	280a      	cmp	r0, #10
 800b1aa:	d007      	beq.n	800b1bc <rcl_action_take_cancel_response+0x64>
 800b1ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b1b0:	f640 0337 	movw	r3, #2103	@ 0x837
 800b1b4:	4290      	cmp	r0, r2
 800b1b6:	bf0c      	ite	eq
 800b1b8:	4618      	moveq	r0, r3
 800b1ba:	2001      	movne	r0, #1
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	f7fc fdfb 	bl	8007db8 <rcutils_reset_error>
 800b1c2:	f640 0036 	movw	r0, #2102	@ 0x836
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	f640 0036 	movw	r0, #2102	@ 0x836
 800b1cc:	bd70      	pop	{r4, r5, r6, pc}
 800b1ce:	200b      	movs	r0, #11
 800b1d0:	bd70      	pop	{r4, r5, r6, pc}
 800b1d2:	f640 0036 	movw	r0, #2102	@ 0x836
 800b1d6:	4770      	bx	lr

0800b1d8 <rcl_action_take_feedback>:
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d038      	beq.n	800b24e <rcl_action_take_feedback+0x76>
 800b1dc:	b530      	push	{r4, r5, lr}
 800b1de:	4604      	mov	r4, r0
 800b1e0:	6800      	ldr	r0, [r0, #0]
 800b1e2:	b091      	sub	sp, #68	@ 0x44
 800b1e4:	b378      	cbz	r0, 800b246 <rcl_action_take_feedback+0x6e>
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	f7fd ff8e 	bl	8009108 <rcl_client_is_valid>
 800b1ec:	b328      	cbz	r0, 800b23a <rcl_action_take_feedback+0x62>
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	3004      	adds	r0, #4
 800b1f2:	f7fd ff89 	bl	8009108 <rcl_client_is_valid>
 800b1f6:	b300      	cbz	r0, 800b23a <rcl_action_take_feedback+0x62>
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	3008      	adds	r0, #8
 800b1fc:	f7fd ff84 	bl	8009108 <rcl_client_is_valid>
 800b200:	b1d8      	cbz	r0, 800b23a <rcl_action_take_feedback+0x62>
 800b202:	6820      	ldr	r0, [r4, #0]
 800b204:	300c      	adds	r0, #12
 800b206:	f7fe ff07 	bl	800a018 <rcl_subscription_is_valid>
 800b20a:	b1b0      	cbz	r0, 800b23a <rcl_action_take_feedback+0x62>
 800b20c:	6820      	ldr	r0, [r4, #0]
 800b20e:	3010      	adds	r0, #16
 800b210:	f7fe ff02 	bl	800a018 <rcl_subscription_is_valid>
 800b214:	b188      	cbz	r0, 800b23a <rcl_action_take_feedback+0x62>
 800b216:	b1ed      	cbz	r5, 800b254 <rcl_action_take_feedback+0x7c>
 800b218:	6820      	ldr	r0, [r4, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	466a      	mov	r2, sp
 800b21e:	4629      	mov	r1, r5
 800b220:	300c      	adds	r0, #12
 800b222:	f7fe fe9b 	bl	8009f5c <rcl_take>
 800b226:	b160      	cbz	r0, 800b242 <rcl_action_take_feedback+0x6a>
 800b228:	f240 1391 	movw	r3, #401	@ 0x191
 800b22c:	4298      	cmp	r0, r3
 800b22e:	d014      	beq.n	800b25a <rcl_action_take_feedback+0x82>
 800b230:	280a      	cmp	r0, #10
 800b232:	bf18      	it	ne
 800b234:	2001      	movne	r0, #1
 800b236:	b011      	add	sp, #68	@ 0x44
 800b238:	bd30      	pop	{r4, r5, pc}
 800b23a:	f7fc fdbd 	bl	8007db8 <rcutils_reset_error>
 800b23e:	f640 0036 	movw	r0, #2102	@ 0x836
 800b242:	b011      	add	sp, #68	@ 0x44
 800b244:	bd30      	pop	{r4, r5, pc}
 800b246:	f640 0036 	movw	r0, #2102	@ 0x836
 800b24a:	b011      	add	sp, #68	@ 0x44
 800b24c:	bd30      	pop	{r4, r5, pc}
 800b24e:	f640 0036 	movw	r0, #2102	@ 0x836
 800b252:	4770      	bx	lr
 800b254:	200b      	movs	r0, #11
 800b256:	b011      	add	sp, #68	@ 0x44
 800b258:	bd30      	pop	{r4, r5, pc}
 800b25a:	f640 0037 	movw	r0, #2103	@ 0x837
 800b25e:	e7f0      	b.n	800b242 <rcl_action_take_feedback+0x6a>

0800b260 <rcl_action_wait_set_add_action_client>:
 800b260:	2800      	cmp	r0, #0
 800b262:	d048      	beq.n	800b2f6 <rcl_action_wait_set_add_action_client+0x96>
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	460c      	mov	r4, r1
 800b268:	2900      	cmp	r1, #0
 800b26a:	d03c      	beq.n	800b2e6 <rcl_action_wait_set_add_action_client+0x86>
 800b26c:	4605      	mov	r5, r0
 800b26e:	6808      	ldr	r0, [r1, #0]
 800b270:	2800      	cmp	r0, #0
 800b272:	d038      	beq.n	800b2e6 <rcl_action_wait_set_add_action_client+0x86>
 800b274:	4617      	mov	r7, r2
 800b276:	461e      	mov	r6, r3
 800b278:	f7fd ff46 	bl	8009108 <rcl_client_is_valid>
 800b27c:	b3b0      	cbz	r0, 800b2ec <rcl_action_wait_set_add_action_client+0x8c>
 800b27e:	6820      	ldr	r0, [r4, #0]
 800b280:	3004      	adds	r0, #4
 800b282:	f7fd ff41 	bl	8009108 <rcl_client_is_valid>
 800b286:	b388      	cbz	r0, 800b2ec <rcl_action_wait_set_add_action_client+0x8c>
 800b288:	6820      	ldr	r0, [r4, #0]
 800b28a:	3008      	adds	r0, #8
 800b28c:	f7fd ff3c 	bl	8009108 <rcl_client_is_valid>
 800b290:	b360      	cbz	r0, 800b2ec <rcl_action_wait_set_add_action_client+0x8c>
 800b292:	6820      	ldr	r0, [r4, #0]
 800b294:	300c      	adds	r0, #12
 800b296:	f7fe febf 	bl	800a018 <rcl_subscription_is_valid>
 800b29a:	b338      	cbz	r0, 800b2ec <rcl_action_wait_set_add_action_client+0x8c>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	3010      	adds	r0, #16
 800b2a0:	f7fe feba 	bl	800a018 <rcl_subscription_is_valid>
 800b2a4:	b310      	cbz	r0, 800b2ec <rcl_action_wait_set_add_action_client+0x8c>
 800b2a6:	6821      	ldr	r1, [r4, #0]
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800b2ae:	f7ff fccd 	bl	800ac4c <rcl_wait_set_add_client>
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <rcl_action_wait_set_add_action_client+0x84>
 800b2b4:	6821      	ldr	r1, [r4, #0]
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800b2bc:	3104      	adds	r1, #4
 800b2be:	f7ff fcc5 	bl	800ac4c <rcl_wait_set_add_client>
 800b2c2:	b978      	cbnz	r0, 800b2e4 <rcl_action_wait_set_add_action_client+0x84>
 800b2c4:	6821      	ldr	r1, [r4, #0]
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800b2cc:	3108      	adds	r1, #8
 800b2ce:	f7ff fcbd 	bl	800ac4c <rcl_wait_set_add_client>
 800b2d2:	b938      	cbnz	r0, 800b2e4 <rcl_action_wait_set_add_action_client+0x84>
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800b2dc:	310c      	adds	r1, #12
 800b2de:	f7ff f96d 	bl	800a5bc <rcl_wait_set_add_subscription>
 800b2e2:	b158      	cbz	r0, 800b2fc <rcl_action_wait_set_add_action_client+0x9c>
 800b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e6:	f640 0036 	movw	r0, #2102	@ 0x836
 800b2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ec:	f7fc fd64 	bl	8007db8 <rcutils_reset_error>
 800b2f0:	f640 0036 	movw	r0, #2102	@ 0x836
 800b2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b2fa:	4770      	bx	lr
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	4628      	mov	r0, r5
 800b300:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800b304:	3110      	adds	r1, #16
 800b306:	f7ff f959 	bl	800a5bc <rcl_wait_set_add_subscription>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d1ea      	bne.n	800b2e4 <rcl_action_wait_set_add_action_client+0x84>
 800b30e:	b11f      	cbz	r7, 800b318 <rcl_action_wait_set_add_action_client+0xb8>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800b316:	603b      	str	r3, [r7, #0]
 800b318:	2e00      	cmp	r6, #0
 800b31a:	d0e3      	beq.n	800b2e4 <rcl_action_wait_set_add_action_client+0x84>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b326:	bf00      	nop

0800b328 <rcl_action_client_wait_set_get_entities_ready>:
 800b328:	2800      	cmp	r0, #0
 800b32a:	f000 808d 	beq.w	800b448 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800b32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b332:	460c      	mov	r4, r1
 800b334:	2900      	cmp	r1, #0
 800b336:	d077      	beq.n	800b428 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b338:	4605      	mov	r5, r0
 800b33a:	6808      	ldr	r0, [r1, #0]
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d073      	beq.n	800b428 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800b340:	4616      	mov	r6, r2
 800b342:	461f      	mov	r7, r3
 800b344:	f7fd fee0 	bl	8009108 <rcl_client_is_valid>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d071      	beq.n	800b430 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	3004      	adds	r0, #4
 800b350:	f7fd feda 	bl	8009108 <rcl_client_is_valid>
 800b354:	2800      	cmp	r0, #0
 800b356:	d06b      	beq.n	800b430 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	3008      	adds	r0, #8
 800b35c:	f7fd fed4 	bl	8009108 <rcl_client_is_valid>
 800b360:	2800      	cmp	r0, #0
 800b362:	d065      	beq.n	800b430 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	300c      	adds	r0, #12
 800b368:	f7fe fe56 	bl	800a018 <rcl_subscription_is_valid>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d05f      	beq.n	800b430 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	3010      	adds	r0, #16
 800b374:	f7fe fe50 	bl	800a018 <rcl_subscription_is_valid>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d059      	beq.n	800b430 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800b37c:	2e00      	cmp	r6, #0
 800b37e:	d060      	beq.n	800b442 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800b380:	2f00      	cmp	r7, #0
 800b382:	d05e      	beq.n	800b442 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800b384:	9b06      	ldr	r3, [sp, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d05b      	beq.n	800b442 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800b38a:	9b07      	ldr	r3, [sp, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d058      	beq.n	800b442 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d055      	beq.n	800b442 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	686a      	ldr	r2, [r5, #4]
 800b39a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800b39e:	428a      	cmp	r2, r1
 800b3a0:	d94c      	bls.n	800b43c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800b3a2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800b3a6:	4282      	cmp	r2, r0
 800b3a8:	d948      	bls.n	800b43c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800b3aa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800b3ae:	69ea      	ldr	r2, [r5, #28]
 800b3b0:	42a2      	cmp	r2, r4
 800b3b2:	d943      	bls.n	800b43c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800b3b4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800b3b8:	4562      	cmp	r2, ip
 800b3ba:	d93f      	bls.n	800b43c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800b3bc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800b3c0:	4572      	cmp	r2, lr
 800b3c2:	d93b      	bls.n	800b43c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800b3c4:	69aa      	ldr	r2, [r5, #24]
 800b3c6:	682d      	ldr	r5, [r5, #0]
 800b3c8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800b3cc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800b3d0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800b3d4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800b3d8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800b3dc:	f103 0c0c 	add.w	ip, r3, #12
 800b3e0:	eba5 050c 	sub.w	r5, r5, ip
 800b3e4:	fab5 f585 	clz	r5, r5
 800b3e8:	096d      	lsrs	r5, r5, #5
 800b3ea:	7035      	strb	r5, [r6, #0]
 800b3ec:	f103 0510 	add.w	r5, r3, #16
 800b3f0:	1b64      	subs	r4, r4, r5
 800b3f2:	fab4 f484 	clz	r4, r4
 800b3f6:	0964      	lsrs	r4, r4, #5
 800b3f8:	703c      	strb	r4, [r7, #0]
 800b3fa:	eba3 0008 	sub.w	r0, r3, r8
 800b3fe:	1d1c      	adds	r4, r3, #4
 800b400:	3308      	adds	r3, #8
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	fab0 f080 	clz	r0, r0
 800b408:	9a06      	ldr	r2, [sp, #24]
 800b40a:	0940      	lsrs	r0, r0, #5
 800b40c:	1b09      	subs	r1, r1, r4
 800b40e:	7010      	strb	r0, [r2, #0]
 800b410:	fab1 f181 	clz	r1, r1
 800b414:	9a07      	ldr	r2, [sp, #28]
 800b416:	0949      	lsrs	r1, r1, #5
 800b418:	7011      	strb	r1, [r2, #0]
 800b41a:	fab3 f383 	clz	r3, r3
 800b41e:	9a08      	ldr	r2, [sp, #32]
 800b420:	095b      	lsrs	r3, r3, #5
 800b422:	2000      	movs	r0, #0
 800b424:	7013      	strb	r3, [r2, #0]
 800b426:	e001      	b.n	800b42c <rcl_action_client_wait_set_get_entities_ready+0x104>
 800b428:	f640 0036 	movw	r0, #2102	@ 0x836
 800b42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b430:	f7fc fcc2 	bl	8007db8 <rcutils_reset_error>
 800b434:	f640 0036 	movw	r0, #2102	@ 0x836
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	2001      	movs	r0, #1
 800b43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b442:	200b      	movs	r0, #11
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop

0800b450 <rcl_action_take_goal_request>:
 800b450:	2800      	cmp	r0, #0
 800b452:	d039      	beq.n	800b4c8 <rcl_action_take_goal_request+0x78>
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4604      	mov	r4, r0
 800b458:	6800      	ldr	r0, [r0, #0]
 800b45a:	b380      	cbz	r0, 800b4be <rcl_action_take_goal_request+0x6e>
 800b45c:	460d      	mov	r5, r1
 800b45e:	4616      	mov	r6, r2
 800b460:	f7fe fc96 	bl	8009d90 <rcl_service_is_valid>
 800b464:	b330      	cbz	r0, 800b4b4 <rcl_action_take_goal_request+0x64>
 800b466:	6820      	ldr	r0, [r4, #0]
 800b468:	3004      	adds	r0, #4
 800b46a:	f7fe fc91 	bl	8009d90 <rcl_service_is_valid>
 800b46e:	b308      	cbz	r0, 800b4b4 <rcl_action_take_goal_request+0x64>
 800b470:	6820      	ldr	r0, [r4, #0]
 800b472:	3008      	adds	r0, #8
 800b474:	f7fe fc8c 	bl	8009d90 <rcl_service_is_valid>
 800b478:	b1e0      	cbz	r0, 800b4b4 <rcl_action_take_goal_request+0x64>
 800b47a:	6820      	ldr	r0, [r4, #0]
 800b47c:	300c      	adds	r0, #12
 800b47e:	f006 f943 	bl	8011708 <rcl_publisher_is_valid>
 800b482:	b1b8      	cbz	r0, 800b4b4 <rcl_action_take_goal_request+0x64>
 800b484:	6820      	ldr	r0, [r4, #0]
 800b486:	3010      	adds	r0, #16
 800b488:	f006 f93e 	bl	8011708 <rcl_publisher_is_valid>
 800b48c:	b190      	cbz	r0, 800b4b4 <rcl_action_take_goal_request+0x64>
 800b48e:	b1cd      	cbz	r5, 800b4c4 <rcl_action_take_goal_request+0x74>
 800b490:	b1c6      	cbz	r6, 800b4c4 <rcl_action_take_goal_request+0x74>
 800b492:	6820      	ldr	r0, [r4, #0]
 800b494:	4632      	mov	r2, r6
 800b496:	4629      	mov	r1, r5
 800b498:	f7fe fc22 	bl	8009ce0 <rcl_take_request>
 800b49c:	b148      	cbz	r0, 800b4b2 <rcl_action_take_goal_request+0x62>
 800b49e:	280a      	cmp	r0, #10
 800b4a0:	d007      	beq.n	800b4b2 <rcl_action_take_goal_request+0x62>
 800b4a2:	f240 2259 	movw	r2, #601	@ 0x259
 800b4a6:	f640 0399 	movw	r3, #2201	@ 0x899
 800b4aa:	4290      	cmp	r0, r2
 800b4ac:	bf0c      	ite	eq
 800b4ae:	4618      	moveq	r0, r3
 800b4b0:	2001      	movne	r0, #1
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}
 800b4b4:	f7fc fc80 	bl	8007db8 <rcutils_reset_error>
 800b4b8:	f640 0098 	movw	r0, #2200	@ 0x898
 800b4bc:	bd70      	pop	{r4, r5, r6, pc}
 800b4be:	f640 0098 	movw	r0, #2200	@ 0x898
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	200b      	movs	r0, #11
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	f640 0098 	movw	r0, #2200	@ 0x898
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop

0800b4d0 <rcl_action_send_goal_response>:
 800b4d0:	b390      	cbz	r0, 800b538 <rcl_action_send_goal_response+0x68>
 800b4d2:	b570      	push	{r4, r5, r6, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	6800      	ldr	r0, [r0, #0]
 800b4d8:	b348      	cbz	r0, 800b52e <rcl_action_send_goal_response+0x5e>
 800b4da:	460d      	mov	r5, r1
 800b4dc:	4616      	mov	r6, r2
 800b4de:	f7fe fc57 	bl	8009d90 <rcl_service_is_valid>
 800b4e2:	b1f8      	cbz	r0, 800b524 <rcl_action_send_goal_response+0x54>
 800b4e4:	6820      	ldr	r0, [r4, #0]
 800b4e6:	3004      	adds	r0, #4
 800b4e8:	f7fe fc52 	bl	8009d90 <rcl_service_is_valid>
 800b4ec:	b1d0      	cbz	r0, 800b524 <rcl_action_send_goal_response+0x54>
 800b4ee:	6820      	ldr	r0, [r4, #0]
 800b4f0:	3008      	adds	r0, #8
 800b4f2:	f7fe fc4d 	bl	8009d90 <rcl_service_is_valid>
 800b4f6:	b1a8      	cbz	r0, 800b524 <rcl_action_send_goal_response+0x54>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	300c      	adds	r0, #12
 800b4fc:	f006 f904 	bl	8011708 <rcl_publisher_is_valid>
 800b500:	b180      	cbz	r0, 800b524 <rcl_action_send_goal_response+0x54>
 800b502:	6820      	ldr	r0, [r4, #0]
 800b504:	3010      	adds	r0, #16
 800b506:	f006 f8ff 	bl	8011708 <rcl_publisher_is_valid>
 800b50a:	b158      	cbz	r0, 800b524 <rcl_action_send_goal_response+0x54>
 800b50c:	b195      	cbz	r5, 800b534 <rcl_action_send_goal_response+0x64>
 800b50e:	b18e      	cbz	r6, 800b534 <rcl_action_send_goal_response+0x64>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	4632      	mov	r2, r6
 800b514:	4629      	mov	r1, r5
 800b516:	f7fe fc23 	bl	8009d60 <rcl_send_response>
 800b51a:	b110      	cbz	r0, 800b522 <rcl_action_send_goal_response+0x52>
 800b51c:	2802      	cmp	r0, #2
 800b51e:	bf18      	it	ne
 800b520:	2001      	movne	r0, #1
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f7fc fc48 	bl	8007db8 <rcutils_reset_error>
 800b528:	f640 0098 	movw	r0, #2200	@ 0x898
 800b52c:	bd70      	pop	{r4, r5, r6, pc}
 800b52e:	f640 0098 	movw	r0, #2200	@ 0x898
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	200b      	movs	r0, #11
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	f640 0098 	movw	r0, #2200	@ 0x898
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop

0800b540 <rcl_action_take_result_request>:
 800b540:	2800      	cmp	r0, #0
 800b542:	d03a      	beq.n	800b5ba <rcl_action_take_result_request+0x7a>
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4604      	mov	r4, r0
 800b548:	6800      	ldr	r0, [r0, #0]
 800b54a:	b388      	cbz	r0, 800b5b0 <rcl_action_take_result_request+0x70>
 800b54c:	460d      	mov	r5, r1
 800b54e:	4616      	mov	r6, r2
 800b550:	f7fe fc1e 	bl	8009d90 <rcl_service_is_valid>
 800b554:	b338      	cbz	r0, 800b5a6 <rcl_action_take_result_request+0x66>
 800b556:	6820      	ldr	r0, [r4, #0]
 800b558:	3004      	adds	r0, #4
 800b55a:	f7fe fc19 	bl	8009d90 <rcl_service_is_valid>
 800b55e:	b310      	cbz	r0, 800b5a6 <rcl_action_take_result_request+0x66>
 800b560:	6820      	ldr	r0, [r4, #0]
 800b562:	3008      	adds	r0, #8
 800b564:	f7fe fc14 	bl	8009d90 <rcl_service_is_valid>
 800b568:	b1e8      	cbz	r0, 800b5a6 <rcl_action_take_result_request+0x66>
 800b56a:	6820      	ldr	r0, [r4, #0]
 800b56c:	300c      	adds	r0, #12
 800b56e:	f006 f8cb 	bl	8011708 <rcl_publisher_is_valid>
 800b572:	b1c0      	cbz	r0, 800b5a6 <rcl_action_take_result_request+0x66>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	3010      	adds	r0, #16
 800b578:	f006 f8c6 	bl	8011708 <rcl_publisher_is_valid>
 800b57c:	b198      	cbz	r0, 800b5a6 <rcl_action_take_result_request+0x66>
 800b57e:	b1d5      	cbz	r5, 800b5b6 <rcl_action_take_result_request+0x76>
 800b580:	b1ce      	cbz	r6, 800b5b6 <rcl_action_take_result_request+0x76>
 800b582:	6820      	ldr	r0, [r4, #0]
 800b584:	4632      	mov	r2, r6
 800b586:	4629      	mov	r1, r5
 800b588:	3008      	adds	r0, #8
 800b58a:	f7fe fba9 	bl	8009ce0 <rcl_take_request>
 800b58e:	b148      	cbz	r0, 800b5a4 <rcl_action_take_result_request+0x64>
 800b590:	280a      	cmp	r0, #10
 800b592:	d007      	beq.n	800b5a4 <rcl_action_take_result_request+0x64>
 800b594:	f240 2259 	movw	r2, #601	@ 0x259
 800b598:	f640 0399 	movw	r3, #2201	@ 0x899
 800b59c:	4290      	cmp	r0, r2
 800b59e:	bf0c      	ite	eq
 800b5a0:	4618      	moveq	r0, r3
 800b5a2:	2001      	movne	r0, #1
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	f7fc fc07 	bl	8007db8 <rcutils_reset_error>
 800b5aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	f640 0098 	movw	r0, #2200	@ 0x898
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	200b      	movs	r0, #11
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	f640 0098 	movw	r0, #2200	@ 0x898
 800b5be:	4770      	bx	lr

0800b5c0 <rcl_action_take_cancel_request>:
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d03a      	beq.n	800b63a <rcl_action_take_cancel_request+0x7a>
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	6800      	ldr	r0, [r0, #0]
 800b5ca:	b388      	cbz	r0, 800b630 <rcl_action_take_cancel_request+0x70>
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	4616      	mov	r6, r2
 800b5d0:	f7fe fbde 	bl	8009d90 <rcl_service_is_valid>
 800b5d4:	b338      	cbz	r0, 800b626 <rcl_action_take_cancel_request+0x66>
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	3004      	adds	r0, #4
 800b5da:	f7fe fbd9 	bl	8009d90 <rcl_service_is_valid>
 800b5de:	b310      	cbz	r0, 800b626 <rcl_action_take_cancel_request+0x66>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	3008      	adds	r0, #8
 800b5e4:	f7fe fbd4 	bl	8009d90 <rcl_service_is_valid>
 800b5e8:	b1e8      	cbz	r0, 800b626 <rcl_action_take_cancel_request+0x66>
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	300c      	adds	r0, #12
 800b5ee:	f006 f88b 	bl	8011708 <rcl_publisher_is_valid>
 800b5f2:	b1c0      	cbz	r0, 800b626 <rcl_action_take_cancel_request+0x66>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	3010      	adds	r0, #16
 800b5f8:	f006 f886 	bl	8011708 <rcl_publisher_is_valid>
 800b5fc:	b198      	cbz	r0, 800b626 <rcl_action_take_cancel_request+0x66>
 800b5fe:	b1d5      	cbz	r5, 800b636 <rcl_action_take_cancel_request+0x76>
 800b600:	b1ce      	cbz	r6, 800b636 <rcl_action_take_cancel_request+0x76>
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	4632      	mov	r2, r6
 800b606:	4629      	mov	r1, r5
 800b608:	3004      	adds	r0, #4
 800b60a:	f7fe fb69 	bl	8009ce0 <rcl_take_request>
 800b60e:	b148      	cbz	r0, 800b624 <rcl_action_take_cancel_request+0x64>
 800b610:	280a      	cmp	r0, #10
 800b612:	d007      	beq.n	800b624 <rcl_action_take_cancel_request+0x64>
 800b614:	f240 2259 	movw	r2, #601	@ 0x259
 800b618:	f640 0399 	movw	r3, #2201	@ 0x899
 800b61c:	4290      	cmp	r0, r2
 800b61e:	bf0c      	ite	eq
 800b620:	4618      	moveq	r0, r3
 800b622:	2001      	movne	r0, #1
 800b624:	bd70      	pop	{r4, r5, r6, pc}
 800b626:	f7fc fbc7 	bl	8007db8 <rcutils_reset_error>
 800b62a:	f640 0098 	movw	r0, #2200	@ 0x898
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	f640 0098 	movw	r0, #2200	@ 0x898
 800b634:	bd70      	pop	{r4, r5, r6, pc}
 800b636:	200b      	movs	r0, #11
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	f640 0098 	movw	r0, #2200	@ 0x898
 800b63e:	4770      	bx	lr

0800b640 <rcl_action_send_cancel_response>:
 800b640:	b398      	cbz	r0, 800b6aa <rcl_action_send_cancel_response+0x6a>
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	4604      	mov	r4, r0
 800b646:	6800      	ldr	r0, [r0, #0]
 800b648:	b350      	cbz	r0, 800b6a0 <rcl_action_send_cancel_response+0x60>
 800b64a:	460d      	mov	r5, r1
 800b64c:	4616      	mov	r6, r2
 800b64e:	f7fe fb9f 	bl	8009d90 <rcl_service_is_valid>
 800b652:	b300      	cbz	r0, 800b696 <rcl_action_send_cancel_response+0x56>
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	3004      	adds	r0, #4
 800b658:	f7fe fb9a 	bl	8009d90 <rcl_service_is_valid>
 800b65c:	b1d8      	cbz	r0, 800b696 <rcl_action_send_cancel_response+0x56>
 800b65e:	6820      	ldr	r0, [r4, #0]
 800b660:	3008      	adds	r0, #8
 800b662:	f7fe fb95 	bl	8009d90 <rcl_service_is_valid>
 800b666:	b1b0      	cbz	r0, 800b696 <rcl_action_send_cancel_response+0x56>
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	300c      	adds	r0, #12
 800b66c:	f006 f84c 	bl	8011708 <rcl_publisher_is_valid>
 800b670:	b188      	cbz	r0, 800b696 <rcl_action_send_cancel_response+0x56>
 800b672:	6820      	ldr	r0, [r4, #0]
 800b674:	3010      	adds	r0, #16
 800b676:	f006 f847 	bl	8011708 <rcl_publisher_is_valid>
 800b67a:	b160      	cbz	r0, 800b696 <rcl_action_send_cancel_response+0x56>
 800b67c:	b19d      	cbz	r5, 800b6a6 <rcl_action_send_cancel_response+0x66>
 800b67e:	b196      	cbz	r6, 800b6a6 <rcl_action_send_cancel_response+0x66>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	4632      	mov	r2, r6
 800b684:	4629      	mov	r1, r5
 800b686:	3004      	adds	r0, #4
 800b688:	f7fe fb6a 	bl	8009d60 <rcl_send_response>
 800b68c:	b110      	cbz	r0, 800b694 <rcl_action_send_cancel_response+0x54>
 800b68e:	2802      	cmp	r0, #2
 800b690:	bf18      	it	ne
 800b692:	2001      	movne	r0, #1
 800b694:	bd70      	pop	{r4, r5, r6, pc}
 800b696:	f7fc fb8f 	bl	8007db8 <rcutils_reset_error>
 800b69a:	f640 0098 	movw	r0, #2200	@ 0x898
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	f640 0098 	movw	r0, #2200	@ 0x898
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	200b      	movs	r0, #11
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800b6ae:	4770      	bx	lr

0800b6b0 <rcl_action_wait_set_add_action_server>:
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d04d      	beq.n	800b750 <rcl_action_wait_set_add_action_server+0xa0>
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	b159      	cbz	r1, 800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	6808      	ldr	r0, [r1, #0]
 800b6be:	b140      	cbz	r0, 800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6c0:	4616      	mov	r6, r2
 800b6c2:	f7fe fb65 	bl	8009d90 <rcl_service_is_valid>
 800b6c6:	b120      	cbz	r0, 800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	3004      	adds	r0, #4
 800b6cc:	f7fe fb60 	bl	8009d90 <rcl_service_is_valid>
 800b6d0:	b910      	cbnz	r0, 800b6d8 <rcl_action_wait_set_add_action_server+0x28>
 800b6d2:	f640 0098 	movw	r0, #2200	@ 0x898
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	3008      	adds	r0, #8
 800b6dc:	f7fe fb58 	bl	8009d90 <rcl_service_is_valid>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0f6      	beq.n	800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	300c      	adds	r0, #12
 800b6e8:	f006 f826 	bl	8011738 <rcl_publisher_is_valid_except_context>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d0f0      	beq.n	800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6f0:	6820      	ldr	r0, [r4, #0]
 800b6f2:	3010      	adds	r0, #16
 800b6f4:	f006 f820 	bl	8011738 <rcl_publisher_is_valid_except_context>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d0ea      	beq.n	800b6d2 <rcl_action_wait_set_add_action_server+0x22>
 800b6fc:	6821      	ldr	r1, [r4, #0]
 800b6fe:	4628      	mov	r0, r5
 800b700:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800b704:	f7ff face 	bl	800aca4 <rcl_wait_set_add_service>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1e4      	bne.n	800b6d6 <rcl_action_wait_set_add_action_server+0x26>
 800b70c:	6821      	ldr	r1, [r4, #0]
 800b70e:	4628      	mov	r0, r5
 800b710:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800b714:	3104      	adds	r1, #4
 800b716:	f7ff fac5 	bl	800aca4 <rcl_wait_set_add_service>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d1db      	bne.n	800b6d6 <rcl_action_wait_set_add_action_server+0x26>
 800b71e:	6821      	ldr	r1, [r4, #0]
 800b720:	4628      	mov	r0, r5
 800b722:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800b726:	3108      	adds	r1, #8
 800b728:	f7ff fabc 	bl	800aca4 <rcl_wait_set_add_service>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d1d2      	bne.n	800b6d6 <rcl_action_wait_set_add_action_server+0x26>
 800b730:	6821      	ldr	r1, [r4, #0]
 800b732:	4628      	mov	r0, r5
 800b734:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800b738:	3114      	adds	r1, #20
 800b73a:	f7ff fa57 	bl	800abec <rcl_wait_set_add_timer>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d1c9      	bne.n	800b6d6 <rcl_action_wait_set_add_action_server+0x26>
 800b742:	2e00      	cmp	r6, #0
 800b744:	d0c7      	beq.n	800b6d6 <rcl_action_wait_set_add_action_server+0x26>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800b74c:	6033      	str	r3, [r6, #0]
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop

0800b758 <rcl_action_server_wait_set_get_entities_ready>:
 800b758:	2800      	cmp	r0, #0
 800b75a:	d05a      	beq.n	800b812 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	b161      	cbz	r1, 800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b762:	4605      	mov	r5, r0
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	b148      	cbz	r0, 800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b768:	4616      	mov	r6, r2
 800b76a:	461f      	mov	r7, r3
 800b76c:	f7fe fb10 	bl	8009d90 <rcl_service_is_valid>
 800b770:	b120      	cbz	r0, 800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b772:	6820      	ldr	r0, [r4, #0]
 800b774:	3004      	adds	r0, #4
 800b776:	f7fe fb0b 	bl	8009d90 <rcl_service_is_valid>
 800b77a:	b910      	cbnz	r0, 800b782 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800b77c:	f640 0098 	movw	r0, #2200	@ 0x898
 800b780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b782:	6820      	ldr	r0, [r4, #0]
 800b784:	3008      	adds	r0, #8
 800b786:	f7fe fb03 	bl	8009d90 <rcl_service_is_valid>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d0f6      	beq.n	800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b78e:	6820      	ldr	r0, [r4, #0]
 800b790:	300c      	adds	r0, #12
 800b792:	f005 ffd1 	bl	8011738 <rcl_publisher_is_valid_except_context>
 800b796:	2800      	cmp	r0, #0
 800b798:	d0f0      	beq.n	800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b79a:	6820      	ldr	r0, [r4, #0]
 800b79c:	3010      	adds	r0, #16
 800b79e:	f005 ffcb 	bl	8011738 <rcl_publisher_is_valid_except_context>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0ea      	beq.n	800b77c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800b7a6:	b3be      	cbz	r6, 800b818 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800b7a8:	b3b7      	cbz	r7, 800b818 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800b7aa:	9b06      	ldr	r3, [sp, #24]
 800b7ac:	b3a3      	cbz	r3, 800b818 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800b7ae:	9b07      	ldr	r3, [sp, #28]
 800b7b0:	b393      	cbz	r3, 800b818 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800b7b2:	6821      	ldr	r1, [r4, #0]
 800b7b4:	692a      	ldr	r2, [r5, #16]
 800b7b6:	6a2c      	ldr	r4, [r5, #32]
 800b7b8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800b7bc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800b7c0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800b7c4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800b7c8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800b7cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800b7d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b7d4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800b7d8:	1a64      	subs	r4, r4, r1
 800b7da:	fab4 f484 	clz	r4, r4
 800b7de:	0964      	lsrs	r4, r4, #5
 800b7e0:	7034      	strb	r4, [r6, #0]
 800b7e2:	1d0c      	adds	r4, r1, #4
 800b7e4:	1b1b      	subs	r3, r3, r4
 800b7e6:	fab3 f383 	clz	r3, r3
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	f101 0408 	add.w	r4, r1, #8
 800b7f0:	703b      	strb	r3, [r7, #0]
 800b7f2:	f101 0314 	add.w	r3, r1, #20
 800b7f6:	1b01      	subs	r1, r0, r4
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	fab1 f181 	clz	r1, r1
 800b7fe:	9a06      	ldr	r2, [sp, #24]
 800b800:	0949      	lsrs	r1, r1, #5
 800b802:	7011      	strb	r1, [r2, #0]
 800b804:	fab3 f383 	clz	r3, r3
 800b808:	9a07      	ldr	r2, [sp, #28]
 800b80a:	095b      	lsrs	r3, r3, #5
 800b80c:	2000      	movs	r0, #0
 800b80e:	7013      	strb	r3, [r2, #0]
 800b810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b812:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800b816:	4770      	bx	lr
 800b818:	200b      	movs	r0, #11
 800b81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b81c <_execute_event_handler>:
 800b81c:	2002      	movs	r0, #2
 800b81e:	4770      	bx	lr

0800b820 <_cancel_goal_event_handler>:
 800b820:	2003      	movs	r0, #3
 800b822:	4770      	bx	lr

0800b824 <_succeed_event_handler>:
 800b824:	2004      	movs	r0, #4
 800b826:	4770      	bx	lr

0800b828 <_abort_event_handler>:
 800b828:	2006      	movs	r0, #6
 800b82a:	4770      	bx	lr

0800b82c <_canceled_event_handler>:
 800b82c:	2005      	movs	r0, #5
 800b82e:	4770      	bx	lr

0800b830 <rcl_action_transition_goal_state>:
 800b830:	b2c2      	uxtb	r2, r0
 800b832:	2a06      	cmp	r2, #6
 800b834:	d80c      	bhi.n	800b850 <rcl_action_transition_goal_state+0x20>
 800b836:	2904      	cmp	r1, #4
 800b838:	d80a      	bhi.n	800b850 <rcl_action_transition_goal_state+0x20>
 800b83a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800b83e:	b410      	push	{r4}
 800b840:	1853      	adds	r3, r2, r1
 800b842:	4c06      	ldr	r4, [pc, #24]	@ (800b85c <rcl_action_transition_goal_state+0x2c>)
 800b844:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b848:	b123      	cbz	r3, 800b854 <rcl_action_transition_goal_state+0x24>
 800b84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b84e:	4718      	bx	r3
 800b850:	2000      	movs	r0, #0
 800b852:	4770      	bx	lr
 800b854:	2000      	movs	r0, #0
 800b856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	08014774 	.word	0x08014774

0800b860 <rcl_action_get_zero_initialized_cancel_response>:
 800b860:	b510      	push	{r4, lr}
 800b862:	4c07      	ldr	r4, [pc, #28]	@ (800b880 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800b864:	4686      	mov	lr, r0
 800b866:	4684      	mov	ip, r0
 800b868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b86a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b86e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	f8cc 3000 	str.w	r3, [ip]
 800b87a:	4670      	mov	r0, lr
 800b87c:	bd10      	pop	{r4, pc}
 800b87e:	bf00      	nop
 800b880:	08014800 	.word	0x08014800

0800b884 <rclc_action_send_result_request>:
 800b884:	b1d0      	cbz	r0, 800b8bc <rclc_action_send_result_request+0x38>
 800b886:	b500      	push	{lr}
 800b888:	4684      	mov	ip, r0
 800b88a:	b087      	sub	sp, #28
 800b88c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800b890:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800b894:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800b898:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800b89c:	f10d 0e08 	add.w	lr, sp, #8
 800b8a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b8a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b8a8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800b8ac:	a902      	add	r1, sp, #8
 800b8ae:	3010      	adds	r0, #16
 800b8b0:	f7ff fbda 	bl	800b068 <rcl_action_send_result_request>
 800b8b4:	b920      	cbnz	r0, 800b8c0 <rclc_action_send_result_request+0x3c>
 800b8b6:	b007      	add	sp, #28
 800b8b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8bc:	200b      	movs	r0, #11
 800b8be:	4770      	bx	lr
 800b8c0:	9001      	str	r0, [sp, #4]
 800b8c2:	f7fc fa79 	bl	8007db8 <rcutils_reset_error>
 800b8c6:	9801      	ldr	r0, [sp, #4]
 800b8c8:	b007      	add	sp, #28
 800b8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8ce:	bf00      	nop

0800b8d0 <rclc_action_take_goal_handle>:
 800b8d0:	b160      	cbz	r0, 800b8ec <rclc_action_take_goal_handle+0x1c>
 800b8d2:	6883      	ldr	r3, [r0, #8]
 800b8d4:	b143      	cbz	r3, 800b8e8 <rclc_action_take_goal_handle+0x18>
 800b8d6:	6819      	ldr	r1, [r3, #0]
 800b8d8:	6081      	str	r1, [r0, #8]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	721a      	strb	r2, [r3, #8]
 800b8de:	68c1      	ldr	r1, [r0, #12]
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	621a      	str	r2, [r3, #32]
 800b8e4:	849a      	strh	r2, [r3, #36]	@ 0x24
 800b8e6:	60c3      	str	r3, [r0, #12]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	4770      	bx	lr
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	e7fb      	b.n	800b8e8 <rclc_action_take_goal_handle+0x18>

0800b8f0 <rclc_action_remove_used_goal_handle>:
 800b8f0:	b180      	cbz	r0, 800b914 <rclc_action_remove_used_goal_handle+0x24>
 800b8f2:	b179      	cbz	r1, 800b914 <rclc_action_remove_used_goal_handle+0x24>
 800b8f4:	68c3      	ldr	r3, [r0, #12]
 800b8f6:	4299      	cmp	r1, r3
 800b8f8:	d00d      	beq.n	800b916 <rclc_action_remove_used_goal_handle+0x26>
 800b8fa:	b12b      	cbz	r3, 800b908 <rclc_action_remove_used_goal_handle+0x18>
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	4291      	cmp	r1, r2
 800b900:	d003      	beq.n	800b90a <rclc_action_remove_used_goal_handle+0x1a>
 800b902:	4613      	mov	r3, r2
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f9      	bne.n	800b8fc <rclc_action_remove_used_goal_handle+0xc>
 800b908:	4770      	bx	lr
 800b90a:	680a      	ldr	r2, [r1, #0]
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	6883      	ldr	r3, [r0, #8]
 800b910:	600b      	str	r3, [r1, #0]
 800b912:	6081      	str	r1, [r0, #8]
 800b914:	4770      	bx	lr
 800b916:	680b      	ldr	r3, [r1, #0]
 800b918:	60c3      	str	r3, [r0, #12]
 800b91a:	e7f8      	b.n	800b90e <rclc_action_remove_used_goal_handle+0x1e>

0800b91c <rclc_action_find_goal_handle_by_uuid>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	b180      	cbz	r0, 800b942 <rclc_action_find_goal_handle_by_uuid+0x26>
 800b920:	460d      	mov	r5, r1
 800b922:	b181      	cbz	r1, 800b946 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800b924:	68c4      	ldr	r4, [r0, #12]
 800b926:	b914      	cbnz	r4, 800b92e <rclc_action_find_goal_handle_by_uuid+0x12>
 800b928:	e009      	b.n	800b93e <rclc_action_find_goal_handle_by_uuid+0x22>
 800b92a:	6824      	ldr	r4, [r4, #0]
 800b92c:	b13c      	cbz	r4, 800b93e <rclc_action_find_goal_handle_by_uuid+0x22>
 800b92e:	f104 0009 	add.w	r0, r4, #9
 800b932:	2210      	movs	r2, #16
 800b934:	4629      	mov	r1, r5
 800b936:	f007 fcdf 	bl	80132f8 <memcmp>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d1f5      	bne.n	800b92a <rclc_action_find_goal_handle_by_uuid+0xe>
 800b93e:	4620      	mov	r0, r4
 800b940:	bd38      	pop	{r3, r4, r5, pc}
 800b942:	4604      	mov	r4, r0
 800b944:	e7fb      	b.n	800b93e <rclc_action_find_goal_handle_by_uuid+0x22>
 800b946:	460c      	mov	r4, r1
 800b948:	e7f9      	b.n	800b93e <rclc_action_find_goal_handle_by_uuid+0x22>
 800b94a:	bf00      	nop

0800b94c <rclc_action_find_first_handle_by_status>:
 800b94c:	b140      	cbz	r0, 800b960 <rclc_action_find_first_handle_by_status+0x14>
 800b94e:	68c0      	ldr	r0, [r0, #12]
 800b950:	b910      	cbnz	r0, 800b958 <rclc_action_find_first_handle_by_status+0xc>
 800b952:	e005      	b.n	800b960 <rclc_action_find_first_handle_by_status+0x14>
 800b954:	6800      	ldr	r0, [r0, #0]
 800b956:	b118      	cbz	r0, 800b960 <rclc_action_find_first_handle_by_status+0x14>
 800b958:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b95c:	428b      	cmp	r3, r1
 800b95e:	d1f9      	bne.n	800b954 <rclc_action_find_first_handle_by_status+0x8>
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop

0800b964 <rclc_action_find_first_terminated_handle>:
 800b964:	b140      	cbz	r0, 800b978 <rclc_action_find_first_terminated_handle+0x14>
 800b966:	68c0      	ldr	r0, [r0, #12]
 800b968:	b910      	cbnz	r0, 800b970 <rclc_action_find_first_terminated_handle+0xc>
 800b96a:	e005      	b.n	800b978 <rclc_action_find_first_terminated_handle+0x14>
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	b118      	cbz	r0, 800b978 <rclc_action_find_first_terminated_handle+0x14>
 800b970:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b974:	2b03      	cmp	r3, #3
 800b976:	ddf9      	ble.n	800b96c <rclc_action_find_first_terminated_handle+0x8>
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop

0800b97c <rclc_action_find_handle_by_goal_request_sequence_number>:
 800b97c:	b170      	cbz	r0, 800b99c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800b97e:	68c0      	ldr	r0, [r0, #12]
 800b980:	b160      	cbz	r0, 800b99c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800b982:	b410      	push	{r4}
 800b984:	e001      	b.n	800b98a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800b986:	6800      	ldr	r0, [r0, #0]
 800b988:	b128      	cbz	r0, 800b996 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800b98a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800b98e:	4299      	cmp	r1, r3
 800b990:	bf08      	it	eq
 800b992:	4294      	cmpeq	r4, r2
 800b994:	d1f7      	bne.n	800b986 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800b996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop

0800b9a0 <rclc_action_find_handle_by_result_request_sequence_number>:
 800b9a0:	b170      	cbz	r0, 800b9c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800b9a2:	68c0      	ldr	r0, [r0, #12]
 800b9a4:	b160      	cbz	r0, 800b9c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800b9a6:	b410      	push	{r4}
 800b9a8:	e001      	b.n	800b9ae <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	b128      	cbz	r0, 800b9ba <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800b9ae:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800b9b2:	4299      	cmp	r1, r3
 800b9b4:	bf08      	it	eq
 800b9b6:	4294      	cmpeq	r4, r2
 800b9b8:	d1f7      	bne.n	800b9aa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800b9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop

0800b9c4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800b9c4:	b170      	cbz	r0, 800b9e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800b9c6:	68c0      	ldr	r0, [r0, #12]
 800b9c8:	b160      	cbz	r0, 800b9e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800b9ca:	b410      	push	{r4}
 800b9cc:	e001      	b.n	800b9d2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800b9ce:	6800      	ldr	r0, [r0, #0]
 800b9d0:	b128      	cbz	r0, 800b9de <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800b9d2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	bf08      	it	eq
 800b9da:	4294      	cmpeq	r4, r2
 800b9dc:	d1f7      	bne.n	800b9ce <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800b9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop

0800b9e8 <rclc_action_find_first_handle_with_goal_response>:
 800b9e8:	b140      	cbz	r0, 800b9fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800b9ea:	68c0      	ldr	r0, [r0, #12]
 800b9ec:	b910      	cbnz	r0, 800b9f4 <rclc_action_find_first_handle_with_goal_response+0xc>
 800b9ee:	e005      	b.n	800b9fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800b9f0:	6800      	ldr	r0, [r0, #0]
 800b9f2:	b118      	cbz	r0, 800b9fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800b9f4:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0f9      	beq.n	800b9f0 <rclc_action_find_first_handle_with_goal_response+0x8>
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop

0800ba00 <rclc_action_find_first_handle_with_result_response>:
 800ba00:	b140      	cbz	r0, 800ba14 <rclc_action_find_first_handle_with_result_response+0x14>
 800ba02:	68c0      	ldr	r0, [r0, #12]
 800ba04:	b910      	cbnz	r0, 800ba0c <rclc_action_find_first_handle_with_result_response+0xc>
 800ba06:	e005      	b.n	800ba14 <rclc_action_find_first_handle_with_result_response+0x14>
 800ba08:	6800      	ldr	r0, [r0, #0]
 800ba0a:	b118      	cbz	r0, 800ba14 <rclc_action_find_first_handle_with_result_response+0x14>
 800ba0c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0f9      	beq.n	800ba08 <rclc_action_find_first_handle_with_result_response+0x8>
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop

0800ba18 <rclc_action_server_response_goal_request>:
 800ba18:	b198      	cbz	r0, 800ba42 <rclc_action_server_response_goal_request+0x2a>
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	6844      	ldr	r4, [r0, #4]
 800ba1e:	b086      	sub	sp, #24
 800ba20:	2200      	movs	r2, #0
 800ba22:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800ba26:	460b      	mov	r3, r1
 800ba28:	9205      	str	r2, [sp, #20]
 800ba2a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800ba2e:	aa03      	add	r2, sp, #12
 800ba30:	f104 0010 	add.w	r0, r4, #16
 800ba34:	f88d 300c 	strb.w	r3, [sp, #12]
 800ba38:	f7ff fd4a 	bl	800b4d0 <rcl_action_send_goal_response>
 800ba3c:	b918      	cbnz	r0, 800ba46 <rclc_action_server_response_goal_request+0x2e>
 800ba3e:	b006      	add	sp, #24
 800ba40:	bd10      	pop	{r4, pc}
 800ba42:	200b      	movs	r0, #11
 800ba44:	4770      	bx	lr
 800ba46:	9001      	str	r0, [sp, #4]
 800ba48:	f7fc f9b6 	bl	8007db8 <rcutils_reset_error>
 800ba4c:	9801      	ldr	r0, [sp, #4]
 800ba4e:	b006      	add	sp, #24
 800ba50:	bd10      	pop	{r4, pc}
 800ba52:	bf00      	nop
 800ba54:	0000      	movs	r0, r0
	...

0800ba58 <rclc_action_server_goal_cancel_accept>:
 800ba58:	b310      	cbz	r0, 800baa0 <rclc_action_server_goal_cancel_accept+0x48>
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	b090      	sub	sp, #64	@ 0x40
 800ba5e:	4604      	mov	r4, r0
 800ba60:	a806      	add	r0, sp, #24
 800ba62:	f7ff fefd 	bl	800b860 <rcl_action_get_zero_initialized_cancel_response>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800ba6c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800ba70:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800ba74:	f88d 3018 	strb.w	r3, [sp, #24]
 800ba78:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800ba7c:	f8cd d01c 	str.w	sp, [sp, #28]
 800ba80:	46ec      	mov	ip, sp
 800ba82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba86:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800baa8 <rclc_action_server_goal_cancel_accept+0x50>
 800ba8a:	6860      	ldr	r0, [r4, #4]
 800ba8c:	aa06      	add	r2, sp, #24
 800ba8e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800ba92:	3010      	adds	r0, #16
 800ba94:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ba98:	f7ff fdd2 	bl	800b640 <rcl_action_send_cancel_response>
 800ba9c:	b010      	add	sp, #64	@ 0x40
 800ba9e:	bd10      	pop	{r4, pc}
 800baa0:	200b      	movs	r0, #11
 800baa2:	4770      	bx	lr
 800baa4:	f3af 8000 	nop.w
 800baa8:	00000001 	.word	0x00000001
 800baac:	00000001 	.word	0x00000001

0800bab0 <rclc_action_server_goal_cancel_reject>:
 800bab0:	b082      	sub	sp, #8
 800bab2:	b530      	push	{r4, r5, lr}
 800bab4:	b08b      	sub	sp, #44	@ 0x2c
 800bab6:	ac0e      	add	r4, sp, #56	@ 0x38
 800bab8:	e884 000c 	stmia.w	r4, {r2, r3}
 800babc:	b188      	cbz	r0, 800bae2 <rclc_action_server_goal_cancel_reject+0x32>
 800babe:	4604      	mov	r4, r0
 800bac0:	a801      	add	r0, sp, #4
 800bac2:	460d      	mov	r5, r1
 800bac4:	f7ff fecc 	bl	800b860 <rcl_action_get_zero_initialized_cancel_response>
 800bac8:	aa01      	add	r2, sp, #4
 800baca:	a90e      	add	r1, sp, #56	@ 0x38
 800bacc:	f104 0010 	add.w	r0, r4, #16
 800bad0:	f88d 5004 	strb.w	r5, [sp, #4]
 800bad4:	f7ff fdb4 	bl	800b640 <rcl_action_send_cancel_response>
 800bad8:	b00b      	add	sp, #44	@ 0x2c
 800bada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bade:	b002      	add	sp, #8
 800bae0:	4770      	bx	lr
 800bae2:	200b      	movs	r0, #11
 800bae4:	b00b      	add	sp, #44	@ 0x2c
 800bae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baea:	b002      	add	sp, #8
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop

0800baf0 <__atomic_load_8>:
 800baf0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800baf4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800baf8:	4a15      	ldr	r2, [pc, #84]	@ (800bb50 <__atomic_load_8+0x60>)
 800bafa:	4b16      	ldr	r3, [pc, #88]	@ (800bb54 <__atomic_load_8+0x64>)
 800bafc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bb00:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800bb04:	fb02 f101 	mul.w	r1, r2, r1
 800bb08:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800bb0c:	fba3 2301 	umull	r2, r3, r3, r1
 800bb10:	091b      	lsrs	r3, r3, #4
 800bb12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bb16:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800bb1a:	b4d0      	push	{r4, r6, r7}
 800bb1c:	4c0e      	ldr	r4, [pc, #56]	@ (800bb58 <__atomic_load_8+0x68>)
 800bb1e:	1ac9      	subs	r1, r1, r3
 800bb20:	1862      	adds	r2, r4, r1
 800bb22:	f04f 0c01 	mov.w	ip, #1
 800bb26:	e8d2 3f4f 	ldrexb	r3, [r2]
 800bb2a:	e8c2 cf46 	strexb	r6, ip, [r2]
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d1f9      	bne.n	800bb26 <__atomic_load_8+0x36>
 800bb32:	f3bf 8f5b 	dmb	ish
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f4      	bne.n	800bb26 <__atomic_load_8+0x36>
 800bb3c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800bb40:	f3bf 8f5b 	dmb	ish
 800bb44:	5463      	strb	r3, [r4, r1]
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	bcd0      	pop	{r4, r6, r7}
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	27d4eb2d 	.word	0x27d4eb2d
 800bb54:	b21642c9 	.word	0xb21642c9
 800bb58:	20009068 	.word	0x20009068

0800bb5c <__atomic_store_8>:
 800bb5c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800bb60:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bb6a:	4c14      	ldr	r4, [pc, #80]	@ (800bbbc <__atomic_store_8+0x60>)
 800bb6c:	4d14      	ldr	r5, [pc, #80]	@ (800bbc0 <__atomic_store_8+0x64>)
 800bb6e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800bb72:	fb04 f101 	mul.w	r1, r4, r1
 800bb76:	4c13      	ldr	r4, [pc, #76]	@ (800bbc4 <__atomic_store_8+0x68>)
 800bb78:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800bb7c:	fba4 4e01 	umull	r4, lr, r4, r1
 800bb80:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800bb84:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800bb88:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800bb8c:	eba1 0e0e 	sub.w	lr, r1, lr
 800bb90:	eb05 0c0e 	add.w	ip, r5, lr
 800bb94:	f04f 0401 	mov.w	r4, #1
 800bb98:	e8dc 1f4f 	ldrexb	r1, [ip]
 800bb9c:	e8cc 4f46 	strexb	r6, r4, [ip]
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	d1f9      	bne.n	800bb98 <__atomic_store_8+0x3c>
 800bba4:	f3bf 8f5b 	dmb	ish
 800bba8:	b2c9      	uxtb	r1, r1
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	d1f4      	bne.n	800bb98 <__atomic_store_8+0x3c>
 800bbae:	e9c0 2300 	strd	r2, r3, [r0]
 800bbb2:	f3bf 8f5b 	dmb	ish
 800bbb6:	f805 100e 	strb.w	r1, [r5, lr]
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	27d4eb2d 	.word	0x27d4eb2d
 800bbc0:	20009068 	.word	0x20009068
 800bbc4:	b21642c9 	.word	0xb21642c9

0800bbc8 <__atomic_exchange_8>:
 800bbc8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800bbcc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800bbd0:	4916      	ldr	r1, [pc, #88]	@ (800bc2c <__atomic_exchange_8+0x64>)
 800bbd2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800bbd6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800bbda:	fb01 fc0c 	mul.w	ip, r1, ip
 800bbde:	4914      	ldr	r1, [pc, #80]	@ (800bc30 <__atomic_exchange_8+0x68>)
 800bbe0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800bbe4:	b570      	push	{r4, r5, r6, lr}
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	fba1 010c 	umull	r0, r1, r1, ip
 800bbec:	0909      	lsrs	r1, r1, #4
 800bbee:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800bbf2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800bbf6:	4e0f      	ldr	r6, [pc, #60]	@ (800bc34 <__atomic_exchange_8+0x6c>)
 800bbf8:	ebac 0c01 	sub.w	ip, ip, r1
 800bbfc:	eb06 010c 	add.w	r1, r6, ip
 800bc00:	f04f 0e01 	mov.w	lr, #1
 800bc04:	e8d1 4f4f 	ldrexb	r4, [r1]
 800bc08:	e8c1 ef40 	strexb	r0, lr, [r1]
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d1f9      	bne.n	800bc04 <__atomic_exchange_8+0x3c>
 800bc10:	f3bf 8f5b 	dmb	ish
 800bc14:	b2e4      	uxtb	r4, r4
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	d1f4      	bne.n	800bc04 <__atomic_exchange_8+0x3c>
 800bc1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bc1e:	e9c5 2300 	strd	r2, r3, [r5]
 800bc22:	f3bf 8f5b 	dmb	ish
 800bc26:	f806 400c 	strb.w	r4, [r6, ip]
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	27d4eb2d 	.word	0x27d4eb2d
 800bc30:	b21642c9 	.word	0xb21642c9
 800bc34:	20009068 	.word	0x20009068

0800bc38 <rcutils_get_env>:
 800bc38:	b168      	cbz	r0, 800bc56 <rcutils_get_env+0x1e>
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	b129      	cbz	r1, 800bc4c <rcutils_get_env+0x14>
 800bc40:	f006 ffb6 	bl	8012bb0 <getenv>
 800bc44:	b120      	cbz	r0, 800bc50 <rcutils_get_env+0x18>
 800bc46:	6020      	str	r0, [r4, #0]
 800bc48:	2000      	movs	r0, #0
 800bc4a:	bd10      	pop	{r4, pc}
 800bc4c:	4803      	ldr	r0, [pc, #12]	@ (800bc5c <rcutils_get_env+0x24>)
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	4b03      	ldr	r3, [pc, #12]	@ (800bc60 <rcutils_get_env+0x28>)
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	4803      	ldr	r0, [pc, #12]	@ (800bc64 <rcutils_get_env+0x2c>)
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	08014840 	.word	0x08014840
 800bc60:	08014964 	.word	0x08014964
 800bc64:	08014824 	.word	0x08014824

0800bc68 <rcutils_is_directory>:
 800bc68:	2000      	movs	r0, #0
 800bc6a:	4770      	bx	lr

0800bc6c <rcutils_join_path>:
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bc72:	2000      	movs	r0, #0
 800bc74:	b002      	add	sp, #8
 800bc76:	4770      	bx	lr

0800bc78 <rcutils_to_native_path>:
 800bc78:	b084      	sub	sp, #16
 800bc7a:	a801      	add	r0, sp, #4
 800bc7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800bc80:	b004      	add	sp, #16
 800bc82:	2000      	movs	r0, #0
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop

0800bc88 <rcutils_format_string_limit>:
 800bc88:	b40f      	push	{r0, r1, r2, r3}
 800bc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	ac08      	add	r4, sp, #32
 800bc90:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bc92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc96:	b34e      	cbz	r6, 800bcec <rcutils_format_string_limit+0x64>
 800bc98:	a808      	add	r0, sp, #32
 800bc9a:	f7fc f869 	bl	8007d70 <rcutils_allocator_is_valid>
 800bc9e:	b328      	cbz	r0, 800bcec <rcutils_format_string_limit+0x64>
 800bca0:	2100      	movs	r1, #0
 800bca2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bca4:	4632      	mov	r2, r6
 800bca6:	4608      	mov	r0, r1
 800bca8:	e9cd 3300 	strd	r3, r3, [sp]
 800bcac:	f000 f8f4 	bl	800be98 <rcutils_vsnprintf>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	d01a      	beq.n	800bcec <rcutils_format_string_limit+0x64>
 800bcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcba:	1c47      	adds	r7, r0, #1
 800bcbc:	429f      	cmp	r7, r3
 800bcbe:	bf84      	itt	hi
 800bcc0:	461f      	movhi	r7, r3
 800bcc2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	4798      	blx	r3
 800bccc:	4604      	mov	r4, r0
 800bcce:	b168      	cbz	r0, 800bcec <rcutils_format_string_limit+0x64>
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	f000 f8df 	bl	800be98 <rcutils_vsnprintf>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	db02      	blt.n	800bce4 <rcutils_format_string_limit+0x5c>
 800bcde:	2300      	movs	r3, #0
 800bce0:	5563      	strb	r3, [r4, r5]
 800bce2:	e004      	b.n	800bcee <rcutils_format_string_limit+0x66>
 800bce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bce8:	4620      	mov	r0, r4
 800bcea:	4798      	blx	r3
 800bcec:	2400      	movs	r4, #0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	b003      	add	sp, #12
 800bcf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bcf6:	b004      	add	sp, #16
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <rcutils_repl_str>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	ed2d 8b02 	vpush	{d8}
 800bd04:	b087      	sub	sp, #28
 800bd06:	4680      	mov	r8, r0
 800bd08:	4608      	mov	r0, r1
 800bd0a:	f8cd 8004 	str.w	r8, [sp, #4]
 800bd0e:	ee08 2a10 	vmov	s16, r2
 800bd12:	468a      	mov	sl, r1
 800bd14:	4699      	mov	r9, r3
 800bd16:	f7f4 fa6d 	bl	80001f4 <strlen>
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	4647      	mov	r7, r8
 800bd1e:	9002      	str	r0, [sp, #8]
 800bd20:	46b3      	mov	fp, r6
 800bd22:	2510      	movs	r5, #16
 800bd24:	46b0      	mov	r8, r6
 800bd26:	e01d      	b.n	800bd64 <rcutils_repl_str+0x68>
 800bd28:	f10b 0b01 	add.w	fp, fp, #1
 800bd2c:	455e      	cmp	r6, fp
 800bd2e:	d211      	bcs.n	800bd54 <rcutils_repl_str+0x58>
 800bd30:	442e      	add	r6, r5
 800bd32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bd36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bd3a:	00b1      	lsls	r1, r6, #2
 800bd3c:	4798      	blx	r3
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f000 8088 	beq.w	800be54 <rcutils_repl_str+0x158>
 800bd44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd48:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	bf28      	it	cs
 800bd50:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800bd54:	9a01      	ldr	r2, [sp, #4]
 800bd56:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800bd5a:	1aa2      	subs	r2, r4, r2
 800bd5c:	f843 2c04 	str.w	r2, [r3, #-4]
 800bd60:	9b02      	ldr	r3, [sp, #8]
 800bd62:	18e7      	adds	r7, r4, r3
 800bd64:	4651      	mov	r1, sl
 800bd66:	4638      	mov	r0, r7
 800bd68:	f007 fb17 	bl	801339a <strstr>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	4640      	mov	r0, r8
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	d1d9      	bne.n	800bd28 <rcutils_repl_str+0x2c>
 800bd74:	46b8      	mov	r8, r7
 800bd76:	4607      	mov	r7, r0
 800bd78:	4640      	mov	r0, r8
 800bd7a:	f7f4 fa3b 	bl	80001f4 <strlen>
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	eba8 0303 	sub.w	r3, r8, r3
 800bd84:	181c      	adds	r4, r3, r0
 800bd86:	9404      	str	r4, [sp, #16]
 800bd88:	f1bb 0f00 	cmp.w	fp, #0
 800bd8c:	d04a      	beq.n	800be24 <rcutils_repl_str+0x128>
 800bd8e:	ee18 0a10 	vmov	r0, s16
 800bd92:	f7f4 fa2f 	bl	80001f4 <strlen>
 800bd96:	9b02      	ldr	r3, [sp, #8]
 800bd98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800bd9c:	1ac3      	subs	r3, r0, r3
 800bd9e:	fb0b 4303 	mla	r3, fp, r3, r4
 800bda2:	461a      	mov	r2, r3
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	4606      	mov	r6, r0
 800bda8:	f8d9 3000 	ldr.w	r3, [r9]
 800bdac:	1c50      	adds	r0, r2, #1
 800bdae:	4798      	blx	r3
 800bdb0:	9003      	str	r0, [sp, #12]
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d04f      	beq.n	800be56 <rcutils_repl_str+0x15a>
 800bdb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	4641      	mov	r1, r8
 800bdbe:	f007 fb8e 	bl	80134de <memcpy>
 800bdc2:	683d      	ldr	r5, [r7, #0]
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	9701      	str	r7, [sp, #4]
 800bdc8:	46ba      	mov	sl, r7
 800bdca:	441d      	add	r5, r3
 800bdcc:	9f02      	ldr	r7, [sp, #8]
 800bdce:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdd2:	2401      	movs	r4, #1
 800bdd4:	46d1      	mov	r9, sl
 800bdd6:	ee18 aa10 	vmov	sl, s16
 800bdda:	e00a      	b.n	800bdf2 <rcutils_repl_str+0xf6>
 800bddc:	f8d9 5000 	ldr.w	r5, [r9]
 800bde0:	1aaa      	subs	r2, r5, r2
 800bde2:	1885      	adds	r5, r0, r2
 800bde4:	f007 fb7b 	bl	80134de <memcpy>
 800bde8:	45a3      	cmp	fp, r4
 800bdea:	f104 0201 	add.w	r2, r4, #1
 800bdee:	d935      	bls.n	800be5c <rcutils_repl_str+0x160>
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	4632      	mov	r2, r6
 800bdf4:	4651      	mov	r1, sl
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f007 fb71 	bl	80134de <memcpy>
 800bdfc:	f859 2b04 	ldr.w	r2, [r9], #4
 800be00:	45a3      	cmp	fp, r4
 800be02:	443a      	add	r2, r7
 800be04:	eb05 0006 	add.w	r0, r5, r6
 800be08:	eb08 0102 	add.w	r1, r8, r2
 800be0c:	d1e6      	bne.n	800bddc <rcutils_repl_str+0xe0>
 800be0e:	9b04      	ldr	r3, [sp, #16]
 800be10:	1a9a      	subs	r2, r3, r2
 800be12:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800be16:	f007 fb62 	bl	80134de <memcpy>
 800be1a:	9a03      	ldr	r2, [sp, #12]
 800be1c:	9905      	ldr	r1, [sp, #20]
 800be1e:	2300      	movs	r3, #0
 800be20:	5453      	strb	r3, [r2, r1]
 800be22:	e00b      	b.n	800be3c <rcutils_repl_str+0x140>
 800be24:	4620      	mov	r0, r4
 800be26:	f8d9 3000 	ldr.w	r3, [r9]
 800be2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800be2e:	3001      	adds	r0, #1
 800be30:	4798      	blx	r3
 800be32:	9003      	str	r0, [sp, #12]
 800be34:	b110      	cbz	r0, 800be3c <rcutils_repl_str+0x140>
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	f007 fb49 	bl	80134ce <strcpy>
 800be3c:	4638      	mov	r0, r7
 800be3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800be42:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800be46:	4798      	blx	r3
 800be48:	9803      	ldr	r0, [sp, #12]
 800be4a:	b007      	add	sp, #28
 800be4c:	ecbd 8b02 	vpop	{d8}
 800be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be54:	4647      	mov	r7, r8
 800be56:	2300      	movs	r3, #0
 800be58:	9303      	str	r3, [sp, #12]
 800be5a:	e7ef      	b.n	800be3c <rcutils_repl_str+0x140>
 800be5c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800be60:	e7db      	b.n	800be1a <rcutils_repl_str+0x11e>
 800be62:	bf00      	nop

0800be64 <rcutils_snprintf>:
 800be64:	b40c      	push	{r2, r3}
 800be66:	b530      	push	{r4, r5, lr}
 800be68:	b083      	sub	sp, #12
 800be6a:	ab06      	add	r3, sp, #24
 800be6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	b152      	cbz	r2, 800be8a <rcutils_snprintf+0x26>
 800be74:	b138      	cbz	r0, 800be86 <rcutils_snprintf+0x22>
 800be76:	b141      	cbz	r1, 800be8a <rcutils_snprintf+0x26>
 800be78:	f007 fa30 	bl	80132dc <vsniprintf>
 800be7c:	b003      	add	sp, #12
 800be7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be82:	b002      	add	sp, #8
 800be84:	4770      	bx	lr
 800be86:	2900      	cmp	r1, #0
 800be88:	d0f6      	beq.n	800be78 <rcutils_snprintf+0x14>
 800be8a:	f007 faf3 	bl	8013474 <__errno>
 800be8e:	2316      	movs	r3, #22
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be96:	e7f1      	b.n	800be7c <rcutils_snprintf+0x18>

0800be98 <rcutils_vsnprintf>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	b13a      	cbz	r2, 800beac <rcutils_vsnprintf+0x14>
 800be9c:	b120      	cbz	r0, 800bea8 <rcutils_vsnprintf+0x10>
 800be9e:	b129      	cbz	r1, 800beac <rcutils_vsnprintf+0x14>
 800bea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea4:	f007 ba1a 	b.w	80132dc <vsniprintf>
 800bea8:	2900      	cmp	r1, #0
 800beaa:	d0f9      	beq.n	800bea0 <rcutils_vsnprintf+0x8>
 800beac:	f007 fae2 	bl	8013474 <__errno>
 800beb0:	2316      	movs	r3, #22
 800beb2:	6003      	str	r3, [r0, #0]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800beb8:	bd70      	pop	{r4, r5, r6, pc}
 800beba:	bf00      	nop

0800bebc <rcutils_strdup>:
 800bebc:	b084      	sub	sp, #16
 800bebe:	b570      	push	{r4, r5, r6, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	ac07      	add	r4, sp, #28
 800bec4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800bec8:	4605      	mov	r5, r0
 800beca:	b1b0      	cbz	r0, 800befa <rcutils_strdup+0x3e>
 800becc:	f7f4 f992 	bl	80001f4 <strlen>
 800bed0:	1c42      	adds	r2, r0, #1
 800bed2:	9b07      	ldr	r3, [sp, #28]
 800bed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bed6:	9201      	str	r2, [sp, #4]
 800bed8:	4606      	mov	r6, r0
 800beda:	4610      	mov	r0, r2
 800bedc:	4798      	blx	r3
 800bede:	4604      	mov	r4, r0
 800bee0:	b128      	cbz	r0, 800beee <rcutils_strdup+0x32>
 800bee2:	9a01      	ldr	r2, [sp, #4]
 800bee4:	4629      	mov	r1, r5
 800bee6:	f007 fafa 	bl	80134de <memcpy>
 800beea:	2300      	movs	r3, #0
 800beec:	55a3      	strb	r3, [r4, r6]
 800beee:	4620      	mov	r0, r4
 800bef0:	b002      	add	sp, #8
 800bef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bef6:	b004      	add	sp, #16
 800bef8:	4770      	bx	lr
 800befa:	4604      	mov	r4, r0
 800befc:	e7f7      	b.n	800beee <rcutils_strdup+0x32>
 800befe:	bf00      	nop

0800bf00 <rcutils_strndup>:
 800bf00:	b082      	sub	sp, #8
 800bf02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf04:	ac06      	add	r4, sp, #24
 800bf06:	e884 000c 	stmia.w	r4, {r2, r3}
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b188      	cbz	r0, 800bf32 <rcutils_strndup+0x32>
 800bf0e:	1c4f      	adds	r7, r1, #1
 800bf10:	460e      	mov	r6, r1
 800bf12:	4638      	mov	r0, r7
 800bf14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf16:	4790      	blx	r2
 800bf18:	4604      	mov	r4, r0
 800bf1a:	b128      	cbz	r0, 800bf28 <rcutils_strndup+0x28>
 800bf1c:	463a      	mov	r2, r7
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f007 fadd 	bl	80134de <memcpy>
 800bf24:	2300      	movs	r3, #0
 800bf26:	55a3      	strb	r3, [r4, r6]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf2e:	b002      	add	sp, #8
 800bf30:	4770      	bx	lr
 800bf32:	4604      	mov	r4, r0
 800bf34:	e7f8      	b.n	800bf28 <rcutils_strndup+0x28>
 800bf36:	bf00      	nop

0800bf38 <rcutils_get_zero_initialized_string_map>:
 800bf38:	4b01      	ldr	r3, [pc, #4]	@ (800bf40 <rcutils_get_zero_initialized_string_map+0x8>)
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	6018      	str	r0, [r3, #0]
 800bf3e:	4770      	bx	lr
 800bf40:	20009080 	.word	0x20009080

0800bf44 <rcutils_string_map_reserve>:
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d05f      	beq.n	800c008 <rcutils_string_map_reserve+0xc4>
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	6801      	ldr	r1, [r0, #0]
 800bf50:	b082      	sub	sp, #8
 800bf52:	4605      	mov	r5, r0
 800bf54:	b129      	cbz	r1, 800bf62 <rcutils_string_map_reserve+0x1e>
 800bf56:	68cb      	ldr	r3, [r1, #12]
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d906      	bls.n	800bf6a <rcutils_string_map_reserve+0x26>
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d1f9      	bne.n	800bf56 <rcutils_string_map_reserve+0x12>
 800bf62:	201f      	movs	r0, #31
 800bf64:	b002      	add	sp, #8
 800bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6a:	688b      	ldr	r3, [r1, #8]
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	d047      	beq.n	800c000 <rcutils_string_map_reserve+0xbc>
 800bf70:	6a0e      	ldr	r6, [r1, #32]
 800bf72:	2c00      	cmp	r4, #0
 800bf74:	d034      	beq.n	800bfe0 <rcutils_string_map_reserve+0x9c>
 800bf76:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bf7a:	d243      	bcs.n	800c004 <rcutils_string_map_reserve+0xc0>
 800bf7c:	00a7      	lsls	r7, r4, #2
 800bf7e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800bf82:	6808      	ldr	r0, [r1, #0]
 800bf84:	4632      	mov	r2, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	47c0      	blx	r8
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d03a      	beq.n	800c004 <rcutils_string_map_reserve+0xc0>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	4632      	mov	r2, r6
 800bf92:	6018      	str	r0, [r3, #0]
 800bf94:	4639      	mov	r1, r7
 800bf96:	6858      	ldr	r0, [r3, #4]
 800bf98:	47c0      	blx	r8
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d032      	beq.n	800c004 <rcutils_string_map_reserve+0xc0>
 800bf9e:	682d      	ldr	r5, [r5, #0]
 800bfa0:	68ab      	ldr	r3, [r5, #8]
 800bfa2:	6068      	str	r0, [r5, #4]
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d226      	bcs.n	800bff6 <rcutils_string_map_reserve+0xb2>
 800bfa8:	682a      	ldr	r2, [r5, #0]
 800bfaa:	eb00 0c07 	add.w	ip, r0, r7
 800bfae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800bfb2:	45e6      	cmp	lr, ip
 800bfb4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800bfb8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800bfbc:	d203      	bcs.n	800bfc6 <rcutils_string_map_reserve+0x82>
 800bfbe:	eb02 0c07 	add.w	ip, r2, r7
 800bfc2:	4566      	cmp	r6, ip
 800bfc4:	d322      	bcc.n	800c00c <rcutils_string_map_reserve+0xc8>
 800bfc6:	1ae3      	subs	r3, r4, r3
 800bfc8:	009a      	lsls	r2, r3, #2
 800bfca:	4670      	mov	r0, lr
 800bfcc:	2100      	movs	r1, #0
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	f007 f9bc 	bl	801334c <memset>
 800bfd4:	9a01      	ldr	r2, [sp, #4]
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f007 f9b7 	bl	801334c <memset>
 800bfde:	e00a      	b.n	800bff6 <rcutils_string_map_reserve+0xb2>
 800bfe0:	694f      	ldr	r7, [r1, #20]
 800bfe2:	6808      	ldr	r0, [r1, #0]
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	47b8      	blx	r7
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	4631      	mov	r1, r6
 800bfec:	6858      	ldr	r0, [r3, #4]
 800bfee:	601c      	str	r4, [r3, #0]
 800bff0:	47b8      	blx	r7
 800bff2:	682d      	ldr	r5, [r5, #0]
 800bff4:	606c      	str	r4, [r5, #4]
 800bff6:	2000      	movs	r0, #0
 800bff8:	60ac      	str	r4, [r5, #8]
 800bffa:	b002      	add	sp, #8
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	2000      	movs	r0, #0
 800c002:	e7af      	b.n	800bf64 <rcutils_string_map_reserve+0x20>
 800c004:	200a      	movs	r0, #10
 800c006:	e7ad      	b.n	800bf64 <rcutils_string_map_reserve+0x20>
 800c008:	200b      	movs	r0, #11
 800c00a:	4770      	bx	lr
 800c00c:	1f0b      	subs	r3, r1, #4
 800c00e:	4418      	add	r0, r3
 800c010:	4413      	add	r3, r2
 800c012:	3a04      	subs	r2, #4
 800c014:	4417      	add	r7, r2
 800c016:	2200      	movs	r2, #0
 800c018:	f843 2f04 	str.w	r2, [r3, #4]!
 800c01c:	42bb      	cmp	r3, r7
 800c01e:	f840 2f04 	str.w	r2, [r0, #4]!
 800c022:	d1f9      	bne.n	800c018 <rcutils_string_map_reserve+0xd4>
 800c024:	e7e7      	b.n	800bff6 <rcutils_string_map_reserve+0xb2>
 800c026:	bf00      	nop

0800c028 <rcutils_string_map_init>:
 800c028:	b082      	sub	sp, #8
 800c02a:	b570      	push	{r4, r5, r6, lr}
 800c02c:	ac04      	add	r4, sp, #16
 800c02e:	e884 000c 	stmia.w	r4, {r2, r3}
 800c032:	b380      	cbz	r0, 800c096 <rcutils_string_map_init+0x6e>
 800c034:	6806      	ldr	r6, [r0, #0]
 800c036:	4604      	mov	r4, r0
 800c038:	b12e      	cbz	r6, 800c046 <rcutils_string_map_init+0x1e>
 800c03a:	251e      	movs	r5, #30
 800c03c:	4628      	mov	r0, r5
 800c03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c042:	b002      	add	sp, #8
 800c044:	4770      	bx	lr
 800c046:	a804      	add	r0, sp, #16
 800c048:	460d      	mov	r5, r1
 800c04a:	f7fb fe91 	bl	8007d70 <rcutils_allocator_is_valid>
 800c04e:	b310      	cbz	r0, 800c096 <rcutils_string_map_init+0x6e>
 800c050:	9b04      	ldr	r3, [sp, #16]
 800c052:	9908      	ldr	r1, [sp, #32]
 800c054:	2024      	movs	r0, #36	@ 0x24
 800c056:	4798      	blx	r3
 800c058:	6020      	str	r0, [r4, #0]
 800c05a:	b310      	cbz	r0, 800c0a2 <rcutils_string_map_init+0x7a>
 800c05c:	f10d 0e10 	add.w	lr, sp, #16
 800c060:	e9c0 6600 	strd	r6, r6, [r0]
 800c064:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800c068:	f100 0c10 	add.w	ip, r0, #16
 800c06c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c070:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c074:	f8de 3000 	ldr.w	r3, [lr]
 800c078:	f8cc 3000 	str.w	r3, [ip]
 800c07c:	4629      	mov	r1, r5
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff ff60 	bl	800bf44 <rcutils_string_map_reserve>
 800c084:	4605      	mov	r5, r0
 800c086:	2800      	cmp	r0, #0
 800c088:	d0d8      	beq.n	800c03c <rcutils_string_map_init+0x14>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	9908      	ldr	r1, [sp, #32]
 800c08e:	6820      	ldr	r0, [r4, #0]
 800c090:	4798      	blx	r3
 800c092:	6026      	str	r6, [r4, #0]
 800c094:	e7d2      	b.n	800c03c <rcutils_string_map_init+0x14>
 800c096:	250b      	movs	r5, #11
 800c098:	4628      	mov	r0, r5
 800c09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c09e:	b002      	add	sp, #8
 800c0a0:	4770      	bx	lr
 800c0a2:	250a      	movs	r5, #10
 800c0a4:	e7ca      	b.n	800c03c <rcutils_string_map_init+0x14>
 800c0a6:	bf00      	nop

0800c0a8 <rcutils_string_map_fini>:
 800c0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	b082      	sub	sp, #8
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d03a      	beq.n	800c128 <rcutils_string_map_fini+0x80>
 800c0b2:	6804      	ldr	r4, [r0, #0]
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	2c00      	cmp	r4, #0
 800c0b8:	d032      	beq.n	800c120 <rcutils_string_map_fini+0x78>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	b32b      	cbz	r3, 800c10a <rcutils_string_map_fini+0x62>
 800c0be:	2500      	movs	r5, #0
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	462f      	mov	r7, r5
 800c0c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c0c8:	b1e0      	cbz	r0, 800c104 <rcutils_string_map_fini+0x5c>
 800c0ca:	6a21      	ldr	r1, [r4, #32]
 800c0cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800c0d0:	9101      	str	r1, [sp, #4]
 800c0d2:	47c0      	blx	r8
 800c0d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c0d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800c0dc:	9901      	ldr	r1, [sp, #4]
 800c0de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0e2:	47c0      	blx	r8
 800c0e4:	68e3      	ldr	r3, [r4, #12]
 800c0e6:	6862      	ldr	r2, [r4, #4]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800c0ee:	60e3      	str	r3, [r4, #12]
 800c0f0:	6834      	ldr	r4, [r6, #0]
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	429d      	cmp	r5, r3
 800c0f8:	d207      	bcs.n	800c10a <rcutils_string_map_fini+0x62>
 800c0fa:	6822      	ldr	r2, [r4, #0]
 800c0fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c100:	2800      	cmp	r0, #0
 800c102:	d1e2      	bne.n	800c0ca <rcutils_string_map_fini+0x22>
 800c104:	3501      	adds	r5, #1
 800c106:	429d      	cmp	r5, r3
 800c108:	d3dc      	bcc.n	800c0c4 <rcutils_string_map_fini+0x1c>
 800c10a:	2100      	movs	r1, #0
 800c10c:	4630      	mov	r0, r6
 800c10e:	f7ff ff19 	bl	800bf44 <rcutils_string_map_reserve>
 800c112:	4604      	mov	r4, r0
 800c114:	b920      	cbnz	r0, 800c120 <rcutils_string_map_fini+0x78>
 800c116:	6830      	ldr	r0, [r6, #0]
 800c118:	6943      	ldr	r3, [r0, #20]
 800c11a:	6a01      	ldr	r1, [r0, #32]
 800c11c:	4798      	blx	r3
 800c11e:	6034      	str	r4, [r6, #0]
 800c120:	4620      	mov	r0, r4
 800c122:	b002      	add	sp, #8
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c128:	240b      	movs	r4, #11
 800c12a:	4620      	mov	r0, r4
 800c12c:	b002      	add	sp, #8
 800c12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c132:	bf00      	nop

0800c134 <rcutils_string_map_getn>:
 800c134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	b300      	cbz	r0, 800c17c <rcutils_string_map_getn+0x48>
 800c13a:	6807      	ldr	r7, [r0, #0]
 800c13c:	b1ff      	cbz	r7, 800c17e <rcutils_string_map_getn+0x4a>
 800c13e:	4688      	mov	r8, r1
 800c140:	b1e1      	cbz	r1, 800c17c <rcutils_string_map_getn+0x48>
 800c142:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800c146:	683e      	ldr	r6, [r7, #0]
 800c148:	f1ba 0f00 	cmp.w	sl, #0
 800c14c:	d016      	beq.n	800c17c <rcutils_string_map_getn+0x48>
 800c14e:	4691      	mov	r9, r2
 800c150:	3e04      	subs	r6, #4
 800c152:	2400      	movs	r4, #0
 800c154:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800c158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c15c:	4628      	mov	r0, r5
 800c15e:	3401      	adds	r4, #1
 800c160:	b155      	cbz	r5, 800c178 <rcutils_string_map_getn+0x44>
 800c162:	f7f4 f847 	bl	80001f4 <strlen>
 800c166:	4548      	cmp	r0, r9
 800c168:	4602      	mov	r2, r0
 800c16a:	4629      	mov	r1, r5
 800c16c:	bf38      	it	cc
 800c16e:	464a      	movcc	r2, r9
 800c170:	4640      	mov	r0, r8
 800c172:	f007 f900 	bl	8013376 <strncmp>
 800c176:	b128      	cbz	r0, 800c184 <rcutils_string_map_getn+0x50>
 800c178:	45a2      	cmp	sl, r4
 800c17a:	d1eb      	bne.n	800c154 <rcutils_string_map_getn+0x20>
 800c17c:	2700      	movs	r7, #0
 800c17e:	4638      	mov	r0, r7
 800c180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f853 700b 	ldr.w	r7, [r3, fp]
 800c18a:	4638      	mov	r0, r7
 800c18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c190 <rmw_get_zero_initialized_context>:
 800c190:	b510      	push	{r4, lr}
 800c192:	4604      	mov	r4, r0
 800c194:	3010      	adds	r0, #16
 800c196:	f000 f80b 	bl	800c1b0 <rmw_get_zero_initialized_init_options>
 800c19a:	2300      	movs	r3, #0
 800c19c:	2000      	movs	r0, #0
 800c19e:	2100      	movs	r1, #0
 800c1a0:	e9c4 0100 	strd	r0, r1, [r4]
 800c1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800c1a8:	60a3      	str	r3, [r4, #8]
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	bf00      	nop

0800c1b0 <rmw_get_zero_initialized_init_options>:
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	2238      	movs	r2, #56	@ 0x38
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	f007 f8c8 	bl	801334c <memset>
 800c1bc:	f104 0010 	add.w	r0, r4, #16
 800c1c0:	f000 f806 	bl	800c1d0 <rmw_get_default_security_options>
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1c8:	60e3      	str	r3, [r4, #12]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	bf00      	nop

0800c1d0 <rmw_get_default_security_options>:
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	7002      	strb	r2, [r0, #0]
 800c1d4:	6042      	str	r2, [r0, #4]
 800c1d6:	4770      	bx	lr

0800c1d8 <rmw_subscription_content_filter_options_fini>:
 800c1d8:	b1b0      	cbz	r0, 800c208 <rmw_subscription_content_filter_options_fini+0x30>
 800c1da:	b538      	push	{r3, r4, r5, lr}
 800c1dc:	4604      	mov	r4, r0
 800c1de:	4608      	mov	r0, r1
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	f7fb fdc5 	bl	8007d70 <rcutils_allocator_is_valid>
 800c1e6:	b168      	cbz	r0, 800c204 <rmw_subscription_content_filter_options_fini+0x2c>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	b120      	cbz	r0, 800c1f6 <rmw_subscription_content_filter_options_fini+0x1e>
 800c1ec:	686b      	ldr	r3, [r5, #4]
 800c1ee:	6929      	ldr	r1, [r5, #16]
 800c1f0:	4798      	blx	r3
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	1d20      	adds	r0, r4, #4
 800c1f8:	f005 fb7a 	bl	80118f0 <rcutils_string_array_fini>
 800c1fc:	3800      	subs	r0, #0
 800c1fe:	bf18      	it	ne
 800c200:	2001      	movne	r0, #1
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	200b      	movs	r0, #11
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	200b      	movs	r0, #11
 800c20a:	4770      	bx	lr

0800c20c <rmw_get_default_subscription_options>:
 800c20c:	2200      	movs	r2, #0
 800c20e:	e9c0 2200 	strd	r2, r2, [r0]
 800c212:	6082      	str	r2, [r0, #8]
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop

0800c218 <rmw_get_zero_initialized_message_info>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	2240      	movs	r2, #64	@ 0x40
 800c21c:	4604      	mov	r4, r0
 800c21e:	2100      	movs	r1, #0
 800c220:	f007 f894 	bl	801334c <memset>
 800c224:	4620      	mov	r0, r4
 800c226:	bd10      	pop	{r4, pc}

0800c228 <rmw_validate_full_topic_name>:
 800c228:	2800      	cmp	r0, #0
 800c22a:	d057      	beq.n	800c2dc <rmw_validate_full_topic_name+0xb4>
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	460d      	mov	r5, r1
 800c232:	2900      	cmp	r1, #0
 800c234:	d054      	beq.n	800c2e0 <rmw_validate_full_topic_name+0xb8>
 800c236:	4616      	mov	r6, r2
 800c238:	4604      	mov	r4, r0
 800c23a:	f7f3 ffdb 	bl	80001f4 <strlen>
 800c23e:	b148      	cbz	r0, 800c254 <rmw_validate_full_topic_name+0x2c>
 800c240:	7823      	ldrb	r3, [r4, #0]
 800c242:	2b2f      	cmp	r3, #47	@ 0x2f
 800c244:	d00d      	beq.n	800c262 <rmw_validate_full_topic_name+0x3a>
 800c246:	2302      	movs	r3, #2
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	b13e      	cbz	r6, 800c25c <rmw_validate_full_topic_name+0x34>
 800c24c:	2000      	movs	r0, #0
 800c24e:	6030      	str	r0, [r6, #0]
 800c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c254:	2301      	movs	r3, #1
 800c256:	602b      	str	r3, [r5, #0]
 800c258:	2e00      	cmp	r6, #0
 800c25a:	d1f7      	bne.n	800c24c <rmw_validate_full_topic_name+0x24>
 800c25c:	2000      	movs	r0, #0
 800c25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c262:	1e43      	subs	r3, r0, #1
 800c264:	5ce2      	ldrb	r2, [r4, r3]
 800c266:	2a2f      	cmp	r2, #47	@ 0x2f
 800c268:	d03c      	beq.n	800c2e4 <rmw_validate_full_topic_name+0xbc>
 800c26a:	1e63      	subs	r3, r4, #1
 800c26c:	eb03 0800 	add.w	r8, r3, r0
 800c270:	f1c4 0e01 	rsb	lr, r4, #1
 800c274:	eb0e 0703 	add.w	r7, lr, r3
 800c278:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c27c:	f021 0220 	bic.w	r2, r1, #32
 800c280:	3a41      	subs	r2, #65	@ 0x41
 800c282:	2a19      	cmp	r2, #25
 800c284:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800c288:	d90b      	bls.n	800c2a2 <rmw_validate_full_topic_name+0x7a>
 800c28a:	295f      	cmp	r1, #95	@ 0x5f
 800c28c:	d009      	beq.n	800c2a2 <rmw_validate_full_topic_name+0x7a>
 800c28e:	f1bc 0f0a 	cmp.w	ip, #10
 800c292:	d906      	bls.n	800c2a2 <rmw_validate_full_topic_name+0x7a>
 800c294:	2304      	movs	r3, #4
 800c296:	602b      	str	r3, [r5, #0]
 800c298:	2e00      	cmp	r6, #0
 800c29a:	d0df      	beq.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c29c:	6037      	str	r7, [r6, #0]
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e7d6      	b.n	800c250 <rmw_validate_full_topic_name+0x28>
 800c2a2:	4543      	cmp	r3, r8
 800c2a4:	d1e6      	bne.n	800c274 <rmw_validate_full_topic_name+0x4c>
 800c2a6:	4f1a      	ldr	r7, [pc, #104]	@ (800c310 <rmw_validate_full_topic_name+0xe8>)
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e004      	b.n	800c2b6 <rmw_validate_full_topic_name+0x8e>
 800c2ac:	4298      	cmp	r0, r3
 800c2ae:	f104 0401 	add.w	r4, r4, #1
 800c2b2:	d91c      	bls.n	800c2ee <rmw_validate_full_topic_name+0xc6>
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	4298      	cmp	r0, r3
 800c2b8:	f103 0201 	add.w	r2, r3, #1
 800c2bc:	d0f6      	beq.n	800c2ac <rmw_validate_full_topic_name+0x84>
 800c2be:	7821      	ldrb	r1, [r4, #0]
 800c2c0:	292f      	cmp	r1, #47	@ 0x2f
 800c2c2:	d1f3      	bne.n	800c2ac <rmw_validate_full_topic_name+0x84>
 800c2c4:	7861      	ldrb	r1, [r4, #1]
 800c2c6:	292f      	cmp	r1, #47	@ 0x2f
 800c2c8:	d01c      	beq.n	800c304 <rmw_validate_full_topic_name+0xdc>
 800c2ca:	5dc9      	ldrb	r1, [r1, r7]
 800c2cc:	0749      	lsls	r1, r1, #29
 800c2ce:	d5ed      	bpl.n	800c2ac <rmw_validate_full_topic_name+0x84>
 800c2d0:	2206      	movs	r2, #6
 800c2d2:	602a      	str	r2, [r5, #0]
 800c2d4:	2e00      	cmp	r6, #0
 800c2d6:	d0c1      	beq.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	e7bf      	b.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c2dc:	200b      	movs	r0, #11
 800c2de:	4770      	bx	lr
 800c2e0:	200b      	movs	r0, #11
 800c2e2:	e7b5      	b.n	800c250 <rmw_validate_full_topic_name+0x28>
 800c2e4:	2203      	movs	r2, #3
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	d1f5      	bne.n	800c2d8 <rmw_validate_full_topic_name+0xb0>
 800c2ec:	e7b6      	b.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c2ee:	28f7      	cmp	r0, #247	@ 0xf7
 800c2f0:	d802      	bhi.n	800c2f8 <rmw_validate_full_topic_name+0xd0>
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	6028      	str	r0, [r5, #0]
 800c2f6:	e7ab      	b.n	800c250 <rmw_validate_full_topic_name+0x28>
 800c2f8:	2307      	movs	r3, #7
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	2e00      	cmp	r6, #0
 800c2fe:	d0ad      	beq.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c300:	23f6      	movs	r3, #246	@ 0xf6
 800c302:	e7e9      	b.n	800c2d8 <rmw_validate_full_topic_name+0xb0>
 800c304:	2205      	movs	r2, #5
 800c306:	602a      	str	r2, [r5, #0]
 800c308:	2e00      	cmp	r6, #0
 800c30a:	d1e5      	bne.n	800c2d8 <rmw_validate_full_topic_name+0xb0>
 800c30c:	e7a6      	b.n	800c25c <rmw_validate_full_topic_name+0x34>
 800c30e:	bf00      	nop
 800c310:	08014e74 	.word	0x08014e74

0800c314 <rmw_validate_namespace_with_size>:
 800c314:	b340      	cbz	r0, 800c368 <rmw_validate_namespace_with_size+0x54>
 800c316:	b570      	push	{r4, r5, r6, lr}
 800c318:	4614      	mov	r4, r2
 800c31a:	b0c2      	sub	sp, #264	@ 0x108
 800c31c:	b332      	cbz	r2, 800c36c <rmw_validate_namespace_with_size+0x58>
 800c31e:	2901      	cmp	r1, #1
 800c320:	460d      	mov	r5, r1
 800c322:	461e      	mov	r6, r3
 800c324:	d102      	bne.n	800c32c <rmw_validate_namespace_with_size+0x18>
 800c326:	7803      	ldrb	r3, [r0, #0]
 800c328:	2b2f      	cmp	r3, #47	@ 0x2f
 800c32a:	d012      	beq.n	800c352 <rmw_validate_namespace_with_size+0x3e>
 800c32c:	aa01      	add	r2, sp, #4
 800c32e:	4669      	mov	r1, sp
 800c330:	f7ff ff7a 	bl	800c228 <rmw_validate_full_topic_name>
 800c334:	b978      	cbnz	r0, 800c356 <rmw_validate_namespace_with_size+0x42>
 800c336:	9b00      	ldr	r3, [sp, #0]
 800c338:	b14b      	cbz	r3, 800c34e <rmw_validate_namespace_with_size+0x3a>
 800c33a:	2b07      	cmp	r3, #7
 800c33c:	d007      	beq.n	800c34e <rmw_validate_namespace_with_size+0x3a>
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	2a05      	cmp	r2, #5
 800c342:	d82b      	bhi.n	800c39c <rmw_validate_namespace_with_size+0x88>
 800c344:	e8df f002 	tbb	[pc, r2]
 800c348:	1e212427 	.word	0x1e212427
 800c34c:	141b      	.short	0x141b
 800c34e:	2df5      	cmp	r5, #245	@ 0xf5
 800c350:	d803      	bhi.n	800c35a <rmw_validate_namespace_with_size+0x46>
 800c352:	2000      	movs	r0, #0
 800c354:	6020      	str	r0, [r4, #0]
 800c356:	b042      	add	sp, #264	@ 0x108
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	2307      	movs	r3, #7
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	2e00      	cmp	r6, #0
 800c360:	d0f9      	beq.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c362:	23f4      	movs	r3, #244	@ 0xf4
 800c364:	6033      	str	r3, [r6, #0]
 800c366:	e7f6      	b.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c368:	200b      	movs	r0, #11
 800c36a:	4770      	bx	lr
 800c36c:	200b      	movs	r0, #11
 800c36e:	e7f2      	b.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c370:	2306      	movs	r3, #6
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	2e00      	cmp	r6, #0
 800c376:	d0ee      	beq.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	e7eb      	b.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c37e:	2305      	movs	r3, #5
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	e7f7      	b.n	800c374 <rmw_validate_namespace_with_size+0x60>
 800c384:	2304      	movs	r3, #4
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	e7f4      	b.n	800c374 <rmw_validate_namespace_with_size+0x60>
 800c38a:	2303      	movs	r3, #3
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	e7f1      	b.n	800c374 <rmw_validate_namespace_with_size+0x60>
 800c390:	2302      	movs	r3, #2
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	e7ee      	b.n	800c374 <rmw_validate_namespace_with_size+0x60>
 800c396:	2301      	movs	r3, #1
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	e7eb      	b.n	800c374 <rmw_validate_namespace_with_size+0x60>
 800c39c:	4a03      	ldr	r2, [pc, #12]	@ (800c3ac <rmw_validate_namespace_with_size+0x98>)
 800c39e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c3a2:	a802      	add	r0, sp, #8
 800c3a4:	f7ff fd5e 	bl	800be64 <rcutils_snprintf>
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	e7d4      	b.n	800c356 <rmw_validate_namespace_with_size+0x42>
 800c3ac:	0801485c 	.word	0x0801485c

0800c3b0 <rmw_validate_namespace>:
 800c3b0:	b168      	cbz	r0, 800c3ce <rmw_validate_namespace+0x1e>
 800c3b2:	b570      	push	{r4, r5, r6, lr}
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	4616      	mov	r6, r2
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	f7f3 ff1b 	bl	80001f4 <strlen>
 800c3be:	4633      	mov	r3, r6
 800c3c0:	4601      	mov	r1, r0
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3ca:	f7ff bfa3 	b.w	800c314 <rmw_validate_namespace_with_size>
 800c3ce:	200b      	movs	r0, #11
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop

0800c3d4 <rmw_namespace_validation_result_string>:
 800c3d4:	2807      	cmp	r0, #7
 800c3d6:	bf9a      	itte	ls
 800c3d8:	4b02      	ldrls	r3, [pc, #8]	@ (800c3e4 <rmw_namespace_validation_result_string+0x10>)
 800c3da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c3de:	4802      	ldrhi	r0, [pc, #8]	@ (800c3e8 <rmw_namespace_validation_result_string+0x14>)
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	08014a54 	.word	0x08014a54
 800c3e8:	080148ac 	.word	0x080148ac

0800c3ec <rmw_validate_node_name>:
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d03b      	beq.n	800c468 <rmw_validate_node_name+0x7c>
 800c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	d038      	beq.n	800c46c <rmw_validate_node_name+0x80>
 800c3fa:	4616      	mov	r6, r2
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	f7f3 fef9 	bl	80001f4 <strlen>
 800c402:	b1e0      	cbz	r0, 800c43e <rmw_validate_node_name+0x52>
 800c404:	1e63      	subs	r3, r4, #1
 800c406:	eb03 0800 	add.w	r8, r3, r0
 800c40a:	f1c4 0101 	rsb	r1, r4, #1
 800c40e:	18cf      	adds	r7, r1, r3
 800c410:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800c414:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800c418:	f02e 0c20 	bic.w	ip, lr, #32
 800c41c:	2a09      	cmp	r2, #9
 800c41e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800c422:	d914      	bls.n	800c44e <rmw_validate_node_name+0x62>
 800c424:	f1bc 0f19 	cmp.w	ip, #25
 800c428:	d911      	bls.n	800c44e <rmw_validate_node_name+0x62>
 800c42a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800c42e:	d00e      	beq.n	800c44e <rmw_validate_node_name+0x62>
 800c430:	2302      	movs	r3, #2
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	b106      	cbz	r6, 800c438 <rmw_validate_node_name+0x4c>
 800c436:	6037      	str	r7, [r6, #0]
 800c438:	2000      	movs	r0, #0
 800c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c43e:	2301      	movs	r3, #1
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	2e00      	cmp	r6, #0
 800c444:	d0f8      	beq.n	800c438 <rmw_validate_node_name+0x4c>
 800c446:	2000      	movs	r0, #0
 800c448:	6030      	str	r0, [r6, #0]
 800c44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44e:	4543      	cmp	r3, r8
 800c450:	d1dd      	bne.n	800c40e <rmw_validate_node_name+0x22>
 800c452:	7822      	ldrb	r2, [r4, #0]
 800c454:	4b0d      	ldr	r3, [pc, #52]	@ (800c48c <rmw_validate_node_name+0xa0>)
 800c456:	5cd3      	ldrb	r3, [r2, r3]
 800c458:	f013 0304 	ands.w	r3, r3, #4
 800c45c:	d110      	bne.n	800c480 <rmw_validate_node_name+0x94>
 800c45e:	28ff      	cmp	r0, #255	@ 0xff
 800c460:	d806      	bhi.n	800c470 <rmw_validate_node_name+0x84>
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	4618      	mov	r0, r3
 800c466:	e7e8      	b.n	800c43a <rmw_validate_node_name+0x4e>
 800c468:	200b      	movs	r0, #11
 800c46a:	4770      	bx	lr
 800c46c:	200b      	movs	r0, #11
 800c46e:	e7e4      	b.n	800c43a <rmw_validate_node_name+0x4e>
 800c470:	2204      	movs	r2, #4
 800c472:	602a      	str	r2, [r5, #0]
 800c474:	2e00      	cmp	r6, #0
 800c476:	d0df      	beq.n	800c438 <rmw_validate_node_name+0x4c>
 800c478:	22fe      	movs	r2, #254	@ 0xfe
 800c47a:	6032      	str	r2, [r6, #0]
 800c47c:	4618      	mov	r0, r3
 800c47e:	e7dc      	b.n	800c43a <rmw_validate_node_name+0x4e>
 800c480:	2303      	movs	r3, #3
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	2e00      	cmp	r6, #0
 800c486:	d1de      	bne.n	800c446 <rmw_validate_node_name+0x5a>
 800c488:	e7d6      	b.n	800c438 <rmw_validate_node_name+0x4c>
 800c48a:	bf00      	nop
 800c48c:	08014e74 	.word	0x08014e74

0800c490 <rmw_node_name_validation_result_string>:
 800c490:	2804      	cmp	r0, #4
 800c492:	bf9a      	itte	ls
 800c494:	4b02      	ldrls	r3, [pc, #8]	@ (800c4a0 <rmw_node_name_validation_result_string+0x10>)
 800c496:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800c49a:	4802      	ldrhi	r0, [pc, #8]	@ (800c4a4 <rmw_node_name_validation_result_string+0x14>)
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	08014b60 	.word	0x08014b60
 800c4a4:	08014a74 	.word	0x08014a74

0800c4a8 <rmw_destroy_client>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	b128      	cbz	r0, 800c4b8 <rmw_destroy_client+0x10>
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	6800      	ldr	r0, [r0, #0]
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	f001 fc4b 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800c4b6:	b910      	cbnz	r0, 800c4be <rmw_destroy_client+0x16>
 800c4b8:	2401      	movs	r4, #1
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0f9      	beq.n	800c4b8 <rmw_destroy_client+0x10>
 800c4c4:	2d00      	cmp	r5, #0
 800c4c6:	d0f7      	beq.n	800c4b8 <rmw_destroy_client+0x10>
 800c4c8:	6828      	ldr	r0, [r5, #0]
 800c4ca:	f001 fc3f 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d0f2      	beq.n	800c4b8 <rmw_destroy_client+0x10>
 800c4d2:	686e      	ldr	r6, [r5, #4]
 800c4d4:	2e00      	cmp	r6, #0
 800c4d6:	d0ef      	beq.n	800c4b8 <rmw_destroy_client+0x10>
 800c4d8:	6864      	ldr	r4, [r4, #4]
 800c4da:	6932      	ldr	r2, [r6, #16]
 800c4dc:	6920      	ldr	r0, [r4, #16]
 800c4de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4e6:	6819      	ldr	r1, [r3, #0]
 800c4e8:	f001 ff06 	bl	800e2f8 <uxr_buffer_cancel_data>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	6920      	ldr	r0, [r4, #16]
 800c4f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c4f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c4f8:	f001 fba8 	bl	800dc4c <run_xrce_session>
 800c4fc:	6920      	ldr	r0, [r4, #16]
 800c4fe:	6932      	ldr	r2, [r6, #16]
 800c500:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c508:	6819      	ldr	r1, [r3, #0]
 800c50a:	f001 fc6d 	bl	800dde8 <uxr_buffer_delete_entity>
 800c50e:	4602      	mov	r2, r0
 800c510:	6920      	ldr	r0, [r4, #16]
 800c512:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c516:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c51a:	f001 fb97 	bl	800dc4c <run_xrce_session>
 800c51e:	2800      	cmp	r0, #0
 800c520:	4628      	mov	r0, r5
 800c522:	bf14      	ite	ne
 800c524:	2400      	movne	r4, #0
 800c526:	2402      	moveq	r4, #2
 800c528:	f001 fa78 	bl	800da1c <rmw_uxrce_fini_client_memory>
 800c52c:	e7c5      	b.n	800c4ba <rmw_destroy_client+0x12>
 800c52e:	bf00      	nop

0800c530 <rmw_get_implementation_identifier>:
 800c530:	4b01      	ldr	r3, [pc, #4]	@ (800c538 <rmw_get_implementation_identifier+0x8>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	08014e00 	.word	0x08014e00

0800c53c <rmw_init_options_init>:
 800c53c:	b084      	sub	sp, #16
 800c53e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c540:	b083      	sub	sp, #12
 800c542:	ad09      	add	r5, sp, #36	@ 0x24
 800c544:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c548:	b130      	cbz	r0, 800c558 <rmw_init_options_init+0x1c>
 800c54a:	4604      	mov	r4, r0
 800c54c:	4628      	mov	r0, r5
 800c54e:	f7fb fc0f 	bl	8007d70 <rcutils_allocator_is_valid>
 800c552:	b108      	cbz	r0, 800c558 <rmw_init_options_init+0x1c>
 800c554:	68a6      	ldr	r6, [r4, #8]
 800c556:	b12e      	cbz	r6, 800c564 <rmw_init_options_init+0x28>
 800c558:	200b      	movs	r0, #11
 800c55a:	b003      	add	sp, #12
 800c55c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c560:	b004      	add	sp, #16
 800c562:	4770      	bx	lr
 800c564:	2200      	movs	r2, #0
 800c566:	2300      	movs	r3, #0
 800c568:	e9c4 2300 	strd	r2, r3, [r4]
 800c56c:	4b22      	ldr	r3, [pc, #136]	@ (800c5f8 <rmw_init_options_init+0xbc>)
 800c56e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800c608 <rmw_init_options_init+0xcc>
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c578:	f104 0c20 	add.w	ip, r4, #32
 800c57c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c580:	466f      	mov	r7, sp
 800c582:	682b      	ldr	r3, [r5, #0]
 800c584:	f8cc 3000 	str.w	r3, [ip]
 800c588:	4638      	mov	r0, r7
 800c58a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800c58e:	60e6      	str	r6, [r4, #12]
 800c590:	f7ff fe1e 	bl	800c1d0 <rmw_get_default_security_options>
 800c594:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c598:	f104 0310 	add.w	r3, r4, #16
 800c59c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4816      	ldr	r0, [pc, #88]	@ (800c5fc <rmw_init_options_init+0xc0>)
 800c5a4:	4916      	ldr	r1, [pc, #88]	@ (800c600 <rmw_init_options_init+0xc4>)
 800c5a6:	7626      	strb	r6, [r4, #24]
 800c5a8:	f001 f978 	bl	800d89c <rmw_uxrce_init_init_options_impl_memory>
 800c5ac:	4813      	ldr	r0, [pc, #76]	@ (800c5fc <rmw_init_options_init+0xc0>)
 800c5ae:	f005 fb33 	bl	8011c18 <get_memory>
 800c5b2:	b1f0      	cbz	r0, 800c5f2 <rmw_init_options_init+0xb6>
 800c5b4:	4a13      	ldr	r2, [pc, #76]	@ (800c604 <rmw_init_options_init+0xc8>)
 800c5b6:	6883      	ldr	r3, [r0, #8]
 800c5b8:	6851      	ldr	r1, [r2, #4]
 800c5ba:	7810      	ldrb	r0, [r2, #0]
 800c5bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5be:	7418      	strb	r0, [r3, #16]
 800c5c0:	6159      	str	r1, [r3, #20]
 800c5c2:	68d1      	ldr	r1, [r2, #12]
 800c5c4:	61d9      	str	r1, [r3, #28]
 800c5c6:	6911      	ldr	r1, [r2, #16]
 800c5c8:	6219      	str	r1, [r3, #32]
 800c5ca:	6951      	ldr	r1, [r2, #20]
 800c5cc:	6892      	ldr	r2, [r2, #8]
 800c5ce:	619a      	str	r2, [r3, #24]
 800c5d0:	6259      	str	r1, [r3, #36]	@ 0x24
 800c5d2:	f003 fe43 	bl	801025c <uxr_nanos>
 800c5d6:	f006 fbf1 	bl	8012dbc <srand>
 800c5da:	f006 fc1d 	bl	8012e18 <rand>
 800c5de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5e0:	6298      	str	r0, [r3, #40]	@ 0x28
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0f9      	beq.n	800c5da <rmw_init_options_init+0x9e>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	b003      	add	sp, #12
 800c5ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c5ee:	b004      	add	sp, #16
 800c5f0:	4770      	bx	lr
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	e7b1      	b.n	800c55a <rmw_init_options_init+0x1e>
 800c5f6:	bf00      	nop
 800c5f8:	08014e00 	.word	0x08014e00
 800c5fc:	2000d97c 	.word	0x2000d97c
 800c600:	20009218 	.word	0x20009218
 800c604:	20008fd4 	.word	0x20008fd4
 800c608:	080145ec 	.word	0x080145ec

0800c60c <rmw_init_options_copy>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	b158      	cbz	r0, 800c628 <rmw_init_options_copy+0x1c>
 800c610:	460d      	mov	r5, r1
 800c612:	b149      	cbz	r1, 800c628 <rmw_init_options_copy+0x1c>
 800c614:	4604      	mov	r4, r0
 800c616:	6880      	ldr	r0, [r0, #8]
 800c618:	b120      	cbz	r0, 800c624 <rmw_init_options_copy+0x18>
 800c61a:	4b1e      	ldr	r3, [pc, #120]	@ (800c694 <rmw_init_options_copy+0x88>)
 800c61c:	6819      	ldr	r1, [r3, #0]
 800c61e:	f7f3 fddf 	bl	80001e0 <strcmp>
 800c622:	bb90      	cbnz	r0, 800c68a <rmw_init_options_copy+0x7e>
 800c624:	68ab      	ldr	r3, [r5, #8]
 800c626:	b113      	cbz	r3, 800c62e <rmw_init_options_copy+0x22>
 800c628:	250b      	movs	r5, #11
 800c62a:	4628      	mov	r0, r5
 800c62c:	bd70      	pop	{r4, r5, r6, pc}
 800c62e:	4623      	mov	r3, r4
 800c630:	462a      	mov	r2, r5
 800c632:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800c636:	f8d3 c000 	ldr.w	ip, [r3]
 800c63a:	6858      	ldr	r0, [r3, #4]
 800c63c:	6899      	ldr	r1, [r3, #8]
 800c63e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c642:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c646:	3310      	adds	r3, #16
 800c648:	42b3      	cmp	r3, r6
 800c64a:	f8c2 c000 	str.w	ip, [r2]
 800c64e:	6050      	str	r0, [r2, #4]
 800c650:	6091      	str	r1, [r2, #8]
 800c652:	f102 0210 	add.w	r2, r2, #16
 800c656:	d1ee      	bne.n	800c636 <rmw_init_options_copy+0x2a>
 800c658:	6819      	ldr	r1, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	480e      	ldr	r0, [pc, #56]	@ (800c698 <rmw_init_options_copy+0x8c>)
 800c65e:	6053      	str	r3, [r2, #4]
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	f005 fad9 	bl	8011c18 <get_memory>
 800c666:	b198      	cbz	r0, 800c690 <rmw_init_options_copy+0x84>
 800c668:	6883      	ldr	r3, [r0, #8]
 800c66a:	636b      	str	r3, [r5, #52]	@ 0x34
 800c66c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c66e:	f102 0c10 	add.w	ip, r2, #16
 800c672:	f103 0410 	add.w	r4, r3, #16
 800c676:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c67a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c67c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800c680:	2500      	movs	r5, #0
 800c682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c686:	4628      	mov	r0, r5
 800c688:	bd70      	pop	{r4, r5, r6, pc}
 800c68a:	250c      	movs	r5, #12
 800c68c:	4628      	mov	r0, r5
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	2501      	movs	r5, #1
 800c692:	e7ca      	b.n	800c62a <rmw_init_options_copy+0x1e>
 800c694:	08014e00 	.word	0x08014e00
 800c698:	2000d97c 	.word	0x2000d97c

0800c69c <rmw_init_options_fini>:
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d03d      	beq.n	800c71c <rmw_init_options_fini+0x80>
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	b08e      	sub	sp, #56	@ 0x38
 800c6a6:	3020      	adds	r0, #32
 800c6a8:	f7fb fb62 	bl	8007d70 <rcutils_allocator_is_valid>
 800c6ac:	b360      	cbz	r0, 800c708 <rmw_init_options_fini+0x6c>
 800c6ae:	68a0      	ldr	r0, [r4, #8]
 800c6b0:	b120      	cbz	r0, 800c6bc <rmw_init_options_fini+0x20>
 800c6b2:	4b1c      	ldr	r3, [pc, #112]	@ (800c724 <rmw_init_options_fini+0x88>)
 800c6b4:	6819      	ldr	r1, [r3, #0]
 800c6b6:	f7f3 fd93 	bl	80001e0 <strcmp>
 800c6ba:	bb68      	cbnz	r0, 800c718 <rmw_init_options_fini+0x7c>
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c728 <rmw_init_options_fini+0x8c>)
 800c6be:	6819      	ldr	r1, [r3, #0]
 800c6c0:	b331      	cbz	r1, 800c710 <rmw_init_options_fini+0x74>
 800c6c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c6c4:	e001      	b.n	800c6ca <rmw_init_options_fini+0x2e>
 800c6c6:	6849      	ldr	r1, [r1, #4]
 800c6c8:	b311      	cbz	r1, 800c710 <rmw_init_options_fini+0x74>
 800c6ca:	688b      	ldr	r3, [r1, #8]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d1fa      	bne.n	800c6c6 <rmw_init_options_fini+0x2a>
 800c6d0:	4815      	ldr	r0, [pc, #84]	@ (800c728 <rmw_init_options_fini+0x8c>)
 800c6d2:	f005 fab1 	bl	8011c38 <put_memory>
 800c6d6:	4668      	mov	r0, sp
 800c6d8:	f7ff fd6a 	bl	800c1b0 <rmw_get_zero_initialized_init_options>
 800c6dc:	46ee      	mov	lr, sp
 800c6de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6e2:	46a4      	mov	ip, r4
 800c6e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c6fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c700:	2300      	movs	r3, #0
 800c702:	4618      	mov	r0, r3
 800c704:	b00e      	add	sp, #56	@ 0x38
 800c706:	bd10      	pop	{r4, pc}
 800c708:	230b      	movs	r3, #11
 800c70a:	4618      	mov	r0, r3
 800c70c:	b00e      	add	sp, #56	@ 0x38
 800c70e:	bd10      	pop	{r4, pc}
 800c710:	2301      	movs	r3, #1
 800c712:	4618      	mov	r0, r3
 800c714:	b00e      	add	sp, #56	@ 0x38
 800c716:	bd10      	pop	{r4, pc}
 800c718:	230c      	movs	r3, #12
 800c71a:	e7f2      	b.n	800c702 <rmw_init_options_fini+0x66>
 800c71c:	230b      	movs	r3, #11
 800c71e:	4618      	mov	r0, r3
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	08014e00 	.word	0x08014e00
 800c728:	2000d97c 	.word	0x2000d97c

0800c72c <rmw_init>:
 800c72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c730:	b083      	sub	sp, #12
 800c732:	2800      	cmp	r0, #0
 800c734:	f000 80d3 	beq.w	800c8de <rmw_init+0x1b2>
 800c738:	460e      	mov	r6, r1
 800c73a:	2900      	cmp	r1, #0
 800c73c:	f000 80cf 	beq.w	800c8de <rmw_init+0x1b2>
 800c740:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c742:	4605      	mov	r5, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80ca 	beq.w	800c8de <rmw_init+0x1b2>
 800c74a:	4b78      	ldr	r3, [pc, #480]	@ (800c92c <rmw_init+0x200>)
 800c74c:	6880      	ldr	r0, [r0, #8]
 800c74e:	681f      	ldr	r7, [r3, #0]
 800c750:	b128      	cbz	r0, 800c75e <rmw_init+0x32>
 800c752:	4639      	mov	r1, r7
 800c754:	f7f3 fd44 	bl	80001e0 <strcmp>
 800c758:	2800      	cmp	r0, #0
 800c75a:	f040 80ca 	bne.w	800c8f2 <rmw_init+0x1c6>
 800c75e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c762:	4c73      	ldr	r4, [pc, #460]	@ (800c930 <rmw_init+0x204>)
 800c764:	4973      	ldr	r1, [pc, #460]	@ (800c934 <rmw_init+0x208>)
 800c766:	4874      	ldr	r0, [pc, #464]	@ (800c938 <rmw_init+0x20c>)
 800c768:	60b7      	str	r7, [r6, #8]
 800c76a:	e9c6 2300 	strd	r2, r3, [r6]
 800c76e:	68eb      	ldr	r3, [r5, #12]
 800c770:	64b3      	str	r3, [r6, #72]	@ 0x48
 800c772:	2201      	movs	r2, #1
 800c774:	f001 f832 	bl	800d7dc <rmw_uxrce_init_session_memory>
 800c778:	4620      	mov	r0, r4
 800c77a:	4970      	ldr	r1, [pc, #448]	@ (800c93c <rmw_init+0x210>)
 800c77c:	2204      	movs	r2, #4
 800c77e:	f001 f86d 	bl	800d85c <rmw_uxrce_init_static_input_buffer_memory>
 800c782:	f04f 0800 	mov.w	r8, #0
 800c786:	486c      	ldr	r0, [pc, #432]	@ (800c938 <rmw_init+0x20c>)
 800c788:	f884 800d 	strb.w	r8, [r4, #13]
 800c78c:	f005 fa44 	bl	8011c18 <get_memory>
 800c790:	2800      	cmp	r0, #0
 800c792:	f000 80a9 	beq.w	800c8e8 <rmw_init+0x1bc>
 800c796:	6884      	ldr	r4, [r0, #8]
 800c798:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800c79a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c79c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800c7a0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800c7a4:	9101      	str	r1, [sp, #4]
 800c7a6:	6a00      	ldr	r0, [r0, #32]
 800c7a8:	9000      	str	r0, [sp, #0]
 800c7aa:	f104 0910 	add.w	r9, r4, #16
 800c7ae:	4661      	mov	r1, ip
 800c7b0:	4648      	mov	r0, r9
 800c7b2:	f001 fcf1 	bl	800e198 <uxr_set_custom_transport_callbacks>
 800c7b6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800c7ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c7be:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800c7c2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800c7c6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800c7ca:	495d      	ldr	r1, [pc, #372]	@ (800c940 <rmw_init+0x214>)
 800c7cc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800c7d0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800c7d4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800c7d8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800c7dc:	4859      	ldr	r0, [pc, #356]	@ (800c944 <rmw_init+0x218>)
 800c7de:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800c7e6:	f000 ffd9 	bl	800d79c <rmw_uxrce_init_node_memory>
 800c7ea:	4957      	ldr	r1, [pc, #348]	@ (800c948 <rmw_init+0x21c>)
 800c7ec:	4857      	ldr	r0, [pc, #348]	@ (800c94c <rmw_init+0x220>)
 800c7ee:	2205      	movs	r2, #5
 800c7f0:	f000 ffb4 	bl	800d75c <rmw_uxrce_init_subscription_memory>
 800c7f4:	4956      	ldr	r1, [pc, #344]	@ (800c950 <rmw_init+0x224>)
 800c7f6:	4857      	ldr	r0, [pc, #348]	@ (800c954 <rmw_init+0x228>)
 800c7f8:	220a      	movs	r2, #10
 800c7fa:	f000 ff8f 	bl	800d71c <rmw_uxrce_init_publisher_memory>
 800c7fe:	4956      	ldr	r1, [pc, #344]	@ (800c958 <rmw_init+0x22c>)
 800c800:	4856      	ldr	r0, [pc, #344]	@ (800c95c <rmw_init+0x230>)
 800c802:	2201      	movs	r2, #1
 800c804:	f000 ff4a 	bl	800d69c <rmw_uxrce_init_service_memory>
 800c808:	4955      	ldr	r1, [pc, #340]	@ (800c960 <rmw_init+0x234>)
 800c80a:	4856      	ldr	r0, [pc, #344]	@ (800c964 <rmw_init+0x238>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	f000 ff65 	bl	800d6dc <rmw_uxrce_init_client_memory>
 800c812:	4955      	ldr	r1, [pc, #340]	@ (800c968 <rmw_init+0x23c>)
 800c814:	4855      	ldr	r0, [pc, #340]	@ (800c96c <rmw_init+0x240>)
 800c816:	220f      	movs	r2, #15
 800c818:	f001 f800 	bl	800d81c <rmw_uxrce_init_topic_memory>
 800c81c:	4954      	ldr	r1, [pc, #336]	@ (800c970 <rmw_init+0x244>)
 800c81e:	4855      	ldr	r0, [pc, #340]	@ (800c974 <rmw_init+0x248>)
 800c820:	2203      	movs	r2, #3
 800c822:	f001 f83b 	bl	800d89c <rmw_uxrce_init_init_options_impl_memory>
 800c826:	4954      	ldr	r1, [pc, #336]	@ (800c978 <rmw_init+0x24c>)
 800c828:	4854      	ldr	r0, [pc, #336]	@ (800c97c <rmw_init+0x250>)
 800c82a:	2204      	movs	r2, #4
 800c82c:	f001 f856 	bl	800d8dc <rmw_uxrce_init_wait_set_memory>
 800c830:	4953      	ldr	r1, [pc, #332]	@ (800c980 <rmw_init+0x254>)
 800c832:	4854      	ldr	r0, [pc, #336]	@ (800c984 <rmw_init+0x258>)
 800c834:	2204      	movs	r2, #4
 800c836:	f001 f871 	bl	800d91c <rmw_uxrce_init_guard_condition_memory>
 800c83a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800c83c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800c83e:	4642      	mov	r2, r8
 800c840:	f000 fd7e 	bl	800d340 <rmw_uxrce_transport_init>
 800c844:	4607      	mov	r7, r0
 800c846:	2800      	cmp	r0, #0
 800c848:	d158      	bne.n	800c8fc <rmw_init+0x1d0>
 800c84a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c84c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800c850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c852:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800c856:	4628      	mov	r0, r5
 800c858:	f001 fed2 	bl	800e600 <uxr_init_session>
 800c85c:	494a      	ldr	r1, [pc, #296]	@ (800c988 <rmw_init+0x25c>)
 800c85e:	4622      	mov	r2, r4
 800c860:	4628      	mov	r0, r5
 800c862:	f001 fef1 	bl	800e648 <uxr_set_topic_callback>
 800c866:	4949      	ldr	r1, [pc, #292]	@ (800c98c <rmw_init+0x260>)
 800c868:	463a      	mov	r2, r7
 800c86a:	4628      	mov	r0, r5
 800c86c:	f001 fee8 	bl	800e640 <uxr_set_status_callback>
 800c870:	4947      	ldr	r1, [pc, #284]	@ (800c990 <rmw_init+0x264>)
 800c872:	463a      	mov	r2, r7
 800c874:	4628      	mov	r0, r5
 800c876:	f001 feeb 	bl	800e650 <uxr_set_request_callback>
 800c87a:	4946      	ldr	r1, [pc, #280]	@ (800c994 <rmw_init+0x268>)
 800c87c:	463a      	mov	r2, r7
 800c87e:	4628      	mov	r0, r5
 800c880:	f001 feea 	bl	800e658 <uxr_set_reply_callback>
 800c884:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c888:	2304      	movs	r3, #4
 800c88a:	0092      	lsls	r2, r2, #2
 800c88c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800c890:	4628      	mov	r0, r5
 800c892:	f001 ff1f 	bl	800e6d4 <uxr_create_input_reliable_stream>
 800c896:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c89a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800c89e:	0092      	lsls	r2, r2, #2
 800c8a0:	2304      	movs	r3, #4
 800c8a2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	f001 feec 	bl	800e684 <uxr_create_output_reliable_stream>
 800c8ac:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f001 ff09 	bl	800e6c8 <uxr_create_input_best_effort_stream>
 800c8b6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800c8ba:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800c8be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800c8c2:	3114      	adds	r1, #20
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f001 fecb 	bl	800e660 <uxr_create_output_best_effort_stream>
 800c8ca:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f002 fc56 	bl	800f180 <uxr_create_session>
 800c8d4:	b1f8      	cbz	r0, 800c916 <rmw_init+0x1ea>
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	b003      	add	sp, #12
 800c8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8de:	270b      	movs	r7, #11
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	b003      	add	sp, #12
 800c8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e8:	2701      	movs	r7, #1
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	b003      	add	sp, #12
 800c8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8f2:	270c      	movs	r7, #12
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	b003      	add	sp, #12
 800c8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8fc:	4648      	mov	r0, r9
 800c8fe:	f001 fc8d 	bl	800e21c <uxr_close_custom_transport>
 800c902:	480d      	ldr	r0, [pc, #52]	@ (800c938 <rmw_init+0x20c>)
 800c904:	4621      	mov	r1, r4
 800c906:	f005 f997 	bl	8011c38 <put_memory>
 800c90a:	4638      	mov	r0, r7
 800c90c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800c910:	b003      	add	sp, #12
 800c912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c916:	4648      	mov	r0, r9
 800c918:	f001 fc80 	bl	800e21c <uxr_close_custom_transport>
 800c91c:	4806      	ldr	r0, [pc, #24]	@ (800c938 <rmw_init+0x20c>)
 800c91e:	4621      	mov	r1, r4
 800c920:	f005 f98a 	bl	8011c38 <put_memory>
 800c924:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800c926:	2701      	movs	r7, #1
 800c928:	e7d5      	b.n	800c8d6 <rmw_init+0x1aa>
 800c92a:	bf00      	nop
 800c92c:	08014e00 	.word	0x08014e00
 800c930:	2000d9cc 	.word	0x2000d9cc
 800c934:	20009c78 	.word	0x20009c78
 800c938:	2000d9bc 	.word	0x2000d9bc
 800c93c:	2000b220 	.word	0x2000b220
 800c940:	2000929c 	.word	0x2000929c
 800c944:	2000d98c 	.word	0x2000d98c
 800c948:	2000d320 	.word	0x2000d320
 800c94c:	2000d9dc 	.word	0x2000d9dc
 800c950:	20009340 	.word	0x20009340
 800c954:	2000d99c 	.word	0x2000d99c
 800c958:	20009bb0 	.word	0x20009bb0
 800c95c:	2000d9ac 	.word	0x2000d9ac
 800c960:	200090d0 	.word	0x200090d0
 800c964:	200090c0 	.word	0x200090c0
 800c968:	2000d758 	.word	0x2000d758
 800c96c:	2000d9ec 	.word	0x2000d9ec
 800c970:	20009218 	.word	0x20009218
 800c974:	2000d97c 	.word	0x2000d97c
 800c978:	2000d8fc 	.word	0x2000d8fc
 800c97c:	2000d9fc 	.word	0x2000d9fc
 800c980:	20009198 	.word	0x20009198
 800c984:	2000d96c 	.word	0x2000d96c
 800c988:	08011a51 	.word	0x08011a51
 800c98c:	08011a49 	.word	0x08011a49
 800c990:	08011ae9 	.word	0x08011ae9
 800c994:	08011b85 	.word	0x08011b85

0800c998 <rmw_context_fini>:
 800c998:	4b17      	ldr	r3, [pc, #92]	@ (800c9f8 <rmw_context_fini+0x60>)
 800c99a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c99c:	b570      	push	{r4, r5, r6, lr}
 800c99e:	681c      	ldr	r4, [r3, #0]
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	b334      	cbz	r4, 800c9f2 <rmw_context_fini+0x5a>
 800c9a4:	2600      	movs	r6, #0
 800c9a6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800c9aa:	6902      	ldr	r2, [r0, #16]
 800c9ac:	428a      	cmp	r2, r1
 800c9ae:	d018      	beq.n	800c9e2 <rmw_context_fini+0x4a>
 800c9b0:	2c00      	cmp	r4, #0
 800c9b2:	d1f8      	bne.n	800c9a6 <rmw_context_fini+0xe>
 800c9b4:	b189      	cbz	r1, 800c9da <rmw_context_fini+0x42>
 800c9b6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800c9ba:	789b      	ldrb	r3, [r3, #2]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800c9c2:	bf14      	ite	ne
 800c9c4:	210a      	movne	r1, #10
 800c9c6:	2100      	moveq	r1, #0
 800c9c8:	f002 fbb2 	bl	800f130 <uxr_delete_session_retries>
 800c9cc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c9ce:	f000 ffc5 	bl	800d95c <rmw_uxrce_fini_session_memory>
 800c9d2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c9d4:	3010      	adds	r0, #16
 800c9d6:	f001 fc21 	bl	800e21c <uxr_close_custom_transport>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800c9de:	4630      	mov	r0, r6
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	3018      	adds	r0, #24
 800c9e4:	f000 f89c 	bl	800cb20 <rmw_destroy_node>
 800c9e8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d1da      	bne.n	800c9a6 <rmw_context_fini+0xe>
 800c9f0:	e7e0      	b.n	800c9b4 <rmw_context_fini+0x1c>
 800c9f2:	4626      	mov	r6, r4
 800c9f4:	e7de      	b.n	800c9b4 <rmw_context_fini+0x1c>
 800c9f6:	bf00      	nop
 800c9f8:	2000d98c 	.word	0x2000d98c

0800c9fc <create_node>:
 800c9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca00:	b083      	sub	sp, #12
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d05f      	beq.n	800cac6 <create_node+0xca>
 800ca06:	4606      	mov	r6, r0
 800ca08:	4835      	ldr	r0, [pc, #212]	@ (800cae0 <create_node+0xe4>)
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	4690      	mov	r8, r2
 800ca0e:	461d      	mov	r5, r3
 800ca10:	f005 f902 	bl	8011c18 <get_memory>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d056      	beq.n	800cac6 <create_node+0xca>
 800ca18:	6884      	ldr	r4, [r0, #8]
 800ca1a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	f7ff fd87 	bl	800c530 <rmw_get_implementation_identifier>
 800ca22:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ca26:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ca2a:	f8c4 9020 	str.w	r9, [r4, #32]
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7f3 fbe0 	bl	80001f4 <strlen>
 800ca34:	1c42      	adds	r2, r0, #1
 800ca36:	2a3c      	cmp	r2, #60	@ 0x3c
 800ca38:	f104 0518 	add.w	r5, r4, #24
 800ca3c:	d840      	bhi.n	800cac0 <create_node+0xc4>
 800ca3e:	4648      	mov	r0, r9
 800ca40:	4631      	mov	r1, r6
 800ca42:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ca46:	f006 fd4a 	bl	80134de <memcpy>
 800ca4a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ca4e:	4638      	mov	r0, r7
 800ca50:	f7f3 fbd0 	bl	80001f4 <strlen>
 800ca54:	1c42      	adds	r2, r0, #1
 800ca56:	2a3c      	cmp	r2, #60	@ 0x3c
 800ca58:	d832      	bhi.n	800cac0 <create_node+0xc4>
 800ca5a:	4639      	mov	r1, r7
 800ca5c:	4648      	mov	r0, r9
 800ca5e:	f006 fd3e 	bl	80134de <memcpy>
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca68:	2101      	movs	r1, #1
 800ca6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800ca6e:	1842      	adds	r2, r0, r1
 800ca70:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800ca74:	f001 fbd6 	bl	800e224 <uxr_object_id>
 800ca78:	6160      	str	r0, [r4, #20]
 800ca7a:	783b      	ldrb	r3, [r7, #0]
 800ca7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca7e:	d127      	bne.n	800cad0 <create_node+0xd4>
 800ca80:	787b      	ldrb	r3, [r7, #1]
 800ca82:	bb2b      	cbnz	r3, 800cad0 <create_node+0xd4>
 800ca84:	4a17      	ldr	r2, [pc, #92]	@ (800cae4 <create_node+0xe8>)
 800ca86:	4818      	ldr	r0, [pc, #96]	@ (800cae8 <create_node+0xec>)
 800ca88:	4633      	mov	r3, r6
 800ca8a:	213c      	movs	r1, #60	@ 0x3c
 800ca8c:	f006 fb84 	bl	8013198 <sniprintf>
 800ca90:	6920      	ldr	r0, [r4, #16]
 800ca92:	4915      	ldr	r1, [pc, #84]	@ (800cae8 <create_node+0xec>)
 800ca94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ca98:	9100      	str	r1, [sp, #0]
 800ca9a:	2106      	movs	r1, #6
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	6811      	ldr	r1, [r2, #0]
 800caa0:	6962      	ldr	r2, [r4, #20]
 800caa2:	fa1f f388 	uxth.w	r3, r8
 800caa6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800caaa:	f001 f9e9 	bl	800de80 <uxr_buffer_create_participant_bin>
 800caae:	4602      	mov	r2, r0
 800cab0:	6920      	ldr	r0, [r4, #16]
 800cab2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cab6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800caba:	f001 f8c7 	bl	800dc4c <run_xrce_session>
 800cabe:	b918      	cbnz	r0, 800cac8 <create_node+0xcc>
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 ff51 	bl	800d968 <rmw_uxrce_fini_node_memory>
 800cac6:	2500      	movs	r5, #0
 800cac8:	4628      	mov	r0, r5
 800caca:	b003      	add	sp, #12
 800cacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad0:	4a06      	ldr	r2, [pc, #24]	@ (800caec <create_node+0xf0>)
 800cad2:	9600      	str	r6, [sp, #0]
 800cad4:	463b      	mov	r3, r7
 800cad6:	213c      	movs	r1, #60	@ 0x3c
 800cad8:	4803      	ldr	r0, [pc, #12]	@ (800cae8 <create_node+0xec>)
 800cada:	f006 fb5d 	bl	8013198 <sniprintf>
 800cade:	e7d7      	b.n	800ca90 <create_node+0x94>
 800cae0:	2000d98c 	.word	0x2000d98c
 800cae4:	08014b84 	.word	0x08014b84
 800cae8:	20009084 	.word	0x20009084
 800caec:	080145fc 	.word	0x080145fc

0800caf0 <rmw_create_node>:
 800caf0:	b199      	cbz	r1, 800cb1a <rmw_create_node+0x2a>
 800caf2:	780b      	ldrb	r3, [r1, #0]
 800caf4:	468c      	mov	ip, r1
 800caf6:	b183      	cbz	r3, 800cb1a <rmw_create_node+0x2a>
 800caf8:	b410      	push	{r4}
 800cafa:	4614      	mov	r4, r2
 800cafc:	b14a      	cbz	r2, 800cb12 <rmw_create_node+0x22>
 800cafe:	7813      	ldrb	r3, [r2, #0]
 800cb00:	b13b      	cbz	r3, 800cb12 <rmw_create_node+0x22>
 800cb02:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800cb04:	4603      	mov	r3, r0
 800cb06:	4621      	mov	r1, r4
 800cb08:	4660      	mov	r0, ip
 800cb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb0e:	f7ff bf75 	b.w	800c9fc <create_node>
 800cb12:	2000      	movs	r0, #0
 800cb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop

0800cb20 <rmw_destroy_node>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	b328      	cbz	r0, 800cb70 <rmw_destroy_node+0x50>
 800cb24:	4607      	mov	r7, r0
 800cb26:	6800      	ldr	r0, [r0, #0]
 800cb28:	b120      	cbz	r0, 800cb34 <rmw_destroy_node+0x14>
 800cb2a:	4b36      	ldr	r3, [pc, #216]	@ (800cc04 <rmw_destroy_node+0xe4>)
 800cb2c:	6819      	ldr	r1, [r3, #0]
 800cb2e:	f7f3 fb57 	bl	80001e0 <strcmp>
 800cb32:	b9e8      	cbnz	r0, 800cb70 <rmw_destroy_node+0x50>
 800cb34:	687d      	ldr	r5, [r7, #4]
 800cb36:	b1dd      	cbz	r5, 800cb70 <rmw_destroy_node+0x50>
 800cb38:	4b33      	ldr	r3, [pc, #204]	@ (800cc08 <rmw_destroy_node+0xe8>)
 800cb3a:	681c      	ldr	r4, [r3, #0]
 800cb3c:	2c00      	cmp	r4, #0
 800cb3e:	d05f      	beq.n	800cc00 <rmw_destroy_node+0xe0>
 800cb40:	2600      	movs	r6, #0
 800cb42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cb46:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800cb4a:	429d      	cmp	r5, r3
 800cb4c:	d013      	beq.n	800cb76 <rmw_destroy_node+0x56>
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	d1f7      	bne.n	800cb42 <rmw_destroy_node+0x22>
 800cb52:	4b2e      	ldr	r3, [pc, #184]	@ (800cc0c <rmw_destroy_node+0xec>)
 800cb54:	681c      	ldr	r4, [r3, #0]
 800cb56:	b1c4      	cbz	r4, 800cb8a <rmw_destroy_node+0x6a>
 800cb58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cb5c:	6a0b      	ldr	r3, [r1, #32]
 800cb5e:	429d      	cmp	r5, r3
 800cb60:	d1f9      	bne.n	800cb56 <rmw_destroy_node+0x36>
 800cb62:	317c      	adds	r1, #124	@ 0x7c
 800cb64:	4638      	mov	r0, r7
 800cb66:	f000 fb37 	bl	800d1d8 <rmw_destroy_subscription>
 800cb6a:	2801      	cmp	r0, #1
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	d1f2      	bne.n	800cb56 <rmw_destroy_node+0x36>
 800cb70:	2601      	movs	r6, #1
 800cb72:	4630      	mov	r0, r6
 800cb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb76:	3184      	adds	r1, #132	@ 0x84
 800cb78:	4638      	mov	r0, r7
 800cb7a:	f000 f853 	bl	800cc24 <rmw_destroy_publisher>
 800cb7e:	2801      	cmp	r0, #1
 800cb80:	4606      	mov	r6, r0
 800cb82:	d0f5      	beq.n	800cb70 <rmw_destroy_node+0x50>
 800cb84:	2c00      	cmp	r4, #0
 800cb86:	d1dc      	bne.n	800cb42 <rmw_destroy_node+0x22>
 800cb88:	e7e3      	b.n	800cb52 <rmw_destroy_node+0x32>
 800cb8a:	4b21      	ldr	r3, [pc, #132]	@ (800cc10 <rmw_destroy_node+0xf0>)
 800cb8c:	681c      	ldr	r4, [r3, #0]
 800cb8e:	b16c      	cbz	r4, 800cbac <rmw_destroy_node+0x8c>
 800cb90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cb94:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800cb96:	429d      	cmp	r5, r3
 800cb98:	d1f9      	bne.n	800cb8e <rmw_destroy_node+0x6e>
 800cb9a:	317c      	adds	r1, #124	@ 0x7c
 800cb9c:	4638      	mov	r0, r7
 800cb9e:	f000 f9e5 	bl	800cf6c <rmw_destroy_service>
 800cba2:	2801      	cmp	r0, #1
 800cba4:	4606      	mov	r6, r0
 800cba6:	d0e3      	beq.n	800cb70 <rmw_destroy_node+0x50>
 800cba8:	2c00      	cmp	r4, #0
 800cbaa:	d1f1      	bne.n	800cb90 <rmw_destroy_node+0x70>
 800cbac:	4b19      	ldr	r3, [pc, #100]	@ (800cc14 <rmw_destroy_node+0xf4>)
 800cbae:	681c      	ldr	r4, [r3, #0]
 800cbb0:	b16c      	cbz	r4, 800cbce <rmw_destroy_node+0xae>
 800cbb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800cbb6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800cbb8:	429d      	cmp	r5, r3
 800cbba:	d1f9      	bne.n	800cbb0 <rmw_destroy_node+0x90>
 800cbbc:	317c      	adds	r1, #124	@ 0x7c
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	f7ff fc72 	bl	800c4a8 <rmw_destroy_client>
 800cbc4:	2801      	cmp	r0, #1
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	d0d2      	beq.n	800cb70 <rmw_destroy_node+0x50>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d1f1      	bne.n	800cbb2 <rmw_destroy_node+0x92>
 800cbce:	6928      	ldr	r0, [r5, #16]
 800cbd0:	696a      	ldr	r2, [r5, #20]
 800cbd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cbd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbda:	6819      	ldr	r1, [r3, #0]
 800cbdc:	f001 f904 	bl	800dde8 <uxr_buffer_delete_entity>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	6928      	ldr	r0, [r5, #16]
 800cbe4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cbe8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cbec:	f001 f82e 	bl	800dc4c <run_xrce_session>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	bf08      	it	eq
 800cbf4:	2602      	moveq	r6, #2
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	f000 feb6 	bl	800d968 <rmw_uxrce_fini_node_memory>
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc00:	4626      	mov	r6, r4
 800cc02:	e7a6      	b.n	800cb52 <rmw_destroy_node+0x32>
 800cc04:	08014e00 	.word	0x08014e00
 800cc08:	2000d99c 	.word	0x2000d99c
 800cc0c:	2000d9dc 	.word	0x2000d9dc
 800cc10:	2000d9ac 	.word	0x2000d9ac
 800cc14:	200090c0 	.word	0x200090c0

0800cc18 <rmw_node_get_graph_guard_condition>:
 800cc18:	6843      	ldr	r3, [r0, #4]
 800cc1a:	6918      	ldr	r0, [r3, #16]
 800cc1c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop

0800cc24 <rmw_destroy_publisher>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	b128      	cbz	r0, 800cc34 <rmw_destroy_publisher+0x10>
 800cc28:	4604      	mov	r4, r0
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	f001 f88d 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800cc32:	b910      	cbnz	r0, 800cc3a <rmw_destroy_publisher+0x16>
 800cc34:	2401      	movs	r4, #1
 800cc36:	4620      	mov	r0, r4
 800cc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0f9      	beq.n	800cc34 <rmw_destroy_publisher+0x10>
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	d0f7      	beq.n	800cc34 <rmw_destroy_publisher+0x10>
 800cc44:	6828      	ldr	r0, [r5, #0]
 800cc46:	f001 f881 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d0f2      	beq.n	800cc34 <rmw_destroy_publisher+0x10>
 800cc4e:	686c      	ldr	r4, [r5, #4]
 800cc50:	2c00      	cmp	r4, #0
 800cc52:	d0ef      	beq.n	800cc34 <rmw_destroy_publisher+0x10>
 800cc54:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cc56:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cc5a:	f005 f879 	bl	8011d50 <destroy_topic>
 800cc5e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cc62:	6962      	ldr	r2, [r4, #20]
 800cc64:	6918      	ldr	r0, [r3, #16]
 800cc66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cc6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	f001 f8ba 	bl	800dde8 <uxr_buffer_delete_entity>
 800cc74:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cc78:	6922      	ldr	r2, [r4, #16]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cc80:	4604      	mov	r4, r0
 800cc82:	6809      	ldr	r1, [r1, #0]
 800cc84:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cc88:	f001 f8ae 	bl	800dde8 <uxr_buffer_delete_entity>
 800cc8c:	693e      	ldr	r6, [r7, #16]
 800cc8e:	4622      	mov	r2, r4
 800cc90:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cc94:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cc98:	4604      	mov	r4, r0
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f000 ffd6 	bl	800dc4c <run_xrce_session>
 800cca0:	693e      	ldr	r6, [r7, #16]
 800cca2:	4622      	mov	r2, r4
 800cca4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cca8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ccac:	4604      	mov	r4, r0
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f000 ffcc 	bl	800dc4c <run_xrce_session>
 800ccb4:	b12c      	cbz	r4, 800ccc2 <rmw_destroy_publisher+0x9e>
 800ccb6:	b120      	cbz	r0, 800ccc2 <rmw_destroy_publisher+0x9e>
 800ccb8:	2400      	movs	r4, #0
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f000 fe6c 	bl	800d998 <rmw_uxrce_fini_publisher_memory>
 800ccc0:	e7b9      	b.n	800cc36 <rmw_destroy_publisher+0x12>
 800ccc2:	2402      	movs	r4, #2
 800ccc4:	e7f9      	b.n	800ccba <rmw_destroy_publisher+0x96>
 800ccc6:	bf00      	nop

0800ccc8 <rmw_send_request>:
 800ccc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cccc:	4604      	mov	r4, r0
 800ccce:	6800      	ldr	r0, [r0, #0]
 800ccd0:	b08b      	sub	sp, #44	@ 0x2c
 800ccd2:	460e      	mov	r6, r1
 800ccd4:	4615      	mov	r5, r2
 800ccd6:	b128      	cbz	r0, 800cce4 <rmw_send_request+0x1c>
 800ccd8:	4b21      	ldr	r3, [pc, #132]	@ (800cd60 <rmw_send_request+0x98>)
 800ccda:	6819      	ldr	r1, [r3, #0]
 800ccdc:	f7f3 fa80 	bl	80001e0 <strcmp>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d139      	bne.n	800cd58 <rmw_send_request+0x90>
 800cce4:	6864      	ldr	r4, [r4, #4]
 800cce6:	6963      	ldr	r3, [r4, #20]
 800cce8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	4798      	blx	r3
 800ccf0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccfa:	4798      	blx	r3
 800ccfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cd00:	9000      	str	r0, [sp, #0]
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800cd06:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cd0a:	ab02      	add	r3, sp, #8
 800cd0c:	f003 fabc 	bl	8010288 <uxr_prepare_output_stream>
 800cd10:	2700      	movs	r7, #0
 800cd12:	6028      	str	r0, [r5, #0]
 800cd14:	606f      	str	r7, [r5, #4]
 800cd16:	b198      	cbz	r0, 800cd40 <rmw_send_request+0x78>
 800cd18:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cd1c:	a902      	add	r1, sp, #8
 800cd1e:	4630      	mov	r0, r6
 800cd20:	4798      	blx	r3
 800cd22:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800cd26:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d00c      	beq.n	800cd48 <rmw_send_request+0x80>
 800cd2e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800cd30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd34:	f002 f8b4 	bl	800eea0 <uxr_run_session_until_confirm_delivery>
 800cd38:	4638      	mov	r0, r7
 800cd3a:	b00b      	add	sp, #44	@ 0x2c
 800cd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd40:	2001      	movs	r0, #1
 800cd42:	b00b      	add	sp, #44	@ 0x2c
 800cd44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd4c:	f001 fce8 	bl	800e720 <uxr_flash_output_streams>
 800cd50:	4638      	mov	r0, r7
 800cd52:	b00b      	add	sp, #44	@ 0x2c
 800cd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd58:	200c      	movs	r0, #12
 800cd5a:	b00b      	add	sp, #44	@ 0x2c
 800cd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd60:	08014e00 	.word	0x08014e00

0800cd64 <rmw_take_request>:
 800cd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd68:	4605      	mov	r5, r0
 800cd6a:	6800      	ldr	r0, [r0, #0]
 800cd6c:	b089      	sub	sp, #36	@ 0x24
 800cd6e:	460c      	mov	r4, r1
 800cd70:	4690      	mov	r8, r2
 800cd72:	461e      	mov	r6, r3
 800cd74:	b128      	cbz	r0, 800cd82 <rmw_take_request+0x1e>
 800cd76:	4b28      	ldr	r3, [pc, #160]	@ (800ce18 <rmw_take_request+0xb4>)
 800cd78:	6819      	ldr	r1, [r3, #0]
 800cd7a:	f7f3 fa31 	bl	80001e0 <strcmp>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d146      	bne.n	800ce10 <rmw_take_request+0xac>
 800cd82:	b10e      	cbz	r6, 800cd88 <rmw_take_request+0x24>
 800cd84:	2300      	movs	r3, #0
 800cd86:	7033      	strb	r3, [r6, #0]
 800cd88:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800cd8c:	f000 fee0 	bl	800db50 <rmw_uxrce_clean_expired_static_input_buffer>
 800cd90:	4648      	mov	r0, r9
 800cd92:	f000 feb5 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800cd96:	4607      	mov	r7, r0
 800cd98:	b3b0      	cbz	r0, 800ce08 <rmw_take_request+0xa4>
 800cd9a:	6885      	ldr	r5, [r0, #8]
 800cd9c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800cda0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800cda4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cda8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800cdac:	7423      	strb	r3, [r4, #16]
 800cdae:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800cdb2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800cdb6:	74e2      	strb	r2, [r4, #19]
 800cdb8:	f8a4 3011 	strh.w	r3, [r4, #17]
 800cdbc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800cdc0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800cdc4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800cdc8:	61e1      	str	r1, [r4, #28]
 800cdca:	6162      	str	r2, [r4, #20]
 800cdcc:	61a3      	str	r3, [r4, #24]
 800cdce:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	4798      	blx	r3
 800cdd6:	6844      	ldr	r4, [r0, #4]
 800cdd8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800cddc:	f105 0110 	add.w	r1, r5, #16
 800cde0:	4668      	mov	r0, sp
 800cde2:	f7fc f89d 	bl	8008f20 <ucdr_init_buffer>
 800cde6:	68e3      	ldr	r3, [r4, #12]
 800cde8:	4641      	mov	r1, r8
 800cdea:	4668      	mov	r0, sp
 800cdec:	4798      	blx	r3
 800cdee:	4639      	mov	r1, r7
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	480a      	ldr	r0, [pc, #40]	@ (800ce1c <rmw_take_request+0xb8>)
 800cdf4:	f004 ff20 	bl	8011c38 <put_memory>
 800cdf8:	b106      	cbz	r6, 800cdfc <rmw_take_request+0x98>
 800cdfa:	7034      	strb	r4, [r6, #0]
 800cdfc:	f084 0001 	eor.w	r0, r4, #1
 800ce00:	b2c0      	uxtb	r0, r0
 800ce02:	b009      	add	sp, #36	@ 0x24
 800ce04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce08:	2001      	movs	r0, #1
 800ce0a:	b009      	add	sp, #36	@ 0x24
 800ce0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce10:	200c      	movs	r0, #12
 800ce12:	b009      	add	sp, #36	@ 0x24
 800ce14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce18:	08014e00 	.word	0x08014e00
 800ce1c:	2000d9cc 	.word	0x2000d9cc

0800ce20 <rmw_send_response>:
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	4605      	mov	r5, r0
 800ce24:	6800      	ldr	r0, [r0, #0]
 800ce26:	b091      	sub	sp, #68	@ 0x44
 800ce28:	460c      	mov	r4, r1
 800ce2a:	4616      	mov	r6, r2
 800ce2c:	b128      	cbz	r0, 800ce3a <rmw_send_response+0x1a>
 800ce2e:	4b29      	ldr	r3, [pc, #164]	@ (800ced4 <rmw_send_response+0xb4>)
 800ce30:	6819      	ldr	r1, [r3, #0]
 800ce32:	f7f3 f9d5 	bl	80001e0 <strcmp>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d141      	bne.n	800cebe <rmw_send_response+0x9e>
 800ce3a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ce3e:	9306      	str	r3, [sp, #24]
 800ce40:	4623      	mov	r3, r4
 800ce42:	9207      	str	r2, [sp, #28]
 800ce44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce48:	686d      	ldr	r5, [r5, #4]
 800ce4a:	789b      	ldrb	r3, [r3, #2]
 800ce4c:	68a1      	ldr	r1, [r4, #8]
 800ce4e:	f88d 2017 	strb.w	r2, [sp, #23]
 800ce52:	f88d 3016 	strb.w	r3, [sp, #22]
 800ce56:	68e2      	ldr	r2, [r4, #12]
 800ce58:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800ce5c:	6860      	ldr	r0, [r4, #4]
 800ce5e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce62:	ab02      	add	r3, sp, #8
 800ce64:	c307      	stmia	r3!, {r0, r1, r2}
 800ce66:	696b      	ldr	r3, [r5, #20]
 800ce68:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	4798      	blx	r3
 800ce6e:	6844      	ldr	r4, [r0, #4]
 800ce70:	4630      	mov	r0, r6
 800ce72:	6923      	ldr	r3, [r4, #16]
 800ce74:	4798      	blx	r3
 800ce76:	f100 0318 	add.w	r3, r0, #24
 800ce7a:	6938      	ldr	r0, [r7, #16]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	692a      	ldr	r2, [r5, #16]
 800ce80:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800ce82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce86:	ab08      	add	r3, sp, #32
 800ce88:	f003 f9fe 	bl	8010288 <uxr_prepare_output_stream>
 800ce8c:	b910      	cbnz	r0, 800ce94 <rmw_send_response+0x74>
 800ce8e:	2001      	movs	r0, #1
 800ce90:	b011      	add	sp, #68	@ 0x44
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce94:	a902      	add	r1, sp, #8
 800ce96:	a808      	add	r0, sp, #32
 800ce98:	f004 f988 	bl	80111ac <uxr_serialize_SampleIdentity>
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	a908      	add	r1, sp, #32
 800cea0:	4630      	mov	r0, r6
 800cea2:	4798      	blx	r3
 800cea4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800cea8:	6938      	ldr	r0, [r7, #16]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d00a      	beq.n	800cec4 <rmw_send_response+0xa4>
 800ceae:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ceb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ceb4:	f001 fff4 	bl	800eea0 <uxr_run_session_until_confirm_delivery>
 800ceb8:	2000      	movs	r0, #0
 800ceba:	b011      	add	sp, #68	@ 0x44
 800cebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cebe:	200c      	movs	r0, #12
 800cec0:	b011      	add	sp, #68	@ 0x44
 800cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cec8:	f001 fc2a 	bl	800e720 <uxr_flash_output_streams>
 800cecc:	2000      	movs	r0, #0
 800cece:	b011      	add	sp, #68	@ 0x44
 800ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced2:	bf00      	nop
 800ced4:	08014e00 	.word	0x08014e00

0800ced8 <rmw_take_response>:
 800ced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cedc:	4604      	mov	r4, r0
 800cede:	6800      	ldr	r0, [r0, #0]
 800cee0:	b088      	sub	sp, #32
 800cee2:	4688      	mov	r8, r1
 800cee4:	4617      	mov	r7, r2
 800cee6:	461d      	mov	r5, r3
 800cee8:	b120      	cbz	r0, 800cef4 <rmw_take_response+0x1c>
 800ceea:	4b1e      	ldr	r3, [pc, #120]	@ (800cf64 <rmw_take_response+0x8c>)
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	f7f3 f977 	bl	80001e0 <strcmp>
 800cef2:	bb78      	cbnz	r0, 800cf54 <rmw_take_response+0x7c>
 800cef4:	b10d      	cbz	r5, 800cefa <rmw_take_response+0x22>
 800cef6:	2300      	movs	r3, #0
 800cef8:	702b      	strb	r3, [r5, #0]
 800cefa:	6864      	ldr	r4, [r4, #4]
 800cefc:	f000 fe28 	bl	800db50 <rmw_uxrce_clean_expired_static_input_buffer>
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fdfd 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800cf06:	4606      	mov	r6, r0
 800cf08:	b340      	cbz	r0, 800cf5c <rmw_take_response+0x84>
 800cf0a:	6963      	ldr	r3, [r4, #20]
 800cf0c:	6884      	ldr	r4, [r0, #8]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800cf14:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800cf18:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800cf1c:	4798      	blx	r3
 800cf1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cf22:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800cf26:	f104 0110 	add.w	r1, r4, #16
 800cf2a:	4668      	mov	r0, sp
 800cf2c:	f7fb fff8 	bl	8008f20 <ucdr_init_buffer>
 800cf30:	4639      	mov	r1, r7
 800cf32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf36:	4668      	mov	r0, sp
 800cf38:	4798      	blx	r3
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	480a      	ldr	r0, [pc, #40]	@ (800cf68 <rmw_take_response+0x90>)
 800cf40:	f004 fe7a 	bl	8011c38 <put_memory>
 800cf44:	b105      	cbz	r5, 800cf48 <rmw_take_response+0x70>
 800cf46:	702c      	strb	r4, [r5, #0]
 800cf48:	f084 0001 	eor.w	r0, r4, #1
 800cf4c:	b2c0      	uxtb	r0, r0
 800cf4e:	b008      	add	sp, #32
 800cf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf54:	200c      	movs	r0, #12
 800cf56:	b008      	add	sp, #32
 800cf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	b008      	add	sp, #32
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf64:	08014e00 	.word	0x08014e00
 800cf68:	2000d9cc 	.word	0x2000d9cc

0800cf6c <rmw_destroy_service>:
 800cf6c:	b570      	push	{r4, r5, r6, lr}
 800cf6e:	b128      	cbz	r0, 800cf7c <rmw_destroy_service+0x10>
 800cf70:	4604      	mov	r4, r0
 800cf72:	6800      	ldr	r0, [r0, #0]
 800cf74:	460d      	mov	r5, r1
 800cf76:	f000 fee9 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800cf7a:	b910      	cbnz	r0, 800cf82 <rmw_destroy_service+0x16>
 800cf7c:	2401      	movs	r4, #1
 800cf7e:	4620      	mov	r0, r4
 800cf80:	bd70      	pop	{r4, r5, r6, pc}
 800cf82:	6863      	ldr	r3, [r4, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0f9      	beq.n	800cf7c <rmw_destroy_service+0x10>
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	d0f7      	beq.n	800cf7c <rmw_destroy_service+0x10>
 800cf8c:	6828      	ldr	r0, [r5, #0]
 800cf8e:	f000 fedd 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d0f2      	beq.n	800cf7c <rmw_destroy_service+0x10>
 800cf96:	686e      	ldr	r6, [r5, #4]
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	d0ef      	beq.n	800cf7c <rmw_destroy_service+0x10>
 800cf9c:	6864      	ldr	r4, [r4, #4]
 800cf9e:	6932      	ldr	r2, [r6, #16]
 800cfa0:	6920      	ldr	r0, [r4, #16]
 800cfa2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cfa6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cfaa:	6819      	ldr	r1, [r3, #0]
 800cfac:	f001 f9a4 	bl	800e2f8 <uxr_buffer_cancel_data>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6920      	ldr	r0, [r4, #16]
 800cfb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cfb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cfbc:	f000 fe46 	bl	800dc4c <run_xrce_session>
 800cfc0:	6920      	ldr	r0, [r4, #16]
 800cfc2:	6932      	ldr	r2, [r6, #16]
 800cfc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cfc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cfcc:	6819      	ldr	r1, [r3, #0]
 800cfce:	f000 ff0b 	bl	800dde8 <uxr_buffer_delete_entity>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	6920      	ldr	r0, [r4, #16]
 800cfd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800cfda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800cfde:	f000 fe35 	bl	800dc4c <run_xrce_session>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	bf14      	ite	ne
 800cfe8:	2400      	movne	r4, #0
 800cfea:	2402      	moveq	r4, #2
 800cfec:	f000 fd00 	bl	800d9f0 <rmw_uxrce_fini_service_memory>
 800cff0:	e7c5      	b.n	800cf7e <rmw_destroy_service+0x12>
 800cff2:	bf00      	nop

0800cff4 <rmw_create_subscription>:
 800cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	b08d      	sub	sp, #52	@ 0x34
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f000 80d1 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d000:	460e      	mov	r6, r1
 800d002:	2900      	cmp	r1, #0
 800d004:	f000 80cd 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d008:	4604      	mov	r4, r0
 800d00a:	6800      	ldr	r0, [r0, #0]
 800d00c:	4615      	mov	r5, r2
 800d00e:	4698      	mov	r8, r3
 800d010:	f000 fe9c 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800d014:	2800      	cmp	r0, #0
 800d016:	f000 80c4 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	f000 80c1 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d020:	782b      	ldrb	r3, [r5, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80bd 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d028:	f1b8 0f00 	cmp.w	r8, #0
 800d02c:	f000 80b9 	beq.w	800d1a2 <rmw_create_subscription+0x1ae>
 800d030:	485e      	ldr	r0, [pc, #376]	@ (800d1ac <rmw_create_subscription+0x1b8>)
 800d032:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d036:	f004 fdef 	bl	8011c18 <get_memory>
 800d03a:	4604      	mov	r4, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	f000 80b1 	beq.w	800d1a4 <rmw_create_subscription+0x1b0>
 800d042:	6887      	ldr	r7, [r0, #8]
 800d044:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800d048:	f7ff fa72 	bl	800c530 <rmw_get_implementation_identifier>
 800d04c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800d050:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d052:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800d056:	4628      	mov	r0, r5
 800d058:	f7f3 f8cc 	bl	80001f4 <strlen>
 800d05c:	3001      	adds	r0, #1
 800d05e:	283c      	cmp	r0, #60	@ 0x3c
 800d060:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800d064:	f200 8096 	bhi.w	800d194 <rmw_create_subscription+0x1a0>
 800d068:	4a51      	ldr	r2, [pc, #324]	@ (800d1b0 <rmw_create_subscription+0x1bc>)
 800d06a:	462b      	mov	r3, r5
 800d06c:	213c      	movs	r1, #60	@ 0x3c
 800d06e:	4650      	mov	r0, sl
 800d070:	f006 f892 	bl	8013198 <sniprintf>
 800d074:	4641      	mov	r1, r8
 800d076:	f8c7 9020 	str.w	r9, [r7, #32]
 800d07a:	2250      	movs	r2, #80	@ 0x50
 800d07c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800d080:	f006 fa2d 	bl	80134de <memcpy>
 800d084:	494b      	ldr	r1, [pc, #300]	@ (800d1b4 <rmw_create_subscription+0x1c0>)
 800d086:	4630      	mov	r0, r6
 800d088:	f000 fe6e 	bl	800dd68 <get_message_typesupport_handle>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	f000 8081 	beq.w	800d194 <rmw_create_subscription+0x1a0>
 800d092:	6842      	ldr	r2, [r0, #4]
 800d094:	61ba      	str	r2, [r7, #24]
 800d096:	2a00      	cmp	r2, #0
 800d098:	d07c      	beq.n	800d194 <rmw_create_subscription+0x1a0>
 800d09a:	4629      	mov	r1, r5
 800d09c:	4643      	mov	r3, r8
 800d09e:	4648      	mov	r0, r9
 800d0a0:	f004 fe06 	bl	8011cb0 <create_topic>
 800d0a4:	61f8      	str	r0, [r7, #28]
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d078      	beq.n	800d19c <rmw_create_subscription+0x1a8>
 800d0aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0b2:	2104      	movs	r1, #4
 800d0b4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800d0b8:	1c42      	adds	r2, r0, #1
 800d0ba:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800d0be:	f001 f8b1 	bl	800e224 <uxr_object_id>
 800d0c2:	6138      	str	r0, [r7, #16]
 800d0c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d0c8:	2506      	movs	r5, #6
 800d0ca:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800d0ce:	9500      	str	r5, [sp, #0]
 800d0d0:	6819      	ldr	r1, [r3, #0]
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d0d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d0dc:	f000 ff38 	bl	800df50 <uxr_buffer_create_subscriber_bin>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d0e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d0ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d0ee:	f000 fdad 	bl	800dc4c <run_xrce_session>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d04e      	beq.n	800d194 <rmw_create_subscription+0x1a0>
 800d0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0fe:	4629      	mov	r1, r5
 800d100:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800d104:	1c42      	adds	r2, r0, #1
 800d106:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800d10a:	f001 f88b 	bl	800e224 <uxr_object_id>
 800d10e:	ae08      	add	r6, sp, #32
 800d110:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	6178      	str	r0, [r7, #20]
 800d118:	4641      	mov	r1, r8
 800d11a:	4630      	mov	r0, r6
 800d11c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800d120:	9305      	str	r3, [sp, #20]
 800d122:	f000 fdaf 	bl	800dc84 <convert_qos_profile>
 800d126:	9503      	str	r5, [sp, #12]
 800d128:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d12c:	9b05      	ldr	r3, [sp, #20]
 800d12e:	9001      	str	r0, [sp, #4]
 800d130:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800d13c:	f8db 1000 	ldr.w	r1, [fp]
 800d140:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800d144:	f000 ff34 	bl	800dfb0 <uxr_buffer_create_datareader_bin>
 800d148:	4602      	mov	r2, r0
 800d14a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d14e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d152:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d156:	f000 fd79 	bl	800dc4c <run_xrce_session>
 800d15a:	b1d8      	cbz	r0, 800d194 <rmw_create_subscription+0x1a0>
 800d15c:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d160:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d164:	2b02      	cmp	r3, #2
 800d166:	bf0c      	ite	eq
 800d168:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800d16c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d176:	2200      	movs	r2, #0
 800d178:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800d17c:	ab0a      	add	r3, sp, #40	@ 0x28
 800d17e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	9b07      	ldr	r3, [sp, #28]
 800d188:	6809      	ldr	r1, [r1, #0]
 800d18a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d18e:	f001 f879 	bl	800e284 <uxr_buffer_request_data>
 800d192:	e007      	b.n	800d1a4 <rmw_create_subscription+0x1b0>
 800d194:	69f8      	ldr	r0, [r7, #28]
 800d196:	b108      	cbz	r0, 800d19c <rmw_create_subscription+0x1a8>
 800d198:	f000 fc56 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 800d19c:	4620      	mov	r0, r4
 800d19e:	f000 fc11 	bl	800d9c4 <rmw_uxrce_fini_subscription_memory>
 800d1a2:	2400      	movs	r4, #0
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	b00d      	add	sp, #52	@ 0x34
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ac:	2000d9dc 	.word	0x2000d9dc
 800d1b0:	08014b84 	.word	0x08014b84
 800d1b4:	08014540 	.word	0x08014540

0800d1b8 <rmw_subscription_get_actual_qos>:
 800d1b8:	b150      	cbz	r0, 800d1d0 <rmw_subscription_get_actual_qos+0x18>
 800d1ba:	b508      	push	{r3, lr}
 800d1bc:	460b      	mov	r3, r1
 800d1be:	b149      	cbz	r1, 800d1d4 <rmw_subscription_get_actual_qos+0x1c>
 800d1c0:	6841      	ldr	r1, [r0, #4]
 800d1c2:	2250      	movs	r2, #80	@ 0x50
 800d1c4:	3128      	adds	r1, #40	@ 0x28
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f006 f989 	bl	80134de <memcpy>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	bd08      	pop	{r3, pc}
 800d1d0:	200b      	movs	r0, #11
 800d1d2:	4770      	bx	lr
 800d1d4:	200b      	movs	r0, #11
 800d1d6:	bd08      	pop	{r3, pc}

0800d1d8 <rmw_destroy_subscription>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	b128      	cbz	r0, 800d1e8 <rmw_destroy_subscription+0x10>
 800d1dc:	4604      	mov	r4, r0
 800d1de:	6800      	ldr	r0, [r0, #0]
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	f000 fdb3 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800d1e6:	b910      	cbnz	r0, 800d1ee <rmw_destroy_subscription+0x16>
 800d1e8:	2401      	movs	r4, #1
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1ee:	6863      	ldr	r3, [r4, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d0f9      	beq.n	800d1e8 <rmw_destroy_subscription+0x10>
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	d0f7      	beq.n	800d1e8 <rmw_destroy_subscription+0x10>
 800d1f8:	6828      	ldr	r0, [r5, #0]
 800d1fa:	f000 fda7 	bl	800dd4c <is_uxrce_rmw_identifier_valid>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d0f2      	beq.n	800d1e8 <rmw_destroy_subscription+0x10>
 800d202:	686c      	ldr	r4, [r5, #4]
 800d204:	2c00      	cmp	r4, #0
 800d206:	d0ef      	beq.n	800d1e8 <rmw_destroy_subscription+0x10>
 800d208:	6a26      	ldr	r6, [r4, #32]
 800d20a:	6962      	ldr	r2, [r4, #20]
 800d20c:	6930      	ldr	r0, [r6, #16]
 800d20e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d212:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d216:	6819      	ldr	r1, [r3, #0]
 800d218:	f001 f86e 	bl	800e2f8 <uxr_buffer_cancel_data>
 800d21c:	4602      	mov	r2, r0
 800d21e:	6930      	ldr	r0, [r6, #16]
 800d220:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d224:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d228:	f000 fd10 	bl	800dc4c <run_xrce_session>
 800d22c:	69e0      	ldr	r0, [r4, #28]
 800d22e:	f004 fd8f 	bl	8011d50 <destroy_topic>
 800d232:	6a23      	ldr	r3, [r4, #32]
 800d234:	6962      	ldr	r2, [r4, #20]
 800d236:	6918      	ldr	r0, [r3, #16]
 800d238:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d23c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d240:	6819      	ldr	r1, [r3, #0]
 800d242:	f000 fdd1 	bl	800dde8 <uxr_buffer_delete_entity>
 800d246:	6a23      	ldr	r3, [r4, #32]
 800d248:	6922      	ldr	r2, [r4, #16]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d250:	4604      	mov	r4, r0
 800d252:	6809      	ldr	r1, [r1, #0]
 800d254:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d258:	f000 fdc6 	bl	800dde8 <uxr_buffer_delete_entity>
 800d25c:	6937      	ldr	r7, [r6, #16]
 800d25e:	4622      	mov	r2, r4
 800d260:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800d264:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800d268:	4604      	mov	r4, r0
 800d26a:	4638      	mov	r0, r7
 800d26c:	f000 fcee 	bl	800dc4c <run_xrce_session>
 800d270:	6936      	ldr	r6, [r6, #16]
 800d272:	4622      	mov	r2, r4
 800d274:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d278:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d27c:	4604      	mov	r4, r0
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 fce4 	bl	800dc4c <run_xrce_session>
 800d284:	b12c      	cbz	r4, 800d292 <rmw_destroy_subscription+0xba>
 800d286:	b120      	cbz	r0, 800d292 <rmw_destroy_subscription+0xba>
 800d288:	2400      	movs	r4, #0
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 fb9a 	bl	800d9c4 <rmw_uxrce_fini_subscription_memory>
 800d290:	e7ab      	b.n	800d1ea <rmw_destroy_subscription+0x12>
 800d292:	2402      	movs	r4, #2
 800d294:	e7f9      	b.n	800d28a <rmw_destroy_subscription+0xb2>
 800d296:	bf00      	nop

0800d298 <rmw_take_with_info>:
 800d298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29a:	4604      	mov	r4, r0
 800d29c:	6800      	ldr	r0, [r0, #0]
 800d29e:	b089      	sub	sp, #36	@ 0x24
 800d2a0:	460f      	mov	r7, r1
 800d2a2:	4615      	mov	r5, r2
 800d2a4:	b128      	cbz	r0, 800d2b2 <rmw_take_with_info+0x1a>
 800d2a6:	4b24      	ldr	r3, [pc, #144]	@ (800d338 <rmw_take_with_info+0xa0>)
 800d2a8:	6819      	ldr	r1, [r3, #0]
 800d2aa:	f7f2 ff99 	bl	80001e0 <strcmp>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d13e      	bne.n	800d330 <rmw_take_with_info+0x98>
 800d2b2:	b305      	cbz	r5, 800d2f6 <rmw_take_with_info+0x5e>
 800d2b4:	6864      	ldr	r4, [r4, #4]
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	702b      	strb	r3, [r5, #0]
 800d2ba:	f000 fc49 	bl	800db50 <rmw_uxrce_clean_expired_static_input_buffer>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fc1e 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	b1f0      	cbz	r0, 800d306 <rmw_take_with_info+0x6e>
 800d2c8:	6881      	ldr	r1, [r0, #8]
 800d2ca:	4668      	mov	r0, sp
 800d2cc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800d2d0:	3110      	adds	r1, #16
 800d2d2:	f7fb fe25 	bl	8008f20 <ucdr_init_buffer>
 800d2d6:	69a3      	ldr	r3, [r4, #24]
 800d2d8:	4639      	mov	r1, r7
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	4668      	mov	r0, sp
 800d2de:	4798      	blx	r3
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4815      	ldr	r0, [pc, #84]	@ (800d33c <rmw_take_with_info+0xa4>)
 800d2e6:	f004 fca7 	bl	8011c38 <put_memory>
 800d2ea:	702c      	strb	r4, [r5, #0]
 800d2ec:	f084 0001 	eor.w	r0, r4, #1
 800d2f0:	b2c0      	uxtb	r0, r0
 800d2f2:	b009      	add	sp, #36	@ 0x24
 800d2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f6:	6864      	ldr	r4, [r4, #4]
 800d2f8:	f000 fc2a 	bl	800db50 <rmw_uxrce_clean_expired_static_input_buffer>
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 fbff 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d302:	4605      	mov	r5, r0
 800d304:	b910      	cbnz	r0, 800d30c <rmw_take_with_info+0x74>
 800d306:	2001      	movs	r0, #1
 800d308:	b009      	add	sp, #36	@ 0x24
 800d30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30c:	68a9      	ldr	r1, [r5, #8]
 800d30e:	4668      	mov	r0, sp
 800d310:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800d314:	3110      	adds	r1, #16
 800d316:	f7fb fe03 	bl	8008f20 <ucdr_init_buffer>
 800d31a:	69a3      	ldr	r3, [r4, #24]
 800d31c:	4639      	mov	r1, r7
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	4668      	mov	r0, sp
 800d322:	4798      	blx	r3
 800d324:	4629      	mov	r1, r5
 800d326:	4604      	mov	r4, r0
 800d328:	4804      	ldr	r0, [pc, #16]	@ (800d33c <rmw_take_with_info+0xa4>)
 800d32a:	f004 fc85 	bl	8011c38 <put_memory>
 800d32e:	e7dd      	b.n	800d2ec <rmw_take_with_info+0x54>
 800d330:	200c      	movs	r0, #12
 800d332:	b009      	add	sp, #36	@ 0x24
 800d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d336:	bf00      	nop
 800d338:	08014e00 	.word	0x08014e00
 800d33c:	2000d9cc 	.word	0x2000d9cc

0800d340 <rmw_uxrce_transport_init>:
 800d340:	b508      	push	{r3, lr}
 800d342:	b108      	cbz	r0, 800d348 <rmw_uxrce_transport_init+0x8>
 800d344:	f100 0210 	add.w	r2, r0, #16
 800d348:	b139      	cbz	r1, 800d35a <rmw_uxrce_transport_init+0x1a>
 800d34a:	6949      	ldr	r1, [r1, #20]
 800d34c:	4610      	mov	r0, r2
 800d34e:	f000 ff31 	bl	800e1b4 <uxr_init_custom_transport>
 800d352:	f080 0001 	eor.w	r0, r0, #1
 800d356:	b2c0      	uxtb	r0, r0
 800d358:	bd08      	pop	{r3, pc}
 800d35a:	4b04      	ldr	r3, [pc, #16]	@ (800d36c <rmw_uxrce_transport_init+0x2c>)
 800d35c:	4610      	mov	r0, r2
 800d35e:	6859      	ldr	r1, [r3, #4]
 800d360:	f000 ff28 	bl	800e1b4 <uxr_init_custom_transport>
 800d364:	f080 0001 	eor.w	r0, r0, #1
 800d368:	b2c0      	uxtb	r0, r0
 800d36a:	bd08      	pop	{r3, pc}
 800d36c:	20008fd4 	.word	0x20008fd4

0800d370 <rmw_wait>:
 800d370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d374:	b089      	sub	sp, #36	@ 0x24
 800d376:	4605      	mov	r5, r0
 800d378:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800d37a:	460e      	mov	r6, r1
 800d37c:	4698      	mov	r8, r3
 800d37e:	4691      	mov	r9, r2
 800d380:	2a00      	cmp	r2, #0
 800d382:	f000 810a 	beq.w	800d59a <rmw_wait+0x22a>
 800d386:	b16c      	cbz	r4, 800d3a4 <rmw_wait+0x34>
 800d388:	4bae      	ldr	r3, [pc, #696]	@ (800d644 <rmw_wait+0x2d4>)
 800d38a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d38c:	af04      	add	r7, sp, #16
 800d38e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800d392:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d39a:	f004 fad1 	bl	8011940 <rmw_time_equal>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	f000 8127 	beq.w	800d5f2 <rmw_wait+0x282>
 800d3a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d3a8:	f000 fbd2 	bl	800db50 <rmw_uxrce_clean_expired_static_input_buffer>
 800d3ac:	4ba6      	ldr	r3, [pc, #664]	@ (800d648 <rmw_wait+0x2d8>)
 800d3ae:	681c      	ldr	r4, [r3, #0]
 800d3b0:	b14c      	cbz	r4, 800d3c6 <rmw_wait+0x56>
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800d3ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3be:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1f7      	bne.n	800d3b6 <rmw_wait+0x46>
 800d3c6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ca:	d011      	beq.n	800d3f0 <rmw_wait+0x80>
 800d3cc:	f8d9 1000 	ldr.w	r1, [r9]
 800d3d0:	b171      	cbz	r1, 800d3f0 <rmw_wait+0x80>
 800d3d2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	2001      	movs	r0, #1
 800d3da:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d3de:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800d3e0:	6912      	ldr	r2, [r2, #16]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3e8:	4299      	cmp	r1, r3
 800d3ea:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d3ee:	d1f4      	bne.n	800d3da <rmw_wait+0x6a>
 800d3f0:	f1b8 0f00 	cmp.w	r8, #0
 800d3f4:	d011      	beq.n	800d41a <rmw_wait+0xaa>
 800d3f6:	f8d8 1000 	ldr.w	r1, [r8]
 800d3fa:	b171      	cbz	r1, 800d41a <rmw_wait+0xaa>
 800d3fc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800d400:	2300      	movs	r3, #0
 800d402:	2001      	movs	r0, #1
 800d404:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d408:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800d40a:	6912      	ldr	r2, [r2, #16]
 800d40c:	3301      	adds	r3, #1
 800d40e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d412:	4299      	cmp	r1, r3
 800d414:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d418:	d1f4      	bne.n	800d404 <rmw_wait+0x94>
 800d41a:	b185      	cbz	r5, 800d43e <rmw_wait+0xce>
 800d41c:	6829      	ldr	r1, [r5, #0]
 800d41e:	b171      	cbz	r1, 800d43e <rmw_wait+0xce>
 800d420:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800d424:	2300      	movs	r3, #0
 800d426:	2001      	movs	r0, #1
 800d428:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d42c:	6a12      	ldr	r2, [r2, #32]
 800d42e:	6912      	ldr	r2, [r2, #16]
 800d430:	3301      	adds	r3, #1
 800d432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d436:	4299      	cmp	r1, r3
 800d438:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800d43c:	d1f4      	bne.n	800d428 <rmw_wait+0xb8>
 800d43e:	b34c      	cbz	r4, 800d494 <rmw_wait+0x124>
 800d440:	4622      	mov	r2, r4
 800d442:	2300      	movs	r3, #0
 800d444:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800d448:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800d44c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 800d450:	440b      	add	r3, r1
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2a00      	cmp	r2, #0
 800d456:	d1f5      	bne.n	800d444 <rmw_wait+0xd4>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 8084 	beq.w	800d566 <rmw_wait+0x1f6>
 800d45e:	1c7a      	adds	r2, r7, #1
 800d460:	d00d      	beq.n	800d47e <rmw_wait+0x10e>
 800d462:	ee07 7a90 	vmov	s15, r7
 800d466:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d476:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d47a:	ee17 7a90 	vmov	r7, s15
 800d47e:	68a0      	ldr	r0, [r4, #8]
 800d480:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800d484:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f040 8090 	bne.w	800d5ae <rmw_wait+0x23e>
 800d48e:	6864      	ldr	r4, [r4, #4]
 800d490:	2c00      	cmp	r4, #0
 800d492:	d1f4      	bne.n	800d47e <rmw_wait+0x10e>
 800d494:	f1b9 0f00 	cmp.w	r9, #0
 800d498:	f000 80bc 	beq.w	800d614 <rmw_wait+0x2a4>
 800d49c:	f8d9 7000 	ldr.w	r7, [r9]
 800d4a0:	2f00      	cmp	r7, #0
 800d4a2:	f000 808e 	beq.w	800d5c2 <rmw_wait+0x252>
 800d4a6:	2400      	movs	r4, #0
 800d4a8:	4627      	mov	r7, r4
 800d4aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d4ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d4b2:	f000 fb25 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d05f      	beq.n	800d57a <rmw_wait+0x20a>
 800d4ba:	f8d9 3000 	ldr.w	r3, [r9]
 800d4be:	3401      	adds	r4, #1
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	f04f 0701 	mov.w	r7, #1
 800d4c6:	d8f0      	bhi.n	800d4aa <rmw_wait+0x13a>
 800d4c8:	f1b8 0f00 	cmp.w	r8, #0
 800d4cc:	d012      	beq.n	800d4f4 <rmw_wait+0x184>
 800d4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d2:	b17b      	cbz	r3, 800d4f4 <rmw_wait+0x184>
 800d4d4:	2400      	movs	r4, #0
 800d4d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d4de:	f000 fb0f 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d051      	beq.n	800d58a <rmw_wait+0x21a>
 800d4e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ea:	3401      	adds	r4, #1
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	f04f 0701 	mov.w	r7, #1
 800d4f2:	d8f0      	bhi.n	800d4d6 <rmw_wait+0x166>
 800d4f4:	b1dd      	cbz	r5, 800d52e <rmw_wait+0x1be>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b1cb      	cbz	r3, 800d52e <rmw_wait+0x1be>
 800d4fa:	2400      	movs	r4, #0
 800d4fc:	686b      	ldr	r3, [r5, #4]
 800d4fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d502:	f000 fafd 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d506:	b158      	cbz	r0, 800d520 <rmw_wait+0x1b0>
 800d508:	682b      	ldr	r3, [r5, #0]
 800d50a:	3401      	adds	r4, #1
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	d969      	bls.n	800d5e4 <rmw_wait+0x274>
 800d510:	686b      	ldr	r3, [r5, #4]
 800d512:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d516:	2701      	movs	r7, #1
 800d518:	f000 faf2 	bl	800db00 <rmw_uxrce_find_static_input_buffer_by_owner>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d1f3      	bne.n	800d508 <rmw_wait+0x198>
 800d520:	e9d5 3200 	ldrd	r3, r2, [r5]
 800d524:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d528:	3401      	adds	r4, #1
 800d52a:	42a3      	cmp	r3, r4
 800d52c:	d8e6      	bhi.n	800d4fc <rmw_wait+0x18c>
 800d52e:	b1a6      	cbz	r6, 800d55a <rmw_wait+0x1ea>
 800d530:	6834      	ldr	r4, [r6, #0]
 800d532:	b194      	cbz	r4, 800d55a <rmw_wait+0x1ea>
 800d534:	2300      	movs	r3, #0
 800d536:	461d      	mov	r5, r3
 800d538:	e004      	b.n	800d544 <rmw_wait+0x1d4>
 800d53a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d53e:	3301      	adds	r3, #1
 800d540:	42a3      	cmp	r3, r4
 800d542:	d00a      	beq.n	800d55a <rmw_wait+0x1ea>
 800d544:	6870      	ldr	r0, [r6, #4]
 800d546:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800d54a:	7c0a      	ldrb	r2, [r1, #16]
 800d54c:	2a00      	cmp	r2, #0
 800d54e:	d0f4      	beq.n	800d53a <rmw_wait+0x1ca>
 800d550:	3301      	adds	r3, #1
 800d552:	42a3      	cmp	r3, r4
 800d554:	740d      	strb	r5, [r1, #16]
 800d556:	4617      	mov	r7, r2
 800d558:	d1f4      	bne.n	800d544 <rmw_wait+0x1d4>
 800d55a:	2f00      	cmp	r7, #0
 800d55c:	d03e      	beq.n	800d5dc <rmw_wait+0x26c>
 800d55e:	2000      	movs	r0, #0
 800d560:	b009      	add	sp, #36	@ 0x24
 800d562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d566:	68a0      	ldr	r0, [r4, #8]
 800d568:	2100      	movs	r1, #0
 800d56a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d56e:	f001 fc5d 	bl	800ee2c <uxr_run_session_timeout>
 800d572:	6864      	ldr	r4, [r4, #4]
 800d574:	2c00      	cmp	r4, #0
 800d576:	d1f6      	bne.n	800d566 <rmw_wait+0x1f6>
 800d578:	e78c      	b.n	800d494 <rmw_wait+0x124>
 800d57a:	e9d9 3200 	ldrd	r3, r2, [r9]
 800d57e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d582:	3401      	adds	r4, #1
 800d584:	42a3      	cmp	r3, r4
 800d586:	d890      	bhi.n	800d4aa <rmw_wait+0x13a>
 800d588:	e79e      	b.n	800d4c8 <rmw_wait+0x158>
 800d58a:	e9d8 3200 	ldrd	r3, r2, [r8]
 800d58e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800d592:	3401      	adds	r4, #1
 800d594:	429c      	cmp	r4, r3
 800d596:	d39e      	bcc.n	800d4d6 <rmw_wait+0x166>
 800d598:	e7ac      	b.n	800d4f4 <rmw_wait+0x184>
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f47f aef3 	bne.w	800d386 <rmw_wait+0x16>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	f47f aef0 	bne.w	800d386 <rmw_wait+0x16>
 800d5a6:	2900      	cmp	r1, #0
 800d5a8:	f47f aeed 	bne.w	800d386 <rmw_wait+0x16>
 800d5ac:	e7d7      	b.n	800d55e <rmw_wait+0x1ee>
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5b4:	f001 fc54 	bl	800ee60 <uxr_run_session_until_data>
 800d5b8:	6864      	ldr	r4, [r4, #4]
 800d5ba:	2c00      	cmp	r4, #0
 800d5bc:	f47f af5f 	bne.w	800d47e <rmw_wait+0x10e>
 800d5c0:	e768      	b.n	800d494 <rmw_wait+0x124>
 800d5c2:	f1b8 0f00 	cmp.w	r8, #0
 800d5c6:	d032      	beq.n	800d62e <rmw_wait+0x2be>
 800d5c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d181      	bne.n	800d4d4 <rmw_wait+0x164>
 800d5d0:	461f      	mov	r7, r3
 800d5d2:	2d00      	cmp	r5, #0
 800d5d4:	d18f      	bne.n	800d4f6 <rmw_wait+0x186>
 800d5d6:	462f      	mov	r7, r5
 800d5d8:	2e00      	cmp	r6, #0
 800d5da:	d1a9      	bne.n	800d530 <rmw_wait+0x1c0>
 800d5dc:	2002      	movs	r0, #2
 800d5de:	b009      	add	sp, #36	@ 0x24
 800d5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5e4:	2e00      	cmp	r6, #0
 800d5e6:	d0ba      	beq.n	800d55e <rmw_wait+0x1ee>
 800d5e8:	6834      	ldr	r4, [r6, #0]
 800d5ea:	2701      	movs	r7, #1
 800d5ec:	2c00      	cmp	r4, #0
 800d5ee:	d1a1      	bne.n	800d534 <rmw_wait+0x1c4>
 800d5f0:	e7b5      	b.n	800d55e <rmw_wait+0x1ee>
 800d5f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d5f6:	f004 f9f7 	bl	80119e8 <rmw_time_total_nsec>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	4a13      	ldr	r2, [pc, #76]	@ (800d64c <rmw_wait+0x2dc>)
 800d5fe:	f7f2 fea7 	bl	8000350 <__aeabi_uldivmod>
 800d602:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800d606:	f171 0300 	sbcs.w	r3, r1, #0
 800d60a:	4607      	mov	r7, r0
 800d60c:	bfa8      	it	ge
 800d60e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 800d612:	e6c9      	b.n	800d3a8 <rmw_wait+0x38>
 800d614:	f1b8 0f00 	cmp.w	r8, #0
 800d618:	d009      	beq.n	800d62e <rmw_wait+0x2be>
 800d61a:	f8d8 3000 	ldr.w	r3, [r8]
 800d61e:	464f      	mov	r7, r9
 800d620:	2b00      	cmp	r3, #0
 800d622:	f47f af57 	bne.w	800d4d4 <rmw_wait+0x164>
 800d626:	2d00      	cmp	r5, #0
 800d628:	f47f af65 	bne.w	800d4f6 <rmw_wait+0x186>
 800d62c:	e7d3      	b.n	800d5d6 <rmw_wait+0x266>
 800d62e:	b17d      	cbz	r5, 800d650 <rmw_wait+0x2e0>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	4647      	mov	r7, r8
 800d634:	2b00      	cmp	r3, #0
 800d636:	f47f af60 	bne.w	800d4fa <rmw_wait+0x18a>
 800d63a:	2e00      	cmp	r6, #0
 800d63c:	f47f af78 	bne.w	800d530 <rmw_wait+0x1c0>
 800d640:	e7cc      	b.n	800d5dc <rmw_wait+0x26c>
 800d642:	bf00      	nop
 800d644:	08014308 	.word	0x08014308
 800d648:	2000d9bc 	.word	0x2000d9bc
 800d64c:	000f4240 	.word	0x000f4240
 800d650:	2e00      	cmp	r6, #0
 800d652:	d0c3      	beq.n	800d5dc <rmw_wait+0x26c>
 800d654:	6834      	ldr	r4, [r6, #0]
 800d656:	462f      	mov	r7, r5
 800d658:	2c00      	cmp	r4, #0
 800d65a:	f47f af6b 	bne.w	800d534 <rmw_wait+0x1c4>
 800d65e:	e7bd      	b.n	800d5dc <rmw_wait+0x26c>

0800d660 <rmw_create_wait_set>:
 800d660:	b508      	push	{r3, lr}
 800d662:	4803      	ldr	r0, [pc, #12]	@ (800d670 <rmw_create_wait_set+0x10>)
 800d664:	f004 fad8 	bl	8011c18 <get_memory>
 800d668:	b108      	cbz	r0, 800d66e <rmw_create_wait_set+0xe>
 800d66a:	6880      	ldr	r0, [r0, #8]
 800d66c:	3010      	adds	r0, #16
 800d66e:	bd08      	pop	{r3, pc}
 800d670:	2000d9fc 	.word	0x2000d9fc

0800d674 <rmw_destroy_wait_set>:
 800d674:	b508      	push	{r3, lr}
 800d676:	4b08      	ldr	r3, [pc, #32]	@ (800d698 <rmw_destroy_wait_set+0x24>)
 800d678:	6819      	ldr	r1, [r3, #0]
 800d67a:	b911      	cbnz	r1, 800d682 <rmw_destroy_wait_set+0xe>
 800d67c:	e00a      	b.n	800d694 <rmw_destroy_wait_set+0x20>
 800d67e:	6849      	ldr	r1, [r1, #4]
 800d680:	b141      	cbz	r1, 800d694 <rmw_destroy_wait_set+0x20>
 800d682:	688b      	ldr	r3, [r1, #8]
 800d684:	3310      	adds	r3, #16
 800d686:	4298      	cmp	r0, r3
 800d688:	d1f9      	bne.n	800d67e <rmw_destroy_wait_set+0xa>
 800d68a:	4803      	ldr	r0, [pc, #12]	@ (800d698 <rmw_destroy_wait_set+0x24>)
 800d68c:	f004 fad4 	bl	8011c38 <put_memory>
 800d690:	2000      	movs	r0, #0
 800d692:	bd08      	pop	{r3, pc}
 800d694:	2001      	movs	r0, #1
 800d696:	bd08      	pop	{r3, pc}
 800d698:	2000d9fc 	.word	0x2000d9fc

0800d69c <rmw_uxrce_init_service_memory>:
 800d69c:	b1e2      	cbz	r2, 800d6d8 <rmw_uxrce_init_service_memory+0x3c>
 800d69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a2:	7b05      	ldrb	r5, [r0, #12]
 800d6a4:	4606      	mov	r6, r0
 800d6a6:	b9ad      	cbnz	r5, 800d6d4 <rmw_uxrce_init_service_memory+0x38>
 800d6a8:	23c8      	movs	r3, #200	@ 0xc8
 800d6aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d6ae:	6083      	str	r3, [r0, #8]
 800d6b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d6b4:	4617      	mov	r7, r2
 800d6b6:	8183      	strh	r3, [r0, #12]
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	46a8      	mov	r8, r5
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4630      	mov	r0, r6
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	f004 fab9 	bl	8011c38 <put_memory>
 800d6c6:	42af      	cmp	r7, r5
 800d6c8:	60a4      	str	r4, [r4, #8]
 800d6ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d6ce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d6d2:	d1f3      	bne.n	800d6bc <rmw_uxrce_init_service_memory+0x20>
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop

0800d6dc <rmw_uxrce_init_client_memory>:
 800d6dc:	b1e2      	cbz	r2, 800d718 <rmw_uxrce_init_client_memory+0x3c>
 800d6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e2:	7b05      	ldrb	r5, [r0, #12]
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	b9ad      	cbnz	r5, 800d714 <rmw_uxrce_init_client_memory+0x38>
 800d6e8:	23c8      	movs	r3, #200	@ 0xc8
 800d6ea:	e9c0 5500 	strd	r5, r5, [r0]
 800d6ee:	6083      	str	r3, [r0, #8]
 800d6f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d6f4:	4617      	mov	r7, r2
 800d6f6:	8183      	strh	r3, [r0, #12]
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	46a8      	mov	r8, r5
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	4630      	mov	r0, r6
 800d700:	3501      	adds	r5, #1
 800d702:	f004 fa99 	bl	8011c38 <put_memory>
 800d706:	42af      	cmp	r7, r5
 800d708:	60a4      	str	r4, [r4, #8]
 800d70a:	f884 800c 	strb.w	r8, [r4, #12]
 800d70e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d712:	d1f3      	bne.n	800d6fc <rmw_uxrce_init_client_memory+0x20>
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop

0800d71c <rmw_uxrce_init_publisher_memory>:
 800d71c:	b1e2      	cbz	r2, 800d758 <rmw_uxrce_init_publisher_memory+0x3c>
 800d71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d722:	7b05      	ldrb	r5, [r0, #12]
 800d724:	4606      	mov	r6, r0
 800d726:	b9ad      	cbnz	r5, 800d754 <rmw_uxrce_init_publisher_memory+0x38>
 800d728:	23d8      	movs	r3, #216	@ 0xd8
 800d72a:	e9c0 5500 	strd	r5, r5, [r0]
 800d72e:	6083      	str	r3, [r0, #8]
 800d730:	f240 1301 	movw	r3, #257	@ 0x101
 800d734:	4617      	mov	r7, r2
 800d736:	8183      	strh	r3, [r0, #12]
 800d738:	460c      	mov	r4, r1
 800d73a:	46a8      	mov	r8, r5
 800d73c:	4621      	mov	r1, r4
 800d73e:	4630      	mov	r0, r6
 800d740:	3501      	adds	r5, #1
 800d742:	f004 fa79 	bl	8011c38 <put_memory>
 800d746:	42af      	cmp	r7, r5
 800d748:	60a4      	str	r4, [r4, #8]
 800d74a:	f884 800c 	strb.w	r8, [r4, #12]
 800d74e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d752:	d1f3      	bne.n	800d73c <rmw_uxrce_init_publisher_memory+0x20>
 800d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop

0800d75c <rmw_uxrce_init_subscription_memory>:
 800d75c:	b1e2      	cbz	r2, 800d798 <rmw_uxrce_init_subscription_memory+0x3c>
 800d75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d762:	7b05      	ldrb	r5, [r0, #12]
 800d764:	4606      	mov	r6, r0
 800d766:	b9ad      	cbnz	r5, 800d794 <rmw_uxrce_init_subscription_memory+0x38>
 800d768:	23d8      	movs	r3, #216	@ 0xd8
 800d76a:	e9c0 5500 	strd	r5, r5, [r0]
 800d76e:	6083      	str	r3, [r0, #8]
 800d770:	f240 1301 	movw	r3, #257	@ 0x101
 800d774:	4617      	mov	r7, r2
 800d776:	8183      	strh	r3, [r0, #12]
 800d778:	460c      	mov	r4, r1
 800d77a:	46a8      	mov	r8, r5
 800d77c:	4621      	mov	r1, r4
 800d77e:	4630      	mov	r0, r6
 800d780:	3501      	adds	r5, #1
 800d782:	f004 fa59 	bl	8011c38 <put_memory>
 800d786:	42af      	cmp	r7, r5
 800d788:	60a4      	str	r4, [r4, #8]
 800d78a:	f884 800c 	strb.w	r8, [r4, #12]
 800d78e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d792:	d1f3      	bne.n	800d77c <rmw_uxrce_init_subscription_memory+0x20>
 800d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <rmw_uxrce_init_node_memory>:
 800d79c:	b1e2      	cbz	r2, 800d7d8 <rmw_uxrce_init_node_memory+0x3c>
 800d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a2:	7b05      	ldrb	r5, [r0, #12]
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	b9ad      	cbnz	r5, 800d7d4 <rmw_uxrce_init_node_memory+0x38>
 800d7a8:	23a4      	movs	r3, #164	@ 0xa4
 800d7aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d7ae:	6083      	str	r3, [r0, #8]
 800d7b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d7b4:	4617      	mov	r7, r2
 800d7b6:	8183      	strh	r3, [r0, #12]
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	46a8      	mov	r8, r5
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4630      	mov	r0, r6
 800d7c0:	3501      	adds	r5, #1
 800d7c2:	f004 fa39 	bl	8011c38 <put_memory>
 800d7c6:	42af      	cmp	r7, r5
 800d7c8:	60a4      	str	r4, [r4, #8]
 800d7ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d7ce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d7d2:	d1f3      	bne.n	800d7bc <rmw_uxrce_init_node_memory+0x20>
 800d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop

0800d7dc <rmw_uxrce_init_session_memory>:
 800d7dc:	b1ea      	cbz	r2, 800d81a <rmw_uxrce_init_session_memory+0x3e>
 800d7de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e2:	7b05      	ldrb	r5, [r0, #12]
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	b9b5      	cbnz	r5, 800d816 <rmw_uxrce_init_session_memory+0x3a>
 800d7e8:	e9c0 5500 	strd	r5, r5, [r0]
 800d7ec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d7f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d7f4:	4617      	mov	r7, r2
 800d7f6:	f8c0 8008 	str.w	r8, [r0, #8]
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	8183      	strh	r3, [r0, #12]
 800d7fe:	46a9      	mov	r9, r5
 800d800:	4621      	mov	r1, r4
 800d802:	4630      	mov	r0, r6
 800d804:	3501      	adds	r5, #1
 800d806:	f004 fa17 	bl	8011c38 <put_memory>
 800d80a:	42af      	cmp	r7, r5
 800d80c:	60a4      	str	r4, [r4, #8]
 800d80e:	f884 900c 	strb.w	r9, [r4, #12]
 800d812:	4444      	add	r4, r8
 800d814:	d1f4      	bne.n	800d800 <rmw_uxrce_init_session_memory+0x24>
 800d816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81a:	4770      	bx	lr

0800d81c <rmw_uxrce_init_topic_memory>:
 800d81c:	b1e2      	cbz	r2, 800d858 <rmw_uxrce_init_topic_memory+0x3c>
 800d81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d822:	7b05      	ldrb	r5, [r0, #12]
 800d824:	4606      	mov	r6, r0
 800d826:	b9ad      	cbnz	r5, 800d854 <rmw_uxrce_init_topic_memory+0x38>
 800d828:	231c      	movs	r3, #28
 800d82a:	e9c0 5500 	strd	r5, r5, [r0]
 800d82e:	6083      	str	r3, [r0, #8]
 800d830:	f240 1301 	movw	r3, #257	@ 0x101
 800d834:	4617      	mov	r7, r2
 800d836:	8183      	strh	r3, [r0, #12]
 800d838:	460c      	mov	r4, r1
 800d83a:	46a8      	mov	r8, r5
 800d83c:	4621      	mov	r1, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	3501      	adds	r5, #1
 800d842:	f004 f9f9 	bl	8011c38 <put_memory>
 800d846:	42af      	cmp	r7, r5
 800d848:	60a4      	str	r4, [r4, #8]
 800d84a:	f884 800c 	strb.w	r8, [r4, #12]
 800d84e:	f104 041c 	add.w	r4, r4, #28
 800d852:	d1f3      	bne.n	800d83c <rmw_uxrce_init_topic_memory+0x20>
 800d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop

0800d85c <rmw_uxrce_init_static_input_buffer_memory>:
 800d85c:	b1ea      	cbz	r2, 800d89a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d862:	7b05      	ldrb	r5, [r0, #12]
 800d864:	4606      	mov	r6, r0
 800d866:	b9b5      	cbnz	r5, 800d896 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d868:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d86c:	e9c0 5500 	strd	r5, r5, [r0]
 800d870:	6083      	str	r3, [r0, #8]
 800d872:	f240 1301 	movw	r3, #257	@ 0x101
 800d876:	4617      	mov	r7, r2
 800d878:	8183      	strh	r3, [r0, #12]
 800d87a:	460c      	mov	r4, r1
 800d87c:	46a8      	mov	r8, r5
 800d87e:	4621      	mov	r1, r4
 800d880:	4630      	mov	r0, r6
 800d882:	3501      	adds	r5, #1
 800d884:	f004 f9d8 	bl	8011c38 <put_memory>
 800d888:	42af      	cmp	r7, r5
 800d88a:	60a4      	str	r4, [r4, #8]
 800d88c:	f884 800c 	strb.w	r8, [r4, #12]
 800d890:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d894:	d1f3      	bne.n	800d87e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89a:	4770      	bx	lr

0800d89c <rmw_uxrce_init_init_options_impl_memory>:
 800d89c:	b1e2      	cbz	r2, 800d8d8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a2:	7b05      	ldrb	r5, [r0, #12]
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	b9ad      	cbnz	r5, 800d8d4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d8a8:	232c      	movs	r3, #44	@ 0x2c
 800d8aa:	e9c0 5500 	strd	r5, r5, [r0]
 800d8ae:	6083      	str	r3, [r0, #8]
 800d8b0:	f240 1301 	movw	r3, #257	@ 0x101
 800d8b4:	4617      	mov	r7, r2
 800d8b6:	8183      	strh	r3, [r0, #12]
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	46a8      	mov	r8, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4630      	mov	r0, r6
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	f004 f9b9 	bl	8011c38 <put_memory>
 800d8c6:	42af      	cmp	r7, r5
 800d8c8:	60a4      	str	r4, [r4, #8]
 800d8ca:	f884 800c 	strb.w	r8, [r4, #12]
 800d8ce:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d8d2:	d1f3      	bne.n	800d8bc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop

0800d8dc <rmw_uxrce_init_wait_set_memory>:
 800d8dc:	b1e2      	cbz	r2, 800d918 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e2:	7b05      	ldrb	r5, [r0, #12]
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	b9ad      	cbnz	r5, 800d914 <rmw_uxrce_init_wait_set_memory+0x38>
 800d8e8:	231c      	movs	r3, #28
 800d8ea:	e9c0 5500 	strd	r5, r5, [r0]
 800d8ee:	6083      	str	r3, [r0, #8]
 800d8f0:	f240 1301 	movw	r3, #257	@ 0x101
 800d8f4:	4617      	mov	r7, r2
 800d8f6:	8183      	strh	r3, [r0, #12]
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	46a8      	mov	r8, r5
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	4630      	mov	r0, r6
 800d900:	3501      	adds	r5, #1
 800d902:	f004 f999 	bl	8011c38 <put_memory>
 800d906:	42af      	cmp	r7, r5
 800d908:	60a4      	str	r4, [r4, #8]
 800d90a:	f884 800c 	strb.w	r8, [r4, #12]
 800d90e:	f104 041c 	add.w	r4, r4, #28
 800d912:	d1f3      	bne.n	800d8fc <rmw_uxrce_init_wait_set_memory+0x20>
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop

0800d91c <rmw_uxrce_init_guard_condition_memory>:
 800d91c:	b1e2      	cbz	r2, 800d958 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d922:	7b05      	ldrb	r5, [r0, #12]
 800d924:	4606      	mov	r6, r0
 800d926:	b9ad      	cbnz	r5, 800d954 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d928:	2320      	movs	r3, #32
 800d92a:	e9c0 5500 	strd	r5, r5, [r0]
 800d92e:	6083      	str	r3, [r0, #8]
 800d930:	f240 1301 	movw	r3, #257	@ 0x101
 800d934:	4617      	mov	r7, r2
 800d936:	8183      	strh	r3, [r0, #12]
 800d938:	460c      	mov	r4, r1
 800d93a:	46a8      	mov	r8, r5
 800d93c:	4621      	mov	r1, r4
 800d93e:	4630      	mov	r0, r6
 800d940:	3501      	adds	r5, #1
 800d942:	f004 f979 	bl	8011c38 <put_memory>
 800d946:	42af      	cmp	r7, r5
 800d948:	60a4      	str	r4, [r4, #8]
 800d94a:	f884 800c 	strb.w	r8, [r4, #12]
 800d94e:	f104 0420 	add.w	r4, r4, #32
 800d952:	d1f3      	bne.n	800d93c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop

0800d95c <rmw_uxrce_fini_session_memory>:
 800d95c:	4601      	mov	r1, r0
 800d95e:	4801      	ldr	r0, [pc, #4]	@ (800d964 <rmw_uxrce_fini_session_memory+0x8>)
 800d960:	f004 b96a 	b.w	8011c38 <put_memory>
 800d964:	2000d9bc 	.word	0x2000d9bc

0800d968 <rmw_uxrce_fini_node_memory>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	6800      	ldr	r0, [r0, #0]
 800d96e:	b128      	cbz	r0, 800d97c <rmw_uxrce_fini_node_memory+0x14>
 800d970:	4b07      	ldr	r3, [pc, #28]	@ (800d990 <rmw_uxrce_fini_node_memory+0x28>)
 800d972:	6819      	ldr	r1, [r3, #0]
 800d974:	f7f2 fc34 	bl	80001e0 <strcmp>
 800d978:	b940      	cbnz	r0, 800d98c <rmw_uxrce_fini_node_memory+0x24>
 800d97a:	6020      	str	r0, [r4, #0]
 800d97c:	6861      	ldr	r1, [r4, #4]
 800d97e:	b129      	cbz	r1, 800d98c <rmw_uxrce_fini_node_memory+0x24>
 800d980:	2500      	movs	r5, #0
 800d982:	4804      	ldr	r0, [pc, #16]	@ (800d994 <rmw_uxrce_fini_node_memory+0x2c>)
 800d984:	610d      	str	r5, [r1, #16]
 800d986:	f004 f957 	bl	8011c38 <put_memory>
 800d98a:	6065      	str	r5, [r4, #4]
 800d98c:	bd38      	pop	{r3, r4, r5, pc}
 800d98e:	bf00      	nop
 800d990:	08014e00 	.word	0x08014e00
 800d994:	2000d98c 	.word	0x2000d98c

0800d998 <rmw_uxrce_fini_publisher_memory>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4604      	mov	r4, r0
 800d99c:	6800      	ldr	r0, [r0, #0]
 800d99e:	b128      	cbz	r0, 800d9ac <rmw_uxrce_fini_publisher_memory+0x14>
 800d9a0:	4b06      	ldr	r3, [pc, #24]	@ (800d9bc <rmw_uxrce_fini_publisher_memory+0x24>)
 800d9a2:	6819      	ldr	r1, [r3, #0]
 800d9a4:	f7f2 fc1c 	bl	80001e0 <strcmp>
 800d9a8:	b938      	cbnz	r0, 800d9ba <rmw_uxrce_fini_publisher_memory+0x22>
 800d9aa:	6020      	str	r0, [r4, #0]
 800d9ac:	6861      	ldr	r1, [r4, #4]
 800d9ae:	b121      	cbz	r1, 800d9ba <rmw_uxrce_fini_publisher_memory+0x22>
 800d9b0:	4803      	ldr	r0, [pc, #12]	@ (800d9c0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d9b2:	f004 f941 	bl	8011c38 <put_memory>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	08014e00 	.word	0x08014e00
 800d9c0:	2000d99c 	.word	0x2000d99c

0800d9c4 <rmw_uxrce_fini_subscription_memory>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	6800      	ldr	r0, [r0, #0]
 800d9ca:	b128      	cbz	r0, 800d9d8 <rmw_uxrce_fini_subscription_memory+0x14>
 800d9cc:	4b06      	ldr	r3, [pc, #24]	@ (800d9e8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d9ce:	6819      	ldr	r1, [r3, #0]
 800d9d0:	f7f2 fc06 	bl	80001e0 <strcmp>
 800d9d4:	b938      	cbnz	r0, 800d9e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d9d6:	6020      	str	r0, [r4, #0]
 800d9d8:	6861      	ldr	r1, [r4, #4]
 800d9da:	b121      	cbz	r1, 800d9e6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <rmw_uxrce_fini_subscription_memory+0x28>)
 800d9de:	f004 f92b 	bl	8011c38 <put_memory>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	bd10      	pop	{r4, pc}
 800d9e8:	08014e00 	.word	0x08014e00
 800d9ec:	2000d9dc 	.word	0x2000d9dc

0800d9f0 <rmw_uxrce_fini_service_memory>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	6800      	ldr	r0, [r0, #0]
 800d9f6:	b128      	cbz	r0, 800da04 <rmw_uxrce_fini_service_memory+0x14>
 800d9f8:	4b06      	ldr	r3, [pc, #24]	@ (800da14 <rmw_uxrce_fini_service_memory+0x24>)
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	f7f2 fbf0 	bl	80001e0 <strcmp>
 800da00:	b938      	cbnz	r0, 800da12 <rmw_uxrce_fini_service_memory+0x22>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	6861      	ldr	r1, [r4, #4]
 800da06:	b121      	cbz	r1, 800da12 <rmw_uxrce_fini_service_memory+0x22>
 800da08:	4803      	ldr	r0, [pc, #12]	@ (800da18 <rmw_uxrce_fini_service_memory+0x28>)
 800da0a:	f004 f915 	bl	8011c38 <put_memory>
 800da0e:	2300      	movs	r3, #0
 800da10:	6063      	str	r3, [r4, #4]
 800da12:	bd10      	pop	{r4, pc}
 800da14:	08014e00 	.word	0x08014e00
 800da18:	2000d9ac 	.word	0x2000d9ac

0800da1c <rmw_uxrce_fini_client_memory>:
 800da1c:	b510      	push	{r4, lr}
 800da1e:	4604      	mov	r4, r0
 800da20:	6800      	ldr	r0, [r0, #0]
 800da22:	b128      	cbz	r0, 800da30 <rmw_uxrce_fini_client_memory+0x14>
 800da24:	4b06      	ldr	r3, [pc, #24]	@ (800da40 <rmw_uxrce_fini_client_memory+0x24>)
 800da26:	6819      	ldr	r1, [r3, #0]
 800da28:	f7f2 fbda 	bl	80001e0 <strcmp>
 800da2c:	b938      	cbnz	r0, 800da3e <rmw_uxrce_fini_client_memory+0x22>
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	6861      	ldr	r1, [r4, #4]
 800da32:	b121      	cbz	r1, 800da3e <rmw_uxrce_fini_client_memory+0x22>
 800da34:	4803      	ldr	r0, [pc, #12]	@ (800da44 <rmw_uxrce_fini_client_memory+0x28>)
 800da36:	f004 f8ff 	bl	8011c38 <put_memory>
 800da3a:	2300      	movs	r3, #0
 800da3c:	6063      	str	r3, [r4, #4]
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	08014e00 	.word	0x08014e00
 800da44:	200090c0 	.word	0x200090c0

0800da48 <rmw_uxrce_fini_topic_memory>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	4604      	mov	r4, r0
 800da4c:	4621      	mov	r1, r4
 800da4e:	4803      	ldr	r0, [pc, #12]	@ (800da5c <rmw_uxrce_fini_topic_memory+0x14>)
 800da50:	f004 f8f2 	bl	8011c38 <put_memory>
 800da54:	2300      	movs	r3, #0
 800da56:	61a3      	str	r3, [r4, #24]
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop
 800da5c:	2000d9ec 	.word	0x2000d9ec

0800da60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800da60:	b082      	sub	sp, #8
 800da62:	b530      	push	{r4, r5, lr}
 800da64:	4925      	ldr	r1, [pc, #148]	@ (800dafc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800da66:	680d      	ldr	r5, [r1, #0]
 800da68:	ac03      	add	r4, sp, #12
 800da6a:	e884 000c 	stmia.w	r4, {r2, r3}
 800da6e:	461c      	mov	r4, r3
 800da70:	2d00      	cmp	r5, #0
 800da72:	d041      	beq.n	800daf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800da74:	462b      	mov	r3, r5
 800da76:	2100      	movs	r1, #0
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800da80:	4290      	cmp	r0, r2
 800da82:	bf08      	it	eq
 800da84:	3101      	addeq	r1, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1f6      	bne.n	800da78 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800da8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d029      	beq.n	800dae6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da92:	d907      	bls.n	800daa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800da94:	2b03      	cmp	r3, #3
 800da96:	d005      	beq.n	800daa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800da98:	2100      	movs	r1, #0
 800da9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da9e:	4608      	mov	r0, r1
 800daa0:	b002      	add	sp, #8
 800daa2:	4770      	bx	lr
 800daa4:	b314      	cbz	r4, 800daec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800daa6:	428c      	cmp	r4, r1
 800daa8:	d820      	bhi.n	800daec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800daaa:	2d00      	cmp	r5, #0
 800daac:	d0f4      	beq.n	800da98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800daae:	2100      	movs	r1, #0
 800dab0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800dab4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800dab8:	e002      	b.n	800dac0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800daba:	686d      	ldr	r5, [r5, #4]
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	d0ec      	beq.n	800da9a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800dac0:	68ab      	ldr	r3, [r5, #8]
 800dac2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800dac6:	4290      	cmp	r0, r2
 800dac8:	d1f7      	bne.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800daca:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800dace:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800dad2:	4562      	cmp	r2, ip
 800dad4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800dad8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800dadc:	daed      	bge.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dade:	4694      	mov	ip, r2
 800dae0:	461c      	mov	r4, r3
 800dae2:	4629      	mov	r1, r5
 800dae4:	e7e9      	b.n	800daba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dae6:	b10c      	cbz	r4, 800daec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800dae8:	428c      	cmp	r4, r1
 800daea:	d9d5      	bls.n	800da98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800daec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daf0:	4802      	ldr	r0, [pc, #8]	@ (800dafc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800daf2:	b002      	add	sp, #8
 800daf4:	f004 b890 	b.w	8011c18 <get_memory>
 800daf8:	4629      	mov	r1, r5
 800dafa:	e7c6      	b.n	800da8a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800dafc:	2000d9cc 	.word	0x2000d9cc

0800db00 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800db00:	4b11      	ldr	r3, [pc, #68]	@ (800db48 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	b530      	push	{r4, r5, lr}
 800db06:	b1e3      	cbz	r3, 800db42 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800db08:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800db0c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800db10:	2400      	movs	r4, #0
 800db12:	e001      	b.n	800db18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	b193      	cbz	r3, 800db3e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800db1e:	4288      	cmp	r0, r1
 800db20:	d1f8      	bne.n	800db14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800db22:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800db26:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800db2a:	4571      	cmp	r1, lr
 800db2c:	eb72 050c 	sbcs.w	r5, r2, ip
 800db30:	daf0      	bge.n	800db14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800db32:	461c      	mov	r4, r3
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	468e      	mov	lr, r1
 800db38:	4694      	mov	ip, r2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1ec      	bne.n	800db18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800db3e:	4620      	mov	r0, r4
 800db40:	bd30      	pop	{r4, r5, pc}
 800db42:	461c      	mov	r4, r3
 800db44:	4620      	mov	r0, r4
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	2000d9cc 	.word	0x2000d9cc
 800db4c:	00000000 	.word	0x00000000

0800db50 <rmw_uxrce_clean_expired_static_input_buffer>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	4b3c      	ldr	r3, [pc, #240]	@ (800dc48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800db56:	ed2d 8b06 	vpush	{d8-d10}
 800db5a:	681f      	ldr	r7, [r3, #0]
 800db5c:	b08d      	sub	sp, #52	@ 0x34
 800db5e:	f004 f919 	bl	8011d94 <rmw_uros_epoch_nanos>
 800db62:	2f00      	cmp	r7, #0
 800db64:	d05d      	beq.n	800dc22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800db66:	46b8      	mov	r8, r7
 800db68:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800dc30 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800db6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800db70:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800db74:	2b04      	cmp	r3, #4
 800db76:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800dc38 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800db7a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800dc40 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800db7e:	4681      	mov	r9, r0
 800db80:	468a      	mov	sl, r1
 800db82:	ac04      	add	r4, sp, #16
 800db84:	d03f      	beq.n	800dc06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800db86:	2b05      	cmp	r3, #5
 800db88:	d044      	beq.n	800dc14 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d03b      	beq.n	800dc06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800db8e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800db92:	ed8d ab06 	vstr	d10, [sp, #24]
 800db96:	ed8d 8b08 	vstr	d8, [sp, #32]
 800db9a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800db9e:	ab08      	add	r3, sp, #32
 800dba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dba2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dbaa:	f003 fec9 	bl	8011940 <rmw_time_equal>
 800dbae:	b118      	cbz	r0, 800dbb8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800dbb0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800dbb4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800dbb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dbbc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800dbc0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800dbc4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800dbc8:	f003 ff0e 	bl	80119e8 <rmw_time_total_nsec>
 800dbcc:	1830      	adds	r0, r6, r0
 800dbce:	eb47 0101 	adc.w	r1, r7, r1
 800dbd2:	4548      	cmp	r0, r9
 800dbd4:	eb71 030a 	sbcs.w	r3, r1, sl
 800dbd8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800dbdc:	db05      	blt.n	800dbea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800dbde:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800dbe2:	4591      	cmp	r9, r2
 800dbe4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800dbe8:	da03      	bge.n	800dbf2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800dbea:	4817      	ldr	r0, [pc, #92]	@ (800dc48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dbec:	4641      	mov	r1, r8
 800dbee:	f004 f823 	bl	8011c38 <put_memory>
 800dbf2:	f1bb 0f00 	cmp.w	fp, #0
 800dbf6:	d014      	beq.n	800dc22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800dbf8:	46d8      	mov	r8, fp
 800dbfa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dbfe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	d1bf      	bne.n	800db86 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800dc06:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc0a:	3340      	adds	r3, #64	@ 0x40
 800dc0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc12:	e7c0      	b.n	800db96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800dc14:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dc18:	3348      	adds	r3, #72	@ 0x48
 800dc1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc20:	e7b9      	b.n	800db96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800dc22:	b00d      	add	sp, #52	@ 0x34
 800dc24:	ecbd 8b06 	vpop	{d8-d10}
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	f3af 8000 	nop.w
	...
 800dc38:	00000001 	.word	0x00000001
 800dc3c:	00000000 	.word	0x00000000
 800dc40:	0000001e 	.word	0x0000001e
 800dc44:	00000000 	.word	0x00000000
 800dc48:	2000d9cc 	.word	0x2000d9cc

0800dc4c <run_xrce_session>:
 800dc4c:	b510      	push	{r4, lr}
 800dc4e:	788c      	ldrb	r4, [r1, #2]
 800dc50:	b086      	sub	sp, #24
 800dc52:	2c01      	cmp	r4, #1
 800dc54:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dc58:	d00c      	beq.n	800dc74 <run_xrce_session+0x28>
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	f10d 020e 	add.w	r2, sp, #14
 800dc64:	f10d 0317 	add.w	r3, sp, #23
 800dc68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc6c:	f001 f93e 	bl	800eeec <uxr_run_session_until_all_status>
 800dc70:	b006      	add	sp, #24
 800dc72:	bd10      	pop	{r4, pc}
 800dc74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc78:	f000 fd52 	bl	800e720 <uxr_flash_output_streams>
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	b006      	add	sp, #24
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	bf00      	nop

0800dc84 <convert_qos_profile>:
 800dc84:	7a4a      	ldrb	r2, [r1, #9]
 800dc86:	f891 c008 	ldrb.w	ip, [r1, #8]
 800dc8a:	2a02      	cmp	r2, #2
 800dc8c:	bf18      	it	ne
 800dc8e:	2200      	movne	r2, #0
 800dc90:	7002      	strb	r2, [r0, #0]
 800dc92:	780a      	ldrb	r2, [r1, #0]
 800dc94:	8889      	ldrh	r1, [r1, #4]
 800dc96:	8081      	strh	r1, [r0, #4]
 800dc98:	f1ac 0c02 	sub.w	ip, ip, #2
 800dc9c:	f1a2 0202 	sub.w	r2, r2, #2
 800dca0:	fabc fc8c 	clz	ip, ip
 800dca4:	fab2 f282 	clz	r2, r2
 800dca8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800dcac:	0952      	lsrs	r2, r2, #5
 800dcae:	f880 c001 	strb.w	ip, [r0, #1]
 800dcb2:	7082      	strb	r2, [r0, #2]
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop

0800dcb8 <generate_type_name>:
 800dcb8:	b530      	push	{r4, r5, lr}
 800dcba:	2300      	movs	r3, #0
 800dcbc:	700b      	strb	r3, [r1, #0]
 800dcbe:	6803      	ldr	r3, [r0, #0]
 800dcc0:	b087      	sub	sp, #28
 800dcc2:	4614      	mov	r4, r2
 800dcc4:	b1d3      	cbz	r3, 800dcfc <generate_type_name+0x44>
 800dcc6:	4a0f      	ldr	r2, [pc, #60]	@ (800dd04 <generate_type_name+0x4c>)
 800dcc8:	4615      	mov	r5, r2
 800dcca:	9203      	str	r2, [sp, #12]
 800dccc:	9500      	str	r5, [sp, #0]
 800dcce:	6842      	ldr	r2, [r0, #4]
 800dcd0:	480d      	ldr	r0, [pc, #52]	@ (800dd08 <generate_type_name+0x50>)
 800dcd2:	9001      	str	r0, [sp, #4]
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	490d      	ldr	r1, [pc, #52]	@ (800dd0c <generate_type_name+0x54>)
 800dcd8:	9204      	str	r2, [sp, #16]
 800dcda:	9105      	str	r1, [sp, #20]
 800dcdc:	9102      	str	r1, [sp, #8]
 800dcde:	4a0c      	ldr	r2, [pc, #48]	@ (800dd10 <generate_type_name+0x58>)
 800dce0:	4621      	mov	r1, r4
 800dce2:	f005 fa59 	bl	8013198 <sniprintf>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	db05      	blt.n	800dcf6 <generate_type_name+0x3e>
 800dcea:	4284      	cmp	r4, r0
 800dcec:	bfd4      	ite	le
 800dcee:	2000      	movle	r0, #0
 800dcf0:	2001      	movgt	r0, #1
 800dcf2:	b007      	add	sp, #28
 800dcf4:	bd30      	pop	{r4, r5, pc}
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	b007      	add	sp, #28
 800dcfa:	bd30      	pop	{r4, r5, pc}
 800dcfc:	4b05      	ldr	r3, [pc, #20]	@ (800dd14 <generate_type_name+0x5c>)
 800dcfe:	4a01      	ldr	r2, [pc, #4]	@ (800dd04 <generate_type_name+0x4c>)
 800dd00:	461d      	mov	r5, r3
 800dd02:	e7e2      	b.n	800dcca <generate_type_name+0x12>
 800dd04:	08014b74 	.word	0x08014b74
 800dd08:	08014b8c 	.word	0x08014b8c
 800dd0c:	08014b88 	.word	0x08014b88
 800dd10:	08014b78 	.word	0x08014b78
 800dd14:	08014964 	.word	0x08014964

0800dd18 <generate_topic_name>:
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	4614      	mov	r4, r2
 800dd1e:	9000      	str	r0, [sp, #0]
 800dd20:	4b08      	ldr	r3, [pc, #32]	@ (800dd44 <generate_topic_name+0x2c>)
 800dd22:	4a09      	ldr	r2, [pc, #36]	@ (800dd48 <generate_topic_name+0x30>)
 800dd24:	4608      	mov	r0, r1
 800dd26:	4621      	mov	r1, r4
 800dd28:	f005 fa36 	bl	8013198 <sniprintf>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	db05      	blt.n	800dd3c <generate_topic_name+0x24>
 800dd30:	4284      	cmp	r4, r0
 800dd32:	bfd4      	ite	le
 800dd34:	2000      	movle	r0, #0
 800dd36:	2001      	movgt	r0, #1
 800dd38:	b002      	add	sp, #8
 800dd3a:	bd10      	pop	{r4, pc}
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	b002      	add	sp, #8
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	bf00      	nop
 800dd44:	08014b90 	.word	0x08014b90
 800dd48:	080145f4 	.word	0x080145f4

0800dd4c <is_uxrce_rmw_identifier_valid>:
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	4604      	mov	r4, r0
 800dd50:	b140      	cbz	r0, 800dd64 <is_uxrce_rmw_identifier_valid+0x18>
 800dd52:	f7fe fbed 	bl	800c530 <rmw_get_implementation_identifier>
 800dd56:	4601      	mov	r1, r0
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7f2 fa41 	bl	80001e0 <strcmp>
 800dd5e:	fab0 f080 	clz	r0, r0
 800dd62:	0940      	lsrs	r0, r0, #5
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	bf00      	nop

0800dd68 <get_message_typesupport_handle>:
 800dd68:	6883      	ldr	r3, [r0, #8]
 800dd6a:	4718      	bx	r3

0800dd6c <get_message_typesupport_handle_function>:
 800dd6c:	b510      	push	{r4, lr}
 800dd6e:	4604      	mov	r4, r0
 800dd70:	6800      	ldr	r0, [r0, #0]
 800dd72:	f7f2 fa35 	bl	80001e0 <strcmp>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	bf0c      	ite	eq
 800dd7a:	4620      	moveq	r0, r4
 800dd7c:	2000      	movne	r0, #0
 800dd7e:	bd10      	pop	{r4, pc}

0800dd80 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800dd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd84:	6805      	ldr	r5, [r0, #0]
 800dd86:	4604      	mov	r4, r0
 800dd88:	4628      	mov	r0, r5
 800dd8a:	460e      	mov	r6, r1
 800dd8c:	f7f2 fa28 	bl	80001e0 <strcmp>
 800dd90:	b1c8      	cbz	r0, 800ddc6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800dd92:	4b11      	ldr	r3, [pc, #68]	@ (800ddd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429d      	cmp	r5, r3
 800dd98:	d112      	bne.n	800ddc0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800dd9a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dd9e:	f8d8 4000 	ldr.w	r4, [r8]
 800dda2:	b16c      	cbz	r4, 800ddc0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800dda4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dda8:	2700      	movs	r7, #0
 800ddaa:	3d04      	subs	r5, #4
 800ddac:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	f7f2 fa15 	bl	80001e0 <strcmp>
 800ddb6:	00bb      	lsls	r3, r7, #2
 800ddb8:	b140      	cbz	r0, 800ddcc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800ddba:	3701      	adds	r7, #1
 800ddbc:	42bc      	cmp	r4, r7
 800ddbe:	d1f5      	bne.n	800ddac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddcc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ddd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	58d3      	ldr	r3, [r2, r3]
 800ddd6:	4718      	bx	r3
 800ddd8:	200000ac 	.word	0x200000ac

0800dddc <std_msgs__msg__Int32__init>:
 800dddc:	3800      	subs	r0, #0
 800ddde:	bf18      	it	ne
 800dde0:	2001      	movne	r0, #1
 800dde2:	4770      	bx	lr

0800dde4 <std_msgs__msg__Int32__fini>:
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop

0800dde8 <uxr_buffer_delete_entity>:
 800dde8:	b510      	push	{r4, lr}
 800ddea:	2300      	movs	r3, #0
 800ddec:	b08e      	sub	sp, #56	@ 0x38
 800ddee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ddf2:	2303      	movs	r3, #3
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	2204      	movs	r2, #4
 800ddf8:	ab06      	add	r3, sp, #24
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	9103      	str	r1, [sp, #12]
 800ddfe:	f001 fa9d 	bl	800f33c <uxr_prepare_stream_to_write_submessage>
 800de02:	b918      	cbnz	r0, 800de0c <uxr_buffer_delete_entity+0x24>
 800de04:	4604      	mov	r4, r0
 800de06:	4620      	mov	r0, r4
 800de08:	b00e      	add	sp, #56	@ 0x38
 800de0a:	bd10      	pop	{r4, pc}
 800de0c:	9902      	ldr	r1, [sp, #8]
 800de0e:	aa05      	add	r2, sp, #20
 800de10:	4620      	mov	r0, r4
 800de12:	f001 fbc9 	bl	800f5a8 <uxr_init_base_object_request>
 800de16:	a905      	add	r1, sp, #20
 800de18:	4604      	mov	r4, r0
 800de1a:	a806      	add	r0, sp, #24
 800de1c:	f003 f87c 	bl	8010f18 <uxr_serialize_DELETE_Payload>
 800de20:	4620      	mov	r0, r4
 800de22:	b00e      	add	sp, #56	@ 0x38
 800de24:	bd10      	pop	{r4, pc}
 800de26:	bf00      	nop

0800de28 <uxr_common_create_entity>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800de2e:	b08c      	sub	sp, #48	@ 0x30
 800de30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800de34:	f1bc 0f01 	cmp.w	ip, #1
 800de38:	bf0c      	ite	eq
 800de3a:	f003 0201 	andeq.w	r2, r3, #1
 800de3e:	2200      	movne	r2, #0
 800de40:	330e      	adds	r3, #14
 800de42:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800de46:	9101      	str	r1, [sp, #4]
 800de48:	441a      	add	r2, r3
 800de4a:	2301      	movs	r3, #1
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	9903      	ldr	r1, [sp, #12]
 800de50:	ab04      	add	r3, sp, #16
 800de52:	b292      	uxth	r2, r2
 800de54:	4604      	mov	r4, r0
 800de56:	f001 fa71 	bl	800f33c <uxr_prepare_stream_to_write_submessage>
 800de5a:	b918      	cbnz	r0, 800de64 <uxr_common_create_entity+0x3c>
 800de5c:	4604      	mov	r4, r0
 800de5e:	4620      	mov	r0, r4
 800de60:	b00c      	add	sp, #48	@ 0x30
 800de62:	bd10      	pop	{r4, pc}
 800de64:	9902      	ldr	r1, [sp, #8]
 800de66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800de68:	4620      	mov	r0, r4
 800de6a:	f001 fb9d 	bl	800f5a8 <uxr_init_base_object_request>
 800de6e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de70:	4604      	mov	r4, r0
 800de72:	a804      	add	r0, sp, #16
 800de74:	f002 ffac 	bl	8010dd0 <uxr_serialize_CREATE_Payload>
 800de78:	4620      	mov	r0, r4
 800de7a:	b00c      	add	sp, #48	@ 0x30
 800de7c:	bd10      	pop	{r4, pc}
 800de7e:	bf00      	nop

0800de80 <uxr_buffer_create_participant_bin>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800de86:	ac11      	add	r4, sp, #68	@ 0x44
 800de88:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800de8c:	2303      	movs	r3, #3
 800de8e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800de92:	7223      	strb	r3, [r4, #8]
 800de94:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800de96:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800de9a:	2201      	movs	r2, #1
 800de9c:	2100      	movs	r1, #0
 800de9e:	4605      	mov	r5, r0
 800dea0:	7122      	strb	r2, [r4, #4]
 800dea2:	f88d 1014 	strb.w	r1, [sp, #20]
 800dea6:	b1cb      	cbz	r3, 800dedc <uxr_buffer_create_participant_bin+0x5c>
 800dea8:	f88d 201c 	strb.w	r2, [sp, #28]
 800deac:	9308      	str	r3, [sp, #32]
 800deae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800deb2:	a915      	add	r1, sp, #84	@ 0x54
 800deb4:	a809      	add	r0, sp, #36	@ 0x24
 800deb6:	f7fb f833 	bl	8008f20 <ucdr_init_buffer>
 800deba:	a905      	add	r1, sp, #20
 800debc:	a809      	add	r0, sp, #36	@ 0x24
 800debe:	f002 fc45 	bl	801074c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800dec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dec4:	9600      	str	r6, [sp, #0]
 800dec6:	9401      	str	r4, [sp, #4]
 800dec8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800decc:	60e3      	str	r3, [r4, #12]
 800dece:	4628      	mov	r0, r5
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f7ff ffa9 	bl	800de28 <uxr_common_create_entity>
 800ded6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	f88d 301c 	strb.w	r3, [sp, #28]
 800dee0:	e7e5      	b.n	800deae <uxr_buffer_create_participant_bin+0x2e>
 800dee2:	bf00      	nop

0800dee4 <uxr_buffer_create_topic_bin>:
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800deea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800deee:	9105      	str	r1, [sp, #20]
 800def0:	4605      	mov	r5, r0
 800def2:	a997      	add	r1, sp, #604	@ 0x25c
 800def4:	4618      	mov	r0, r3
 800def6:	2302      	movs	r3, #2
 800def8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800defc:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800df00:	f000 f9b2 	bl	800e268 <uxr_object_id_to_raw>
 800df04:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800df06:	9306      	str	r3, [sp, #24]
 800df08:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800df0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0c:	2303      	movs	r3, #3
 800df0e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800df12:	2301      	movs	r3, #1
 800df14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df18:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800df1c:	a917      	add	r1, sp, #92	@ 0x5c
 800df1e:	2300      	movs	r3, #0
 800df20:	a80b      	add	r0, sp, #44	@ 0x2c
 800df22:	f88d 301c 	strb.w	r3, [sp, #28]
 800df26:	f7fa fffb 	bl	8008f20 <ucdr_init_buffer>
 800df2a:	a906      	add	r1, sp, #24
 800df2c:	a80b      	add	r0, sp, #44	@ 0x2c
 800df2e:	f002 fc2f 	bl	8010790 <uxr_serialize_OBJK_Topic_Binary>
 800df32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df34:	9316      	str	r3, [sp, #88]	@ 0x58
 800df36:	ac13      	add	r4, sp, #76	@ 0x4c
 800df38:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800df3c:	9600      	str	r6, [sp, #0]
 800df3e:	9401      	str	r4, [sp, #4]
 800df40:	b29b      	uxth	r3, r3
 800df42:	4628      	mov	r0, r5
 800df44:	f7ff ff70 	bl	800de28 <uxr_common_create_entity>
 800df48:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800df4c:	bd70      	pop	{r4, r5, r6, pc}
 800df4e:	bf00      	nop

0800df50 <uxr_buffer_create_subscriber_bin>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800df56:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800df5a:	9105      	str	r1, [sp, #20]
 800df5c:	4605      	mov	r5, r0
 800df5e:	a992      	add	r1, sp, #584	@ 0x248
 800df60:	4618      	mov	r0, r3
 800df62:	2304      	movs	r3, #4
 800df64:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800df68:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800df6c:	f000 f97c 	bl	800e268 <uxr_object_id_to_raw>
 800df70:	2300      	movs	r3, #0
 800df72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df76:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800df7a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800df7e:	a912      	add	r1, sp, #72	@ 0x48
 800df80:	2303      	movs	r3, #3
 800df82:	a806      	add	r0, sp, #24
 800df84:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800df88:	f7fa ffca 	bl	8008f20 <ucdr_init_buffer>
 800df8c:	a993      	add	r1, sp, #588	@ 0x24c
 800df8e:	a806      	add	r0, sp, #24
 800df90:	f002 fcb2 	bl	80108f8 <uxr_serialize_OBJK_Subscriber_Binary>
 800df94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df96:	9311      	str	r3, [sp, #68]	@ 0x44
 800df98:	ac0e      	add	r4, sp, #56	@ 0x38
 800df9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800df9e:	9600      	str	r6, [sp, #0]
 800dfa0:	9401      	str	r4, [sp, #4]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	f7ff ff3f 	bl	800de28 <uxr_common_create_entity>
 800dfaa:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800dfae:	bd70      	pop	{r4, r5, r6, pc}

0800dfb0 <uxr_buffer_create_datareader_bin>:
 800dfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dfb8:	ac1f      	add	r4, sp, #124	@ 0x7c
 800dfba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dfbe:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800dfc2:	9105      	str	r1, [sp, #20]
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	a9a3      	add	r1, sp, #652	@ 0x28c
 800dfc8:	4618      	mov	r0, r3
 800dfca:	2306      	movs	r3, #6
 800dfcc:	7123      	strb	r3, [r4, #4]
 800dfce:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800dfd2:	2703      	movs	r7, #3
 800dfd4:	f000 f948 	bl	800e268 <uxr_object_id_to_raw>
 800dfd8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800dfda:	7227      	strb	r7, [r4, #8]
 800dfdc:	a90e      	add	r1, sp, #56	@ 0x38
 800dfde:	f000 f943 	bl	800e268 <uxr_object_id_to_raw>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800dfe8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800dfec:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800dff0:	3d00      	subs	r5, #0
 800dff2:	bf18      	it	ne
 800dff4:	2501      	movne	r5, #1
 800dff6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800dffa:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800dffe:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e002:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e006:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e00a:	2301      	movs	r3, #1
 800e00c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e010:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e014:	bb8a      	cbnz	r2, 800e07a <uxr_buffer_create_datareader_bin+0xca>
 800e016:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e01a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e01e:	f04f 0c13 	mov.w	ip, #19
 800e022:	250b      	movs	r5, #11
 800e024:	2221      	movs	r2, #33	@ 0x21
 800e026:	2111      	movs	r1, #17
 800e028:	2009      	movs	r0, #9
 800e02a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800e02e:	b923      	cbnz	r3, 800e03a <uxr_buffer_create_datareader_bin+0x8a>
 800e030:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e034:	4672      	mov	r2, lr
 800e036:	4661      	mov	r1, ip
 800e038:	4628      	mov	r0, r5
 800e03a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d025      	beq.n	800e08e <uxr_buffer_create_datareader_bin+0xde>
 800e042:	2b03      	cmp	r3, #3
 800e044:	d029      	beq.n	800e09a <uxr_buffer_create_datareader_bin+0xea>
 800e046:	b32b      	cbz	r3, 800e094 <uxr_buffer_create_datareader_bin+0xe4>
 800e048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e04c:	a923      	add	r1, sp, #140	@ 0x8c
 800e04e:	a806      	add	r0, sp, #24
 800e050:	f7fa ff66 	bl	8008f20 <ucdr_init_buffer>
 800e054:	a90e      	add	r1, sp, #56	@ 0x38
 800e056:	a806      	add	r0, sp, #24
 800e058:	f002 fcc4 	bl	80109e4 <uxr_serialize_OBJK_DataReader_Binary>
 800e05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e05e:	f8cd 8000 	str.w	r8, [sp]
 800e062:	9401      	str	r4, [sp, #4]
 800e064:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e068:	60e3      	str	r3, [r4, #12]
 800e06a:	4630      	mov	r0, r6
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	f7ff fedb 	bl	800de28 <uxr_common_create_entity>
 800e072:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e07a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e07e:	f04f 0c12 	mov.w	ip, #18
 800e082:	250a      	movs	r5, #10
 800e084:	2220      	movs	r2, #32
 800e086:	2110      	movs	r1, #16
 800e088:	2008      	movs	r0, #8
 800e08a:	2702      	movs	r7, #2
 800e08c:	e7cd      	b.n	800e02a <uxr_buffer_create_datareader_bin+0x7a>
 800e08e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e092:	e7d9      	b.n	800e048 <uxr_buffer_create_datareader_bin+0x98>
 800e094:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e098:	e7d6      	b.n	800e048 <uxr_buffer_create_datareader_bin+0x98>
 800e09a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e09e:	e7d3      	b.n	800e048 <uxr_buffer_create_datareader_bin+0x98>

0800e0a0 <get_custom_error>:
 800e0a0:	4b01      	ldr	r3, [pc, #4]	@ (800e0a8 <get_custom_error+0x8>)
 800e0a2:	7818      	ldrb	r0, [r3, #0]
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	2000da0c 	.word	0x2000da0c

0800e0ac <recv_custom_msg>:
 800e0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b0:	4693      	mov	fp, r2
 800e0b2:	b089      	sub	sp, #36	@ 0x24
 800e0b4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e0b8:	9305      	str	r3, [sp, #20]
 800e0ba:	468a      	mov	sl, r1
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4604      	mov	r4, r0
 800e0c0:	f88d 101e 	strb.w	r1, [sp, #30]
 800e0c4:	b322      	cbz	r2, 800e110 <recv_custom_msg+0x64>
 800e0c6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e0ca:	f10d 081f 	add.w	r8, sp, #31
 800e0ce:	af05      	add	r7, sp, #20
 800e0d0:	f10d 061e 	add.w	r6, sp, #30
 800e0d4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e0d8:	e002      	b.n	800e0e0 <recv_custom_msg+0x34>
 800e0da:	9b05      	ldr	r3, [sp, #20]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	dd0f      	ble.n	800e100 <recv_custom_msg+0x54>
 800e0e0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e0e4:	4623      	mov	r3, r4
 800e0e6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e0ea:	e9cd 5600 	strd	r5, r6, [sp]
 800e0ee:	4622      	mov	r2, r4
 800e0f0:	4648      	mov	r0, r9
 800e0f2:	f001 fc87 	bl	800fa04 <uxr_read_framed_msg>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d0ef      	beq.n	800e0da <recv_custom_msg+0x2e>
 800e0fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e0fe:	b1b3      	cbz	r3, 800e12e <recv_custom_msg+0x82>
 800e100:	4b0f      	ldr	r3, [pc, #60]	@ (800e140 <recv_custom_msg+0x94>)
 800e102:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e106:	701a      	strb	r2, [r3, #0]
 800e108:	2000      	movs	r0, #0
 800e10a:	b009      	add	sp, #36	@ 0x24
 800e10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e110:	f10d 021f 	add.w	r2, sp, #31
 800e114:	9200      	str	r2, [sp, #0]
 800e116:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e11a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e11e:	4601      	mov	r1, r0
 800e120:	47a8      	blx	r5
 800e122:	2800      	cmp	r0, #0
 800e124:	d0ec      	beq.n	800e100 <recv_custom_msg+0x54>
 800e126:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d1e8      	bne.n	800e100 <recv_custom_msg+0x54>
 800e12e:	f8cb 0000 	str.w	r0, [fp]
 800e132:	2001      	movs	r0, #1
 800e134:	f8ca 4000 	str.w	r4, [sl]
 800e138:	b009      	add	sp, #36	@ 0x24
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	bf00      	nop
 800e140:	2000da0c 	.word	0x2000da0c

0800e144 <send_custom_msg>:
 800e144:	b530      	push	{r4, r5, lr}
 800e146:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e14a:	b087      	sub	sp, #28
 800e14c:	4615      	mov	r5, r2
 800e14e:	b974      	cbnz	r4, 800e16e <send_custom_msg+0x2a>
 800e150:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e154:	f10d 0317 	add.w	r3, sp, #23
 800e158:	47a0      	blx	r4
 800e15a:	b108      	cbz	r0, 800e160 <send_custom_msg+0x1c>
 800e15c:	42a8      	cmp	r0, r5
 800e15e:	d015      	beq.n	800e18c <send_custom_msg+0x48>
 800e160:	4b0c      	ldr	r3, [pc, #48]	@ (800e194 <send_custom_msg+0x50>)
 800e162:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e166:	701a      	strb	r2, [r3, #0]
 800e168:	2000      	movs	r0, #0
 800e16a:	b007      	add	sp, #28
 800e16c:	bd30      	pop	{r4, r5, pc}
 800e16e:	460b      	mov	r3, r1
 800e170:	2200      	movs	r2, #0
 800e172:	f10d 0117 	add.w	r1, sp, #23
 800e176:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e17a:	4602      	mov	r2, r0
 800e17c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e180:	9500      	str	r5, [sp, #0]
 800e182:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e186:	f001 fa45 	bl	800f614 <uxr_write_framed_msg>
 800e18a:	e7e6      	b.n	800e15a <send_custom_msg+0x16>
 800e18c:	2001      	movs	r0, #1
 800e18e:	b007      	add	sp, #28
 800e190:	bd30      	pop	{r4, r5, pc}
 800e192:	bf00      	nop
 800e194:	2000da0c 	.word	0x2000da0c

0800e198 <uxr_set_custom_transport_callbacks>:
 800e198:	b410      	push	{r4}
 800e19a:	9c01      	ldr	r4, [sp, #4]
 800e19c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e1a0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e1a4:	9b02      	ldr	r3, [sp, #8]
 800e1a6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ae:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e1b2:	4770      	bx	lr

0800e1b4 <uxr_init_custom_transport>:
 800e1b4:	b538      	push	{r3, r4, r5, lr}
 800e1b6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e1ba:	b303      	cbz	r3, 800e1fe <uxr_init_custom_transport+0x4a>
 800e1bc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	b1e2      	cbz	r2, 800e1fe <uxr_init_custom_transport+0x4a>
 800e1c4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e1c8:	b1ca      	cbz	r2, 800e1fe <uxr_init_custom_transport+0x4a>
 800e1ca:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e1ce:	b1b2      	cbz	r2, 800e1fe <uxr_init_custom_transport+0x4a>
 800e1d0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e1d4:	4798      	blx	r3
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	b188      	cbz	r0, 800e1fe <uxr_init_custom_transport+0x4a>
 800e1da:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e1de:	b98b      	cbnz	r3, 800e204 <uxr_init_custom_transport+0x50>
 800e1e0:	490b      	ldr	r1, [pc, #44]	@ (800e210 <uxr_init_custom_transport+0x5c>)
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e214 <uxr_init_custom_transport+0x60>)
 800e1e4:	4a0c      	ldr	r2, [pc, #48]	@ (800e218 <uxr_init_custom_transport+0x64>)
 800e1e6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e1ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e1ee:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e1f2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e1f6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	bd38      	pop	{r3, r4, r5, pc}
 800e1fe:	2500      	movs	r5, #0
 800e200:	4628      	mov	r0, r5
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	2100      	movs	r1, #0
 800e206:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e20a:	f001 f9fd 	bl	800f608 <uxr_init_framing_io>
 800e20e:	e7e7      	b.n	800e1e0 <uxr_init_custom_transport+0x2c>
 800e210:	0800e145 	.word	0x0800e145
 800e214:	0800e0ad 	.word	0x0800e0ad
 800e218:	0800e0a1 	.word	0x0800e0a1

0800e21c <uxr_close_custom_transport>:
 800e21c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e220:	4718      	bx	r3
 800e222:	bf00      	nop

0800e224 <uxr_object_id>:
 800e224:	b082      	sub	sp, #8
 800e226:	2300      	movs	r3, #0
 800e228:	f88d 1006 	strb.w	r1, [sp, #6]
 800e22c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e230:	f360 030f 	bfi	r3, r0, #0, #16
 800e234:	f362 431f 	bfi	r3, r2, #16, #16
 800e238:	4618      	mov	r0, r3
 800e23a:	b002      	add	sp, #8
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop

0800e240 <uxr_object_id_from_raw>:
 800e240:	7843      	ldrb	r3, [r0, #1]
 800e242:	7801      	ldrb	r1, [r0, #0]
 800e244:	b082      	sub	sp, #8
 800e246:	f003 020f 	and.w	r2, r3, #15
 800e24a:	f88d 2006 	strb.w	r2, [sp, #6]
 800e24e:	091b      	lsrs	r3, r3, #4
 800e250:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e254:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e258:	2000      	movs	r0, #0
 800e25a:	f363 000f 	bfi	r0, r3, #0, #16
 800e25e:	f362 401f 	bfi	r0, r2, #16, #16
 800e262:	b002      	add	sp, #8
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop

0800e268 <uxr_object_id_to_raw>:
 800e268:	4602      	mov	r2, r0
 800e26a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e26e:	b082      	sub	sp, #8
 800e270:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e274:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e278:	f881 c000 	strb.w	ip, [r1]
 800e27c:	7048      	strb	r0, [r1, #1]
 800e27e:	b002      	add	sp, #8
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop

0800e284 <uxr_buffer_request_data>:
 800e284:	b530      	push	{r4, r5, lr}
 800e286:	b095      	sub	sp, #84	@ 0x54
 800e288:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e28c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e28e:	9303      	str	r3, [sp, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	2d00      	cmp	r5, #0
 800e294:	bf14      	ite	ne
 800e296:	2101      	movne	r1, #1
 800e298:	4611      	moveq	r1, r2
 800e29a:	4604      	mov	r4, r0
 800e29c:	f88d 301c 	strb.w	r3, [sp, #28]
 800e2a0:	f88d 201d 	strb.w	r2, [sp, #29]
 800e2a4:	f88d 201e 	strb.w	r2, [sp, #30]
 800e2a8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e2ac:	d021      	beq.n	800e2f2 <uxr_buffer_request_data+0x6e>
 800e2ae:	682a      	ldr	r2, [r5, #0]
 800e2b0:	686b      	ldr	r3, [r5, #4]
 800e2b2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e2b6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e2ba:	2210      	movs	r2, #16
 800e2bc:	2308      	movs	r3, #8
 800e2be:	2100      	movs	r1, #0
 800e2c0:	e9cd 3100 	strd	r3, r1, [sp]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	9905      	ldr	r1, [sp, #20]
 800e2c8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2ca:	f001 f837 	bl	800f33c <uxr_prepare_stream_to_write_submessage>
 800e2ce:	b918      	cbnz	r0, 800e2d8 <uxr_buffer_request_data+0x54>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	b015      	add	sp, #84	@ 0x54
 800e2d6:	bd30      	pop	{r4, r5, pc}
 800e2d8:	9904      	ldr	r1, [sp, #16]
 800e2da:	aa06      	add	r2, sp, #24
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f001 f963 	bl	800f5a8 <uxr_init_base_object_request>
 800e2e2:	a906      	add	r1, sp, #24
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	a80c      	add	r0, sp, #48	@ 0x30
 800e2e8:	f002 fec0 	bl	801106c <uxr_serialize_READ_DATA_Payload>
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	b015      	add	sp, #84	@ 0x54
 800e2f0:	bd30      	pop	{r4, r5, pc}
 800e2f2:	2208      	movs	r2, #8
 800e2f4:	e7e2      	b.n	800e2bc <uxr_buffer_request_data+0x38>
 800e2f6:	bf00      	nop

0800e2f8 <uxr_buffer_cancel_data>:
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	b094      	sub	sp, #80	@ 0x50
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	9202      	str	r2, [sp, #8]
 800e300:	9205      	str	r2, [sp, #20]
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e30a:	f88d 301e 	strb.w	r3, [sp, #30]
 800e30e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e312:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e316:	2308      	movs	r3, #8
 800e318:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	2210      	movs	r2, #16
 800e320:	ab0c      	add	r3, sp, #48	@ 0x30
 800e322:	4604      	mov	r4, r0
 800e324:	9103      	str	r1, [sp, #12]
 800e326:	f001 f809 	bl	800f33c <uxr_prepare_stream_to_write_submessage>
 800e32a:	b918      	cbnz	r0, 800e334 <uxr_buffer_cancel_data+0x3c>
 800e32c:	4604      	mov	r4, r0
 800e32e:	4620      	mov	r0, r4
 800e330:	b014      	add	sp, #80	@ 0x50
 800e332:	bd10      	pop	{r4, pc}
 800e334:	9905      	ldr	r1, [sp, #20]
 800e336:	aa06      	add	r2, sp, #24
 800e338:	4620      	mov	r0, r4
 800e33a:	f001 f935 	bl	800f5a8 <uxr_init_base_object_request>
 800e33e:	a906      	add	r1, sp, #24
 800e340:	4604      	mov	r4, r0
 800e342:	a80c      	add	r0, sp, #48	@ 0x30
 800e344:	f002 fe92 	bl	801106c <uxr_serialize_READ_DATA_Payload>
 800e348:	4620      	mov	r0, r4
 800e34a:	b014      	add	sp, #80	@ 0x50
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop

0800e350 <read_submessage_format>:
 800e350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e354:	b095      	sub	sp, #84	@ 0x54
 800e356:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e35a:	b113      	cbz	r3, 800e362 <read_submessage_format+0x12>
 800e35c:	b015      	add	sp, #84	@ 0x54
 800e35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e362:	460c      	mov	r4, r1
 800e364:	4615      	mov	r5, r2
 800e366:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e36a:	4607      	mov	r7, r0
 800e36c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e36e:	9004      	str	r0, [sp, #16]
 800e370:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e372:	9005      	str	r0, [sp, #20]
 800e374:	1a52      	subs	r2, r2, r1
 800e376:	a80c      	add	r0, sp, #48	@ 0x30
 800e378:	4699      	mov	r9, r3
 800e37a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e37e:	f7fa fdcf 	bl	8008f20 <ucdr_init_buffer>
 800e382:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e386:	a80c      	add	r0, sp, #48	@ 0x30
 800e388:	f7fa fd9e 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 800e38c:	69e2      	ldr	r2, [r4, #28]
 800e38e:	b19a      	cbz	r2, 800e3b8 <read_submessage_format+0x68>
 800e390:	f1b8 0f07 	cmp.w	r8, #7
 800e394:	f882 9014 	strb.w	r9, [r2, #20]
 800e398:	d040      	beq.n	800e41c <read_submessage_format+0xcc>
 800e39a:	f1b8 0f08 	cmp.w	r8, #8
 800e39e:	d02e      	beq.n	800e3fe <read_submessage_format+0xae>
 800e3a0:	f1b8 0f06 	cmp.w	r8, #6
 800e3a4:	d011      	beq.n	800e3ca <read_submessage_format+0x7a>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	7513      	strb	r3, [r2, #20]
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f7fa fe07 	bl	8008fc0 <ucdr_advance_buffer>
 800e3b2:	b015      	add	sp, #84	@ 0x54
 800e3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3b8:	f1b8 0f07 	cmp.w	r8, #7
 800e3bc:	d02e      	beq.n	800e41c <read_submessage_format+0xcc>
 800e3be:	f1b8 0f08 	cmp.w	r8, #8
 800e3c2:	d01c      	beq.n	800e3fe <read_submessage_format+0xae>
 800e3c4:	f1b8 0f06 	cmp.w	r8, #6
 800e3c8:	d1ef      	bne.n	800e3aa <read_submessage_format+0x5a>
 800e3ca:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e3ce:	f1b8 0f00 	cmp.w	r8, #0
 800e3d2:	d011      	beq.n	800e3f8 <read_submessage_format+0xa8>
 800e3d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e3d6:	e9cd 3500 	strd	r3, r5, [sp]
 800e3da:	2306      	movs	r3, #6
 800e3dc:	f88d 3016 	strb.w	r3, [sp, #22]
 800e3e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e3e4:	9302      	str	r3, [sp, #8]
 800e3e6:	4632      	mov	r2, r6
 800e3e8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	47c0      	blx	r8
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	69e2      	ldr	r2, [r4, #28]
 800e3f4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	d1d4      	bne.n	800e3a6 <read_submessage_format+0x56>
 800e3fc:	e7d5      	b.n	800e3aa <read_submessage_format+0x5a>
 800e3fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0f8      	beq.n	800e3f8 <read_submessage_format+0xa8>
 800e406:	a906      	add	r1, sp, #24
 800e408:	a80c      	add	r0, sp, #48	@ 0x30
 800e40a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e40e:	f002 fef3 	bl	80111f8 <uxr_deserialize_SampleIdentity>
 800e412:	b9a0      	cbnz	r0, 800e43e <read_submessage_format+0xee>
 800e414:	69e2      	ldr	r2, [r4, #28]
 800e416:	2a00      	cmp	r2, #0
 800e418:	d1c5      	bne.n	800e3a6 <read_submessage_format+0x56>
 800e41a:	e7c6      	b.n	800e3aa <read_submessage_format+0x5a>
 800e41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e420:	b13b      	cbz	r3, 800e432 <read_submessage_format+0xe2>
 800e422:	a906      	add	r1, sp, #24
 800e424:	a80c      	add	r0, sp, #48	@ 0x30
 800e426:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e42a:	f002 fbb9 	bl	8010ba0 <uxr_deserialize_BaseObjectRequest>
 800e42e:	bb60      	cbnz	r0, 800e48a <read_submessage_format+0x13a>
 800e430:	69e2      	ldr	r2, [r4, #28]
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	442b      	add	r3, r5
 800e436:	60a3      	str	r3, [r4, #8]
 800e438:	2a00      	cmp	r2, #0
 800e43a:	d1b4      	bne.n	800e3a6 <read_submessage_format+0x56>
 800e43c:	e7b5      	b.n	800e3aa <read_submessage_format+0x5a>
 800e43e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e442:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e444:	1a52      	subs	r2, r2, r1
 800e446:	eba8 0803 	sub.w	r8, r8, r3
 800e44a:	a80c      	add	r0, sp, #48	@ 0x30
 800e44c:	f7fa fd68 	bl	8008f20 <ucdr_init_buffer>
 800e450:	44a8      	add	r8, r5
 800e452:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e456:	a80c      	add	r0, sp, #48	@ 0x30
 800e458:	f7fa fd36 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 800e45c:	fa1f f888 	uxth.w	r8, r8
 800e460:	ab0c      	add	r3, sp, #48	@ 0x30
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	f8cd 8004 	str.w	r8, [sp, #4]
 800e468:	2108      	movs	r1, #8
 800e46a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e46e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e472:	9102      	str	r1, [sp, #8]
 800e474:	ab06      	add	r3, sp, #24
 800e476:	4632      	mov	r2, r6
 800e478:	9905      	ldr	r1, [sp, #20]
 800e47a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e47e:	4638      	mov	r0, r7
 800e480:	47b0      	blx	r6
 800e482:	2301      	movs	r3, #1
 800e484:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e488:	e7c4      	b.n	800e414 <read_submessage_format+0xc4>
 800e48a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e48e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e490:	1a52      	subs	r2, r2, r1
 800e492:	a80c      	add	r0, sp, #48	@ 0x30
 800e494:	eba8 0803 	sub.w	r8, r8, r3
 800e498:	f7fa fd42 	bl	8008f20 <ucdr_init_buffer>
 800e49c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e4a0:	a80c      	add	r0, sp, #48	@ 0x30
 800e4a2:	f7fa fd11 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 800e4a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e4ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e4b2:	44a8      	add	r8, r5
 800e4b4:	fa1f f888 	uxth.w	r8, r8
 800e4b8:	f8cd 8004 	str.w	r8, [sp, #4]
 800e4bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e4c0:	2107      	movs	r1, #7
 800e4c2:	f88d 1016 	strb.w	r1, [sp, #22]
 800e4c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e4ca:	9102      	str	r1, [sp, #8]
 800e4cc:	4632      	mov	r2, r6
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e4d4:	9905      	ldr	r1, [sp, #20]
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	47b0      	blx	r6
 800e4da:	2301      	movs	r3, #1
 800e4dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e4e0:	e7a6      	b.n	800e430 <read_submessage_format+0xe0>
 800e4e2:	bf00      	nop

0800e4e4 <on_get_fragmentation_info>:
 800e4e4:	b500      	push	{lr}
 800e4e6:	b08b      	sub	sp, #44	@ 0x2c
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	2204      	movs	r2, #4
 800e4ec:	a802      	add	r0, sp, #8
 800e4ee:	f7fa fd17 	bl	8008f20 <ucdr_init_buffer>
 800e4f2:	f10d 0305 	add.w	r3, sp, #5
 800e4f6:	f10d 0206 	add.w	r2, sp, #6
 800e4fa:	a901      	add	r1, sp, #4
 800e4fc:	a802      	add	r0, sp, #8
 800e4fe:	f001 fe67 	bl	80101d0 <uxr_read_submessage_header>
 800e502:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e506:	2b0d      	cmp	r3, #13
 800e508:	d003      	beq.n	800e512 <on_get_fragmentation_info+0x2e>
 800e50a:	2000      	movs	r0, #0
 800e50c:	b00b      	add	sp, #44	@ 0x2c
 800e50e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e512:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e516:	f013 0f02 	tst.w	r3, #2
 800e51a:	bf14      	ite	ne
 800e51c:	2002      	movne	r0, #2
 800e51e:	2001      	moveq	r0, #1
 800e520:	b00b      	add	sp, #44	@ 0x2c
 800e522:	f85d fb04 	ldr.w	pc, [sp], #4
 800e526:	bf00      	nop

0800e528 <read_submessage_get_info>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	2500      	movs	r5, #0
 800e52c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e530:	4604      	mov	r4, r0
 800e532:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e536:	460e      	mov	r6, r1
 800e538:	a810      	add	r0, sp, #64	@ 0x40
 800e53a:	4629      	mov	r1, r5
 800e53c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e540:	f004 ff04 	bl	801334c <memset>
 800e544:	a903      	add	r1, sp, #12
 800e546:	4630      	mov	r0, r6
 800e548:	f002 fcd2 	bl	8010ef0 <uxr_deserialize_GET_INFO_Payload>
 800e54c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e550:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e554:	4620      	mov	r0, r4
 800e556:	f001 f81f 	bl	800f598 <uxr_session_header_offset>
 800e55a:	462b      	mov	r3, r5
 800e55c:	9000      	str	r0, [sp, #0]
 800e55e:	220c      	movs	r2, #12
 800e560:	a905      	add	r1, sp, #20
 800e562:	a808      	add	r0, sp, #32
 800e564:	f7fa fcca 	bl	8008efc <ucdr_init_buffer_origin_offset>
 800e568:	a910      	add	r1, sp, #64	@ 0x40
 800e56a:	a808      	add	r0, sp, #32
 800e56c:	f002 fd32 	bl	8010fd4 <uxr_serialize_INFO_Payload>
 800e570:	9b08      	ldr	r3, [sp, #32]
 800e572:	462a      	mov	r2, r5
 800e574:	4629      	mov	r1, r5
 800e576:	4620      	mov	r0, r4
 800e578:	f000 ffb8 	bl	800f4ec <uxr_stamp_session_header>
 800e57c:	a808      	add	r0, sp, #32
 800e57e:	f7fa fcfb 	bl	8008f78 <ucdr_buffer_length>
 800e582:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e584:	4602      	mov	r2, r0
 800e586:	a905      	add	r1, sp, #20
 800e588:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e58c:	47a0      	blx	r4
 800e58e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e592:	bd70      	pop	{r4, r5, r6, pc}

0800e594 <write_submessage_acknack.isra.0>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	b092      	sub	sp, #72	@ 0x48
 800e598:	4605      	mov	r5, r0
 800e59a:	460e      	mov	r6, r1
 800e59c:	4614      	mov	r4, r2
 800e59e:	f000 fffb 	bl	800f598 <uxr_session_header_offset>
 800e5a2:	a905      	add	r1, sp, #20
 800e5a4:	9000      	str	r0, [sp, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	a80a      	add	r0, sp, #40	@ 0x28
 800e5aa:	2211      	movs	r2, #17
 800e5ac:	f7fa fca6 	bl	8008efc <ucdr_init_buffer_origin_offset>
 800e5b0:	2218      	movs	r2, #24
 800e5b2:	fb02 5404 	mla	r4, r2, r4, r5
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	2205      	movs	r2, #5
 800e5ba:	3450      	adds	r4, #80	@ 0x50
 800e5bc:	210a      	movs	r1, #10
 800e5be:	a80a      	add	r0, sp, #40	@ 0x28
 800e5c0:	f001 fdec 	bl	801019c <uxr_buffer_submessage_header>
 800e5c4:	a903      	add	r1, sp, #12
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f003 ff30 	bl	801242c <uxr_compute_acknack>
 800e5cc:	ba40      	rev16	r0, r0
 800e5ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e5d2:	a903      	add	r1, sp, #12
 800e5d4:	a80a      	add	r0, sp, #40	@ 0x28
 800e5d6:	f88d 6010 	strb.w	r6, [sp, #16]
 800e5da:	f002 fd6b 	bl	80110b4 <uxr_serialize_ACKNACK_Payload>
 800e5de:	2200      	movs	r2, #0
 800e5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	f000 ff81 	bl	800f4ec <uxr_stamp_session_header>
 800e5ea:	a80a      	add	r0, sp, #40	@ 0x28
 800e5ec:	f7fa fcc4 	bl	8008f78 <ucdr_buffer_length>
 800e5f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	a905      	add	r1, sp, #20
 800e5f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5fa:	47a0      	blx	r4
 800e5fc:	b012      	add	sp, #72	@ 0x48
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}

0800e600 <uxr_init_session>:
 800e600:	b510      	push	{r4, lr}
 800e602:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e638 <uxr_init_session+0x38>
 800e606:	2300      	movs	r3, #0
 800e608:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e60c:	4604      	mov	r4, r0
 800e60e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e612:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e616:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e61a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e61e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e622:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e626:	2181      	movs	r1, #129	@ 0x81
 800e628:	f000 fecc 	bl	800f3c4 <uxr_init_session_info>
 800e62c:	f104 0008 	add.w	r0, r4, #8
 800e630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e634:	f001 bcce 	b.w	800ffd4 <uxr_init_stream_storage>
	...

0800e640 <uxr_set_status_callback>:
 800e640:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop

0800e648 <uxr_set_topic_callback>:
 800e648:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop

0800e650 <uxr_set_request_callback>:
 800e650:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop

0800e658 <uxr_set_reply_callback>:
 800e658:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <uxr_create_output_best_effort_stream>:
 800e660:	b510      	push	{r4, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	e9cd 2100 	strd	r2, r1, [sp]
 800e668:	4604      	mov	r4, r0
 800e66a:	f000 ff95 	bl	800f598 <uxr_session_header_offset>
 800e66e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e672:	4603      	mov	r3, r0
 800e674:	f104 0008 	add.w	r0, r4, #8
 800e678:	b004      	add	sp, #16
 800e67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67e:	f001 bcf3 	b.w	8010068 <uxr_add_output_best_effort_buffer>
 800e682:	bf00      	nop

0800e684 <uxr_create_output_reliable_stream>:
 800e684:	b510      	push	{r4, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e68c:	4604      	mov	r4, r0
 800e68e:	9303      	str	r3, [sp, #12]
 800e690:	f000 ff82 	bl	800f598 <uxr_session_header_offset>
 800e694:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e698:	9000      	str	r0, [sp, #0]
 800e69a:	9905      	ldr	r1, [sp, #20]
 800e69c:	f104 0008 	add.w	r0, r4, #8
 800e6a0:	f001 fcf6 	bl	8010090 <uxr_add_output_reliable_buffer>
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	b2c3      	uxtb	r3, r0
 800e6a8:	f363 0207 	bfi	r2, r3, #0, #8
 800e6ac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e6b0:	f363 220f 	bfi	r2, r3, #8, #8
 800e6b4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e6b8:	f363 4217 	bfi	r2, r3, #16, #8
 800e6bc:	0e03      	lsrs	r3, r0, #24
 800e6be:	f363 621f 	bfi	r2, r3, #24, #8
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	b008      	add	sp, #32
 800e6c6:	bd10      	pop	{r4, pc}

0800e6c8 <uxr_create_input_best_effort_stream>:
 800e6c8:	b082      	sub	sp, #8
 800e6ca:	3008      	adds	r0, #8
 800e6cc:	b002      	add	sp, #8
 800e6ce:	f001 bcf9 	b.w	80100c4 <uxr_add_input_best_effort_buffer>
 800e6d2:	bf00      	nop

0800e6d4 <uxr_create_input_reliable_stream>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	4c0b      	ldr	r4, [pc, #44]	@ (800e708 <uxr_create_input_reliable_stream+0x34>)
 800e6da:	9400      	str	r4, [sp, #0]
 800e6dc:	3008      	adds	r0, #8
 800e6de:	f001 fd07 	bl	80100f0 <uxr_add_input_reliable_buffer>
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	b2c3      	uxtb	r3, r0
 800e6e6:	f363 0207 	bfi	r2, r3, #0, #8
 800e6ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e6ee:	f363 220f 	bfi	r2, r3, #8, #8
 800e6f2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e6f6:	f363 4217 	bfi	r2, r3, #16, #8
 800e6fa:	0e03      	lsrs	r3, r0, #24
 800e6fc:	f363 621f 	bfi	r2, r3, #24, #8
 800e700:	4610      	mov	r0, r2
 800e702:	b004      	add	sp, #16
 800e704:	bd10      	pop	{r4, pc}
 800e706:	bf00      	nop
 800e708:	0800e4e5 	.word	0x0800e4e5

0800e70c <uxr_epoch_nanos>:
 800e70c:	b510      	push	{r4, lr}
 800e70e:	4604      	mov	r4, r0
 800e710:	f001 fda4 	bl	801025c <uxr_nanos>
 800e714:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e718:	1ac0      	subs	r0, r0, r3
 800e71a:	eb61 0102 	sbc.w	r1, r1, r2
 800e71e:	bd10      	pop	{r4, pc}

0800e720 <uxr_flash_output_streams>:
 800e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e724:	7e03      	ldrb	r3, [r0, #24]
 800e726:	b084      	sub	sp, #16
 800e728:	4604      	mov	r4, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d035      	beq.n	800e79a <uxr_flash_output_streams+0x7a>
 800e72e:	f04f 0900 	mov.w	r9, #0
 800e732:	4648      	mov	r0, r9
 800e734:	f10d 0802 	add.w	r8, sp, #2
 800e738:	af03      	add	r7, sp, #12
 800e73a:	ae02      	add	r6, sp, #8
 800e73c:	e006      	b.n	800e74c <uxr_flash_output_streams+0x2c>
 800e73e:	7e23      	ldrb	r3, [r4, #24]
 800e740:	f109 0901 	add.w	r9, r9, #1
 800e744:	fa5f f089 	uxtb.w	r0, r9
 800e748:	4283      	cmp	r3, r0
 800e74a:	d926      	bls.n	800e79a <uxr_flash_output_streams+0x7a>
 800e74c:	2201      	movs	r2, #1
 800e74e:	4611      	mov	r1, r2
 800e750:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e754:	f001 fbea 	bl	800ff2c <uxr_stream_id>
 800e758:	3508      	adds	r5, #8
 800e75a:	4684      	mov	ip, r0
 800e75c:	4643      	mov	r3, r8
 800e75e:	463a      	mov	r2, r7
 800e760:	4631      	mov	r1, r6
 800e762:	4628      	mov	r0, r5
 800e764:	f8cd c004 	str.w	ip, [sp, #4]
 800e768:	f003 fee6 	bl	8012538 <uxr_prepare_best_effort_buffer_to_send>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d0e6      	beq.n	800e73e <uxr_flash_output_streams+0x1e>
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e776:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 feb6 	bl	800f4ec <uxr_stamp_session_header>
 800e780:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e782:	9a03      	ldr	r2, [sp, #12]
 800e784:	685d      	ldr	r5, [r3, #4]
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	9902      	ldr	r1, [sp, #8]
 800e78a:	47a8      	blx	r5
 800e78c:	f109 0901 	add.w	r9, r9, #1
 800e790:	7e23      	ldrb	r3, [r4, #24]
 800e792:	fa5f f089 	uxtb.w	r0, r9
 800e796:	4283      	cmp	r3, r0
 800e798:	d8d8      	bhi.n	800e74c <uxr_flash_output_streams+0x2c>
 800e79a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e79e:	b38b      	cbz	r3, 800e804 <uxr_flash_output_streams+0xe4>
 800e7a0:	f04f 0900 	mov.w	r9, #0
 800e7a4:	f10d 0802 	add.w	r8, sp, #2
 800e7a8:	af03      	add	r7, sp, #12
 800e7aa:	ae02      	add	r6, sp, #8
 800e7ac:	4648      	mov	r0, r9
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e7b6:	f001 fbb9 	bl	800ff2c <uxr_stream_id>
 800e7ba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e7be:	3520      	adds	r5, #32
 800e7c0:	9001      	str	r0, [sp, #4]
 800e7c2:	e00d      	b.n	800e7e0 <uxr_flash_output_streams+0xc0>
 800e7c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e7c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e7cc:	9b02      	ldr	r3, [sp, #8]
 800e7ce:	f000 fe8d 	bl	800f4ec <uxr_stamp_session_header>
 800e7d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e7d4:	9a03      	ldr	r2, [sp, #12]
 800e7d6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e7da:	9902      	ldr	r1, [sp, #8]
 800e7dc:	6818      	ldr	r0, [r3, #0]
 800e7de:	47d0      	blx	sl
 800e7e0:	4643      	mov	r3, r8
 800e7e2:	463a      	mov	r2, r7
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f004 f8c4 	bl	8012974 <uxr_prepare_next_reliable_buffer_to_send>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1e7      	bne.n	800e7c4 <uxr_flash_output_streams+0xa4>
 800e7f4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e7f8:	f109 0901 	add.w	r9, r9, #1
 800e7fc:	fa5f f089 	uxtb.w	r0, r9
 800e800:	4283      	cmp	r3, r0
 800e802:	d8d4      	bhi.n	800e7ae <uxr_flash_output_streams+0x8e>
 800e804:	b004      	add	sp, #16
 800e806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e80a:	bf00      	nop

0800e80c <read_submessage_info>:
 800e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e810:	460d      	mov	r5, r1
 800e812:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e816:	4669      	mov	r1, sp
 800e818:	4607      	mov	r7, r0
 800e81a:	4628      	mov	r0, r5
 800e81c:	f002 fa76 	bl	8010d0c <uxr_deserialize_BaseObjectReply>
 800e820:	a902      	add	r1, sp, #8
 800e822:	4604      	mov	r4, r0
 800e824:	4628      	mov	r0, r5
 800e826:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e82a:	f7f9 fbb5 	bl	8007f98 <ucdr_deserialize_bool>
 800e82e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e832:	4004      	ands	r4, r0
 800e834:	b2e4      	uxtb	r4, r4
 800e836:	b95b      	cbnz	r3, 800e850 <read_submessage_info+0x44>
 800e838:	a987      	add	r1, sp, #540	@ 0x21c
 800e83a:	4628      	mov	r0, r5
 800e83c:	f7f9 fbac 	bl	8007f98 <ucdr_deserialize_bool>
 800e840:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e844:	4606      	mov	r6, r0
 800e846:	b94b      	cbnz	r3, 800e85c <read_submessage_info+0x50>
 800e848:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e850:	a903      	add	r1, sp, #12
 800e852:	4628      	mov	r0, r5
 800e854:	f002 f902 	bl	8010a5c <uxr_deserialize_ObjectVariant>
 800e858:	4004      	ands	r4, r0
 800e85a:	e7ed      	b.n	800e838 <read_submessage_info+0x2c>
 800e85c:	a988      	add	r1, sp, #544	@ 0x220
 800e85e:	4628      	mov	r0, r5
 800e860:	f7f9 fbc8 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 800e864:	4234      	tst	r4, r6
 800e866:	d0ef      	beq.n	800e848 <read_submessage_info+0x3c>
 800e868:	2800      	cmp	r0, #0
 800e86a:	d0ed      	beq.n	800e848 <read_submessage_info+0x3c>
 800e86c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e870:	2b0d      	cmp	r3, #13
 800e872:	d1e9      	bne.n	800e848 <read_submessage_info+0x3c>
 800e874:	a98a      	add	r1, sp, #552	@ 0x228
 800e876:	4628      	mov	r0, r5
 800e878:	f7fa f962 	bl	8008b40 <ucdr_deserialize_int16_t>
 800e87c:	b140      	cbz	r0, 800e890 <read_submessage_info+0x84>
 800e87e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e882:	2b00      	cmp	r3, #0
 800e884:	dd07      	ble.n	800e896 <read_submessage_info+0x8a>
 800e886:	f1b8 0f00 	cmp.w	r8, #0
 800e88a:	bf14      	ite	ne
 800e88c:	2001      	movne	r0, #1
 800e88e:	2002      	moveq	r0, #2
 800e890:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e894:	e7d8      	b.n	800e848 <read_submessage_info+0x3c>
 800e896:	2000      	movs	r0, #0
 800e898:	e7fa      	b.n	800e890 <read_submessage_info+0x84>
 800e89a:	bf00      	nop

0800e89c <read_submessage_list>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	b097      	sub	sp, #92	@ 0x5c
 800e8a2:	4ec1      	ldr	r6, [pc, #772]	@ (800eba8 <read_submessage_list+0x30c>)
 800e8a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	f04f 0801 	mov.w	r8, #1
 800e8ae:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e8b2:	aa0c      	add	r2, sp, #48	@ 0x30
 800e8b4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f001 fc89 	bl	80101d0 <uxr_read_submessage_header>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f000 813e 	beq.w	800eb40 <read_submessage_list+0x2a4>
 800e8c4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e8c8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e8cc:	3b02      	subs	r3, #2
 800e8ce:	2b0d      	cmp	r3, #13
 800e8d0:	d8ed      	bhi.n	800e8ae <read_submessage_list+0x12>
 800e8d2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8d8 <read_submessage_list+0x3c>)
 800e8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8d8:	0800eb37 	.word	0x0800eb37
 800e8dc:	0800e8af 	.word	0x0800e8af
 800e8e0:	0800eb27 	.word	0x0800eb27
 800e8e4:	0800eac5 	.word	0x0800eac5
 800e8e8:	0800eabb 	.word	0x0800eabb
 800e8ec:	0800e8af 	.word	0x0800e8af
 800e8f0:	0800e8af 	.word	0x0800e8af
 800e8f4:	0800ea1b 	.word	0x0800ea1b
 800e8f8:	0800e9ab 	.word	0x0800e9ab
 800e8fc:	0800e96b 	.word	0x0800e96b
 800e900:	0800e8af 	.word	0x0800e8af
 800e904:	0800e8af 	.word	0x0800e8af
 800e908:	0800e8af 	.word	0x0800e8af
 800e90c:	0800e911 	.word	0x0800e911
 800e910:	a910      	add	r1, sp, #64	@ 0x40
 800e912:	4628      	mov	r0, r5
 800e914:	f002 fc1e 	bl	8011154 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e918:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e91c:	f1b9 0f00 	cmp.w	r9, #0
 800e920:	f000 8116 	beq.w	800eb50 <read_submessage_list+0x2b4>
 800e924:	f001 fc9a 	bl	801025c <uxr_nanos>
 800e928:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e92a:	4602      	mov	r2, r0
 800e92c:	460b      	mov	r3, r1
 800e92e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e930:	2100      	movs	r1, #0
 800e932:	468c      	mov	ip, r1
 800e934:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e938:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e93c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e93e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e940:	468c      	mov	ip, r1
 800e942:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e946:	46e2      	mov	sl, ip
 800e948:	46bc      	mov	ip, r7
 800e94a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e94e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e952:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e956:	e9cd 7100 	strd	r7, r1, [sp]
 800e95a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e95e:	9106      	str	r1, [sp, #24]
 800e960:	4620      	mov	r0, r4
 800e962:	47c8      	blx	r9
 800e964:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e968:	e7a1      	b.n	800e8ae <read_submessage_list+0x12>
 800e96a:	a910      	add	r1, sp, #64	@ 0x40
 800e96c:	4628      	mov	r0, r5
 800e96e:	f002 fbdf 	bl	8011130 <uxr_deserialize_HEARTBEAT_Payload>
 800e972:	2100      	movs	r1, #0
 800e974:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e978:	f001 fb02 	bl	800ff80 <uxr_stream_id_from_raw>
 800e97c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e980:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e982:	4639      	mov	r1, r7
 800e984:	f104 0008 	add.w	r0, r4, #8
 800e988:	f001 fbe8 	bl	801015c <uxr_get_input_reliable_stream>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d08e      	beq.n	800e8ae <read_submessage_list+0x12>
 800e990:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e994:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e998:	f003 fd3c 	bl	8012414 <uxr_process_heartbeat>
 800e99c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f7ff fdf6 	bl	800e594 <write_submessage_acknack.isra.0>
 800e9a8:	e781      	b.n	800e8ae <read_submessage_list+0x12>
 800e9aa:	a910      	add	r1, sp, #64	@ 0x40
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f002 fb97 	bl	80110e0 <uxr_deserialize_ACKNACK_Payload>
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e9b8:	f001 fae2 	bl	800ff80 <uxr_stream_id_from_raw>
 800e9bc:	900d      	str	r0, [sp, #52]	@ 0x34
 800e9be:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e9c2:	f104 0008 	add.w	r0, r4, #8
 800e9c6:	f001 fbb5 	bl	8010134 <uxr_get_output_reliable_stream>
 800e9ca:	4607      	mov	r7, r0
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	f43f af6e 	beq.w	800e8ae <read_submessage_list+0x12>
 800e9d2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e9d6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e9da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e9de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e9e2:	b289      	uxth	r1, r1
 800e9e4:	f004 f870 	bl	8012ac8 <uxr_process_acknack>
 800e9e8:	4638      	mov	r0, r7
 800e9ea:	f004 f82d 	bl	8012a48 <uxr_begin_output_nack_buffer_it>
 800e9ee:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e9f2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e9f6:	e006      	b.n	800ea06 <read_submessage_list+0x16a>
 800e9f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e9fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e9fc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ea00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea02:	6818      	ldr	r0, [r3, #0]
 800ea04:	47c8      	blx	r9
 800ea06:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ea0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ea0c:	4651      	mov	r1, sl
 800ea0e:	4638      	mov	r0, r7
 800ea10:	f004 f81c 	bl	8012a4c <uxr_next_reliable_nack_buffer_to_send>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d1ef      	bne.n	800e9f8 <read_submessage_list+0x15c>
 800ea18:	e749      	b.n	800e8ae <read_submessage_list+0x12>
 800ea1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ea1e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ea22:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ea26:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ea2a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ea2e:	4651      	mov	r1, sl
 800ea30:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ea34:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800ea38:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ea3c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ea40:	4628      	mov	r0, r5
 800ea42:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ea46:	f002 f8ab 	bl	8010ba0 <uxr_deserialize_BaseObjectRequest>
 800ea4a:	4650      	mov	r0, sl
 800ea4c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ea4e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ea52:	f000 fdc7 	bl	800f5e4 <uxr_parse_base_object_request>
 800ea56:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ea5a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea5c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ea60:	9110      	str	r1, [sp, #64]	@ 0x40
 800ea62:	3f04      	subs	r7, #4
 800ea64:	f009 090e 	and.w	r9, r9, #14
 800ea68:	b2bf      	uxth	r7, r7
 800ea6a:	f1bb 0f00 	cmp.w	fp, #0
 800ea6e:	d006      	beq.n	800ea7e <read_submessage_list+0x1e2>
 800ea70:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	4652      	mov	r2, sl
 800ea78:	2300      	movs	r3, #0
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	47d8      	blx	fp
 800ea7e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ea80:	b16a      	cbz	r2, 800ea9e <read_submessage_list+0x202>
 800ea82:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ea84:	2100      	movs	r1, #0
 800ea86:	3802      	subs	r0, #2
 800ea88:	e002      	b.n	800ea90 <read_submessage_list+0x1f4>
 800ea8a:	3101      	adds	r1, #1
 800ea8c:	4291      	cmp	r1, r2
 800ea8e:	d006      	beq.n	800ea9e <read_submessage_list+0x202>
 800ea90:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ea94:	4553      	cmp	r3, sl
 800ea96:	d1f8      	bne.n	800ea8a <read_submessage_list+0x1ee>
 800ea98:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	545a      	strb	r2, [r3, r1]
 800ea9e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800eaa2:	9102      	str	r1, [sp, #8]
 800eaa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eaa6:	9101      	str	r1, [sp, #4]
 800eaa8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800eaaa:	9100      	str	r1, [sp, #0]
 800eaac:	464b      	mov	r3, r9
 800eaae:	463a      	mov	r2, r7
 800eab0:	4629      	mov	r1, r5
 800eab2:	4620      	mov	r0, r4
 800eab4:	f7ff fc4c 	bl	800e350 <read_submessage_format>
 800eab8:	e6f9      	b.n	800e8ae <read_submessage_list+0x12>
 800eaba:	4629      	mov	r1, r5
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7ff fea5 	bl	800e80c <read_submessage_info>
 800eac2:	e6f4      	b.n	800e8ae <read_submessage_list+0x12>
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	d03e      	beq.n	800eb46 <read_submessage_list+0x2aa>
 800eac8:	a910      	add	r1, sp, #64	@ 0x40
 800eaca:	4628      	mov	r0, r5
 800eacc:	f002 fa64 	bl	8010f98 <uxr_deserialize_STATUS_Payload>
 800ead0:	a90e      	add	r1, sp, #56	@ 0x38
 800ead2:	aa0d      	add	r2, sp, #52	@ 0x34
 800ead4:	a810      	add	r0, sp, #64	@ 0x40
 800ead6:	f000 fd85 	bl	800f5e4 <uxr_parse_base_object_request>
 800eada:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800eade:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eae0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800eae4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800eae8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800eaea:	f1ba 0f00 	cmp.w	sl, #0
 800eaee:	d006      	beq.n	800eafe <read_submessage_list+0x262>
 800eaf0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	463a      	mov	r2, r7
 800eaf8:	464b      	mov	r3, r9
 800eafa:	4620      	mov	r0, r4
 800eafc:	47d0      	blx	sl
 800eafe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	f43f aed4 	beq.w	800e8ae <read_submessage_list+0x12>
 800eb06:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800eb08:	2100      	movs	r1, #0
 800eb0a:	3802      	subs	r0, #2
 800eb0c:	e003      	b.n	800eb16 <read_submessage_list+0x27a>
 800eb0e:	3101      	adds	r1, #1
 800eb10:	4291      	cmp	r1, r2
 800eb12:	f43f aecc 	beq.w	800e8ae <read_submessage_list+0x12>
 800eb16:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800eb1a:	42bb      	cmp	r3, r7
 800eb1c:	d1f7      	bne.n	800eb0e <read_submessage_list+0x272>
 800eb1e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800eb20:	f803 9001 	strb.w	r9, [r3, r1]
 800eb24:	e6c3      	b.n	800e8ae <read_submessage_list+0x12>
 800eb26:	2a00      	cmp	r2, #0
 800eb28:	f47f aec1 	bne.w	800e8ae <read_submessage_list+0x12>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 fc9e 	bl	800f470 <uxr_read_create_session_status>
 800eb34:	e6bb      	b.n	800e8ae <read_submessage_list+0x12>
 800eb36:	4629      	mov	r1, r5
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f7ff fcf5 	bl	800e528 <read_submessage_get_info>
 800eb3e:	e6b6      	b.n	800e8ae <read_submessage_list+0x12>
 800eb40:	b017      	add	sp, #92	@ 0x5c
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb46:	4629      	mov	r1, r5
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f000 fc9d 	bl	800f488 <uxr_read_delete_session_status>
 800eb4e:	e6ae      	b.n	800e8ae <read_submessage_list+0x12>
 800eb50:	f001 fb84 	bl	801025c <uxr_nanos>
 800eb54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800eb58:	464f      	mov	r7, r9
 800eb5a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800eb5e:	1812      	adds	r2, r2, r0
 800eb60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb62:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800eb64:	eb47 0101 	adc.w	r1, r7, r1
 800eb68:	464f      	mov	r7, r9
 800eb6a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	4684      	mov	ip, r0
 800eb72:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800eb76:	fbc7 0906 	smlal	r0, r9, r7, r6
 800eb7a:	eb1c 0c00 	adds.w	ip, ip, r0
 800eb7e:	464f      	mov	r7, r9
 800eb80:	eb43 0307 	adc.w	r3, r3, r7
 800eb84:	ebb2 0c0c 	subs.w	ip, r2, ip
 800eb88:	eb61 0303 	sbc.w	r3, r1, r3
 800eb8c:	0fda      	lsrs	r2, r3, #31
 800eb8e:	eb12 020c 	adds.w	r2, r2, ip
 800eb92:	f143 0300 	adc.w	r3, r3, #0
 800eb96:	0852      	lsrs	r2, r2, #1
 800eb98:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800eb9c:	105b      	asrs	r3, r3, #1
 800eb9e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800eba2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800eba6:	e6dd      	b.n	800e964 <read_submessage_list+0xc8>
 800eba8:	3b9aca00 	.word	0x3b9aca00

0800ebac <listen_message_reliably>:
 800ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	1e0b      	subs	r3, r1, #0
 800ebb2:	b09d      	sub	sp, #116	@ 0x74
 800ebb4:	bfb8      	it	lt
 800ebb6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ebba:	4680      	mov	r8, r0
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	f001 fb33 	bl	8010228 <uxr_millis>
 800ebc2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ebc6:	4681      	mov	r9, r0
 800ebc8:	2a00      	cmp	r2, #0
 800ebca:	f000 80a1 	beq.w	800ed10 <listen_message_reliably+0x164>
 800ebce:	2600      	movs	r6, #0
 800ebd0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ebd4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ebd8:	9303      	str	r3, [sp, #12]
 800ebda:	4630      	mov	r0, r6
 800ebdc:	460f      	mov	r7, r1
 800ebde:	e00f      	b.n	800ec00 <listen_message_reliably+0x54>
 800ebe0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ebe4:	9903      	ldr	r1, [sp, #12]
 800ebe6:	455a      	cmp	r2, fp
 800ebe8:	f106 0601 	add.w	r6, r6, #1
 800ebec:	eb73 0101 	sbcs.w	r1, r3, r1
 800ebf0:	b2f0      	uxtb	r0, r6
 800ebf2:	da01      	bge.n	800ebf8 <listen_message_reliably+0x4c>
 800ebf4:	4693      	mov	fp, r2
 800ebf6:	9303      	str	r3, [sp, #12]
 800ebf8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ebfc:	4283      	cmp	r3, r0
 800ebfe:	d960      	bls.n	800ecc2 <listen_message_reliably+0x116>
 800ec00:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ec04:	2102      	movs	r1, #2
 800ec06:	2201      	movs	r2, #1
 800ec08:	f001 f990 	bl	800ff2c <uxr_stream_id>
 800ec0c:	00e4      	lsls	r4, r4, #3
 800ec0e:	f104 0520 	add.w	r5, r4, #32
 800ec12:	4445      	add	r5, r8
 800ec14:	4601      	mov	r1, r0
 800ec16:	463b      	mov	r3, r7
 800ec18:	464a      	mov	r2, r9
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec1e:	f003 fee9 	bl	80129f4 <uxr_update_output_stream_heartbeat_timestamp>
 800ec22:	eb08 0304 	add.w	r3, r8, r4
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d0da      	beq.n	800ebe0 <listen_message_reliably+0x34>
 800ec2a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ec2e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800ec32:	9304      	str	r3, [sp, #16]
 800ec34:	4640      	mov	r0, r8
 800ec36:	f000 fcaf 	bl	800f598 <uxr_session_header_offset>
 800ec3a:	3501      	adds	r5, #1
 800ec3c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800ec40:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ec44:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800ec48:	2300      	movs	r3, #0
 800ec4a:	2211      	movs	r2, #17
 800ec4c:	9000      	str	r0, [sp, #0]
 800ec4e:	a90c      	add	r1, sp, #48	@ 0x30
 800ec50:	4650      	mov	r0, sl
 800ec52:	f7fa f953 	bl	8008efc <ucdr_init_buffer_origin_offset>
 800ec56:	2300      	movs	r3, #0
 800ec58:	2205      	movs	r2, #5
 800ec5a:	210b      	movs	r1, #11
 800ec5c:	4650      	mov	r0, sl
 800ec5e:	f001 fa9d 	bl	801019c <uxr_buffer_submessage_header>
 800ec62:	8968      	ldrh	r0, [r5, #10]
 800ec64:	2101      	movs	r1, #1
 800ec66:	f003 ff67 	bl	8012b38 <uxr_seq_num_add>
 800ec6a:	892b      	ldrh	r3, [r5, #8]
 800ec6c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ec70:	4602      	mov	r2, r0
 800ec72:	9b04      	ldr	r3, [sp, #16]
 800ec74:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ec78:	a90a      	add	r1, sp, #40	@ 0x28
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800ec80:	f002 fa42 	bl	8011108 <uxr_serialize_HEARTBEAT_Payload>
 800ec84:	2200      	movs	r2, #0
 800ec86:	4611      	mov	r1, r2
 800ec88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f000 fc2e 	bl	800f4ec <uxr_stamp_session_header>
 800ec90:	4650      	mov	r0, sl
 800ec92:	f7fa f971 	bl	8008f78 <ucdr_buffer_length>
 800ec96:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	a90c      	add	r1, sp, #48	@ 0x30
 800ec9e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800eca2:	4444      	add	r4, r8
 800eca4:	47a8      	blx	r5
 800eca6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800ecaa:	9903      	ldr	r1, [sp, #12]
 800ecac:	455a      	cmp	r2, fp
 800ecae:	f106 0601 	add.w	r6, r6, #1
 800ecb2:	eb73 0101 	sbcs.w	r1, r3, r1
 800ecb6:	b2f0      	uxtb	r0, r6
 800ecb8:	db9c      	blt.n	800ebf4 <listen_message_reliably+0x48>
 800ecba:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ecbe:	4283      	cmp	r3, r0
 800ecc0:	d89e      	bhi.n	800ec00 <listen_message_reliably+0x54>
 800ecc2:	9a03      	ldr	r2, [sp, #12]
 800ecc4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bf08      	it	eq
 800eccc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800ecd0:	d01e      	beq.n	800ed10 <listen_message_reliably+0x164>
 800ecd2:	ebab 0309 	sub.w	r3, fp, r9
 800ecd6:	9905      	ldr	r1, [sp, #20]
 800ecd8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	bf08      	it	eq
 800ece0:	2301      	moveq	r3, #1
 800ece2:	4299      	cmp	r1, r3
 800ece4:	bfa8      	it	ge
 800ece6:	4619      	movge	r1, r3
 800ece8:	6894      	ldr	r4, [r2, #8]
 800ecea:	6810      	ldr	r0, [r2, #0]
 800ecec:	4689      	mov	r9, r1
 800ecee:	460b      	mov	r3, r1
 800ecf0:	aa08      	add	r2, sp, #32
 800ecf2:	a907      	add	r1, sp, #28
 800ecf4:	47a0      	blx	r4
 800ecf6:	b968      	cbnz	r0, 800ed14 <listen_message_reliably+0x168>
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	eba3 0309 	sub.w	r3, r3, r9
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	9305      	str	r3, [sp, #20]
 800ed02:	f73f af5c 	bgt.w	800ebbe <listen_message_reliably+0x12>
 800ed06:	4604      	mov	r4, r0
 800ed08:	4620      	mov	r0, r4
 800ed0a:	b01d      	add	sp, #116	@ 0x74
 800ed0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed10:	9b05      	ldr	r3, [sp, #20]
 800ed12:	e7e0      	b.n	800ecd6 <listen_message_reliably+0x12a>
 800ed14:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ed18:	4604      	mov	r4, r0
 800ed1a:	a80c      	add	r0, sp, #48	@ 0x30
 800ed1c:	f7fa f900 	bl	8008f20 <ucdr_init_buffer>
 800ed20:	2500      	movs	r5, #0
 800ed22:	f10d 031a 	add.w	r3, sp, #26
 800ed26:	aa06      	add	r2, sp, #24
 800ed28:	a90c      	add	r1, sp, #48	@ 0x30
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f88d 5018 	strb.w	r5, [sp, #24]
 800ed30:	f000 fbf0 	bl	800f514 <uxr_read_session_header>
 800ed34:	b918      	cbnz	r0, 800ed3e <listen_message_reliably+0x192>
 800ed36:	4620      	mov	r0, r4
 800ed38:	b01d      	add	sp, #116	@ 0x74
 800ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3e:	4629      	mov	r1, r5
 800ed40:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ed44:	f001 f91c 	bl	800ff80 <uxr_stream_id_from_raw>
 800ed48:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ed4c:	2d01      	cmp	r5, #1
 800ed4e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ed52:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ed56:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ed5a:	d04b      	beq.n	800edf4 <listen_message_reliably+0x248>
 800ed5c:	2d02      	cmp	r5, #2
 800ed5e:	d00f      	beq.n	800ed80 <listen_message_reliably+0x1d4>
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	d1e8      	bne.n	800ed36 <listen_message_reliably+0x18a>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4628      	mov	r0, r5
 800ed68:	f001 f90a 	bl	800ff80 <uxr_stream_id_from_raw>
 800ed6c:	a90c      	add	r1, sp, #48	@ 0x30
 800ed6e:	4602      	mov	r2, r0
 800ed70:	4640      	mov	r0, r8
 800ed72:	920a      	str	r2, [sp, #40]	@ 0x28
 800ed74:	f7ff fd92 	bl	800e89c <read_submessage_list>
 800ed78:	4620      	mov	r0, r4
 800ed7a:	b01d      	add	sp, #116	@ 0x74
 800ed7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed80:	4631      	mov	r1, r6
 800ed82:	f108 0008 	add.w	r0, r8, #8
 800ed86:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ed8a:	f001 f9e7 	bl	801015c <uxr_get_input_reliable_stream>
 800ed8e:	4607      	mov	r7, r0
 800ed90:	b338      	cbz	r0, 800ede2 <listen_message_reliably+0x236>
 800ed92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed94:	9203      	str	r2, [sp, #12]
 800ed96:	a80c      	add	r0, sp, #48	@ 0x30
 800ed98:	f7fa f8f2 	bl	8008f80 <ucdr_buffer_remaining>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	f10d 0019 	add.w	r0, sp, #25
 800eda2:	9000      	str	r0, [sp, #0]
 800eda4:	9a03      	ldr	r2, [sp, #12]
 800eda6:	4651      	mov	r1, sl
 800eda8:	4638      	mov	r0, r7
 800edaa:	f003 fa39 	bl	8012220 <uxr_receive_reliable_message>
 800edae:	b1c0      	cbz	r0, 800ede2 <listen_message_reliably+0x236>
 800edb0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800edb4:	b393      	cbz	r3, 800ee1c <listen_message_reliably+0x270>
 800edb6:	ad14      	add	r5, sp, #80	@ 0x50
 800edb8:	f04f 0a02 	mov.w	sl, #2
 800edbc:	e00a      	b.n	800edd4 <listen_message_reliably+0x228>
 800edbe:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800edc2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800edc6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800edca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edcc:	4629      	mov	r1, r5
 800edce:	4640      	mov	r0, r8
 800edd0:	f7ff fd64 	bl	800e89c <read_submessage_list>
 800edd4:	2204      	movs	r2, #4
 800edd6:	4629      	mov	r1, r5
 800edd8:	4638      	mov	r0, r7
 800edda:	f003 faa1 	bl	8012320 <uxr_next_input_reliable_buffer_available>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d1ed      	bne.n	800edbe <listen_message_reliably+0x212>
 800ede2:	4640      	mov	r0, r8
 800ede4:	4632      	mov	r2, r6
 800ede6:	4649      	mov	r1, r9
 800ede8:	f7ff fbd4 	bl	800e594 <write_submessage_acknack.isra.0>
 800edec:	4620      	mov	r0, r4
 800edee:	b01d      	add	sp, #116	@ 0x74
 800edf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf4:	4631      	mov	r1, r6
 800edf6:	f108 0008 	add.w	r0, r8, #8
 800edfa:	f001 f9a5 	bl	8010148 <uxr_get_input_best_effort_stream>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d099      	beq.n	800ed36 <listen_message_reliably+0x18a>
 800ee02:	4651      	mov	r1, sl
 800ee04:	f003 f978 	bl	80120f8 <uxr_receive_best_effort_message>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d094      	beq.n	800ed36 <listen_message_reliably+0x18a>
 800ee0c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ee10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee12:	a90c      	add	r1, sp, #48	@ 0x30
 800ee14:	4640      	mov	r0, r8
 800ee16:	f7ff fd41 	bl	800e89c <read_submessage_list>
 800ee1a:	e78c      	b.n	800ed36 <listen_message_reliably+0x18a>
 800ee1c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ee20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee22:	a90c      	add	r1, sp, #48	@ 0x30
 800ee24:	4640      	mov	r0, r8
 800ee26:	f7ff fd39 	bl	800e89c <read_submessage_list>
 800ee2a:	e7c4      	b.n	800edb6 <listen_message_reliably+0x20a>

0800ee2c <uxr_run_session_timeout>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	4604      	mov	r4, r0
 800ee30:	460d      	mov	r5, r1
 800ee32:	f001 f9f9 	bl	8010228 <uxr_millis>
 800ee36:	4606      	mov	r6, r0
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7ff fc71 	bl	800e720 <uxr_flash_output_streams>
 800ee3e:	4629      	mov	r1, r5
 800ee40:	4620      	mov	r0, r4
 800ee42:	f7ff feb3 	bl	800ebac <listen_message_reliably>
 800ee46:	f001 f9ef 	bl	8010228 <uxr_millis>
 800ee4a:	1b83      	subs	r3, r0, r6
 800ee4c:	1ae9      	subs	r1, r5, r3
 800ee4e:	2900      	cmp	r1, #0
 800ee50:	dcf6      	bgt.n	800ee40 <uxr_run_session_timeout+0x14>
 800ee52:	f104 0008 	add.w	r0, r4, #8
 800ee56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee5a:	f001 b989 	b.w	8010170 <uxr_output_streams_confirmed>
 800ee5e:	bf00      	nop

0800ee60 <uxr_run_session_until_data>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4604      	mov	r4, r0
 800ee64:	460d      	mov	r5, r1
 800ee66:	f001 f9df 	bl	8010228 <uxr_millis>
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f7ff fc57 	bl	800e720 <uxr_flash_output_streams>
 800ee72:	2300      	movs	r3, #0
 800ee74:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	e005      	b.n	800ee88 <uxr_run_session_until_data+0x28>
 800ee7c:	f001 f9d4 	bl	8010228 <uxr_millis>
 800ee80:	1b83      	subs	r3, r0, r6
 800ee82:	1ae9      	subs	r1, r5, r3
 800ee84:	2900      	cmp	r1, #0
 800ee86:	dd07      	ble.n	800ee98 <uxr_run_session_until_data+0x38>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f7ff fe8f 	bl	800ebac <listen_message_reliably>
 800ee8e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d0f2      	beq.n	800ee7c <uxr_run_session_until_data+0x1c>
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	bf00      	nop

0800eea0 <uxr_run_session_until_confirm_delivery>:
 800eea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea4:	4606      	mov	r6, r0
 800eea6:	460d      	mov	r5, r1
 800eea8:	f001 f9be 	bl	8010228 <uxr_millis>
 800eeac:	4607      	mov	r7, r0
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7ff fc36 	bl	800e720 <uxr_flash_output_streams>
 800eeb4:	2d00      	cmp	r5, #0
 800eeb6:	f106 0808 	add.w	r8, r6, #8
 800eeba:	bfa8      	it	ge
 800eebc:	462c      	movge	r4, r5
 800eebe:	da07      	bge.n	800eed0 <uxr_run_session_until_confirm_delivery+0x30>
 800eec0:	e00e      	b.n	800eee0 <uxr_run_session_until_confirm_delivery+0x40>
 800eec2:	f7ff fe73 	bl	800ebac <listen_message_reliably>
 800eec6:	f001 f9af 	bl	8010228 <uxr_millis>
 800eeca:	1bc3      	subs	r3, r0, r7
 800eecc:	1aec      	subs	r4, r5, r3
 800eece:	d407      	bmi.n	800eee0 <uxr_run_session_until_confirm_delivery+0x40>
 800eed0:	4640      	mov	r0, r8
 800eed2:	f001 f94d 	bl	8010170 <uxr_output_streams_confirmed>
 800eed6:	4603      	mov	r3, r0
 800eed8:	4621      	mov	r1, r4
 800eeda:	4630      	mov	r0, r6
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0f0      	beq.n	800eec2 <uxr_run_session_until_confirm_delivery+0x22>
 800eee0:	4640      	mov	r0, r8
 800eee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eee6:	f001 b943 	b.w	8010170 <uxr_output_streams_confirmed>
 800eeea:	bf00      	nop

0800eeec <uxr_run_session_until_all_status>:
 800eeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef0:	9c08      	ldr	r4, [sp, #32]
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	4691      	mov	r9, r2
 800eef8:	461d      	mov	r5, r3
 800eefa:	f7ff fc11 	bl	800e720 <uxr_flash_output_streams>
 800eefe:	b124      	cbz	r4, 800ef0a <uxr_run_session_until_all_status+0x1e>
 800ef00:	4622      	mov	r2, r4
 800ef02:	21ff      	movs	r1, #255	@ 0xff
 800ef04:	4628      	mov	r0, r5
 800ef06:	f004 fa21 	bl	801334c <memset>
 800ef0a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800ef0e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ef10:	f001 f98a 	bl	8010228 <uxr_millis>
 800ef14:	3d01      	subs	r5, #1
 800ef16:	f1a9 0902 	sub.w	r9, r9, #2
 800ef1a:	4680      	mov	r8, r0
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f7ff fe44 	bl	800ebac <listen_message_reliably>
 800ef24:	f001 f980 	bl	8010228 <uxr_millis>
 800ef28:	eba0 0008 	sub.w	r0, r0, r8
 800ef2c:	1a39      	subs	r1, r7, r0
 800ef2e:	b344      	cbz	r4, 800ef82 <uxr_run_session_until_all_status+0x96>
 800ef30:	4628      	mov	r0, r5
 800ef32:	46ac      	mov	ip, r5
 800ef34:	2301      	movs	r3, #1
 800ef36:	e002      	b.n	800ef3e <uxr_run_session_until_all_status+0x52>
 800ef38:	42a3      	cmp	r3, r4
 800ef3a:	d20d      	bcs.n	800ef58 <uxr_run_session_until_all_status+0x6c>
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ef42:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ef46:	d1f7      	bne.n	800ef38 <uxr_run_session_until_all_status+0x4c>
 800ef48:	42a3      	cmp	r3, r4
 800ef4a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ef4e:	d213      	bcs.n	800ef78 <uxr_run_session_until_all_status+0x8c>
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	d0f3      	beq.n	800ef3c <uxr_run_session_until_all_status+0x50>
 800ef54:	2900      	cmp	r1, #0
 800ef56:	dce2      	bgt.n	800ef1e <uxr_run_session_until_all_status+0x32>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ef5c:	442c      	add	r4, r5
 800ef5e:	e001      	b.n	800ef64 <uxr_run_session_until_all_status+0x78>
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d812      	bhi.n	800ef8a <uxr_run_session_until_all_status+0x9e>
 800ef64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ef68:	4284      	cmp	r4, r0
 800ef6a:	d1f9      	bne.n	800ef60 <uxr_run_session_until_all_status+0x74>
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	bf8c      	ite	hi
 800ef70:	2000      	movhi	r0, #0
 800ef72:	2001      	movls	r0, #1
 800ef74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef78:	2900      	cmp	r1, #0
 800ef7a:	dded      	ble.n	800ef58 <uxr_run_session_until_all_status+0x6c>
 800ef7c:	2a00      	cmp	r2, #0
 800ef7e:	d1ce      	bne.n	800ef1e <uxr_run_session_until_all_status+0x32>
 800ef80:	e7ea      	b.n	800ef58 <uxr_run_session_until_all_status+0x6c>
 800ef82:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ef84:	2001      	movs	r0, #1
 800ef86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ef90 <wait_session_status>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	4604      	mov	r4, r0
 800ef96:	b09d      	sub	sp, #116	@ 0x74
 800ef98:	20ff      	movs	r0, #255	@ 0xff
 800ef9a:	7160      	strb	r0, [r4, #5]
 800ef9c:	9303      	str	r3, [sp, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 80b6 	beq.w	800f110 <wait_session_status+0x180>
 800efa4:	468a      	mov	sl, r1
 800efa6:	4691      	mov	r9, r2
 800efa8:	f04f 0b00 	mov.w	fp, #0
 800efac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800efae:	464a      	mov	r2, r9
 800efb0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800efb4:	4651      	mov	r1, sl
 800efb6:	47a8      	blx	r5
 800efb8:	f001 f936 	bl	8010228 <uxr_millis>
 800efbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efc0:	4605      	mov	r5, r0
 800efc2:	e009      	b.n	800efd8 <wait_session_status+0x48>
 800efc4:	f001 f930 	bl	8010228 <uxr_millis>
 800efc8:	1b40      	subs	r0, r0, r5
 800efca:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dd40      	ble.n	800f054 <wait_session_status+0xc4>
 800efd2:	7960      	ldrb	r0, [r4, #5]
 800efd4:	28ff      	cmp	r0, #255	@ 0xff
 800efd6:	d145      	bne.n	800f064 <wait_session_status+0xd4>
 800efd8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800efda:	a908      	add	r1, sp, #32
 800efdc:	6896      	ldr	r6, [r2, #8]
 800efde:	6810      	ldr	r0, [r2, #0]
 800efe0:	aa09      	add	r2, sp, #36	@ 0x24
 800efe2:	47b0      	blx	r6
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d0ed      	beq.n	800efc4 <wait_session_status+0x34>
 800efe8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800efec:	a80c      	add	r0, sp, #48	@ 0x30
 800efee:	f7f9 ff97 	bl	8008f20 <ucdr_init_buffer>
 800eff2:	2600      	movs	r6, #0
 800eff4:	f10d 031e 	add.w	r3, sp, #30
 800eff8:	aa07      	add	r2, sp, #28
 800effa:	a90c      	add	r1, sp, #48	@ 0x30
 800effc:	4620      	mov	r0, r4
 800effe:	f88d 601c 	strb.w	r6, [sp, #28]
 800f002:	f000 fa87 	bl	800f514 <uxr_read_session_header>
 800f006:	2800      	cmp	r0, #0
 800f008:	d0dc      	beq.n	800efc4 <wait_session_status+0x34>
 800f00a:	4631      	mov	r1, r6
 800f00c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f010:	f000 ffb6 	bl	800ff80 <uxr_stream_id_from_raw>
 800f014:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f018:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f01c:	9302      	str	r3, [sp, #8]
 800f01e:	2f01      	cmp	r7, #1
 800f020:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f024:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f028:	d05c      	beq.n	800f0e4 <wait_session_status+0x154>
 800f02a:	2f02      	cmp	r7, #2
 800f02c:	d020      	beq.n	800f070 <wait_session_status+0xe0>
 800f02e:	2f00      	cmp	r7, #0
 800f030:	d1c8      	bne.n	800efc4 <wait_session_status+0x34>
 800f032:	4639      	mov	r1, r7
 800f034:	4638      	mov	r0, r7
 800f036:	f000 ffa3 	bl	800ff80 <uxr_stream_id_from_raw>
 800f03a:	a90c      	add	r1, sp, #48	@ 0x30
 800f03c:	4602      	mov	r2, r0
 800f03e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f040:	4620      	mov	r0, r4
 800f042:	f7ff fc2b 	bl	800e89c <read_submessage_list>
 800f046:	f001 f8ef 	bl	8010228 <uxr_millis>
 800f04a:	1b40      	subs	r0, r0, r5
 800f04c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f050:	2b00      	cmp	r3, #0
 800f052:	dcbe      	bgt.n	800efd2 <wait_session_status+0x42>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	7960      	ldrb	r0, [r4, #5]
 800f058:	f10b 0b01 	add.w	fp, fp, #1
 800f05c:	455b      	cmp	r3, fp
 800f05e:	d001      	beq.n	800f064 <wait_session_status+0xd4>
 800f060:	28ff      	cmp	r0, #255	@ 0xff
 800f062:	d0a3      	beq.n	800efac <wait_session_status+0x1c>
 800f064:	38ff      	subs	r0, #255	@ 0xff
 800f066:	bf18      	it	ne
 800f068:	2001      	movne	r0, #1
 800f06a:	b01d      	add	sp, #116	@ 0x74
 800f06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f070:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f074:	9304      	str	r3, [sp, #16]
 800f076:	4631      	mov	r1, r6
 800f078:	f104 0008 	add.w	r0, r4, #8
 800f07c:	f001 f86e 	bl	801015c <uxr_get_input_reliable_stream>
 800f080:	4680      	mov	r8, r0
 800f082:	b348      	cbz	r0, 800f0d8 <wait_session_status+0x148>
 800f084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f086:	9205      	str	r2, [sp, #20]
 800f088:	a80c      	add	r0, sp, #48	@ 0x30
 800f08a:	f7f9 ff79 	bl	8008f80 <ucdr_buffer_remaining>
 800f08e:	4603      	mov	r3, r0
 800f090:	f10d 001d 	add.w	r0, sp, #29
 800f094:	9000      	str	r0, [sp, #0]
 800f096:	9a05      	ldr	r2, [sp, #20]
 800f098:	9902      	ldr	r1, [sp, #8]
 800f09a:	4640      	mov	r0, r8
 800f09c:	f003 f8c0 	bl	8012220 <uxr_receive_reliable_message>
 800f0a0:	b1d0      	cbz	r0, 800f0d8 <wait_session_status+0x148>
 800f0a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d03a      	beq.n	800f120 <wait_session_status+0x190>
 800f0aa:	9f04      	ldr	r7, [sp, #16]
 800f0ac:	e00a      	b.n	800f0c4 <wait_session_status+0x134>
 800f0ae:	f04f 0302 	mov.w	r3, #2
 800f0b2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f0b6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f0ba:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f0be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f0c0:	f7ff fbec 	bl	800e89c <read_submessage_list>
 800f0c4:	a914      	add	r1, sp, #80	@ 0x50
 800f0c6:	2204      	movs	r2, #4
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	f003 f929 	bl	8012320 <uxr_next_input_reliable_buffer_available>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	a914      	add	r1, sp, #80	@ 0x50
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1ea      	bne.n	800f0ae <wait_session_status+0x11e>
 800f0d8:	9904      	ldr	r1, [sp, #16]
 800f0da:	4632      	mov	r2, r6
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f7ff fa59 	bl	800e594 <write_submessage_acknack.isra.0>
 800f0e2:	e76f      	b.n	800efc4 <wait_session_status+0x34>
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	f104 0008 	add.w	r0, r4, #8
 800f0ea:	f001 f82d 	bl	8010148 <uxr_get_input_best_effort_stream>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f43f af68 	beq.w	800efc4 <wait_session_status+0x34>
 800f0f4:	9902      	ldr	r1, [sp, #8]
 800f0f6:	f002 ffff 	bl	80120f8 <uxr_receive_best_effort_message>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f43f af62 	beq.w	800efc4 <wait_session_status+0x34>
 800f100:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f104:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f106:	a90c      	add	r1, sp, #48	@ 0x30
 800f108:	4620      	mov	r0, r4
 800f10a:	f7ff fbc7 	bl	800e89c <read_submessage_list>
 800f10e:	e759      	b.n	800efc4 <wait_session_status+0x34>
 800f110:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f112:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f116:	47a0      	blx	r4
 800f118:	2001      	movs	r0, #1
 800f11a:	b01d      	add	sp, #116	@ 0x74
 800f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f120:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f124:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f126:	a90c      	add	r1, sp, #48	@ 0x30
 800f128:	4620      	mov	r0, r4
 800f12a:	f7ff fbb7 	bl	800e89c <read_submessage_list>
 800f12e:	e7bc      	b.n	800f0aa <wait_session_status+0x11a>

0800f130 <uxr_delete_session_retries>:
 800f130:	b530      	push	{r4, r5, lr}
 800f132:	b08f      	sub	sp, #60	@ 0x3c
 800f134:	4604      	mov	r4, r0
 800f136:	460d      	mov	r5, r1
 800f138:	f000 fa2e 	bl	800f598 <uxr_session_header_offset>
 800f13c:	2300      	movs	r3, #0
 800f13e:	2210      	movs	r2, #16
 800f140:	9000      	str	r0, [sp, #0]
 800f142:	a902      	add	r1, sp, #8
 800f144:	a806      	add	r0, sp, #24
 800f146:	f7f9 fed9 	bl	8008efc <ucdr_init_buffer_origin_offset>
 800f14a:	a906      	add	r1, sp, #24
 800f14c:	4620      	mov	r0, r4
 800f14e:	f000 f973 	bl	800f438 <uxr_buffer_delete_session>
 800f152:	2200      	movs	r2, #0
 800f154:	4611      	mov	r1, r2
 800f156:	9b06      	ldr	r3, [sp, #24]
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 f9c7 	bl	800f4ec <uxr_stamp_session_header>
 800f15e:	a806      	add	r0, sp, #24
 800f160:	f7f9 ff0a 	bl	8008f78 <ucdr_buffer_length>
 800f164:	462b      	mov	r3, r5
 800f166:	4602      	mov	r2, r0
 800f168:	a902      	add	r1, sp, #8
 800f16a:	4620      	mov	r0, r4
 800f16c:	f7ff ff10 	bl	800ef90 <wait_session_status>
 800f170:	b118      	cbz	r0, 800f17a <uxr_delete_session_retries+0x4a>
 800f172:	7960      	ldrb	r0, [r4, #5]
 800f174:	fab0 f080 	clz	r0, r0
 800f178:	0940      	lsrs	r0, r0, #5
 800f17a:	b00f      	add	sp, #60	@ 0x3c
 800f17c:	bd30      	pop	{r4, r5, pc}
 800f17e:	bf00      	nop

0800f180 <uxr_create_session>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	f100 0b08 	add.w	fp, r0, #8
 800f188:	b0ab      	sub	sp, #172	@ 0xac
 800f18a:	4604      	mov	r4, r0
 800f18c:	4658      	mov	r0, fp
 800f18e:	f000 ff2b 	bl	800ffe8 <uxr_reset_stream_storage>
 800f192:	4620      	mov	r0, r4
 800f194:	f000 fa00 	bl	800f598 <uxr_session_header_offset>
 800f198:	2300      	movs	r3, #0
 800f19a:	9000      	str	r0, [sp, #0]
 800f19c:	221c      	movs	r2, #28
 800f19e:	a90b      	add	r1, sp, #44	@ 0x2c
 800f1a0:	a812      	add	r0, sp, #72	@ 0x48
 800f1a2:	f7f9 feab 	bl	8008efc <ucdr_init_buffer_origin_offset>
 800f1a6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f1a8:	8a1a      	ldrh	r2, [r3, #16]
 800f1aa:	3a04      	subs	r2, #4
 800f1ac:	b292      	uxth	r2, r2
 800f1ae:	a912      	add	r1, sp, #72	@ 0x48
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 f917 	bl	800f3e4 <uxr_buffer_create_session>
 800f1b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 f983 	bl	800f4c4 <uxr_stamp_create_session_header>
 800f1be:	a812      	add	r0, sp, #72	@ 0x48
 800f1c0:	f7f9 feda 	bl	8008f78 <ucdr_buffer_length>
 800f1c4:	23ff      	movs	r3, #255	@ 0xff
 800f1c6:	7163      	strb	r3, [r4, #5]
 800f1c8:	230a      	movs	r3, #10
 800f1ca:	46da      	mov	sl, fp
 800f1cc:	9303      	str	r3, [sp, #12]
 800f1ce:	4683      	mov	fp, r0
 800f1d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f1d2:	465a      	mov	r2, fp
 800f1d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f1d8:	a90b      	add	r1, sp, #44	@ 0x2c
 800f1da:	47a8      	blx	r5
 800f1dc:	f001 f824 	bl	8010228 <uxr_millis>
 800f1e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	e009      	b.n	800f1fc <uxr_create_session+0x7c>
 800f1e8:	f001 f81e 	bl	8010228 <uxr_millis>
 800f1ec:	1b40      	subs	r0, r0, r5
 800f1ee:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	7962      	ldrb	r2, [r4, #5]
 800f1f6:	dd38      	ble.n	800f26a <uxr_create_session+0xea>
 800f1f8:	2aff      	cmp	r2, #255	@ 0xff
 800f1fa:	d13c      	bne.n	800f276 <uxr_create_session+0xf6>
 800f1fc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f1fe:	a907      	add	r1, sp, #28
 800f200:	6896      	ldr	r6, [r2, #8]
 800f202:	6810      	ldr	r0, [r2, #0]
 800f204:	aa08      	add	r2, sp, #32
 800f206:	47b0      	blx	r6
 800f208:	2800      	cmp	r0, #0
 800f20a:	d0ed      	beq.n	800f1e8 <uxr_create_session+0x68>
 800f20c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f210:	a81a      	add	r0, sp, #104	@ 0x68
 800f212:	f7f9 fe85 	bl	8008f20 <ucdr_init_buffer>
 800f216:	2600      	movs	r6, #0
 800f218:	f10d 031a 	add.w	r3, sp, #26
 800f21c:	aa06      	add	r2, sp, #24
 800f21e:	a91a      	add	r1, sp, #104	@ 0x68
 800f220:	4620      	mov	r0, r4
 800f222:	f88d 6018 	strb.w	r6, [sp, #24]
 800f226:	f000 f975 	bl	800f514 <uxr_read_session_header>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d0dc      	beq.n	800f1e8 <uxr_create_session+0x68>
 800f22e:	4631      	mov	r1, r6
 800f230:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f234:	f000 fea4 	bl	800ff80 <uxr_stream_id_from_raw>
 800f238:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f23c:	2e01      	cmp	r6, #1
 800f23e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f242:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f246:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f24a:	d053      	beq.n	800f2f4 <uxr_create_session+0x174>
 800f24c:	2e02      	cmp	r6, #2
 800f24e:	d018      	beq.n	800f282 <uxr_create_session+0x102>
 800f250:	2e00      	cmp	r6, #0
 800f252:	d1c9      	bne.n	800f1e8 <uxr_create_session+0x68>
 800f254:	4631      	mov	r1, r6
 800f256:	4630      	mov	r0, r6
 800f258:	f000 fe92 	bl	800ff80 <uxr_stream_id_from_raw>
 800f25c:	a91a      	add	r1, sp, #104	@ 0x68
 800f25e:	4602      	mov	r2, r0
 800f260:	900a      	str	r0, [sp, #40]	@ 0x28
 800f262:	4620      	mov	r0, r4
 800f264:	f7ff fb1a 	bl	800e89c <read_submessage_list>
 800f268:	e7be      	b.n	800f1e8 <uxr_create_session+0x68>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	9303      	str	r3, [sp, #12]
 800f270:	d001      	beq.n	800f276 <uxr_create_session+0xf6>
 800f272:	2aff      	cmp	r2, #255	@ 0xff
 800f274:	d0ac      	beq.n	800f1d0 <uxr_create_session+0x50>
 800f276:	2a00      	cmp	r2, #0
 800f278:	d051      	beq.n	800f31e <uxr_create_session+0x19e>
 800f27a:	2000      	movs	r0, #0
 800f27c:	b02b      	add	sp, #172	@ 0xac
 800f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f282:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f286:	9304      	str	r3, [sp, #16]
 800f288:	4639      	mov	r1, r7
 800f28a:	4650      	mov	r0, sl
 800f28c:	f000 ff66 	bl	801015c <uxr_get_input_reliable_stream>
 800f290:	4680      	mov	r8, r0
 800f292:	b348      	cbz	r0, 800f2e8 <uxr_create_session+0x168>
 800f294:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f296:	9205      	str	r2, [sp, #20]
 800f298:	a81a      	add	r0, sp, #104	@ 0x68
 800f29a:	f7f9 fe71 	bl	8008f80 <ucdr_buffer_remaining>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	f10d 0019 	add.w	r0, sp, #25
 800f2a4:	9000      	str	r0, [sp, #0]
 800f2a6:	9a05      	ldr	r2, [sp, #20]
 800f2a8:	4649      	mov	r1, r9
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	f002 ffb8 	bl	8012220 <uxr_receive_reliable_message>
 800f2b0:	b1d0      	cbz	r0, 800f2e8 <uxr_create_session+0x168>
 800f2b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d038      	beq.n	800f32c <uxr_create_session+0x1ac>
 800f2ba:	9e04      	ldr	r6, [sp, #16]
 800f2bc:	e00a      	b.n	800f2d4 <uxr_create_session+0x154>
 800f2be:	f04f 0302 	mov.w	r3, #2
 800f2c2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f2c6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f2ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2d0:	f7ff fae4 	bl	800e89c <read_submessage_list>
 800f2d4:	a922      	add	r1, sp, #136	@ 0x88
 800f2d6:	2204      	movs	r2, #4
 800f2d8:	4640      	mov	r0, r8
 800f2da:	f003 f821 	bl	8012320 <uxr_next_input_reliable_buffer_available>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	a922      	add	r1, sp, #136	@ 0x88
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1ea      	bne.n	800f2be <uxr_create_session+0x13e>
 800f2e8:	9904      	ldr	r1, [sp, #16]
 800f2ea:	463a      	mov	r2, r7
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7ff f951 	bl	800e594 <write_submessage_acknack.isra.0>
 800f2f2:	e779      	b.n	800f1e8 <uxr_create_session+0x68>
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	4650      	mov	r0, sl
 800f2f8:	f000 ff26 	bl	8010148 <uxr_get_input_best_effort_stream>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f43f af73 	beq.w	800f1e8 <uxr_create_session+0x68>
 800f302:	4649      	mov	r1, r9
 800f304:	f002 fef8 	bl	80120f8 <uxr_receive_best_effort_message>
 800f308:	2800      	cmp	r0, #0
 800f30a:	f43f af6d 	beq.w	800f1e8 <uxr_create_session+0x68>
 800f30e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f314:	a91a      	add	r1, sp, #104	@ 0x68
 800f316:	4620      	mov	r0, r4
 800f318:	f7ff fac0 	bl	800e89c <read_submessage_list>
 800f31c:	e764      	b.n	800f1e8 <uxr_create_session+0x68>
 800f31e:	4650      	mov	r0, sl
 800f320:	f000 fe62 	bl	800ffe8 <uxr_reset_stream_storage>
 800f324:	2001      	movs	r0, #1
 800f326:	b02b      	add	sp, #172	@ 0xac
 800f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f330:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f332:	a91a      	add	r1, sp, #104	@ 0x68
 800f334:	4620      	mov	r0, r4
 800f336:	f7ff fab1 	bl	800e89c <read_submessage_list>
 800f33a:	e7be      	b.n	800f2ba <uxr_create_session+0x13a>

0800f33c <uxr_prepare_stream_to_write_submessage>:
 800f33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	4682      	mov	sl, r0
 800f344:	4610      	mov	r0, r2
 800f346:	4615      	mov	r5, r2
 800f348:	461e      	mov	r6, r3
 800f34a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f34e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f352:	9101      	str	r1, [sp, #4]
 800f354:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f358:	f000 ff60 	bl	801021c <uxr_submessage_padding>
 800f35c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f360:	f105 0904 	add.w	r9, r5, #4
 800f364:	2b01      	cmp	r3, #1
 800f366:	4481      	add	r9, r0
 800f368:	d01d      	beq.n	800f3a6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d116      	bne.n	800f39c <uxr_prepare_stream_to_write_submessage+0x60>
 800f36e:	4621      	mov	r1, r4
 800f370:	f10a 0008 	add.w	r0, sl, #8
 800f374:	f000 fede 	bl	8010134 <uxr_get_output_reliable_stream>
 800f378:	4604      	mov	r4, r0
 800f37a:	b158      	cbz	r0, 800f394 <uxr_prepare_stream_to_write_submessage+0x58>
 800f37c:	4649      	mov	r1, r9
 800f37e:	4632      	mov	r2, r6
 800f380:	f003 f98a 	bl	8012698 <uxr_prepare_reliable_buffer_to_write>
 800f384:	4604      	mov	r4, r0
 800f386:	b12c      	cbz	r4, 800f394 <uxr_prepare_stream_to_write_submessage+0x58>
 800f388:	4643      	mov	r3, r8
 800f38a:	b2aa      	uxth	r2, r5
 800f38c:	4639      	mov	r1, r7
 800f38e:	4630      	mov	r0, r6
 800f390:	f000 ff04 	bl	801019c <uxr_buffer_submessage_header>
 800f394:	4620      	mov	r0, r4
 800f396:	b002      	add	sp, #8
 800f398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39c:	2400      	movs	r4, #0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	b002      	add	sp, #8
 800f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	f10a 0008 	add.w	r0, sl, #8
 800f3ac:	f000 feba 	bl	8010124 <uxr_get_output_best_effort_stream>
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d0ee      	beq.n	800f394 <uxr_prepare_stream_to_write_submessage+0x58>
 800f3b6:	4649      	mov	r1, r9
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	f003 f89d 	bl	80124f8 <uxr_prepare_best_effort_buffer_to_write>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	e7e1      	b.n	800f386 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f3c2:	bf00      	nop

0800f3c4 <uxr_init_session_info>:
 800f3c4:	0e13      	lsrs	r3, r2, #24
 800f3c6:	7043      	strb	r3, [r0, #1]
 800f3c8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f3cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f3d0:	7001      	strb	r1, [r0, #0]
 800f3d2:	70c3      	strb	r3, [r0, #3]
 800f3d4:	2109      	movs	r1, #9
 800f3d6:	23ff      	movs	r3, #255	@ 0xff
 800f3d8:	f880 c002 	strb.w	ip, [r0, #2]
 800f3dc:	7102      	strb	r2, [r0, #4]
 800f3de:	80c1      	strh	r1, [r0, #6]
 800f3e0:	7143      	strb	r3, [r0, #5]
 800f3e2:	4770      	bx	lr

0800f3e4 <uxr_buffer_create_session>:
 800f3e4:	b530      	push	{r4, r5, lr}
 800f3e6:	b089      	sub	sp, #36	@ 0x24
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	4d12      	ldr	r5, [pc, #72]	@ (800f434 <uxr_buffer_create_session+0x50>)
 800f3ec:	9307      	str	r3, [sp, #28]
 800f3ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	80c2      	strh	r2, [r0, #6]
 800f3f8:	f88d 2004 	strb.w	r2, [sp, #4]
 800f3fc:	682a      	ldr	r2, [r5, #0]
 800f3fe:	9200      	str	r2, [sp, #0]
 800f400:	88aa      	ldrh	r2, [r5, #4]
 800f402:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f406:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f40a:	9202      	str	r2, [sp, #8]
 800f40c:	460c      	mov	r4, r1
 800f40e:	7802      	ldrb	r2, [r0, #0]
 800f410:	9303      	str	r3, [sp, #12]
 800f412:	4619      	mov	r1, r3
 800f414:	f88d 200c 	strb.w	r2, [sp, #12]
 800f418:	4620      	mov	r0, r4
 800f41a:	2210      	movs	r2, #16
 800f41c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f420:	9306      	str	r3, [sp, #24]
 800f422:	f000 febb 	bl	801019c <uxr_buffer_submessage_header>
 800f426:	4669      	mov	r1, sp
 800f428:	4620      	mov	r0, r4
 800f42a:	f001 fccf 	bl	8010dcc <uxr_serialize_CREATE_CLIENT_Payload>
 800f42e:	b009      	add	sp, #36	@ 0x24
 800f430:	bd30      	pop	{r4, r5, pc}
 800f432:	bf00      	nop
 800f434:	08014318 	.word	0x08014318

0800f438 <uxr_buffer_delete_session>:
 800f438:	b510      	push	{r4, lr}
 800f43a:	4b0c      	ldr	r3, [pc, #48]	@ (800f46c <uxr_buffer_delete_session+0x34>)
 800f43c:	b082      	sub	sp, #8
 800f43e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f442:	f8ad c006 	strh.w	ip, [sp, #6]
 800f446:	460c      	mov	r4, r1
 800f448:	2202      	movs	r2, #2
 800f44a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f44e:	80c2      	strh	r2, [r0, #6]
 800f450:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f454:	2204      	movs	r2, #4
 800f456:	2300      	movs	r3, #0
 800f458:	2103      	movs	r1, #3
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 fe9e 	bl	801019c <uxr_buffer_submessage_header>
 800f460:	a901      	add	r1, sp, #4
 800f462:	4620      	mov	r0, r4
 800f464:	f001 fd58 	bl	8010f18 <uxr_serialize_DELETE_Payload>
 800f468:	b002      	add	sp, #8
 800f46a:	bd10      	pop	{r4, pc}
 800f46c:	08014318 	.word	0x08014318

0800f470 <uxr_read_create_session_status>:
 800f470:	b510      	push	{r4, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	4604      	mov	r4, r0
 800f476:	4608      	mov	r0, r1
 800f478:	a901      	add	r1, sp, #4
 800f47a:	f001 fd5d 	bl	8010f38 <uxr_deserialize_STATUS_AGENT_Payload>
 800f47e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f482:	7163      	strb	r3, [r4, #5]
 800f484:	b008      	add	sp, #32
 800f486:	bd10      	pop	{r4, pc}

0800f488 <uxr_read_delete_session_status>:
 800f488:	b510      	push	{r4, lr}
 800f48a:	4604      	mov	r4, r0
 800f48c:	b084      	sub	sp, #16
 800f48e:	4608      	mov	r0, r1
 800f490:	a902      	add	r1, sp, #8
 800f492:	f001 fd81 	bl	8010f98 <uxr_deserialize_STATUS_Payload>
 800f496:	88e3      	ldrh	r3, [r4, #6]
 800f498:	2b02      	cmp	r3, #2
 800f49a:	d001      	beq.n	800f4a0 <uxr_read_delete_session_status+0x18>
 800f49c:	b004      	add	sp, #16
 800f49e:	bd10      	pop	{r4, pc}
 800f4a0:	f10d 000a 	add.w	r0, sp, #10
 800f4a4:	f7fe fecc 	bl	800e240 <uxr_object_id_from_raw>
 800f4a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f4ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f4b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	bf04      	itt	eq
 800f4ba:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f4be:	7163      	strbeq	r3, [r4, #5]
 800f4c0:	b004      	add	sp, #16
 800f4c2:	bd10      	pop	{r4, pc}

0800f4c4 <uxr_stamp_create_session_header>:
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	2208      	movs	r2, #8
 800f4c8:	b08a      	sub	sp, #40	@ 0x28
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	eb0d 0002 	add.w	r0, sp, r2
 800f4d0:	f7f9 fd26 	bl	8008f20 <ucdr_init_buffer>
 800f4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d8:	9400      	str	r4, [sp, #0]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	461a      	mov	r2, r3
 800f4de:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f4e2:	a802      	add	r0, sp, #8
 800f4e4:	f000 ff00 	bl	80102e8 <uxr_serialize_message_header>
 800f4e8:	b00a      	add	sp, #40	@ 0x28
 800f4ea:	bd10      	pop	{r4, pc}

0800f4ec <uxr_stamp_session_header>:
 800f4ec:	b530      	push	{r4, r5, lr}
 800f4ee:	b08d      	sub	sp, #52	@ 0x34
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	460d      	mov	r5, r1
 800f4f4:	9203      	str	r2, [sp, #12]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	a804      	add	r0, sp, #16
 800f4fa:	2208      	movs	r2, #8
 800f4fc:	f7f9 fd10 	bl	8008f20 <ucdr_init_buffer>
 800f500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f504:	9b03      	ldr	r3, [sp, #12]
 800f506:	9400      	str	r4, [sp, #0]
 800f508:	462a      	mov	r2, r5
 800f50a:	a804      	add	r0, sp, #16
 800f50c:	f000 feec 	bl	80102e8 <uxr_serialize_message_header>
 800f510:	b00d      	add	sp, #52	@ 0x34
 800f512:	bd30      	pop	{r4, r5, pc}

0800f514 <uxr_read_session_header>:
 800f514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f518:	4607      	mov	r7, r0
 800f51a:	b084      	sub	sp, #16
 800f51c:	4608      	mov	r0, r1
 800f51e:	460c      	mov	r4, r1
 800f520:	4615      	mov	r5, r2
 800f522:	461e      	mov	r6, r3
 800f524:	f7f9 fd2c 	bl	8008f80 <ucdr_buffer_remaining>
 800f528:	2808      	cmp	r0, #8
 800f52a:	d803      	bhi.n	800f534 <uxr_read_session_header+0x20>
 800f52c:	2000      	movs	r0, #0
 800f52e:	b004      	add	sp, #16
 800f530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f534:	f10d 080c 	add.w	r8, sp, #12
 800f538:	4633      	mov	r3, r6
 800f53a:	462a      	mov	r2, r5
 800f53c:	f8cd 8000 	str.w	r8, [sp]
 800f540:	4620      	mov	r0, r4
 800f542:	f10d 010b 	add.w	r1, sp, #11
 800f546:	f000 feed 	bl	8010324 <uxr_deserialize_message_header>
 800f54a:	783a      	ldrb	r2, [r7, #0]
 800f54c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f550:	4293      	cmp	r3, r2
 800f552:	d1eb      	bne.n	800f52c <uxr_read_session_header+0x18>
 800f554:	061b      	lsls	r3, r3, #24
 800f556:	d41c      	bmi.n	800f592 <uxr_read_session_header+0x7e>
 800f558:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f55c:	787b      	ldrb	r3, [r7, #1]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d003      	beq.n	800f56a <uxr_read_session_header+0x56>
 800f562:	2001      	movs	r0, #1
 800f564:	f080 0001 	eor.w	r0, r0, #1
 800f568:	e7e1      	b.n	800f52e <uxr_read_session_header+0x1a>
 800f56a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f56e:	78bb      	ldrb	r3, [r7, #2]
 800f570:	429a      	cmp	r2, r3
 800f572:	f107 0102 	add.w	r1, r7, #2
 800f576:	d1f4      	bne.n	800f562 <uxr_read_session_header+0x4e>
 800f578:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f57c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f580:	429a      	cmp	r2, r3
 800f582:	d1ee      	bne.n	800f562 <uxr_read_session_header+0x4e>
 800f584:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f588:	784b      	ldrb	r3, [r1, #1]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d1e9      	bne.n	800f562 <uxr_read_session_header+0x4e>
 800f58e:	2000      	movs	r0, #0
 800f590:	e7e8      	b.n	800f564 <uxr_read_session_header+0x50>
 800f592:	2001      	movs	r0, #1
 800f594:	e7cb      	b.n	800f52e <uxr_read_session_header+0x1a>
 800f596:	bf00      	nop

0800f598 <uxr_session_header_offset>:
 800f598:	f990 3000 	ldrsb.w	r3, [r0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	bfac      	ite	ge
 800f5a0:	2008      	movge	r0, #8
 800f5a2:	2004      	movlt	r0, #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop

0800f5a8 <uxr_init_base_object_request>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	88c3      	ldrh	r3, [r0, #6]
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f5b2:	9101      	str	r1, [sp, #4]
 800f5b4:	f1a3 010a 	sub.w	r1, r3, #10
 800f5b8:	b289      	uxth	r1, r1
 800f5ba:	42a1      	cmp	r1, r4
 800f5bc:	d80e      	bhi.n	800f5dc <uxr_init_base_object_request+0x34>
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b29c      	uxth	r4, r3
 800f5c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	80c4      	strh	r4, [r0, #6]
 800f5ca:	9801      	ldr	r0, [sp, #4]
 800f5cc:	7011      	strb	r1, [r2, #0]
 800f5ce:	7053      	strb	r3, [r2, #1]
 800f5d0:	1c91      	adds	r1, r2, #2
 800f5d2:	f7fe fe49 	bl	800e268 <uxr_object_id_to_raw>
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	b002      	add	sp, #8
 800f5da:	bd10      	pop	{r4, pc}
 800f5dc:	230a      	movs	r3, #10
 800f5de:	2100      	movs	r1, #0
 800f5e0:	461c      	mov	r4, r3
 800f5e2:	e7f1      	b.n	800f5c8 <uxr_init_base_object_request+0x20>

0800f5e4 <uxr_parse_base_object_request>:
 800f5e4:	b570      	push	{r4, r5, r6, lr}
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	3002      	adds	r0, #2
 800f5ea:	460d      	mov	r5, r1
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	f7fe fe27 	bl	800e240 <uxr_object_id_from_raw>
 800f5f2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f5f6:	8028      	strh	r0, [r5, #0]
 800f5f8:	806b      	strh	r3, [r5, #2]
 800f5fa:	7822      	ldrb	r2, [r4, #0]
 800f5fc:	7863      	ldrb	r3, [r4, #1]
 800f5fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f602:	8033      	strh	r3, [r6, #0]
 800f604:	bd70      	pop	{r4, r5, r6, pc}
 800f606:	bf00      	nop

0800f608 <uxr_init_framing_io>:
 800f608:	2300      	movs	r3, #0
 800f60a:	7041      	strb	r1, [r0, #1]
 800f60c:	7003      	strb	r3, [r0, #0]
 800f60e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop

0800f614 <uxr_write_framed_msg>:
 800f614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	4617      	mov	r7, r2
 800f61a:	7842      	ldrb	r2, [r0, #1]
 800f61c:	b083      	sub	sp, #12
 800f61e:	460e      	mov	r6, r1
 800f620:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f624:	469a      	mov	sl, r3
 800f626:	2901      	cmp	r1, #1
 800f628:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f62c:	4604      	mov	r4, r0
 800f62e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f632:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f636:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f63a:	f240 8137 	bls.w	800f8ac <uxr_write_framed_msg+0x298>
 800f63e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f642:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f646:	2901      	cmp	r1, #1
 800f648:	f04f 0202 	mov.w	r2, #2
 800f64c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f650:	f240 808f 	bls.w	800f772 <uxr_write_framed_msg+0x15e>
 800f654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f656:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f65a:	b2dd      	uxtb	r5, r3
 800f65c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f660:	2203      	movs	r2, #3
 800f662:	2901      	cmp	r1, #1
 800f664:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f668:	f240 809a 	bls.w	800f7a0 <uxr_write_framed_msg+0x18c>
 800f66c:	18a1      	adds	r1, r4, r2
 800f66e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f670:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f674:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f678:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f67c:	3201      	adds	r2, #1
 800f67e:	2801      	cmp	r0, #1
 800f680:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f684:	f240 80a0 	bls.w	800f7c8 <uxr_write_framed_msg+0x1b4>
 800f688:	18a0      	adds	r0, r4, r2
 800f68a:	3201      	adds	r2, #1
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f692:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 80a9 	beq.w	800f7ee <uxr_write_framed_msg+0x1da>
 800f69c:	f04f 0900 	mov.w	r9, #0
 800f6a0:	46c8      	mov	r8, r9
 800f6a2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f6a6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f6aa:	2901      	cmp	r1, #1
 800f6ac:	f240 80c3 	bls.w	800f836 <uxr_write_framed_msg+0x222>
 800f6b0:	2a29      	cmp	r2, #41	@ 0x29
 800f6b2:	f200 809f 	bhi.w	800f7f4 <uxr_write_framed_msg+0x1e0>
 800f6b6:	18a1      	adds	r1, r4, r2
 800f6b8:	3201      	adds	r2, #1
 800f6ba:	b2d2      	uxtb	r2, r2
 800f6bc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f6c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f6c4:	ea89 0303 	eor.w	r3, r9, r3
 800f6c8:	498c      	ldr	r1, [pc, #560]	@ (800f8fc <uxr_write_framed_msg+0x2e8>)
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	f108 0801 	add.w	r8, r8, #1
 800f6d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f6d4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f6d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6da:	4543      	cmp	r3, r8
 800f6dc:	d8e1      	bhi.n	800f6a2 <uxr_write_framed_msg+0x8e>
 800f6de:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f6e2:	fa5f f889 	uxtb.w	r8, r9
 800f6e6:	9301      	str	r3, [sp, #4]
 800f6e8:	f04f 0900 	mov.w	r9, #0
 800f6ec:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f6f0:	fa5f f18a 	uxtb.w	r1, sl
 800f6f4:	2901      	cmp	r1, #1
 800f6f6:	d921      	bls.n	800f73c <uxr_write_framed_msg+0x128>
 800f6f8:	2a29      	cmp	r2, #41	@ 0x29
 800f6fa:	f240 80af 	bls.w	800f85c <uxr_write_framed_msg+0x248>
 800f6fe:	2500      	movs	r5, #0
 800f700:	e000      	b.n	800f704 <uxr_write_framed_msg+0xf0>
 800f702:	b160      	cbz	r0, 800f71e <uxr_write_framed_msg+0x10a>
 800f704:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f708:	1b52      	subs	r2, r2, r5
 800f70a:	465b      	mov	r3, fp
 800f70c:	4421      	add	r1, r4
 800f70e:	4638      	mov	r0, r7
 800f710:	47b0      	blx	r6
 800f712:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f716:	4405      	add	r5, r0
 800f718:	4295      	cmp	r5, r2
 800f71a:	d3f2      	bcc.n	800f702 <uxr_write_framed_msg+0xee>
 800f71c:	d003      	beq.n	800f726 <uxr_write_framed_msg+0x112>
 800f71e:	2000      	movs	r0, #0
 800f720:	b003      	add	sp, #12
 800f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f726:	fa5f f18a 	uxtb.w	r1, sl
 800f72a:	f04f 0300 	mov.w	r3, #0
 800f72e:	2901      	cmp	r1, #1
 800f730:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f734:	f04f 0200 	mov.w	r2, #0
 800f738:	f200 8090 	bhi.w	800f85c <uxr_write_framed_msg+0x248>
 800f73c:	1c51      	adds	r1, r2, #1
 800f73e:	b2c9      	uxtb	r1, r1
 800f740:	2929      	cmp	r1, #41	@ 0x29
 800f742:	d8dc      	bhi.n	800f6fe <uxr_write_framed_msg+0xea>
 800f744:	18a5      	adds	r5, r4, r2
 800f746:	4421      	add	r1, r4
 800f748:	3202      	adds	r2, #2
 800f74a:	f088 0820 	eor.w	r8, r8, #32
 800f74e:	4648      	mov	r0, r9
 800f750:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f754:	b2d2      	uxtb	r2, r2
 800f756:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f75a:	f04f 0901 	mov.w	r9, #1
 800f75e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f762:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f766:	2800      	cmp	r0, #0
 800f768:	f040 8085 	bne.w	800f876 <uxr_write_framed_msg+0x262>
 800f76c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f770:	e7bc      	b.n	800f6ec <uxr_write_framed_msg+0xd8>
 800f772:	4611      	mov	r1, r2
 800f774:	f04f 0c03 	mov.w	ip, #3
 800f778:	2204      	movs	r2, #4
 800f77a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f77c:	4421      	add	r1, r4
 800f77e:	b2dd      	uxtb	r5, r3
 800f780:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f784:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f788:	44a4      	add	ip, r4
 800f78a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f78e:	f080 0020 	eor.w	r0, r0, #32
 800f792:	2901      	cmp	r1, #1
 800f794:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f798:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f79c:	f63f af66 	bhi.w	800f66c <uxr_write_framed_msg+0x58>
 800f7a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7a2:	18a0      	adds	r0, r4, r2
 800f7a4:	f085 0520 	eor.w	r5, r5, #32
 800f7a8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f7ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f7b0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f7b4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f7b8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f7bc:	3202      	adds	r2, #2
 800f7be:	2801      	cmp	r0, #1
 800f7c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f7c4:	f63f af60 	bhi.w	800f688 <uxr_write_framed_msg+0x74>
 800f7c8:	1c50      	adds	r0, r2, #1
 800f7ca:	18a5      	adds	r5, r4, r2
 800f7cc:	fa54 f080 	uxtab	r0, r4, r0
 800f7d0:	3202      	adds	r2, #2
 800f7d2:	f081 0120 	eor.w	r1, r1, #32
 800f7d6:	b2d2      	uxtb	r2, r2
 800f7d8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f7dc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f7e0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f7e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f47f af57 	bne.w	800f69c <uxr_write_framed_msg+0x88>
 800f7ee:	9301      	str	r3, [sp, #4]
 800f7f0:	4698      	mov	r8, r3
 800f7f2:	e779      	b.n	800f6e8 <uxr_write_framed_msg+0xd4>
 800f7f4:	2500      	movs	r5, #0
 800f7f6:	e001      	b.n	800f7fc <uxr_write_framed_msg+0x1e8>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d090      	beq.n	800f71e <uxr_write_framed_msg+0x10a>
 800f7fc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f800:	1b52      	subs	r2, r2, r5
 800f802:	465b      	mov	r3, fp
 800f804:	4421      	add	r1, r4
 800f806:	4638      	mov	r0, r7
 800f808:	47b0      	blx	r6
 800f80a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f80e:	4405      	add	r5, r0
 800f810:	4295      	cmp	r5, r2
 800f812:	d3f1      	bcc.n	800f7f8 <uxr_write_framed_msg+0x1e4>
 800f814:	d183      	bne.n	800f71e <uxr_write_framed_msg+0x10a>
 800f816:	f04f 0300 	mov.w	r3, #0
 800f81a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f81e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f820:	4543      	cmp	r3, r8
 800f822:	d964      	bls.n	800f8ee <uxr_write_framed_msg+0x2da>
 800f824:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f828:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f82c:	2901      	cmp	r1, #1
 800f82e:	f04f 0200 	mov.w	r2, #0
 800f832:	f63f af3d 	bhi.w	800f6b0 <uxr_write_framed_msg+0x9c>
 800f836:	1c51      	adds	r1, r2, #1
 800f838:	b2c9      	uxtb	r1, r1
 800f83a:	2929      	cmp	r1, #41	@ 0x29
 800f83c:	d8da      	bhi.n	800f7f4 <uxr_write_framed_msg+0x1e0>
 800f83e:	18a0      	adds	r0, r4, r2
 800f840:	4421      	add	r1, r4
 800f842:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f846:	3202      	adds	r2, #2
 800f848:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f84c:	b2d2      	uxtb	r2, r2
 800f84e:	f083 0020 	eor.w	r0, r3, #32
 800f852:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f856:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f85a:	e733      	b.n	800f6c4 <uxr_write_framed_msg+0xb0>
 800f85c:	18a1      	adds	r1, r4, r2
 800f85e:	3201      	adds	r2, #1
 800f860:	4648      	mov	r0, r9
 800f862:	b2d2      	uxtb	r2, r2
 800f864:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f868:	f04f 0901 	mov.w	r9, #1
 800f86c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f870:	2800      	cmp	r0, #0
 800f872:	f43f af7b 	beq.w	800f76c <uxr_write_framed_msg+0x158>
 800f876:	2500      	movs	r5, #0
 800f878:	e002      	b.n	800f880 <uxr_write_framed_msg+0x26c>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	f43f af4f 	beq.w	800f71e <uxr_write_framed_msg+0x10a>
 800f880:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f884:	1b52      	subs	r2, r2, r5
 800f886:	465b      	mov	r3, fp
 800f888:	4421      	add	r1, r4
 800f88a:	4638      	mov	r0, r7
 800f88c:	47b0      	blx	r6
 800f88e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f892:	4405      	add	r5, r0
 800f894:	4295      	cmp	r5, r2
 800f896:	d3f0      	bcc.n	800f87a <uxr_write_framed_msg+0x266>
 800f898:	f47f af41 	bne.w	800f71e <uxr_write_framed_msg+0x10a>
 800f89c:	2300      	movs	r3, #0
 800f89e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f8a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8a4:	b298      	uxth	r0, r3
 800f8a6:	b003      	add	sp, #12
 800f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ac:	217d      	movs	r1, #125	@ 0x7d
 800f8ae:	f082 0220 	eor.w	r2, r2, #32
 800f8b2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f8b6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f8ba:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f8be:	2901      	cmp	r1, #1
 800f8c0:	f04f 0203 	mov.w	r2, #3
 800f8c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f8c8:	d804      	bhi.n	800f8d4 <uxr_write_framed_msg+0x2c0>
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	f04f 0c04 	mov.w	ip, #4
 800f8d0:	2205      	movs	r2, #5
 800f8d2:	e752      	b.n	800f77a <uxr_write_framed_msg+0x166>
 800f8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8d6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f8da:	b2dd      	uxtb	r5, r3
 800f8dc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f8e0:	2204      	movs	r2, #4
 800f8e2:	2901      	cmp	r1, #1
 800f8e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f8e8:	f63f aec0 	bhi.w	800f66c <uxr_write_framed_msg+0x58>
 800f8ec:	e758      	b.n	800f7a0 <uxr_write_framed_msg+0x18c>
 800f8ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f8f2:	fa5f f889 	uxtb.w	r8, r9
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	e6f5      	b.n	800f6e8 <uxr_write_framed_msg+0xd4>
 800f8fc:	08014bac 	.word	0x08014bac

0800f900 <uxr_framing_read_transport>:
 800f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f904:	4604      	mov	r4, r0
 800f906:	b083      	sub	sp, #12
 800f908:	461f      	mov	r7, r3
 800f90a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f90e:	4689      	mov	r9, r1
 800f910:	4692      	mov	sl, r2
 800f912:	f000 fc89 	bl	8010228 <uxr_millis>
 800f916:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f91a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f91e:	42b3      	cmp	r3, r6
 800f920:	4680      	mov	r8, r0
 800f922:	d061      	beq.n	800f9e8 <uxr_framing_read_transport+0xe8>
 800f924:	d81c      	bhi.n	800f960 <uxr_framing_read_transport+0x60>
 800f926:	1e75      	subs	r5, r6, #1
 800f928:	1aed      	subs	r5, r5, r3
 800f92a:	b2ed      	uxtb	r5, r5
 800f92c:	2600      	movs	r6, #0
 800f92e:	455d      	cmp	r5, fp
 800f930:	d81f      	bhi.n	800f972 <uxr_framing_read_transport+0x72>
 800f932:	19ab      	adds	r3, r5, r6
 800f934:	455b      	cmp	r3, fp
 800f936:	bf84      	itt	hi
 800f938:	ebab 0605 	subhi.w	r6, fp, r5
 800f93c:	b2f6      	uxtbhi	r6, r6
 800f93e:	b9ed      	cbnz	r5, 800f97c <uxr_framing_read_transport+0x7c>
 800f940:	f04f 0b00 	mov.w	fp, #0
 800f944:	f000 fc70 	bl	8010228 <uxr_millis>
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	eba0 0808 	sub.w	r8, r0, r8
 800f94e:	eba3 0308 	sub.w	r3, r3, r8
 800f952:	4658      	mov	r0, fp
 800f954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f958:	603b      	str	r3, [r7, #0]
 800f95a:	b003      	add	sp, #12
 800f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f960:	2e00      	cmp	r6, #0
 800f962:	d049      	beq.n	800f9f8 <uxr_framing_read_transport+0xf8>
 800f964:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f968:	b2ed      	uxtb	r5, r5
 800f96a:	3e01      	subs	r6, #1
 800f96c:	455d      	cmp	r5, fp
 800f96e:	b2f6      	uxtb	r6, r6
 800f970:	d9df      	bls.n	800f932 <uxr_framing_read_transport+0x32>
 800f972:	fa5f f58b 	uxtb.w	r5, fp
 800f976:	2600      	movs	r6, #0
 800f978:	2d00      	cmp	r5, #0
 800f97a:	d0e1      	beq.n	800f940 <uxr_framing_read_transport+0x40>
 800f97c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f980:	3102      	adds	r1, #2
 800f982:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	4421      	add	r1, r4
 800f98a:	462a      	mov	r2, r5
 800f98c:	4650      	mov	r0, sl
 800f98e:	47c8      	blx	r9
 800f990:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f994:	4a1a      	ldr	r2, [pc, #104]	@ (800fa00 <uxr_framing_read_transport+0x100>)
 800f996:	4403      	add	r3, r0
 800f998:	0859      	lsrs	r1, r3, #1
 800f99a:	fba2 2101 	umull	r2, r1, r2, r1
 800f99e:	0889      	lsrs	r1, r1, #2
 800f9a0:	222a      	movs	r2, #42	@ 0x2a
 800f9a2:	fb02 3111 	mls	r1, r2, r1, r3
 800f9a6:	4683      	mov	fp, r0
 800f9a8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d0c7      	beq.n	800f940 <uxr_framing_read_transport+0x40>
 800f9b0:	42a8      	cmp	r0, r5
 800f9b2:	d1c7      	bne.n	800f944 <uxr_framing_read_transport+0x44>
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	d0c5      	beq.n	800f944 <uxr_framing_read_transport+0x44>
 800f9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	3102      	adds	r1, #2
 800f9be:	4632      	mov	r2, r6
 800f9c0:	4421      	add	r1, r4
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	4650      	mov	r0, sl
 800f9c6:	47c8      	blx	r9
 800f9c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f9cc:	4a0c      	ldr	r2, [pc, #48]	@ (800fa00 <uxr_framing_read_transport+0x100>)
 800f9ce:	180b      	adds	r3, r1, r0
 800f9d0:	0859      	lsrs	r1, r3, #1
 800f9d2:	fba2 1201 	umull	r1, r2, r2, r1
 800f9d6:	0892      	lsrs	r2, r2, #2
 800f9d8:	212a      	movs	r1, #42	@ 0x2a
 800f9da:	fb01 3312 	mls	r3, r1, r2, r3
 800f9de:	eb00 0b05 	add.w	fp, r0, r5
 800f9e2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f9e6:	e7ad      	b.n	800f944 <uxr_framing_read_transport+0x44>
 800f9e8:	2600      	movs	r6, #0
 800f9ea:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f9ee:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f9f0:	d9bf      	bls.n	800f972 <uxr_framing_read_transport+0x72>
 800f9f2:	2102      	movs	r1, #2
 800f9f4:	2529      	movs	r5, #41	@ 0x29
 800f9f6:	e7c4      	b.n	800f982 <uxr_framing_read_transport+0x82>
 800f9f8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f9fc:	b2ed      	uxtb	r5, r5
 800f9fe:	e796      	b.n	800f92e <uxr_framing_read_transport+0x2e>
 800fa00:	30c30c31 	.word	0x30c30c31

0800fa04 <uxr_read_framed_msg>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	461e      	mov	r6, r3
 800fa0a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fa0e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fa12:	429d      	cmp	r5, r3
 800fa14:	b083      	sub	sp, #12
 800fa16:	4604      	mov	r4, r0
 800fa18:	4688      	mov	r8, r1
 800fa1a:	4691      	mov	r9, r2
 800fa1c:	f000 8188 	beq.w	800fd30 <uxr_read_framed_msg+0x32c>
 800fa20:	7823      	ldrb	r3, [r4, #0]
 800fa22:	4dc1      	ldr	r5, [pc, #772]	@ (800fd28 <uxr_read_framed_msg+0x324>)
 800fa24:	4fc1      	ldr	r7, [pc, #772]	@ (800fd2c <uxr_read_framed_msg+0x328>)
 800fa26:	2b07      	cmp	r3, #7
 800fa28:	d8fd      	bhi.n	800fa26 <uxr_read_framed_msg+0x22>
 800fa2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fa2e:	0115      	.short	0x0115
 800fa30:	00d600f6 	.word	0x00d600f6
 800fa34:	009000b9 	.word	0x009000b9
 800fa38:	0030004d 	.word	0x0030004d
 800fa3c:	0008      	.short	0x0008
 800fa3e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fa42:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fa46:	4299      	cmp	r1, r3
 800fa48:	f000 814a 	beq.w	800fce0 <uxr_read_framed_msg+0x2dc>
 800fa4c:	18e2      	adds	r2, r4, r3
 800fa4e:	7892      	ldrb	r2, [r2, #2]
 800fa50:	2a7d      	cmp	r2, #125	@ 0x7d
 800fa52:	f000 8199 	beq.w	800fd88 <uxr_read_framed_msg+0x384>
 800fa56:	3301      	adds	r3, #1
 800fa58:	0858      	lsrs	r0, r3, #1
 800fa5a:	fba5 1000 	umull	r1, r0, r5, r0
 800fa5e:	0880      	lsrs	r0, r0, #2
 800fa60:	212a      	movs	r1, #42	@ 0x2a
 800fa62:	fb01 3310 	mls	r3, r1, r0, r3
 800fa66:	2a7e      	cmp	r2, #126	@ 0x7e
 800fa68:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fa6c:	f000 8252 	beq.w	800ff14 <uxr_read_framed_msg+0x510>
 800fa70:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800fa72:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800fa74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4299      	cmp	r1, r3
 800fa7e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800fa80:	7022      	strb	r2, [r4, #0]
 800fa82:	f000 8179 	beq.w	800fd78 <uxr_read_framed_msg+0x374>
 800fa86:	2000      	movs	r0, #0
 800fa88:	b003      	add	sp, #12
 800fa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fa92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fa96:	4299      	cmp	r1, r3
 800fa98:	f000 8131 	beq.w	800fcfe <uxr_read_framed_msg+0x2fa>
 800fa9c:	18e2      	adds	r2, r4, r3
 800fa9e:	7890      	ldrb	r0, [r2, #2]
 800faa0:	287d      	cmp	r0, #125	@ 0x7d
 800faa2:	f000 8190 	beq.w	800fdc6 <uxr_read_framed_msg+0x3c2>
 800faa6:	3301      	adds	r3, #1
 800faa8:	085a      	lsrs	r2, r3, #1
 800faaa:	fba5 1202 	umull	r1, r2, r5, r2
 800faae:	0892      	lsrs	r2, r2, #2
 800fab0:	212a      	movs	r1, #42	@ 0x2a
 800fab2:	fb01 3312 	mls	r3, r1, r2, r3
 800fab6:	287e      	cmp	r0, #126	@ 0x7e
 800fab8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fabc:	f000 821a 	beq.w	800fef4 <uxr_read_framed_msg+0x4f0>
 800fac0:	2307      	movs	r3, #7
 800fac2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800fac4:	7023      	strb	r3, [r4, #0]
 800fac6:	e7ae      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fac8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800faca:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800face:	459e      	cmp	lr, r3
 800fad0:	d938      	bls.n	800fb44 <uxr_read_framed_msg+0x140>
 800fad2:	ee07 8a90 	vmov	s15, r8
 800fad6:	212a      	movs	r1, #42	@ 0x2a
 800fad8:	e020      	b.n	800fb1c <uxr_read_framed_msg+0x118>
 800fada:	f89b c002 	ldrb.w	ip, [fp, #2]
 800fade:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800fae2:	f000 80d4 	beq.w	800fc8e <uxr_read_framed_msg+0x28a>
 800fae6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800faea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800faee:	f000 8219 	beq.w	800ff24 <uxr_read_framed_msg+0x520>
 800faf2:	f806 c003 	strb.w	ip, [r6, r3]
 800faf6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800fafa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fafc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800fb00:	ea8a 000c 	eor.w	r0, sl, ip
 800fb04:	b2c0      	uxtb	r0, r0
 800fb06:	3301      	adds	r3, #1
 800fb08:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800fb12:	4573      	cmp	r3, lr
 800fb14:	8663      	strh	r3, [r4, #50]	@ 0x32
 800fb16:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800fb18:	f080 8120 	bcs.w	800fd5c <uxr_read_framed_msg+0x358>
 800fb1c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800fb20:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800fb24:	f100 0c01 	add.w	ip, r0, #1
 800fb28:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fb2c:	fba5 8202 	umull	r8, r2, r5, r2
 800fb30:	0892      	lsrs	r2, r2, #2
 800fb32:	4582      	cmp	sl, r0
 800fb34:	eb04 0b00 	add.w	fp, r4, r0
 800fb38:	fb01 c212 	mls	r2, r1, r2, ip
 800fb3c:	d1cd      	bne.n	800fada <uxr_read_framed_msg+0xd6>
 800fb3e:	ee17 8a90 	vmov	r8, s15
 800fb42:	459e      	cmp	lr, r3
 800fb44:	f040 8111 	bne.w	800fd6a <uxr_read_framed_msg+0x366>
 800fb48:	2306      	movs	r3, #6
 800fb4a:	7023      	strb	r3, [r4, #0]
 800fb4c:	e76b      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fb4e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800fb52:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fb56:	4298      	cmp	r0, r3
 800fb58:	f000 80c2 	beq.w	800fce0 <uxr_read_framed_msg+0x2dc>
 800fb5c:	18e2      	adds	r2, r4, r3
 800fb5e:	7891      	ldrb	r1, [r2, #2]
 800fb60:	297d      	cmp	r1, #125	@ 0x7d
 800fb62:	f000 814c 	beq.w	800fdfe <uxr_read_framed_msg+0x3fa>
 800fb66:	3301      	adds	r3, #1
 800fb68:	085a      	lsrs	r2, r3, #1
 800fb6a:	fba5 0202 	umull	r0, r2, r5, r2
 800fb6e:	0892      	lsrs	r2, r2, #2
 800fb70:	202a      	movs	r0, #42	@ 0x2a
 800fb72:	fb00 3312 	mls	r3, r0, r2, r3
 800fb76:	297e      	cmp	r1, #126	@ 0x7e
 800fb78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fb7c:	f000 81ca 	beq.w	800ff14 <uxr_read_framed_msg+0x510>
 800fb80:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800fb82:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fb86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	428b      	cmp	r3, r1
 800fb8e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800fb90:	8660      	strh	r0, [r4, #50]	@ 0x32
 800fb92:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800fb94:	f240 80df 	bls.w	800fd56 <uxr_read_framed_msg+0x352>
 800fb98:	7020      	strb	r0, [r4, #0]
 800fb9a:	b003      	add	sp, #12
 800fb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fba4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fba8:	4299      	cmp	r1, r3
 800fbaa:	f000 80a8 	beq.w	800fcfe <uxr_read_framed_msg+0x2fa>
 800fbae:	18e2      	adds	r2, r4, r3
 800fbb0:	7890      	ldrb	r0, [r2, #2]
 800fbb2:	287d      	cmp	r0, #125	@ 0x7d
 800fbb4:	f000 8164 	beq.w	800fe80 <uxr_read_framed_msg+0x47c>
 800fbb8:	3301      	adds	r3, #1
 800fbba:	085a      	lsrs	r2, r3, #1
 800fbbc:	fba5 1202 	umull	r1, r2, r5, r2
 800fbc0:	0892      	lsrs	r2, r2, #2
 800fbc2:	212a      	movs	r1, #42	@ 0x2a
 800fbc4:	fb01 3312 	mls	r3, r1, r2, r3
 800fbc8:	287e      	cmp	r0, #126	@ 0x7e
 800fbca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fbce:	f000 8191 	beq.w	800fef4 <uxr_read_framed_msg+0x4f0>
 800fbd2:	2304      	movs	r3, #4
 800fbd4:	8620      	strh	r0, [r4, #48]	@ 0x30
 800fbd6:	7023      	strb	r3, [r4, #0]
 800fbd8:	e725      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fbda:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800fbde:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fbe2:	4290      	cmp	r0, r2
 800fbe4:	f000 80b3 	beq.w	800fd4e <uxr_read_framed_msg+0x34a>
 800fbe8:	18a3      	adds	r3, r4, r2
 800fbea:	7899      	ldrb	r1, [r3, #2]
 800fbec:	297d      	cmp	r1, #125	@ 0x7d
 800fbee:	f000 8164 	beq.w	800feba <uxr_read_framed_msg+0x4b6>
 800fbf2:	3201      	adds	r2, #1
 800fbf4:	0850      	lsrs	r0, r2, #1
 800fbf6:	fba5 3000 	umull	r3, r0, r5, r0
 800fbfa:	0880      	lsrs	r0, r0, #2
 800fbfc:	232a      	movs	r3, #42	@ 0x2a
 800fbfe:	fb03 2210 	mls	r2, r3, r0, r2
 800fc02:	297e      	cmp	r1, #126	@ 0x7e
 800fc04:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fc08:	f000 8188 	beq.w	800ff1c <uxr_read_framed_msg+0x518>
 800fc0c:	7863      	ldrb	r3, [r4, #1]
 800fc0e:	428b      	cmp	r3, r1
 800fc10:	bf0c      	ite	eq
 800fc12:	2303      	moveq	r3, #3
 800fc14:	2300      	movne	r3, #0
 800fc16:	7023      	strb	r3, [r4, #0]
 800fc18:	e705      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fc1a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fc1e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fc22:	2200      	movs	r2, #0
 800fc24:	4299      	cmp	r1, r3
 800fc26:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800fc2a:	d06c      	beq.n	800fd06 <uxr_read_framed_msg+0x302>
 800fc2c:	18e2      	adds	r2, r4, r3
 800fc2e:	7890      	ldrb	r0, [r2, #2]
 800fc30:	287d      	cmp	r0, #125	@ 0x7d
 800fc32:	f000 8101 	beq.w	800fe38 <uxr_read_framed_msg+0x434>
 800fc36:	3301      	adds	r3, #1
 800fc38:	085a      	lsrs	r2, r3, #1
 800fc3a:	fba5 1202 	umull	r1, r2, r5, r2
 800fc3e:	0892      	lsrs	r2, r2, #2
 800fc40:	212a      	movs	r1, #42	@ 0x2a
 800fc42:	fb01 3312 	mls	r3, r1, r2, r3
 800fc46:	287e      	cmp	r0, #126	@ 0x7e
 800fc48:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800fc4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fc50:	d059      	beq.n	800fd06 <uxr_read_framed_msg+0x302>
 800fc52:	2302      	movs	r3, #2
 800fc54:	7023      	strb	r3, [r4, #0]
 800fc56:	e6e6      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fc58:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800fc5c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fc60:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800fc64:	1c51      	adds	r1, r2, #1
 800fc66:	084b      	lsrs	r3, r1, #1
 800fc68:	fba5 c303 	umull	ip, r3, r5, r3
 800fc6c:	089b      	lsrs	r3, r3, #2
 800fc6e:	fb0e 1313 	mls	r3, lr, r3, r1
 800fc72:	4592      	cmp	sl, r2
 800fc74:	eb04 0002 	add.w	r0, r4, r2
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	f43f af04 	beq.w	800fa86 <uxr_read_framed_msg+0x82>
 800fc7e:	7883      	ldrb	r3, [r0, #2]
 800fc80:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fc84:	2b7e      	cmp	r3, #126	@ 0x7e
 800fc86:	d1ed      	bne.n	800fc64 <uxr_read_framed_msg+0x260>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	7023      	strb	r3, [r4, #0]
 800fc8c:	e6cb      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fc8e:	f100 0c01 	add.w	ip, r0, #1
 800fc92:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fc96:	fba5 8202 	umull	r8, r2, r5, r2
 800fc9a:	0892      	lsrs	r2, r2, #2
 800fc9c:	fb01 c212 	mls	r2, r1, r2, ip
 800fca0:	eb04 0c02 	add.w	ip, r4, r2
 800fca4:	b2d2      	uxtb	r2, r2
 800fca6:	4592      	cmp	sl, r2
 800fca8:	f100 0002 	add.w	r0, r0, #2
 800fcac:	f43f af47 	beq.w	800fb3e <uxr_read_framed_msg+0x13a>
 800fcb0:	0842      	lsrs	r2, r0, #1
 800fcb2:	f89c a002 	ldrb.w	sl, [ip, #2]
 800fcb6:	fba5 8202 	umull	r8, r2, r5, r2
 800fcba:	0892      	lsrs	r2, r2, #2
 800fcbc:	fb01 0012 	mls	r0, r1, r2, r0
 800fcc0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800fcc4:	f08a 0c20 	eor.w	ip, sl, #32
 800fcc8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800fccc:	f47f af11 	bne.w	800faf2 <uxr_read_framed_msg+0xee>
 800fcd0:	459e      	cmp	lr, r3
 800fcd2:	ee17 8a90 	vmov	r8, s15
 800fcd6:	f43f af37 	beq.w	800fb48 <uxr_read_framed_msg+0x144>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	7023      	strb	r3, [r4, #0]
 800fcde:	e6a2      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	2301      	movs	r3, #1
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcea:	464a      	mov	r2, r9
 800fcec:	4641      	mov	r1, r8
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7ff fe06 	bl	800f900 <uxr_framing_read_transport>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	f43f aec6 	beq.w	800fa86 <uxr_read_framed_msg+0x82>
 800fcfa:	7823      	ldrb	r3, [r4, #0]
 800fcfc:	e693      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fcfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	2302      	movs	r3, #2
 800fd04:	e7ef      	b.n	800fce6 <uxr_read_framed_msg+0x2e2>
 800fd06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	2304      	movs	r3, #4
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	464a      	mov	r2, r9
 800fd10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd12:	4641      	mov	r1, r8
 800fd14:	4620      	mov	r0, r4
 800fd16:	f7ff fdf3 	bl	800f900 <uxr_framing_read_transport>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d1ed      	bne.n	800fcfa <uxr_read_framed_msg+0x2f6>
 800fd1e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800fd22:	2b7e      	cmp	r3, #126	@ 0x7e
 800fd24:	d0e9      	beq.n	800fcfa <uxr_read_framed_msg+0x2f6>
 800fd26:	e6ae      	b.n	800fa86 <uxr_read_framed_msg+0x82>
 800fd28:	30c30c31 	.word	0x30c30c31
 800fd2c:	08014bac 	.word	0x08014bac
 800fd30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	2305      	movs	r3, #5
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd3a:	f7ff fde1 	bl	800f900 <uxr_framing_read_transport>
 800fd3e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fd42:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fd46:	429a      	cmp	r2, r3
 800fd48:	f43f ae9d 	beq.w	800fa86 <uxr_read_framed_msg+0x82>
 800fd4c:	e668      	b.n	800fa20 <uxr_read_framed_msg+0x1c>
 800fd4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	2303      	movs	r3, #3
 800fd54:	e7c7      	b.n	800fce6 <uxr_read_framed_msg+0x2e2>
 800fd56:	2305      	movs	r3, #5
 800fd58:	7023      	strb	r3, [r4, #0]
 800fd5a:	e664      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800fd5c:	ee17 8a90 	vmov	r8, s15
 800fd60:	f43f aef2 	beq.w	800fb48 <uxr_read_framed_msg+0x144>
 800fd64:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800fd68:	d08e      	beq.n	800fc88 <uxr_read_framed_msg+0x284>
 800fd6a:	ebae 0303 	sub.w	r3, lr, r3
 800fd6e:	3302      	adds	r3, #2
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	e7b7      	b.n	800fce8 <uxr_read_framed_msg+0x2e4>
 800fd78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd7a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800fd7e:	7013      	strb	r3, [r2, #0]
 800fd80:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800fd82:	b003      	add	sp, #12
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	f103 0c01 	add.w	ip, r3, #1
 800fd8c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fd90:	fba5 0202 	umull	r0, r2, r5, r2
 800fd94:	0892      	lsrs	r2, r2, #2
 800fd96:	202a      	movs	r0, #42	@ 0x2a
 800fd98:	fb00 c212 	mls	r2, r0, r2, ip
 800fd9c:	fa5f fc82 	uxtb.w	ip, r2
 800fda0:	4561      	cmp	r1, ip
 800fda2:	d09d      	beq.n	800fce0 <uxr_read_framed_msg+0x2dc>
 800fda4:	3302      	adds	r3, #2
 800fda6:	4422      	add	r2, r4
 800fda8:	0859      	lsrs	r1, r3, #1
 800fdaa:	7892      	ldrb	r2, [r2, #2]
 800fdac:	fba5 c101 	umull	ip, r1, r5, r1
 800fdb0:	0889      	lsrs	r1, r1, #2
 800fdb2:	fb00 3311 	mls	r3, r0, r1, r3
 800fdb6:	2a7e      	cmp	r2, #126	@ 0x7e
 800fdb8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fdbc:	f000 80aa 	beq.w	800ff14 <uxr_read_framed_msg+0x510>
 800fdc0:	f082 0220 	eor.w	r2, r2, #32
 800fdc4:	e654      	b.n	800fa70 <uxr_read_framed_msg+0x6c>
 800fdc6:	1c58      	adds	r0, r3, #1
 800fdc8:	0842      	lsrs	r2, r0, #1
 800fdca:	fba5 c202 	umull	ip, r2, r5, r2
 800fdce:	0892      	lsrs	r2, r2, #2
 800fdd0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fdd4:	fb0c 0212 	mls	r2, ip, r2, r0
 800fdd8:	b2d0      	uxtb	r0, r2
 800fdda:	4281      	cmp	r1, r0
 800fddc:	d08f      	beq.n	800fcfe <uxr_read_framed_msg+0x2fa>
 800fdde:	4422      	add	r2, r4
 800fde0:	3302      	adds	r3, #2
 800fde2:	7890      	ldrb	r0, [r2, #2]
 800fde4:	085a      	lsrs	r2, r3, #1
 800fde6:	fba5 1202 	umull	r1, r2, r5, r2
 800fdea:	0892      	lsrs	r2, r2, #2
 800fdec:	fb0c 3312 	mls	r3, ip, r2, r3
 800fdf0:	287e      	cmp	r0, #126	@ 0x7e
 800fdf2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fdf6:	d07d      	beq.n	800fef4 <uxr_read_framed_msg+0x4f0>
 800fdf8:	f080 0020 	eor.w	r0, r0, #32
 800fdfc:	e660      	b.n	800fac0 <uxr_read_framed_msg+0xbc>
 800fdfe:	1c59      	adds	r1, r3, #1
 800fe00:	084a      	lsrs	r2, r1, #1
 800fe02:	fba5 c202 	umull	ip, r2, r5, r2
 800fe06:	0892      	lsrs	r2, r2, #2
 800fe08:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fe0c:	fb0c 1212 	mls	r2, ip, r2, r1
 800fe10:	b2d1      	uxtb	r1, r2
 800fe12:	4288      	cmp	r0, r1
 800fe14:	f43f af64 	beq.w	800fce0 <uxr_read_framed_msg+0x2dc>
 800fe18:	4422      	add	r2, r4
 800fe1a:	3302      	adds	r3, #2
 800fe1c:	7891      	ldrb	r1, [r2, #2]
 800fe1e:	085a      	lsrs	r2, r3, #1
 800fe20:	fba5 0202 	umull	r0, r2, r5, r2
 800fe24:	0892      	lsrs	r2, r2, #2
 800fe26:	fb0c 3312 	mls	r3, ip, r2, r3
 800fe2a:	297e      	cmp	r1, #126	@ 0x7e
 800fe2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fe30:	d070      	beq.n	800ff14 <uxr_read_framed_msg+0x510>
 800fe32:	f081 0120 	eor.w	r1, r1, #32
 800fe36:	e6a3      	b.n	800fb80 <uxr_read_framed_msg+0x17c>
 800fe38:	f103 0c01 	add.w	ip, r3, #1
 800fe3c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fe40:	fba5 0202 	umull	r0, r2, r5, r2
 800fe44:	0892      	lsrs	r2, r2, #2
 800fe46:	202a      	movs	r0, #42	@ 0x2a
 800fe48:	fb00 c212 	mls	r2, r0, r2, ip
 800fe4c:	fa5f fc82 	uxtb.w	ip, r2
 800fe50:	4561      	cmp	r1, ip
 800fe52:	f43f af58 	beq.w	800fd06 <uxr_read_framed_msg+0x302>
 800fe56:	4422      	add	r2, r4
 800fe58:	3302      	adds	r3, #2
 800fe5a:	7891      	ldrb	r1, [r2, #2]
 800fe5c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800fe60:	085a      	lsrs	r2, r3, #1
 800fe62:	fba5 c202 	umull	ip, r2, r5, r2
 800fe66:	0892      	lsrs	r2, r2, #2
 800fe68:	fb00 3312 	mls	r3, r0, r2, r3
 800fe6c:	297e      	cmp	r1, #126	@ 0x7e
 800fe6e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fe72:	f43f af48 	beq.w	800fd06 <uxr_read_framed_msg+0x302>
 800fe76:	f081 0120 	eor.w	r1, r1, #32
 800fe7a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800fe7e:	e6e8      	b.n	800fc52 <uxr_read_framed_msg+0x24e>
 800fe80:	1c58      	adds	r0, r3, #1
 800fe82:	0842      	lsrs	r2, r0, #1
 800fe84:	fba5 c202 	umull	ip, r2, r5, r2
 800fe88:	0892      	lsrs	r2, r2, #2
 800fe8a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fe8e:	fb0c 0212 	mls	r2, ip, r2, r0
 800fe92:	b2d0      	uxtb	r0, r2
 800fe94:	4281      	cmp	r1, r0
 800fe96:	f43f af32 	beq.w	800fcfe <uxr_read_framed_msg+0x2fa>
 800fe9a:	4422      	add	r2, r4
 800fe9c:	3302      	adds	r3, #2
 800fe9e:	7890      	ldrb	r0, [r2, #2]
 800fea0:	085a      	lsrs	r2, r3, #1
 800fea2:	fba5 1202 	umull	r1, r2, r5, r2
 800fea6:	0892      	lsrs	r2, r2, #2
 800fea8:	fb0c 3312 	mls	r3, ip, r2, r3
 800feac:	287e      	cmp	r0, #126	@ 0x7e
 800feae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800feb2:	d01f      	beq.n	800fef4 <uxr_read_framed_msg+0x4f0>
 800feb4:	f080 0020 	eor.w	r0, r0, #32
 800feb8:	e68b      	b.n	800fbd2 <uxr_read_framed_msg+0x1ce>
 800feba:	1c51      	adds	r1, r2, #1
 800febc:	084b      	lsrs	r3, r1, #1
 800febe:	fba5 c303 	umull	ip, r3, r5, r3
 800fec2:	089b      	lsrs	r3, r3, #2
 800fec4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fec8:	fb0c 1313 	mls	r3, ip, r3, r1
 800fecc:	b2d9      	uxtb	r1, r3
 800fece:	4288      	cmp	r0, r1
 800fed0:	f43f af3d 	beq.w	800fd4e <uxr_read_framed_msg+0x34a>
 800fed4:	3202      	adds	r2, #2
 800fed6:	4423      	add	r3, r4
 800fed8:	0850      	lsrs	r0, r2, #1
 800feda:	789b      	ldrb	r3, [r3, #2]
 800fedc:	fba5 1000 	umull	r1, r0, r5, r0
 800fee0:	0880      	lsrs	r0, r0, #2
 800fee2:	fb0c 2210 	mls	r2, ip, r0, r2
 800fee6:	2b7e      	cmp	r3, #126	@ 0x7e
 800fee8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800feec:	d016      	beq.n	800ff1c <uxr_read_framed_msg+0x518>
 800feee:	f083 0120 	eor.w	r1, r3, #32
 800fef2:	e68b      	b.n	800fc0c <uxr_read_framed_msg+0x208>
 800fef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	2302      	movs	r3, #2
 800fefa:	9301      	str	r3, [sp, #4]
 800fefc:	464a      	mov	r2, r9
 800fefe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff00:	4641      	mov	r1, r8
 800ff02:	4620      	mov	r0, r4
 800ff04:	f7ff fcfc 	bl	800f900 <uxr_framing_read_transport>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	f47f aef6 	bne.w	800fcfa <uxr_read_framed_msg+0x2f6>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	7023      	strb	r3, [r4, #0]
 800ff12:	e588      	b.n	800fa26 <uxr_read_framed_msg+0x22>
 800ff14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e7ee      	b.n	800fefa <uxr_read_framed_msg+0x4f6>
 800ff1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff1e:	9300      	str	r3, [sp, #0]
 800ff20:	2303      	movs	r3, #3
 800ff22:	e7ea      	b.n	800fefa <uxr_read_framed_msg+0x4f6>
 800ff24:	ee17 8a90 	vmov	r8, s15
 800ff28:	e6ae      	b.n	800fc88 <uxr_read_framed_msg+0x284>
 800ff2a:	bf00      	nop

0800ff2c <uxr_stream_id>:
 800ff2c:	2901      	cmp	r1, #1
 800ff2e:	b082      	sub	sp, #8
 800ff30:	d01d      	beq.n	800ff6e <uxr_stream_id+0x42>
 800ff32:	2902      	cmp	r1, #2
 800ff34:	f04f 0c00 	mov.w	ip, #0
 800ff38:	d01e      	beq.n	800ff78 <uxr_stream_id+0x4c>
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f36c 0307 	bfi	r3, ip, #0, #8
 800ff40:	f360 230f 	bfi	r3, r0, #8, #8
 800ff44:	f361 4317 	bfi	r3, r1, #16, #8
 800ff48:	f362 631f 	bfi	r3, r2, #24, #8
 800ff4c:	b2da      	uxtb	r2, r3
 800ff4e:	2000      	movs	r0, #0
 800ff50:	f362 0007 	bfi	r0, r2, #0, #8
 800ff54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ff58:	f362 200f 	bfi	r0, r2, #8, #8
 800ff5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ff60:	f362 4017 	bfi	r0, r2, #16, #8
 800ff64:	0e1b      	lsrs	r3, r3, #24
 800ff66:	f363 601f 	bfi	r0, r3, #24, #8
 800ff6a:	b002      	add	sp, #8
 800ff6c:	4770      	bx	lr
 800ff6e:	f100 0c01 	add.w	ip, r0, #1
 800ff72:	fa5f fc8c 	uxtb.w	ip, ip
 800ff76:	e7e0      	b.n	800ff3a <uxr_stream_id+0xe>
 800ff78:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ff7c:	e7dd      	b.n	800ff3a <uxr_stream_id+0xe>
 800ff7e:	bf00      	nop

0800ff80 <uxr_stream_id_from_raw>:
 800ff80:	b082      	sub	sp, #8
 800ff82:	b130      	cbz	r0, 800ff92 <uxr_stream_id_from_raw+0x12>
 800ff84:	0603      	lsls	r3, r0, #24
 800ff86:	d420      	bmi.n	800ffca <uxr_stream_id_from_raw+0x4a>
 800ff88:	1e42      	subs	r2, r0, #1
 800ff8a:	b2d2      	uxtb	r2, r2
 800ff8c:	f04f 0c01 	mov.w	ip, #1
 800ff90:	e001      	b.n	800ff96 <uxr_stream_id_from_raw+0x16>
 800ff92:	4684      	mov	ip, r0
 800ff94:	4602      	mov	r2, r0
 800ff96:	2300      	movs	r3, #0
 800ff98:	f360 0307 	bfi	r3, r0, #0, #8
 800ff9c:	f362 230f 	bfi	r3, r2, #8, #8
 800ffa0:	f36c 4317 	bfi	r3, ip, #16, #8
 800ffa4:	f361 631f 	bfi	r3, r1, #24, #8
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f362 0007 	bfi	r0, r2, #0, #8
 800ffb0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ffb4:	f362 200f 	bfi	r0, r2, #8, #8
 800ffb8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ffbc:	f362 4017 	bfi	r0, r2, #16, #8
 800ffc0:	0e1b      	lsrs	r3, r3, #24
 800ffc2:	f363 601f 	bfi	r0, r3, #24, #8
 800ffc6:	b002      	add	sp, #8
 800ffc8:	4770      	bx	lr
 800ffca:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ffce:	f04f 0c02 	mov.w	ip, #2
 800ffd2:	e7e0      	b.n	800ff96 <uxr_stream_id_from_raw+0x16>

0800ffd4 <uxr_init_stream_storage>:
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	7403      	strb	r3, [r0, #16]
 800ffd8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ffdc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ffe0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop

0800ffe8 <uxr_reset_stream_storage>:
 800ffe8:	b570      	push	{r4, r5, r6, lr}
 800ffea:	7c03      	ldrb	r3, [r0, #16]
 800ffec:	4604      	mov	r4, r0
 800ffee:	b153      	cbz	r3, 8010006 <uxr_reset_stream_storage+0x1e>
 800fff0:	4606      	mov	r6, r0
 800fff2:	2500      	movs	r5, #0
 800fff4:	4630      	mov	r0, r6
 800fff6:	f002 fa79 	bl	80124ec <uxr_reset_output_best_effort_stream>
 800fffa:	7c23      	ldrb	r3, [r4, #16]
 800fffc:	3501      	adds	r5, #1
 800fffe:	42ab      	cmp	r3, r5
 8010000:	f106 0610 	add.w	r6, r6, #16
 8010004:	d8f6      	bhi.n	800fff4 <uxr_reset_stream_storage+0xc>
 8010006:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801000a:	b163      	cbz	r3, 8010026 <uxr_reset_stream_storage+0x3e>
 801000c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010010:	2500      	movs	r5, #0
 8010012:	4630      	mov	r0, r6
 8010014:	f002 f86c 	bl	80120f0 <uxr_reset_input_best_effort_stream>
 8010018:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801001c:	3501      	adds	r5, #1
 801001e:	42ab      	cmp	r3, r5
 8010020:	f106 0602 	add.w	r6, r6, #2
 8010024:	d8f5      	bhi.n	8010012 <uxr_reset_stream_storage+0x2a>
 8010026:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801002a:	b163      	cbz	r3, 8010046 <uxr_reset_stream_storage+0x5e>
 801002c:	f104 0618 	add.w	r6, r4, #24
 8010030:	2500      	movs	r5, #0
 8010032:	4630      	mov	r0, r6
 8010034:	f002 fb06 	bl	8012644 <uxr_reset_output_reliable_stream>
 8010038:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801003c:	3501      	adds	r5, #1
 801003e:	42ab      	cmp	r3, r5
 8010040:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010044:	d8f5      	bhi.n	8010032 <uxr_reset_stream_storage+0x4a>
 8010046:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801004a:	b163      	cbz	r3, 8010066 <uxr_reset_stream_storage+0x7e>
 801004c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010050:	2500      	movs	r5, #0
 8010052:	4630      	mov	r0, r6
 8010054:	f002 f8c0 	bl	80121d8 <uxr_reset_input_reliable_stream>
 8010058:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801005c:	3501      	adds	r5, #1
 801005e:	42ab      	cmp	r3, r5
 8010060:	f106 0618 	add.w	r6, r6, #24
 8010064:	d8f5      	bhi.n	8010052 <uxr_reset_stream_storage+0x6a>
 8010066:	bd70      	pop	{r4, r5, r6, pc}

08010068 <uxr_add_output_best_effort_buffer>:
 8010068:	b510      	push	{r4, lr}
 801006a:	7c04      	ldrb	r4, [r0, #16]
 801006c:	f104 0c01 	add.w	ip, r4, #1
 8010070:	b082      	sub	sp, #8
 8010072:	f880 c010 	strb.w	ip, [r0, #16]
 8010076:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801007a:	f002 fa2d 	bl	80124d8 <uxr_init_output_best_effort_stream>
 801007e:	2201      	movs	r2, #1
 8010080:	4611      	mov	r1, r2
 8010082:	4620      	mov	r0, r4
 8010084:	b002      	add	sp, #8
 8010086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801008a:	f7ff bf4f 	b.w	800ff2c <uxr_stream_id>
 801008e:	bf00      	nop

08010090 <uxr_add_output_reliable_buffer>:
 8010090:	b510      	push	{r4, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	4684      	mov	ip, r0
 8010096:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801009a:	9000      	str	r0, [sp, #0]
 801009c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80100a0:	2028      	movs	r0, #40	@ 0x28
 80100a2:	fb00 c004 	mla	r0, r0, r4, ip
 80100a6:	f104 0e01 	add.w	lr, r4, #1
 80100aa:	3018      	adds	r0, #24
 80100ac:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80100b0:	f002 fa90 	bl	80125d4 <uxr_init_output_reliable_stream>
 80100b4:	2201      	movs	r2, #1
 80100b6:	2102      	movs	r1, #2
 80100b8:	4620      	mov	r0, r4
 80100ba:	b004      	add	sp, #16
 80100bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100c0:	f7ff bf34 	b.w	800ff2c <uxr_stream_id>

080100c4 <uxr_add_input_best_effort_buffer>:
 80100c4:	b510      	push	{r4, lr}
 80100c6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80100ca:	4603      	mov	r3, r0
 80100cc:	1c62      	adds	r2, r4, #1
 80100ce:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80100d2:	b082      	sub	sp, #8
 80100d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80100d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80100dc:	f002 f804 	bl	80120e8 <uxr_init_input_best_effort_stream>
 80100e0:	2200      	movs	r2, #0
 80100e2:	2101      	movs	r1, #1
 80100e4:	4620      	mov	r0, r4
 80100e6:	b002      	add	sp, #8
 80100e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ec:	f7ff bf1e 	b.w	800ff2c <uxr_stream_id>

080100f0 <uxr_add_input_reliable_buffer>:
 80100f0:	b510      	push	{r4, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	4684      	mov	ip, r0
 80100f6:	9806      	ldr	r0, [sp, #24]
 80100f8:	9000      	str	r0, [sp, #0]
 80100fa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80100fe:	2018      	movs	r0, #24
 8010100:	fb00 c004 	mla	r0, r0, r4, ip
 8010104:	f104 0e01 	add.w	lr, r4, #1
 8010108:	3048      	adds	r0, #72	@ 0x48
 801010a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801010e:	f002 f837 	bl	8012180 <uxr_init_input_reliable_stream>
 8010112:	2200      	movs	r2, #0
 8010114:	2102      	movs	r1, #2
 8010116:	4620      	mov	r0, r4
 8010118:	b004      	add	sp, #16
 801011a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801011e:	f7ff bf05 	b.w	800ff2c <uxr_stream_id>
 8010122:	bf00      	nop

08010124 <uxr_get_output_best_effort_stream>:
 8010124:	7c03      	ldrb	r3, [r0, #16]
 8010126:	428b      	cmp	r3, r1
 8010128:	bf8c      	ite	hi
 801012a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801012e:	2000      	movls	r0, #0
 8010130:	4770      	bx	lr
 8010132:	bf00      	nop

08010134 <uxr_get_output_reliable_stream>:
 8010134:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010138:	428b      	cmp	r3, r1
 801013a:	bf83      	ittte	hi
 801013c:	2328      	movhi	r3, #40	@ 0x28
 801013e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010142:	3018      	addhi	r0, #24
 8010144:	2000      	movls	r0, #0
 8010146:	4770      	bx	lr

08010148 <uxr_get_input_best_effort_stream>:
 8010148:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801014c:	428b      	cmp	r3, r1
 801014e:	bf86      	itte	hi
 8010150:	3121      	addhi	r1, #33	@ 0x21
 8010152:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010156:	2000      	movls	r0, #0
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop

0801015c <uxr_get_input_reliable_stream>:
 801015c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010160:	428b      	cmp	r3, r1
 8010162:	bf83      	ittte	hi
 8010164:	2318      	movhi	r3, #24
 8010166:	fb03 0001 	mlahi	r0, r3, r1, r0
 801016a:	3048      	addhi	r0, #72	@ 0x48
 801016c:	2000      	movls	r0, #0
 801016e:	4770      	bx	lr

08010170 <uxr_output_streams_confirmed>:
 8010170:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010174:	b183      	cbz	r3, 8010198 <uxr_output_streams_confirmed+0x28>
 8010176:	b570      	push	{r4, r5, r6, lr}
 8010178:	4606      	mov	r6, r0
 801017a:	f100 0518 	add.w	r5, r0, #24
 801017e:	2400      	movs	r4, #0
 8010180:	e001      	b.n	8010186 <uxr_output_streams_confirmed+0x16>
 8010182:	3528      	adds	r5, #40	@ 0x28
 8010184:	b138      	cbz	r0, 8010196 <uxr_output_streams_confirmed+0x26>
 8010186:	4628      	mov	r0, r5
 8010188:	f002 fccc 	bl	8012b24 <uxr_is_output_up_to_date>
 801018c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010190:	3401      	adds	r4, #1
 8010192:	42a3      	cmp	r3, r4
 8010194:	d8f5      	bhi.n	8010182 <uxr_output_streams_confirmed+0x12>
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	2001      	movs	r0, #1
 801019a:	4770      	bx	lr

0801019c <uxr_buffer_submessage_header>:
 801019c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019e:	4604      	mov	r4, r0
 80101a0:	460e      	mov	r6, r1
 80101a2:	2104      	movs	r1, #4
 80101a4:	4615      	mov	r5, r2
 80101a6:	461f      	mov	r7, r3
 80101a8:	f7f8 fed4 	bl	8008f54 <ucdr_align_to>
 80101ac:	2301      	movs	r3, #1
 80101ae:	ea47 0203 	orr.w	r2, r7, r3
 80101b2:	4631      	mov	r1, r6
 80101b4:	7523      	strb	r3, [r4, #20]
 80101b6:	4620      	mov	r0, r4
 80101b8:	462b      	mov	r3, r5
 80101ba:	f000 f8d3 	bl	8010364 <uxr_serialize_submessage_header>
 80101be:	4620      	mov	r0, r4
 80101c0:	f7f8 fede 	bl	8008f80 <ucdr_buffer_remaining>
 80101c4:	42a8      	cmp	r0, r5
 80101c6:	bf34      	ite	cc
 80101c8:	2000      	movcc	r0, #0
 80101ca:	2001      	movcs	r0, #1
 80101cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ce:	bf00      	nop

080101d0 <uxr_read_submessage_header>:
 80101d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	4604      	mov	r4, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	2104      	movs	r1, #4
 80101da:	4616      	mov	r6, r2
 80101dc:	4698      	mov	r8, r3
 80101de:	f7f8 feb9 	bl	8008f54 <ucdr_align_to>
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7f8 fecc 	bl	8008f80 <ucdr_buffer_remaining>
 80101e8:	2803      	cmp	r0, #3
 80101ea:	bf8c      	ite	hi
 80101ec:	2701      	movhi	r7, #1
 80101ee:	2700      	movls	r7, #0
 80101f0:	d802      	bhi.n	80101f8 <uxr_read_submessage_header+0x28>
 80101f2:	4638      	mov	r0, r7
 80101f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f8:	4633      	mov	r3, r6
 80101fa:	4642      	mov	r2, r8
 80101fc:	4620      	mov	r0, r4
 80101fe:	4629      	mov	r1, r5
 8010200:	f000 f8c4 	bl	801038c <uxr_deserialize_submessage_header>
 8010204:	f898 3000 	ldrb.w	r3, [r8]
 8010208:	f003 0201 	and.w	r2, r3, #1
 801020c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010210:	f888 3000 	strb.w	r3, [r8]
 8010214:	7522      	strb	r2, [r4, #20]
 8010216:	4638      	mov	r0, r7
 8010218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801021c <uxr_submessage_padding>:
 801021c:	f010 0003 	ands.w	r0, r0, #3
 8010220:	bf18      	it	ne
 8010222:	f1c0 0004 	rsbne	r0, r0, #4
 8010226:	4770      	bx	lr

08010228 <uxr_millis>:
 8010228:	b510      	push	{r4, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	4669      	mov	r1, sp
 801022e:	2001      	movs	r0, #1
 8010230:	f7f0 ff42 	bl	80010b8 <clock_gettime>
 8010234:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010238:	4906      	ldr	r1, [pc, #24]	@ (8010254 <uxr_millis+0x2c>)
 801023a:	fba0 0301 	umull	r0, r3, r0, r1
 801023e:	1900      	adds	r0, r0, r4
 8010240:	fb01 3102 	mla	r1, r1, r2, r3
 8010244:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010248:	4a03      	ldr	r2, [pc, #12]	@ (8010258 <uxr_millis+0x30>)
 801024a:	2300      	movs	r3, #0
 801024c:	f7f0 f830 	bl	80002b0 <__aeabi_ldivmod>
 8010250:	b004      	add	sp, #16
 8010252:	bd10      	pop	{r4, pc}
 8010254:	3b9aca00 	.word	0x3b9aca00
 8010258:	000f4240 	.word	0x000f4240

0801025c <uxr_nanos>:
 801025c:	b510      	push	{r4, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	4669      	mov	r1, sp
 8010262:	2001      	movs	r0, #1
 8010264:	f7f0 ff28 	bl	80010b8 <clock_gettime>
 8010268:	4a06      	ldr	r2, [pc, #24]	@ (8010284 <uxr_nanos+0x28>)
 801026a:	9800      	ldr	r0, [sp, #0]
 801026c:	9902      	ldr	r1, [sp, #8]
 801026e:	9c01      	ldr	r4, [sp, #4]
 8010270:	fba0 0302 	umull	r0, r3, r0, r2
 8010274:	1840      	adds	r0, r0, r1
 8010276:	fb02 3304 	mla	r3, r2, r4, r3
 801027a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801027e:	b004      	add	sp, #16
 8010280:	bd10      	pop	{r4, pc}
 8010282:	bf00      	nop
 8010284:	3b9aca00 	.word	0x3b9aca00

08010288 <uxr_prepare_output_stream>:
 8010288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801028a:	b087      	sub	sp, #28
 801028c:	2707      	movs	r7, #7
 801028e:	9202      	str	r2, [sp, #8]
 8010290:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010292:	9103      	str	r1, [sp, #12]
 8010294:	2500      	movs	r5, #0
 8010296:	3204      	adds	r2, #4
 8010298:	e9cd 7500 	strd	r7, r5, [sp]
 801029c:	461c      	mov	r4, r3
 801029e:	4606      	mov	r6, r0
 80102a0:	f7ff f84c 	bl	800f33c <uxr_prepare_stream_to_write_submessage>
 80102a4:	f080 0201 	eor.w	r2, r0, #1
 80102a8:	b2d2      	uxtb	r2, r2
 80102aa:	75a2      	strb	r2, [r4, #22]
 80102ac:	b112      	cbz	r2, 80102b4 <uxr_prepare_output_stream+0x2c>
 80102ae:	4628      	mov	r0, r5
 80102b0:	b007      	add	sp, #28
 80102b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b4:	aa05      	add	r2, sp, #20
 80102b6:	9902      	ldr	r1, [sp, #8]
 80102b8:	4630      	mov	r0, r6
 80102ba:	f7ff f975 	bl	800f5a8 <uxr_init_base_object_request>
 80102be:	a905      	add	r1, sp, #20
 80102c0:	4605      	mov	r5, r0
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 fee6 	bl	8011094 <uxr_serialize_WRITE_DATA_Payload_Data>
 80102c8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80102cc:	69a6      	ldr	r6, [r4, #24]
 80102ce:	69e7      	ldr	r7, [r4, #28]
 80102d0:	1a52      	subs	r2, r2, r1
 80102d2:	4620      	mov	r0, r4
 80102d4:	f7f8 fe24 	bl	8008f20 <ucdr_init_buffer>
 80102d8:	4620      	mov	r0, r4
 80102da:	463a      	mov	r2, r7
 80102dc:	4631      	mov	r1, r6
 80102de:	f7f8 fdf3 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 80102e2:	4628      	mov	r0, r5
 80102e4:	b007      	add	sp, #28
 80102e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102e8 <uxr_serialize_message_header>:
 80102e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ea:	b083      	sub	sp, #12
 80102ec:	4616      	mov	r6, r2
 80102ee:	4604      	mov	r4, r0
 80102f0:	9301      	str	r3, [sp, #4]
 80102f2:	460d      	mov	r5, r1
 80102f4:	9f08      	ldr	r7, [sp, #32]
 80102f6:	f7f7 fe67 	bl	8007fc8 <ucdr_serialize_uint8_t>
 80102fa:	4631      	mov	r1, r6
 80102fc:	4620      	mov	r0, r4
 80102fe:	f7f7 fe63 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010302:	9a01      	ldr	r2, [sp, #4]
 8010304:	2101      	movs	r1, #1
 8010306:	4620      	mov	r0, r4
 8010308:	f7f7 ff0a 	bl	8008120 <ucdr_serialize_endian_uint16_t>
 801030c:	062b      	lsls	r3, r5, #24
 801030e:	d501      	bpl.n	8010314 <uxr_serialize_message_header+0x2c>
 8010310:	b003      	add	sp, #12
 8010312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010314:	2204      	movs	r2, #4
 8010316:	4639      	mov	r1, r7
 8010318:	4620      	mov	r0, r4
 801031a:	b003      	add	sp, #12
 801031c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010320:	f001 bdaa 	b.w	8011e78 <ucdr_serialize_array_uint8_t>

08010324 <uxr_deserialize_message_header>:
 8010324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010326:	b083      	sub	sp, #12
 8010328:	4616      	mov	r6, r2
 801032a:	4604      	mov	r4, r0
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	460d      	mov	r5, r1
 8010330:	9f08      	ldr	r7, [sp, #32]
 8010332:	f7f7 fe5f 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010336:	4631      	mov	r1, r6
 8010338:	4620      	mov	r0, r4
 801033a:	f7f7 fe5b 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 801033e:	9a01      	ldr	r2, [sp, #4]
 8010340:	2101      	movs	r1, #1
 8010342:	4620      	mov	r0, r4
 8010344:	f7f7 ffe0 	bl	8008308 <ucdr_deserialize_endian_uint16_t>
 8010348:	f995 3000 	ldrsb.w	r3, [r5]
 801034c:	2b00      	cmp	r3, #0
 801034e:	da01      	bge.n	8010354 <uxr_deserialize_message_header+0x30>
 8010350:	b003      	add	sp, #12
 8010352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010354:	2204      	movs	r2, #4
 8010356:	4639      	mov	r1, r7
 8010358:	4620      	mov	r0, r4
 801035a:	b003      	add	sp, #12
 801035c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010360:	f001 bdee 	b.w	8011f40 <ucdr_deserialize_array_uint8_t>

08010364 <uxr_serialize_submessage_header>:
 8010364:	b530      	push	{r4, r5, lr}
 8010366:	b083      	sub	sp, #12
 8010368:	4615      	mov	r5, r2
 801036a:	4604      	mov	r4, r0
 801036c:	9301      	str	r3, [sp, #4]
 801036e:	f7f7 fe2b 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010372:	4629      	mov	r1, r5
 8010374:	4620      	mov	r0, r4
 8010376:	f7f7 fe27 	bl	8007fc8 <ucdr_serialize_uint8_t>
 801037a:	9a01      	ldr	r2, [sp, #4]
 801037c:	2101      	movs	r1, #1
 801037e:	4620      	mov	r0, r4
 8010380:	b003      	add	sp, #12
 8010382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010386:	f7f7 becb 	b.w	8008120 <ucdr_serialize_endian_uint16_t>
 801038a:	bf00      	nop

0801038c <uxr_deserialize_submessage_header>:
 801038c:	b530      	push	{r4, r5, lr}
 801038e:	b083      	sub	sp, #12
 8010390:	4615      	mov	r5, r2
 8010392:	4604      	mov	r4, r0
 8010394:	9301      	str	r3, [sp, #4]
 8010396:	f7f7 fe2d 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 801039a:	4629      	mov	r1, r5
 801039c:	4620      	mov	r0, r4
 801039e:	f7f7 fe29 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 80103a2:	9a01      	ldr	r2, [sp, #4]
 80103a4:	2101      	movs	r1, #1
 80103a6:	4620      	mov	r0, r4
 80103a8:	b003      	add	sp, #12
 80103aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103ae:	f7f7 bfab 	b.w	8008308 <ucdr_deserialize_endian_uint16_t>
 80103b2:	bf00      	nop

080103b4 <uxr_serialize_CLIENT_Representation>:
 80103b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b8:	2204      	movs	r2, #4
 80103ba:	460e      	mov	r6, r1
 80103bc:	4605      	mov	r5, r0
 80103be:	f001 fd5b 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80103c2:	2202      	movs	r2, #2
 80103c4:	4607      	mov	r7, r0
 80103c6:	1d31      	adds	r1, r6, #4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f001 fd55 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80103ce:	4038      	ands	r0, r7
 80103d0:	2202      	movs	r2, #2
 80103d2:	1db1      	adds	r1, r6, #6
 80103d4:	b2c7      	uxtb	r7, r0
 80103d6:	4628      	mov	r0, r5
 80103d8:	f001 fd4e 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80103dc:	2204      	movs	r2, #4
 80103de:	4007      	ands	r7, r0
 80103e0:	f106 0108 	add.w	r1, r6, #8
 80103e4:	4628      	mov	r0, r5
 80103e6:	f001 fd47 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80103ea:	7b31      	ldrb	r1, [r6, #12]
 80103ec:	4007      	ands	r7, r0
 80103ee:	4628      	mov	r0, r5
 80103f0:	f7f7 fdea 	bl	8007fc8 <ucdr_serialize_uint8_t>
 80103f4:	7b71      	ldrb	r1, [r6, #13]
 80103f6:	4007      	ands	r7, r0
 80103f8:	4628      	mov	r0, r5
 80103fa:	f7f7 fdb7 	bl	8007f6c <ucdr_serialize_bool>
 80103fe:	7b73      	ldrb	r3, [r6, #13]
 8010400:	ea07 0800 	and.w	r8, r7, r0
 8010404:	b93b      	cbnz	r3, 8010416 <uxr_serialize_CLIENT_Representation+0x62>
 8010406:	8bb1      	ldrh	r1, [r6, #28]
 8010408:	4628      	mov	r0, r5
 801040a:	f7f7 fe09 	bl	8008020 <ucdr_serialize_uint16_t>
 801040e:	ea08 0000 	and.w	r0, r8, r0
 8010412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010416:	6931      	ldr	r1, [r6, #16]
 8010418:	4628      	mov	r0, r5
 801041a:	f7f7 ffeb 	bl	80083f4 <ucdr_serialize_uint32_t>
 801041e:	6933      	ldr	r3, [r6, #16]
 8010420:	b1e3      	cbz	r3, 801045c <uxr_serialize_CLIENT_Representation+0xa8>
 8010422:	b1c0      	cbz	r0, 8010456 <uxr_serialize_CLIENT_Representation+0xa2>
 8010424:	4637      	mov	r7, r6
 8010426:	f04f 0900 	mov.w	r9, #0
 801042a:	e001      	b.n	8010430 <uxr_serialize_CLIENT_Representation+0x7c>
 801042c:	3708      	adds	r7, #8
 801042e:	b194      	cbz	r4, 8010456 <uxr_serialize_CLIENT_Representation+0xa2>
 8010430:	6979      	ldr	r1, [r7, #20]
 8010432:	4628      	mov	r0, r5
 8010434:	f001 fe40 	bl	80120b8 <ucdr_serialize_string>
 8010438:	69b9      	ldr	r1, [r7, #24]
 801043a:	4604      	mov	r4, r0
 801043c:	4628      	mov	r0, r5
 801043e:	f001 fe3b 	bl	80120b8 <ucdr_serialize_string>
 8010442:	6933      	ldr	r3, [r6, #16]
 8010444:	f109 0901 	add.w	r9, r9, #1
 8010448:	4004      	ands	r4, r0
 801044a:	4599      	cmp	r9, r3
 801044c:	b2e4      	uxtb	r4, r4
 801044e:	d3ed      	bcc.n	801042c <uxr_serialize_CLIENT_Representation+0x78>
 8010450:	ea08 0804 	and.w	r8, r8, r4
 8010454:	e7d7      	b.n	8010406 <uxr_serialize_CLIENT_Representation+0x52>
 8010456:	f04f 0800 	mov.w	r8, #0
 801045a:	e7d4      	b.n	8010406 <uxr_serialize_CLIENT_Representation+0x52>
 801045c:	ea08 0800 	and.w	r8, r8, r0
 8010460:	e7d1      	b.n	8010406 <uxr_serialize_CLIENT_Representation+0x52>
 8010462:	bf00      	nop

08010464 <uxr_deserialize_CLIENT_Representation>:
 8010464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010468:	2204      	movs	r2, #4
 801046a:	460c      	mov	r4, r1
 801046c:	4605      	mov	r5, r0
 801046e:	f001 fd67 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010472:	2202      	movs	r2, #2
 8010474:	4607      	mov	r7, r0
 8010476:	1d21      	adds	r1, r4, #4
 8010478:	4628      	mov	r0, r5
 801047a:	f001 fd61 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 801047e:	4038      	ands	r0, r7
 8010480:	2202      	movs	r2, #2
 8010482:	1da1      	adds	r1, r4, #6
 8010484:	b2c6      	uxtb	r6, r0
 8010486:	4628      	mov	r0, r5
 8010488:	f001 fd5a 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 801048c:	2204      	movs	r2, #4
 801048e:	4006      	ands	r6, r0
 8010490:	f104 0108 	add.w	r1, r4, #8
 8010494:	4628      	mov	r0, r5
 8010496:	f001 fd53 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 801049a:	f104 010c 	add.w	r1, r4, #12
 801049e:	4006      	ands	r6, r0
 80104a0:	4628      	mov	r0, r5
 80104a2:	f7f7 fda7 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 80104a6:	f104 010d 	add.w	r1, r4, #13
 80104aa:	ea06 0700 	and.w	r7, r6, r0
 80104ae:	4628      	mov	r0, r5
 80104b0:	f7f7 fd72 	bl	8007f98 <ucdr_deserialize_bool>
 80104b4:	7b63      	ldrb	r3, [r4, #13]
 80104b6:	4007      	ands	r7, r0
 80104b8:	b93b      	cbnz	r3, 80104ca <uxr_deserialize_CLIENT_Representation+0x66>
 80104ba:	f104 011c 	add.w	r1, r4, #28
 80104be:	4628      	mov	r0, r5
 80104c0:	f7f7 feae 	bl	8008220 <ucdr_deserialize_uint16_t>
 80104c4:	4038      	ands	r0, r7
 80104c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ca:	f104 0110 	add.w	r1, r4, #16
 80104ce:	4628      	mov	r0, r5
 80104d0:	f7f8 f8c0 	bl	8008654 <ucdr_deserialize_uint32_t>
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d903      	bls.n	80104e2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80104da:	2301      	movs	r3, #1
 80104dc:	75ab      	strb	r3, [r5, #22]
 80104de:	2700      	movs	r7, #0
 80104e0:	e7eb      	b.n	80104ba <uxr_deserialize_CLIENT_Representation+0x56>
 80104e2:	b30b      	cbz	r3, 8010528 <uxr_deserialize_CLIENT_Representation+0xc4>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d0fa      	beq.n	80104de <uxr_deserialize_CLIENT_Representation+0x7a>
 80104e8:	46a0      	mov	r8, r4
 80104ea:	f04f 0900 	mov.w	r9, #0
 80104ee:	e001      	b.n	80104f4 <uxr_deserialize_CLIENT_Representation+0x90>
 80104f0:	2e00      	cmp	r6, #0
 80104f2:	d0f4      	beq.n	80104de <uxr_deserialize_CLIENT_Representation+0x7a>
 80104f4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80104f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104fc:	4628      	mov	r0, r5
 80104fe:	f001 fdeb 	bl	80120d8 <ucdr_deserialize_string>
 8010502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010506:	4606      	mov	r6, r0
 8010508:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801050c:	4628      	mov	r0, r5
 801050e:	f001 fde3 	bl	80120d8 <ucdr_deserialize_string>
 8010512:	6923      	ldr	r3, [r4, #16]
 8010514:	f109 0901 	add.w	r9, r9, #1
 8010518:	4006      	ands	r6, r0
 801051a:	4599      	cmp	r9, r3
 801051c:	f108 0808 	add.w	r8, r8, #8
 8010520:	b2f6      	uxtb	r6, r6
 8010522:	d3e5      	bcc.n	80104f0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010524:	4037      	ands	r7, r6
 8010526:	e7c8      	b.n	80104ba <uxr_deserialize_CLIENT_Representation+0x56>
 8010528:	4007      	ands	r7, r0
 801052a:	e7c6      	b.n	80104ba <uxr_deserialize_CLIENT_Representation+0x56>

0801052c <uxr_serialize_AGENT_Representation>:
 801052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010530:	2204      	movs	r2, #4
 8010532:	460f      	mov	r7, r1
 8010534:	4605      	mov	r5, r0
 8010536:	f001 fc9f 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 801053a:	2202      	movs	r2, #2
 801053c:	4604      	mov	r4, r0
 801053e:	1d39      	adds	r1, r7, #4
 8010540:	4628      	mov	r0, r5
 8010542:	f001 fc99 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010546:	4020      	ands	r0, r4
 8010548:	2202      	movs	r2, #2
 801054a:	1db9      	adds	r1, r7, #6
 801054c:	b2c4      	uxtb	r4, r0
 801054e:	4628      	mov	r0, r5
 8010550:	f001 fc92 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010554:	7a39      	ldrb	r1, [r7, #8]
 8010556:	4004      	ands	r4, r0
 8010558:	4628      	mov	r0, r5
 801055a:	f7f7 fd07 	bl	8007f6c <ucdr_serialize_bool>
 801055e:	7a3b      	ldrb	r3, [r7, #8]
 8010560:	ea00 0804 	and.w	r8, r0, r4
 8010564:	b913      	cbnz	r3, 801056c <uxr_serialize_AGENT_Representation+0x40>
 8010566:	4640      	mov	r0, r8
 8010568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801056c:	68f9      	ldr	r1, [r7, #12]
 801056e:	4628      	mov	r0, r5
 8010570:	f7f7 ff40 	bl	80083f4 <ucdr_serialize_uint32_t>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	b303      	cbz	r3, 80105ba <uxr_serialize_AGENT_Representation+0x8e>
 8010578:	b1d0      	cbz	r0, 80105b0 <uxr_serialize_AGENT_Representation+0x84>
 801057a:	463e      	mov	r6, r7
 801057c:	f04f 0900 	mov.w	r9, #0
 8010580:	e001      	b.n	8010586 <uxr_serialize_AGENT_Representation+0x5a>
 8010582:	3608      	adds	r6, #8
 8010584:	b1a4      	cbz	r4, 80105b0 <uxr_serialize_AGENT_Representation+0x84>
 8010586:	6931      	ldr	r1, [r6, #16]
 8010588:	4628      	mov	r0, r5
 801058a:	f001 fd95 	bl	80120b8 <ucdr_serialize_string>
 801058e:	6971      	ldr	r1, [r6, #20]
 8010590:	4604      	mov	r4, r0
 8010592:	4628      	mov	r0, r5
 8010594:	f001 fd90 	bl	80120b8 <ucdr_serialize_string>
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f109 0901 	add.w	r9, r9, #1
 801059e:	4004      	ands	r4, r0
 80105a0:	4599      	cmp	r9, r3
 80105a2:	b2e4      	uxtb	r4, r4
 80105a4:	d3ed      	bcc.n	8010582 <uxr_serialize_AGENT_Representation+0x56>
 80105a6:	ea08 0804 	and.w	r8, r8, r4
 80105aa:	4640      	mov	r0, r8
 80105ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b0:	f04f 0800 	mov.w	r8, #0
 80105b4:	4640      	mov	r0, r8
 80105b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ba:	ea08 0800 	and.w	r8, r8, r0
 80105be:	e7d2      	b.n	8010566 <uxr_serialize_AGENT_Representation+0x3a>

080105c0 <uxr_serialize_DATAWRITER_Representation>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	460d      	mov	r5, r1
 80105c4:	7809      	ldrb	r1, [r1, #0]
 80105c6:	4606      	mov	r6, r0
 80105c8:	f7f7 fcfe 	bl	8007fc8 <ucdr_serialize_uint8_t>
 80105cc:	4604      	mov	r4, r0
 80105ce:	b130      	cbz	r0, 80105de <uxr_serialize_DATAWRITER_Representation+0x1e>
 80105d0:	782b      	ldrb	r3, [r5, #0]
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d00c      	beq.n	80105f0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	d010      	beq.n	80105fc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d008      	beq.n	80105f0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80105de:	2202      	movs	r2, #2
 80105e0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80105e4:	4630      	mov	r0, r6
 80105e6:	f001 fc47 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80105ea:	4020      	ands	r0, r4
 80105ec:	b2c0      	uxtb	r0, r0
 80105ee:	bd70      	pop	{r4, r5, r6, pc}
 80105f0:	6869      	ldr	r1, [r5, #4]
 80105f2:	4630      	mov	r0, r6
 80105f4:	f001 fd60 	bl	80120b8 <ucdr_serialize_string>
 80105f8:	4604      	mov	r4, r0
 80105fa:	e7f0      	b.n	80105de <uxr_serialize_DATAWRITER_Representation+0x1e>
 80105fc:	4629      	mov	r1, r5
 80105fe:	4630      	mov	r0, r6
 8010600:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010604:	3104      	adds	r1, #4
 8010606:	f001 fd2b 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 801060a:	4604      	mov	r4, r0
 801060c:	e7e7      	b.n	80105de <uxr_serialize_DATAWRITER_Representation+0x1e>
 801060e:	bf00      	nop

08010610 <uxr_serialize_ObjectVariant.part.0>:
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	780b      	ldrb	r3, [r1, #0]
 8010614:	3b01      	subs	r3, #1
 8010616:	460c      	mov	r4, r1
 8010618:	4605      	mov	r5, r0
 801061a:	2b0d      	cmp	r3, #13
 801061c:	d854      	bhi.n	80106c8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801061e:	e8df f003 	tbb	[pc, r3]
 8010622:	0730      	.short	0x0730
 8010624:	07071b1b 	.word	0x07071b1b
 8010628:	0c530707 	.word	0x0c530707
 801062c:	494e0c0c 	.word	0x494e0c0c
 8010630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010634:	3104      	adds	r1, #4
 8010636:	f7ff bfc3 	b.w	80105c0 <uxr_serialize_DATAWRITER_Representation>
 801063a:	7909      	ldrb	r1, [r1, #4]
 801063c:	f7f7 fcc4 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010640:	b1e8      	cbz	r0, 801067e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010642:	7923      	ldrb	r3, [r4, #4]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d001      	beq.n	801064c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010648:	2b02      	cmp	r3, #2
 801064a:	d13d      	bne.n	80106c8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801064c:	68a1      	ldr	r1, [r4, #8]
 801064e:	4628      	mov	r0, r5
 8010650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010654:	f001 bd30 	b.w	80120b8 <ucdr_serialize_string>
 8010658:	7909      	ldrb	r1, [r1, #4]
 801065a:	f7f7 fcb5 	bl	8007fc8 <ucdr_serialize_uint8_t>
 801065e:	4606      	mov	r6, r0
 8010660:	b120      	cbz	r0, 801066c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010662:	7923      	ldrb	r3, [r4, #4]
 8010664:	2b02      	cmp	r3, #2
 8010666:	d039      	beq.n	80106dc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010668:	2b03      	cmp	r3, #3
 801066a:	d02f      	beq.n	80106cc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801066c:	2202      	movs	r2, #2
 801066e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010672:	4628      	mov	r0, r5
 8010674:	f001 fc00 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010678:	4030      	ands	r0, r6
 801067a:	b2c0      	uxtb	r0, r0
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	2000      	movs	r0, #0
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	7909      	ldrb	r1, [r1, #4]
 8010684:	f7f7 fca0 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010688:	4606      	mov	r6, r0
 801068a:	b158      	cbz	r0, 80106a4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801068c:	7923      	ldrb	r3, [r4, #4]
 801068e:	2b02      	cmp	r3, #2
 8010690:	d003      	beq.n	801069a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010692:	2b03      	cmp	r3, #3
 8010694:	d028      	beq.n	80106e8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010696:	2b01      	cmp	r3, #1
 8010698:	d104      	bne.n	80106a4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801069a:	68a1      	ldr	r1, [r4, #8]
 801069c:	4628      	mov	r0, r5
 801069e:	f001 fd0b 	bl	80120b8 <ucdr_serialize_string>
 80106a2:	4606      	mov	r6, r0
 80106a4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80106a8:	4628      	mov	r0, r5
 80106aa:	f7f8 f9c9 	bl	8008a40 <ucdr_serialize_int16_t>
 80106ae:	4030      	ands	r0, r6
 80106b0:	b2c0      	uxtb	r0, r0
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106b8:	3104      	adds	r1, #4
 80106ba:	f7ff be7b 	b.w	80103b4 <uxr_serialize_CLIENT_Representation>
 80106be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106c2:	3104      	adds	r1, #4
 80106c4:	f7ff bf32 	b.w	801052c <uxr_serialize_AGENT_Representation>
 80106c8:	2001      	movs	r0, #1
 80106ca:	bd70      	pop	{r4, r5, r6, pc}
 80106cc:	68a2      	ldr	r2, [r4, #8]
 80106ce:	f104 010c 	add.w	r1, r4, #12
 80106d2:	4628      	mov	r0, r5
 80106d4:	f001 fcc4 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 80106d8:	4606      	mov	r6, r0
 80106da:	e7c7      	b.n	801066c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80106dc:	68a1      	ldr	r1, [r4, #8]
 80106de:	4628      	mov	r0, r5
 80106e0:	f001 fcea 	bl	80120b8 <ucdr_serialize_string>
 80106e4:	4606      	mov	r6, r0
 80106e6:	e7c1      	b.n	801066c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80106e8:	68a2      	ldr	r2, [r4, #8]
 80106ea:	f104 010c 	add.w	r1, r4, #12
 80106ee:	4628      	mov	r0, r5
 80106f0:	f001 fcb6 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 80106f4:	4606      	mov	r6, r0
 80106f6:	e7d5      	b.n	80106a4 <uxr_serialize_ObjectVariant.part.0+0x94>

080106f8 <uxr_deserialize_DATAWRITER_Representation>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	4606      	mov	r6, r0
 80106fc:	460d      	mov	r5, r1
 80106fe:	f7f7 fc79 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010702:	4604      	mov	r4, r0
 8010704:	b130      	cbz	r0, 8010714 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010706:	782b      	ldrb	r3, [r5, #0]
 8010708:	2b02      	cmp	r3, #2
 801070a:	d00c      	beq.n	8010726 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801070c:	2b03      	cmp	r3, #3
 801070e:	d012      	beq.n	8010736 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010710:	2b01      	cmp	r3, #1
 8010712:	d008      	beq.n	8010726 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010714:	2202      	movs	r2, #2
 8010716:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801071a:	4630      	mov	r0, r6
 801071c:	f001 fc10 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010720:	4020      	ands	r0, r4
 8010722:	b2c0      	uxtb	r0, r0
 8010724:	bd70      	pop	{r4, r5, r6, pc}
 8010726:	6869      	ldr	r1, [r5, #4]
 8010728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801072c:	4630      	mov	r0, r6
 801072e:	f001 fcd3 	bl	80120d8 <ucdr_deserialize_string>
 8010732:	4604      	mov	r4, r0
 8010734:	e7ee      	b.n	8010714 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010736:	1d2b      	adds	r3, r5, #4
 8010738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801073c:	f105 0108 	add.w	r1, r5, #8
 8010740:	4630      	mov	r0, r6
 8010742:	f001 fc9f 	bl	8012084 <ucdr_deserialize_sequence_uint8_t>
 8010746:	4604      	mov	r4, r0
 8010748:	e7e4      	b.n	8010714 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801074a:	bf00      	nop

0801074c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801074c:	b570      	push	{r4, r5, r6, lr}
 801074e:	460d      	mov	r5, r1
 8010750:	7809      	ldrb	r1, [r1, #0]
 8010752:	4606      	mov	r6, r0
 8010754:	f7f7 fc0a 	bl	8007f6c <ucdr_serialize_bool>
 8010758:	782b      	ldrb	r3, [r5, #0]
 801075a:	4604      	mov	r4, r0
 801075c:	b94b      	cbnz	r3, 8010772 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801075e:	7a29      	ldrb	r1, [r5, #8]
 8010760:	4630      	mov	r0, r6
 8010762:	f7f7 fc03 	bl	8007f6c <ucdr_serialize_bool>
 8010766:	7a2b      	ldrb	r3, [r5, #8]
 8010768:	4004      	ands	r4, r0
 801076a:	b2e4      	uxtb	r4, r4
 801076c:	b943      	cbnz	r3, 8010780 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801076e:	4620      	mov	r0, r4
 8010770:	bd70      	pop	{r4, r5, r6, pc}
 8010772:	6869      	ldr	r1, [r5, #4]
 8010774:	4630      	mov	r0, r6
 8010776:	f001 fc9f 	bl	80120b8 <ucdr_serialize_string>
 801077a:	4004      	ands	r4, r0
 801077c:	b2e4      	uxtb	r4, r4
 801077e:	e7ee      	b.n	801075e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010780:	68e9      	ldr	r1, [r5, #12]
 8010782:	4630      	mov	r0, r6
 8010784:	f001 fc98 	bl	80120b8 <ucdr_serialize_string>
 8010788:	4004      	ands	r4, r0
 801078a:	4620      	mov	r0, r4
 801078c:	bd70      	pop	{r4, r5, r6, pc}
 801078e:	bf00      	nop

08010790 <uxr_serialize_OBJK_Topic_Binary>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	460d      	mov	r5, r1
 8010794:	6809      	ldr	r1, [r1, #0]
 8010796:	4606      	mov	r6, r0
 8010798:	f001 fc8e 	bl	80120b8 <ucdr_serialize_string>
 801079c:	7929      	ldrb	r1, [r5, #4]
 801079e:	4604      	mov	r4, r0
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7f7 fbe3 	bl	8007f6c <ucdr_serialize_bool>
 80107a6:	792b      	ldrb	r3, [r5, #4]
 80107a8:	4004      	ands	r4, r0
 80107aa:	b2e4      	uxtb	r4, r4
 80107ac:	b943      	cbnz	r3, 80107c0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80107ae:	7b29      	ldrb	r1, [r5, #12]
 80107b0:	4630      	mov	r0, r6
 80107b2:	f7f7 fbdb 	bl	8007f6c <ucdr_serialize_bool>
 80107b6:	7b2b      	ldrb	r3, [r5, #12]
 80107b8:	4004      	ands	r4, r0
 80107ba:	b93b      	cbnz	r3, 80107cc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80107bc:	4620      	mov	r0, r4
 80107be:	bd70      	pop	{r4, r5, r6, pc}
 80107c0:	68a9      	ldr	r1, [r5, #8]
 80107c2:	4630      	mov	r0, r6
 80107c4:	f001 fc78 	bl	80120b8 <ucdr_serialize_string>
 80107c8:	4004      	ands	r4, r0
 80107ca:	e7f0      	b.n	80107ae <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80107cc:	6929      	ldr	r1, [r5, #16]
 80107ce:	4630      	mov	r0, r6
 80107d0:	f001 fc72 	bl	80120b8 <ucdr_serialize_string>
 80107d4:	4004      	ands	r4, r0
 80107d6:	b2e4      	uxtb	r4, r4
 80107d8:	4620      	mov	r0, r4
 80107da:	bd70      	pop	{r4, r5, r6, pc}

080107dc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80107dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e0:	460c      	mov	r4, r1
 80107e2:	7809      	ldrb	r1, [r1, #0]
 80107e4:	4606      	mov	r6, r0
 80107e6:	f7f7 fbc1 	bl	8007f6c <ucdr_serialize_bool>
 80107ea:	7823      	ldrb	r3, [r4, #0]
 80107ec:	4605      	mov	r5, r0
 80107ee:	b96b      	cbnz	r3, 801080c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80107f0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7f7 fbb9 	bl	8007f6c <ucdr_serialize_bool>
 80107fa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80107fe:	4005      	ands	r5, r0
 8010800:	b2ed      	uxtb	r5, r5
 8010802:	2b00      	cmp	r3, #0
 8010804:	d169      	bne.n	80108da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010806:	4628      	mov	r0, r5
 8010808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080c:	6861      	ldr	r1, [r4, #4]
 801080e:	4630      	mov	r0, r6
 8010810:	f7f7 fdf0 	bl	80083f4 <ucdr_serialize_uint32_t>
 8010814:	6863      	ldr	r3, [r4, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d06b      	beq.n	80108f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801081a:	2800      	cmp	r0, #0
 801081c:	d067      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801081e:	68a1      	ldr	r1, [r4, #8]
 8010820:	4630      	mov	r0, r6
 8010822:	f001 fc49 	bl	80120b8 <ucdr_serialize_string>
 8010826:	6863      	ldr	r3, [r4, #4]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d953      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801082c:	2800      	cmp	r0, #0
 801082e:	d05e      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010830:	68e1      	ldr	r1, [r4, #12]
 8010832:	4630      	mov	r0, r6
 8010834:	f001 fc40 	bl	80120b8 <ucdr_serialize_string>
 8010838:	6863      	ldr	r3, [r4, #4]
 801083a:	2b02      	cmp	r3, #2
 801083c:	d94a      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801083e:	2800      	cmp	r0, #0
 8010840:	d055      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010842:	6921      	ldr	r1, [r4, #16]
 8010844:	4630      	mov	r0, r6
 8010846:	f001 fc37 	bl	80120b8 <ucdr_serialize_string>
 801084a:	6863      	ldr	r3, [r4, #4]
 801084c:	2b03      	cmp	r3, #3
 801084e:	d941      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010850:	2800      	cmp	r0, #0
 8010852:	d04c      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010854:	6961      	ldr	r1, [r4, #20]
 8010856:	4630      	mov	r0, r6
 8010858:	f001 fc2e 	bl	80120b8 <ucdr_serialize_string>
 801085c:	6863      	ldr	r3, [r4, #4]
 801085e:	2b04      	cmp	r3, #4
 8010860:	d938      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010862:	2800      	cmp	r0, #0
 8010864:	d043      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010866:	69a1      	ldr	r1, [r4, #24]
 8010868:	4630      	mov	r0, r6
 801086a:	f001 fc25 	bl	80120b8 <ucdr_serialize_string>
 801086e:	6863      	ldr	r3, [r4, #4]
 8010870:	2b05      	cmp	r3, #5
 8010872:	d92f      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010874:	2800      	cmp	r0, #0
 8010876:	d03a      	beq.n	80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010878:	69e1      	ldr	r1, [r4, #28]
 801087a:	4630      	mov	r0, r6
 801087c:	f001 fc1c 	bl	80120b8 <ucdr_serialize_string>
 8010880:	6863      	ldr	r3, [r4, #4]
 8010882:	2b06      	cmp	r3, #6
 8010884:	d926      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010886:	b390      	cbz	r0, 80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010888:	6a21      	ldr	r1, [r4, #32]
 801088a:	4630      	mov	r0, r6
 801088c:	f001 fc14 	bl	80120b8 <ucdr_serialize_string>
 8010890:	6863      	ldr	r3, [r4, #4]
 8010892:	2b07      	cmp	r3, #7
 8010894:	d91e      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010896:	b350      	cbz	r0, 80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010898:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801089a:	4630      	mov	r0, r6
 801089c:	f001 fc0c 	bl	80120b8 <ucdr_serialize_string>
 80108a0:	6863      	ldr	r3, [r4, #4]
 80108a2:	2b08      	cmp	r3, #8
 80108a4:	d916      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108a6:	b310      	cbz	r0, 80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108a8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80108aa:	4630      	mov	r0, r6
 80108ac:	f001 fc04 	bl	80120b8 <ucdr_serialize_string>
 80108b0:	6863      	ldr	r3, [r4, #4]
 80108b2:	2b09      	cmp	r3, #9
 80108b4:	d90e      	bls.n	80108d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80108b6:	b1d0      	cbz	r0, 80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108b8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80108bc:	2709      	movs	r7, #9
 80108be:	e000      	b.n	80108c2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80108c0:	b1a8      	cbz	r0, 80108ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80108c2:	f858 1b04 	ldr.w	r1, [r8], #4
 80108c6:	4630      	mov	r0, r6
 80108c8:	f001 fbf6 	bl	80120b8 <ucdr_serialize_string>
 80108cc:	6862      	ldr	r2, [r4, #4]
 80108ce:	3701      	adds	r7, #1
 80108d0:	4297      	cmp	r7, r2
 80108d2:	d3f5      	bcc.n	80108c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80108d4:	4005      	ands	r5, r0
 80108d6:	b2ed      	uxtb	r5, r5
 80108d8:	e78a      	b.n	80107f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80108da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80108dc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80108e0:	4630      	mov	r0, r6
 80108e2:	f001 fbbd 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 80108e6:	4005      	ands	r5, r0
 80108e8:	4628      	mov	r0, r5
 80108ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ee:	2500      	movs	r5, #0
 80108f0:	e77e      	b.n	80107f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80108f2:	4028      	ands	r0, r5
 80108f4:	b2c5      	uxtb	r5, r0
 80108f6:	e77b      	b.n	80107f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080108f8 <uxr_serialize_OBJK_Subscriber_Binary>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	460d      	mov	r5, r1
 80108fc:	7809      	ldrb	r1, [r1, #0]
 80108fe:	4606      	mov	r6, r0
 8010900:	f7f7 fb34 	bl	8007f6c <ucdr_serialize_bool>
 8010904:	782b      	ldrb	r3, [r5, #0]
 8010906:	4604      	mov	r4, r0
 8010908:	b94b      	cbnz	r3, 801091e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801090a:	7a29      	ldrb	r1, [r5, #8]
 801090c:	4630      	mov	r0, r6
 801090e:	f7f7 fb2d 	bl	8007f6c <ucdr_serialize_bool>
 8010912:	7a2b      	ldrb	r3, [r5, #8]
 8010914:	4004      	ands	r4, r0
 8010916:	b2e4      	uxtb	r4, r4
 8010918:	b943      	cbnz	r3, 801092c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801091a:	4620      	mov	r0, r4
 801091c:	bd70      	pop	{r4, r5, r6, pc}
 801091e:	6869      	ldr	r1, [r5, #4]
 8010920:	4630      	mov	r0, r6
 8010922:	f001 fbc9 	bl	80120b8 <ucdr_serialize_string>
 8010926:	4004      	ands	r4, r0
 8010928:	b2e4      	uxtb	r4, r4
 801092a:	e7ee      	b.n	801090a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801092c:	f105 010c 	add.w	r1, r5, #12
 8010930:	4630      	mov	r0, r6
 8010932:	f7ff ff53 	bl	80107dc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8010936:	4004      	ands	r4, r0
 8010938:	4620      	mov	r0, r4
 801093a:	bd70      	pop	{r4, r5, r6, pc}

0801093c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801093c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010940:	4688      	mov	r8, r1
 8010942:	8809      	ldrh	r1, [r1, #0]
 8010944:	4681      	mov	r9, r0
 8010946:	f7f7 fb6b 	bl	8008020 <ucdr_serialize_uint16_t>
 801094a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801094e:	4606      	mov	r6, r0
 8010950:	4648      	mov	r0, r9
 8010952:	f7f7 fb0b 	bl	8007f6c <ucdr_serialize_bool>
 8010956:	f898 3002 	ldrb.w	r3, [r8, #2]
 801095a:	4006      	ands	r6, r0
 801095c:	b2f5      	uxtb	r5, r6
 801095e:	b9eb      	cbnz	r3, 801099c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010960:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010964:	4648      	mov	r0, r9
 8010966:	f7f7 fb01 	bl	8007f6c <ucdr_serialize_bool>
 801096a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801096e:	4005      	ands	r5, r0
 8010970:	bb7b      	cbnz	r3, 80109d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010972:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010976:	4648      	mov	r0, r9
 8010978:	f7f7 faf8 	bl	8007f6c <ucdr_serialize_bool>
 801097c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010980:	4005      	ands	r5, r0
 8010982:	b9f3      	cbnz	r3, 80109c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010984:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010988:	4648      	mov	r0, r9
 801098a:	f7f7 faef 	bl	8007f6c <ucdr_serialize_bool>
 801098e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010992:	4005      	ands	r5, r0
 8010994:	b94b      	cbnz	r3, 80109aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010996:	4628      	mov	r0, r5
 8010998:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801099c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80109a0:	4648      	mov	r0, r9
 80109a2:	f7f7 fb3d 	bl	8008020 <ucdr_serialize_uint16_t>
 80109a6:	4005      	ands	r5, r0
 80109a8:	e7da      	b.n	8010960 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80109aa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80109ae:	f108 011c 	add.w	r1, r8, #28
 80109b2:	4648      	mov	r0, r9
 80109b4:	f001 fb54 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 80109b8:	4028      	ands	r0, r5
 80109ba:	b2c5      	uxtb	r5, r0
 80109bc:	4628      	mov	r0, r5
 80109be:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80109c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80109c6:	4648      	mov	r0, r9
 80109c8:	f7f7 fd14 	bl	80083f4 <ucdr_serialize_uint32_t>
 80109cc:	4028      	ands	r0, r5
 80109ce:	b2c5      	uxtb	r5, r0
 80109d0:	e7d8      	b.n	8010984 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80109d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80109d6:	4648      	mov	r0, r9
 80109d8:	f7f7 fd0c 	bl	80083f4 <ucdr_serialize_uint32_t>
 80109dc:	4028      	ands	r0, r5
 80109de:	b2c5      	uxtb	r5, r0
 80109e0:	e7c7      	b.n	8010972 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80109e2:	bf00      	nop

080109e4 <uxr_serialize_OBJK_DataReader_Binary>:
 80109e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e6:	2202      	movs	r2, #2
 80109e8:	460c      	mov	r4, r1
 80109ea:	4606      	mov	r6, r0
 80109ec:	f001 fa44 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80109f0:	78a1      	ldrb	r1, [r4, #2]
 80109f2:	4605      	mov	r5, r0
 80109f4:	4630      	mov	r0, r6
 80109f6:	f7f7 fab9 	bl	8007f6c <ucdr_serialize_bool>
 80109fa:	78a3      	ldrb	r3, [r4, #2]
 80109fc:	4005      	ands	r5, r0
 80109fe:	b2ed      	uxtb	r5, r5
 8010a00:	b90b      	cbnz	r3, 8010a06 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010a02:	4628      	mov	r0, r5
 8010a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a06:	f104 0108 	add.w	r1, r4, #8
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ff96 	bl	801093c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010a10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010a14:	4607      	mov	r7, r0
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7f7 faa8 	bl	8007f6c <ucdr_serialize_bool>
 8010a1c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010a20:	4038      	ands	r0, r7
 8010a22:	b2c7      	uxtb	r7, r0
 8010a24:	b95b      	cbnz	r3, 8010a3e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010a26:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f7f7 fa9e 	bl	8007f6c <ucdr_serialize_bool>
 8010a30:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010a34:	4007      	ands	r7, r0
 8010a36:	b94b      	cbnz	r3, 8010a4c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010a38:	403d      	ands	r5, r7
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a3e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7f7 ff2c 	bl	80088a0 <ucdr_serialize_uint64_t>
 8010a48:	4007      	ands	r7, r0
 8010a4a:	e7ec      	b.n	8010a26 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010a4c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f001 fb32 	bl	80120b8 <ucdr_serialize_string>
 8010a54:	4007      	ands	r7, r0
 8010a56:	b2ff      	uxtb	r7, r7
 8010a58:	e7ee      	b.n	8010a38 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010a5a:	bf00      	nop

08010a5c <uxr_deserialize_ObjectVariant>:
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	4605      	mov	r5, r0
 8010a60:	460e      	mov	r6, r1
 8010a62:	f7f7 fac7 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010a66:	b168      	cbz	r0, 8010a84 <uxr_deserialize_ObjectVariant+0x28>
 8010a68:	7833      	ldrb	r3, [r6, #0]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	2b0d      	cmp	r3, #13
 8010a70:	d809      	bhi.n	8010a86 <uxr_deserialize_ObjectVariant+0x2a>
 8010a72:	e8df f003 	tbb	[pc, r3]
 8010a76:	0a41      	.short	0x0a41
 8010a78:	0a0a2323 	.word	0x0a0a2323
 8010a7c:	10080a0a 	.word	0x10080a0a
 8010a80:	565c1010 	.word	0x565c1010
 8010a84:	2400      	movs	r4, #0
 8010a86:	4620      	mov	r0, r4
 8010a88:	bd70      	pop	{r4, r5, r6, pc}
 8010a8a:	1d31      	adds	r1, r6, #4
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a92:	f7ff be31 	b.w	80106f8 <uxr_deserialize_DATAWRITER_Representation>
 8010a96:	1d31      	adds	r1, r6, #4
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f7f7 faab 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d0f0      	beq.n	8010a84 <uxr_deserialize_ObjectVariant+0x28>
 8010aa2:	7933      	ldrb	r3, [r6, #4]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d001      	beq.n	8010aac <uxr_deserialize_ObjectVariant+0x50>
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	d1ec      	bne.n	8010a86 <uxr_deserialize_ObjectVariant+0x2a>
 8010aac:	68b1      	ldr	r1, [r6, #8]
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ab8:	f001 bb0e 	b.w	80120d8 <ucdr_deserialize_string>
 8010abc:	1d31      	adds	r1, r6, #4
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f7f7 fa98 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	b170      	cbz	r0, 8010ae6 <uxr_deserialize_ObjectVariant+0x8a>
 8010ac8:	7933      	ldrb	r3, [r6, #4]
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	d04c      	beq.n	8010b68 <uxr_deserialize_ObjectVariant+0x10c>
 8010ace:	2b03      	cmp	r3, #3
 8010ad0:	d109      	bne.n	8010ae6 <uxr_deserialize_ObjectVariant+0x8a>
 8010ad2:	f106 0308 	add.w	r3, r6, #8
 8010ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ada:	f106 010c 	add.w	r1, r6, #12
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f001 fad0 	bl	8012084 <ucdr_deserialize_sequence_uint8_t>
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010aec:	4628      	mov	r0, r5
 8010aee:	f001 fa27 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010af2:	4020      	ands	r0, r4
 8010af4:	b2c4      	uxtb	r4, r0
 8010af6:	e7c6      	b.n	8010a86 <uxr_deserialize_ObjectVariant+0x2a>
 8010af8:	1d31      	adds	r1, r6, #4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f7f7 fa7a 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010b00:	4604      	mov	r4, r0
 8010b02:	b130      	cbz	r0, 8010b12 <uxr_deserialize_ObjectVariant+0xb6>
 8010b04:	7933      	ldrb	r3, [r6, #4]
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d036      	beq.n	8010b78 <uxr_deserialize_ObjectVariant+0x11c>
 8010b0a:	2b03      	cmp	r3, #3
 8010b0c:	d03c      	beq.n	8010b88 <uxr_deserialize_ObjectVariant+0x12c>
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d032      	beq.n	8010b78 <uxr_deserialize_ObjectVariant+0x11c>
 8010b12:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010b16:	4628      	mov	r0, r5
 8010b18:	f7f8 f812 	bl	8008b40 <ucdr_deserialize_int16_t>
 8010b1c:	4020      	ands	r0, r4
 8010b1e:	b2c4      	uxtb	r4, r0
 8010b20:	e7b1      	b.n	8010a86 <uxr_deserialize_ObjectVariant+0x2a>
 8010b22:	1d31      	adds	r1, r6, #4
 8010b24:	4628      	mov	r0, r5
 8010b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b2a:	f7ff bc9b 	b.w	8010464 <uxr_deserialize_CLIENT_Representation>
 8010b2e:	2204      	movs	r2, #4
 8010b30:	18b1      	adds	r1, r6, r2
 8010b32:	4628      	mov	r0, r5
 8010b34:	f001 fa04 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010b38:	2202      	movs	r2, #2
 8010b3a:	f106 0108 	add.w	r1, r6, #8
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4628      	mov	r0, r5
 8010b42:	f001 f9fd 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010b46:	2202      	movs	r2, #2
 8010b48:	4004      	ands	r4, r0
 8010b4a:	f106 010a 	add.w	r1, r6, #10
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f001 f9f6 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010b54:	b2e4      	uxtb	r4, r4
 8010b56:	4603      	mov	r3, r0
 8010b58:	f106 010c 	add.w	r1, r6, #12
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	401c      	ands	r4, r3
 8010b60:	f7f7 fa1a 	bl	8007f98 <ucdr_deserialize_bool>
 8010b64:	4004      	ands	r4, r0
 8010b66:	e78e      	b.n	8010a86 <uxr_deserialize_ObjectVariant+0x2a>
 8010b68:	68b1      	ldr	r1, [r6, #8]
 8010b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f001 fab2 	bl	80120d8 <ucdr_deserialize_string>
 8010b74:	4604      	mov	r4, r0
 8010b76:	e7b6      	b.n	8010ae6 <uxr_deserialize_ObjectVariant+0x8a>
 8010b78:	68b1      	ldr	r1, [r6, #8]
 8010b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b7e:	4628      	mov	r0, r5
 8010b80:	f001 faaa 	bl	80120d8 <ucdr_deserialize_string>
 8010b84:	4604      	mov	r4, r0
 8010b86:	e7c4      	b.n	8010b12 <uxr_deserialize_ObjectVariant+0xb6>
 8010b88:	f106 0308 	add.w	r3, r6, #8
 8010b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b90:	f106 010c 	add.w	r1, r6, #12
 8010b94:	4628      	mov	r0, r5
 8010b96:	f001 fa75 	bl	8012084 <ucdr_deserialize_sequence_uint8_t>
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	e7b9      	b.n	8010b12 <uxr_deserialize_ObjectVariant+0xb6>
 8010b9e:	bf00      	nop

08010ba0 <uxr_deserialize_BaseObjectRequest>:
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	460e      	mov	r6, r1
 8010ba8:	f001 f9ca 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010bac:	2202      	movs	r2, #2
 8010bae:	4604      	mov	r4, r0
 8010bb0:	18b1      	adds	r1, r6, r2
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	f001 f9c4 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010bb8:	4020      	ands	r0, r4
 8010bba:	b2c0      	uxtb	r0, r0
 8010bbc:	bd70      	pop	{r4, r5, r6, pc}
 8010bbe:	bf00      	nop

08010bc0 <uxr_serialize_ActivityInfoVariant>:
 8010bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	7809      	ldrb	r1, [r1, #0]
 8010bc8:	4607      	mov	r7, r0
 8010bca:	f7f7 f9fd 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010bce:	4681      	mov	r9, r0
 8010bd0:	b138      	cbz	r0, 8010be2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010bd2:	782b      	ldrb	r3, [r5, #0]
 8010bd4:	2b06      	cmp	r3, #6
 8010bd6:	f000 8082 	beq.w	8010cde <uxr_serialize_ActivityInfoVariant+0x11e>
 8010bda:	2b0d      	cmp	r3, #13
 8010bdc:	d016      	beq.n	8010c0c <uxr_serialize_ActivityInfoVariant+0x4c>
 8010bde:	2b05      	cmp	r3, #5
 8010be0:	d002      	beq.n	8010be8 <uxr_serialize_ActivityInfoVariant+0x28>
 8010be2:	4648      	mov	r0, r9
 8010be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010bec:	4638      	mov	r0, r7
 8010bee:	f7f7 ff27 	bl	8008a40 <ucdr_serialize_int16_t>
 8010bf2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010bf6:	4681      	mov	r9, r0
 8010bf8:	4638      	mov	r0, r7
 8010bfa:	f7f7 fe51 	bl	80088a0 <ucdr_serialize_uint64_t>
 8010bfe:	ea09 0000 	and.w	r0, r9, r0
 8010c02:	fa5f f980 	uxtb.w	r9, r0
 8010c06:	4648      	mov	r0, r9
 8010c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010c10:	4638      	mov	r0, r7
 8010c12:	f7f7 ff15 	bl	8008a40 <ucdr_serialize_int16_t>
 8010c16:	68e9      	ldr	r1, [r5, #12]
 8010c18:	4681      	mov	r9, r0
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	f7f7 fbea 	bl	80083f4 <ucdr_serialize_uint32_t>
 8010c20:	68eb      	ldr	r3, [r5, #12]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d0eb      	beq.n	8010bfe <uxr_serialize_ActivityInfoVariant+0x3e>
 8010c26:	b320      	cbz	r0, 8010c72 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010c28:	f105 080c 	add.w	r8, r5, #12
 8010c2c:	2600      	movs	r6, #0
 8010c2e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8010c32:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8010c36:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	f7f7 f9c4 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d053      	beq.n	8010cec <uxr_serialize_ActivityInfoVariant+0x12c>
 8010c44:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8010c48:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8010c4c:	0074      	lsls	r4, r6, #1
 8010c4e:	00c9      	lsls	r1, r1, #3
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d854      	bhi.n	8010cfe <uxr_serialize_ActivityInfoVariant+0x13e>
 8010c54:	e8df f003 	tbb	[pc, r3]
 8010c58:	02102132 	.word	0x02102132
 8010c5c:	4441      	add	r1, r8
 8010c5e:	4638      	mov	r0, r7
 8010c60:	6889      	ldr	r1, [r1, #8]
 8010c62:	f001 fa29 	bl	80120b8 <ucdr_serialize_string>
 8010c66:	68ea      	ldr	r2, [r5, #12]
 8010c68:	3601      	adds	r6, #1
 8010c6a:	4296      	cmp	r6, r2
 8010c6c:	d242      	bcs.n	8010cf4 <uxr_serialize_ActivityInfoVariant+0x134>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d1dd      	bne.n	8010c2e <uxr_serialize_ActivityInfoVariant+0x6e>
 8010c72:	f04f 0900 	mov.w	r9, #0
 8010c76:	e7b4      	b.n	8010be2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010c78:	3108      	adds	r1, #8
 8010c7a:	4441      	add	r1, r8
 8010c7c:	2210      	movs	r2, #16
 8010c7e:	4638      	mov	r0, r7
 8010c80:	f001 f8fa 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010c84:	4434      	add	r4, r6
 8010c86:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7f7 fbb0 	bl	80083f4 <ucdr_serialize_uint32_t>
 8010c94:	4020      	ands	r0, r4
 8010c96:	b2c0      	uxtb	r0, r0
 8010c98:	e7e5      	b.n	8010c66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010c9a:	3108      	adds	r1, #8
 8010c9c:	4441      	add	r1, r8
 8010c9e:	2204      	movs	r2, #4
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f001 f8e9 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010ca6:	4434      	add	r4, r6
 8010ca8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010cac:	4604      	mov	r4, r0
 8010cae:	8b19      	ldrh	r1, [r3, #24]
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	f7f7 f9b5 	bl	8008020 <ucdr_serialize_uint16_t>
 8010cb6:	4020      	ands	r0, r4
 8010cb8:	b2c0      	uxtb	r0, r0
 8010cba:	e7d4      	b.n	8010c66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010cbc:	3108      	adds	r1, #8
 8010cbe:	4441      	add	r1, r8
 8010cc0:	2202      	movs	r2, #2
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	f001 f8d8 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010cc8:	4434      	add	r4, r6
 8010cca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010cce:	4604      	mov	r4, r0
 8010cd0:	7d99      	ldrb	r1, [r3, #22]
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	f7f7 f978 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010cd8:	4020      	ands	r0, r4
 8010cda:	b2c0      	uxtb	r0, r0
 8010cdc:	e7c3      	b.n	8010c66 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010cde:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce8:	f7f7 beaa 	b.w	8008a40 <ucdr_serialize_int16_t>
 8010cec:	68ea      	ldr	r2, [r5, #12]
 8010cee:	3601      	adds	r6, #1
 8010cf0:	42b2      	cmp	r2, r6
 8010cf2:	d8be      	bhi.n	8010c72 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010cf4:	ea09 0900 	and.w	r9, r9, r0
 8010cf8:	fa5f f989 	uxtb.w	r9, r9
 8010cfc:	e771      	b.n	8010be2 <uxr_serialize_ActivityInfoVariant+0x22>
 8010cfe:	68eb      	ldr	r3, [r5, #12]
 8010d00:	3601      	adds	r6, #1
 8010d02:	429e      	cmp	r6, r3
 8010d04:	f10a 0a18 	add.w	sl, sl, #24
 8010d08:	d395      	bcc.n	8010c36 <uxr_serialize_ActivityInfoVariant+0x76>
 8010d0a:	e76a      	b.n	8010be2 <uxr_serialize_ActivityInfoVariant+0x22>

08010d0c <uxr_deserialize_BaseObjectReply>:
 8010d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d10:	2202      	movs	r2, #2
 8010d12:	4606      	mov	r6, r0
 8010d14:	460f      	mov	r7, r1
 8010d16:	f001 f913 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	18b9      	adds	r1, r7, r2
 8010d1e:	4605      	mov	r5, r0
 8010d20:	4630      	mov	r0, r6
 8010d22:	f001 f90d 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010d26:	1d39      	adds	r1, r7, #4
 8010d28:	4680      	mov	r8, r0
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f7f7 f962 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010d30:	1d79      	adds	r1, r7, #5
 8010d32:	4604      	mov	r4, r0
 8010d34:	4630      	mov	r0, r6
 8010d36:	f7f7 f95d 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010d3a:	ea05 0508 	and.w	r5, r5, r8
 8010d3e:	402c      	ands	r4, r5
 8010d40:	4020      	ands	r0, r4
 8010d42:	b2c0      	uxtb	r0, r0
 8010d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d48 <uxr_serialize_ReadSpecification>:
 8010d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4c:	460e      	mov	r6, r1
 8010d4e:	7809      	ldrb	r1, [r1, #0]
 8010d50:	4607      	mov	r7, r0
 8010d52:	f7f7 f939 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010d56:	7871      	ldrb	r1, [r6, #1]
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	f7f7 f934 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010d60:	78b1      	ldrb	r1, [r6, #2]
 8010d62:	4004      	ands	r4, r0
 8010d64:	4638      	mov	r0, r7
 8010d66:	f7f7 f901 	bl	8007f6c <ucdr_serialize_bool>
 8010d6a:	78b3      	ldrb	r3, [r6, #2]
 8010d6c:	b2e4      	uxtb	r4, r4
 8010d6e:	4004      	ands	r4, r0
 8010d70:	b94b      	cbnz	r3, 8010d86 <uxr_serialize_ReadSpecification+0x3e>
 8010d72:	7a31      	ldrb	r1, [r6, #8]
 8010d74:	4638      	mov	r0, r7
 8010d76:	f7f7 f8f9 	bl	8007f6c <ucdr_serialize_bool>
 8010d7a:	7a33      	ldrb	r3, [r6, #8]
 8010d7c:	4004      	ands	r4, r0
 8010d7e:	b943      	cbnz	r3, 8010d92 <uxr_serialize_ReadSpecification+0x4a>
 8010d80:	4620      	mov	r0, r4
 8010d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d86:	6871      	ldr	r1, [r6, #4]
 8010d88:	4638      	mov	r0, r7
 8010d8a:	f001 f995 	bl	80120b8 <ucdr_serialize_string>
 8010d8e:	4004      	ands	r4, r0
 8010d90:	e7ef      	b.n	8010d72 <uxr_serialize_ReadSpecification+0x2a>
 8010d92:	8971      	ldrh	r1, [r6, #10]
 8010d94:	4638      	mov	r0, r7
 8010d96:	f7f7 f943 	bl	8008020 <ucdr_serialize_uint16_t>
 8010d9a:	89b1      	ldrh	r1, [r6, #12]
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	4638      	mov	r0, r7
 8010da0:	f7f7 f93e 	bl	8008020 <ucdr_serialize_uint16_t>
 8010da4:	89f1      	ldrh	r1, [r6, #14]
 8010da6:	4005      	ands	r5, r0
 8010da8:	4638      	mov	r0, r7
 8010daa:	f7f7 f939 	bl	8008020 <ucdr_serialize_uint16_t>
 8010dae:	8a31      	ldrh	r1, [r6, #16]
 8010db0:	4680      	mov	r8, r0
 8010db2:	4638      	mov	r0, r7
 8010db4:	f7f7 f934 	bl	8008020 <ucdr_serialize_uint16_t>
 8010db8:	b2ed      	uxtb	r5, r5
 8010dba:	4025      	ands	r5, r4
 8010dbc:	ea08 0505 	and.w	r5, r8, r5
 8010dc0:	ea00 0405 	and.w	r4, r0, r5
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dca:	bf00      	nop

08010dcc <uxr_serialize_CREATE_CLIENT_Payload>:
 8010dcc:	f7ff baf2 	b.w	80103b4 <uxr_serialize_CLIENT_Representation>

08010dd0 <uxr_serialize_CREATE_Payload>:
 8010dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	4607      	mov	r7, r0
 8010dd6:	460e      	mov	r6, r1
 8010dd8:	f001 f84e 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010ddc:	2202      	movs	r2, #2
 8010dde:	18b1      	adds	r1, r6, r2
 8010de0:	4605      	mov	r5, r0
 8010de2:	4638      	mov	r0, r7
 8010de4:	f001 f848 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010de8:	7931      	ldrb	r1, [r6, #4]
 8010dea:	4604      	mov	r4, r0
 8010dec:	4638      	mov	r0, r7
 8010dee:	f7f7 f8eb 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010df2:	b170      	cbz	r0, 8010e12 <uxr_serialize_CREATE_Payload+0x42>
 8010df4:	7933      	ldrb	r3, [r6, #4]
 8010df6:	402c      	ands	r4, r5
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	b2e4      	uxtb	r4, r4
 8010dfc:	2b0d      	cmp	r3, #13
 8010dfe:	d809      	bhi.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e00:	e8df f003 	tbb	[pc, r3]
 8010e04:	23230a4c 	.word	0x23230a4c
 8010e08:	0a0a0a0a 	.word	0x0a0a0a0a
 8010e0c:	12121208 	.word	0x12121208
 8010e10:	3e45      	.short	0x3e45
 8010e12:	2400      	movs	r4, #0
 8010e14:	4620      	mov	r0, r4
 8010e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e18:	f106 0108 	add.w	r1, r6, #8
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	f7ff fbcf 	bl	80105c0 <uxr_serialize_DATAWRITER_Representation>
 8010e22:	4004      	ands	r4, r0
 8010e24:	4620      	mov	r0, r4
 8010e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e28:	7a31      	ldrb	r1, [r6, #8]
 8010e2a:	4638      	mov	r0, r7
 8010e2c:	f7f7 f8cc 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d0ee      	beq.n	8010e12 <uxr_serialize_CREATE_Payload+0x42>
 8010e34:	7a33      	ldrb	r3, [r6, #8]
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d001      	beq.n	8010e3e <uxr_serialize_CREATE_Payload+0x6e>
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d1ea      	bne.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e3e:	68f1      	ldr	r1, [r6, #12]
 8010e40:	4638      	mov	r0, r7
 8010e42:	f001 f939 	bl	80120b8 <ucdr_serialize_string>
 8010e46:	4004      	ands	r4, r0
 8010e48:	e7e4      	b.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e4a:	7a31      	ldrb	r1, [r6, #8]
 8010e4c:	4638      	mov	r0, r7
 8010e4e:	f7f7 f8bb 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010e52:	4605      	mov	r5, r0
 8010e54:	b158      	cbz	r0, 8010e6e <uxr_serialize_CREATE_Payload+0x9e>
 8010e56:	7a33      	ldrb	r3, [r6, #8]
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	d034      	beq.n	8010ec6 <uxr_serialize_CREATE_Payload+0xf6>
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d106      	bne.n	8010e6e <uxr_serialize_CREATE_Payload+0x9e>
 8010e60:	68f2      	ldr	r2, [r6, #12]
 8010e62:	f106 0110 	add.w	r1, r6, #16
 8010e66:	4638      	mov	r0, r7
 8010e68:	f001 f8fa 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	2202      	movs	r2, #2
 8010e70:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010e74:	4638      	mov	r0, r7
 8010e76:	f000 ffff 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010e7a:	4028      	ands	r0, r5
 8010e7c:	4004      	ands	r4, r0
 8010e7e:	e7c9      	b.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e80:	f106 0108 	add.w	r1, r6, #8
 8010e84:	4638      	mov	r0, r7
 8010e86:	f7ff fa95 	bl	80103b4 <uxr_serialize_CLIENT_Representation>
 8010e8a:	4004      	ands	r4, r0
 8010e8c:	e7c2      	b.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e8e:	f106 0108 	add.w	r1, r6, #8
 8010e92:	4638      	mov	r0, r7
 8010e94:	f7ff fb4a 	bl	801052c <uxr_serialize_AGENT_Representation>
 8010e98:	4004      	ands	r4, r0
 8010e9a:	e7bb      	b.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010e9c:	7a31      	ldrb	r1, [r6, #8]
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	f7f7 f892 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	b130      	cbz	r0, 8010eb6 <uxr_serialize_CREATE_Payload+0xe6>
 8010ea8:	7a33      	ldrb	r3, [r6, #8]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d011      	beq.n	8010ed2 <uxr_serialize_CREATE_Payload+0x102>
 8010eae:	2b03      	cmp	r3, #3
 8010eb0:	d015      	beq.n	8010ede <uxr_serialize_CREATE_Payload+0x10e>
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d00d      	beq.n	8010ed2 <uxr_serialize_CREATE_Payload+0x102>
 8010eb6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010eba:	4638      	mov	r0, r7
 8010ebc:	f7f7 fdc0 	bl	8008a40 <ucdr_serialize_int16_t>
 8010ec0:	4028      	ands	r0, r5
 8010ec2:	4004      	ands	r4, r0
 8010ec4:	e7a6      	b.n	8010e14 <uxr_serialize_CREATE_Payload+0x44>
 8010ec6:	68f1      	ldr	r1, [r6, #12]
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f001 f8f5 	bl	80120b8 <ucdr_serialize_string>
 8010ece:	4605      	mov	r5, r0
 8010ed0:	e7cd      	b.n	8010e6e <uxr_serialize_CREATE_Payload+0x9e>
 8010ed2:	68f1      	ldr	r1, [r6, #12]
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	f001 f8ef 	bl	80120b8 <ucdr_serialize_string>
 8010eda:	4605      	mov	r5, r0
 8010edc:	e7eb      	b.n	8010eb6 <uxr_serialize_CREATE_Payload+0xe6>
 8010ede:	68f2      	ldr	r2, [r6, #12]
 8010ee0:	f106 0110 	add.w	r1, r6, #16
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	f001 f8bb 	bl	8012060 <ucdr_serialize_sequence_uint8_t>
 8010eea:	4605      	mov	r5, r0
 8010eec:	e7e3      	b.n	8010eb6 <uxr_serialize_CREATE_Payload+0xe6>
 8010eee:	bf00      	nop

08010ef0 <uxr_deserialize_GET_INFO_Payload>:
 8010ef0:	b570      	push	{r4, r5, r6, lr}
 8010ef2:	2202      	movs	r2, #2
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	460e      	mov	r6, r1
 8010ef8:	f001 f822 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010efc:	2202      	movs	r2, #2
 8010efe:	18b1      	adds	r1, r6, r2
 8010f00:	4604      	mov	r4, r0
 8010f02:	4628      	mov	r0, r5
 8010f04:	f001 f81c 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010f08:	1d31      	adds	r1, r6, #4
 8010f0a:	4004      	ands	r4, r0
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f7f7 fba1 	bl	8008654 <ucdr_deserialize_uint32_t>
 8010f12:	b2e4      	uxtb	r4, r4
 8010f14:	4020      	ands	r0, r4
 8010f16:	bd70      	pop	{r4, r5, r6, pc}

08010f18 <uxr_serialize_DELETE_Payload>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	460e      	mov	r6, r1
 8010f20:	f000 ffaa 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010f24:	2202      	movs	r2, #2
 8010f26:	4604      	mov	r4, r0
 8010f28:	18b1      	adds	r1, r6, r2
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f000 ffa4 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010f30:	4020      	ands	r0, r4
 8010f32:	b2c0      	uxtb	r0, r0
 8010f34:	bd70      	pop	{r4, r5, r6, pc}
 8010f36:	bf00      	nop

08010f38 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	460e      	mov	r6, r1
 8010f40:	f7f7 f858 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010f44:	1c71      	adds	r1, r6, #1
 8010f46:	4604      	mov	r4, r0
 8010f48:	4628      	mov	r0, r5
 8010f4a:	f7f7 f853 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010f4e:	2204      	movs	r2, #4
 8010f50:	18b1      	adds	r1, r6, r2
 8010f52:	4680      	mov	r8, r0
 8010f54:	4628      	mov	r0, r5
 8010f56:	f000 fff3 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010f5a:	f106 0108 	add.w	r1, r6, #8
 8010f5e:	4607      	mov	r7, r0
 8010f60:	2202      	movs	r2, #2
 8010f62:	4628      	mov	r0, r5
 8010f64:	f000 ffec 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010f68:	ea04 0308 	and.w	r3, r4, r8
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	ea03 0407 	and.w	r4, r3, r7
 8010f72:	2202      	movs	r2, #2
 8010f74:	4607      	mov	r7, r0
 8010f76:	f106 010a 	add.w	r1, r6, #10
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f000 ffe0 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010f80:	f106 010c 	add.w	r1, r6, #12
 8010f84:	4603      	mov	r3, r0
 8010f86:	4628      	mov	r0, r5
 8010f88:	461d      	mov	r5, r3
 8010f8a:	f7f7 f805 	bl	8007f98 <ucdr_deserialize_bool>
 8010f8e:	403c      	ands	r4, r7
 8010f90:	4025      	ands	r5, r4
 8010f92:	4028      	ands	r0, r5
 8010f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f98 <uxr_deserialize_STATUS_Payload>:
 8010f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f9c:	2202      	movs	r2, #2
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	460f      	mov	r7, r1
 8010fa2:	f000 ffcd 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010fa6:	2202      	movs	r2, #2
 8010fa8:	18b9      	adds	r1, r7, r2
 8010faa:	4605      	mov	r5, r0
 8010fac:	4630      	mov	r0, r6
 8010fae:	f000 ffc7 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8010fb2:	1d39      	adds	r1, r7, #4
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	f7f7 f81c 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010fbc:	1d79      	adds	r1, r7, #5
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7f7 f817 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8010fc6:	ea05 0508 	and.w	r5, r5, r8
 8010fca:	402c      	ands	r4, r5
 8010fcc:	4020      	ands	r0, r4
 8010fce:	b2c0      	uxtb	r0, r0
 8010fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fd4 <uxr_serialize_INFO_Payload>:
 8010fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd8:	2202      	movs	r2, #2
 8010fda:	460c      	mov	r4, r1
 8010fdc:	4605      	mov	r5, r0
 8010fde:	f000 ff4b 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	18a1      	adds	r1, r4, r2
 8010fe6:	4680      	mov	r8, r0
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f000 ff45 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8010fee:	7921      	ldrb	r1, [r4, #4]
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f7f6 ffe8 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8010ff8:	7961      	ldrb	r1, [r4, #5]
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f7f6 ffe3 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8011002:	ea08 0807 	and.w	r8, r8, r7
 8011006:	ea06 0608 	and.w	r6, r6, r8
 801100a:	4006      	ands	r6, r0
 801100c:	7a21      	ldrb	r1, [r4, #8]
 801100e:	4628      	mov	r0, r5
 8011010:	f7f6 ffac 	bl	8007f6c <ucdr_serialize_bool>
 8011014:	7a23      	ldrb	r3, [r4, #8]
 8011016:	b2f7      	uxtb	r7, r6
 8011018:	4606      	mov	r6, r0
 801101a:	b96b      	cbnz	r3, 8011038 <uxr_serialize_INFO_Payload+0x64>
 801101c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011020:	4628      	mov	r0, r5
 8011022:	f7f6 ffa3 	bl	8007f6c <ucdr_serialize_bool>
 8011026:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801102a:	4030      	ands	r0, r6
 801102c:	b2c6      	uxtb	r6, r0
 801102e:	b983      	cbnz	r3, 8011052 <uxr_serialize_INFO_Payload+0x7e>
 8011030:	ea06 0007 	and.w	r0, r6, r7
 8011034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011038:	7b21      	ldrb	r1, [r4, #12]
 801103a:	4628      	mov	r0, r5
 801103c:	f7f6 ffc4 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8011040:	b188      	cbz	r0, 8011066 <uxr_serialize_INFO_Payload+0x92>
 8011042:	f104 010c 	add.w	r1, r4, #12
 8011046:	4628      	mov	r0, r5
 8011048:	f7ff fae2 	bl	8010610 <uxr_serialize_ObjectVariant.part.0>
 801104c:	4030      	ands	r0, r6
 801104e:	b2c6      	uxtb	r6, r0
 8011050:	e7e4      	b.n	801101c <uxr_serialize_INFO_Payload+0x48>
 8011052:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011056:	4628      	mov	r0, r5
 8011058:	f7ff fdb2 	bl	8010bc0 <uxr_serialize_ActivityInfoVariant>
 801105c:	4006      	ands	r6, r0
 801105e:	ea06 0007 	and.w	r0, r6, r7
 8011062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011066:	4606      	mov	r6, r0
 8011068:	e7d8      	b.n	801101c <uxr_serialize_INFO_Payload+0x48>
 801106a:	bf00      	nop

0801106c <uxr_serialize_READ_DATA_Payload>:
 801106c:	b570      	push	{r4, r5, r6, lr}
 801106e:	2202      	movs	r2, #2
 8011070:	4605      	mov	r5, r0
 8011072:	460e      	mov	r6, r1
 8011074:	f000 ff00 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8011078:	2202      	movs	r2, #2
 801107a:	18b1      	adds	r1, r6, r2
 801107c:	4604      	mov	r4, r0
 801107e:	4628      	mov	r0, r5
 8011080:	f000 fefa 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 8011084:	1d31      	adds	r1, r6, #4
 8011086:	4004      	ands	r4, r0
 8011088:	4628      	mov	r0, r5
 801108a:	f7ff fe5d 	bl	8010d48 <uxr_serialize_ReadSpecification>
 801108e:	b2e4      	uxtb	r4, r4
 8011090:	4020      	ands	r0, r4
 8011092:	bd70      	pop	{r4, r5, r6, pc}

08011094 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011094:	b570      	push	{r4, r5, r6, lr}
 8011096:	2202      	movs	r2, #2
 8011098:	4605      	mov	r5, r0
 801109a:	460e      	mov	r6, r1
 801109c:	f000 feec 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80110a0:	2202      	movs	r2, #2
 80110a2:	4604      	mov	r4, r0
 80110a4:	18b1      	adds	r1, r6, r2
 80110a6:	4628      	mov	r0, r5
 80110a8:	f000 fee6 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80110ac:	4020      	ands	r0, r4
 80110ae:	b2c0      	uxtb	r0, r0
 80110b0:	bd70      	pop	{r4, r5, r6, pc}
 80110b2:	bf00      	nop

080110b4 <uxr_serialize_ACKNACK_Payload>:
 80110b4:	b570      	push	{r4, r5, r6, lr}
 80110b6:	460c      	mov	r4, r1
 80110b8:	460e      	mov	r6, r1
 80110ba:	f834 1b02 	ldrh.w	r1, [r4], #2
 80110be:	4605      	mov	r5, r0
 80110c0:	f7f6 ffae 	bl	8008020 <ucdr_serialize_uint16_t>
 80110c4:	2202      	movs	r2, #2
 80110c6:	4621      	mov	r1, r4
 80110c8:	4604      	mov	r4, r0
 80110ca:	4628      	mov	r0, r5
 80110cc:	f000 fed4 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80110d0:	7931      	ldrb	r1, [r6, #4]
 80110d2:	4004      	ands	r4, r0
 80110d4:	4628      	mov	r0, r5
 80110d6:	f7f6 ff77 	bl	8007fc8 <ucdr_serialize_uint8_t>
 80110da:	b2e4      	uxtb	r4, r4
 80110dc:	4020      	ands	r0, r4
 80110de:	bd70      	pop	{r4, r5, r6, pc}

080110e0 <uxr_deserialize_ACKNACK_Payload>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	4605      	mov	r5, r0
 80110e4:	460e      	mov	r6, r1
 80110e6:	f7f7 f89b 	bl	8008220 <ucdr_deserialize_uint16_t>
 80110ea:	2202      	movs	r2, #2
 80110ec:	18b1      	adds	r1, r6, r2
 80110ee:	4604      	mov	r4, r0
 80110f0:	4628      	mov	r0, r5
 80110f2:	f000 ff25 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 80110f6:	1d31      	adds	r1, r6, #4
 80110f8:	4004      	ands	r4, r0
 80110fa:	4628      	mov	r0, r5
 80110fc:	f7f6 ff7a 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8011100:	b2e4      	uxtb	r4, r4
 8011102:	4020      	ands	r0, r4
 8011104:	bd70      	pop	{r4, r5, r6, pc}
 8011106:	bf00      	nop

08011108 <uxr_serialize_HEARTBEAT_Payload>:
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	460d      	mov	r5, r1
 801110c:	8809      	ldrh	r1, [r1, #0]
 801110e:	4606      	mov	r6, r0
 8011110:	f7f6 ff86 	bl	8008020 <ucdr_serialize_uint16_t>
 8011114:	8869      	ldrh	r1, [r5, #2]
 8011116:	4604      	mov	r4, r0
 8011118:	4630      	mov	r0, r6
 801111a:	f7f6 ff81 	bl	8008020 <ucdr_serialize_uint16_t>
 801111e:	7929      	ldrb	r1, [r5, #4]
 8011120:	4004      	ands	r4, r0
 8011122:	4630      	mov	r0, r6
 8011124:	f7f6 ff50 	bl	8007fc8 <ucdr_serialize_uint8_t>
 8011128:	b2e4      	uxtb	r4, r4
 801112a:	4020      	ands	r0, r4
 801112c:	bd70      	pop	{r4, r5, r6, pc}
 801112e:	bf00      	nop

08011130 <uxr_deserialize_HEARTBEAT_Payload>:
 8011130:	b570      	push	{r4, r5, r6, lr}
 8011132:	4605      	mov	r5, r0
 8011134:	460e      	mov	r6, r1
 8011136:	f7f7 f873 	bl	8008220 <ucdr_deserialize_uint16_t>
 801113a:	1cb1      	adds	r1, r6, #2
 801113c:	4604      	mov	r4, r0
 801113e:	4628      	mov	r0, r5
 8011140:	f7f7 f86e 	bl	8008220 <ucdr_deserialize_uint16_t>
 8011144:	1d31      	adds	r1, r6, #4
 8011146:	4004      	ands	r4, r0
 8011148:	4628      	mov	r0, r5
 801114a:	f7f6 ff53 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 801114e:	b2e4      	uxtb	r4, r4
 8011150:	4020      	ands	r0, r4
 8011152:	bd70      	pop	{r4, r5, r6, pc}

08011154 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011158:	4605      	mov	r5, r0
 801115a:	460e      	mov	r6, r1
 801115c:	f7f7 fdfc 	bl	8008d58 <ucdr_deserialize_int32_t>
 8011160:	1d31      	adds	r1, r6, #4
 8011162:	4607      	mov	r7, r0
 8011164:	4628      	mov	r0, r5
 8011166:	f7f7 fa75 	bl	8008654 <ucdr_deserialize_uint32_t>
 801116a:	f106 0108 	add.w	r1, r6, #8
 801116e:	4680      	mov	r8, r0
 8011170:	4628      	mov	r0, r5
 8011172:	f7f7 fdf1 	bl	8008d58 <ucdr_deserialize_int32_t>
 8011176:	f106 010c 	add.w	r1, r6, #12
 801117a:	4604      	mov	r4, r0
 801117c:	4628      	mov	r0, r5
 801117e:	f7f7 fa69 	bl	8008654 <ucdr_deserialize_uint32_t>
 8011182:	ea07 0708 	and.w	r7, r7, r8
 8011186:	403c      	ands	r4, r7
 8011188:	f106 0110 	add.w	r1, r6, #16
 801118c:	4004      	ands	r4, r0
 801118e:	4628      	mov	r0, r5
 8011190:	f7f7 fde2 	bl	8008d58 <ucdr_deserialize_int32_t>
 8011194:	f106 0114 	add.w	r1, r6, #20
 8011198:	4607      	mov	r7, r0
 801119a:	4628      	mov	r0, r5
 801119c:	f7f7 fa5a 	bl	8008654 <ucdr_deserialize_uint32_t>
 80111a0:	b2e4      	uxtb	r4, r4
 80111a2:	403c      	ands	r4, r7
 80111a4:	4020      	ands	r0, r4
 80111a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111aa:	bf00      	nop

080111ac <uxr_serialize_SampleIdentity>:
 80111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b0:	220c      	movs	r2, #12
 80111b2:	4604      	mov	r4, r0
 80111b4:	460d      	mov	r5, r1
 80111b6:	f000 fe5f 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80111ba:	2203      	movs	r2, #3
 80111bc:	f105 010c 	add.w	r1, r5, #12
 80111c0:	4607      	mov	r7, r0
 80111c2:	4620      	mov	r0, r4
 80111c4:	f000 fe58 	bl	8011e78 <ucdr_serialize_array_uint8_t>
 80111c8:	7be9      	ldrb	r1, [r5, #15]
 80111ca:	4680      	mov	r8, r0
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7f6 fefb 	bl	8007fc8 <ucdr_serialize_uint8_t>
 80111d2:	6929      	ldr	r1, [r5, #16]
 80111d4:	4606      	mov	r6, r0
 80111d6:	4620      	mov	r0, r4
 80111d8:	f7f7 fd26 	bl	8008c28 <ucdr_serialize_int32_t>
 80111dc:	6969      	ldr	r1, [r5, #20]
 80111de:	4603      	mov	r3, r0
 80111e0:	4620      	mov	r0, r4
 80111e2:	ea07 0708 	and.w	r7, r7, r8
 80111e6:	461c      	mov	r4, r3
 80111e8:	f7f7 f904 	bl	80083f4 <ucdr_serialize_uint32_t>
 80111ec:	403e      	ands	r6, r7
 80111ee:	4034      	ands	r4, r6
 80111f0:	4020      	ands	r0, r4
 80111f2:	b2c0      	uxtb	r0, r0
 80111f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111f8 <uxr_deserialize_SampleIdentity>:
 80111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111fc:	220c      	movs	r2, #12
 80111fe:	4604      	mov	r4, r0
 8011200:	460d      	mov	r5, r1
 8011202:	f000 fe9d 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8011206:	2203      	movs	r2, #3
 8011208:	f105 010c 	add.w	r1, r5, #12
 801120c:	4607      	mov	r7, r0
 801120e:	4620      	mov	r0, r4
 8011210:	f000 fe96 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8011214:	f105 010f 	add.w	r1, r5, #15
 8011218:	4680      	mov	r8, r0
 801121a:	4620      	mov	r0, r4
 801121c:	f7f6 feea 	bl	8007ff4 <ucdr_deserialize_uint8_t>
 8011220:	f105 0110 	add.w	r1, r5, #16
 8011224:	4606      	mov	r6, r0
 8011226:	4620      	mov	r0, r4
 8011228:	f7f7 fd96 	bl	8008d58 <ucdr_deserialize_int32_t>
 801122c:	f105 0114 	add.w	r1, r5, #20
 8011230:	4603      	mov	r3, r0
 8011232:	4620      	mov	r0, r4
 8011234:	ea07 0708 	and.w	r7, r7, r8
 8011238:	461c      	mov	r4, r3
 801123a:	f7f7 fa0b 	bl	8008654 <ucdr_deserialize_uint32_t>
 801123e:	403e      	ands	r6, r7
 8011240:	4034      	ands	r4, r6
 8011242:	4020      	ands	r0, r4
 8011244:	b2c0      	uxtb	r0, r0
 8011246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801124a:	bf00      	nop

0801124c <rcl_convert_rmw_ret_to_rcl_ret>:
 801124c:	280b      	cmp	r0, #11
 801124e:	dc0d      	bgt.n	801126c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011250:	2800      	cmp	r0, #0
 8011252:	db09      	blt.n	8011268 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011254:	280b      	cmp	r0, #11
 8011256:	d807      	bhi.n	8011268 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011258:	e8df f000 	tbb	[pc, r0]
 801125c:	07060607 	.word	0x07060607
 8011260:	06060606 	.word	0x06060606
 8011264:	07070606 	.word	0x07070606
 8011268:	2001      	movs	r0, #1
 801126a:	4770      	bx	lr
 801126c:	28cb      	cmp	r0, #203	@ 0xcb
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	4770      	bx	lr

08011274 <rcl_get_default_domain_id>:
 8011274:	b530      	push	{r4, r5, lr}
 8011276:	b083      	sub	sp, #12
 8011278:	2300      	movs	r3, #0
 801127a:	9300      	str	r3, [sp, #0]
 801127c:	b1d0      	cbz	r0, 80112b4 <rcl_get_default_domain_id+0x40>
 801127e:	4604      	mov	r4, r0
 8011280:	4669      	mov	r1, sp
 8011282:	4815      	ldr	r0, [pc, #84]	@ (80112d8 <rcl_get_default_domain_id+0x64>)
 8011284:	f7fa fcd8 	bl	800bc38 <rcutils_get_env>
 8011288:	4602      	mov	r2, r0
 801128a:	b110      	cbz	r0, 8011292 <rcl_get_default_domain_id+0x1e>
 801128c:	2001      	movs	r0, #1
 801128e:	b003      	add	sp, #12
 8011290:	bd30      	pop	{r4, r5, pc}
 8011292:	9b00      	ldr	r3, [sp, #0]
 8011294:	b18b      	cbz	r3, 80112ba <rcl_get_default_domain_id+0x46>
 8011296:	7818      	ldrb	r0, [r3, #0]
 8011298:	2800      	cmp	r0, #0
 801129a:	d0f8      	beq.n	801128e <rcl_get_default_domain_id+0x1a>
 801129c:	a901      	add	r1, sp, #4
 801129e:	4618      	mov	r0, r3
 80112a0:	9201      	str	r2, [sp, #4]
 80112a2:	f001 fe9b 	bl	8012fdc <strtoul>
 80112a6:	4605      	mov	r5, r0
 80112a8:	b150      	cbz	r0, 80112c0 <rcl_get_default_domain_id+0x4c>
 80112aa:	1c43      	adds	r3, r0, #1
 80112ac:	d00d      	beq.n	80112ca <rcl_get_default_domain_id+0x56>
 80112ae:	6025      	str	r5, [r4, #0]
 80112b0:	2000      	movs	r0, #0
 80112b2:	e7ec      	b.n	801128e <rcl_get_default_domain_id+0x1a>
 80112b4:	200b      	movs	r0, #11
 80112b6:	b003      	add	sp, #12
 80112b8:	bd30      	pop	{r4, r5, pc}
 80112ba:	4618      	mov	r0, r3
 80112bc:	b003      	add	sp, #12
 80112be:	bd30      	pop	{r4, r5, pc}
 80112c0:	9b01      	ldr	r3, [sp, #4]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d0f2      	beq.n	80112ae <rcl_get_default_domain_id+0x3a>
 80112c8:	e7e0      	b.n	801128c <rcl_get_default_domain_id+0x18>
 80112ca:	f002 f8d3 	bl	8013474 <__errno>
 80112ce:	6803      	ldr	r3, [r0, #0]
 80112d0:	2b22      	cmp	r3, #34	@ 0x22
 80112d2:	d1ec      	bne.n	80112ae <rcl_get_default_domain_id+0x3a>
 80112d4:	e7da      	b.n	801128c <rcl_get_default_domain_id+0x18>
 80112d6:	bf00      	nop
 80112d8:	08014dac 	.word	0x08014dac

080112dc <rcl_expand_topic_name>:
 80112dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e0:	b08b      	sub	sp, #44	@ 0x2c
 80112e2:	9306      	str	r3, [sp, #24]
 80112e4:	2800      	cmp	r0, #0
 80112e6:	f000 80ad 	beq.w	8011444 <rcl_expand_topic_name+0x168>
 80112ea:	460e      	mov	r6, r1
 80112ec:	2900      	cmp	r1, #0
 80112ee:	f000 80a9 	beq.w	8011444 <rcl_expand_topic_name+0x168>
 80112f2:	4617      	mov	r7, r2
 80112f4:	2a00      	cmp	r2, #0
 80112f6:	f000 80a5 	beq.w	8011444 <rcl_expand_topic_name+0x168>
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f000 80a2 	beq.w	8011444 <rcl_expand_topic_name+0x168>
 8011300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 809e 	beq.w	8011444 <rcl_expand_topic_name+0x168>
 8011308:	2200      	movs	r2, #0
 801130a:	a909      	add	r1, sp, #36	@ 0x24
 801130c:	4680      	mov	r8, r0
 801130e:	f000 fa1d 	bl	801174c <rcl_validate_topic_name>
 8011312:	4604      	mov	r4, r0
 8011314:	2800      	cmp	r0, #0
 8011316:	f040 8096 	bne.w	8011446 <rcl_expand_topic_name+0x16a>
 801131a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801131c:	2b00      	cmp	r3, #0
 801131e:	f040 809a 	bne.w	8011456 <rcl_expand_topic_name+0x17a>
 8011322:	4602      	mov	r2, r0
 8011324:	a909      	add	r1, sp, #36	@ 0x24
 8011326:	4630      	mov	r0, r6
 8011328:	f7fb f860 	bl	800c3ec <rmw_validate_node_name>
 801132c:	2800      	cmp	r0, #0
 801132e:	f040 808e 	bne.w	801144e <rcl_expand_topic_name+0x172>
 8011332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011334:	2a00      	cmp	r2, #0
 8011336:	f040 8093 	bne.w	8011460 <rcl_expand_topic_name+0x184>
 801133a:	a909      	add	r1, sp, #36	@ 0x24
 801133c:	4638      	mov	r0, r7
 801133e:	f7fb f837 	bl	800c3b0 <rmw_validate_namespace>
 8011342:	2800      	cmp	r0, #0
 8011344:	f040 8083 	bne.w	801144e <rcl_expand_topic_name+0x172>
 8011348:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801134a:	2c00      	cmp	r4, #0
 801134c:	f040 80ed 	bne.w	801152a <rcl_expand_topic_name+0x24e>
 8011350:	217b      	movs	r1, #123	@ 0x7b
 8011352:	4640      	mov	r0, r8
 8011354:	f002 f802 	bl	801335c <strchr>
 8011358:	f898 3000 	ldrb.w	r3, [r8]
 801135c:	2b2f      	cmp	r3, #47	@ 0x2f
 801135e:	4605      	mov	r5, r0
 8011360:	f000 809e 	beq.w	80114a0 <rcl_expand_topic_name+0x1c4>
 8011364:	2b7e      	cmp	r3, #126	@ 0x7e
 8011366:	f040 80a2 	bne.w	80114ae <rcl_expand_topic_name+0x1d2>
 801136a:	4638      	mov	r0, r7
 801136c:	f7ee ff42 	bl	80001f4 <strlen>
 8011370:	4a82      	ldr	r2, [pc, #520]	@ (801157c <rcl_expand_topic_name+0x2a0>)
 8011372:	4b83      	ldr	r3, [pc, #524]	@ (8011580 <rcl_expand_topic_name+0x2a4>)
 8011374:	2801      	cmp	r0, #1
 8011376:	bf18      	it	ne
 8011378:	4613      	movne	r3, r2
 801137a:	9302      	str	r3, [sp, #8]
 801137c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8011384:	f108 0301 	add.w	r3, r8, #1
 8011388:	9305      	str	r3, [sp, #20]
 801138a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	ab14      	add	r3, sp, #80	@ 0x50
 8011392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011394:	f7fa fc78 	bl	800bc88 <rcutils_format_string_limit>
 8011398:	4682      	mov	sl, r0
 801139a:	2800      	cmp	r0, #0
 801139c:	f000 80c7 	beq.w	801152e <rcl_expand_topic_name+0x252>
 80113a0:	2d00      	cmp	r5, #0
 80113a2:	f000 80a2 	beq.w	80114ea <rcl_expand_topic_name+0x20e>
 80113a6:	217b      	movs	r1, #123	@ 0x7b
 80113a8:	f001 ffd8 	bl	801335c <strchr>
 80113ac:	46d1      	mov	r9, sl
 80113ae:	4605      	mov	r5, r0
 80113b0:	9407      	str	r4, [sp, #28]
 80113b2:	46d3      	mov	fp, sl
 80113b4:	464c      	mov	r4, r9
 80113b6:	2d00      	cmp	r5, #0
 80113b8:	f000 80be 	beq.w	8011538 <rcl_expand_topic_name+0x25c>
 80113bc:	217d      	movs	r1, #125	@ 0x7d
 80113be:	4620      	mov	r0, r4
 80113c0:	f001 ffcc 	bl	801335c <strchr>
 80113c4:	eba0 0905 	sub.w	r9, r0, r5
 80113c8:	f109 0a01 	add.w	sl, r9, #1
 80113cc:	486d      	ldr	r0, [pc, #436]	@ (8011584 <rcl_expand_topic_name+0x2a8>)
 80113ce:	4652      	mov	r2, sl
 80113d0:	4629      	mov	r1, r5
 80113d2:	f001 ffd0 	bl	8013376 <strncmp>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d067      	beq.n	80114aa <rcl_expand_topic_name+0x1ce>
 80113da:	486b      	ldr	r0, [pc, #428]	@ (8011588 <rcl_expand_topic_name+0x2ac>)
 80113dc:	4652      	mov	r2, sl
 80113de:	4629      	mov	r1, r5
 80113e0:	f001 ffc9 	bl	8013376 <strncmp>
 80113e4:	b130      	cbz	r0, 80113f4 <rcl_expand_topic_name+0x118>
 80113e6:	4869      	ldr	r0, [pc, #420]	@ (801158c <rcl_expand_topic_name+0x2b0>)
 80113e8:	4652      	mov	r2, sl
 80113ea:	4629      	mov	r1, r5
 80113ec:	f001 ffc3 	bl	8013376 <strncmp>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d137      	bne.n	8011464 <rcl_expand_topic_name+0x188>
 80113f4:	46b9      	mov	r9, r7
 80113f6:	ab16      	add	r3, sp, #88	@ 0x58
 80113f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80113fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011400:	ab14      	add	r3, sp, #80	@ 0x50
 8011402:	4628      	mov	r0, r5
 8011404:	cb0c      	ldmia	r3, {r2, r3}
 8011406:	4651      	mov	r1, sl
 8011408:	f7fa fd7a 	bl	800bf00 <rcutils_strndup>
 801140c:	4605      	mov	r5, r0
 801140e:	2800      	cmp	r0, #0
 8011410:	f000 809c 	beq.w	801154c <rcl_expand_topic_name+0x270>
 8011414:	464a      	mov	r2, r9
 8011416:	4620      	mov	r0, r4
 8011418:	ab14      	add	r3, sp, #80	@ 0x50
 801141a:	4629      	mov	r1, r5
 801141c:	f7fa fc6e 	bl	800bcfc <rcutils_repl_str>
 8011420:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011422:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011424:	4604      	mov	r4, r0
 8011426:	4628      	mov	r0, r5
 8011428:	4798      	blx	r3
 801142a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801142c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801142e:	4658      	mov	r0, fp
 8011430:	4798      	blx	r3
 8011432:	2c00      	cmp	r4, #0
 8011434:	d07b      	beq.n	801152e <rcl_expand_topic_name+0x252>
 8011436:	217b      	movs	r1, #123	@ 0x7b
 8011438:	4620      	mov	r0, r4
 801143a:	f001 ff8f 	bl	801335c <strchr>
 801143e:	46a3      	mov	fp, r4
 8011440:	4605      	mov	r5, r0
 8011442:	e7b8      	b.n	80113b6 <rcl_expand_topic_name+0xda>
 8011444:	240b      	movs	r4, #11
 8011446:	4620      	mov	r0, r4
 8011448:	b00b      	add	sp, #44	@ 0x2c
 801144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144e:	f7ff fefd 	bl	801124c <rcl_convert_rmw_ret_to_rcl_ret>
 8011452:	4604      	mov	r4, r0
 8011454:	e7f7      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 8011456:	2467      	movs	r4, #103	@ 0x67
 8011458:	4620      	mov	r0, r4
 801145a:	b00b      	add	sp, #44	@ 0x2c
 801145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011460:	24c9      	movs	r4, #201	@ 0xc9
 8011462:	e7f0      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 8011464:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8011468:	9806      	ldr	r0, [sp, #24]
 801146a:	1c69      	adds	r1, r5, #1
 801146c:	f7fa fe62 	bl	800c134 <rcutils_string_map_getn>
 8011470:	4681      	mov	r9, r0
 8011472:	2800      	cmp	r0, #0
 8011474:	d1bf      	bne.n	80113f6 <rcl_expand_topic_name+0x11a>
 8011476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011478:	aa16      	add	r2, sp, #88	@ 0x58
 801147a:	6018      	str	r0, [r3, #0]
 801147c:	ca07      	ldmia	r2, {r0, r1, r2}
 801147e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011482:	ab14      	add	r3, sp, #80	@ 0x50
 8011484:	cb0c      	ldmia	r3, {r2, r3}
 8011486:	4651      	mov	r1, sl
 8011488:	4628      	mov	r0, r5
 801148a:	f7fa fd39 	bl	800bf00 <rcutils_strndup>
 801148e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011490:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011492:	4798      	blx	r3
 8011494:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011496:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011498:	4658      	mov	r0, fp
 801149a:	2469      	movs	r4, #105	@ 0x69
 801149c:	4798      	blx	r3
 801149e:	e7d2      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 80114a0:	2800      	cmp	r0, #0
 80114a2:	d05b      	beq.n	801155c <rcl_expand_topic_name+0x280>
 80114a4:	46c1      	mov	r9, r8
 80114a6:	46a2      	mov	sl, r4
 80114a8:	e782      	b.n	80113b0 <rcl_expand_topic_name+0xd4>
 80114aa:	46b1      	mov	r9, r6
 80114ac:	e7a3      	b.n	80113f6 <rcl_expand_topic_name+0x11a>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d1f8      	bne.n	80114a4 <rcl_expand_topic_name+0x1c8>
 80114b2:	4638      	mov	r0, r7
 80114b4:	f7ee fe9e 	bl	80001f4 <strlen>
 80114b8:	4a35      	ldr	r2, [pc, #212]	@ (8011590 <rcl_expand_topic_name+0x2b4>)
 80114ba:	4b36      	ldr	r3, [pc, #216]	@ (8011594 <rcl_expand_topic_name+0x2b8>)
 80114bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80114c0:	2801      	cmp	r0, #1
 80114c2:	bf18      	it	ne
 80114c4:	4613      	movne	r3, r2
 80114c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80114ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80114ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80114d0:	9703      	str	r7, [sp, #12]
 80114d2:	9200      	str	r2, [sp, #0]
 80114d4:	ab14      	add	r3, sp, #80	@ 0x50
 80114d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80114d8:	f7fa fbd6 	bl	800bc88 <rcutils_format_string_limit>
 80114dc:	4682      	mov	sl, r0
 80114de:	4653      	mov	r3, sl
 80114e0:	b32b      	cbz	r3, 801152e <rcl_expand_topic_name+0x252>
 80114e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114e4:	f8c3 a000 	str.w	sl, [r3]
 80114e8:	e7ad      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 80114ea:	f89a 3000 	ldrb.w	r3, [sl]
 80114ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80114f0:	d0f7      	beq.n	80114e2 <rcl_expand_topic_name+0x206>
 80114f2:	4638      	mov	r0, r7
 80114f4:	f7ee fe7e 	bl	80001f4 <strlen>
 80114f8:	4a25      	ldr	r2, [pc, #148]	@ (8011590 <rcl_expand_topic_name+0x2b4>)
 80114fa:	4b26      	ldr	r3, [pc, #152]	@ (8011594 <rcl_expand_topic_name+0x2b8>)
 80114fc:	f8cd a010 	str.w	sl, [sp, #16]
 8011500:	2801      	cmp	r0, #1
 8011502:	bf18      	it	ne
 8011504:	4613      	movne	r3, r2
 8011506:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801150a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801150e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011510:	9703      	str	r7, [sp, #12]
 8011512:	9200      	str	r2, [sp, #0]
 8011514:	ab14      	add	r3, sp, #80	@ 0x50
 8011516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011518:	f7fa fbb6 	bl	800bc88 <rcutils_format_string_limit>
 801151c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801151e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011520:	4605      	mov	r5, r0
 8011522:	4650      	mov	r0, sl
 8011524:	4798      	blx	r3
 8011526:	46aa      	mov	sl, r5
 8011528:	e7d9      	b.n	80114de <rcl_expand_topic_name+0x202>
 801152a:	24ca      	movs	r4, #202	@ 0xca
 801152c:	e78b      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 801152e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011530:	2300      	movs	r3, #0
 8011532:	6013      	str	r3, [r2, #0]
 8011534:	240a      	movs	r4, #10
 8011536:	e786      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 8011538:	465b      	mov	r3, fp
 801153a:	9c07      	ldr	r4, [sp, #28]
 801153c:	46da      	mov	sl, fp
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1d3      	bne.n	80114ea <rcl_expand_topic_name+0x20e>
 8011542:	f898 3000 	ldrb.w	r3, [r8]
 8011546:	2b2f      	cmp	r3, #47	@ 0x2f
 8011548:	d0cb      	beq.n	80114e2 <rcl_expand_topic_name+0x206>
 801154a:	e7b2      	b.n	80114b2 <rcl_expand_topic_name+0x1d6>
 801154c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8011550:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011552:	6015      	str	r5, [r2, #0]
 8011554:	4658      	mov	r0, fp
 8011556:	4798      	blx	r3
 8011558:	240a      	movs	r4, #10
 801155a:	e774      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 801155c:	ab17      	add	r3, sp, #92	@ 0x5c
 801155e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011562:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011566:	ab14      	add	r3, sp, #80	@ 0x50
 8011568:	cb0e      	ldmia	r3, {r1, r2, r3}
 801156a:	4640      	mov	r0, r8
 801156c:	f7fa fca6 	bl	800bebc <rcutils_strdup>
 8011570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011572:	2800      	cmp	r0, #0
 8011574:	6018      	str	r0, [r3, #0]
 8011576:	bf08      	it	eq
 8011578:	240a      	moveq	r4, #10
 801157a:	e764      	b.n	8011446 <rcl_expand_topic_name+0x16a>
 801157c:	08014dbc 	.word	0x08014dbc
 8011580:	08014b80 	.word	0x08014b80
 8011584:	08014dc4 	.word	0x08014dc4
 8011588:	08014dcc 	.word	0x08014dcc
 801158c:	08014dd4 	.word	0x08014dd4
 8011590:	080145fc 	.word	0x080145fc
 8011594:	080145f4 	.word	0x080145f4

08011598 <rcl_get_default_topic_name_substitutions>:
 8011598:	2800      	cmp	r0, #0
 801159a:	bf0c      	ite	eq
 801159c:	200b      	moveq	r0, #11
 801159e:	2000      	movne	r0, #0
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <rcl_get_zero_initialized_guard_condition>:
 80115a4:	4a03      	ldr	r2, [pc, #12]	@ (80115b4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80115a6:	4603      	mov	r3, r0
 80115a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80115b0:	4618      	mov	r0, r3
 80115b2:	4770      	bx	lr
 80115b4:	08014de0 	.word	0x08014de0

080115b8 <rcl_guard_condition_init_from_rmw>:
 80115b8:	b082      	sub	sp, #8
 80115ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	b086      	sub	sp, #24
 80115c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80115c4:	4604      	mov	r4, r0
 80115c6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80115ca:	460e      	mov	r6, r1
 80115cc:	4617      	mov	r7, r2
 80115ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115d2:	f10d 0e04 	add.w	lr, sp, #4
 80115d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115da:	f8dc 3000 	ldr.w	r3, [ip]
 80115de:	f8ce 3000 	str.w	r3, [lr]
 80115e2:	a801      	add	r0, sp, #4
 80115e4:	f7f6 fbc4 	bl	8007d70 <rcutils_allocator_is_valid>
 80115e8:	b350      	cbz	r0, 8011640 <rcl_guard_condition_init_from_rmw+0x88>
 80115ea:	b34c      	cbz	r4, 8011640 <rcl_guard_condition_init_from_rmw+0x88>
 80115ec:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80115f0:	f1b8 0f00 	cmp.w	r8, #0
 80115f4:	d11e      	bne.n	8011634 <rcl_guard_condition_init_from_rmw+0x7c>
 80115f6:	b31f      	cbz	r7, 8011640 <rcl_guard_condition_init_from_rmw+0x88>
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7f7 fd99 	bl	8009130 <rcl_context_is_valid>
 80115fe:	b328      	cbz	r0, 801164c <rcl_guard_condition_init_from_rmw+0x94>
 8011600:	9b01      	ldr	r3, [sp, #4]
 8011602:	9905      	ldr	r1, [sp, #20]
 8011604:	201c      	movs	r0, #28
 8011606:	4798      	blx	r3
 8011608:	4605      	mov	r5, r0
 801160a:	6060      	str	r0, [r4, #4]
 801160c:	b358      	cbz	r0, 8011666 <rcl_guard_condition_init_from_rmw+0xae>
 801160e:	b1fe      	cbz	r6, 8011650 <rcl_guard_condition_init_from_rmw+0x98>
 8011610:	6006      	str	r6, [r0, #0]
 8011612:	f880 8004 	strb.w	r8, [r0, #4]
 8011616:	ac01      	add	r4, sp, #4
 8011618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801161a:	f105 0c08 	add.w	ip, r5, #8
 801161e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	f8cc 3000 	str.w	r3, [ip]
 8011628:	2000      	movs	r0, #0
 801162a:	b006      	add	sp, #24
 801162c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011630:	b002      	add	sp, #8
 8011632:	4770      	bx	lr
 8011634:	2064      	movs	r0, #100	@ 0x64
 8011636:	b006      	add	sp, #24
 8011638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801163c:	b002      	add	sp, #8
 801163e:	4770      	bx	lr
 8011640:	200b      	movs	r0, #11
 8011642:	b006      	add	sp, #24
 8011644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	b002      	add	sp, #8
 801164a:	4770      	bx	lr
 801164c:	2065      	movs	r0, #101	@ 0x65
 801164e:	e7f2      	b.n	8011636 <rcl_guard_condition_init_from_rmw+0x7e>
 8011650:	6838      	ldr	r0, [r7, #0]
 8011652:	3028      	adds	r0, #40	@ 0x28
 8011654:	f000 fb04 	bl	8011c60 <rmw_create_guard_condition>
 8011658:	6028      	str	r0, [r5, #0]
 801165a:	6865      	ldr	r5, [r4, #4]
 801165c:	682e      	ldr	r6, [r5, #0]
 801165e:	b126      	cbz	r6, 801166a <rcl_guard_condition_init_from_rmw+0xb2>
 8011660:	2301      	movs	r3, #1
 8011662:	712b      	strb	r3, [r5, #4]
 8011664:	e7d7      	b.n	8011616 <rcl_guard_condition_init_from_rmw+0x5e>
 8011666:	200a      	movs	r0, #10
 8011668:	e7e5      	b.n	8011636 <rcl_guard_condition_init_from_rmw+0x7e>
 801166a:	4628      	mov	r0, r5
 801166c:	9b02      	ldr	r3, [sp, #8]
 801166e:	9905      	ldr	r1, [sp, #20]
 8011670:	4798      	blx	r3
 8011672:	6066      	str	r6, [r4, #4]
 8011674:	2001      	movs	r0, #1
 8011676:	e7de      	b.n	8011636 <rcl_guard_condition_init_from_rmw+0x7e>

08011678 <rcl_guard_condition_fini>:
 8011678:	b570      	push	{r4, r5, r6, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	b1f0      	cbz	r0, 80116bc <rcl_guard_condition_fini+0x44>
 801167e:	6843      	ldr	r3, [r0, #4]
 8011680:	4604      	mov	r4, r0
 8011682:	b163      	cbz	r3, 801169e <rcl_guard_condition_fini+0x26>
 8011684:	6818      	ldr	r0, [r3, #0]
 8011686:	68de      	ldr	r6, [r3, #12]
 8011688:	6999      	ldr	r1, [r3, #24]
 801168a:	b160      	cbz	r0, 80116a6 <rcl_guard_condition_fini+0x2e>
 801168c:	791d      	ldrb	r5, [r3, #4]
 801168e:	b965      	cbnz	r5, 80116aa <rcl_guard_condition_fini+0x32>
 8011690:	4618      	mov	r0, r3
 8011692:	47b0      	blx	r6
 8011694:	2300      	movs	r3, #0
 8011696:	4628      	mov	r0, r5
 8011698:	6063      	str	r3, [r4, #4]
 801169a:	b002      	add	sp, #8
 801169c:	bd70      	pop	{r4, r5, r6, pc}
 801169e:	461d      	mov	r5, r3
 80116a0:	4628      	mov	r0, r5
 80116a2:	b002      	add	sp, #8
 80116a4:	bd70      	pop	{r4, r5, r6, pc}
 80116a6:	4605      	mov	r5, r0
 80116a8:	e7f2      	b.n	8011690 <rcl_guard_condition_fini+0x18>
 80116aa:	9101      	str	r1, [sp, #4]
 80116ac:	f000 faec 	bl	8011c88 <rmw_destroy_guard_condition>
 80116b0:	1e05      	subs	r5, r0, #0
 80116b2:	6863      	ldr	r3, [r4, #4]
 80116b4:	9901      	ldr	r1, [sp, #4]
 80116b6:	bf18      	it	ne
 80116b8:	2501      	movne	r5, #1
 80116ba:	e7e9      	b.n	8011690 <rcl_guard_condition_fini+0x18>
 80116bc:	250b      	movs	r5, #11
 80116be:	4628      	mov	r0, r5
 80116c0:	b002      	add	sp, #8
 80116c2:	bd70      	pop	{r4, r5, r6, pc}

080116c4 <rcl_guard_condition_get_default_options>:
 80116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116c6:	b087      	sub	sp, #28
 80116c8:	4606      	mov	r6, r0
 80116ca:	4668      	mov	r0, sp
 80116cc:	f7f6 fb42 	bl	8007d54 <rcutils_get_default_allocator>
 80116d0:	4b09      	ldr	r3, [pc, #36]	@ (80116f8 <rcl_guard_condition_get_default_options+0x34>)
 80116d2:	46ee      	mov	lr, sp
 80116d4:	469c      	mov	ip, r3
 80116d6:	461d      	mov	r5, r3
 80116d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80116dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116e2:	4634      	mov	r4, r6
 80116e4:	f8de 7000 	ldr.w	r7, [lr]
 80116e8:	f8cc 7000 	str.w	r7, [ip]
 80116ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116ee:	4630      	mov	r0, r6
 80116f0:	6027      	str	r7, [r4, #0]
 80116f2:	b007      	add	sp, #28
 80116f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116f6:	bf00      	nop
 80116f8:	2000da10 	.word	0x2000da10

080116fc <rcl_guard_condition_get_rmw_handle>:
 80116fc:	b110      	cbz	r0, 8011704 <rcl_guard_condition_get_rmw_handle+0x8>
 80116fe:	6840      	ldr	r0, [r0, #4]
 8011700:	b100      	cbz	r0, 8011704 <rcl_guard_condition_get_rmw_handle+0x8>
 8011702:	6800      	ldr	r0, [r0, #0]
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop

08011708 <rcl_publisher_is_valid>:
 8011708:	b1a0      	cbz	r0, 8011734 <rcl_publisher_is_valid+0x2c>
 801170a:	6803      	ldr	r3, [r0, #0]
 801170c:	b510      	push	{r4, lr}
 801170e:	4604      	mov	r4, r0
 8011710:	b173      	cbz	r3, 8011730 <rcl_publisher_is_valid+0x28>
 8011712:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8011716:	b15a      	cbz	r2, 8011730 <rcl_publisher_is_valid+0x28>
 8011718:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801171c:	f7f7 fd08 	bl	8009130 <rcl_context_is_valid>
 8011720:	b130      	cbz	r0, 8011730 <rcl_publisher_is_valid+0x28>
 8011722:	6823      	ldr	r3, [r4, #0]
 8011724:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8011728:	3800      	subs	r0, #0
 801172a:	bf18      	it	ne
 801172c:	2001      	movne	r0, #1
 801172e:	bd10      	pop	{r4, pc}
 8011730:	2000      	movs	r0, #0
 8011732:	bd10      	pop	{r4, pc}
 8011734:	2000      	movs	r0, #0
 8011736:	4770      	bx	lr

08011738 <rcl_publisher_is_valid_except_context>:
 8011738:	b130      	cbz	r0, 8011748 <rcl_publisher_is_valid_except_context+0x10>
 801173a:	6800      	ldr	r0, [r0, #0]
 801173c:	b120      	cbz	r0, 8011748 <rcl_publisher_is_valid_except_context+0x10>
 801173e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8011742:	3800      	subs	r0, #0
 8011744:	bf18      	it	ne
 8011746:	2001      	movne	r0, #1
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop

0801174c <rcl_validate_topic_name>:
 801174c:	2800      	cmp	r0, #0
 801174e:	d07a      	beq.n	8011846 <rcl_validate_topic_name+0xfa>
 8011750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011754:	460e      	mov	r6, r1
 8011756:	2900      	cmp	r1, #0
 8011758:	d07c      	beq.n	8011854 <rcl_validate_topic_name+0x108>
 801175a:	4617      	mov	r7, r2
 801175c:	4605      	mov	r5, r0
 801175e:	f7ee fd49 	bl	80001f4 <strlen>
 8011762:	b1b0      	cbz	r0, 8011792 <rcl_validate_topic_name+0x46>
 8011764:	f895 9000 	ldrb.w	r9, [r5]
 8011768:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80118ec <rcl_validate_topic_name+0x1a0>
 801176c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011770:	f013 0304 	ands.w	r3, r3, #4
 8011774:	d169      	bne.n	801184a <rcl_validate_topic_name+0xfe>
 8011776:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801177a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801177e:	2a2f      	cmp	r2, #47	@ 0x2f
 8011780:	d10e      	bne.n	80117a0 <rcl_validate_topic_name+0x54>
 8011782:	2202      	movs	r2, #2
 8011784:	6032      	str	r2, [r6, #0]
 8011786:	b36f      	cbz	r7, 80117e4 <rcl_validate_topic_name+0x98>
 8011788:	f8c7 8000 	str.w	r8, [r7]
 801178c:	4618      	mov	r0, r3
 801178e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011792:	2301      	movs	r3, #1
 8011794:	6033      	str	r3, [r6, #0]
 8011796:	b32f      	cbz	r7, 80117e4 <rcl_validate_topic_name+0x98>
 8011798:	2000      	movs	r0, #0
 801179a:	6038      	str	r0, [r7, #0]
 801179c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80117a4:	461c      	mov	r4, r3
 80117a6:	4619      	mov	r1, r3
 80117a8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80117ac:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80117b0:	f1be 0f09 	cmp.w	lr, #9
 80117b4:	d919      	bls.n	80117ea <rcl_validate_topic_name+0x9e>
 80117b6:	f022 0e20 	bic.w	lr, r2, #32
 80117ba:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80117be:	f1be 0f19 	cmp.w	lr, #25
 80117c2:	d912      	bls.n	80117ea <rcl_validate_topic_name+0x9e>
 80117c4:	2a5f      	cmp	r2, #95	@ 0x5f
 80117c6:	d019      	beq.n	80117fc <rcl_validate_topic_name+0xb0>
 80117c8:	2a2f      	cmp	r2, #47	@ 0x2f
 80117ca:	d051      	beq.n	8011870 <rcl_validate_topic_name+0x124>
 80117cc:	2a7e      	cmp	r2, #126	@ 0x7e
 80117ce:	d048      	beq.n	8011862 <rcl_validate_topic_name+0x116>
 80117d0:	2a7b      	cmp	r2, #123	@ 0x7b
 80117d2:	d054      	beq.n	801187e <rcl_validate_topic_name+0x132>
 80117d4:	2a7d      	cmp	r2, #125	@ 0x7d
 80117d6:	d161      	bne.n	801189c <rcl_validate_topic_name+0x150>
 80117d8:	2c00      	cmp	r4, #0
 80117da:	d155      	bne.n	8011888 <rcl_validate_topic_name+0x13c>
 80117dc:	2305      	movs	r3, #5
 80117de:	6033      	str	r3, [r6, #0]
 80117e0:	b107      	cbz	r7, 80117e4 <rcl_validate_topic_name+0x98>
 80117e2:	6039      	str	r1, [r7, #0]
 80117e4:	2000      	movs	r0, #0
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80117ee:	0752      	lsls	r2, r2, #29
 80117f0:	d504      	bpl.n	80117fc <rcl_validate_topic_name+0xb0>
 80117f2:	b11c      	cbz	r4, 80117fc <rcl_validate_topic_name+0xb0>
 80117f4:	b111      	cbz	r1, 80117fc <rcl_validate_topic_name+0xb0>
 80117f6:	1e4a      	subs	r2, r1, #1
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d02d      	beq.n	8011858 <rcl_validate_topic_name+0x10c>
 80117fc:	3101      	adds	r1, #1
 80117fe:	4288      	cmp	r0, r1
 8011800:	d1d2      	bne.n	80117a8 <rcl_validate_topic_name+0x5c>
 8011802:	2c00      	cmp	r4, #0
 8011804:	d145      	bne.n	8011892 <rcl_validate_topic_name+0x146>
 8011806:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801180a:	d04f      	beq.n	80118ac <rcl_validate_topic_name+0x160>
 801180c:	4620      	mov	r0, r4
 801180e:	2301      	movs	r3, #1
 8011810:	e006      	b.n	8011820 <rcl_validate_topic_name+0xd4>
 8011812:	428b      	cmp	r3, r1
 8011814:	f105 0501 	add.w	r5, r5, #1
 8011818:	f103 0201 	add.w	r2, r3, #1
 801181c:	d236      	bcs.n	801188c <rcl_validate_topic_name+0x140>
 801181e:	4613      	mov	r3, r2
 8011820:	4580      	cmp	r8, r0
 8011822:	f100 0001 	add.w	r0, r0, #1
 8011826:	d0f4      	beq.n	8011812 <rcl_validate_topic_name+0xc6>
 8011828:	782a      	ldrb	r2, [r5, #0]
 801182a:	2a2f      	cmp	r2, #47	@ 0x2f
 801182c:	d1f1      	bne.n	8011812 <rcl_validate_topic_name+0xc6>
 801182e:	786a      	ldrb	r2, [r5, #1]
 8011830:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011834:	0754      	lsls	r4, r2, #29
 8011836:	d5ec      	bpl.n	8011812 <rcl_validate_topic_name+0xc6>
 8011838:	2204      	movs	r2, #4
 801183a:	6032      	str	r2, [r6, #0]
 801183c:	2f00      	cmp	r7, #0
 801183e:	d0d1      	beq.n	80117e4 <rcl_validate_topic_name+0x98>
 8011840:	603b      	str	r3, [r7, #0]
 8011842:	2000      	movs	r0, #0
 8011844:	e7aa      	b.n	801179c <rcl_validate_topic_name+0x50>
 8011846:	200b      	movs	r0, #11
 8011848:	4770      	bx	lr
 801184a:	2304      	movs	r3, #4
 801184c:	6033      	str	r3, [r6, #0]
 801184e:	2f00      	cmp	r7, #0
 8011850:	d1a2      	bne.n	8011798 <rcl_validate_topic_name+0x4c>
 8011852:	e7c7      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 8011854:	200b      	movs	r0, #11
 8011856:	e7a1      	b.n	801179c <rcl_validate_topic_name+0x50>
 8011858:	2309      	movs	r3, #9
 801185a:	6033      	str	r3, [r6, #0]
 801185c:	2f00      	cmp	r7, #0
 801185e:	d1c0      	bne.n	80117e2 <rcl_validate_topic_name+0x96>
 8011860:	e7c0      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 8011862:	2900      	cmp	r1, #0
 8011864:	d0ca      	beq.n	80117fc <rcl_validate_topic_name+0xb0>
 8011866:	2306      	movs	r3, #6
 8011868:	6033      	str	r3, [r6, #0]
 801186a:	2f00      	cmp	r7, #0
 801186c:	d1b9      	bne.n	80117e2 <rcl_validate_topic_name+0x96>
 801186e:	e7b9      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 8011870:	2c00      	cmp	r4, #0
 8011872:	d0c3      	beq.n	80117fc <rcl_validate_topic_name+0xb0>
 8011874:	2308      	movs	r3, #8
 8011876:	6033      	str	r3, [r6, #0]
 8011878:	2f00      	cmp	r7, #0
 801187a:	d1b2      	bne.n	80117e2 <rcl_validate_topic_name+0x96>
 801187c:	e7b2      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 801187e:	2c00      	cmp	r4, #0
 8011880:	d1f8      	bne.n	8011874 <rcl_validate_topic_name+0x128>
 8011882:	460b      	mov	r3, r1
 8011884:	2401      	movs	r4, #1
 8011886:	e7b9      	b.n	80117fc <rcl_validate_topic_name+0xb0>
 8011888:	2400      	movs	r4, #0
 801188a:	e7b7      	b.n	80117fc <rcl_validate_topic_name+0xb0>
 801188c:	2000      	movs	r0, #0
 801188e:	6030      	str	r0, [r6, #0]
 8011890:	e784      	b.n	801179c <rcl_validate_topic_name+0x50>
 8011892:	2205      	movs	r2, #5
 8011894:	6032      	str	r2, [r6, #0]
 8011896:	2f00      	cmp	r7, #0
 8011898:	d1d2      	bne.n	8011840 <rcl_validate_topic_name+0xf4>
 801189a:	e7a3      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 801189c:	2c00      	cmp	r4, #0
 801189e:	bf14      	ite	ne
 80118a0:	2308      	movne	r3, #8
 80118a2:	2303      	moveq	r3, #3
 80118a4:	6033      	str	r3, [r6, #0]
 80118a6:	2f00      	cmp	r7, #0
 80118a8:	d19b      	bne.n	80117e2 <rcl_validate_topic_name+0x96>
 80118aa:	e79b      	b.n	80117e4 <rcl_validate_topic_name+0x98>
 80118ac:	2301      	movs	r3, #1
 80118ae:	e00a      	b.n	80118c6 <rcl_validate_topic_name+0x17a>
 80118b0:	2c01      	cmp	r4, #1
 80118b2:	d013      	beq.n	80118dc <rcl_validate_topic_name+0x190>
 80118b4:	4299      	cmp	r1, r3
 80118b6:	f104 0401 	add.w	r4, r4, #1
 80118ba:	f105 0501 	add.w	r5, r5, #1
 80118be:	f103 0201 	add.w	r2, r3, #1
 80118c2:	d9e3      	bls.n	801188c <rcl_validate_topic_name+0x140>
 80118c4:	4613      	mov	r3, r2
 80118c6:	45a0      	cmp	r8, r4
 80118c8:	d0f4      	beq.n	80118b4 <rcl_validate_topic_name+0x168>
 80118ca:	782a      	ldrb	r2, [r5, #0]
 80118cc:	2a2f      	cmp	r2, #47	@ 0x2f
 80118ce:	d1ef      	bne.n	80118b0 <rcl_validate_topic_name+0x164>
 80118d0:	786a      	ldrb	r2, [r5, #1]
 80118d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80118d6:	0752      	lsls	r2, r2, #29
 80118d8:	d5ec      	bpl.n	80118b4 <rcl_validate_topic_name+0x168>
 80118da:	e7ad      	b.n	8011838 <rcl_validate_topic_name+0xec>
 80118dc:	2307      	movs	r3, #7
 80118de:	6033      	str	r3, [r6, #0]
 80118e0:	2f00      	cmp	r7, #0
 80118e2:	f43f af7f 	beq.w	80117e4 <rcl_validate_topic_name+0x98>
 80118e6:	603c      	str	r4, [r7, #0]
 80118e8:	2000      	movs	r0, #0
 80118ea:	e757      	b.n	801179c <rcl_validate_topic_name+0x50>
 80118ec:	08014e74 	.word	0x08014e74

080118f0 <rcutils_string_array_fini>:
 80118f0:	b320      	cbz	r0, 801193c <rcutils_string_array_fini+0x4c>
 80118f2:	b570      	push	{r4, r5, r6, lr}
 80118f4:	4604      	mov	r4, r0
 80118f6:	6840      	ldr	r0, [r0, #4]
 80118f8:	b1d8      	cbz	r0, 8011932 <rcutils_string_array_fini+0x42>
 80118fa:	f104 0008 	add.w	r0, r4, #8
 80118fe:	f7f6 fa37 	bl	8007d70 <rcutils_allocator_is_valid>
 8011902:	b1b8      	cbz	r0, 8011934 <rcutils_string_array_fini+0x44>
 8011904:	6823      	ldr	r3, [r4, #0]
 8011906:	b1bb      	cbz	r3, 8011938 <rcutils_string_array_fini+0x48>
 8011908:	2500      	movs	r5, #0
 801190a:	6860      	ldr	r0, [r4, #4]
 801190c:	462e      	mov	r6, r5
 801190e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011912:	68e3      	ldr	r3, [r4, #12]
 8011914:	69a1      	ldr	r1, [r4, #24]
 8011916:	4798      	blx	r3
 8011918:	e9d4 3000 	ldrd	r3, r0, [r4]
 801191c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011920:	3501      	adds	r5, #1
 8011922:	429d      	cmp	r5, r3
 8011924:	d3f3      	bcc.n	801190e <rcutils_string_array_fini+0x1e>
 8011926:	68e3      	ldr	r3, [r4, #12]
 8011928:	69a1      	ldr	r1, [r4, #24]
 801192a:	4798      	blx	r3
 801192c:	2000      	movs	r0, #0
 801192e:	e9c4 0000 	strd	r0, r0, [r4]
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	200b      	movs	r0, #11
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	6860      	ldr	r0, [r4, #4]
 801193a:	e7f4      	b.n	8011926 <rcutils_string_array_fini+0x36>
 801193c:	200b      	movs	r0, #11
 801193e:	4770      	bx	lr

08011940 <rmw_time_equal>:
 8011940:	b4f0      	push	{r4, r5, r6, r7}
 8011942:	b084      	sub	sp, #16
 8011944:	ac04      	add	r4, sp, #16
 8011946:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801194a:	4603      	mov	r3, r0
 801194c:	4924      	ldr	r1, [pc, #144]	@ (80119e0 <rmw_time_equal+0xa0>)
 801194e:	9e03      	ldr	r6, [sp, #12]
 8011950:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011954:	2202      	movs	r2, #2
 8011956:	4299      	cmp	r1, r3
 8011958:	41aa      	sbcs	r2, r5
 801195a:	d330      	bcc.n	80119be <rmw_time_equal+0x7e>
 801195c:	4c21      	ldr	r4, [pc, #132]	@ (80119e4 <rmw_time_equal+0xa4>)
 801195e:	fba3 3204 	umull	r3, r2, r3, r4
 8011962:	fb04 2205 	mla	r2, r4, r5, r2
 8011966:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801196a:	43dd      	mvns	r5, r3
 801196c:	1a8c      	subs	r4, r1, r2
 801196e:	4285      	cmp	r5, r0
 8011970:	41b4      	sbcs	r4, r6
 8011972:	d332      	bcc.n	80119da <rmw_time_equal+0x9a>
 8011974:	eb10 0c03 	adds.w	ip, r0, r3
 8011978:	eb42 0106 	adc.w	r1, r2, r6
 801197c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011980:	4817      	ldr	r0, [pc, #92]	@ (80119e0 <rmw_time_equal+0xa0>)
 8011982:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011984:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011986:	2202      	movs	r2, #2
 8011988:	4298      	cmp	r0, r3
 801198a:	41b2      	sbcs	r2, r6
 801198c:	d31c      	bcc.n	80119c8 <rmw_time_equal+0x88>
 801198e:	4c15      	ldr	r4, [pc, #84]	@ (80119e4 <rmw_time_equal+0xa4>)
 8011990:	fba3 3204 	umull	r3, r2, r3, r4
 8011994:	fb04 2206 	mla	r2, r4, r6, r2
 8011998:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801199c:	43de      	mvns	r6, r3
 801199e:	1a84      	subs	r4, r0, r2
 80119a0:	42ae      	cmp	r6, r5
 80119a2:	41bc      	sbcs	r4, r7
 80119a4:	d315      	bcc.n	80119d2 <rmw_time_equal+0x92>
 80119a6:	195b      	adds	r3, r3, r5
 80119a8:	eb42 0207 	adc.w	r2, r2, r7
 80119ac:	428a      	cmp	r2, r1
 80119ae:	bf08      	it	eq
 80119b0:	4563      	cmpeq	r3, ip
 80119b2:	bf0c      	ite	eq
 80119b4:	2001      	moveq	r0, #1
 80119b6:	2000      	movne	r0, #0
 80119b8:	b004      	add	sp, #16
 80119ba:	bcf0      	pop	{r4, r5, r6, r7}
 80119bc:	4770      	bx	lr
 80119be:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80119c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80119c6:	e7d9      	b.n	801197c <rmw_time_equal+0x3c>
 80119c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80119d0:	e7ec      	b.n	80119ac <rmw_time_equal+0x6c>
 80119d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119d6:	4602      	mov	r2, r0
 80119d8:	e7e8      	b.n	80119ac <rmw_time_equal+0x6c>
 80119da:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80119de:	e7cd      	b.n	801197c <rmw_time_equal+0x3c>
 80119e0:	25c17d04 	.word	0x25c17d04
 80119e4:	3b9aca00 	.word	0x3b9aca00

080119e8 <rmw_time_total_nsec>:
 80119e8:	b470      	push	{r4, r5, r6}
 80119ea:	b085      	sub	sp, #20
 80119ec:	ac04      	add	r4, sp, #16
 80119ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80119f2:	4603      	mov	r3, r0
 80119f4:	4912      	ldr	r1, [pc, #72]	@ (8011a40 <rmw_time_total_nsec+0x58>)
 80119f6:	9e03      	ldr	r6, [sp, #12]
 80119f8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80119fc:	2202      	movs	r2, #2
 80119fe:	4299      	cmp	r1, r3
 8011a00:	41aa      	sbcs	r2, r5
 8011a02:	d311      	bcc.n	8011a28 <rmw_time_total_nsec+0x40>
 8011a04:	4c0f      	ldr	r4, [pc, #60]	@ (8011a44 <rmw_time_total_nsec+0x5c>)
 8011a06:	fba3 3204 	umull	r3, r2, r3, r4
 8011a0a:	fb04 2205 	mla	r2, r4, r5, r2
 8011a0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011a12:	43dd      	mvns	r5, r3
 8011a14:	1a8c      	subs	r4, r1, r2
 8011a16:	4285      	cmp	r5, r0
 8011a18:	41b4      	sbcs	r4, r6
 8011a1a:	d30c      	bcc.n	8011a36 <rmw_time_total_nsec+0x4e>
 8011a1c:	1818      	adds	r0, r3, r0
 8011a1e:	eb42 0106 	adc.w	r1, r2, r6
 8011a22:	b005      	add	sp, #20
 8011a24:	bc70      	pop	{r4, r5, r6}
 8011a26:	4770      	bx	lr
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011a30:	b005      	add	sp, #20
 8011a32:	bc70      	pop	{r4, r5, r6}
 8011a34:	4770      	bx	lr
 8011a36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a3a:	b005      	add	sp, #20
 8011a3c:	bc70      	pop	{r4, r5, r6}
 8011a3e:	4770      	bx	lr
 8011a40:	25c17d04 	.word	0x25c17d04
 8011a44:	3b9aca00 	.word	0x3b9aca00

08011a48 <on_status>:
 8011a48:	b082      	sub	sp, #8
 8011a4a:	b002      	add	sp, #8
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop

08011a50 <on_topic>:
 8011a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a54:	4a22      	ldr	r2, [pc, #136]	@ (8011ae0 <on_topic+0x90>)
 8011a56:	b094      	sub	sp, #80	@ 0x50
 8011a58:	6812      	ldr	r2, [r2, #0]
 8011a5a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011a5c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011a60:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8011a64:	b3c2      	cbz	r2, 8011ad8 <on_topic+0x88>
 8011a66:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8011a6a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8011a6e:	e001      	b.n	8011a74 <on_topic+0x24>
 8011a70:	6852      	ldr	r2, [r2, #4]
 8011a72:	b38a      	cbz	r2, 8011ad8 <on_topic+0x88>
 8011a74:	6894      	ldr	r4, [r2, #8]
 8011a76:	8aa3      	ldrh	r3, [r4, #20]
 8011a78:	428b      	cmp	r3, r1
 8011a7a:	d1f9      	bne.n	8011a70 <on_topic+0x20>
 8011a7c:	7da3      	ldrb	r3, [r4, #22]
 8011a7e:	4283      	cmp	r3, r0
 8011a80:	d1f6      	bne.n	8011a70 <on_topic+0x20>
 8011a82:	2248      	movs	r2, #72	@ 0x48
 8011a84:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011a88:	4668      	mov	r0, sp
 8011a8a:	f001 fd28 	bl	80134de <memcpy>
 8011a8e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8011a92:	cb0c      	ldmia	r3, {r2, r3}
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7fb ffe3 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011a9a:	4607      	mov	r7, r0
 8011a9c:	b1e0      	cbz	r0, 8011ad8 <on_topic+0x88>
 8011a9e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011aa2:	4632      	mov	r2, r6
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f108 0110 	add.w	r1, r8, #16
 8011aaa:	f000 fa49 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8011aae:	b930      	cbnz	r0, 8011abe <on_topic+0x6e>
 8011ab0:	480c      	ldr	r0, [pc, #48]	@ (8011ae4 <on_topic+0x94>)
 8011ab2:	4639      	mov	r1, r7
 8011ab4:	b014      	add	sp, #80	@ 0x50
 8011ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aba:	f000 b8bd 	b.w	8011c38 <put_memory>
 8011abe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8011ac2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8011ac6:	f000 f965 	bl	8011d94 <rmw_uros_epoch_nanos>
 8011aca:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8011ace:	2305      	movs	r3, #5
 8011ad0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011ad4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8011ad8:	b014      	add	sp, #80	@ 0x50
 8011ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ade:	bf00      	nop
 8011ae0:	2000d9dc 	.word	0x2000d9dc
 8011ae4:	2000d9cc 	.word	0x2000d9cc

08011ae8 <on_request>:
 8011ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aec:	4823      	ldr	r0, [pc, #140]	@ (8011b7c <on_request+0x94>)
 8011aee:	b094      	sub	sp, #80	@ 0x50
 8011af0:	6800      	ldr	r0, [r0, #0]
 8011af2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8011af4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011af8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d03b      	beq.n	8011b76 <on_request+0x8e>
 8011afe:	461d      	mov	r5, r3
 8011b00:	e001      	b.n	8011b06 <on_request+0x1e>
 8011b02:	6840      	ldr	r0, [r0, #4]
 8011b04:	b3b8      	cbz	r0, 8011b76 <on_request+0x8e>
 8011b06:	6884      	ldr	r4, [r0, #8]
 8011b08:	8b21      	ldrh	r1, [r4, #24]
 8011b0a:	4291      	cmp	r1, r2
 8011b0c:	d1f9      	bne.n	8011b02 <on_request+0x1a>
 8011b0e:	2248      	movs	r2, #72	@ 0x48
 8011b10:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011b14:	4668      	mov	r0, sp
 8011b16:	f001 fce2 	bl	80134de <memcpy>
 8011b1a:	f104 0320 	add.w	r3, r4, #32
 8011b1e:	cb0c      	ldmia	r3, {r2, r3}
 8011b20:	4620      	mov	r0, r4
 8011b22:	f7fb ff9d 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011b26:	4680      	mov	r8, r0
 8011b28:	b328      	cbz	r0, 8011b76 <on_request+0x8e>
 8011b2a:	4638      	mov	r0, r7
 8011b2c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011b30:	4632      	mov	r2, r6
 8011b32:	f107 0110 	add.w	r1, r7, #16
 8011b36:	f000 fa03 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8011b3a:	b930      	cbnz	r0, 8011b4a <on_request+0x62>
 8011b3c:	4810      	ldr	r0, [pc, #64]	@ (8011b80 <on_request+0x98>)
 8011b3e:	4641      	mov	r1, r8
 8011b40:	b014      	add	sp, #80	@ 0x50
 8011b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b46:	f000 b877 	b.w	8011c38 <put_memory>
 8011b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b4c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8011b50:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8011b54:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8011b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011b60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b64:	f000 f916 	bl	8011d94 <rmw_uros_epoch_nanos>
 8011b68:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8011b6c:	2303      	movs	r3, #3
 8011b6e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011b72:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8011b76:	b014      	add	sp, #80	@ 0x50
 8011b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7c:	2000d9ac 	.word	0x2000d9ac
 8011b80:	2000d9cc 	.word	0x2000d9cc

08011b84 <on_reply>:
 8011b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b88:	4821      	ldr	r0, [pc, #132]	@ (8011c10 <on_reply+0x8c>)
 8011b8a:	b094      	sub	sp, #80	@ 0x50
 8011b8c:	6800      	ldr	r0, [r0, #0]
 8011b8e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8011b90:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011b94:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011b96:	b3b8      	cbz	r0, 8011c08 <on_reply+0x84>
 8011b98:	461d      	mov	r5, r3
 8011b9a:	e001      	b.n	8011ba0 <on_reply+0x1c>
 8011b9c:	6840      	ldr	r0, [r0, #4]
 8011b9e:	b398      	cbz	r0, 8011c08 <on_reply+0x84>
 8011ba0:	6884      	ldr	r4, [r0, #8]
 8011ba2:	8b21      	ldrh	r1, [r4, #24]
 8011ba4:	4291      	cmp	r1, r2
 8011ba6:	d1f9      	bne.n	8011b9c <on_reply+0x18>
 8011ba8:	2248      	movs	r2, #72	@ 0x48
 8011baa:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011bae:	4668      	mov	r0, sp
 8011bb0:	f001 fc95 	bl	80134de <memcpy>
 8011bb4:	f104 0320 	add.w	r3, r4, #32
 8011bb8:	cb0c      	ldmia	r3, {r2, r3}
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7fb ff50 	bl	800da60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011bc0:	4680      	mov	r8, r0
 8011bc2:	b308      	cbz	r0, 8011c08 <on_reply+0x84>
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011bca:	4632      	mov	r2, r6
 8011bcc:	f107 0110 	add.w	r1, r7, #16
 8011bd0:	f000 f9b6 	bl	8011f40 <ucdr_deserialize_array_uint8_t>
 8011bd4:	b930      	cbnz	r0, 8011be4 <on_reply+0x60>
 8011bd6:	480f      	ldr	r0, [pc, #60]	@ (8011c14 <on_reply+0x90>)
 8011bd8:	4641      	mov	r1, r8
 8011bda:	b014      	add	sp, #80	@ 0x50
 8011bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011be0:	f000 b82a 	b.w	8011c38 <put_memory>
 8011be4:	2200      	movs	r2, #0
 8011be6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8011bea:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8011bee:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8011bf2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8011bf6:	f000 f8cd 	bl	8011d94 <rmw_uros_epoch_nanos>
 8011bfa:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8011bfe:	2304      	movs	r3, #4
 8011c00:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011c04:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8011c08:	b014      	add	sp, #80	@ 0x50
 8011c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c0e:	bf00      	nop
 8011c10:	200090c0 	.word	0x200090c0
 8011c14:	2000d9cc 	.word	0x2000d9cc

08011c18 <get_memory>:
 8011c18:	4603      	mov	r3, r0
 8011c1a:	6840      	ldr	r0, [r0, #4]
 8011c1c:	b158      	cbz	r0, 8011c36 <get_memory+0x1e>
 8011c1e:	6842      	ldr	r2, [r0, #4]
 8011c20:	605a      	str	r2, [r3, #4]
 8011c22:	b10a      	cbz	r2, 8011c28 <get_memory+0x10>
 8011c24:	2100      	movs	r1, #0
 8011c26:	6011      	str	r1, [r2, #0]
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	6042      	str	r2, [r0, #4]
 8011c2c:	b102      	cbz	r2, 8011c30 <get_memory+0x18>
 8011c2e:	6010      	str	r0, [r2, #0]
 8011c30:	2200      	movs	r2, #0
 8011c32:	6002      	str	r2, [r0, #0]
 8011c34:	6018      	str	r0, [r3, #0]
 8011c36:	4770      	bx	lr

08011c38 <put_memory>:
 8011c38:	680b      	ldr	r3, [r1, #0]
 8011c3a:	b10b      	cbz	r3, 8011c40 <put_memory+0x8>
 8011c3c:	684a      	ldr	r2, [r1, #4]
 8011c3e:	605a      	str	r2, [r3, #4]
 8011c40:	684a      	ldr	r2, [r1, #4]
 8011c42:	b102      	cbz	r2, 8011c46 <put_memory+0xe>
 8011c44:	6013      	str	r3, [r2, #0]
 8011c46:	6803      	ldr	r3, [r0, #0]
 8011c48:	428b      	cmp	r3, r1
 8011c4a:	6843      	ldr	r3, [r0, #4]
 8011c4c:	bf08      	it	eq
 8011c4e:	6002      	streq	r2, [r0, #0]
 8011c50:	604b      	str	r3, [r1, #4]
 8011c52:	b103      	cbz	r3, 8011c56 <put_memory+0x1e>
 8011c54:	6019      	str	r1, [r3, #0]
 8011c56:	2300      	movs	r3, #0
 8011c58:	600b      	str	r3, [r1, #0]
 8011c5a:	6041      	str	r1, [r0, #4]
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop

08011c60 <rmw_create_guard_condition>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4605      	mov	r5, r0
 8011c64:	4807      	ldr	r0, [pc, #28]	@ (8011c84 <rmw_create_guard_condition+0x24>)
 8011c66:	f7ff ffd7 	bl	8011c18 <get_memory>
 8011c6a:	b148      	cbz	r0, 8011c80 <rmw_create_guard_condition+0x20>
 8011c6c:	6884      	ldr	r4, [r0, #8]
 8011c6e:	2300      	movs	r3, #0
 8011c70:	7423      	strb	r3, [r4, #16]
 8011c72:	61e5      	str	r5, [r4, #28]
 8011c74:	f7fa fc5c 	bl	800c530 <rmw_get_implementation_identifier>
 8011c78:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011c7c:	f104 0014 	add.w	r0, r4, #20
 8011c80:	bd38      	pop	{r3, r4, r5, pc}
 8011c82:	bf00      	nop
 8011c84:	2000d96c 	.word	0x2000d96c

08011c88 <rmw_destroy_guard_condition>:
 8011c88:	b508      	push	{r3, lr}
 8011c8a:	4b08      	ldr	r3, [pc, #32]	@ (8011cac <rmw_destroy_guard_condition+0x24>)
 8011c8c:	6819      	ldr	r1, [r3, #0]
 8011c8e:	b911      	cbnz	r1, 8011c96 <rmw_destroy_guard_condition+0xe>
 8011c90:	e00a      	b.n	8011ca8 <rmw_destroy_guard_condition+0x20>
 8011c92:	6849      	ldr	r1, [r1, #4]
 8011c94:	b141      	cbz	r1, 8011ca8 <rmw_destroy_guard_condition+0x20>
 8011c96:	688b      	ldr	r3, [r1, #8]
 8011c98:	3314      	adds	r3, #20
 8011c9a:	4298      	cmp	r0, r3
 8011c9c:	d1f9      	bne.n	8011c92 <rmw_destroy_guard_condition+0xa>
 8011c9e:	4803      	ldr	r0, [pc, #12]	@ (8011cac <rmw_destroy_guard_condition+0x24>)
 8011ca0:	f7ff ffca 	bl	8011c38 <put_memory>
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	bd08      	pop	{r3, pc}
 8011ca8:	2001      	movs	r0, #1
 8011caa:	bd08      	pop	{r3, pc}
 8011cac:	2000d96c 	.word	0x2000d96c

08011cb0 <create_topic>:
 8011cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb4:	4605      	mov	r5, r0
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	4822      	ldr	r0, [pc, #136]	@ (8011d44 <create_topic+0x94>)
 8011cba:	460f      	mov	r7, r1
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	f7ff ffab 	bl	8011c18 <get_memory>
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d039      	beq.n	8011d3c <create_topic+0x8c>
 8011cc8:	692b      	ldr	r3, [r5, #16]
 8011cca:	6884      	ldr	r4, [r0, #8]
 8011ccc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8011d4c <create_topic+0x9c>
 8011cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011cd4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011cd8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8011cdc:	1c42      	adds	r2, r0, #1
 8011cde:	2102      	movs	r1, #2
 8011ce0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8011ce4:	f7fc fa9e 	bl	800e224 <uxr_object_id>
 8011ce8:	223c      	movs	r2, #60	@ 0x3c
 8011cea:	6120      	str	r0, [r4, #16]
 8011cec:	4641      	mov	r1, r8
 8011cee:	4638      	mov	r0, r7
 8011cf0:	f7fc f812 	bl	800dd18 <generate_topic_name>
 8011cf4:	b1f0      	cbz	r0, 8011d34 <create_topic+0x84>
 8011cf6:	4f14      	ldr	r7, [pc, #80]	@ (8011d48 <create_topic+0x98>)
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	2264      	movs	r2, #100	@ 0x64
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	f7fb ffdb 	bl	800dcb8 <generate_type_name>
 8011d02:	b1b8      	cbz	r0, 8011d34 <create_topic+0x84>
 8011d04:	6928      	ldr	r0, [r5, #16]
 8011d06:	2306      	movs	r3, #6
 8011d08:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011d0c:	f8cd 8000 	str.w	r8, [sp]
 8011d10:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011d14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d18:	6811      	ldr	r1, [r2, #0]
 8011d1a:	696b      	ldr	r3, [r5, #20]
 8011d1c:	6922      	ldr	r2, [r4, #16]
 8011d1e:	f7fc f8e1 	bl	800dee4 <uxr_buffer_create_topic_bin>
 8011d22:	4602      	mov	r2, r0
 8011d24:	6928      	ldr	r0, [r5, #16]
 8011d26:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011d2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011d2e:	f7fb ff8d 	bl	800dc4c <run_xrce_session>
 8011d32:	b918      	cbnz	r0, 8011d3c <create_topic+0x8c>
 8011d34:	4620      	mov	r0, r4
 8011d36:	f7fb fe87 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 8011d3a:	2400      	movs	r4, #0
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	b004      	add	sp, #16
 8011d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d44:	2000d9ec 	.word	0x2000d9ec
 8011d48:	2000da60 	.word	0x2000da60
 8011d4c:	2000da24 	.word	0x2000da24

08011d50 <destroy_topic>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	6985      	ldr	r5, [r0, #24]
 8011d54:	b1d5      	cbz	r5, 8011d8c <destroy_topic+0x3c>
 8011d56:	4604      	mov	r4, r0
 8011d58:	6928      	ldr	r0, [r5, #16]
 8011d5a:	6922      	ldr	r2, [r4, #16]
 8011d5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011d60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d64:	6819      	ldr	r1, [r3, #0]
 8011d66:	f7fc f83f 	bl	800dde8 <uxr_buffer_delete_entity>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	6928      	ldr	r0, [r5, #16]
 8011d6e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011d72:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011d76:	f7fb ff69 	bl	800dc4c <run_xrce_session>
 8011d7a:	2800      	cmp	r0, #0
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	bf14      	ite	ne
 8011d80:	2400      	movne	r4, #0
 8011d82:	2402      	moveq	r4, #2
 8011d84:	f7fb fe60 	bl	800da48 <rmw_uxrce_fini_topic_memory>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	2401      	movs	r4, #1
 8011d8e:	4620      	mov	r0, r4
 8011d90:	bd38      	pop	{r3, r4, r5, pc}
 8011d92:	bf00      	nop

08011d94 <rmw_uros_epoch_nanos>:
 8011d94:	4b05      	ldr	r3, [pc, #20]	@ (8011dac <rmw_uros_epoch_nanos+0x18>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	b123      	cbz	r3, 8011da4 <rmw_uros_epoch_nanos+0x10>
 8011d9a:	6898      	ldr	r0, [r3, #8]
 8011d9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011da0:	f7fc bcb4 	b.w	800e70c <uxr_epoch_nanos>
 8011da4:	2000      	movs	r0, #0
 8011da6:	2100      	movs	r1, #0
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	2000d9bc 	.word	0x2000d9bc

08011db0 <ucdr_serialize_endian_array_char>:
 8011db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db4:	4619      	mov	r1, r3
 8011db6:	461f      	mov	r7, r3
 8011db8:	4605      	mov	r5, r0
 8011dba:	4690      	mov	r8, r2
 8011dbc:	f7f7 f85c 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011dc0:	b9e0      	cbnz	r0, 8011dfc <ucdr_serialize_endian_array_char+0x4c>
 8011dc2:	463e      	mov	r6, r7
 8011dc4:	e009      	b.n	8011dda <ucdr_serialize_endian_array_char+0x2a>
 8011dc6:	68a8      	ldr	r0, [r5, #8]
 8011dc8:	f001 fb89 	bl	80134de <memcpy>
 8011dcc:	68ab      	ldr	r3, [r5, #8]
 8011dce:	6928      	ldr	r0, [r5, #16]
 8011dd0:	4423      	add	r3, r4
 8011dd2:	4420      	add	r0, r4
 8011dd4:	1b36      	subs	r6, r6, r4
 8011dd6:	60ab      	str	r3, [r5, #8]
 8011dd8:	6128      	str	r0, [r5, #16]
 8011dda:	4631      	mov	r1, r6
 8011ddc:	2201      	movs	r2, #1
 8011dde:	4628      	mov	r0, r5
 8011de0:	f7f7 f8d2 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011de4:	1bb9      	subs	r1, r7, r6
 8011de6:	4441      	add	r1, r8
 8011de8:	4604      	mov	r4, r0
 8011dea:	4602      	mov	r2, r0
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d1ea      	bne.n	8011dc6 <ucdr_serialize_endian_array_char+0x16>
 8011df0:	2301      	movs	r3, #1
 8011df2:	7da8      	ldrb	r0, [r5, #22]
 8011df4:	756b      	strb	r3, [r5, #21]
 8011df6:	4058      	eors	r0, r3
 8011df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dfc:	463a      	mov	r2, r7
 8011dfe:	68a8      	ldr	r0, [r5, #8]
 8011e00:	4641      	mov	r1, r8
 8011e02:	f001 fb6c 	bl	80134de <memcpy>
 8011e06:	68aa      	ldr	r2, [r5, #8]
 8011e08:	692b      	ldr	r3, [r5, #16]
 8011e0a:	443a      	add	r2, r7
 8011e0c:	443b      	add	r3, r7
 8011e0e:	60aa      	str	r2, [r5, #8]
 8011e10:	612b      	str	r3, [r5, #16]
 8011e12:	e7ed      	b.n	8011df0 <ucdr_serialize_endian_array_char+0x40>

08011e14 <ucdr_deserialize_endian_array_char>:
 8011e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e18:	4619      	mov	r1, r3
 8011e1a:	461f      	mov	r7, r3
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	4690      	mov	r8, r2
 8011e20:	f7f7 f82a 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011e24:	b9e0      	cbnz	r0, 8011e60 <ucdr_deserialize_endian_array_char+0x4c>
 8011e26:	463e      	mov	r6, r7
 8011e28:	e009      	b.n	8011e3e <ucdr_deserialize_endian_array_char+0x2a>
 8011e2a:	68a9      	ldr	r1, [r5, #8]
 8011e2c:	f001 fb57 	bl	80134de <memcpy>
 8011e30:	68ab      	ldr	r3, [r5, #8]
 8011e32:	6928      	ldr	r0, [r5, #16]
 8011e34:	4423      	add	r3, r4
 8011e36:	4420      	add	r0, r4
 8011e38:	1b36      	subs	r6, r6, r4
 8011e3a:	60ab      	str	r3, [r5, #8]
 8011e3c:	6128      	str	r0, [r5, #16]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	4631      	mov	r1, r6
 8011e42:	4628      	mov	r0, r5
 8011e44:	f7f7 f8a0 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011e48:	4604      	mov	r4, r0
 8011e4a:	1bb8      	subs	r0, r7, r6
 8011e4c:	4440      	add	r0, r8
 8011e4e:	4622      	mov	r2, r4
 8011e50:	2c00      	cmp	r4, #0
 8011e52:	d1ea      	bne.n	8011e2a <ucdr_deserialize_endian_array_char+0x16>
 8011e54:	2301      	movs	r3, #1
 8011e56:	7da8      	ldrb	r0, [r5, #22]
 8011e58:	756b      	strb	r3, [r5, #21]
 8011e5a:	4058      	eors	r0, r3
 8011e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e60:	463a      	mov	r2, r7
 8011e62:	68a9      	ldr	r1, [r5, #8]
 8011e64:	4640      	mov	r0, r8
 8011e66:	f001 fb3a 	bl	80134de <memcpy>
 8011e6a:	68aa      	ldr	r2, [r5, #8]
 8011e6c:	692b      	ldr	r3, [r5, #16]
 8011e6e:	443a      	add	r2, r7
 8011e70:	443b      	add	r3, r7
 8011e72:	60aa      	str	r2, [r5, #8]
 8011e74:	612b      	str	r3, [r5, #16]
 8011e76:	e7ed      	b.n	8011e54 <ucdr_deserialize_endian_array_char+0x40>

08011e78 <ucdr_serialize_array_uint8_t>:
 8011e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7c:	4688      	mov	r8, r1
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4617      	mov	r7, r2
 8011e82:	4605      	mov	r5, r0
 8011e84:	f7f6 fff8 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011e88:	b9e0      	cbnz	r0, 8011ec4 <ucdr_serialize_array_uint8_t+0x4c>
 8011e8a:	463e      	mov	r6, r7
 8011e8c:	e009      	b.n	8011ea2 <ucdr_serialize_array_uint8_t+0x2a>
 8011e8e:	68a8      	ldr	r0, [r5, #8]
 8011e90:	f001 fb25 	bl	80134de <memcpy>
 8011e94:	68aa      	ldr	r2, [r5, #8]
 8011e96:	692b      	ldr	r3, [r5, #16]
 8011e98:	4422      	add	r2, r4
 8011e9a:	4423      	add	r3, r4
 8011e9c:	1b36      	subs	r6, r6, r4
 8011e9e:	60aa      	str	r2, [r5, #8]
 8011ea0:	612b      	str	r3, [r5, #16]
 8011ea2:	4631      	mov	r1, r6
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7f7 f86e 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011eac:	1bb9      	subs	r1, r7, r6
 8011eae:	4441      	add	r1, r8
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d1ea      	bne.n	8011e8e <ucdr_serialize_array_uint8_t+0x16>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	7da8      	ldrb	r0, [r5, #22]
 8011ebc:	756b      	strb	r3, [r5, #21]
 8011ebe:	4058      	eors	r0, r3
 8011ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec4:	463a      	mov	r2, r7
 8011ec6:	68a8      	ldr	r0, [r5, #8]
 8011ec8:	4641      	mov	r1, r8
 8011eca:	f001 fb08 	bl	80134de <memcpy>
 8011ece:	68aa      	ldr	r2, [r5, #8]
 8011ed0:	692b      	ldr	r3, [r5, #16]
 8011ed2:	443a      	add	r2, r7
 8011ed4:	443b      	add	r3, r7
 8011ed6:	60aa      	str	r2, [r5, #8]
 8011ed8:	612b      	str	r3, [r5, #16]
 8011eda:	e7ed      	b.n	8011eb8 <ucdr_serialize_array_uint8_t+0x40>

08011edc <ucdr_serialize_endian_array_uint8_t>:
 8011edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	461f      	mov	r7, r3
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	4690      	mov	r8, r2
 8011ee8:	f7f6 ffc6 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011eec:	b9e0      	cbnz	r0, 8011f28 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011eee:	463e      	mov	r6, r7
 8011ef0:	e009      	b.n	8011f06 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011ef2:	68a8      	ldr	r0, [r5, #8]
 8011ef4:	f001 faf3 	bl	80134de <memcpy>
 8011ef8:	68ab      	ldr	r3, [r5, #8]
 8011efa:	6928      	ldr	r0, [r5, #16]
 8011efc:	4423      	add	r3, r4
 8011efe:	4420      	add	r0, r4
 8011f00:	1b36      	subs	r6, r6, r4
 8011f02:	60ab      	str	r3, [r5, #8]
 8011f04:	6128      	str	r0, [r5, #16]
 8011f06:	4631      	mov	r1, r6
 8011f08:	2201      	movs	r2, #1
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f7f7 f83c 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011f10:	1bb9      	subs	r1, r7, r6
 8011f12:	4441      	add	r1, r8
 8011f14:	4604      	mov	r4, r0
 8011f16:	4602      	mov	r2, r0
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d1ea      	bne.n	8011ef2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	7da8      	ldrb	r0, [r5, #22]
 8011f20:	756b      	strb	r3, [r5, #21]
 8011f22:	4058      	eors	r0, r3
 8011f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f28:	463a      	mov	r2, r7
 8011f2a:	68a8      	ldr	r0, [r5, #8]
 8011f2c:	4641      	mov	r1, r8
 8011f2e:	f001 fad6 	bl	80134de <memcpy>
 8011f32:	68aa      	ldr	r2, [r5, #8]
 8011f34:	692b      	ldr	r3, [r5, #16]
 8011f36:	443a      	add	r2, r7
 8011f38:	443b      	add	r3, r7
 8011f3a:	60aa      	str	r2, [r5, #8]
 8011f3c:	612b      	str	r3, [r5, #16]
 8011f3e:	e7ed      	b.n	8011f1c <ucdr_serialize_endian_array_uint8_t+0x40>

08011f40 <ucdr_deserialize_array_uint8_t>:
 8011f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f44:	4688      	mov	r8, r1
 8011f46:	4611      	mov	r1, r2
 8011f48:	4617      	mov	r7, r2
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	f7f6 ff94 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011f50:	b9e0      	cbnz	r0, 8011f8c <ucdr_deserialize_array_uint8_t+0x4c>
 8011f52:	463e      	mov	r6, r7
 8011f54:	e009      	b.n	8011f6a <ucdr_deserialize_array_uint8_t+0x2a>
 8011f56:	68a9      	ldr	r1, [r5, #8]
 8011f58:	f001 fac1 	bl	80134de <memcpy>
 8011f5c:	68aa      	ldr	r2, [r5, #8]
 8011f5e:	692b      	ldr	r3, [r5, #16]
 8011f60:	4422      	add	r2, r4
 8011f62:	4423      	add	r3, r4
 8011f64:	1b36      	subs	r6, r6, r4
 8011f66:	60aa      	str	r2, [r5, #8]
 8011f68:	612b      	str	r3, [r5, #16]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f7f7 f80a 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011f74:	4604      	mov	r4, r0
 8011f76:	1bb8      	subs	r0, r7, r6
 8011f78:	4440      	add	r0, r8
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	2c00      	cmp	r4, #0
 8011f7e:	d1ea      	bne.n	8011f56 <ucdr_deserialize_array_uint8_t+0x16>
 8011f80:	2301      	movs	r3, #1
 8011f82:	7da8      	ldrb	r0, [r5, #22]
 8011f84:	756b      	strb	r3, [r5, #21]
 8011f86:	4058      	eors	r0, r3
 8011f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f8c:	463a      	mov	r2, r7
 8011f8e:	68a9      	ldr	r1, [r5, #8]
 8011f90:	4640      	mov	r0, r8
 8011f92:	f001 faa4 	bl	80134de <memcpy>
 8011f96:	68aa      	ldr	r2, [r5, #8]
 8011f98:	692b      	ldr	r3, [r5, #16]
 8011f9a:	443a      	add	r2, r7
 8011f9c:	443b      	add	r3, r7
 8011f9e:	60aa      	str	r2, [r5, #8]
 8011fa0:	612b      	str	r3, [r5, #16]
 8011fa2:	e7ed      	b.n	8011f80 <ucdr_deserialize_array_uint8_t+0x40>

08011fa4 <ucdr_deserialize_endian_array_uint8_t>:
 8011fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa8:	4619      	mov	r1, r3
 8011faa:	461f      	mov	r7, r3
 8011fac:	4605      	mov	r5, r0
 8011fae:	4690      	mov	r8, r2
 8011fb0:	f7f6 ff62 	bl	8008e78 <ucdr_check_buffer_available_for>
 8011fb4:	b9e0      	cbnz	r0, 8011ff0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011fb6:	463e      	mov	r6, r7
 8011fb8:	e009      	b.n	8011fce <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8011fba:	68a9      	ldr	r1, [r5, #8]
 8011fbc:	f001 fa8f 	bl	80134de <memcpy>
 8011fc0:	68ab      	ldr	r3, [r5, #8]
 8011fc2:	6928      	ldr	r0, [r5, #16]
 8011fc4:	4423      	add	r3, r4
 8011fc6:	4420      	add	r0, r4
 8011fc8:	1b36      	subs	r6, r6, r4
 8011fca:	60ab      	str	r3, [r5, #8]
 8011fcc:	6128      	str	r0, [r5, #16]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	4631      	mov	r1, r6
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f7f6 ffd8 	bl	8008f88 <ucdr_check_final_buffer_behavior_array>
 8011fd8:	4604      	mov	r4, r0
 8011fda:	1bb8      	subs	r0, r7, r6
 8011fdc:	4440      	add	r0, r8
 8011fde:	4622      	mov	r2, r4
 8011fe0:	2c00      	cmp	r4, #0
 8011fe2:	d1ea      	bne.n	8011fba <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	7da8      	ldrb	r0, [r5, #22]
 8011fe8:	756b      	strb	r3, [r5, #21]
 8011fea:	4058      	eors	r0, r3
 8011fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff0:	463a      	mov	r2, r7
 8011ff2:	68a9      	ldr	r1, [r5, #8]
 8011ff4:	4640      	mov	r0, r8
 8011ff6:	f001 fa72 	bl	80134de <memcpy>
 8011ffa:	68aa      	ldr	r2, [r5, #8]
 8011ffc:	692b      	ldr	r3, [r5, #16]
 8011ffe:	443a      	add	r2, r7
 8012000:	443b      	add	r3, r7
 8012002:	60aa      	str	r2, [r5, #8]
 8012004:	612b      	str	r3, [r5, #16]
 8012006:	e7ed      	b.n	8011fe4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012008 <ucdr_serialize_sequence_char>:
 8012008:	b570      	push	{r4, r5, r6, lr}
 801200a:	4615      	mov	r5, r2
 801200c:	460e      	mov	r6, r1
 801200e:	7d01      	ldrb	r1, [r0, #20]
 8012010:	4604      	mov	r4, r0
 8012012:	f7f6 fa87 	bl	8008524 <ucdr_serialize_endian_uint32_t>
 8012016:	b90d      	cbnz	r5, 801201c <ucdr_serialize_sequence_char+0x14>
 8012018:	2001      	movs	r0, #1
 801201a:	bd70      	pop	{r4, r5, r6, pc}
 801201c:	7d21      	ldrb	r1, [r4, #20]
 801201e:	462b      	mov	r3, r5
 8012020:	4632      	mov	r2, r6
 8012022:	4620      	mov	r0, r4
 8012024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012028:	f7ff bec2 	b.w	8011db0 <ucdr_serialize_endian_array_char>

0801202c <ucdr_deserialize_sequence_char>:
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	461d      	mov	r5, r3
 8012032:	4616      	mov	r6, r2
 8012034:	460f      	mov	r7, r1
 8012036:	461a      	mov	r2, r3
 8012038:	7d01      	ldrb	r1, [r0, #20]
 801203a:	4604      	mov	r4, r0
 801203c:	f7f6 fb9a 	bl	8008774 <ucdr_deserialize_endian_uint32_t>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	429e      	cmp	r6, r3
 8012044:	bf3c      	itt	cc
 8012046:	2201      	movcc	r2, #1
 8012048:	75a2      	strbcc	r2, [r4, #22]
 801204a:	b913      	cbnz	r3, 8012052 <ucdr_deserialize_sequence_char+0x26>
 801204c:	2001      	movs	r0, #1
 801204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012052:	7d21      	ldrb	r1, [r4, #20]
 8012054:	463a      	mov	r2, r7
 8012056:	4620      	mov	r0, r4
 8012058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801205c:	f7ff beda 	b.w	8011e14 <ucdr_deserialize_endian_array_char>

08012060 <ucdr_serialize_sequence_uint8_t>:
 8012060:	b570      	push	{r4, r5, r6, lr}
 8012062:	4615      	mov	r5, r2
 8012064:	460e      	mov	r6, r1
 8012066:	7d01      	ldrb	r1, [r0, #20]
 8012068:	4604      	mov	r4, r0
 801206a:	f7f6 fa5b 	bl	8008524 <ucdr_serialize_endian_uint32_t>
 801206e:	b90d      	cbnz	r5, 8012074 <ucdr_serialize_sequence_uint8_t+0x14>
 8012070:	2001      	movs	r0, #1
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	7d21      	ldrb	r1, [r4, #20]
 8012076:	462b      	mov	r3, r5
 8012078:	4632      	mov	r2, r6
 801207a:	4620      	mov	r0, r4
 801207c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012080:	f7ff bf2c 	b.w	8011edc <ucdr_serialize_endian_array_uint8_t>

08012084 <ucdr_deserialize_sequence_uint8_t>:
 8012084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012088:	461d      	mov	r5, r3
 801208a:	4616      	mov	r6, r2
 801208c:	460f      	mov	r7, r1
 801208e:	461a      	mov	r2, r3
 8012090:	7d01      	ldrb	r1, [r0, #20]
 8012092:	4604      	mov	r4, r0
 8012094:	f7f6 fb6e 	bl	8008774 <ucdr_deserialize_endian_uint32_t>
 8012098:	682b      	ldr	r3, [r5, #0]
 801209a:	429e      	cmp	r6, r3
 801209c:	bf3c      	itt	cc
 801209e:	2201      	movcc	r2, #1
 80120a0:	75a2      	strbcc	r2, [r4, #22]
 80120a2:	b913      	cbnz	r3, 80120aa <ucdr_deserialize_sequence_uint8_t+0x26>
 80120a4:	2001      	movs	r0, #1
 80120a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120aa:	7d21      	ldrb	r1, [r4, #20]
 80120ac:	463a      	mov	r2, r7
 80120ae:	4620      	mov	r0, r4
 80120b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120b4:	f7ff bf76 	b.w	8011fa4 <ucdr_deserialize_endian_array_uint8_t>

080120b8 <ucdr_serialize_string>:
 80120b8:	b510      	push	{r4, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	4604      	mov	r4, r0
 80120be:	4608      	mov	r0, r1
 80120c0:	9101      	str	r1, [sp, #4]
 80120c2:	f7ee f897 	bl	80001f4 <strlen>
 80120c6:	9901      	ldr	r1, [sp, #4]
 80120c8:	1c42      	adds	r2, r0, #1
 80120ca:	4620      	mov	r0, r4
 80120cc:	b002      	add	sp, #8
 80120ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120d2:	f7ff bf99 	b.w	8012008 <ucdr_serialize_sequence_char>
 80120d6:	bf00      	nop

080120d8 <ucdr_deserialize_string>:
 80120d8:	b500      	push	{lr}
 80120da:	b083      	sub	sp, #12
 80120dc:	ab01      	add	r3, sp, #4
 80120de:	f7ff ffa5 	bl	801202c <ucdr_deserialize_sequence_char>
 80120e2:	b003      	add	sp, #12
 80120e4:	f85d fb04 	ldr.w	pc, [sp], #4

080120e8 <uxr_init_input_best_effort_stream>:
 80120e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80120ec:	8003      	strh	r3, [r0, #0]
 80120ee:	4770      	bx	lr

080120f0 <uxr_reset_input_best_effort_stream>:
 80120f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80120f4:	8003      	strh	r3, [r0, #0]
 80120f6:	4770      	bx	lr

080120f8 <uxr_receive_best_effort_message>:
 80120f8:	b538      	push	{r3, r4, r5, lr}
 80120fa:	4604      	mov	r4, r0
 80120fc:	8800      	ldrh	r0, [r0, #0]
 80120fe:	460d      	mov	r5, r1
 8012100:	f000 fd22 	bl	8012b48 <uxr_seq_num_cmp>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801210c:	bfb8      	it	lt
 801210e:	8025      	strhlt	r5, [r4, #0]
 8012110:	bd38      	pop	{r3, r4, r5, pc}
 8012112:	bf00      	nop

08012114 <on_full_input_buffer>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	4605      	mov	r5, r0
 8012118:	460c      	mov	r4, r1
 801211a:	682b      	ldr	r3, [r5, #0]
 801211c:	6809      	ldr	r1, [r1, #0]
 801211e:	8920      	ldrh	r0, [r4, #8]
 8012120:	6862      	ldr	r2, [r4, #4]
 8012122:	fbb2 f2f0 	udiv	r2, r2, r0
 8012126:	eba3 0c01 	sub.w	ip, r3, r1
 801212a:	fbbc fcf2 	udiv	ip, ip, r2
 801212e:	f10c 0c01 	add.w	ip, ip, #1
 8012132:	fa1f f38c 	uxth.w	r3, ip
 8012136:	fbb3 f6f0 	udiv	r6, r3, r0
 801213a:	fb00 3316 	mls	r3, r0, r6, r3
 801213e:	b29b      	uxth	r3, r3
 8012140:	fb02 f303 	mul.w	r3, r2, r3
 8012144:	1d18      	adds	r0, r3, #4
 8012146:	4408      	add	r0, r1
 8012148:	7d26      	ldrb	r6, [r4, #20]
 801214a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801214e:	b116      	cbz	r6, 8012156 <on_full_input_buffer+0x42>
 8012150:	2600      	movs	r6, #0
 8012152:	f840 6c04 	str.w	r6, [r0, #-4]
 8012156:	2a03      	cmp	r2, #3
 8012158:	d801      	bhi.n	801215e <on_full_input_buffer+0x4a>
 801215a:	2001      	movs	r0, #1
 801215c:	bd70      	pop	{r4, r5, r6, pc}
 801215e:	3308      	adds	r3, #8
 8012160:	4419      	add	r1, r3
 8012162:	4628      	mov	r0, r5
 8012164:	692b      	ldr	r3, [r5, #16]
 8012166:	3a04      	subs	r2, #4
 8012168:	f7f6 fed2 	bl	8008f10 <ucdr_init_buffer_origin>
 801216c:	4628      	mov	r0, r5
 801216e:	4903      	ldr	r1, [pc, #12]	@ (801217c <on_full_input_buffer+0x68>)
 8012170:	4622      	mov	r2, r4
 8012172:	f7f6 fea9 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 8012176:	2000      	movs	r0, #0
 8012178:	bd70      	pop	{r4, r5, r6, pc}
 801217a:	bf00      	nop
 801217c:	08012115 	.word	0x08012115

08012180 <uxr_init_input_reliable_stream>:
 8012180:	b500      	push	{lr}
 8012182:	e9c0 1200 	strd	r1, r2, [r0]
 8012186:	f04f 0e00 	mov.w	lr, #0
 801218a:	9a01      	ldr	r2, [sp, #4]
 801218c:	8103      	strh	r3, [r0, #8]
 801218e:	6102      	str	r2, [r0, #16]
 8012190:	f880 e014 	strb.w	lr, [r0, #20]
 8012194:	b1d3      	cbz	r3, 80121cc <uxr_init_input_reliable_stream+0x4c>
 8012196:	f8c1 e000 	str.w	lr, [r1]
 801219a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801219e:	f1bc 0f01 	cmp.w	ip, #1
 80121a2:	d913      	bls.n	80121cc <uxr_init_input_reliable_stream+0x4c>
 80121a4:	2301      	movs	r3, #1
 80121a6:	fbb3 f1fc 	udiv	r1, r3, ip
 80121aa:	fb0c 3111 	mls	r1, ip, r1, r3
 80121ae:	b289      	uxth	r1, r1
 80121b0:	6842      	ldr	r2, [r0, #4]
 80121b2:	fbb2 f2fc 	udiv	r2, r2, ip
 80121b6:	fb01 f202 	mul.w	r2, r1, r2
 80121ba:	6801      	ldr	r1, [r0, #0]
 80121bc:	f841 e002 	str.w	lr, [r1, r2]
 80121c0:	3301      	adds	r3, #1
 80121c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	459c      	cmp	ip, r3
 80121ca:	d8ec      	bhi.n	80121a6 <uxr_init_input_reliable_stream+0x26>
 80121cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121d0:	60c3      	str	r3, [r0, #12]
 80121d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80121d6:	bf00      	nop

080121d8 <uxr_reset_input_reliable_stream>:
 80121d8:	8901      	ldrh	r1, [r0, #8]
 80121da:	b1e9      	cbz	r1, 8012218 <uxr_reset_input_reliable_stream+0x40>
 80121dc:	f04f 0c00 	mov.w	ip, #0
 80121e0:	b500      	push	{lr}
 80121e2:	4663      	mov	r3, ip
 80121e4:	46e6      	mov	lr, ip
 80121e6:	fbb3 f2f1 	udiv	r2, r3, r1
 80121ea:	fb01 3312 	mls	r3, r1, r2, r3
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	6842      	ldr	r2, [r0, #4]
 80121f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80121f6:	fb02 f303 	mul.w	r3, r2, r3
 80121fa:	6802      	ldr	r2, [r0, #0]
 80121fc:	f842 e003 	str.w	lr, [r2, r3]
 8012200:	f10c 0c01 	add.w	ip, ip, #1
 8012204:	8901      	ldrh	r1, [r0, #8]
 8012206:	fa1f f38c 	uxth.w	r3, ip
 801220a:	4299      	cmp	r1, r3
 801220c:	d8eb      	bhi.n	80121e6 <uxr_reset_input_reliable_stream+0xe>
 801220e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012212:	60c3      	str	r3, [r0, #12]
 8012214:	f85d fb04 	ldr.w	pc, [sp], #4
 8012218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801221c:	60c3      	str	r3, [r0, #12]
 801221e:	4770      	bx	lr

08012220 <uxr_receive_reliable_message>:
 8012220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012224:	4604      	mov	r4, r0
 8012226:	460d      	mov	r5, r1
 8012228:	8901      	ldrh	r1, [r0, #8]
 801222a:	8980      	ldrh	r0, [r0, #12]
 801222c:	4690      	mov	r8, r2
 801222e:	461f      	mov	r7, r3
 8012230:	f000 fc82 	bl	8012b38 <uxr_seq_num_add>
 8012234:	4629      	mov	r1, r5
 8012236:	4606      	mov	r6, r0
 8012238:	89a0      	ldrh	r0, [r4, #12]
 801223a:	f000 fc85 	bl	8012b48 <uxr_seq_num_cmp>
 801223e:	2800      	cmp	r0, #0
 8012240:	db0a      	blt.n	8012258 <uxr_receive_reliable_message+0x38>
 8012242:	2600      	movs	r6, #0
 8012244:	89e0      	ldrh	r0, [r4, #14]
 8012246:	4629      	mov	r1, r5
 8012248:	f000 fc7e 	bl	8012b48 <uxr_seq_num_cmp>
 801224c:	2800      	cmp	r0, #0
 801224e:	da00      	bge.n	8012252 <uxr_receive_reliable_message+0x32>
 8012250:	81e5      	strh	r5, [r4, #14]
 8012252:	4630      	mov	r0, r6
 8012254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012258:	4630      	mov	r0, r6
 801225a:	4629      	mov	r1, r5
 801225c:	f000 fc74 	bl	8012b48 <uxr_seq_num_cmp>
 8012260:	2800      	cmp	r0, #0
 8012262:	dbee      	blt.n	8012242 <uxr_receive_reliable_message+0x22>
 8012264:	6923      	ldr	r3, [r4, #16]
 8012266:	4640      	mov	r0, r8
 8012268:	4798      	blx	r3
 801226a:	2101      	movs	r1, #1
 801226c:	4681      	mov	r9, r0
 801226e:	89a0      	ldrh	r0, [r4, #12]
 8012270:	f000 fc62 	bl	8012b38 <uxr_seq_num_add>
 8012274:	f1b9 0f00 	cmp.w	r9, #0
 8012278:	d101      	bne.n	801227e <uxr_receive_reliable_message+0x5e>
 801227a:	4285      	cmp	r5, r0
 801227c:	d047      	beq.n	801230e <uxr_receive_reliable_message+0xee>
 801227e:	8922      	ldrh	r2, [r4, #8]
 8012280:	fbb5 f0f2 	udiv	r0, r5, r2
 8012284:	fb02 5010 	mls	r0, r2, r0, r5
 8012288:	b280      	uxth	r0, r0
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012290:	fb00 f303 	mul.w	r3, r0, r3
 8012294:	6820      	ldr	r0, [r4, #0]
 8012296:	3304      	adds	r3, #4
 8012298:	4418      	add	r0, r3
 801229a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1cf      	bne.n	8012242 <uxr_receive_reliable_message+0x22>
 80122a2:	4641      	mov	r1, r8
 80122a4:	463a      	mov	r2, r7
 80122a6:	f001 f91a 	bl	80134de <memcpy>
 80122aa:	8921      	ldrh	r1, [r4, #8]
 80122ac:	fbb5 f2f1 	udiv	r2, r5, r1
 80122b0:	fb01 5212 	mls	r2, r1, r2, r5
 80122b4:	b292      	uxth	r2, r2
 80122b6:	6863      	ldr	r3, [r4, #4]
 80122b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80122bc:	fb02 f303 	mul.w	r3, r2, r3
 80122c0:	6822      	ldr	r2, [r4, #0]
 80122c2:	50d7      	str	r7, [r2, r3]
 80122c4:	9a08      	ldr	r2, [sp, #32]
 80122c6:	2301      	movs	r3, #1
 80122c8:	7013      	strb	r3, [r2, #0]
 80122ca:	f1b9 0f00 	cmp.w	r9, #0
 80122ce:	d0b8      	beq.n	8012242 <uxr_receive_reliable_message+0x22>
 80122d0:	89a6      	ldrh	r6, [r4, #12]
 80122d2:	4630      	mov	r0, r6
 80122d4:	2101      	movs	r1, #1
 80122d6:	f000 fc2f 	bl	8012b38 <uxr_seq_num_add>
 80122da:	8922      	ldrh	r2, [r4, #8]
 80122dc:	6863      	ldr	r3, [r4, #4]
 80122de:	fbb3 f3f2 	udiv	r3, r3, r2
 80122e2:	4606      	mov	r6, r0
 80122e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80122e8:	fb02 6010 	mls	r0, r2, r0, r6
 80122ec:	b280      	uxth	r0, r0
 80122ee:	fb00 f303 	mul.w	r3, r0, r3
 80122f2:	6820      	ldr	r0, [r4, #0]
 80122f4:	3304      	adds	r3, #4
 80122f6:	4418      	add	r0, r3
 80122f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d0a0      	beq.n	8012242 <uxr_receive_reliable_message+0x22>
 8012300:	6923      	ldr	r3, [r4, #16]
 8012302:	4798      	blx	r3
 8012304:	2802      	cmp	r0, #2
 8012306:	d008      	beq.n	801231a <uxr_receive_reliable_message+0xfa>
 8012308:	2801      	cmp	r0, #1
 801230a:	d0e2      	beq.n	80122d2 <uxr_receive_reliable_message+0xb2>
 801230c:	e799      	b.n	8012242 <uxr_receive_reliable_message+0x22>
 801230e:	9b08      	ldr	r3, [sp, #32]
 8012310:	81a5      	strh	r5, [r4, #12]
 8012312:	2601      	movs	r6, #1
 8012314:	f883 9000 	strb.w	r9, [r3]
 8012318:	e794      	b.n	8012244 <uxr_receive_reliable_message+0x24>
 801231a:	2601      	movs	r6, #1
 801231c:	e792      	b.n	8012244 <uxr_receive_reliable_message+0x24>
 801231e:	bf00      	nop

08012320 <uxr_next_input_reliable_buffer_available>:
 8012320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012324:	4604      	mov	r4, r0
 8012326:	460f      	mov	r7, r1
 8012328:	8980      	ldrh	r0, [r0, #12]
 801232a:	2101      	movs	r1, #1
 801232c:	4690      	mov	r8, r2
 801232e:	f000 fc03 	bl	8012b38 <uxr_seq_num_add>
 8012332:	8922      	ldrh	r2, [r4, #8]
 8012334:	fbb0 f6f2 	udiv	r6, r0, r2
 8012338:	fb02 0616 	mls	r6, r2, r6, r0
 801233c:	b2b6      	uxth	r6, r6
 801233e:	6863      	ldr	r3, [r4, #4]
 8012340:	fbb3 f3f2 	udiv	r3, r3, r2
 8012344:	fb06 f303 	mul.w	r3, r6, r3
 8012348:	6826      	ldr	r6, [r4, #0]
 801234a:	3304      	adds	r3, #4
 801234c:	441e      	add	r6, r3
 801234e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012352:	f1b9 0f00 	cmp.w	r9, #0
 8012356:	d023      	beq.n	80123a0 <uxr_next_input_reliable_buffer_available+0x80>
 8012358:	6923      	ldr	r3, [r4, #16]
 801235a:	4605      	mov	r5, r0
 801235c:	4630      	mov	r0, r6
 801235e:	4798      	blx	r3
 8012360:	4682      	mov	sl, r0
 8012362:	b300      	cbz	r0, 80123a6 <uxr_next_input_reliable_buffer_available+0x86>
 8012364:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012368:	2101      	movs	r1, #1
 801236a:	4650      	mov	r0, sl
 801236c:	f000 fbe4 	bl	8012b38 <uxr_seq_num_add>
 8012370:	8921      	ldrh	r1, [r4, #8]
 8012372:	fbb0 f2f1 	udiv	r2, r0, r1
 8012376:	4682      	mov	sl, r0
 8012378:	fb01 0212 	mls	r2, r1, r2, r0
 801237c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8012380:	b292      	uxth	r2, r2
 8012382:	fbb3 f3f1 	udiv	r3, r3, r1
 8012386:	fb02 f303 	mul.w	r3, r2, r3
 801238a:	3304      	adds	r3, #4
 801238c:	4418      	add	r0, r3
 801238e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012392:	b12b      	cbz	r3, 80123a0 <uxr_next_input_reliable_buffer_available+0x80>
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	4798      	blx	r3
 8012398:	2802      	cmp	r0, #2
 801239a:	d01b      	beq.n	80123d4 <uxr_next_input_reliable_buffer_available+0xb4>
 801239c:	2801      	cmp	r0, #1
 801239e:	d0e3      	beq.n	8012368 <uxr_next_input_reliable_buffer_available+0x48>
 80123a0:	2000      	movs	r0, #0
 80123a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a6:	464a      	mov	r2, r9
 80123a8:	4631      	mov	r1, r6
 80123aa:	4638      	mov	r0, r7
 80123ac:	f7f6 fdb8 	bl	8008f20 <ucdr_init_buffer>
 80123b0:	8921      	ldrh	r1, [r4, #8]
 80123b2:	fbb5 f2f1 	udiv	r2, r5, r1
 80123b6:	fb01 5212 	mls	r2, r1, r2, r5
 80123ba:	b292      	uxth	r2, r2
 80123bc:	6863      	ldr	r3, [r4, #4]
 80123be:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c2:	fb02 f303 	mul.w	r3, r2, r3
 80123c6:	6822      	ldr	r2, [r4, #0]
 80123c8:	f842 a003 	str.w	sl, [r2, r3]
 80123cc:	2001      	movs	r0, #1
 80123ce:	81a5      	strh	r5, [r4, #12]
 80123d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d4:	8920      	ldrh	r0, [r4, #8]
 80123d6:	fbb5 f3f0 	udiv	r3, r5, r0
 80123da:	fb00 5513 	mls	r5, r0, r3, r5
 80123de:	b2ad      	uxth	r5, r5
 80123e0:	6863      	ldr	r3, [r4, #4]
 80123e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80123e6:	fb03 f505 	mul.w	r5, r3, r5
 80123ea:	6823      	ldr	r3, [r4, #0]
 80123ec:	2000      	movs	r0, #0
 80123ee:	5158      	str	r0, [r3, r5]
 80123f0:	eb06 0108 	add.w	r1, r6, r8
 80123f4:	eba9 0208 	sub.w	r2, r9, r8
 80123f8:	4638      	mov	r0, r7
 80123fa:	f7f6 fd91 	bl	8008f20 <ucdr_init_buffer>
 80123fe:	4638      	mov	r0, r7
 8012400:	4903      	ldr	r1, [pc, #12]	@ (8012410 <uxr_next_input_reliable_buffer_available+0xf0>)
 8012402:	4622      	mov	r2, r4
 8012404:	f7f6 fd60 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 8012408:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801240c:	2001      	movs	r0, #1
 801240e:	e7c8      	b.n	80123a2 <uxr_next_input_reliable_buffer_available+0x82>
 8012410:	08012115 	.word	0x08012115

08012414 <uxr_process_heartbeat>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	4611      	mov	r1, r2
 8012418:	4604      	mov	r4, r0
 801241a:	89c0      	ldrh	r0, [r0, #14]
 801241c:	4615      	mov	r5, r2
 801241e:	f000 fb93 	bl	8012b48 <uxr_seq_num_cmp>
 8012422:	2800      	cmp	r0, #0
 8012424:	bfb8      	it	lt
 8012426:	81e5      	strhlt	r5, [r4, #14]
 8012428:	bd38      	pop	{r3, r4, r5, pc}
 801242a:	bf00      	nop

0801242c <uxr_compute_acknack>:
 801242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012430:	8903      	ldrh	r3, [r0, #8]
 8012432:	8985      	ldrh	r5, [r0, #12]
 8012434:	4604      	mov	r4, r0
 8012436:	460e      	mov	r6, r1
 8012438:	b1d3      	cbz	r3, 8012470 <uxr_compute_acknack+0x44>
 801243a:	4628      	mov	r0, r5
 801243c:	2701      	movs	r7, #1
 801243e:	e003      	b.n	8012448 <uxr_compute_acknack+0x1c>
 8012440:	4567      	cmp	r7, ip
 8012442:	d215      	bcs.n	8012470 <uxr_compute_acknack+0x44>
 8012444:	89a0      	ldrh	r0, [r4, #12]
 8012446:	3701      	adds	r7, #1
 8012448:	b2b9      	uxth	r1, r7
 801244a:	f000 fb75 	bl	8012b38 <uxr_seq_num_add>
 801244e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012452:	fbb0 f3fc 	udiv	r3, r0, ip
 8012456:	fb0c 0313 	mls	r3, ip, r3, r0
 801245a:	b29a      	uxth	r2, r3
 801245c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8012460:	fbb3 f3fc 	udiv	r3, r3, ip
 8012464:	fb02 f303 	mul.w	r3, r2, r3
 8012468:	58cb      	ldr	r3, [r1, r3]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1e8      	bne.n	8012440 <uxr_compute_acknack+0x14>
 801246e:	4605      	mov	r5, r0
 8012470:	8035      	strh	r5, [r6, #0]
 8012472:	2101      	movs	r1, #1
 8012474:	4628      	mov	r0, r5
 8012476:	89e7      	ldrh	r7, [r4, #14]
 8012478:	f000 fb62 	bl	8012b40 <uxr_seq_num_sub>
 801247c:	4601      	mov	r1, r0
 801247e:	4638      	mov	r0, r7
 8012480:	f000 fb5e 	bl	8012b40 <uxr_seq_num_sub>
 8012484:	4605      	mov	r5, r0
 8012486:	b318      	cbz	r0, 80124d0 <uxr_compute_acknack+0xa4>
 8012488:	f04f 0900 	mov.w	r9, #0
 801248c:	464f      	mov	r7, r9
 801248e:	f04f 0801 	mov.w	r8, #1
 8012492:	fa1f f189 	uxth.w	r1, r9
 8012496:	8830      	ldrh	r0, [r6, #0]
 8012498:	f000 fb4e 	bl	8012b38 <uxr_seq_num_add>
 801249c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80124a0:	fbb0 f3fc 	udiv	r3, r0, ip
 80124a4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80124a8:	fb03 001c 	mls	r0, r3, ip, r0
 80124ac:	b283      	uxth	r3, r0
 80124ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80124b2:	fb02 f303 	mul.w	r3, r2, r3
 80124b6:	fa08 f209 	lsl.w	r2, r8, r9
 80124ba:	58cb      	ldr	r3, [r1, r3]
 80124bc:	f109 0901 	add.w	r9, r9, #1
 80124c0:	b90b      	cbnz	r3, 80124c6 <uxr_compute_acknack+0x9a>
 80124c2:	4317      	orrs	r7, r2
 80124c4:	b2bf      	uxth	r7, r7
 80124c6:	454d      	cmp	r5, r9
 80124c8:	d1e3      	bne.n	8012492 <uxr_compute_acknack+0x66>
 80124ca:	4638      	mov	r0, r7
 80124cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d0:	4607      	mov	r7, r0
 80124d2:	4638      	mov	r0, r7
 80124d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080124d8 <uxr_init_output_best_effort_stream>:
 80124d8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80124dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80124e0:	6001      	str	r1, [r0, #0]
 80124e2:	7303      	strb	r3, [r0, #12]
 80124e4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop

080124ec <uxr_reset_output_best_effort_stream>:
 80124ec:	7b02      	ldrb	r2, [r0, #12]
 80124ee:	6042      	str	r2, [r0, #4]
 80124f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80124f4:	81c3      	strh	r3, [r0, #14]
 80124f6:	4770      	bx	lr

080124f8 <uxr_prepare_best_effort_buffer_to_write>:
 80124f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124fa:	4604      	mov	r4, r0
 80124fc:	b083      	sub	sp, #12
 80124fe:	6840      	ldr	r0, [r0, #4]
 8012500:	460d      	mov	r5, r1
 8012502:	4616      	mov	r6, r2
 8012504:	f7fd fe8a 	bl	801021c <uxr_submessage_padding>
 8012508:	6863      	ldr	r3, [r4, #4]
 801250a:	4418      	add	r0, r3
 801250c:	68a3      	ldr	r3, [r4, #8]
 801250e:	1942      	adds	r2, r0, r5
 8012510:	4293      	cmp	r3, r2
 8012512:	bf2c      	ite	cs
 8012514:	2701      	movcs	r7, #1
 8012516:	2700      	movcc	r7, #0
 8012518:	d202      	bcs.n	8012520 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801251a:	4638      	mov	r0, r7
 801251c:	b003      	add	sp, #12
 801251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012520:	9000      	str	r0, [sp, #0]
 8012522:	6821      	ldr	r1, [r4, #0]
 8012524:	4630      	mov	r0, r6
 8012526:	2300      	movs	r3, #0
 8012528:	f7f6 fce8 	bl	8008efc <ucdr_init_buffer_origin_offset>
 801252c:	6861      	ldr	r1, [r4, #4]
 801252e:	4638      	mov	r0, r7
 8012530:	4429      	add	r1, r5
 8012532:	6061      	str	r1, [r4, #4]
 8012534:	b003      	add	sp, #12
 8012536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012538 <uxr_prepare_best_effort_buffer_to_send>:
 8012538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801253c:	4604      	mov	r4, r0
 801253e:	461d      	mov	r5, r3
 8012540:	6840      	ldr	r0, [r0, #4]
 8012542:	7b23      	ldrb	r3, [r4, #12]
 8012544:	4298      	cmp	r0, r3
 8012546:	bf8c      	ite	hi
 8012548:	2601      	movhi	r6, #1
 801254a:	2600      	movls	r6, #0
 801254c:	d802      	bhi.n	8012554 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801254e:	4630      	mov	r0, r6
 8012550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012554:	4688      	mov	r8, r1
 8012556:	89e0      	ldrh	r0, [r4, #14]
 8012558:	2101      	movs	r1, #1
 801255a:	4617      	mov	r7, r2
 801255c:	f000 faec 	bl	8012b38 <uxr_seq_num_add>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	81e0      	strh	r0, [r4, #14]
 8012564:	8028      	strh	r0, [r5, #0]
 8012566:	f8c8 3000 	str.w	r3, [r8]
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	603b      	str	r3, [r7, #0]
 801256e:	7b23      	ldrb	r3, [r4, #12]
 8012570:	6063      	str	r3, [r4, #4]
 8012572:	4630      	mov	r0, r6
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012578 <on_full_output_buffer>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	6802      	ldr	r2, [r0, #0]
 801257c:	460c      	mov	r4, r1
 801257e:	6809      	ldr	r1, [r1, #0]
 8012580:	8923      	ldrh	r3, [r4, #8]
 8012582:	eba2 0c01 	sub.w	ip, r2, r1
 8012586:	6862      	ldr	r2, [r4, #4]
 8012588:	fbb2 f2f3 	udiv	r2, r2, r3
 801258c:	fbbc fcf2 	udiv	ip, ip, r2
 8012590:	f10c 0c01 	add.w	ip, ip, #1
 8012594:	fa1f fc8c 	uxth.w	ip, ip
 8012598:	fbbc fef3 	udiv	lr, ip, r3
 801259c:	fb03 c31e 	mls	r3, r3, lr, ip
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	fb02 f303 	mul.w	r3, r2, r3
 80125a6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80125aa:	58ca      	ldr	r2, [r1, r3]
 80125ac:	4463      	add	r3, ip
 80125ae:	eba2 020c 	sub.w	r2, r2, ip
 80125b2:	3308      	adds	r3, #8
 80125b4:	4605      	mov	r5, r0
 80125b6:	4419      	add	r1, r3
 80125b8:	3a04      	subs	r2, #4
 80125ba:	6903      	ldr	r3, [r0, #16]
 80125bc:	f7f6 fca8 	bl	8008f10 <ucdr_init_buffer_origin>
 80125c0:	4628      	mov	r0, r5
 80125c2:	4903      	ldr	r1, [pc, #12]	@ (80125d0 <on_full_output_buffer+0x58>)
 80125c4:	4622      	mov	r2, r4
 80125c6:	f7f6 fc7f 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 80125ca:	2000      	movs	r0, #0
 80125cc:	bd38      	pop	{r3, r4, r5, pc}
 80125ce:	bf00      	nop
 80125d0:	08012579 	.word	0x08012579

080125d4 <uxr_init_output_reliable_stream>:
 80125d4:	b410      	push	{r4}
 80125d6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80125da:	8103      	strh	r3, [r0, #8]
 80125dc:	e9c0 1200 	strd	r1, r2, [r0]
 80125e0:	f880 c00c 	strb.w	ip, [r0, #12]
 80125e4:	b1d3      	cbz	r3, 801261c <uxr_init_output_reliable_stream+0x48>
 80125e6:	f8c1 c000 	str.w	ip, [r1]
 80125ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80125ee:	f1bc 0f01 	cmp.w	ip, #1
 80125f2:	d913      	bls.n	801261c <uxr_init_output_reliable_stream+0x48>
 80125f4:	2301      	movs	r3, #1
 80125f6:	fbb3 f1fc 	udiv	r1, r3, ip
 80125fa:	fb0c 3111 	mls	r1, ip, r1, r3
 80125fe:	b289      	uxth	r1, r1
 8012600:	6842      	ldr	r2, [r0, #4]
 8012602:	6804      	ldr	r4, [r0, #0]
 8012604:	fbb2 f2fc 	udiv	r2, r2, ip
 8012608:	fb01 f202 	mul.w	r2, r1, r2
 801260c:	7b01      	ldrb	r1, [r0, #12]
 801260e:	50a1      	str	r1, [r4, r2]
 8012610:	3301      	adds	r3, #1
 8012612:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012616:	b29b      	uxth	r3, r3
 8012618:	459c      	cmp	ip, r3
 801261a:	d8ec      	bhi.n	80125f6 <uxr_init_output_reliable_stream+0x22>
 801261c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012620:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012624:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012628:	4905      	ldr	r1, [pc, #20]	@ (8012640 <uxr_init_output_reliable_stream+0x6c>)
 801262a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801262e:	f8c0 100e 	str.w	r1, [r0, #14]
 8012632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012636:	2300      	movs	r3, #0
 8012638:	8242      	strh	r2, [r0, #18]
 801263a:	8403      	strh	r3, [r0, #32]
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	ffff0000 	.word	0xffff0000

08012644 <uxr_reset_output_reliable_stream>:
 8012644:	8901      	ldrh	r1, [r0, #8]
 8012646:	b1b1      	cbz	r1, 8012676 <uxr_reset_output_reliable_stream+0x32>
 8012648:	f04f 0c00 	mov.w	ip, #0
 801264c:	4663      	mov	r3, ip
 801264e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012652:	fb01 3312 	mls	r3, r1, r2, r3
 8012656:	b29b      	uxth	r3, r3
 8012658:	6842      	ldr	r2, [r0, #4]
 801265a:	fbb2 f2f1 	udiv	r2, r2, r1
 801265e:	6801      	ldr	r1, [r0, #0]
 8012660:	fb02 f303 	mul.w	r3, r2, r3
 8012664:	7b02      	ldrb	r2, [r0, #12]
 8012666:	50ca      	str	r2, [r1, r3]
 8012668:	f10c 0c01 	add.w	ip, ip, #1
 801266c:	8901      	ldrh	r1, [r0, #8]
 801266e:	fa1f f38c 	uxth.w	r3, ip
 8012672:	4299      	cmp	r1, r3
 8012674:	d8eb      	bhi.n	801264e <uxr_reset_output_reliable_stream+0xa>
 8012676:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801267a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801267e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012682:	4904      	ldr	r1, [pc, #16]	@ (8012694 <uxr_reset_output_reliable_stream+0x50>)
 8012684:	f8c0 100e 	str.w	r1, [r0, #14]
 8012688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801268c:	2300      	movs	r3, #0
 801268e:	8242      	strh	r2, [r0, #18]
 8012690:	8403      	strh	r3, [r0, #32]
 8012692:	4770      	bx	lr
 8012694:	ffff0000 	.word	0xffff0000

08012698 <uxr_prepare_reliable_buffer_to_write>:
 8012698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269c:	4604      	mov	r4, r0
 801269e:	b091      	sub	sp, #68	@ 0x44
 80126a0:	8900      	ldrh	r0, [r0, #8]
 80126a2:	89e6      	ldrh	r6, [r4, #14]
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	9204      	str	r2, [sp, #16]
 80126a8:	fbb6 f2f0 	udiv	r2, r6, r0
 80126ac:	fb00 6212 	mls	r2, r0, r2, r6
 80126b0:	b292      	uxth	r2, r2
 80126b2:	6865      	ldr	r5, [r4, #4]
 80126b4:	fbb5 f5f0 	udiv	r5, r5, r0
 80126b8:	fb05 3202 	mla	r2, r5, r2, r3
 80126bc:	3204      	adds	r2, #4
 80126be:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80126c2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80126c6:	9203      	str	r2, [sp, #12]
 80126c8:	468b      	mov	fp, r1
 80126ca:	1f2f      	subs	r7, r5, #4
 80126cc:	2800      	cmp	r0, #0
 80126ce:	f000 814c 	beq.w	801296a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80126d2:	f04f 0c00 	mov.w	ip, #0
 80126d6:	46e2      	mov	sl, ip
 80126d8:	4661      	mov	r1, ip
 80126da:	fbb1 f2f0 	udiv	r2, r1, r0
 80126de:	fb00 1212 	mls	r2, r0, r2, r1
 80126e2:	b292      	uxth	r2, r2
 80126e4:	fb05 f202 	mul.w	r2, r5, r2
 80126e8:	f10c 0c01 	add.w	ip, ip, #1
 80126ec:	589a      	ldr	r2, [r3, r2]
 80126ee:	454a      	cmp	r2, r9
 80126f0:	bf08      	it	eq
 80126f2:	f10a 0a01 	addeq.w	sl, sl, #1
 80126f6:	fa1f f18c 	uxth.w	r1, ip
 80126fa:	bf08      	it	eq
 80126fc:	fa1f fa8a 	uxtheq.w	sl, sl
 8012700:	4281      	cmp	r1, r0
 8012702:	d3ea      	bcc.n	80126da <uxr_prepare_reliable_buffer_to_write+0x42>
 8012704:	4640      	mov	r0, r8
 8012706:	2104      	movs	r1, #4
 8012708:	f8cd a014 	str.w	sl, [sp, #20]
 801270c:	f7f6 fc0c 	bl	8008f28 <ucdr_alignment>
 8012710:	4480      	add	r8, r0
 8012712:	eb08 020b 	add.w	r2, r8, fp
 8012716:	42ba      	cmp	r2, r7
 8012718:	f240 80cd 	bls.w	80128b6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801271c:	7b22      	ldrb	r2, [r4, #12]
 801271e:	445a      	add	r2, fp
 8012720:	42ba      	cmp	r2, r7
 8012722:	f240 80b5 	bls.w	8012890 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8012726:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801272a:	33fc      	adds	r3, #252	@ 0xfc
 801272c:	b2ba      	uxth	r2, r7
 801272e:	4413      	add	r3, r2
 8012730:	b29b      	uxth	r3, r3
 8012732:	fb0a f903 	mul.w	r9, sl, r3
 8012736:	45d9      	cmp	r9, fp
 8012738:	9305      	str	r3, [sp, #20]
 801273a:	9306      	str	r3, [sp, #24]
 801273c:	f0c0 80b7 	bcc.w	80128ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8012740:	f108 0304 	add.w	r3, r8, #4
 8012744:	42bb      	cmp	r3, r7
 8012746:	f080 80db 	bcs.w	8012900 <uxr_prepare_reliable_buffer_to_write+0x268>
 801274a:	f1a2 0904 	sub.w	r9, r2, #4
 801274e:	eba9 0908 	sub.w	r9, r9, r8
 8012752:	9b05      	ldr	r3, [sp, #20]
 8012754:	fa1f f989 	uxth.w	r9, r9
 8012758:	ebab 0b09 	sub.w	fp, fp, r9
 801275c:	fbbb f2f3 	udiv	r2, fp, r3
 8012760:	fb03 b312 	mls	r3, r3, r2, fp
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 80c8 	beq.w	80128fa <uxr_prepare_reliable_buffer_to_write+0x262>
 801276a:	3201      	adds	r2, #1
 801276c:	b292      	uxth	r2, r2
 801276e:	9306      	str	r3, [sp, #24]
 8012770:	4552      	cmp	r2, sl
 8012772:	f200 809c 	bhi.w	80128ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8012776:	f10d 0b20 	add.w	fp, sp, #32
 801277a:	2a00      	cmp	r2, #0
 801277c:	d042      	beq.n	8012804 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801277e:	f8cd 801c 	str.w	r8, [sp, #28]
 8012782:	f04f 0a00 	mov.w	sl, #0
 8012786:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801278a:	9505      	str	r5, [sp, #20]
 801278c:	f10d 0b20 	add.w	fp, sp, #32
 8012790:	4615      	mov	r5, r2
 8012792:	e000      	b.n	8012796 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8012794:	46c1      	mov	r9, r8
 8012796:	8920      	ldrh	r0, [r4, #8]
 8012798:	fbb6 f2f0 	udiv	r2, r6, r0
 801279c:	fb00 6112 	mls	r1, r0, r2, r6
 80127a0:	b28a      	uxth	r2, r1
 80127a2:	6863      	ldr	r3, [r4, #4]
 80127a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	fb02 f101 	mul.w	r1, r2, r1
 80127ae:	3104      	adds	r1, #4
 80127b0:	4419      	add	r1, r3
 80127b2:	4658      	mov	r0, fp
 80127b4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80127b8:	9200      	str	r2, [sp, #0]
 80127ba:	2300      	movs	r3, #0
 80127bc:	463a      	mov	r2, r7
 80127be:	f7f6 fb9d 	bl	8008efc <ucdr_init_buffer_origin_offset>
 80127c2:	464a      	mov	r2, r9
 80127c4:	2300      	movs	r3, #0
 80127c6:	210d      	movs	r1, #13
 80127c8:	4658      	mov	r0, fp
 80127ca:	f7fd fce7 	bl	801019c <uxr_buffer_submessage_header>
 80127ce:	8921      	ldrh	r1, [r4, #8]
 80127d0:	fbb6 f2f1 	udiv	r2, r6, r1
 80127d4:	fb01 6212 	mls	r2, r1, r2, r6
 80127d8:	b292      	uxth	r2, r2
 80127da:	6863      	ldr	r3, [r4, #4]
 80127dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80127e0:	fb02 f303 	mul.w	r3, r2, r3
 80127e4:	6822      	ldr	r2, [r4, #0]
 80127e6:	4630      	mov	r0, r6
 80127e8:	50d7      	str	r7, [r2, r3]
 80127ea:	2101      	movs	r1, #1
 80127ec:	f000 f9a4 	bl	8012b38 <uxr_seq_num_add>
 80127f0:	f10a 0a01 	add.w	sl, sl, #1
 80127f4:	fa1f f38a 	uxth.w	r3, sl
 80127f8:	429d      	cmp	r5, r3
 80127fa:	4606      	mov	r6, r0
 80127fc:	d8ca      	bhi.n	8012794 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80127fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012802:	9d05      	ldr	r5, [sp, #20]
 8012804:	8920      	ldrh	r0, [r4, #8]
 8012806:	fbb6 f3f0 	udiv	r3, r6, r0
 801280a:	fb00 6313 	mls	r3, r0, r3, r6
 801280e:	b299      	uxth	r1, r3
 8012810:	6863      	ldr	r3, [r4, #4]
 8012812:	fbb3 f3f0 	udiv	r3, r3, r0
 8012816:	fb01 f303 	mul.w	r3, r1, r3
 801281a:	6821      	ldr	r1, [r4, #0]
 801281c:	3304      	adds	r3, #4
 801281e:	4419      	add	r1, r3
 8012820:	463a      	mov	r2, r7
 8012822:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012826:	9000      	str	r0, [sp, #0]
 8012828:	2300      	movs	r3, #0
 801282a:	4658      	mov	r0, fp
 801282c:	f7f6 fb66 	bl	8008efc <ucdr_init_buffer_origin_offset>
 8012830:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8012834:	4658      	mov	r0, fp
 8012836:	fa1f f289 	uxth.w	r2, r9
 801283a:	2302      	movs	r3, #2
 801283c:	210d      	movs	r1, #13
 801283e:	f7fd fcad 	bl	801019c <uxr_buffer_submessage_header>
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	8927      	ldrh	r7, [r4, #8]
 8012846:	7b20      	ldrb	r0, [r4, #12]
 8012848:	f108 0104 	add.w	r1, r8, #4
 801284c:	440b      	add	r3, r1
 801284e:	4619      	mov	r1, r3
 8012850:	fbb6 f3f7 	udiv	r3, r6, r7
 8012854:	fb07 6313 	mls	r3, r7, r3, r6
 8012858:	f1a5 0208 	sub.w	r2, r5, #8
 801285c:	b29d      	uxth	r5, r3
 801285e:	3004      	adds	r0, #4
 8012860:	6863      	ldr	r3, [r4, #4]
 8012862:	fbb3 f3f7 	udiv	r3, r3, r7
 8012866:	fb05 f303 	mul.w	r3, r5, r3
 801286a:	6825      	ldr	r5, [r4, #0]
 801286c:	4448      	add	r0, r9
 801286e:	50e8      	str	r0, [r5, r3]
 8012870:	9d04      	ldr	r5, [sp, #16]
 8012872:	eba2 0208 	sub.w	r2, r2, r8
 8012876:	4628      	mov	r0, r5
 8012878:	f7f6 fb52 	bl	8008f20 <ucdr_init_buffer>
 801287c:	4628      	mov	r0, r5
 801287e:	493c      	ldr	r1, [pc, #240]	@ (8012970 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8012880:	4622      	mov	r2, r4
 8012882:	f7f6 fb21 	bl	8008ec8 <ucdr_set_on_full_buffer_callback>
 8012886:	2001      	movs	r0, #1
 8012888:	81e6      	strh	r6, [r4, #14]
 801288a:	b011      	add	sp, #68	@ 0x44
 801288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012890:	2101      	movs	r1, #1
 8012892:	89e0      	ldrh	r0, [r4, #14]
 8012894:	f000 f950 	bl	8012b38 <uxr_seq_num_add>
 8012898:	8921      	ldrh	r1, [r4, #8]
 801289a:	4605      	mov	r5, r0
 801289c:	8a60      	ldrh	r0, [r4, #18]
 801289e:	f000 f94b 	bl	8012b38 <uxr_seq_num_add>
 80128a2:	4601      	mov	r1, r0
 80128a4:	4628      	mov	r0, r5
 80128a6:	f000 f94f 	bl	8012b48 <uxr_seq_num_cmp>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	dd42      	ble.n	8012934 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80128ae:	2000      	movs	r0, #0
 80128b0:	b011      	add	sp, #68	@ 0x44
 80128b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b6:	8921      	ldrh	r1, [r4, #8]
 80128b8:	8a60      	ldrh	r0, [r4, #18]
 80128ba:	9205      	str	r2, [sp, #20]
 80128bc:	f000 f93c 	bl	8012b38 <uxr_seq_num_add>
 80128c0:	4601      	mov	r1, r0
 80128c2:	4630      	mov	r0, r6
 80128c4:	f000 f940 	bl	8012b48 <uxr_seq_num_cmp>
 80128c8:	2800      	cmp	r0, #0
 80128ca:	9a05      	ldr	r2, [sp, #20]
 80128cc:	dcef      	bgt.n	80128ae <uxr_prepare_reliable_buffer_to_write+0x216>
 80128ce:	8927      	ldrh	r7, [r4, #8]
 80128d0:	fbb6 f3f7 	udiv	r3, r6, r7
 80128d4:	fb07 6313 	mls	r3, r7, r3, r6
 80128d8:	b29d      	uxth	r5, r3
 80128da:	6863      	ldr	r3, [r4, #4]
 80128dc:	6824      	ldr	r4, [r4, #0]
 80128de:	fbb3 f3f7 	udiv	r3, r3, r7
 80128e2:	fb05 f303 	mul.w	r3, r5, r3
 80128e6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80128ea:	50e2      	str	r2, [r4, r3]
 80128ec:	2300      	movs	r3, #0
 80128ee:	f8cd 8000 	str.w	r8, [sp]
 80128f2:	f7f6 fb03 	bl	8008efc <ucdr_init_buffer_origin_offset>
 80128f6:	2001      	movs	r0, #1
 80128f8:	e7da      	b.n	80128b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 80128fa:	b293      	uxth	r3, r2
 80128fc:	461a      	mov	r2, r3
 80128fe:	e737      	b.n	8012770 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8012900:	4630      	mov	r0, r6
 8012902:	2101      	movs	r1, #1
 8012904:	9207      	str	r2, [sp, #28]
 8012906:	f000 f917 	bl	8012b38 <uxr_seq_num_add>
 801290a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801290e:	fbb0 f1fc 	udiv	r1, r0, ip
 8012912:	fb0c 0111 	mls	r1, ip, r1, r0
 8012916:	4606      	mov	r6, r0
 8012918:	b288      	uxth	r0, r1
 801291a:	6863      	ldr	r3, [r4, #4]
 801291c:	fbb3 f1fc 	udiv	r1, r3, ip
 8012920:	6823      	ldr	r3, [r4, #0]
 8012922:	9a07      	ldr	r2, [sp, #28]
 8012924:	fb00 f101 	mul.w	r1, r0, r1
 8012928:	3104      	adds	r1, #4
 801292a:	440b      	add	r3, r1
 801292c:	9303      	str	r3, [sp, #12]
 801292e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8012932:	e70a      	b.n	801274a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8012934:	8921      	ldrh	r1, [r4, #8]
 8012936:	fbb5 f3f1 	udiv	r3, r5, r1
 801293a:	fb01 5313 	mls	r3, r1, r3, r5
 801293e:	b29a      	uxth	r2, r3
 8012940:	6863      	ldr	r3, [r4, #4]
 8012942:	fbb3 f3f1 	udiv	r3, r3, r1
 8012946:	6821      	ldr	r1, [r4, #0]
 8012948:	9804      	ldr	r0, [sp, #16]
 801294a:	fb02 f303 	mul.w	r3, r2, r3
 801294e:	3304      	adds	r3, #4
 8012950:	7b22      	ldrb	r2, [r4, #12]
 8012952:	4419      	add	r1, r3
 8012954:	445a      	add	r2, fp
 8012956:	f841 2c04 	str.w	r2, [r1, #-4]
 801295a:	7b23      	ldrb	r3, [r4, #12]
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	2300      	movs	r3, #0
 8012960:	f7f6 facc 	bl	8008efc <ucdr_init_buffer_origin_offset>
 8012964:	81e5      	strh	r5, [r4, #14]
 8012966:	2001      	movs	r0, #1
 8012968:	e7a2      	b.n	80128b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801296a:	4682      	mov	sl, r0
 801296c:	e6ca      	b.n	8012704 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801296e:	bf00      	nop
 8012970:	08012579 	.word	0x08012579

08012974 <uxr_prepare_next_reliable_buffer_to_send>:
 8012974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	460f      	mov	r7, r1
 801297a:	8a00      	ldrh	r0, [r0, #16]
 801297c:	2101      	movs	r1, #1
 801297e:	4616      	mov	r6, r2
 8012980:	461d      	mov	r5, r3
 8012982:	f000 f8d9 	bl	8012b38 <uxr_seq_num_add>
 8012986:	8028      	strh	r0, [r5, #0]
 8012988:	8922      	ldrh	r2, [r4, #8]
 801298a:	fbb0 f3f2 	udiv	r3, r0, r2
 801298e:	fb02 0c13 	mls	ip, r2, r3, r0
 8012992:	fa1f fc8c 	uxth.w	ip, ip
 8012996:	6863      	ldr	r3, [r4, #4]
 8012998:	fbb3 f3f2 	udiv	r3, r3, r2
 801299c:	fb0c fc03 	mul.w	ip, ip, r3
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	89e1      	ldrh	r1, [r4, #14]
 80129a4:	f10c 0c04 	add.w	ip, ip, #4
 80129a8:	4463      	add	r3, ip
 80129aa:	603b      	str	r3, [r7, #0]
 80129ac:	6823      	ldr	r3, [r4, #0]
 80129ae:	449c      	add	ip, r3
 80129b0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80129b4:	6033      	str	r3, [r6, #0]
 80129b6:	f000 f8c7 	bl	8012b48 <uxr_seq_num_cmp>
 80129ba:	2800      	cmp	r0, #0
 80129bc:	dd01      	ble.n	80129c2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80129be:	2000      	movs	r0, #0
 80129c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c2:	7b23      	ldrb	r3, [r4, #12]
 80129c4:	6832      	ldr	r2, [r6, #0]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d9f9      	bls.n	80129be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80129ca:	8a61      	ldrh	r1, [r4, #18]
 80129cc:	8a20      	ldrh	r0, [r4, #16]
 80129ce:	f000 f8b7 	bl	8012b40 <uxr_seq_num_sub>
 80129d2:	8923      	ldrh	r3, [r4, #8]
 80129d4:	4283      	cmp	r3, r0
 80129d6:	d0f2      	beq.n	80129be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80129d8:	8828      	ldrh	r0, [r5, #0]
 80129da:	89e3      	ldrh	r3, [r4, #14]
 80129dc:	8220      	strh	r0, [r4, #16]
 80129de:	4298      	cmp	r0, r3
 80129e0:	d001      	beq.n	80129e6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80129e2:	2001      	movs	r0, #1
 80129e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129e6:	2101      	movs	r1, #1
 80129e8:	f000 f8a6 	bl	8012b38 <uxr_seq_num_add>
 80129ec:	81e0      	strh	r0, [r4, #14]
 80129ee:	2001      	movs	r0, #1
 80129f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129f2:	bf00      	nop

080129f4 <uxr_update_output_stream_heartbeat_timestamp>:
 80129f4:	b570      	push	{r4, r5, r6, lr}
 80129f6:	8a01      	ldrh	r1, [r0, #16]
 80129f8:	4604      	mov	r4, r0
 80129fa:	8a40      	ldrh	r0, [r0, #18]
 80129fc:	4615      	mov	r5, r2
 80129fe:	461e      	mov	r6, r3
 8012a00:	f000 f8a2 	bl	8012b48 <uxr_seq_num_cmp>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	db07      	blt.n	8012a18 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012a10:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012a14:	2000      	movs	r0, #0
 8012a16:	bd70      	pop	{r4, r5, r6, pc}
 8012a18:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012a1c:	b940      	cbnz	r0, 8012a30 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f884 3020 	strb.w	r3, [r4, #32]
 8012a24:	3564      	adds	r5, #100	@ 0x64
 8012a26:	f146 0600 	adc.w	r6, r6, #0
 8012a2a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012a2e:	bd70      	pop	{r4, r5, r6, pc}
 8012a30:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8012a34:	4295      	cmp	r5, r2
 8012a36:	eb76 0303 	sbcs.w	r3, r6, r3
 8012a3a:	bfa5      	ittet	ge
 8012a3c:	3001      	addge	r0, #1
 8012a3e:	f884 0020 	strbge.w	r0, [r4, #32]
 8012a42:	2000      	movlt	r0, #0
 8012a44:	2001      	movge	r0, #1
 8012a46:	e7ed      	b.n	8012a24 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08012a48 <uxr_begin_output_nack_buffer_it>:
 8012a48:	8a40      	ldrh	r0, [r0, #18]
 8012a4a:	4770      	bx	lr

08012a4c <uxr_next_reliable_nack_buffer_to_send>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8012a54:	b082      	sub	sp, #8
 8012a56:	f1b8 0f00 	cmp.w	r8, #0
 8012a5a:	d011      	beq.n	8012a80 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	8818      	ldrh	r0, [r3, #0]
 8012a60:	460e      	mov	r6, r1
 8012a62:	4617      	mov	r7, r2
 8012a64:	461d      	mov	r5, r3
 8012a66:	2101      	movs	r1, #1
 8012a68:	f000 f866 	bl	8012b38 <uxr_seq_num_add>
 8012a6c:	8028      	strh	r0, [r5, #0]
 8012a6e:	8a21      	ldrh	r1, [r4, #16]
 8012a70:	f000 f86a 	bl	8012b48 <uxr_seq_num_cmp>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	dd07      	ble.n	8012a88 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8012a78:	f04f 0800 	mov.w	r8, #0
 8012a7c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8012a80:	4640      	mov	r0, r8
 8012a82:	b002      	add	sp, #8
 8012a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a88:	8921      	ldrh	r1, [r4, #8]
 8012a8a:	8828      	ldrh	r0, [r5, #0]
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012a92:	fb01 0c12 	mls	ip, r1, r2, r0
 8012a96:	fa1f f28c 	uxth.w	r2, ip
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	6863      	ldr	r3, [r4, #4]
 8012a9e:	fbb3 fcf1 	udiv	ip, r3, r1
 8012aa2:	9b01      	ldr	r3, [sp, #4]
 8012aa4:	fb02 fc0c 	mul.w	ip, r2, ip
 8012aa8:	f10c 0c04 	add.w	ip, ip, #4
 8012aac:	4463      	add	r3, ip
 8012aae:	6033      	str	r3, [r6, #0]
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	4463      	add	r3, ip
 8012ab4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012ab8:	603b      	str	r3, [r7, #0]
 8012aba:	7b22      	ldrb	r2, [r4, #12]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d0d2      	beq.n	8012a66 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8012ac0:	4640      	mov	r0, r8
 8012ac2:	b002      	add	sp, #8
 8012ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ac8 <uxr_process_acknack>:
 8012ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aca:	4604      	mov	r4, r0
 8012acc:	460e      	mov	r6, r1
 8012ace:	4610      	mov	r0, r2
 8012ad0:	2101      	movs	r1, #1
 8012ad2:	f000 f835 	bl	8012b40 <uxr_seq_num_sub>
 8012ad6:	8a61      	ldrh	r1, [r4, #18]
 8012ad8:	f000 f832 	bl	8012b40 <uxr_seq_num_sub>
 8012adc:	b1c0      	cbz	r0, 8012b10 <uxr_process_acknack+0x48>
 8012ade:	4605      	mov	r5, r0
 8012ae0:	2700      	movs	r7, #0
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	8a60      	ldrh	r0, [r4, #18]
 8012ae6:	f000 f827 	bl	8012b38 <uxr_seq_num_add>
 8012aea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012aee:	fbb0 f1fc 	udiv	r1, r0, ip
 8012af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012af6:	fb0c 0111 	mls	r1, ip, r1, r0
 8012afa:	b289      	uxth	r1, r1
 8012afc:	3701      	adds	r7, #1
 8012afe:	fbb3 f3fc 	udiv	r3, r3, ip
 8012b02:	fb01 f303 	mul.w	r3, r1, r3
 8012b06:	42bd      	cmp	r5, r7
 8012b08:	7b21      	ldrb	r1, [r4, #12]
 8012b0a:	8260      	strh	r0, [r4, #18]
 8012b0c:	50d1      	str	r1, [r2, r3]
 8012b0e:	d1e8      	bne.n	8012ae2 <uxr_process_acknack+0x1a>
 8012b10:	3e00      	subs	r6, #0
 8012b12:	f04f 0300 	mov.w	r3, #0
 8012b16:	bf18      	it	ne
 8012b18:	2601      	movne	r6, #1
 8012b1a:	f884 3020 	strb.w	r3, [r4, #32]
 8012b1e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8012b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b24 <uxr_is_output_up_to_date>:
 8012b24:	8a01      	ldrh	r1, [r0, #16]
 8012b26:	8a40      	ldrh	r0, [r0, #18]
 8012b28:	b508      	push	{r3, lr}
 8012b2a:	f000 f80d 	bl	8012b48 <uxr_seq_num_cmp>
 8012b2e:	fab0 f080 	clz	r0, r0
 8012b32:	0940      	lsrs	r0, r0, #5
 8012b34:	bd08      	pop	{r3, pc}
 8012b36:	bf00      	nop

08012b38 <uxr_seq_num_add>:
 8012b38:	4408      	add	r0, r1
 8012b3a:	b280      	uxth	r0, r0
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop

08012b40 <uxr_seq_num_sub>:
 8012b40:	1a40      	subs	r0, r0, r1
 8012b42:	b280      	uxth	r0, r0
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop

08012b48 <uxr_seq_num_cmp>:
 8012b48:	4288      	cmp	r0, r1
 8012b4a:	d011      	beq.n	8012b70 <uxr_seq_num_cmp+0x28>
 8012b4c:	d309      	bcc.n	8012b62 <uxr_seq_num_cmp+0x1a>
 8012b4e:	4288      	cmp	r0, r1
 8012b50:	d910      	bls.n	8012b74 <uxr_seq_num_cmp+0x2c>
 8012b52:	1a40      	subs	r0, r0, r1
 8012b54:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8012b58:	bfd4      	ite	le
 8012b5a:	2001      	movle	r0, #1
 8012b5c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8012b60:	4770      	bx	lr
 8012b62:	1a0b      	subs	r3, r1, r0
 8012b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012b68:	daf1      	bge.n	8012b4e <uxr_seq_num_cmp+0x6>
 8012b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b6e:	4770      	bx	lr
 8012b70:	2000      	movs	r0, #0
 8012b72:	4770      	bx	lr
 8012b74:	2001      	movs	r0, #1
 8012b76:	4770      	bx	lr

08012b78 <calloc>:
 8012b78:	4b02      	ldr	r3, [pc, #8]	@ (8012b84 <calloc+0xc>)
 8012b7a:	460a      	mov	r2, r1
 8012b7c:	4601      	mov	r1, r0
 8012b7e:	6818      	ldr	r0, [r3, #0]
 8012b80:	f000 b802 	b.w	8012b88 <_calloc_r>
 8012b84:	200000c0 	.word	0x200000c0

08012b88 <_calloc_r>:
 8012b88:	b570      	push	{r4, r5, r6, lr}
 8012b8a:	fba1 5402 	umull	r5, r4, r1, r2
 8012b8e:	b93c      	cbnz	r4, 8012ba0 <_calloc_r+0x18>
 8012b90:	4629      	mov	r1, r5
 8012b92:	f000 f887 	bl	8012ca4 <_malloc_r>
 8012b96:	4606      	mov	r6, r0
 8012b98:	b928      	cbnz	r0, 8012ba6 <_calloc_r+0x1e>
 8012b9a:	2600      	movs	r6, #0
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ba0:	220c      	movs	r2, #12
 8012ba2:	6002      	str	r2, [r0, #0]
 8012ba4:	e7f9      	b.n	8012b9a <_calloc_r+0x12>
 8012ba6:	462a      	mov	r2, r5
 8012ba8:	4621      	mov	r1, r4
 8012baa:	f000 fbcf 	bl	801334c <memset>
 8012bae:	e7f5      	b.n	8012b9c <_calloc_r+0x14>

08012bb0 <getenv>:
 8012bb0:	b507      	push	{r0, r1, r2, lr}
 8012bb2:	4b04      	ldr	r3, [pc, #16]	@ (8012bc4 <getenv+0x14>)
 8012bb4:	4601      	mov	r1, r0
 8012bb6:	aa01      	add	r2, sp, #4
 8012bb8:	6818      	ldr	r0, [r3, #0]
 8012bba:	f000 f805 	bl	8012bc8 <_findenv_r>
 8012bbe:	b003      	add	sp, #12
 8012bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bc4:	200000c0 	.word	0x200000c0

08012bc8 <_findenv_r>:
 8012bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012c3c <_findenv_r+0x74>
 8012bd0:	4606      	mov	r6, r0
 8012bd2:	4689      	mov	r9, r1
 8012bd4:	4617      	mov	r7, r2
 8012bd6:	f000 fcaf 	bl	8013538 <__env_lock>
 8012bda:	f8da 4000 	ldr.w	r4, [sl]
 8012bde:	b134      	cbz	r4, 8012bee <_findenv_r+0x26>
 8012be0:	464b      	mov	r3, r9
 8012be2:	4698      	mov	r8, r3
 8012be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012be8:	b13a      	cbz	r2, 8012bfa <_findenv_r+0x32>
 8012bea:	2a3d      	cmp	r2, #61	@ 0x3d
 8012bec:	d1f9      	bne.n	8012be2 <_findenv_r+0x1a>
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f000 fca8 	bl	8013544 <__env_unlock>
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfa:	eba8 0809 	sub.w	r8, r8, r9
 8012bfe:	46a3      	mov	fp, r4
 8012c00:	f854 0b04 	ldr.w	r0, [r4], #4
 8012c04:	2800      	cmp	r0, #0
 8012c06:	d0f2      	beq.n	8012bee <_findenv_r+0x26>
 8012c08:	4642      	mov	r2, r8
 8012c0a:	4649      	mov	r1, r9
 8012c0c:	f000 fbb3 	bl	8013376 <strncmp>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d1f4      	bne.n	8012bfe <_findenv_r+0x36>
 8012c14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012c18:	eb03 0508 	add.w	r5, r3, r8
 8012c1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012c20:	2b3d      	cmp	r3, #61	@ 0x3d
 8012c22:	d1ec      	bne.n	8012bfe <_findenv_r+0x36>
 8012c24:	f8da 3000 	ldr.w	r3, [sl]
 8012c28:	ebab 0303 	sub.w	r3, fp, r3
 8012c2c:	109b      	asrs	r3, r3, #2
 8012c2e:	4630      	mov	r0, r6
 8012c30:	603b      	str	r3, [r7, #0]
 8012c32:	f000 fc87 	bl	8013544 <__env_unlock>
 8012c36:	1c68      	adds	r0, r5, #1
 8012c38:	e7dd      	b.n	8012bf6 <_findenv_r+0x2e>
 8012c3a:	bf00      	nop
 8012c3c:	20000000 	.word	0x20000000

08012c40 <malloc>:
 8012c40:	4b02      	ldr	r3, [pc, #8]	@ (8012c4c <malloc+0xc>)
 8012c42:	4601      	mov	r1, r0
 8012c44:	6818      	ldr	r0, [r3, #0]
 8012c46:	f000 b82d 	b.w	8012ca4 <_malloc_r>
 8012c4a:	bf00      	nop
 8012c4c:	200000c0 	.word	0x200000c0

08012c50 <free>:
 8012c50:	4b02      	ldr	r3, [pc, #8]	@ (8012c5c <free+0xc>)
 8012c52:	4601      	mov	r1, r0
 8012c54:	6818      	ldr	r0, [r3, #0]
 8012c56:	f000 bc7b 	b.w	8013550 <_free_r>
 8012c5a:	bf00      	nop
 8012c5c:	200000c0 	.word	0x200000c0

08012c60 <sbrk_aligned>:
 8012c60:	b570      	push	{r4, r5, r6, lr}
 8012c62:	4e0f      	ldr	r6, [pc, #60]	@ (8012ca0 <sbrk_aligned+0x40>)
 8012c64:	460c      	mov	r4, r1
 8012c66:	6831      	ldr	r1, [r6, #0]
 8012c68:	4605      	mov	r5, r0
 8012c6a:	b911      	cbnz	r1, 8012c72 <sbrk_aligned+0x12>
 8012c6c:	f000 fbe0 	bl	8013430 <_sbrk_r>
 8012c70:	6030      	str	r0, [r6, #0]
 8012c72:	4621      	mov	r1, r4
 8012c74:	4628      	mov	r0, r5
 8012c76:	f000 fbdb 	bl	8013430 <_sbrk_r>
 8012c7a:	1c43      	adds	r3, r0, #1
 8012c7c:	d103      	bne.n	8012c86 <sbrk_aligned+0x26>
 8012c7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012c82:	4620      	mov	r0, r4
 8012c84:	bd70      	pop	{r4, r5, r6, pc}
 8012c86:	1cc4      	adds	r4, r0, #3
 8012c88:	f024 0403 	bic.w	r4, r4, #3
 8012c8c:	42a0      	cmp	r0, r4
 8012c8e:	d0f8      	beq.n	8012c82 <sbrk_aligned+0x22>
 8012c90:	1a21      	subs	r1, r4, r0
 8012c92:	4628      	mov	r0, r5
 8012c94:	f000 fbcc 	bl	8013430 <_sbrk_r>
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d1f2      	bne.n	8012c82 <sbrk_aligned+0x22>
 8012c9c:	e7ef      	b.n	8012c7e <sbrk_aligned+0x1e>
 8012c9e:	bf00      	nop
 8012ca0:	2000dac4 	.word	0x2000dac4

08012ca4 <_malloc_r>:
 8012ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ca8:	1ccd      	adds	r5, r1, #3
 8012caa:	f025 0503 	bic.w	r5, r5, #3
 8012cae:	3508      	adds	r5, #8
 8012cb0:	2d0c      	cmp	r5, #12
 8012cb2:	bf38      	it	cc
 8012cb4:	250c      	movcc	r5, #12
 8012cb6:	2d00      	cmp	r5, #0
 8012cb8:	4606      	mov	r6, r0
 8012cba:	db01      	blt.n	8012cc0 <_malloc_r+0x1c>
 8012cbc:	42a9      	cmp	r1, r5
 8012cbe:	d904      	bls.n	8012cca <_malloc_r+0x26>
 8012cc0:	230c      	movs	r3, #12
 8012cc2:	6033      	str	r3, [r6, #0]
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012da0 <_malloc_r+0xfc>
 8012cce:	f000 f869 	bl	8012da4 <__malloc_lock>
 8012cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8012cd6:	461c      	mov	r4, r3
 8012cd8:	bb44      	cbnz	r4, 8012d2c <_malloc_r+0x88>
 8012cda:	4629      	mov	r1, r5
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f7ff ffbf 	bl	8012c60 <sbrk_aligned>
 8012ce2:	1c43      	adds	r3, r0, #1
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	d158      	bne.n	8012d9a <_malloc_r+0xf6>
 8012ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8012cec:	4627      	mov	r7, r4
 8012cee:	2f00      	cmp	r7, #0
 8012cf0:	d143      	bne.n	8012d7a <_malloc_r+0xd6>
 8012cf2:	2c00      	cmp	r4, #0
 8012cf4:	d04b      	beq.n	8012d8e <_malloc_r+0xea>
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	eb04 0903 	add.w	r9, r4, r3
 8012d00:	f000 fb96 	bl	8013430 <_sbrk_r>
 8012d04:	4581      	cmp	r9, r0
 8012d06:	d142      	bne.n	8012d8e <_malloc_r+0xea>
 8012d08:	6821      	ldr	r1, [r4, #0]
 8012d0a:	1a6d      	subs	r5, r5, r1
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7ff ffa6 	bl	8012c60 <sbrk_aligned>
 8012d14:	3001      	adds	r0, #1
 8012d16:	d03a      	beq.n	8012d8e <_malloc_r+0xea>
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	442b      	add	r3, r5
 8012d1c:	6023      	str	r3, [r4, #0]
 8012d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8012d22:	685a      	ldr	r2, [r3, #4]
 8012d24:	bb62      	cbnz	r2, 8012d80 <_malloc_r+0xdc>
 8012d26:	f8c8 7000 	str.w	r7, [r8]
 8012d2a:	e00f      	b.n	8012d4c <_malloc_r+0xa8>
 8012d2c:	6822      	ldr	r2, [r4, #0]
 8012d2e:	1b52      	subs	r2, r2, r5
 8012d30:	d420      	bmi.n	8012d74 <_malloc_r+0xd0>
 8012d32:	2a0b      	cmp	r2, #11
 8012d34:	d917      	bls.n	8012d66 <_malloc_r+0xc2>
 8012d36:	1961      	adds	r1, r4, r5
 8012d38:	42a3      	cmp	r3, r4
 8012d3a:	6025      	str	r5, [r4, #0]
 8012d3c:	bf18      	it	ne
 8012d3e:	6059      	strne	r1, [r3, #4]
 8012d40:	6863      	ldr	r3, [r4, #4]
 8012d42:	bf08      	it	eq
 8012d44:	f8c8 1000 	streq.w	r1, [r8]
 8012d48:	5162      	str	r2, [r4, r5]
 8012d4a:	604b      	str	r3, [r1, #4]
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	f000 f82f 	bl	8012db0 <__malloc_unlock>
 8012d52:	f104 000b 	add.w	r0, r4, #11
 8012d56:	1d23      	adds	r3, r4, #4
 8012d58:	f020 0007 	bic.w	r0, r0, #7
 8012d5c:	1ac2      	subs	r2, r0, r3
 8012d5e:	bf1c      	itt	ne
 8012d60:	1a1b      	subne	r3, r3, r0
 8012d62:	50a3      	strne	r3, [r4, r2]
 8012d64:	e7af      	b.n	8012cc6 <_malloc_r+0x22>
 8012d66:	6862      	ldr	r2, [r4, #4]
 8012d68:	42a3      	cmp	r3, r4
 8012d6a:	bf0c      	ite	eq
 8012d6c:	f8c8 2000 	streq.w	r2, [r8]
 8012d70:	605a      	strne	r2, [r3, #4]
 8012d72:	e7eb      	b.n	8012d4c <_malloc_r+0xa8>
 8012d74:	4623      	mov	r3, r4
 8012d76:	6864      	ldr	r4, [r4, #4]
 8012d78:	e7ae      	b.n	8012cd8 <_malloc_r+0x34>
 8012d7a:	463c      	mov	r4, r7
 8012d7c:	687f      	ldr	r7, [r7, #4]
 8012d7e:	e7b6      	b.n	8012cee <_malloc_r+0x4a>
 8012d80:	461a      	mov	r2, r3
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	42a3      	cmp	r3, r4
 8012d86:	d1fb      	bne.n	8012d80 <_malloc_r+0xdc>
 8012d88:	2300      	movs	r3, #0
 8012d8a:	6053      	str	r3, [r2, #4]
 8012d8c:	e7de      	b.n	8012d4c <_malloc_r+0xa8>
 8012d8e:	230c      	movs	r3, #12
 8012d90:	6033      	str	r3, [r6, #0]
 8012d92:	4630      	mov	r0, r6
 8012d94:	f000 f80c 	bl	8012db0 <__malloc_unlock>
 8012d98:	e794      	b.n	8012cc4 <_malloc_r+0x20>
 8012d9a:	6005      	str	r5, [r0, #0]
 8012d9c:	e7d6      	b.n	8012d4c <_malloc_r+0xa8>
 8012d9e:	bf00      	nop
 8012da0:	2000dac8 	.word	0x2000dac8

08012da4 <__malloc_lock>:
 8012da4:	4801      	ldr	r0, [pc, #4]	@ (8012dac <__malloc_lock+0x8>)
 8012da6:	f000 bb90 	b.w	80134ca <__retarget_lock_acquire_recursive>
 8012daa:	bf00      	nop
 8012dac:	2000dc0d 	.word	0x2000dc0d

08012db0 <__malloc_unlock>:
 8012db0:	4801      	ldr	r0, [pc, #4]	@ (8012db8 <__malloc_unlock+0x8>)
 8012db2:	f000 bb8b 	b.w	80134cc <__retarget_lock_release_recursive>
 8012db6:	bf00      	nop
 8012db8:	2000dc0d 	.word	0x2000dc0d

08012dbc <srand>:
 8012dbc:	b538      	push	{r3, r4, r5, lr}
 8012dbe:	4b10      	ldr	r3, [pc, #64]	@ (8012e00 <srand+0x44>)
 8012dc0:	681d      	ldr	r5, [r3, #0]
 8012dc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	b9b3      	cbnz	r3, 8012df6 <srand+0x3a>
 8012dc8:	2018      	movs	r0, #24
 8012dca:	f7ff ff39 	bl	8012c40 <malloc>
 8012dce:	4602      	mov	r2, r0
 8012dd0:	6328      	str	r0, [r5, #48]	@ 0x30
 8012dd2:	b920      	cbnz	r0, 8012dde <srand+0x22>
 8012dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8012e04 <srand+0x48>)
 8012dd6:	480c      	ldr	r0, [pc, #48]	@ (8012e08 <srand+0x4c>)
 8012dd8:	2146      	movs	r1, #70	@ 0x46
 8012dda:	f000 fb8f 	bl	80134fc <__assert_func>
 8012dde:	490b      	ldr	r1, [pc, #44]	@ (8012e0c <srand+0x50>)
 8012de0:	4b0b      	ldr	r3, [pc, #44]	@ (8012e10 <srand+0x54>)
 8012de2:	e9c0 1300 	strd	r1, r3, [r0]
 8012de6:	4b0b      	ldr	r3, [pc, #44]	@ (8012e14 <srand+0x58>)
 8012de8:	6083      	str	r3, [r0, #8]
 8012dea:	230b      	movs	r3, #11
 8012dec:	8183      	strh	r3, [r0, #12]
 8012dee:	2100      	movs	r1, #0
 8012df0:	2001      	movs	r0, #1
 8012df2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012df6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012df8:	2200      	movs	r2, #0
 8012dfa:	611c      	str	r4, [r3, #16]
 8012dfc:	615a      	str	r2, [r3, #20]
 8012dfe:	bd38      	pop	{r3, r4, r5, pc}
 8012e00:	200000c0 	.word	0x200000c0
 8012e04:	08014e04 	.word	0x08014e04
 8012e08:	08014e1b 	.word	0x08014e1b
 8012e0c:	abcd330e 	.word	0xabcd330e
 8012e10:	e66d1234 	.word	0xe66d1234
 8012e14:	0005deec 	.word	0x0005deec

08012e18 <rand>:
 8012e18:	4b16      	ldr	r3, [pc, #88]	@ (8012e74 <rand+0x5c>)
 8012e1a:	b510      	push	{r4, lr}
 8012e1c:	681c      	ldr	r4, [r3, #0]
 8012e1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e20:	b9b3      	cbnz	r3, 8012e50 <rand+0x38>
 8012e22:	2018      	movs	r0, #24
 8012e24:	f7ff ff0c 	bl	8012c40 <malloc>
 8012e28:	4602      	mov	r2, r0
 8012e2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8012e2c:	b920      	cbnz	r0, 8012e38 <rand+0x20>
 8012e2e:	4b12      	ldr	r3, [pc, #72]	@ (8012e78 <rand+0x60>)
 8012e30:	4812      	ldr	r0, [pc, #72]	@ (8012e7c <rand+0x64>)
 8012e32:	2152      	movs	r1, #82	@ 0x52
 8012e34:	f000 fb62 	bl	80134fc <__assert_func>
 8012e38:	4911      	ldr	r1, [pc, #68]	@ (8012e80 <rand+0x68>)
 8012e3a:	4b12      	ldr	r3, [pc, #72]	@ (8012e84 <rand+0x6c>)
 8012e3c:	e9c0 1300 	strd	r1, r3, [r0]
 8012e40:	4b11      	ldr	r3, [pc, #68]	@ (8012e88 <rand+0x70>)
 8012e42:	6083      	str	r3, [r0, #8]
 8012e44:	230b      	movs	r3, #11
 8012e46:	8183      	strh	r3, [r0, #12]
 8012e48:	2100      	movs	r1, #0
 8012e4a:	2001      	movs	r0, #1
 8012e4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012e50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012e52:	480e      	ldr	r0, [pc, #56]	@ (8012e8c <rand+0x74>)
 8012e54:	690b      	ldr	r3, [r1, #16]
 8012e56:	694c      	ldr	r4, [r1, #20]
 8012e58:	4a0d      	ldr	r2, [pc, #52]	@ (8012e90 <rand+0x78>)
 8012e5a:	4358      	muls	r0, r3
 8012e5c:	fb02 0004 	mla	r0, r2, r4, r0
 8012e60:	fba3 3202 	umull	r3, r2, r3, r2
 8012e64:	3301      	adds	r3, #1
 8012e66:	eb40 0002 	adc.w	r0, r0, r2
 8012e6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012e6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012e72:	bd10      	pop	{r4, pc}
 8012e74:	200000c0 	.word	0x200000c0
 8012e78:	08014e04 	.word	0x08014e04
 8012e7c:	08014e1b 	.word	0x08014e1b
 8012e80:	abcd330e 	.word	0xabcd330e
 8012e84:	e66d1234 	.word	0xe66d1234
 8012e88:	0005deec 	.word	0x0005deec
 8012e8c:	5851f42d 	.word	0x5851f42d
 8012e90:	4c957f2d 	.word	0x4c957f2d

08012e94 <realloc>:
 8012e94:	4b02      	ldr	r3, [pc, #8]	@ (8012ea0 <realloc+0xc>)
 8012e96:	460a      	mov	r2, r1
 8012e98:	4601      	mov	r1, r0
 8012e9a:	6818      	ldr	r0, [r3, #0]
 8012e9c:	f000 b802 	b.w	8012ea4 <_realloc_r>
 8012ea0:	200000c0 	.word	0x200000c0

08012ea4 <_realloc_r>:
 8012ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	4680      	mov	r8, r0
 8012eaa:	4615      	mov	r5, r2
 8012eac:	460c      	mov	r4, r1
 8012eae:	b921      	cbnz	r1, 8012eba <_realloc_r+0x16>
 8012eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	4611      	mov	r1, r2
 8012eb6:	f7ff bef5 	b.w	8012ca4 <_malloc_r>
 8012eba:	b92a      	cbnz	r2, 8012ec8 <_realloc_r+0x24>
 8012ebc:	f000 fb48 	bl	8013550 <_free_r>
 8012ec0:	2400      	movs	r4, #0
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ec8:	f000 fb8c 	bl	80135e4 <_malloc_usable_size_r>
 8012ecc:	4285      	cmp	r5, r0
 8012ece:	4606      	mov	r6, r0
 8012ed0:	d802      	bhi.n	8012ed8 <_realloc_r+0x34>
 8012ed2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ed6:	d8f4      	bhi.n	8012ec2 <_realloc_r+0x1e>
 8012ed8:	4629      	mov	r1, r5
 8012eda:	4640      	mov	r0, r8
 8012edc:	f7ff fee2 	bl	8012ca4 <_malloc_r>
 8012ee0:	4607      	mov	r7, r0
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	d0ec      	beq.n	8012ec0 <_realloc_r+0x1c>
 8012ee6:	42b5      	cmp	r5, r6
 8012ee8:	462a      	mov	r2, r5
 8012eea:	4621      	mov	r1, r4
 8012eec:	bf28      	it	cs
 8012eee:	4632      	movcs	r2, r6
 8012ef0:	f000 faf5 	bl	80134de <memcpy>
 8012ef4:	4621      	mov	r1, r4
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	f000 fb2a 	bl	8013550 <_free_r>
 8012efc:	463c      	mov	r4, r7
 8012efe:	e7e0      	b.n	8012ec2 <_realloc_r+0x1e>

08012f00 <_strtoul_l.constprop.0>:
 8012f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f04:	4e34      	ldr	r6, [pc, #208]	@ (8012fd8 <_strtoul_l.constprop.0+0xd8>)
 8012f06:	4686      	mov	lr, r0
 8012f08:	460d      	mov	r5, r1
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f10:	5d37      	ldrb	r7, [r6, r4]
 8012f12:	f017 0708 	ands.w	r7, r7, #8
 8012f16:	d1f8      	bne.n	8012f0a <_strtoul_l.constprop.0+0xa>
 8012f18:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f1a:	d12f      	bne.n	8012f7c <_strtoul_l.constprop.0+0x7c>
 8012f1c:	782c      	ldrb	r4, [r5, #0]
 8012f1e:	2701      	movs	r7, #1
 8012f20:	1c85      	adds	r5, r0, #2
 8012f22:	f033 0010 	bics.w	r0, r3, #16
 8012f26:	d109      	bne.n	8012f3c <_strtoul_l.constprop.0+0x3c>
 8012f28:	2c30      	cmp	r4, #48	@ 0x30
 8012f2a:	d12c      	bne.n	8012f86 <_strtoul_l.constprop.0+0x86>
 8012f2c:	7828      	ldrb	r0, [r5, #0]
 8012f2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012f32:	2858      	cmp	r0, #88	@ 0x58
 8012f34:	d127      	bne.n	8012f86 <_strtoul_l.constprop.0+0x86>
 8012f36:	786c      	ldrb	r4, [r5, #1]
 8012f38:	2310      	movs	r3, #16
 8012f3a:	3502      	adds	r5, #2
 8012f3c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012f40:	2600      	movs	r6, #0
 8012f42:	fbb8 f8f3 	udiv	r8, r8, r3
 8012f46:	fb03 f908 	mul.w	r9, r3, r8
 8012f4a:	ea6f 0909 	mvn.w	r9, r9
 8012f4e:	4630      	mov	r0, r6
 8012f50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012f54:	f1bc 0f09 	cmp.w	ip, #9
 8012f58:	d81c      	bhi.n	8012f94 <_strtoul_l.constprop.0+0x94>
 8012f5a:	4664      	mov	r4, ip
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	dd2a      	ble.n	8012fb6 <_strtoul_l.constprop.0+0xb6>
 8012f60:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8012f64:	d007      	beq.n	8012f76 <_strtoul_l.constprop.0+0x76>
 8012f66:	4580      	cmp	r8, r0
 8012f68:	d322      	bcc.n	8012fb0 <_strtoul_l.constprop.0+0xb0>
 8012f6a:	d101      	bne.n	8012f70 <_strtoul_l.constprop.0+0x70>
 8012f6c:	45a1      	cmp	r9, r4
 8012f6e:	db1f      	blt.n	8012fb0 <_strtoul_l.constprop.0+0xb0>
 8012f70:	fb00 4003 	mla	r0, r0, r3, r4
 8012f74:	2601      	movs	r6, #1
 8012f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f7a:	e7e9      	b.n	8012f50 <_strtoul_l.constprop.0+0x50>
 8012f7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012f7e:	bf04      	itt	eq
 8012f80:	782c      	ldrbeq	r4, [r5, #0]
 8012f82:	1c85      	addeq	r5, r0, #2
 8012f84:	e7cd      	b.n	8012f22 <_strtoul_l.constprop.0+0x22>
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1d8      	bne.n	8012f3c <_strtoul_l.constprop.0+0x3c>
 8012f8a:	2c30      	cmp	r4, #48	@ 0x30
 8012f8c:	bf0c      	ite	eq
 8012f8e:	2308      	moveq	r3, #8
 8012f90:	230a      	movne	r3, #10
 8012f92:	e7d3      	b.n	8012f3c <_strtoul_l.constprop.0+0x3c>
 8012f94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012f98:	f1bc 0f19 	cmp.w	ip, #25
 8012f9c:	d801      	bhi.n	8012fa2 <_strtoul_l.constprop.0+0xa2>
 8012f9e:	3c37      	subs	r4, #55	@ 0x37
 8012fa0:	e7dc      	b.n	8012f5c <_strtoul_l.constprop.0+0x5c>
 8012fa2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012fa6:	f1bc 0f19 	cmp.w	ip, #25
 8012faa:	d804      	bhi.n	8012fb6 <_strtoul_l.constprop.0+0xb6>
 8012fac:	3c57      	subs	r4, #87	@ 0x57
 8012fae:	e7d5      	b.n	8012f5c <_strtoul_l.constprop.0+0x5c>
 8012fb0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012fb4:	e7df      	b.n	8012f76 <_strtoul_l.constprop.0+0x76>
 8012fb6:	1c73      	adds	r3, r6, #1
 8012fb8:	d106      	bne.n	8012fc8 <_strtoul_l.constprop.0+0xc8>
 8012fba:	2322      	movs	r3, #34	@ 0x22
 8012fbc:	f8ce 3000 	str.w	r3, [lr]
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	b932      	cbnz	r2, 8012fd2 <_strtoul_l.constprop.0+0xd2>
 8012fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fc8:	b107      	cbz	r7, 8012fcc <_strtoul_l.constprop.0+0xcc>
 8012fca:	4240      	negs	r0, r0
 8012fcc:	2a00      	cmp	r2, #0
 8012fce:	d0f9      	beq.n	8012fc4 <_strtoul_l.constprop.0+0xc4>
 8012fd0:	b106      	cbz	r6, 8012fd4 <_strtoul_l.constprop.0+0xd4>
 8012fd2:	1e69      	subs	r1, r5, #1
 8012fd4:	6011      	str	r1, [r2, #0]
 8012fd6:	e7f5      	b.n	8012fc4 <_strtoul_l.constprop.0+0xc4>
 8012fd8:	08014e74 	.word	0x08014e74

08012fdc <strtoul>:
 8012fdc:	4613      	mov	r3, r2
 8012fde:	460a      	mov	r2, r1
 8012fe0:	4601      	mov	r1, r0
 8012fe2:	4802      	ldr	r0, [pc, #8]	@ (8012fec <strtoul+0x10>)
 8012fe4:	6800      	ldr	r0, [r0, #0]
 8012fe6:	f7ff bf8b 	b.w	8012f00 <_strtoul_l.constprop.0>
 8012fea:	bf00      	nop
 8012fec:	200000c0 	.word	0x200000c0

08012ff0 <std>:
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	b510      	push	{r4, lr}
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8012ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ffe:	6083      	str	r3, [r0, #8]
 8013000:	8181      	strh	r1, [r0, #12]
 8013002:	6643      	str	r3, [r0, #100]	@ 0x64
 8013004:	81c2      	strh	r2, [r0, #14]
 8013006:	6183      	str	r3, [r0, #24]
 8013008:	4619      	mov	r1, r3
 801300a:	2208      	movs	r2, #8
 801300c:	305c      	adds	r0, #92	@ 0x5c
 801300e:	f000 f99d 	bl	801334c <memset>
 8013012:	4b0d      	ldr	r3, [pc, #52]	@ (8013048 <std+0x58>)
 8013014:	6263      	str	r3, [r4, #36]	@ 0x24
 8013016:	4b0d      	ldr	r3, [pc, #52]	@ (801304c <std+0x5c>)
 8013018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801301a:	4b0d      	ldr	r3, [pc, #52]	@ (8013050 <std+0x60>)
 801301c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801301e:	4b0d      	ldr	r3, [pc, #52]	@ (8013054 <std+0x64>)
 8013020:	6323      	str	r3, [r4, #48]	@ 0x30
 8013022:	4b0d      	ldr	r3, [pc, #52]	@ (8013058 <std+0x68>)
 8013024:	6224      	str	r4, [r4, #32]
 8013026:	429c      	cmp	r4, r3
 8013028:	d006      	beq.n	8013038 <std+0x48>
 801302a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801302e:	4294      	cmp	r4, r2
 8013030:	d002      	beq.n	8013038 <std+0x48>
 8013032:	33d0      	adds	r3, #208	@ 0xd0
 8013034:	429c      	cmp	r4, r3
 8013036:	d105      	bne.n	8013044 <std+0x54>
 8013038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013040:	f000 ba42 	b.w	80134c8 <__retarget_lock_init_recursive>
 8013044:	bd10      	pop	{r4, pc}
 8013046:	bf00      	nop
 8013048:	08013201 	.word	0x08013201
 801304c:	08013223 	.word	0x08013223
 8013050:	0801325b 	.word	0x0801325b
 8013054:	0801327f 	.word	0x0801327f
 8013058:	2000dacc 	.word	0x2000dacc

0801305c <stdio_exit_handler>:
 801305c:	4a02      	ldr	r2, [pc, #8]	@ (8013068 <stdio_exit_handler+0xc>)
 801305e:	4903      	ldr	r1, [pc, #12]	@ (801306c <stdio_exit_handler+0x10>)
 8013060:	4803      	ldr	r0, [pc, #12]	@ (8013070 <stdio_exit_handler+0x14>)
 8013062:	f000 b869 	b.w	8013138 <_fwalk_sglue>
 8013066:	bf00      	nop
 8013068:	200000b4 	.word	0x200000b4
 801306c:	08013f4d 	.word	0x08013f4d
 8013070:	200000c4 	.word	0x200000c4

08013074 <cleanup_stdio>:
 8013074:	6841      	ldr	r1, [r0, #4]
 8013076:	4b0c      	ldr	r3, [pc, #48]	@ (80130a8 <cleanup_stdio+0x34>)
 8013078:	4299      	cmp	r1, r3
 801307a:	b510      	push	{r4, lr}
 801307c:	4604      	mov	r4, r0
 801307e:	d001      	beq.n	8013084 <cleanup_stdio+0x10>
 8013080:	f000 ff64 	bl	8013f4c <_fflush_r>
 8013084:	68a1      	ldr	r1, [r4, #8]
 8013086:	4b09      	ldr	r3, [pc, #36]	@ (80130ac <cleanup_stdio+0x38>)
 8013088:	4299      	cmp	r1, r3
 801308a:	d002      	beq.n	8013092 <cleanup_stdio+0x1e>
 801308c:	4620      	mov	r0, r4
 801308e:	f000 ff5d 	bl	8013f4c <_fflush_r>
 8013092:	68e1      	ldr	r1, [r4, #12]
 8013094:	4b06      	ldr	r3, [pc, #24]	@ (80130b0 <cleanup_stdio+0x3c>)
 8013096:	4299      	cmp	r1, r3
 8013098:	d004      	beq.n	80130a4 <cleanup_stdio+0x30>
 801309a:	4620      	mov	r0, r4
 801309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130a0:	f000 bf54 	b.w	8013f4c <_fflush_r>
 80130a4:	bd10      	pop	{r4, pc}
 80130a6:	bf00      	nop
 80130a8:	2000dacc 	.word	0x2000dacc
 80130ac:	2000db34 	.word	0x2000db34
 80130b0:	2000db9c 	.word	0x2000db9c

080130b4 <global_stdio_init.part.0>:
 80130b4:	b510      	push	{r4, lr}
 80130b6:	4b0b      	ldr	r3, [pc, #44]	@ (80130e4 <global_stdio_init.part.0+0x30>)
 80130b8:	4c0b      	ldr	r4, [pc, #44]	@ (80130e8 <global_stdio_init.part.0+0x34>)
 80130ba:	4a0c      	ldr	r2, [pc, #48]	@ (80130ec <global_stdio_init.part.0+0x38>)
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	4620      	mov	r0, r4
 80130c0:	2200      	movs	r2, #0
 80130c2:	2104      	movs	r1, #4
 80130c4:	f7ff ff94 	bl	8012ff0 <std>
 80130c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80130cc:	2201      	movs	r2, #1
 80130ce:	2109      	movs	r1, #9
 80130d0:	f7ff ff8e 	bl	8012ff0 <std>
 80130d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80130d8:	2202      	movs	r2, #2
 80130da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130de:	2112      	movs	r1, #18
 80130e0:	f7ff bf86 	b.w	8012ff0 <std>
 80130e4:	2000dc04 	.word	0x2000dc04
 80130e8:	2000dacc 	.word	0x2000dacc
 80130ec:	0801305d 	.word	0x0801305d

080130f0 <__sfp_lock_acquire>:
 80130f0:	4801      	ldr	r0, [pc, #4]	@ (80130f8 <__sfp_lock_acquire+0x8>)
 80130f2:	f000 b9ea 	b.w	80134ca <__retarget_lock_acquire_recursive>
 80130f6:	bf00      	nop
 80130f8:	2000dc0e 	.word	0x2000dc0e

080130fc <__sfp_lock_release>:
 80130fc:	4801      	ldr	r0, [pc, #4]	@ (8013104 <__sfp_lock_release+0x8>)
 80130fe:	f000 b9e5 	b.w	80134cc <__retarget_lock_release_recursive>
 8013102:	bf00      	nop
 8013104:	2000dc0e 	.word	0x2000dc0e

08013108 <__sinit>:
 8013108:	b510      	push	{r4, lr}
 801310a:	4604      	mov	r4, r0
 801310c:	f7ff fff0 	bl	80130f0 <__sfp_lock_acquire>
 8013110:	6a23      	ldr	r3, [r4, #32]
 8013112:	b11b      	cbz	r3, 801311c <__sinit+0x14>
 8013114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013118:	f7ff bff0 	b.w	80130fc <__sfp_lock_release>
 801311c:	4b04      	ldr	r3, [pc, #16]	@ (8013130 <__sinit+0x28>)
 801311e:	6223      	str	r3, [r4, #32]
 8013120:	4b04      	ldr	r3, [pc, #16]	@ (8013134 <__sinit+0x2c>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1f5      	bne.n	8013114 <__sinit+0xc>
 8013128:	f7ff ffc4 	bl	80130b4 <global_stdio_init.part.0>
 801312c:	e7f2      	b.n	8013114 <__sinit+0xc>
 801312e:	bf00      	nop
 8013130:	08013075 	.word	0x08013075
 8013134:	2000dc04 	.word	0x2000dc04

08013138 <_fwalk_sglue>:
 8013138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801313c:	4607      	mov	r7, r0
 801313e:	4688      	mov	r8, r1
 8013140:	4614      	mov	r4, r2
 8013142:	2600      	movs	r6, #0
 8013144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013148:	f1b9 0901 	subs.w	r9, r9, #1
 801314c:	d505      	bpl.n	801315a <_fwalk_sglue+0x22>
 801314e:	6824      	ldr	r4, [r4, #0]
 8013150:	2c00      	cmp	r4, #0
 8013152:	d1f7      	bne.n	8013144 <_fwalk_sglue+0xc>
 8013154:	4630      	mov	r0, r6
 8013156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801315a:	89ab      	ldrh	r3, [r5, #12]
 801315c:	2b01      	cmp	r3, #1
 801315e:	d907      	bls.n	8013170 <_fwalk_sglue+0x38>
 8013160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013164:	3301      	adds	r3, #1
 8013166:	d003      	beq.n	8013170 <_fwalk_sglue+0x38>
 8013168:	4629      	mov	r1, r5
 801316a:	4638      	mov	r0, r7
 801316c:	47c0      	blx	r8
 801316e:	4306      	orrs	r6, r0
 8013170:	3568      	adds	r5, #104	@ 0x68
 8013172:	e7e9      	b.n	8013148 <_fwalk_sglue+0x10>

08013174 <iprintf>:
 8013174:	b40f      	push	{r0, r1, r2, r3}
 8013176:	b507      	push	{r0, r1, r2, lr}
 8013178:	4906      	ldr	r1, [pc, #24]	@ (8013194 <iprintf+0x20>)
 801317a:	ab04      	add	r3, sp, #16
 801317c:	6808      	ldr	r0, [r1, #0]
 801317e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013182:	6881      	ldr	r1, [r0, #8]
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	f000 fbb7 	bl	80138f8 <_vfiprintf_r>
 801318a:	b003      	add	sp, #12
 801318c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013190:	b004      	add	sp, #16
 8013192:	4770      	bx	lr
 8013194:	200000c0 	.word	0x200000c0

08013198 <sniprintf>:
 8013198:	b40c      	push	{r2, r3}
 801319a:	b530      	push	{r4, r5, lr}
 801319c:	4b17      	ldr	r3, [pc, #92]	@ (80131fc <sniprintf+0x64>)
 801319e:	1e0c      	subs	r4, r1, #0
 80131a0:	681d      	ldr	r5, [r3, #0]
 80131a2:	b09d      	sub	sp, #116	@ 0x74
 80131a4:	da08      	bge.n	80131b8 <sniprintf+0x20>
 80131a6:	238b      	movs	r3, #139	@ 0x8b
 80131a8:	602b      	str	r3, [r5, #0]
 80131aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131ae:	b01d      	add	sp, #116	@ 0x74
 80131b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131b4:	b002      	add	sp, #8
 80131b6:	4770      	bx	lr
 80131b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80131bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80131c0:	bf14      	ite	ne
 80131c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80131c6:	4623      	moveq	r3, r4
 80131c8:	9304      	str	r3, [sp, #16]
 80131ca:	9307      	str	r3, [sp, #28]
 80131cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80131d0:	9002      	str	r0, [sp, #8]
 80131d2:	9006      	str	r0, [sp, #24]
 80131d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80131d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80131da:	ab21      	add	r3, sp, #132	@ 0x84
 80131dc:	a902      	add	r1, sp, #8
 80131de:	4628      	mov	r0, r5
 80131e0:	9301      	str	r3, [sp, #4]
 80131e2:	f000 fa63 	bl	80136ac <_svfiprintf_r>
 80131e6:	1c43      	adds	r3, r0, #1
 80131e8:	bfbc      	itt	lt
 80131ea:	238b      	movlt	r3, #139	@ 0x8b
 80131ec:	602b      	strlt	r3, [r5, #0]
 80131ee:	2c00      	cmp	r4, #0
 80131f0:	d0dd      	beq.n	80131ae <sniprintf+0x16>
 80131f2:	9b02      	ldr	r3, [sp, #8]
 80131f4:	2200      	movs	r2, #0
 80131f6:	701a      	strb	r2, [r3, #0]
 80131f8:	e7d9      	b.n	80131ae <sniprintf+0x16>
 80131fa:	bf00      	nop
 80131fc:	200000c0 	.word	0x200000c0

08013200 <__sread>:
 8013200:	b510      	push	{r4, lr}
 8013202:	460c      	mov	r4, r1
 8013204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013208:	f000 f900 	bl	801340c <_read_r>
 801320c:	2800      	cmp	r0, #0
 801320e:	bfab      	itete	ge
 8013210:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013212:	89a3      	ldrhlt	r3, [r4, #12]
 8013214:	181b      	addge	r3, r3, r0
 8013216:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801321a:	bfac      	ite	ge
 801321c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801321e:	81a3      	strhlt	r3, [r4, #12]
 8013220:	bd10      	pop	{r4, pc}

08013222 <__swrite>:
 8013222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013226:	461f      	mov	r7, r3
 8013228:	898b      	ldrh	r3, [r1, #12]
 801322a:	05db      	lsls	r3, r3, #23
 801322c:	4605      	mov	r5, r0
 801322e:	460c      	mov	r4, r1
 8013230:	4616      	mov	r6, r2
 8013232:	d505      	bpl.n	8013240 <__swrite+0x1e>
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	2302      	movs	r3, #2
 801323a:	2200      	movs	r2, #0
 801323c:	f000 f8d4 	bl	80133e8 <_lseek_r>
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801324a:	81a3      	strh	r3, [r4, #12]
 801324c:	4632      	mov	r2, r6
 801324e:	463b      	mov	r3, r7
 8013250:	4628      	mov	r0, r5
 8013252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013256:	f000 b8fb 	b.w	8013450 <_write_r>

0801325a <__sseek>:
 801325a:	b510      	push	{r4, lr}
 801325c:	460c      	mov	r4, r1
 801325e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013262:	f000 f8c1 	bl	80133e8 <_lseek_r>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	bf15      	itete	ne
 801326c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801326e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013272:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013276:	81a3      	strheq	r3, [r4, #12]
 8013278:	bf18      	it	ne
 801327a:	81a3      	strhne	r3, [r4, #12]
 801327c:	bd10      	pop	{r4, pc}

0801327e <__sclose>:
 801327e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013282:	f000 b8a1 	b.w	80133c8 <_close_r>

08013286 <_vsniprintf_r>:
 8013286:	b530      	push	{r4, r5, lr}
 8013288:	4614      	mov	r4, r2
 801328a:	2c00      	cmp	r4, #0
 801328c:	b09b      	sub	sp, #108	@ 0x6c
 801328e:	4605      	mov	r5, r0
 8013290:	461a      	mov	r2, r3
 8013292:	da05      	bge.n	80132a0 <_vsniprintf_r+0x1a>
 8013294:	238b      	movs	r3, #139	@ 0x8b
 8013296:	6003      	str	r3, [r0, #0]
 8013298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801329c:	b01b      	add	sp, #108	@ 0x6c
 801329e:	bd30      	pop	{r4, r5, pc}
 80132a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80132a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80132a8:	bf14      	ite	ne
 80132aa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80132ae:	4623      	moveq	r3, r4
 80132b0:	9302      	str	r3, [sp, #8]
 80132b2:	9305      	str	r3, [sp, #20]
 80132b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80132b8:	9100      	str	r1, [sp, #0]
 80132ba:	9104      	str	r1, [sp, #16]
 80132bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80132c0:	4669      	mov	r1, sp
 80132c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80132c4:	f000 f9f2 	bl	80136ac <_svfiprintf_r>
 80132c8:	1c43      	adds	r3, r0, #1
 80132ca:	bfbc      	itt	lt
 80132cc:	238b      	movlt	r3, #139	@ 0x8b
 80132ce:	602b      	strlt	r3, [r5, #0]
 80132d0:	2c00      	cmp	r4, #0
 80132d2:	d0e3      	beq.n	801329c <_vsniprintf_r+0x16>
 80132d4:	9b00      	ldr	r3, [sp, #0]
 80132d6:	2200      	movs	r2, #0
 80132d8:	701a      	strb	r2, [r3, #0]
 80132da:	e7df      	b.n	801329c <_vsniprintf_r+0x16>

080132dc <vsniprintf>:
 80132dc:	b507      	push	{r0, r1, r2, lr}
 80132de:	9300      	str	r3, [sp, #0]
 80132e0:	4613      	mov	r3, r2
 80132e2:	460a      	mov	r2, r1
 80132e4:	4601      	mov	r1, r0
 80132e6:	4803      	ldr	r0, [pc, #12]	@ (80132f4 <vsniprintf+0x18>)
 80132e8:	6800      	ldr	r0, [r0, #0]
 80132ea:	f7ff ffcc 	bl	8013286 <_vsniprintf_r>
 80132ee:	b003      	add	sp, #12
 80132f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80132f4:	200000c0 	.word	0x200000c0

080132f8 <memcmp>:
 80132f8:	b510      	push	{r4, lr}
 80132fa:	3901      	subs	r1, #1
 80132fc:	4402      	add	r2, r0
 80132fe:	4290      	cmp	r0, r2
 8013300:	d101      	bne.n	8013306 <memcmp+0xe>
 8013302:	2000      	movs	r0, #0
 8013304:	e005      	b.n	8013312 <memcmp+0x1a>
 8013306:	7803      	ldrb	r3, [r0, #0]
 8013308:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801330c:	42a3      	cmp	r3, r4
 801330e:	d001      	beq.n	8013314 <memcmp+0x1c>
 8013310:	1b18      	subs	r0, r3, r4
 8013312:	bd10      	pop	{r4, pc}
 8013314:	3001      	adds	r0, #1
 8013316:	e7f2      	b.n	80132fe <memcmp+0x6>

08013318 <memmove>:
 8013318:	4288      	cmp	r0, r1
 801331a:	b510      	push	{r4, lr}
 801331c:	eb01 0402 	add.w	r4, r1, r2
 8013320:	d902      	bls.n	8013328 <memmove+0x10>
 8013322:	4284      	cmp	r4, r0
 8013324:	4623      	mov	r3, r4
 8013326:	d807      	bhi.n	8013338 <memmove+0x20>
 8013328:	1e43      	subs	r3, r0, #1
 801332a:	42a1      	cmp	r1, r4
 801332c:	d008      	beq.n	8013340 <memmove+0x28>
 801332e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013336:	e7f8      	b.n	801332a <memmove+0x12>
 8013338:	4402      	add	r2, r0
 801333a:	4601      	mov	r1, r0
 801333c:	428a      	cmp	r2, r1
 801333e:	d100      	bne.n	8013342 <memmove+0x2a>
 8013340:	bd10      	pop	{r4, pc}
 8013342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801334a:	e7f7      	b.n	801333c <memmove+0x24>

0801334c <memset>:
 801334c:	4402      	add	r2, r0
 801334e:	4603      	mov	r3, r0
 8013350:	4293      	cmp	r3, r2
 8013352:	d100      	bne.n	8013356 <memset+0xa>
 8013354:	4770      	bx	lr
 8013356:	f803 1b01 	strb.w	r1, [r3], #1
 801335a:	e7f9      	b.n	8013350 <memset+0x4>

0801335c <strchr>:
 801335c:	b2c9      	uxtb	r1, r1
 801335e:	4603      	mov	r3, r0
 8013360:	4618      	mov	r0, r3
 8013362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013366:	b112      	cbz	r2, 801336e <strchr+0x12>
 8013368:	428a      	cmp	r2, r1
 801336a:	d1f9      	bne.n	8013360 <strchr+0x4>
 801336c:	4770      	bx	lr
 801336e:	2900      	cmp	r1, #0
 8013370:	bf18      	it	ne
 8013372:	2000      	movne	r0, #0
 8013374:	4770      	bx	lr

08013376 <strncmp>:
 8013376:	b510      	push	{r4, lr}
 8013378:	b16a      	cbz	r2, 8013396 <strncmp+0x20>
 801337a:	3901      	subs	r1, #1
 801337c:	1884      	adds	r4, r0, r2
 801337e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013382:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013386:	429a      	cmp	r2, r3
 8013388:	d103      	bne.n	8013392 <strncmp+0x1c>
 801338a:	42a0      	cmp	r0, r4
 801338c:	d001      	beq.n	8013392 <strncmp+0x1c>
 801338e:	2a00      	cmp	r2, #0
 8013390:	d1f5      	bne.n	801337e <strncmp+0x8>
 8013392:	1ad0      	subs	r0, r2, r3
 8013394:	bd10      	pop	{r4, pc}
 8013396:	4610      	mov	r0, r2
 8013398:	e7fc      	b.n	8013394 <strncmp+0x1e>

0801339a <strstr>:
 801339a:	780a      	ldrb	r2, [r1, #0]
 801339c:	b570      	push	{r4, r5, r6, lr}
 801339e:	b96a      	cbnz	r2, 80133bc <strstr+0x22>
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d109      	bne.n	80133ba <strstr+0x20>
 80133a6:	460c      	mov	r4, r1
 80133a8:	4605      	mov	r5, r0
 80133aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d0f6      	beq.n	80133a0 <strstr+0x6>
 80133b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80133b6:	429e      	cmp	r6, r3
 80133b8:	d0f7      	beq.n	80133aa <strstr+0x10>
 80133ba:	3001      	adds	r0, #1
 80133bc:	7803      	ldrb	r3, [r0, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1ef      	bne.n	80133a2 <strstr+0x8>
 80133c2:	4618      	mov	r0, r3
 80133c4:	e7ec      	b.n	80133a0 <strstr+0x6>
	...

080133c8 <_close_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4d06      	ldr	r5, [pc, #24]	@ (80133e4 <_close_r+0x1c>)
 80133cc:	2300      	movs	r3, #0
 80133ce:	4604      	mov	r4, r0
 80133d0:	4608      	mov	r0, r1
 80133d2:	602b      	str	r3, [r5, #0]
 80133d4:	f7ee f86e 	bl	80014b4 <_close>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_close_r+0x1a>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_close_r+0x1a>
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	2000dc08 	.word	0x2000dc08

080133e8 <_lseek_r>:
 80133e8:	b538      	push	{r3, r4, r5, lr}
 80133ea:	4d07      	ldr	r5, [pc, #28]	@ (8013408 <_lseek_r+0x20>)
 80133ec:	4604      	mov	r4, r0
 80133ee:	4608      	mov	r0, r1
 80133f0:	4611      	mov	r1, r2
 80133f2:	2200      	movs	r2, #0
 80133f4:	602a      	str	r2, [r5, #0]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f7ee f883 	bl	8001502 <_lseek>
 80133fc:	1c43      	adds	r3, r0, #1
 80133fe:	d102      	bne.n	8013406 <_lseek_r+0x1e>
 8013400:	682b      	ldr	r3, [r5, #0]
 8013402:	b103      	cbz	r3, 8013406 <_lseek_r+0x1e>
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	bd38      	pop	{r3, r4, r5, pc}
 8013408:	2000dc08 	.word	0x2000dc08

0801340c <_read_r>:
 801340c:	b538      	push	{r3, r4, r5, lr}
 801340e:	4d07      	ldr	r5, [pc, #28]	@ (801342c <_read_r+0x20>)
 8013410:	4604      	mov	r4, r0
 8013412:	4608      	mov	r0, r1
 8013414:	4611      	mov	r1, r2
 8013416:	2200      	movs	r2, #0
 8013418:	602a      	str	r2, [r5, #0]
 801341a:	461a      	mov	r2, r3
 801341c:	f7ee f811 	bl	8001442 <_read>
 8013420:	1c43      	adds	r3, r0, #1
 8013422:	d102      	bne.n	801342a <_read_r+0x1e>
 8013424:	682b      	ldr	r3, [r5, #0]
 8013426:	b103      	cbz	r3, 801342a <_read_r+0x1e>
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	bd38      	pop	{r3, r4, r5, pc}
 801342c:	2000dc08 	.word	0x2000dc08

08013430 <_sbrk_r>:
 8013430:	b538      	push	{r3, r4, r5, lr}
 8013432:	4d06      	ldr	r5, [pc, #24]	@ (801344c <_sbrk_r+0x1c>)
 8013434:	2300      	movs	r3, #0
 8013436:	4604      	mov	r4, r0
 8013438:	4608      	mov	r0, r1
 801343a:	602b      	str	r3, [r5, #0]
 801343c:	f7ee f86e 	bl	800151c <_sbrk>
 8013440:	1c43      	adds	r3, r0, #1
 8013442:	d102      	bne.n	801344a <_sbrk_r+0x1a>
 8013444:	682b      	ldr	r3, [r5, #0]
 8013446:	b103      	cbz	r3, 801344a <_sbrk_r+0x1a>
 8013448:	6023      	str	r3, [r4, #0]
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	2000dc08 	.word	0x2000dc08

08013450 <_write_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	4d07      	ldr	r5, [pc, #28]	@ (8013470 <_write_r+0x20>)
 8013454:	4604      	mov	r4, r0
 8013456:	4608      	mov	r0, r1
 8013458:	4611      	mov	r1, r2
 801345a:	2200      	movs	r2, #0
 801345c:	602a      	str	r2, [r5, #0]
 801345e:	461a      	mov	r2, r3
 8013460:	f7ee f80c 	bl	800147c <_write>
 8013464:	1c43      	adds	r3, r0, #1
 8013466:	d102      	bne.n	801346e <_write_r+0x1e>
 8013468:	682b      	ldr	r3, [r5, #0]
 801346a:	b103      	cbz	r3, 801346e <_write_r+0x1e>
 801346c:	6023      	str	r3, [r4, #0]
 801346e:	bd38      	pop	{r3, r4, r5, pc}
 8013470:	2000dc08 	.word	0x2000dc08

08013474 <__errno>:
 8013474:	4b01      	ldr	r3, [pc, #4]	@ (801347c <__errno+0x8>)
 8013476:	6818      	ldr	r0, [r3, #0]
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	200000c0 	.word	0x200000c0

08013480 <__libc_init_array>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	4d0d      	ldr	r5, [pc, #52]	@ (80134b8 <__libc_init_array+0x38>)
 8013484:	4c0d      	ldr	r4, [pc, #52]	@ (80134bc <__libc_init_array+0x3c>)
 8013486:	1b64      	subs	r4, r4, r5
 8013488:	10a4      	asrs	r4, r4, #2
 801348a:	2600      	movs	r6, #0
 801348c:	42a6      	cmp	r6, r4
 801348e:	d109      	bne.n	80134a4 <__libc_init_array+0x24>
 8013490:	4d0b      	ldr	r5, [pc, #44]	@ (80134c0 <__libc_init_array+0x40>)
 8013492:	4c0c      	ldr	r4, [pc, #48]	@ (80134c4 <__libc_init_array+0x44>)
 8013494:	f000 fef8 	bl	8014288 <_init>
 8013498:	1b64      	subs	r4, r4, r5
 801349a:	10a4      	asrs	r4, r4, #2
 801349c:	2600      	movs	r6, #0
 801349e:	42a6      	cmp	r6, r4
 80134a0:	d105      	bne.n	80134ae <__libc_init_array+0x2e>
 80134a2:	bd70      	pop	{r4, r5, r6, pc}
 80134a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80134a8:	4798      	blx	r3
 80134aa:	3601      	adds	r6, #1
 80134ac:	e7ee      	b.n	801348c <__libc_init_array+0xc>
 80134ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80134b2:	4798      	blx	r3
 80134b4:	3601      	adds	r6, #1
 80134b6:	e7f2      	b.n	801349e <__libc_init_array+0x1e>
 80134b8:	08014fec 	.word	0x08014fec
 80134bc:	08014fec 	.word	0x08014fec
 80134c0:	08014fec 	.word	0x08014fec
 80134c4:	08014ff4 	.word	0x08014ff4

080134c8 <__retarget_lock_init_recursive>:
 80134c8:	4770      	bx	lr

080134ca <__retarget_lock_acquire_recursive>:
 80134ca:	4770      	bx	lr

080134cc <__retarget_lock_release_recursive>:
 80134cc:	4770      	bx	lr

080134ce <strcpy>:
 80134ce:	4603      	mov	r3, r0
 80134d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134d4:	f803 2b01 	strb.w	r2, [r3], #1
 80134d8:	2a00      	cmp	r2, #0
 80134da:	d1f9      	bne.n	80134d0 <strcpy+0x2>
 80134dc:	4770      	bx	lr

080134de <memcpy>:
 80134de:	440a      	add	r2, r1
 80134e0:	4291      	cmp	r1, r2
 80134e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80134e6:	d100      	bne.n	80134ea <memcpy+0xc>
 80134e8:	4770      	bx	lr
 80134ea:	b510      	push	{r4, lr}
 80134ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134f4:	4291      	cmp	r1, r2
 80134f6:	d1f9      	bne.n	80134ec <memcpy+0xe>
 80134f8:	bd10      	pop	{r4, pc}
	...

080134fc <__assert_func>:
 80134fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80134fe:	4614      	mov	r4, r2
 8013500:	461a      	mov	r2, r3
 8013502:	4b09      	ldr	r3, [pc, #36]	@ (8013528 <__assert_func+0x2c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	4605      	mov	r5, r0
 8013508:	68d8      	ldr	r0, [r3, #12]
 801350a:	b954      	cbnz	r4, 8013522 <__assert_func+0x26>
 801350c:	4b07      	ldr	r3, [pc, #28]	@ (801352c <__assert_func+0x30>)
 801350e:	461c      	mov	r4, r3
 8013510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013514:	9100      	str	r1, [sp, #0]
 8013516:	462b      	mov	r3, r5
 8013518:	4905      	ldr	r1, [pc, #20]	@ (8013530 <__assert_func+0x34>)
 801351a:	f000 fd3f 	bl	8013f9c <fiprintf>
 801351e:	f000 fde3 	bl	80140e8 <abort>
 8013522:	4b04      	ldr	r3, [pc, #16]	@ (8013534 <__assert_func+0x38>)
 8013524:	e7f4      	b.n	8013510 <__assert_func+0x14>
 8013526:	bf00      	nop
 8013528:	200000c0 	.word	0x200000c0
 801352c:	08014faf 	.word	0x08014faf
 8013530:	08014f81 	.word	0x08014f81
 8013534:	08014f74 	.word	0x08014f74

08013538 <__env_lock>:
 8013538:	4801      	ldr	r0, [pc, #4]	@ (8013540 <__env_lock+0x8>)
 801353a:	f7ff bfc6 	b.w	80134ca <__retarget_lock_acquire_recursive>
 801353e:	bf00      	nop
 8013540:	2000dc0c 	.word	0x2000dc0c

08013544 <__env_unlock>:
 8013544:	4801      	ldr	r0, [pc, #4]	@ (801354c <__env_unlock+0x8>)
 8013546:	f7ff bfc1 	b.w	80134cc <__retarget_lock_release_recursive>
 801354a:	bf00      	nop
 801354c:	2000dc0c 	.word	0x2000dc0c

08013550 <_free_r>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	4605      	mov	r5, r0
 8013554:	2900      	cmp	r1, #0
 8013556:	d041      	beq.n	80135dc <_free_r+0x8c>
 8013558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801355c:	1f0c      	subs	r4, r1, #4
 801355e:	2b00      	cmp	r3, #0
 8013560:	bfb8      	it	lt
 8013562:	18e4      	addlt	r4, r4, r3
 8013564:	f7ff fc1e 	bl	8012da4 <__malloc_lock>
 8013568:	4a1d      	ldr	r2, [pc, #116]	@ (80135e0 <_free_r+0x90>)
 801356a:	6813      	ldr	r3, [r2, #0]
 801356c:	b933      	cbnz	r3, 801357c <_free_r+0x2c>
 801356e:	6063      	str	r3, [r4, #4]
 8013570:	6014      	str	r4, [r2, #0]
 8013572:	4628      	mov	r0, r5
 8013574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013578:	f7ff bc1a 	b.w	8012db0 <__malloc_unlock>
 801357c:	42a3      	cmp	r3, r4
 801357e:	d908      	bls.n	8013592 <_free_r+0x42>
 8013580:	6820      	ldr	r0, [r4, #0]
 8013582:	1821      	adds	r1, r4, r0
 8013584:	428b      	cmp	r3, r1
 8013586:	bf01      	itttt	eq
 8013588:	6819      	ldreq	r1, [r3, #0]
 801358a:	685b      	ldreq	r3, [r3, #4]
 801358c:	1809      	addeq	r1, r1, r0
 801358e:	6021      	streq	r1, [r4, #0]
 8013590:	e7ed      	b.n	801356e <_free_r+0x1e>
 8013592:	461a      	mov	r2, r3
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	b10b      	cbz	r3, 801359c <_free_r+0x4c>
 8013598:	42a3      	cmp	r3, r4
 801359a:	d9fa      	bls.n	8013592 <_free_r+0x42>
 801359c:	6811      	ldr	r1, [r2, #0]
 801359e:	1850      	adds	r0, r2, r1
 80135a0:	42a0      	cmp	r0, r4
 80135a2:	d10b      	bne.n	80135bc <_free_r+0x6c>
 80135a4:	6820      	ldr	r0, [r4, #0]
 80135a6:	4401      	add	r1, r0
 80135a8:	1850      	adds	r0, r2, r1
 80135aa:	4283      	cmp	r3, r0
 80135ac:	6011      	str	r1, [r2, #0]
 80135ae:	d1e0      	bne.n	8013572 <_free_r+0x22>
 80135b0:	6818      	ldr	r0, [r3, #0]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	6053      	str	r3, [r2, #4]
 80135b6:	4408      	add	r0, r1
 80135b8:	6010      	str	r0, [r2, #0]
 80135ba:	e7da      	b.n	8013572 <_free_r+0x22>
 80135bc:	d902      	bls.n	80135c4 <_free_r+0x74>
 80135be:	230c      	movs	r3, #12
 80135c0:	602b      	str	r3, [r5, #0]
 80135c2:	e7d6      	b.n	8013572 <_free_r+0x22>
 80135c4:	6820      	ldr	r0, [r4, #0]
 80135c6:	1821      	adds	r1, r4, r0
 80135c8:	428b      	cmp	r3, r1
 80135ca:	bf04      	itt	eq
 80135cc:	6819      	ldreq	r1, [r3, #0]
 80135ce:	685b      	ldreq	r3, [r3, #4]
 80135d0:	6063      	str	r3, [r4, #4]
 80135d2:	bf04      	itt	eq
 80135d4:	1809      	addeq	r1, r1, r0
 80135d6:	6021      	streq	r1, [r4, #0]
 80135d8:	6054      	str	r4, [r2, #4]
 80135da:	e7ca      	b.n	8013572 <_free_r+0x22>
 80135dc:	bd38      	pop	{r3, r4, r5, pc}
 80135de:	bf00      	nop
 80135e0:	2000dac8 	.word	0x2000dac8

080135e4 <_malloc_usable_size_r>:
 80135e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e8:	1f18      	subs	r0, r3, #4
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	bfbc      	itt	lt
 80135ee:	580b      	ldrlt	r3, [r1, r0]
 80135f0:	18c0      	addlt	r0, r0, r3
 80135f2:	4770      	bx	lr

080135f4 <__ssputs_r>:
 80135f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135f8:	688e      	ldr	r6, [r1, #8]
 80135fa:	461f      	mov	r7, r3
 80135fc:	42be      	cmp	r6, r7
 80135fe:	680b      	ldr	r3, [r1, #0]
 8013600:	4682      	mov	sl, r0
 8013602:	460c      	mov	r4, r1
 8013604:	4690      	mov	r8, r2
 8013606:	d82d      	bhi.n	8013664 <__ssputs_r+0x70>
 8013608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801360c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013610:	d026      	beq.n	8013660 <__ssputs_r+0x6c>
 8013612:	6965      	ldr	r5, [r4, #20]
 8013614:	6909      	ldr	r1, [r1, #16]
 8013616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801361a:	eba3 0901 	sub.w	r9, r3, r1
 801361e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013622:	1c7b      	adds	r3, r7, #1
 8013624:	444b      	add	r3, r9
 8013626:	106d      	asrs	r5, r5, #1
 8013628:	429d      	cmp	r5, r3
 801362a:	bf38      	it	cc
 801362c:	461d      	movcc	r5, r3
 801362e:	0553      	lsls	r3, r2, #21
 8013630:	d527      	bpl.n	8013682 <__ssputs_r+0x8e>
 8013632:	4629      	mov	r1, r5
 8013634:	f7ff fb36 	bl	8012ca4 <_malloc_r>
 8013638:	4606      	mov	r6, r0
 801363a:	b360      	cbz	r0, 8013696 <__ssputs_r+0xa2>
 801363c:	6921      	ldr	r1, [r4, #16]
 801363e:	464a      	mov	r2, r9
 8013640:	f7ff ff4d 	bl	80134de <memcpy>
 8013644:	89a3      	ldrh	r3, [r4, #12]
 8013646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801364a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801364e:	81a3      	strh	r3, [r4, #12]
 8013650:	6126      	str	r6, [r4, #16]
 8013652:	6165      	str	r5, [r4, #20]
 8013654:	444e      	add	r6, r9
 8013656:	eba5 0509 	sub.w	r5, r5, r9
 801365a:	6026      	str	r6, [r4, #0]
 801365c:	60a5      	str	r5, [r4, #8]
 801365e:	463e      	mov	r6, r7
 8013660:	42be      	cmp	r6, r7
 8013662:	d900      	bls.n	8013666 <__ssputs_r+0x72>
 8013664:	463e      	mov	r6, r7
 8013666:	6820      	ldr	r0, [r4, #0]
 8013668:	4632      	mov	r2, r6
 801366a:	4641      	mov	r1, r8
 801366c:	f7ff fe54 	bl	8013318 <memmove>
 8013670:	68a3      	ldr	r3, [r4, #8]
 8013672:	1b9b      	subs	r3, r3, r6
 8013674:	60a3      	str	r3, [r4, #8]
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	4433      	add	r3, r6
 801367a:	6023      	str	r3, [r4, #0]
 801367c:	2000      	movs	r0, #0
 801367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013682:	462a      	mov	r2, r5
 8013684:	f7ff fc0e 	bl	8012ea4 <_realloc_r>
 8013688:	4606      	mov	r6, r0
 801368a:	2800      	cmp	r0, #0
 801368c:	d1e0      	bne.n	8013650 <__ssputs_r+0x5c>
 801368e:	6921      	ldr	r1, [r4, #16]
 8013690:	4650      	mov	r0, sl
 8013692:	f7ff ff5d 	bl	8013550 <_free_r>
 8013696:	230c      	movs	r3, #12
 8013698:	f8ca 3000 	str.w	r3, [sl]
 801369c:	89a3      	ldrh	r3, [r4, #12]
 801369e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136a2:	81a3      	strh	r3, [r4, #12]
 80136a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136a8:	e7e9      	b.n	801367e <__ssputs_r+0x8a>
	...

080136ac <_svfiprintf_r>:
 80136ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	4698      	mov	r8, r3
 80136b2:	898b      	ldrh	r3, [r1, #12]
 80136b4:	061b      	lsls	r3, r3, #24
 80136b6:	b09d      	sub	sp, #116	@ 0x74
 80136b8:	4607      	mov	r7, r0
 80136ba:	460d      	mov	r5, r1
 80136bc:	4614      	mov	r4, r2
 80136be:	d510      	bpl.n	80136e2 <_svfiprintf_r+0x36>
 80136c0:	690b      	ldr	r3, [r1, #16]
 80136c2:	b973      	cbnz	r3, 80136e2 <_svfiprintf_r+0x36>
 80136c4:	2140      	movs	r1, #64	@ 0x40
 80136c6:	f7ff faed 	bl	8012ca4 <_malloc_r>
 80136ca:	6028      	str	r0, [r5, #0]
 80136cc:	6128      	str	r0, [r5, #16]
 80136ce:	b930      	cbnz	r0, 80136de <_svfiprintf_r+0x32>
 80136d0:	230c      	movs	r3, #12
 80136d2:	603b      	str	r3, [r7, #0]
 80136d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136d8:	b01d      	add	sp, #116	@ 0x74
 80136da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136de:	2340      	movs	r3, #64	@ 0x40
 80136e0:	616b      	str	r3, [r5, #20]
 80136e2:	2300      	movs	r3, #0
 80136e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80136e6:	2320      	movs	r3, #32
 80136e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80136f0:	2330      	movs	r3, #48	@ 0x30
 80136f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013890 <_svfiprintf_r+0x1e4>
 80136f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136fa:	f04f 0901 	mov.w	r9, #1
 80136fe:	4623      	mov	r3, r4
 8013700:	469a      	mov	sl, r3
 8013702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013706:	b10a      	cbz	r2, 801370c <_svfiprintf_r+0x60>
 8013708:	2a25      	cmp	r2, #37	@ 0x25
 801370a:	d1f9      	bne.n	8013700 <_svfiprintf_r+0x54>
 801370c:	ebba 0b04 	subs.w	fp, sl, r4
 8013710:	d00b      	beq.n	801372a <_svfiprintf_r+0x7e>
 8013712:	465b      	mov	r3, fp
 8013714:	4622      	mov	r2, r4
 8013716:	4629      	mov	r1, r5
 8013718:	4638      	mov	r0, r7
 801371a:	f7ff ff6b 	bl	80135f4 <__ssputs_r>
 801371e:	3001      	adds	r0, #1
 8013720:	f000 80a7 	beq.w	8013872 <_svfiprintf_r+0x1c6>
 8013724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013726:	445a      	add	r2, fp
 8013728:	9209      	str	r2, [sp, #36]	@ 0x24
 801372a:	f89a 3000 	ldrb.w	r3, [sl]
 801372e:	2b00      	cmp	r3, #0
 8013730:	f000 809f 	beq.w	8013872 <_svfiprintf_r+0x1c6>
 8013734:	2300      	movs	r3, #0
 8013736:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801373a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801373e:	f10a 0a01 	add.w	sl, sl, #1
 8013742:	9304      	str	r3, [sp, #16]
 8013744:	9307      	str	r3, [sp, #28]
 8013746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801374a:	931a      	str	r3, [sp, #104]	@ 0x68
 801374c:	4654      	mov	r4, sl
 801374e:	2205      	movs	r2, #5
 8013750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013754:	484e      	ldr	r0, [pc, #312]	@ (8013890 <_svfiprintf_r+0x1e4>)
 8013756:	f7ec fd5b 	bl	8000210 <memchr>
 801375a:	9a04      	ldr	r2, [sp, #16]
 801375c:	b9d8      	cbnz	r0, 8013796 <_svfiprintf_r+0xea>
 801375e:	06d0      	lsls	r0, r2, #27
 8013760:	bf44      	itt	mi
 8013762:	2320      	movmi	r3, #32
 8013764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013768:	0711      	lsls	r1, r2, #28
 801376a:	bf44      	itt	mi
 801376c:	232b      	movmi	r3, #43	@ 0x2b
 801376e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013772:	f89a 3000 	ldrb.w	r3, [sl]
 8013776:	2b2a      	cmp	r3, #42	@ 0x2a
 8013778:	d015      	beq.n	80137a6 <_svfiprintf_r+0xfa>
 801377a:	9a07      	ldr	r2, [sp, #28]
 801377c:	4654      	mov	r4, sl
 801377e:	2000      	movs	r0, #0
 8013780:	f04f 0c0a 	mov.w	ip, #10
 8013784:	4621      	mov	r1, r4
 8013786:	f811 3b01 	ldrb.w	r3, [r1], #1
 801378a:	3b30      	subs	r3, #48	@ 0x30
 801378c:	2b09      	cmp	r3, #9
 801378e:	d94b      	bls.n	8013828 <_svfiprintf_r+0x17c>
 8013790:	b1b0      	cbz	r0, 80137c0 <_svfiprintf_r+0x114>
 8013792:	9207      	str	r2, [sp, #28]
 8013794:	e014      	b.n	80137c0 <_svfiprintf_r+0x114>
 8013796:	eba0 0308 	sub.w	r3, r0, r8
 801379a:	fa09 f303 	lsl.w	r3, r9, r3
 801379e:	4313      	orrs	r3, r2
 80137a0:	9304      	str	r3, [sp, #16]
 80137a2:	46a2      	mov	sl, r4
 80137a4:	e7d2      	b.n	801374c <_svfiprintf_r+0xa0>
 80137a6:	9b03      	ldr	r3, [sp, #12]
 80137a8:	1d19      	adds	r1, r3, #4
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	9103      	str	r1, [sp, #12]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	bfbb      	ittet	lt
 80137b2:	425b      	neglt	r3, r3
 80137b4:	f042 0202 	orrlt.w	r2, r2, #2
 80137b8:	9307      	strge	r3, [sp, #28]
 80137ba:	9307      	strlt	r3, [sp, #28]
 80137bc:	bfb8      	it	lt
 80137be:	9204      	strlt	r2, [sp, #16]
 80137c0:	7823      	ldrb	r3, [r4, #0]
 80137c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80137c4:	d10a      	bne.n	80137dc <_svfiprintf_r+0x130>
 80137c6:	7863      	ldrb	r3, [r4, #1]
 80137c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80137ca:	d132      	bne.n	8013832 <_svfiprintf_r+0x186>
 80137cc:	9b03      	ldr	r3, [sp, #12]
 80137ce:	1d1a      	adds	r2, r3, #4
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	9203      	str	r2, [sp, #12]
 80137d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137d8:	3402      	adds	r4, #2
 80137da:	9305      	str	r3, [sp, #20]
 80137dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80138a0 <_svfiprintf_r+0x1f4>
 80137e0:	7821      	ldrb	r1, [r4, #0]
 80137e2:	2203      	movs	r2, #3
 80137e4:	4650      	mov	r0, sl
 80137e6:	f7ec fd13 	bl	8000210 <memchr>
 80137ea:	b138      	cbz	r0, 80137fc <_svfiprintf_r+0x150>
 80137ec:	9b04      	ldr	r3, [sp, #16]
 80137ee:	eba0 000a 	sub.w	r0, r0, sl
 80137f2:	2240      	movs	r2, #64	@ 0x40
 80137f4:	4082      	lsls	r2, r0
 80137f6:	4313      	orrs	r3, r2
 80137f8:	3401      	adds	r4, #1
 80137fa:	9304      	str	r3, [sp, #16]
 80137fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013800:	4824      	ldr	r0, [pc, #144]	@ (8013894 <_svfiprintf_r+0x1e8>)
 8013802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013806:	2206      	movs	r2, #6
 8013808:	f7ec fd02 	bl	8000210 <memchr>
 801380c:	2800      	cmp	r0, #0
 801380e:	d036      	beq.n	801387e <_svfiprintf_r+0x1d2>
 8013810:	4b21      	ldr	r3, [pc, #132]	@ (8013898 <_svfiprintf_r+0x1ec>)
 8013812:	bb1b      	cbnz	r3, 801385c <_svfiprintf_r+0x1b0>
 8013814:	9b03      	ldr	r3, [sp, #12]
 8013816:	3307      	adds	r3, #7
 8013818:	f023 0307 	bic.w	r3, r3, #7
 801381c:	3308      	adds	r3, #8
 801381e:	9303      	str	r3, [sp, #12]
 8013820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013822:	4433      	add	r3, r6
 8013824:	9309      	str	r3, [sp, #36]	@ 0x24
 8013826:	e76a      	b.n	80136fe <_svfiprintf_r+0x52>
 8013828:	fb0c 3202 	mla	r2, ip, r2, r3
 801382c:	460c      	mov	r4, r1
 801382e:	2001      	movs	r0, #1
 8013830:	e7a8      	b.n	8013784 <_svfiprintf_r+0xd8>
 8013832:	2300      	movs	r3, #0
 8013834:	3401      	adds	r4, #1
 8013836:	9305      	str	r3, [sp, #20]
 8013838:	4619      	mov	r1, r3
 801383a:	f04f 0c0a 	mov.w	ip, #10
 801383e:	4620      	mov	r0, r4
 8013840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013844:	3a30      	subs	r2, #48	@ 0x30
 8013846:	2a09      	cmp	r2, #9
 8013848:	d903      	bls.n	8013852 <_svfiprintf_r+0x1a6>
 801384a:	2b00      	cmp	r3, #0
 801384c:	d0c6      	beq.n	80137dc <_svfiprintf_r+0x130>
 801384e:	9105      	str	r1, [sp, #20]
 8013850:	e7c4      	b.n	80137dc <_svfiprintf_r+0x130>
 8013852:	fb0c 2101 	mla	r1, ip, r1, r2
 8013856:	4604      	mov	r4, r0
 8013858:	2301      	movs	r3, #1
 801385a:	e7f0      	b.n	801383e <_svfiprintf_r+0x192>
 801385c:	ab03      	add	r3, sp, #12
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	462a      	mov	r2, r5
 8013862:	4b0e      	ldr	r3, [pc, #56]	@ (801389c <_svfiprintf_r+0x1f0>)
 8013864:	a904      	add	r1, sp, #16
 8013866:	4638      	mov	r0, r7
 8013868:	f3af 8000 	nop.w
 801386c:	1c42      	adds	r2, r0, #1
 801386e:	4606      	mov	r6, r0
 8013870:	d1d6      	bne.n	8013820 <_svfiprintf_r+0x174>
 8013872:	89ab      	ldrh	r3, [r5, #12]
 8013874:	065b      	lsls	r3, r3, #25
 8013876:	f53f af2d 	bmi.w	80136d4 <_svfiprintf_r+0x28>
 801387a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801387c:	e72c      	b.n	80136d8 <_svfiprintf_r+0x2c>
 801387e:	ab03      	add	r3, sp, #12
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	462a      	mov	r2, r5
 8013884:	4b05      	ldr	r3, [pc, #20]	@ (801389c <_svfiprintf_r+0x1f0>)
 8013886:	a904      	add	r1, sp, #16
 8013888:	4638      	mov	r0, r7
 801388a:	f000 f9bb 	bl	8013c04 <_printf_i>
 801388e:	e7ed      	b.n	801386c <_svfiprintf_r+0x1c0>
 8013890:	08014fb0 	.word	0x08014fb0
 8013894:	08014fba 	.word	0x08014fba
 8013898:	00000000 	.word	0x00000000
 801389c:	080135f5 	.word	0x080135f5
 80138a0:	08014fb6 	.word	0x08014fb6

080138a4 <__sfputc_r>:
 80138a4:	6893      	ldr	r3, [r2, #8]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	b410      	push	{r4}
 80138ac:	6093      	str	r3, [r2, #8]
 80138ae:	da08      	bge.n	80138c2 <__sfputc_r+0x1e>
 80138b0:	6994      	ldr	r4, [r2, #24]
 80138b2:	42a3      	cmp	r3, r4
 80138b4:	db01      	blt.n	80138ba <__sfputc_r+0x16>
 80138b6:	290a      	cmp	r1, #10
 80138b8:	d103      	bne.n	80138c2 <__sfputc_r+0x1e>
 80138ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138be:	f000 bb7f 	b.w	8013fc0 <__swbuf_r>
 80138c2:	6813      	ldr	r3, [r2, #0]
 80138c4:	1c58      	adds	r0, r3, #1
 80138c6:	6010      	str	r0, [r2, #0]
 80138c8:	7019      	strb	r1, [r3, #0]
 80138ca:	4608      	mov	r0, r1
 80138cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138d0:	4770      	bx	lr

080138d2 <__sfputs_r>:
 80138d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d4:	4606      	mov	r6, r0
 80138d6:	460f      	mov	r7, r1
 80138d8:	4614      	mov	r4, r2
 80138da:	18d5      	adds	r5, r2, r3
 80138dc:	42ac      	cmp	r4, r5
 80138de:	d101      	bne.n	80138e4 <__sfputs_r+0x12>
 80138e0:	2000      	movs	r0, #0
 80138e2:	e007      	b.n	80138f4 <__sfputs_r+0x22>
 80138e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138e8:	463a      	mov	r2, r7
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7ff ffda 	bl	80138a4 <__sfputc_r>
 80138f0:	1c43      	adds	r3, r0, #1
 80138f2:	d1f3      	bne.n	80138dc <__sfputs_r+0xa>
 80138f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138f8 <_vfiprintf_r>:
 80138f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fc:	460d      	mov	r5, r1
 80138fe:	b09d      	sub	sp, #116	@ 0x74
 8013900:	4614      	mov	r4, r2
 8013902:	4698      	mov	r8, r3
 8013904:	4606      	mov	r6, r0
 8013906:	b118      	cbz	r0, 8013910 <_vfiprintf_r+0x18>
 8013908:	6a03      	ldr	r3, [r0, #32]
 801390a:	b90b      	cbnz	r3, 8013910 <_vfiprintf_r+0x18>
 801390c:	f7ff fbfc 	bl	8013108 <__sinit>
 8013910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013912:	07d9      	lsls	r1, r3, #31
 8013914:	d405      	bmi.n	8013922 <_vfiprintf_r+0x2a>
 8013916:	89ab      	ldrh	r3, [r5, #12]
 8013918:	059a      	lsls	r2, r3, #22
 801391a:	d402      	bmi.n	8013922 <_vfiprintf_r+0x2a>
 801391c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801391e:	f7ff fdd4 	bl	80134ca <__retarget_lock_acquire_recursive>
 8013922:	89ab      	ldrh	r3, [r5, #12]
 8013924:	071b      	lsls	r3, r3, #28
 8013926:	d501      	bpl.n	801392c <_vfiprintf_r+0x34>
 8013928:	692b      	ldr	r3, [r5, #16]
 801392a:	b99b      	cbnz	r3, 8013954 <_vfiprintf_r+0x5c>
 801392c:	4629      	mov	r1, r5
 801392e:	4630      	mov	r0, r6
 8013930:	f000 fb84 	bl	801403c <__swsetup_r>
 8013934:	b170      	cbz	r0, 8013954 <_vfiprintf_r+0x5c>
 8013936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013938:	07dc      	lsls	r4, r3, #31
 801393a:	d504      	bpl.n	8013946 <_vfiprintf_r+0x4e>
 801393c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013940:	b01d      	add	sp, #116	@ 0x74
 8013942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013946:	89ab      	ldrh	r3, [r5, #12]
 8013948:	0598      	lsls	r0, r3, #22
 801394a:	d4f7      	bmi.n	801393c <_vfiprintf_r+0x44>
 801394c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801394e:	f7ff fdbd 	bl	80134cc <__retarget_lock_release_recursive>
 8013952:	e7f3      	b.n	801393c <_vfiprintf_r+0x44>
 8013954:	2300      	movs	r3, #0
 8013956:	9309      	str	r3, [sp, #36]	@ 0x24
 8013958:	2320      	movs	r3, #32
 801395a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013962:	2330      	movs	r3, #48	@ 0x30
 8013964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013b14 <_vfiprintf_r+0x21c>
 8013968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801396c:	f04f 0901 	mov.w	r9, #1
 8013970:	4623      	mov	r3, r4
 8013972:	469a      	mov	sl, r3
 8013974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013978:	b10a      	cbz	r2, 801397e <_vfiprintf_r+0x86>
 801397a:	2a25      	cmp	r2, #37	@ 0x25
 801397c:	d1f9      	bne.n	8013972 <_vfiprintf_r+0x7a>
 801397e:	ebba 0b04 	subs.w	fp, sl, r4
 8013982:	d00b      	beq.n	801399c <_vfiprintf_r+0xa4>
 8013984:	465b      	mov	r3, fp
 8013986:	4622      	mov	r2, r4
 8013988:	4629      	mov	r1, r5
 801398a:	4630      	mov	r0, r6
 801398c:	f7ff ffa1 	bl	80138d2 <__sfputs_r>
 8013990:	3001      	adds	r0, #1
 8013992:	f000 80a7 	beq.w	8013ae4 <_vfiprintf_r+0x1ec>
 8013996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013998:	445a      	add	r2, fp
 801399a:	9209      	str	r2, [sp, #36]	@ 0x24
 801399c:	f89a 3000 	ldrb.w	r3, [sl]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f000 809f 	beq.w	8013ae4 <_vfiprintf_r+0x1ec>
 80139a6:	2300      	movs	r3, #0
 80139a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80139ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139b0:	f10a 0a01 	add.w	sl, sl, #1
 80139b4:	9304      	str	r3, [sp, #16]
 80139b6:	9307      	str	r3, [sp, #28]
 80139b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80139bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80139be:	4654      	mov	r4, sl
 80139c0:	2205      	movs	r2, #5
 80139c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c6:	4853      	ldr	r0, [pc, #332]	@ (8013b14 <_vfiprintf_r+0x21c>)
 80139c8:	f7ec fc22 	bl	8000210 <memchr>
 80139cc:	9a04      	ldr	r2, [sp, #16]
 80139ce:	b9d8      	cbnz	r0, 8013a08 <_vfiprintf_r+0x110>
 80139d0:	06d1      	lsls	r1, r2, #27
 80139d2:	bf44      	itt	mi
 80139d4:	2320      	movmi	r3, #32
 80139d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139da:	0713      	lsls	r3, r2, #28
 80139dc:	bf44      	itt	mi
 80139de:	232b      	movmi	r3, #43	@ 0x2b
 80139e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139e4:	f89a 3000 	ldrb.w	r3, [sl]
 80139e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80139ea:	d015      	beq.n	8013a18 <_vfiprintf_r+0x120>
 80139ec:	9a07      	ldr	r2, [sp, #28]
 80139ee:	4654      	mov	r4, sl
 80139f0:	2000      	movs	r0, #0
 80139f2:	f04f 0c0a 	mov.w	ip, #10
 80139f6:	4621      	mov	r1, r4
 80139f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139fc:	3b30      	subs	r3, #48	@ 0x30
 80139fe:	2b09      	cmp	r3, #9
 8013a00:	d94b      	bls.n	8013a9a <_vfiprintf_r+0x1a2>
 8013a02:	b1b0      	cbz	r0, 8013a32 <_vfiprintf_r+0x13a>
 8013a04:	9207      	str	r2, [sp, #28]
 8013a06:	e014      	b.n	8013a32 <_vfiprintf_r+0x13a>
 8013a08:	eba0 0308 	sub.w	r3, r0, r8
 8013a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8013a10:	4313      	orrs	r3, r2
 8013a12:	9304      	str	r3, [sp, #16]
 8013a14:	46a2      	mov	sl, r4
 8013a16:	e7d2      	b.n	80139be <_vfiprintf_r+0xc6>
 8013a18:	9b03      	ldr	r3, [sp, #12]
 8013a1a:	1d19      	adds	r1, r3, #4
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	9103      	str	r1, [sp, #12]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	bfbb      	ittet	lt
 8013a24:	425b      	neglt	r3, r3
 8013a26:	f042 0202 	orrlt.w	r2, r2, #2
 8013a2a:	9307      	strge	r3, [sp, #28]
 8013a2c:	9307      	strlt	r3, [sp, #28]
 8013a2e:	bfb8      	it	lt
 8013a30:	9204      	strlt	r2, [sp, #16]
 8013a32:	7823      	ldrb	r3, [r4, #0]
 8013a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a36:	d10a      	bne.n	8013a4e <_vfiprintf_r+0x156>
 8013a38:	7863      	ldrb	r3, [r4, #1]
 8013a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a3c:	d132      	bne.n	8013aa4 <_vfiprintf_r+0x1ac>
 8013a3e:	9b03      	ldr	r3, [sp, #12]
 8013a40:	1d1a      	adds	r2, r3, #4
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	9203      	str	r2, [sp, #12]
 8013a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a4a:	3402      	adds	r4, #2
 8013a4c:	9305      	str	r3, [sp, #20]
 8013a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013b24 <_vfiprintf_r+0x22c>
 8013a52:	7821      	ldrb	r1, [r4, #0]
 8013a54:	2203      	movs	r2, #3
 8013a56:	4650      	mov	r0, sl
 8013a58:	f7ec fbda 	bl	8000210 <memchr>
 8013a5c:	b138      	cbz	r0, 8013a6e <_vfiprintf_r+0x176>
 8013a5e:	9b04      	ldr	r3, [sp, #16]
 8013a60:	eba0 000a 	sub.w	r0, r0, sl
 8013a64:	2240      	movs	r2, #64	@ 0x40
 8013a66:	4082      	lsls	r2, r0
 8013a68:	4313      	orrs	r3, r2
 8013a6a:	3401      	adds	r4, #1
 8013a6c:	9304      	str	r3, [sp, #16]
 8013a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a72:	4829      	ldr	r0, [pc, #164]	@ (8013b18 <_vfiprintf_r+0x220>)
 8013a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a78:	2206      	movs	r2, #6
 8013a7a:	f7ec fbc9 	bl	8000210 <memchr>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d03f      	beq.n	8013b02 <_vfiprintf_r+0x20a>
 8013a82:	4b26      	ldr	r3, [pc, #152]	@ (8013b1c <_vfiprintf_r+0x224>)
 8013a84:	bb1b      	cbnz	r3, 8013ace <_vfiprintf_r+0x1d6>
 8013a86:	9b03      	ldr	r3, [sp, #12]
 8013a88:	3307      	adds	r3, #7
 8013a8a:	f023 0307 	bic.w	r3, r3, #7
 8013a8e:	3308      	adds	r3, #8
 8013a90:	9303      	str	r3, [sp, #12]
 8013a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a94:	443b      	add	r3, r7
 8013a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a98:	e76a      	b.n	8013970 <_vfiprintf_r+0x78>
 8013a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	2001      	movs	r0, #1
 8013aa2:	e7a8      	b.n	80139f6 <_vfiprintf_r+0xfe>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	3401      	adds	r4, #1
 8013aa8:	9305      	str	r3, [sp, #20]
 8013aaa:	4619      	mov	r1, r3
 8013aac:	f04f 0c0a 	mov.w	ip, #10
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ab6:	3a30      	subs	r2, #48	@ 0x30
 8013ab8:	2a09      	cmp	r2, #9
 8013aba:	d903      	bls.n	8013ac4 <_vfiprintf_r+0x1cc>
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d0c6      	beq.n	8013a4e <_vfiprintf_r+0x156>
 8013ac0:	9105      	str	r1, [sp, #20]
 8013ac2:	e7c4      	b.n	8013a4e <_vfiprintf_r+0x156>
 8013ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ac8:	4604      	mov	r4, r0
 8013aca:	2301      	movs	r3, #1
 8013acc:	e7f0      	b.n	8013ab0 <_vfiprintf_r+0x1b8>
 8013ace:	ab03      	add	r3, sp, #12
 8013ad0:	9300      	str	r3, [sp, #0]
 8013ad2:	462a      	mov	r2, r5
 8013ad4:	4b12      	ldr	r3, [pc, #72]	@ (8013b20 <_vfiprintf_r+0x228>)
 8013ad6:	a904      	add	r1, sp, #16
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f3af 8000 	nop.w
 8013ade:	4607      	mov	r7, r0
 8013ae0:	1c78      	adds	r0, r7, #1
 8013ae2:	d1d6      	bne.n	8013a92 <_vfiprintf_r+0x19a>
 8013ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ae6:	07d9      	lsls	r1, r3, #31
 8013ae8:	d405      	bmi.n	8013af6 <_vfiprintf_r+0x1fe>
 8013aea:	89ab      	ldrh	r3, [r5, #12]
 8013aec:	059a      	lsls	r2, r3, #22
 8013aee:	d402      	bmi.n	8013af6 <_vfiprintf_r+0x1fe>
 8013af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013af2:	f7ff fceb 	bl	80134cc <__retarget_lock_release_recursive>
 8013af6:	89ab      	ldrh	r3, [r5, #12]
 8013af8:	065b      	lsls	r3, r3, #25
 8013afa:	f53f af1f 	bmi.w	801393c <_vfiprintf_r+0x44>
 8013afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b00:	e71e      	b.n	8013940 <_vfiprintf_r+0x48>
 8013b02:	ab03      	add	r3, sp, #12
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	462a      	mov	r2, r5
 8013b08:	4b05      	ldr	r3, [pc, #20]	@ (8013b20 <_vfiprintf_r+0x228>)
 8013b0a:	a904      	add	r1, sp, #16
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	f000 f879 	bl	8013c04 <_printf_i>
 8013b12:	e7e4      	b.n	8013ade <_vfiprintf_r+0x1e6>
 8013b14:	08014fb0 	.word	0x08014fb0
 8013b18:	08014fba 	.word	0x08014fba
 8013b1c:	00000000 	.word	0x00000000
 8013b20:	080138d3 	.word	0x080138d3
 8013b24:	08014fb6 	.word	0x08014fb6

08013b28 <_printf_common>:
 8013b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b2c:	4616      	mov	r6, r2
 8013b2e:	4698      	mov	r8, r3
 8013b30:	688a      	ldr	r2, [r1, #8]
 8013b32:	690b      	ldr	r3, [r1, #16]
 8013b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	bfb8      	it	lt
 8013b3c:	4613      	movlt	r3, r2
 8013b3e:	6033      	str	r3, [r6, #0]
 8013b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013b44:	4607      	mov	r7, r0
 8013b46:	460c      	mov	r4, r1
 8013b48:	b10a      	cbz	r2, 8013b4e <_printf_common+0x26>
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	6033      	str	r3, [r6, #0]
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	0699      	lsls	r1, r3, #26
 8013b52:	bf42      	ittt	mi
 8013b54:	6833      	ldrmi	r3, [r6, #0]
 8013b56:	3302      	addmi	r3, #2
 8013b58:	6033      	strmi	r3, [r6, #0]
 8013b5a:	6825      	ldr	r5, [r4, #0]
 8013b5c:	f015 0506 	ands.w	r5, r5, #6
 8013b60:	d106      	bne.n	8013b70 <_printf_common+0x48>
 8013b62:	f104 0a19 	add.w	sl, r4, #25
 8013b66:	68e3      	ldr	r3, [r4, #12]
 8013b68:	6832      	ldr	r2, [r6, #0]
 8013b6a:	1a9b      	subs	r3, r3, r2
 8013b6c:	42ab      	cmp	r3, r5
 8013b6e:	dc26      	bgt.n	8013bbe <_printf_common+0x96>
 8013b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b74:	6822      	ldr	r2, [r4, #0]
 8013b76:	3b00      	subs	r3, #0
 8013b78:	bf18      	it	ne
 8013b7a:	2301      	movne	r3, #1
 8013b7c:	0692      	lsls	r2, r2, #26
 8013b7e:	d42b      	bmi.n	8013bd8 <_printf_common+0xb0>
 8013b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b84:	4641      	mov	r1, r8
 8013b86:	4638      	mov	r0, r7
 8013b88:	47c8      	blx	r9
 8013b8a:	3001      	adds	r0, #1
 8013b8c:	d01e      	beq.n	8013bcc <_printf_common+0xa4>
 8013b8e:	6823      	ldr	r3, [r4, #0]
 8013b90:	6922      	ldr	r2, [r4, #16]
 8013b92:	f003 0306 	and.w	r3, r3, #6
 8013b96:	2b04      	cmp	r3, #4
 8013b98:	bf02      	ittt	eq
 8013b9a:	68e5      	ldreq	r5, [r4, #12]
 8013b9c:	6833      	ldreq	r3, [r6, #0]
 8013b9e:	1aed      	subeq	r5, r5, r3
 8013ba0:	68a3      	ldr	r3, [r4, #8]
 8013ba2:	bf0c      	ite	eq
 8013ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ba8:	2500      	movne	r5, #0
 8013baa:	4293      	cmp	r3, r2
 8013bac:	bfc4      	itt	gt
 8013bae:	1a9b      	subgt	r3, r3, r2
 8013bb0:	18ed      	addgt	r5, r5, r3
 8013bb2:	2600      	movs	r6, #0
 8013bb4:	341a      	adds	r4, #26
 8013bb6:	42b5      	cmp	r5, r6
 8013bb8:	d11a      	bne.n	8013bf0 <_printf_common+0xc8>
 8013bba:	2000      	movs	r0, #0
 8013bbc:	e008      	b.n	8013bd0 <_printf_common+0xa8>
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	4652      	mov	r2, sl
 8013bc2:	4641      	mov	r1, r8
 8013bc4:	4638      	mov	r0, r7
 8013bc6:	47c8      	blx	r9
 8013bc8:	3001      	adds	r0, #1
 8013bca:	d103      	bne.n	8013bd4 <_printf_common+0xac>
 8013bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bd4:	3501      	adds	r5, #1
 8013bd6:	e7c6      	b.n	8013b66 <_printf_common+0x3e>
 8013bd8:	18e1      	adds	r1, r4, r3
 8013bda:	1c5a      	adds	r2, r3, #1
 8013bdc:	2030      	movs	r0, #48	@ 0x30
 8013bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013be2:	4422      	add	r2, r4
 8013be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013bec:	3302      	adds	r3, #2
 8013bee:	e7c7      	b.n	8013b80 <_printf_common+0x58>
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	4622      	mov	r2, r4
 8013bf4:	4641      	mov	r1, r8
 8013bf6:	4638      	mov	r0, r7
 8013bf8:	47c8      	blx	r9
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	d0e6      	beq.n	8013bcc <_printf_common+0xa4>
 8013bfe:	3601      	adds	r6, #1
 8013c00:	e7d9      	b.n	8013bb6 <_printf_common+0x8e>
	...

08013c04 <_printf_i>:
 8013c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c08:	7e0f      	ldrb	r7, [r1, #24]
 8013c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013c0c:	2f78      	cmp	r7, #120	@ 0x78
 8013c0e:	4691      	mov	r9, r2
 8013c10:	4680      	mov	r8, r0
 8013c12:	460c      	mov	r4, r1
 8013c14:	469a      	mov	sl, r3
 8013c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013c1a:	d807      	bhi.n	8013c2c <_printf_i+0x28>
 8013c1c:	2f62      	cmp	r7, #98	@ 0x62
 8013c1e:	d80a      	bhi.n	8013c36 <_printf_i+0x32>
 8013c20:	2f00      	cmp	r7, #0
 8013c22:	f000 80d2 	beq.w	8013dca <_printf_i+0x1c6>
 8013c26:	2f58      	cmp	r7, #88	@ 0x58
 8013c28:	f000 80b9 	beq.w	8013d9e <_printf_i+0x19a>
 8013c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013c34:	e03a      	b.n	8013cac <_printf_i+0xa8>
 8013c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013c3a:	2b15      	cmp	r3, #21
 8013c3c:	d8f6      	bhi.n	8013c2c <_printf_i+0x28>
 8013c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8013c44 <_printf_i+0x40>)
 8013c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c44:	08013c9d 	.word	0x08013c9d
 8013c48:	08013cb1 	.word	0x08013cb1
 8013c4c:	08013c2d 	.word	0x08013c2d
 8013c50:	08013c2d 	.word	0x08013c2d
 8013c54:	08013c2d 	.word	0x08013c2d
 8013c58:	08013c2d 	.word	0x08013c2d
 8013c5c:	08013cb1 	.word	0x08013cb1
 8013c60:	08013c2d 	.word	0x08013c2d
 8013c64:	08013c2d 	.word	0x08013c2d
 8013c68:	08013c2d 	.word	0x08013c2d
 8013c6c:	08013c2d 	.word	0x08013c2d
 8013c70:	08013db1 	.word	0x08013db1
 8013c74:	08013cdb 	.word	0x08013cdb
 8013c78:	08013d6b 	.word	0x08013d6b
 8013c7c:	08013c2d 	.word	0x08013c2d
 8013c80:	08013c2d 	.word	0x08013c2d
 8013c84:	08013dd3 	.word	0x08013dd3
 8013c88:	08013c2d 	.word	0x08013c2d
 8013c8c:	08013cdb 	.word	0x08013cdb
 8013c90:	08013c2d 	.word	0x08013c2d
 8013c94:	08013c2d 	.word	0x08013c2d
 8013c98:	08013d73 	.word	0x08013d73
 8013c9c:	6833      	ldr	r3, [r6, #0]
 8013c9e:	1d1a      	adds	r2, r3, #4
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	6032      	str	r2, [r6, #0]
 8013ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013cac:	2301      	movs	r3, #1
 8013cae:	e09d      	b.n	8013dec <_printf_i+0x1e8>
 8013cb0:	6833      	ldr	r3, [r6, #0]
 8013cb2:	6820      	ldr	r0, [r4, #0]
 8013cb4:	1d19      	adds	r1, r3, #4
 8013cb6:	6031      	str	r1, [r6, #0]
 8013cb8:	0606      	lsls	r6, r0, #24
 8013cba:	d501      	bpl.n	8013cc0 <_printf_i+0xbc>
 8013cbc:	681d      	ldr	r5, [r3, #0]
 8013cbe:	e003      	b.n	8013cc8 <_printf_i+0xc4>
 8013cc0:	0645      	lsls	r5, r0, #25
 8013cc2:	d5fb      	bpl.n	8013cbc <_printf_i+0xb8>
 8013cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013cc8:	2d00      	cmp	r5, #0
 8013cca:	da03      	bge.n	8013cd4 <_printf_i+0xd0>
 8013ccc:	232d      	movs	r3, #45	@ 0x2d
 8013cce:	426d      	negs	r5, r5
 8013cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cd4:	4859      	ldr	r0, [pc, #356]	@ (8013e3c <_printf_i+0x238>)
 8013cd6:	230a      	movs	r3, #10
 8013cd8:	e011      	b.n	8013cfe <_printf_i+0xfa>
 8013cda:	6821      	ldr	r1, [r4, #0]
 8013cdc:	6833      	ldr	r3, [r6, #0]
 8013cde:	0608      	lsls	r0, r1, #24
 8013ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8013ce4:	d402      	bmi.n	8013cec <_printf_i+0xe8>
 8013ce6:	0649      	lsls	r1, r1, #25
 8013ce8:	bf48      	it	mi
 8013cea:	b2ad      	uxthmi	r5, r5
 8013cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8013cee:	4853      	ldr	r0, [pc, #332]	@ (8013e3c <_printf_i+0x238>)
 8013cf0:	6033      	str	r3, [r6, #0]
 8013cf2:	bf14      	ite	ne
 8013cf4:	230a      	movne	r3, #10
 8013cf6:	2308      	moveq	r3, #8
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013cfe:	6866      	ldr	r6, [r4, #4]
 8013d00:	60a6      	str	r6, [r4, #8]
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	bfa2      	ittt	ge
 8013d06:	6821      	ldrge	r1, [r4, #0]
 8013d08:	f021 0104 	bicge.w	r1, r1, #4
 8013d0c:	6021      	strge	r1, [r4, #0]
 8013d0e:	b90d      	cbnz	r5, 8013d14 <_printf_i+0x110>
 8013d10:	2e00      	cmp	r6, #0
 8013d12:	d04b      	beq.n	8013dac <_printf_i+0x1a8>
 8013d14:	4616      	mov	r6, r2
 8013d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8013d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8013d1e:	5dc7      	ldrb	r7, [r0, r7]
 8013d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013d24:	462f      	mov	r7, r5
 8013d26:	42bb      	cmp	r3, r7
 8013d28:	460d      	mov	r5, r1
 8013d2a:	d9f4      	bls.n	8013d16 <_printf_i+0x112>
 8013d2c:	2b08      	cmp	r3, #8
 8013d2e:	d10b      	bne.n	8013d48 <_printf_i+0x144>
 8013d30:	6823      	ldr	r3, [r4, #0]
 8013d32:	07df      	lsls	r7, r3, #31
 8013d34:	d508      	bpl.n	8013d48 <_printf_i+0x144>
 8013d36:	6923      	ldr	r3, [r4, #16]
 8013d38:	6861      	ldr	r1, [r4, #4]
 8013d3a:	4299      	cmp	r1, r3
 8013d3c:	bfde      	ittt	le
 8013d3e:	2330      	movle	r3, #48	@ 0x30
 8013d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013d48:	1b92      	subs	r2, r2, r6
 8013d4a:	6122      	str	r2, [r4, #16]
 8013d4c:	f8cd a000 	str.w	sl, [sp]
 8013d50:	464b      	mov	r3, r9
 8013d52:	aa03      	add	r2, sp, #12
 8013d54:	4621      	mov	r1, r4
 8013d56:	4640      	mov	r0, r8
 8013d58:	f7ff fee6 	bl	8013b28 <_printf_common>
 8013d5c:	3001      	adds	r0, #1
 8013d5e:	d14a      	bne.n	8013df6 <_printf_i+0x1f2>
 8013d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d64:	b004      	add	sp, #16
 8013d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	f043 0320 	orr.w	r3, r3, #32
 8013d70:	6023      	str	r3, [r4, #0]
 8013d72:	4833      	ldr	r0, [pc, #204]	@ (8013e40 <_printf_i+0x23c>)
 8013d74:	2778      	movs	r7, #120	@ 0x78
 8013d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	6831      	ldr	r1, [r6, #0]
 8013d7e:	061f      	lsls	r7, r3, #24
 8013d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d84:	d402      	bmi.n	8013d8c <_printf_i+0x188>
 8013d86:	065f      	lsls	r7, r3, #25
 8013d88:	bf48      	it	mi
 8013d8a:	b2ad      	uxthmi	r5, r5
 8013d8c:	6031      	str	r1, [r6, #0]
 8013d8e:	07d9      	lsls	r1, r3, #31
 8013d90:	bf44      	itt	mi
 8013d92:	f043 0320 	orrmi.w	r3, r3, #32
 8013d96:	6023      	strmi	r3, [r4, #0]
 8013d98:	b11d      	cbz	r5, 8013da2 <_printf_i+0x19e>
 8013d9a:	2310      	movs	r3, #16
 8013d9c:	e7ac      	b.n	8013cf8 <_printf_i+0xf4>
 8013d9e:	4827      	ldr	r0, [pc, #156]	@ (8013e3c <_printf_i+0x238>)
 8013da0:	e7e9      	b.n	8013d76 <_printf_i+0x172>
 8013da2:	6823      	ldr	r3, [r4, #0]
 8013da4:	f023 0320 	bic.w	r3, r3, #32
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	e7f6      	b.n	8013d9a <_printf_i+0x196>
 8013dac:	4616      	mov	r6, r2
 8013dae:	e7bd      	b.n	8013d2c <_printf_i+0x128>
 8013db0:	6833      	ldr	r3, [r6, #0]
 8013db2:	6825      	ldr	r5, [r4, #0]
 8013db4:	6961      	ldr	r1, [r4, #20]
 8013db6:	1d18      	adds	r0, r3, #4
 8013db8:	6030      	str	r0, [r6, #0]
 8013dba:	062e      	lsls	r6, r5, #24
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	d501      	bpl.n	8013dc4 <_printf_i+0x1c0>
 8013dc0:	6019      	str	r1, [r3, #0]
 8013dc2:	e002      	b.n	8013dca <_printf_i+0x1c6>
 8013dc4:	0668      	lsls	r0, r5, #25
 8013dc6:	d5fb      	bpl.n	8013dc0 <_printf_i+0x1bc>
 8013dc8:	8019      	strh	r1, [r3, #0]
 8013dca:	2300      	movs	r3, #0
 8013dcc:	6123      	str	r3, [r4, #16]
 8013dce:	4616      	mov	r6, r2
 8013dd0:	e7bc      	b.n	8013d4c <_printf_i+0x148>
 8013dd2:	6833      	ldr	r3, [r6, #0]
 8013dd4:	1d1a      	adds	r2, r3, #4
 8013dd6:	6032      	str	r2, [r6, #0]
 8013dd8:	681e      	ldr	r6, [r3, #0]
 8013dda:	6862      	ldr	r2, [r4, #4]
 8013ddc:	2100      	movs	r1, #0
 8013dde:	4630      	mov	r0, r6
 8013de0:	f7ec fa16 	bl	8000210 <memchr>
 8013de4:	b108      	cbz	r0, 8013dea <_printf_i+0x1e6>
 8013de6:	1b80      	subs	r0, r0, r6
 8013de8:	6060      	str	r0, [r4, #4]
 8013dea:	6863      	ldr	r3, [r4, #4]
 8013dec:	6123      	str	r3, [r4, #16]
 8013dee:	2300      	movs	r3, #0
 8013df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013df4:	e7aa      	b.n	8013d4c <_printf_i+0x148>
 8013df6:	6923      	ldr	r3, [r4, #16]
 8013df8:	4632      	mov	r2, r6
 8013dfa:	4649      	mov	r1, r9
 8013dfc:	4640      	mov	r0, r8
 8013dfe:	47d0      	blx	sl
 8013e00:	3001      	adds	r0, #1
 8013e02:	d0ad      	beq.n	8013d60 <_printf_i+0x15c>
 8013e04:	6823      	ldr	r3, [r4, #0]
 8013e06:	079b      	lsls	r3, r3, #30
 8013e08:	d413      	bmi.n	8013e32 <_printf_i+0x22e>
 8013e0a:	68e0      	ldr	r0, [r4, #12]
 8013e0c:	9b03      	ldr	r3, [sp, #12]
 8013e0e:	4298      	cmp	r0, r3
 8013e10:	bfb8      	it	lt
 8013e12:	4618      	movlt	r0, r3
 8013e14:	e7a6      	b.n	8013d64 <_printf_i+0x160>
 8013e16:	2301      	movs	r3, #1
 8013e18:	4632      	mov	r2, r6
 8013e1a:	4649      	mov	r1, r9
 8013e1c:	4640      	mov	r0, r8
 8013e1e:	47d0      	blx	sl
 8013e20:	3001      	adds	r0, #1
 8013e22:	d09d      	beq.n	8013d60 <_printf_i+0x15c>
 8013e24:	3501      	adds	r5, #1
 8013e26:	68e3      	ldr	r3, [r4, #12]
 8013e28:	9903      	ldr	r1, [sp, #12]
 8013e2a:	1a5b      	subs	r3, r3, r1
 8013e2c:	42ab      	cmp	r3, r5
 8013e2e:	dcf2      	bgt.n	8013e16 <_printf_i+0x212>
 8013e30:	e7eb      	b.n	8013e0a <_printf_i+0x206>
 8013e32:	2500      	movs	r5, #0
 8013e34:	f104 0619 	add.w	r6, r4, #25
 8013e38:	e7f5      	b.n	8013e26 <_printf_i+0x222>
 8013e3a:	bf00      	nop
 8013e3c:	08014fc1 	.word	0x08014fc1
 8013e40:	08014fd2 	.word	0x08014fd2

08013e44 <__sflush_r>:
 8013e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4c:	0716      	lsls	r6, r2, #28
 8013e4e:	4605      	mov	r5, r0
 8013e50:	460c      	mov	r4, r1
 8013e52:	d454      	bmi.n	8013efe <__sflush_r+0xba>
 8013e54:	684b      	ldr	r3, [r1, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	dc02      	bgt.n	8013e60 <__sflush_r+0x1c>
 8013e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	dd48      	ble.n	8013ef2 <__sflush_r+0xae>
 8013e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e62:	2e00      	cmp	r6, #0
 8013e64:	d045      	beq.n	8013ef2 <__sflush_r+0xae>
 8013e66:	2300      	movs	r3, #0
 8013e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e6c:	682f      	ldr	r7, [r5, #0]
 8013e6e:	6a21      	ldr	r1, [r4, #32]
 8013e70:	602b      	str	r3, [r5, #0]
 8013e72:	d030      	beq.n	8013ed6 <__sflush_r+0x92>
 8013e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e76:	89a3      	ldrh	r3, [r4, #12]
 8013e78:	0759      	lsls	r1, r3, #29
 8013e7a:	d505      	bpl.n	8013e88 <__sflush_r+0x44>
 8013e7c:	6863      	ldr	r3, [r4, #4]
 8013e7e:	1ad2      	subs	r2, r2, r3
 8013e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e82:	b10b      	cbz	r3, 8013e88 <__sflush_r+0x44>
 8013e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e86:	1ad2      	subs	r2, r2, r3
 8013e88:	2300      	movs	r3, #0
 8013e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e8c:	6a21      	ldr	r1, [r4, #32]
 8013e8e:	4628      	mov	r0, r5
 8013e90:	47b0      	blx	r6
 8013e92:	1c43      	adds	r3, r0, #1
 8013e94:	89a3      	ldrh	r3, [r4, #12]
 8013e96:	d106      	bne.n	8013ea6 <__sflush_r+0x62>
 8013e98:	6829      	ldr	r1, [r5, #0]
 8013e9a:	291d      	cmp	r1, #29
 8013e9c:	d82b      	bhi.n	8013ef6 <__sflush_r+0xb2>
 8013e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8013f48 <__sflush_r+0x104>)
 8013ea0:	410a      	asrs	r2, r1
 8013ea2:	07d6      	lsls	r6, r2, #31
 8013ea4:	d427      	bmi.n	8013ef6 <__sflush_r+0xb2>
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	6062      	str	r2, [r4, #4]
 8013eaa:	04d9      	lsls	r1, r3, #19
 8013eac:	6922      	ldr	r2, [r4, #16]
 8013eae:	6022      	str	r2, [r4, #0]
 8013eb0:	d504      	bpl.n	8013ebc <__sflush_r+0x78>
 8013eb2:	1c42      	adds	r2, r0, #1
 8013eb4:	d101      	bne.n	8013eba <__sflush_r+0x76>
 8013eb6:	682b      	ldr	r3, [r5, #0]
 8013eb8:	b903      	cbnz	r3, 8013ebc <__sflush_r+0x78>
 8013eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ebe:	602f      	str	r7, [r5, #0]
 8013ec0:	b1b9      	cbz	r1, 8013ef2 <__sflush_r+0xae>
 8013ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ec6:	4299      	cmp	r1, r3
 8013ec8:	d002      	beq.n	8013ed0 <__sflush_r+0x8c>
 8013eca:	4628      	mov	r0, r5
 8013ecc:	f7ff fb40 	bl	8013550 <_free_r>
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013ed4:	e00d      	b.n	8013ef2 <__sflush_r+0xae>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	4628      	mov	r0, r5
 8013eda:	47b0      	blx	r6
 8013edc:	4602      	mov	r2, r0
 8013ede:	1c50      	adds	r0, r2, #1
 8013ee0:	d1c9      	bne.n	8013e76 <__sflush_r+0x32>
 8013ee2:	682b      	ldr	r3, [r5, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d0c6      	beq.n	8013e76 <__sflush_r+0x32>
 8013ee8:	2b1d      	cmp	r3, #29
 8013eea:	d001      	beq.n	8013ef0 <__sflush_r+0xac>
 8013eec:	2b16      	cmp	r3, #22
 8013eee:	d11e      	bne.n	8013f2e <__sflush_r+0xea>
 8013ef0:	602f      	str	r7, [r5, #0]
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	e022      	b.n	8013f3c <__sflush_r+0xf8>
 8013ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013efa:	b21b      	sxth	r3, r3
 8013efc:	e01b      	b.n	8013f36 <__sflush_r+0xf2>
 8013efe:	690f      	ldr	r7, [r1, #16]
 8013f00:	2f00      	cmp	r7, #0
 8013f02:	d0f6      	beq.n	8013ef2 <__sflush_r+0xae>
 8013f04:	0793      	lsls	r3, r2, #30
 8013f06:	680e      	ldr	r6, [r1, #0]
 8013f08:	bf08      	it	eq
 8013f0a:	694b      	ldreq	r3, [r1, #20]
 8013f0c:	600f      	str	r7, [r1, #0]
 8013f0e:	bf18      	it	ne
 8013f10:	2300      	movne	r3, #0
 8013f12:	eba6 0807 	sub.w	r8, r6, r7
 8013f16:	608b      	str	r3, [r1, #8]
 8013f18:	f1b8 0f00 	cmp.w	r8, #0
 8013f1c:	dde9      	ble.n	8013ef2 <__sflush_r+0xae>
 8013f1e:	6a21      	ldr	r1, [r4, #32]
 8013f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013f22:	4643      	mov	r3, r8
 8013f24:	463a      	mov	r2, r7
 8013f26:	4628      	mov	r0, r5
 8013f28:	47b0      	blx	r6
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	dc08      	bgt.n	8013f40 <__sflush_r+0xfc>
 8013f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f36:	81a3      	strh	r3, [r4, #12]
 8013f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f40:	4407      	add	r7, r0
 8013f42:	eba8 0800 	sub.w	r8, r8, r0
 8013f46:	e7e7      	b.n	8013f18 <__sflush_r+0xd4>
 8013f48:	dfbffffe 	.word	0xdfbffffe

08013f4c <_fflush_r>:
 8013f4c:	b538      	push	{r3, r4, r5, lr}
 8013f4e:	690b      	ldr	r3, [r1, #16]
 8013f50:	4605      	mov	r5, r0
 8013f52:	460c      	mov	r4, r1
 8013f54:	b913      	cbnz	r3, 8013f5c <_fflush_r+0x10>
 8013f56:	2500      	movs	r5, #0
 8013f58:	4628      	mov	r0, r5
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	b118      	cbz	r0, 8013f66 <_fflush_r+0x1a>
 8013f5e:	6a03      	ldr	r3, [r0, #32]
 8013f60:	b90b      	cbnz	r3, 8013f66 <_fflush_r+0x1a>
 8013f62:	f7ff f8d1 	bl	8013108 <__sinit>
 8013f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d0f3      	beq.n	8013f56 <_fflush_r+0xa>
 8013f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f70:	07d0      	lsls	r0, r2, #31
 8013f72:	d404      	bmi.n	8013f7e <_fflush_r+0x32>
 8013f74:	0599      	lsls	r1, r3, #22
 8013f76:	d402      	bmi.n	8013f7e <_fflush_r+0x32>
 8013f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f7a:	f7ff faa6 	bl	80134ca <__retarget_lock_acquire_recursive>
 8013f7e:	4628      	mov	r0, r5
 8013f80:	4621      	mov	r1, r4
 8013f82:	f7ff ff5f 	bl	8013e44 <__sflush_r>
 8013f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f88:	07da      	lsls	r2, r3, #31
 8013f8a:	4605      	mov	r5, r0
 8013f8c:	d4e4      	bmi.n	8013f58 <_fflush_r+0xc>
 8013f8e:	89a3      	ldrh	r3, [r4, #12]
 8013f90:	059b      	lsls	r3, r3, #22
 8013f92:	d4e1      	bmi.n	8013f58 <_fflush_r+0xc>
 8013f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f96:	f7ff fa99 	bl	80134cc <__retarget_lock_release_recursive>
 8013f9a:	e7dd      	b.n	8013f58 <_fflush_r+0xc>

08013f9c <fiprintf>:
 8013f9c:	b40e      	push	{r1, r2, r3}
 8013f9e:	b503      	push	{r0, r1, lr}
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	ab03      	add	r3, sp, #12
 8013fa4:	4805      	ldr	r0, [pc, #20]	@ (8013fbc <fiprintf+0x20>)
 8013fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013faa:	6800      	ldr	r0, [r0, #0]
 8013fac:	9301      	str	r3, [sp, #4]
 8013fae:	f7ff fca3 	bl	80138f8 <_vfiprintf_r>
 8013fb2:	b002      	add	sp, #8
 8013fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fb8:	b003      	add	sp, #12
 8013fba:	4770      	bx	lr
 8013fbc:	200000c0 	.word	0x200000c0

08013fc0 <__swbuf_r>:
 8013fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fc2:	460e      	mov	r6, r1
 8013fc4:	4614      	mov	r4, r2
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	b118      	cbz	r0, 8013fd2 <__swbuf_r+0x12>
 8013fca:	6a03      	ldr	r3, [r0, #32]
 8013fcc:	b90b      	cbnz	r3, 8013fd2 <__swbuf_r+0x12>
 8013fce:	f7ff f89b 	bl	8013108 <__sinit>
 8013fd2:	69a3      	ldr	r3, [r4, #24]
 8013fd4:	60a3      	str	r3, [r4, #8]
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	071a      	lsls	r2, r3, #28
 8013fda:	d501      	bpl.n	8013fe0 <__swbuf_r+0x20>
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	b943      	cbnz	r3, 8013ff2 <__swbuf_r+0x32>
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	f000 f82a 	bl	801403c <__swsetup_r>
 8013fe8:	b118      	cbz	r0, 8013ff2 <__swbuf_r+0x32>
 8013fea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013fee:	4638      	mov	r0, r7
 8013ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	6922      	ldr	r2, [r4, #16]
 8013ff6:	1a98      	subs	r0, r3, r2
 8013ff8:	6963      	ldr	r3, [r4, #20]
 8013ffa:	b2f6      	uxtb	r6, r6
 8013ffc:	4283      	cmp	r3, r0
 8013ffe:	4637      	mov	r7, r6
 8014000:	dc05      	bgt.n	801400e <__swbuf_r+0x4e>
 8014002:	4621      	mov	r1, r4
 8014004:	4628      	mov	r0, r5
 8014006:	f7ff ffa1 	bl	8013f4c <_fflush_r>
 801400a:	2800      	cmp	r0, #0
 801400c:	d1ed      	bne.n	8013fea <__swbuf_r+0x2a>
 801400e:	68a3      	ldr	r3, [r4, #8]
 8014010:	3b01      	subs	r3, #1
 8014012:	60a3      	str	r3, [r4, #8]
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	1c5a      	adds	r2, r3, #1
 8014018:	6022      	str	r2, [r4, #0]
 801401a:	701e      	strb	r6, [r3, #0]
 801401c:	6962      	ldr	r2, [r4, #20]
 801401e:	1c43      	adds	r3, r0, #1
 8014020:	429a      	cmp	r2, r3
 8014022:	d004      	beq.n	801402e <__swbuf_r+0x6e>
 8014024:	89a3      	ldrh	r3, [r4, #12]
 8014026:	07db      	lsls	r3, r3, #31
 8014028:	d5e1      	bpl.n	8013fee <__swbuf_r+0x2e>
 801402a:	2e0a      	cmp	r6, #10
 801402c:	d1df      	bne.n	8013fee <__swbuf_r+0x2e>
 801402e:	4621      	mov	r1, r4
 8014030:	4628      	mov	r0, r5
 8014032:	f7ff ff8b 	bl	8013f4c <_fflush_r>
 8014036:	2800      	cmp	r0, #0
 8014038:	d0d9      	beq.n	8013fee <__swbuf_r+0x2e>
 801403a:	e7d6      	b.n	8013fea <__swbuf_r+0x2a>

0801403c <__swsetup_r>:
 801403c:	b538      	push	{r3, r4, r5, lr}
 801403e:	4b29      	ldr	r3, [pc, #164]	@ (80140e4 <__swsetup_r+0xa8>)
 8014040:	4605      	mov	r5, r0
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	460c      	mov	r4, r1
 8014046:	b118      	cbz	r0, 8014050 <__swsetup_r+0x14>
 8014048:	6a03      	ldr	r3, [r0, #32]
 801404a:	b90b      	cbnz	r3, 8014050 <__swsetup_r+0x14>
 801404c:	f7ff f85c 	bl	8013108 <__sinit>
 8014050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014054:	0719      	lsls	r1, r3, #28
 8014056:	d422      	bmi.n	801409e <__swsetup_r+0x62>
 8014058:	06da      	lsls	r2, r3, #27
 801405a:	d407      	bmi.n	801406c <__swsetup_r+0x30>
 801405c:	2209      	movs	r2, #9
 801405e:	602a      	str	r2, [r5, #0]
 8014060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014064:	81a3      	strh	r3, [r4, #12]
 8014066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801406a:	e033      	b.n	80140d4 <__swsetup_r+0x98>
 801406c:	0758      	lsls	r0, r3, #29
 801406e:	d512      	bpl.n	8014096 <__swsetup_r+0x5a>
 8014070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014072:	b141      	cbz	r1, 8014086 <__swsetup_r+0x4a>
 8014074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014078:	4299      	cmp	r1, r3
 801407a:	d002      	beq.n	8014082 <__swsetup_r+0x46>
 801407c:	4628      	mov	r0, r5
 801407e:	f7ff fa67 	bl	8013550 <_free_r>
 8014082:	2300      	movs	r3, #0
 8014084:	6363      	str	r3, [r4, #52]	@ 0x34
 8014086:	89a3      	ldrh	r3, [r4, #12]
 8014088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801408c:	81a3      	strh	r3, [r4, #12]
 801408e:	2300      	movs	r3, #0
 8014090:	6063      	str	r3, [r4, #4]
 8014092:	6923      	ldr	r3, [r4, #16]
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	89a3      	ldrh	r3, [r4, #12]
 8014098:	f043 0308 	orr.w	r3, r3, #8
 801409c:	81a3      	strh	r3, [r4, #12]
 801409e:	6923      	ldr	r3, [r4, #16]
 80140a0:	b94b      	cbnz	r3, 80140b6 <__swsetup_r+0x7a>
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80140a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140ac:	d003      	beq.n	80140b6 <__swsetup_r+0x7a>
 80140ae:	4621      	mov	r1, r4
 80140b0:	4628      	mov	r0, r5
 80140b2:	f000 f846 	bl	8014142 <__smakebuf_r>
 80140b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ba:	f013 0201 	ands.w	r2, r3, #1
 80140be:	d00a      	beq.n	80140d6 <__swsetup_r+0x9a>
 80140c0:	2200      	movs	r2, #0
 80140c2:	60a2      	str	r2, [r4, #8]
 80140c4:	6962      	ldr	r2, [r4, #20]
 80140c6:	4252      	negs	r2, r2
 80140c8:	61a2      	str	r2, [r4, #24]
 80140ca:	6922      	ldr	r2, [r4, #16]
 80140cc:	b942      	cbnz	r2, 80140e0 <__swsetup_r+0xa4>
 80140ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80140d2:	d1c5      	bne.n	8014060 <__swsetup_r+0x24>
 80140d4:	bd38      	pop	{r3, r4, r5, pc}
 80140d6:	0799      	lsls	r1, r3, #30
 80140d8:	bf58      	it	pl
 80140da:	6962      	ldrpl	r2, [r4, #20]
 80140dc:	60a2      	str	r2, [r4, #8]
 80140de:	e7f4      	b.n	80140ca <__swsetup_r+0x8e>
 80140e0:	2000      	movs	r0, #0
 80140e2:	e7f7      	b.n	80140d4 <__swsetup_r+0x98>
 80140e4:	200000c0 	.word	0x200000c0

080140e8 <abort>:
 80140e8:	b508      	push	{r3, lr}
 80140ea:	2006      	movs	r0, #6
 80140ec:	f000 f88e 	bl	801420c <raise>
 80140f0:	2001      	movs	r0, #1
 80140f2:	f7ed f99b 	bl	800142c <_exit>

080140f6 <__swhatbuf_r>:
 80140f6:	b570      	push	{r4, r5, r6, lr}
 80140f8:	460c      	mov	r4, r1
 80140fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140fe:	2900      	cmp	r1, #0
 8014100:	b096      	sub	sp, #88	@ 0x58
 8014102:	4615      	mov	r5, r2
 8014104:	461e      	mov	r6, r3
 8014106:	da0d      	bge.n	8014124 <__swhatbuf_r+0x2e>
 8014108:	89a3      	ldrh	r3, [r4, #12]
 801410a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801410e:	f04f 0100 	mov.w	r1, #0
 8014112:	bf14      	ite	ne
 8014114:	2340      	movne	r3, #64	@ 0x40
 8014116:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801411a:	2000      	movs	r0, #0
 801411c:	6031      	str	r1, [r6, #0]
 801411e:	602b      	str	r3, [r5, #0]
 8014120:	b016      	add	sp, #88	@ 0x58
 8014122:	bd70      	pop	{r4, r5, r6, pc}
 8014124:	466a      	mov	r2, sp
 8014126:	f000 f879 	bl	801421c <_fstat_r>
 801412a:	2800      	cmp	r0, #0
 801412c:	dbec      	blt.n	8014108 <__swhatbuf_r+0x12>
 801412e:	9901      	ldr	r1, [sp, #4]
 8014130:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014134:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014138:	4259      	negs	r1, r3
 801413a:	4159      	adcs	r1, r3
 801413c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014140:	e7eb      	b.n	801411a <__swhatbuf_r+0x24>

08014142 <__smakebuf_r>:
 8014142:	898b      	ldrh	r3, [r1, #12]
 8014144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014146:	079d      	lsls	r5, r3, #30
 8014148:	4606      	mov	r6, r0
 801414a:	460c      	mov	r4, r1
 801414c:	d507      	bpl.n	801415e <__smakebuf_r+0x1c>
 801414e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014152:	6023      	str	r3, [r4, #0]
 8014154:	6123      	str	r3, [r4, #16]
 8014156:	2301      	movs	r3, #1
 8014158:	6163      	str	r3, [r4, #20]
 801415a:	b003      	add	sp, #12
 801415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801415e:	ab01      	add	r3, sp, #4
 8014160:	466a      	mov	r2, sp
 8014162:	f7ff ffc8 	bl	80140f6 <__swhatbuf_r>
 8014166:	9f00      	ldr	r7, [sp, #0]
 8014168:	4605      	mov	r5, r0
 801416a:	4639      	mov	r1, r7
 801416c:	4630      	mov	r0, r6
 801416e:	f7fe fd99 	bl	8012ca4 <_malloc_r>
 8014172:	b948      	cbnz	r0, 8014188 <__smakebuf_r+0x46>
 8014174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014178:	059a      	lsls	r2, r3, #22
 801417a:	d4ee      	bmi.n	801415a <__smakebuf_r+0x18>
 801417c:	f023 0303 	bic.w	r3, r3, #3
 8014180:	f043 0302 	orr.w	r3, r3, #2
 8014184:	81a3      	strh	r3, [r4, #12]
 8014186:	e7e2      	b.n	801414e <__smakebuf_r+0xc>
 8014188:	89a3      	ldrh	r3, [r4, #12]
 801418a:	6020      	str	r0, [r4, #0]
 801418c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014190:	81a3      	strh	r3, [r4, #12]
 8014192:	9b01      	ldr	r3, [sp, #4]
 8014194:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014198:	b15b      	cbz	r3, 80141b2 <__smakebuf_r+0x70>
 801419a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801419e:	4630      	mov	r0, r6
 80141a0:	f000 f84e 	bl	8014240 <_isatty_r>
 80141a4:	b128      	cbz	r0, 80141b2 <__smakebuf_r+0x70>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	f023 0303 	bic.w	r3, r3, #3
 80141ac:	f043 0301 	orr.w	r3, r3, #1
 80141b0:	81a3      	strh	r3, [r4, #12]
 80141b2:	89a3      	ldrh	r3, [r4, #12]
 80141b4:	431d      	orrs	r5, r3
 80141b6:	81a5      	strh	r5, [r4, #12]
 80141b8:	e7cf      	b.n	801415a <__smakebuf_r+0x18>

080141ba <_raise_r>:
 80141ba:	291f      	cmp	r1, #31
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4605      	mov	r5, r0
 80141c0:	460c      	mov	r4, r1
 80141c2:	d904      	bls.n	80141ce <_raise_r+0x14>
 80141c4:	2316      	movs	r3, #22
 80141c6:	6003      	str	r3, [r0, #0]
 80141c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80141cc:	bd38      	pop	{r3, r4, r5, pc}
 80141ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80141d0:	b112      	cbz	r2, 80141d8 <_raise_r+0x1e>
 80141d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141d6:	b94b      	cbnz	r3, 80141ec <_raise_r+0x32>
 80141d8:	4628      	mov	r0, r5
 80141da:	f000 f853 	bl	8014284 <_getpid_r>
 80141de:	4622      	mov	r2, r4
 80141e0:	4601      	mov	r1, r0
 80141e2:	4628      	mov	r0, r5
 80141e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141e8:	f000 b83a 	b.w	8014260 <_kill_r>
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d00a      	beq.n	8014206 <_raise_r+0x4c>
 80141f0:	1c59      	adds	r1, r3, #1
 80141f2:	d103      	bne.n	80141fc <_raise_r+0x42>
 80141f4:	2316      	movs	r3, #22
 80141f6:	6003      	str	r3, [r0, #0]
 80141f8:	2001      	movs	r0, #1
 80141fa:	e7e7      	b.n	80141cc <_raise_r+0x12>
 80141fc:	2100      	movs	r1, #0
 80141fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014202:	4620      	mov	r0, r4
 8014204:	4798      	blx	r3
 8014206:	2000      	movs	r0, #0
 8014208:	e7e0      	b.n	80141cc <_raise_r+0x12>
	...

0801420c <raise>:
 801420c:	4b02      	ldr	r3, [pc, #8]	@ (8014218 <raise+0xc>)
 801420e:	4601      	mov	r1, r0
 8014210:	6818      	ldr	r0, [r3, #0]
 8014212:	f7ff bfd2 	b.w	80141ba <_raise_r>
 8014216:	bf00      	nop
 8014218:	200000c0 	.word	0x200000c0

0801421c <_fstat_r>:
 801421c:	b538      	push	{r3, r4, r5, lr}
 801421e:	4d07      	ldr	r5, [pc, #28]	@ (801423c <_fstat_r+0x20>)
 8014220:	2300      	movs	r3, #0
 8014222:	4604      	mov	r4, r0
 8014224:	4608      	mov	r0, r1
 8014226:	4611      	mov	r1, r2
 8014228:	602b      	str	r3, [r5, #0]
 801422a:	f7ed f94f 	bl	80014cc <_fstat>
 801422e:	1c43      	adds	r3, r0, #1
 8014230:	d102      	bne.n	8014238 <_fstat_r+0x1c>
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	b103      	cbz	r3, 8014238 <_fstat_r+0x1c>
 8014236:	6023      	str	r3, [r4, #0]
 8014238:	bd38      	pop	{r3, r4, r5, pc}
 801423a:	bf00      	nop
 801423c:	2000dc08 	.word	0x2000dc08

08014240 <_isatty_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4d06      	ldr	r5, [pc, #24]	@ (801425c <_isatty_r+0x1c>)
 8014244:	2300      	movs	r3, #0
 8014246:	4604      	mov	r4, r0
 8014248:	4608      	mov	r0, r1
 801424a:	602b      	str	r3, [r5, #0]
 801424c:	f7ed f94e 	bl	80014ec <_isatty>
 8014250:	1c43      	adds	r3, r0, #1
 8014252:	d102      	bne.n	801425a <_isatty_r+0x1a>
 8014254:	682b      	ldr	r3, [r5, #0]
 8014256:	b103      	cbz	r3, 801425a <_isatty_r+0x1a>
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	bd38      	pop	{r3, r4, r5, pc}
 801425c:	2000dc08 	.word	0x2000dc08

08014260 <_kill_r>:
 8014260:	b538      	push	{r3, r4, r5, lr}
 8014262:	4d07      	ldr	r5, [pc, #28]	@ (8014280 <_kill_r+0x20>)
 8014264:	2300      	movs	r3, #0
 8014266:	4604      	mov	r4, r0
 8014268:	4608      	mov	r0, r1
 801426a:	4611      	mov	r1, r2
 801426c:	602b      	str	r3, [r5, #0]
 801426e:	f7ed f8cd 	bl	800140c <_kill>
 8014272:	1c43      	adds	r3, r0, #1
 8014274:	d102      	bne.n	801427c <_kill_r+0x1c>
 8014276:	682b      	ldr	r3, [r5, #0]
 8014278:	b103      	cbz	r3, 801427c <_kill_r+0x1c>
 801427a:	6023      	str	r3, [r4, #0]
 801427c:	bd38      	pop	{r3, r4, r5, pc}
 801427e:	bf00      	nop
 8014280:	2000dc08 	.word	0x2000dc08

08014284 <_getpid_r>:
 8014284:	f7ed b8ba 	b.w	80013fc <_getpid>

08014288 <_init>:
 8014288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801428a:	bf00      	nop
 801428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801428e:	bc08      	pop	{r3}
 8014290:	469e      	mov	lr, r3
 8014292:	4770      	bx	lr

08014294 <_fini>:
 8014294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014296:	bf00      	nop
 8014298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801429a:	bc08      	pop	{r3}
 801429c:	469e      	mov	lr, r3
 801429e:	4770      	bx	lr
