
OdometryPubSub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  08015680  08015680  00016680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801649c  0801649c  00018234  2**0
                  CONTENTS
  4 .ARM          00000008  0801649c  0801649c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164a4  080164a4  00018234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080164a4  080164a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080164ac  080164ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080164b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dbac  20000238  080166e4  00018238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dde4  080166e4  00018de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156ca  00000000  00000000  00018264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362e  00000000  00000000  0002d92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00030f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb3  00000000  00000000  00032010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008452  00000000  00000000  00032cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ab7  00000000  00000000  0003b115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5ac  00000000  00000000  0004fbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000eb178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000eb1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015668 	.word	0x08015668

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08015668 	.word	0x08015668

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_ldivmod>:
 8000628:	b97b      	cbnz	r3, 800064a <__aeabi_ldivmod+0x22>
 800062a:	b972      	cbnz	r2, 800064a <__aeabi_ldivmod+0x22>
 800062c:	2900      	cmp	r1, #0
 800062e:	bfbe      	ittt	lt
 8000630:	2000      	movlt	r0, #0
 8000632:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000636:	e006      	blt.n	8000646 <__aeabi_ldivmod+0x1e>
 8000638:	bf08      	it	eq
 800063a:	2800      	cmpeq	r0, #0
 800063c:	bf1c      	itt	ne
 800063e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000642:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000646:	f000 b9b5 	b.w	80009b4 <__aeabi_idiv0>
 800064a:	f1ad 0c08 	sub.w	ip, sp, #8
 800064e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000652:	2900      	cmp	r1, #0
 8000654:	db09      	blt.n	800066a <__aeabi_ldivmod+0x42>
 8000656:	2b00      	cmp	r3, #0
 8000658:	db1a      	blt.n	8000690 <__aeabi_ldivmod+0x68>
 800065a:	f000 f84d 	bl	80006f8 <__udivmoddi4>
 800065e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000666:	b004      	add	sp, #16
 8000668:	4770      	bx	lr
 800066a:	4240      	negs	r0, r0
 800066c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	db1b      	blt.n	80006ac <__aeabi_ldivmod+0x84>
 8000674:	f000 f840 	bl	80006f8 <__udivmoddi4>
 8000678:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000680:	b004      	add	sp, #16
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	4252      	negs	r2, r2
 800068a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800068e:	4770      	bx	lr
 8000690:	4252      	negs	r2, r2
 8000692:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000696:	f000 f82f 	bl	80006f8 <__udivmoddi4>
 800069a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a2:	b004      	add	sp, #16
 80006a4:	4240      	negs	r0, r0
 80006a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006aa:	4770      	bx	lr
 80006ac:	4252      	negs	r2, r2
 80006ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b2:	f000 f821 	bl	80006f8 <__udivmoddi4>
 80006b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006be:	b004      	add	sp, #16
 80006c0:	4252      	negs	r2, r2
 80006c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006c6:	4770      	bx	lr

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80006dc:	f000 b96a 	b.w	80009b4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	460c      	mov	r4, r1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d14e      	bne.n	80007a2 <__udivmoddi4+0xaa>
 8000704:	4694      	mov	ip, r2
 8000706:	458c      	cmp	ip, r1
 8000708:	4686      	mov	lr, r0
 800070a:	fab2 f282 	clz	r2, r2
 800070e:	d962      	bls.n	80007d6 <__udivmoddi4+0xde>
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	4091      	lsls	r1, r2
 8000718:	fa20 f303 	lsr.w	r3, r0, r3
 800071c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000720:	4319      	orrs	r1, r3
 8000722:	fa00 fe02 	lsl.w	lr, r0, r2
 8000726:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800072a:	fa1f f68c 	uxth.w	r6, ip
 800072e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000732:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000736:	fb07 1114 	mls	r1, r7, r4, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb04 f106 	mul.w	r1, r4, r6
 8000742:	4299      	cmp	r1, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x64>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800074e:	f080 8112 	bcs.w	8000976 <__udivmoddi4+0x27e>
 8000752:	4299      	cmp	r1, r3
 8000754:	f240 810f 	bls.w	8000976 <__udivmoddi4+0x27e>
 8000758:	3c02      	subs	r4, #2
 800075a:	4463      	add	r3, ip
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	fa1f f38e 	uxth.w	r3, lr
 8000762:	fbb1 f0f7 	udiv	r0, r1, r7
 8000766:	fb07 1110 	mls	r1, r7, r0, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb00 f606 	mul.w	r6, r0, r6
 8000772:	429e      	cmp	r6, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x94>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800077e:	f080 80fc 	bcs.w	800097a <__udivmoddi4+0x282>
 8000782:	429e      	cmp	r6, r3
 8000784:	f240 80f9 	bls.w	800097a <__udivmoddi4+0x282>
 8000788:	4463      	add	r3, ip
 800078a:	3802      	subs	r0, #2
 800078c:	1b9b      	subs	r3, r3, r6
 800078e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000792:	2100      	movs	r1, #0
 8000794:	b11d      	cbz	r5, 800079e <__udivmoddi4+0xa6>
 8000796:	40d3      	lsrs	r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	e9c5 3200 	strd	r3, r2, [r5]
 800079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d905      	bls.n	80007b2 <__udivmoddi4+0xba>
 80007a6:	b10d      	cbz	r5, 80007ac <__udivmoddi4+0xb4>
 80007a8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ac:	2100      	movs	r1, #0
 80007ae:	4608      	mov	r0, r1
 80007b0:	e7f5      	b.n	800079e <__udivmoddi4+0xa6>
 80007b2:	fab3 f183 	clz	r1, r3
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d146      	bne.n	8000848 <__udivmoddi4+0x150>
 80007ba:	42a3      	cmp	r3, r4
 80007bc:	d302      	bcc.n	80007c4 <__udivmoddi4+0xcc>
 80007be:	4290      	cmp	r0, r2
 80007c0:	f0c0 80f0 	bcc.w	80009a4 <__udivmoddi4+0x2ac>
 80007c4:	1a86      	subs	r6, r0, r2
 80007c6:	eb64 0303 	sbc.w	r3, r4, r3
 80007ca:	2001      	movs	r0, #1
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d0e6      	beq.n	800079e <__udivmoddi4+0xa6>
 80007d0:	e9c5 6300 	strd	r6, r3, [r5]
 80007d4:	e7e3      	b.n	800079e <__udivmoddi4+0xa6>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	f040 8090 	bne.w	80008fc <__udivmoddi4+0x204>
 80007dc:	eba1 040c 	sub.w	r4, r1, ip
 80007e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007e4:	fa1f f78c 	uxth.w	r7, ip
 80007e8:	2101      	movs	r1, #1
 80007ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f2:	fb08 4416 	mls	r4, r8, r6, r4
 80007f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007fa:	fb07 f006 	mul.w	r0, r7, r6
 80007fe:	4298      	cmp	r0, r3
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x11c>
 8000802:	eb1c 0303 	adds.w	r3, ip, r3
 8000806:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x11a>
 800080c:	4298      	cmp	r0, r3
 800080e:	f200 80cd 	bhi.w	80009ac <__udivmoddi4+0x2b4>
 8000812:	4626      	mov	r6, r4
 8000814:	1a1c      	subs	r4, r3, r0
 8000816:	fa1f f38e 	uxth.w	r3, lr
 800081a:	fbb4 f0f8 	udiv	r0, r4, r8
 800081e:	fb08 4410 	mls	r4, r8, r0, r4
 8000822:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000826:	fb00 f707 	mul.w	r7, r0, r7
 800082a:	429f      	cmp	r7, r3
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x148>
 800082e:	eb1c 0303 	adds.w	r3, ip, r3
 8000832:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x146>
 8000838:	429f      	cmp	r7, r3
 800083a:	f200 80b0 	bhi.w	800099e <__udivmoddi4+0x2a6>
 800083e:	4620      	mov	r0, r4
 8000840:	1bdb      	subs	r3, r3, r7
 8000842:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000846:	e7a5      	b.n	8000794 <__udivmoddi4+0x9c>
 8000848:	f1c1 0620 	rsb	r6, r1, #32
 800084c:	408b      	lsls	r3, r1
 800084e:	fa22 f706 	lsr.w	r7, r2, r6
 8000852:	431f      	orrs	r7, r3
 8000854:	fa20 fc06 	lsr.w	ip, r0, r6
 8000858:	fa04 f301 	lsl.w	r3, r4, r1
 800085c:	ea43 030c 	orr.w	r3, r3, ip
 8000860:	40f4      	lsrs	r4, r6
 8000862:	fa00 f801 	lsl.w	r8, r0, r1
 8000866:	0c38      	lsrs	r0, r7, #16
 8000868:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800086c:	fbb4 fef0 	udiv	lr, r4, r0
 8000870:	fa1f fc87 	uxth.w	ip, r7
 8000874:	fb00 441e 	mls	r4, r0, lr, r4
 8000878:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800087c:	fb0e f90c 	mul.w	r9, lr, ip
 8000880:	45a1      	cmp	r9, r4
 8000882:	fa02 f201 	lsl.w	r2, r2, r1
 8000886:	d90a      	bls.n	800089e <__udivmoddi4+0x1a6>
 8000888:	193c      	adds	r4, r7, r4
 800088a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800088e:	f080 8084 	bcs.w	800099a <__udivmoddi4+0x2a2>
 8000892:	45a1      	cmp	r9, r4
 8000894:	f240 8081 	bls.w	800099a <__udivmoddi4+0x2a2>
 8000898:	f1ae 0e02 	sub.w	lr, lr, #2
 800089c:	443c      	add	r4, r7
 800089e:	eba4 0409 	sub.w	r4, r4, r9
 80008a2:	fa1f f983 	uxth.w	r9, r3
 80008a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008aa:	fb00 4413 	mls	r4, r0, r3, r4
 80008ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008b6:	45a4      	cmp	ip, r4
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x1d2>
 80008ba:	193c      	adds	r4, r7, r4
 80008bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80008c0:	d267      	bcs.n	8000992 <__udivmoddi4+0x29a>
 80008c2:	45a4      	cmp	ip, r4
 80008c4:	d965      	bls.n	8000992 <__udivmoddi4+0x29a>
 80008c6:	3b02      	subs	r3, #2
 80008c8:	443c      	add	r4, r7
 80008ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ce:	fba0 9302 	umull	r9, r3, r0, r2
 80008d2:	eba4 040c 	sub.w	r4, r4, ip
 80008d6:	429c      	cmp	r4, r3
 80008d8:	46ce      	mov	lr, r9
 80008da:	469c      	mov	ip, r3
 80008dc:	d351      	bcc.n	8000982 <__udivmoddi4+0x28a>
 80008de:	d04e      	beq.n	800097e <__udivmoddi4+0x286>
 80008e0:	b155      	cbz	r5, 80008f8 <__udivmoddi4+0x200>
 80008e2:	ebb8 030e 	subs.w	r3, r8, lr
 80008e6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ea:	fa04 f606 	lsl.w	r6, r4, r6
 80008ee:	40cb      	lsrs	r3, r1
 80008f0:	431e      	orrs	r6, r3
 80008f2:	40cc      	lsrs	r4, r1
 80008f4:	e9c5 6400 	strd	r6, r4, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	e750      	b.n	800079e <__udivmoddi4+0xa6>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f103 	lsr.w	r1, r0, r3
 8000904:	fa0c fc02 	lsl.w	ip, ip, r2
 8000908:	fa24 f303 	lsr.w	r3, r4, r3
 800090c:	4094      	lsls	r4, r2
 800090e:	430c      	orrs	r4, r1
 8000910:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000914:	fa00 fe02 	lsl.w	lr, r0, r2
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3110 	mls	r1, r8, r0, r3
 8000924:	0c23      	lsrs	r3, r4, #16
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f107 	mul.w	r1, r0, r7
 800092e:	4299      	cmp	r1, r3
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x24c>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800093a:	d22c      	bcs.n	8000996 <__udivmoddi4+0x29e>
 800093c:	4299      	cmp	r1, r3
 800093e:	d92a      	bls.n	8000996 <__udivmoddi4+0x29e>
 8000940:	3802      	subs	r0, #2
 8000942:	4463      	add	r3, ip
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b2a4      	uxth	r4, r4
 8000948:	fbb3 f1f8 	udiv	r1, r3, r8
 800094c:	fb08 3311 	mls	r3, r8, r1, r3
 8000950:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000954:	fb01 f307 	mul.w	r3, r1, r7
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <__udivmoddi4+0x276>
 800095c:	eb1c 0404 	adds.w	r4, ip, r4
 8000960:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000964:	d213      	bcs.n	800098e <__udivmoddi4+0x296>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d911      	bls.n	800098e <__udivmoddi4+0x296>
 800096a:	3902      	subs	r1, #2
 800096c:	4464      	add	r4, ip
 800096e:	1ae4      	subs	r4, r4, r3
 8000970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000974:	e739      	b.n	80007ea <__udivmoddi4+0xf2>
 8000976:	4604      	mov	r4, r0
 8000978:	e6f0      	b.n	800075c <__udivmoddi4+0x64>
 800097a:	4608      	mov	r0, r1
 800097c:	e706      	b.n	800078c <__udivmoddi4+0x94>
 800097e:	45c8      	cmp	r8, r9
 8000980:	d2ae      	bcs.n	80008e0 <__udivmoddi4+0x1e8>
 8000982:	ebb9 0e02 	subs.w	lr, r9, r2
 8000986:	eb63 0c07 	sbc.w	ip, r3, r7
 800098a:	3801      	subs	r0, #1
 800098c:	e7a8      	b.n	80008e0 <__udivmoddi4+0x1e8>
 800098e:	4631      	mov	r1, r6
 8000990:	e7ed      	b.n	800096e <__udivmoddi4+0x276>
 8000992:	4603      	mov	r3, r0
 8000994:	e799      	b.n	80008ca <__udivmoddi4+0x1d2>
 8000996:	4630      	mov	r0, r6
 8000998:	e7d4      	b.n	8000944 <__udivmoddi4+0x24c>
 800099a:	46d6      	mov	lr, sl
 800099c:	e77f      	b.n	800089e <__udivmoddi4+0x1a6>
 800099e:	4463      	add	r3, ip
 80009a0:	3802      	subs	r0, #2
 80009a2:	e74d      	b.n	8000840 <__udivmoddi4+0x148>
 80009a4:	4606      	mov	r6, r0
 80009a6:	4623      	mov	r3, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	e70f      	b.n	80007cc <__udivmoddi4+0xd4>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	e730      	b.n	8000814 <__udivmoddi4+0x11c>
 80009b2:	bf00      	nop

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009c4:	f005 f83a 	bl	8005a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <pvPortMallocMicroROS+0x17c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009d0:	f000 f986 	bl	8000ce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009d4:	4b58      	ldr	r3, [pc, #352]	@ (8000b38 <pvPortMallocMicroROS+0x180>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4013      	ands	r3, r2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f040 8090 	bne.w	8000b02 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d01e      	beq.n	8000a26 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009e8:	2208      	movs	r2, #8
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d015      	beq.n	8000a26 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f023 0307 	bic.w	r3, r3, #7
 8000a00:	3308      	adds	r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00b      	beq.n	8000a26 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a12:	f383 8811 	msr	BASEPRI, r3
 8000a16:	f3bf 8f6f 	isb	sy
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	e7fd      	b.n	8000a22 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d06a      	beq.n	8000b02 <pvPortMallocMicroROS+0x14a>
 8000a2c:	4b43      	ldr	r3, [pc, #268]	@ (8000b3c <pvPortMallocMicroROS+0x184>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d865      	bhi.n	8000b02 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a36:	4b42      	ldr	r3, [pc, #264]	@ (8000b40 <pvPortMallocMicroROS+0x188>)
 8000a38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a3a:	4b41      	ldr	r3, [pc, #260]	@ (8000b40 <pvPortMallocMicroROS+0x188>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a40:	e004      	b.n	8000a4c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d903      	bls.n	8000a5e <pvPortMallocMicroROS+0xa6>
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f1      	bne.n	8000a42 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a5e:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <pvPortMallocMicroROS+0x17c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d04c      	beq.n	8000b02 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4413      	add	r3, r2
 8000a70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	1ad2      	subs	r2, r2, r3
 8000a82:	2308      	movs	r3, #8
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d920      	bls.n	8000acc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00b      	beq.n	8000ab4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aa0:	f383 8811 	msr	BASEPRI, r3
 8000aa4:	f3bf 8f6f 	isb	sy
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	613b      	str	r3, [r7, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1ad2      	subs	r2, r2, r3
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ac6:	69b8      	ldr	r0, [r7, #24]
 8000ac8:	f000 f96c 	bl	8000da4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <pvPortMallocMicroROS+0x184>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <pvPortMallocMicroROS+0x184>)
 8000ad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <pvPortMallocMicroROS+0x184>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <pvPortMallocMicroROS+0x18c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d203      	bcs.n	8000aee <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <pvPortMallocMicroROS+0x184>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a16      	ldr	r2, [pc, #88]	@ (8000b44 <pvPortMallocMicroROS+0x18c>)
 8000aec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <pvPortMallocMicroROS+0x180>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b02:	f004 ffa9 	bl	8005a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00b      	beq.n	8000b28 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b14:	f383 8811 	msr	BASEPRI, r3
 8000b18:	f3bf 8f6f 	isb	sy
 8000b1c:	f3bf 8f4f 	dsb	sy
 8000b20:	60fb      	str	r3, [r7, #12]
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b28:	69fb      	ldr	r3, [r7, #28]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3728      	adds	r7, #40	@ 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20003e5c 	.word	0x20003e5c
 8000b38:	20003e68 	.word	0x20003e68
 8000b3c:	20003e60 	.word	0x20003e60
 8000b40:	20003e54 	.word	0x20003e54
 8000b44:	20003e64 	.word	0x20003e64

08000b48 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d04a      	beq.n	8000bf0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4413      	add	r3, r2
 8000b62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <vPortFreeMicroROS+0xb0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10b      	bne.n	8000b8e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b7a:	f383 8811 	msr	BASEPRI, r3
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	60fb      	str	r3, [r7, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	e7fd      	b.n	8000b8a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b9a:	f383 8811 	msr	BASEPRI, r3
 8000b9e:	f3bf 8f6f 	isb	sy
 8000ba2:	f3bf 8f4f 	dsb	sy
 8000ba6:	60bb      	str	r3, [r7, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <vPortFreeMicroROS+0xb0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d019      	beq.n	8000bf0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d115      	bne.n	8000bf0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <vPortFreeMicroROS+0xb0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bd4:	f004 ff32 	bl	8005a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <vPortFreeMicroROS+0xb4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <vPortFreeMicroROS+0xb4>)
 8000be4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000be6:	6938      	ldr	r0, [r7, #16]
 8000be8:	f000 f8dc 	bl	8000da4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bec:	f004 ff34 	bl	8005a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20003e68 	.word	0x20003e68
 8000bfc:	20003e60 	.word	0x20003e60

08000c00 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	425b      	negs	r3, r3
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	4413      	add	r3, r2
 8000c14:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <getBlockSize+0x38>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

	return count;
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20003e68 	.word	0x20003e68

08000c3c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c46:	f004 fef9 	bl	8005a3c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f7ff feb4 	bl	80009b8 <pvPortMallocMicroROS>
 8000c50:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d017      	beq.n	8000c88 <pvPortReallocMicroROS+0x4c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d014      	beq.n	8000c88 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffce 	bl	8000c00 <getBlockSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2208      	movs	r2, #8
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d201      	bcs.n	8000c78 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	68b8      	ldr	r0, [r7, #8]
 8000c7e:	f013 fe20 	bl	80148c2 <memcpy>

		vPortFreeMicroROS(pv);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff60 	bl	8000b48 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c88:	f004 fee6 	bl	8005a58 <xTaskResumeAll>

	return newmem;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ca0:	f004 fecc 	bl	8005a3c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff fe82 	bl	80009b8 <pvPortMallocMicroROS>
 8000cb4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cba:	e004      	b.n	8000cc6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	613a      	str	r2, [r7, #16]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	617a      	str	r2, [r7, #20]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f5      	bne.n	8000cbc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cd0:	f004 fec2 	bl	8005a58 <xTaskResumeAll>
  	return mem;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000ce6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000cea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <prvHeapInit+0xac>)
 8000cee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00c      	beq.n	8000d14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 0307 	bic.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <prvHeapInit+0xac>)
 8000d10:	4413      	add	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d18:	4a1d      	ldr	r2, [pc, #116]	@ (8000d90 <prvHeapInit+0xb0>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <prvHeapInit+0xb0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f023 0307 	bic.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a15      	ldr	r2, [pc, #84]	@ (8000d94 <prvHeapInit+0xb4>)
 8000d40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <prvHeapInit+0xb4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <prvHeapInit+0xb4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	1ad2      	subs	r2, r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <prvHeapInit+0xb4>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <prvHeapInit+0xb8>)
 8000d6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <prvHeapInit+0xbc>)
 8000d76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <prvHeapInit+0xc0>)
 8000d7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20000254 	.word	0x20000254
 8000d90:	20003e54 	.word	0x20003e54
 8000d94:	20003e5c 	.word	0x20003e5c
 8000d98:	20003e64 	.word	0x20003e64
 8000d9c:	20003e60 	.word	0x20003e60
 8000da0:	20003e68 	.word	0x20003e68

08000da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dac:	4b28      	ldr	r3, [pc, #160]	@ (8000e50 <prvInsertBlockIntoFreeList+0xac>)
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e002      	b.n	8000db8 <prvInsertBlockIntoFreeList+0x14>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d8f7      	bhi.n	8000db2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d108      	bne.n	8000de6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	441a      	add	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	441a      	add	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d118      	bne.n	8000e2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <prvInsertBlockIntoFreeList+0xb0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d00d      	beq.n	8000e22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	441a      	add	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e008      	b.n	8000e34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <prvInsertBlockIntoFreeList+0xb0>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e003      	b.n	8000e34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d002      	beq.n	8000e42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20003e54 	.word	0x20003e54
 8000e54:	20003e5c 	.word	0x20003e5c

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fe7e 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f81a 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f8d6 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e68:	f000 f8ac 	bl	8000fc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e6c:	f000 f880 	bl	8000f70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e70:	f003 fcc6 	bl	8004800 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e74:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <main+0x34>)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <main+0x38>)
 8000e7a:	f003 fd0b 	bl	8004894 <osThreadNew>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <main+0x3c>)
 8000e82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e84:	f003 fce0 	bl	8004848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <main+0x30>
 8000e8c:	080156e8 	.word	0x080156e8
 8000e90:	080011a9 	.word	0x080011a9
 8000e94:	20003f74 	.word	0x20003f74

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	@ 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2230      	movs	r2, #48	@ 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f013 fc42 	bl	8014730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ee4:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd3e 	bl	80029a4 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f2e:	f000 f9cf 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 ffa0 	bl	8002e94 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f5a:	f000 f9b9 	bl	80012d0 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f002 f994 	bl	80032d4 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f98d 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20003e6c 	.word	0x20003e6c
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <MX_DMA_Init+0x4c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <MX_DMA_Init+0x4c>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_DMA_Init+0x4c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	2010      	movs	r0, #16
 8000fec:	f000 ff03 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ff0:	2010      	movs	r0, #16
 8000ff2:	f000 ff1c 	bl	8001e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	2011      	movs	r0, #17
 8000ffc:	f000 fefb 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001000:	2011      	movs	r0, #17
 8001002:	f000 ff14 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a2c      	ldr	r2, [pc, #176]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2120      	movs	r1, #32
 800109e:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <MX_GPIO_Init+0xd4>)
 80010a0:	f001 fc66 	bl	8002970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480c      	ldr	r0, [pc, #48]	@ (80010ec <MX_GPIO_Init+0xd8>)
 80010bc:	f001 fad4 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c0:	2320      	movs	r3, #32
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_GPIO_Init+0xd4>)
 80010d8:	f001 fac6 	bl	8002668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020800 	.word	0x40020800

080010f0 <subscription_callback>:





void subscription_callback(const void * msgin){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	const geometry_msgs__msg__Twist * incoming_msg = (const geometry_msgs__msg__Twist *)msgin;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	60fb      	str	r3, [r7, #12]

	    // Create a local copy for publishing to avoid corruption
	    odometry_msg.linear.x = incoming_msg->linear.x * 2;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f7ff f8d9 	bl	80002bc <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4924      	ldr	r1, [pc, #144]	@ (80011a0 <subscription_callback+0xb0>)
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
	    odometry_msg.linear.y = incoming_msg->linear.y * 2;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	f7ff f8cd 	bl	80002bc <__adddf3>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	491e      	ldr	r1, [pc, #120]	@ (80011a0 <subscription_callback+0xb0>)
 8001128:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    odometry_msg.linear.z = incoming_msg->linear.z * 2;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	f7ff f8c1 	bl	80002bc <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4918      	ldr	r1, [pc, #96]	@ (80011a0 <subscription_callback+0xb0>)
 8001140:	e9c1 2304 	strd	r2, r3, [r1, #16]

	    odometry_msg.angular.x = incoming_msg->angular.x * 2;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	f7ff f8b5 	bl	80002bc <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4912      	ldr	r1, [pc, #72]	@ (80011a0 <subscription_callback+0xb0>)
 8001158:	e9c1 2306 	strd	r2, r3, [r1, #24]
	    odometry_msg.angular.y = incoming_msg->angular.y * 2;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	f7ff f8a9 	bl	80002bc <__adddf3>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <subscription_callback+0xb0>)
 8001170:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    odometry_msg.angular.z = incoming_msg->angular.z * 2;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	f7ff f89d 	bl	80002bc <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <subscription_callback+0xb0>)
 8001188:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	    // Publish modified message
	    rcl_ret_t ret = rcl_publish(&odometry_publisher, &odometry_msg, NULL);
 800118c:	2200      	movs	r2, #0
 800118e:	4904      	ldr	r1, [pc, #16]	@ (80011a0 <subscription_callback+0xb0>)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <subscription_callback+0xb4>)
 8001192:	f007 fcc7 	bl	8008b24 <rcl_publish>
 8001196:	60b8      	str	r0, [r7, #8]
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20003f80 	.word	0x20003f80
 80011a4:	20003f78 	.word	0x20003f78

080011a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0d4      	sub	sp, #336	@ 0x150
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011b6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <StartDefaultTask+0xec>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <StartDefaultTask+0xf0>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <StartDefaultTask+0xf4>)
 80011c2:	4a37      	ldr	r2, [pc, #220]	@ (80012a0 <StartDefaultTask+0xf8>)
 80011c4:	4937      	ldr	r1, [pc, #220]	@ (80012a4 <StartDefaultTask+0xfc>)
 80011c6:	2001      	movs	r0, #1
 80011c8:	f008 fcb2 	bl	8009b30 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80011cc:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80011d0:	4618      	mov	r0, r3
 80011d2:	f008 fbfb 	bl	80099cc <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80011d6:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <StartDefaultTask+0x100>)
 80011d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <StartDefaultTask+0x104>)
 80011de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80011e2:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <StartDefaultTask+0x108>)
 80011e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80011e8:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <StartDefaultTask+0x10c>)
 80011ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	      rclc_support_t support;
	      rclc_executor_t executor;
	      rcl_allocator_t allocator;
	      rcl_node_t nodesub;

	      allocator = rcl_get_default_allocator();
 80011ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011f2:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 80011f6:	463b      	mov	r3, r7
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 fbf5 	bl	80099e8 <rcutils_get_default_allocator>
 80011fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001202:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 8001210:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001214:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	f008 fae0 	bl	80097e0 <rclc_support_init>
	      rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001224:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8001228:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800122c:	2201      	movs	r2, #1
 800122e:	f008 f807 	bl	8009240 <rclc_executor_init>

	      	    // create node
	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 8001232:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001236:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800123a:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <StartDefaultTask+0x110>)
 800123c:	491f      	ldr	r1, [pc, #124]	@ (80012bc <StartDefaultTask+0x114>)
 800123e:	f008 fb19 	bl	8009874 <rclc_node_init_default>

	      	    // create subscription
	      rclc_subscription_init_default(
 8001242:	f006 f889 	bl	8007358 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001246:	4602      	mov	r2, r0
 8001248:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800124c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <StartDefaultTask+0x118>)
 8001252:	f008 fb7f 	bl	8009954 <rclc_subscription_init_default>
	      	        &subscriber,
	      	        &nodesub,
	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	      	        "stm32_sub");
	      	    rclc_executor_add_subscription(
 8001256:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800125a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800125e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001262:	2300      	movs	r3, #0
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <StartDefaultTask+0x11c>)
 8001268:	f008 f85a 	bl	8009320 <rclc_executor_add_subscription>

	      	  //create init_options


	      	      // Initialize the publisher with Odometry message type
	      	      rclc_publisher_init_default(
 800126c:	f006 f874 	bl	8007358 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001270:	4602      	mov	r2, r0
 8001272:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <StartDefaultTask+0x120>)
 8001278:	4814      	ldr	r0, [pc, #80]	@ (80012cc <StartDefaultTask+0x124>)
 800127a:	f008 fb37 	bl	80098ec <rclc_publisher_init_default>
	      	          "stm32_pub"
	      	      );

	  while(1)
	  {
		  rclc_executor_spin(&executor);
 800127e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001282:	4618      	mov	r0, r3
 8001284:	f008 fa6c 	bl	8009760 <rclc_executor_spin>
		  osDelay(10);
 8001288:	200a      	movs	r0, #10
 800128a:	f003 fb95 	bl	80049b8 <osDelay>
		  rclc_executor_spin(&executor);
 800128e:	bf00      	nop
 8001290:	e7f5      	b.n	800127e <StartDefaultTask+0xd6>
 8001292:	bf00      	nop
 8001294:	08001a61 	.word	0x08001a61
 8001298:	080019f9 	.word	0x080019f9
 800129c:	080019d9 	.word	0x080019d9
 80012a0:	080019ad 	.word	0x080019ad
 80012a4:	20003e6c 	.word	0x20003e6c
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	08001321 	.word	0x08001321
 80012b0:	08001359 	.word	0x08001359
 80012b4:	080013c5 	.word	0x080013c5
 80012b8:	0801568c 	.word	0x0801568c
 80012bc:	08015690 	.word	0x08015690
 80012c0:	0801569c 	.word	0x0801569c
 80012c4:	080010f1 	.word	0x080010f1
 80012c8:	080156a8 	.word	0x080156a8
 80012cc:	20003f78 	.word	0x20003f78

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <microros_allocate+0x3c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <microros_allocate+0x3c>)
 80012f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <microros_allocate+0x40>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <microros_allocate+0x40>)
 8001304:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fb56 	bl	80009b8 <pvPortMallocMicroROS>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20003fb0 	.word	0x20003fb0
 800131c:	20003fb4 	.word	0x20003fb4

08001320 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fc65 	bl	8000c00 <getBlockSize>
 8001336:	4603      	mov	r3, r0
 8001338:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <microros_deallocate+0x34>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <microros_deallocate+0x34>)
 8001342:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fbff 	bl	8000b48 <vPortFreeMicroROS>
  }
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20003fb4 	.word	0x20003fb4

08001358 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <microros_reallocate+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <microros_reallocate+0x64>)
 8001372:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <microros_reallocate+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	461a      	mov	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <microros_reallocate+0x68>)
 8001382:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d104      	bne.n	8001394 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f7ff fb14 	bl	80009b8 <pvPortMallocMicroROS>
 8001390:	4603      	mov	r3, r0
 8001392:	e00e      	b.n	80013b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fc33 	bl	8000c00 <getBlockSize>
 800139a:	4603      	mov	r3, r0
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <microros_reallocate+0x68>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <microros_reallocate+0x68>)
 80013a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff fc46 	bl	8000c3c <pvPortReallocMicroROS>
 80013b0:	4603      	mov	r3, r0
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20003fb0 	.word	0x20003fb0
 80013c0:	20003fb4 	.word	0x20003fb4

080013c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a0c      	ldr	r2, [pc, #48]	@ (800140c <microros_zero_allocate+0x48>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <microros_zero_allocate+0x48>)
 80013e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <microros_zero_allocate+0x4c>)
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <microros_zero_allocate+0x4c>)
 80013f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fc4b 	bl	8000c96 <pvPortCallocMicroROS>
 8001400:	4603      	mov	r3, r0
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20003fb0 	.word	0x20003fb0
 8001410:	20003fb4 	.word	0x20003fb4
 8001414:	00000000 	.word	0x00000000

08001418 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800142a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800142e:	a320      	add	r3, pc, #128	@ (adr r3, 80014b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f8f8 	bl	8000628 <__aeabi_ldivmod>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001446:	a31a      	add	r3, pc, #104	@ (adr r3, 80014b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8ec 	bl	8000628 <__aeabi_ldivmod>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da20      	bge.n	800149e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001462:	fb82 1203 	smull	r1, r2, r2, r3
 8001466:	1712      	asrs	r2, r2, #28
 8001468:	17db      	asrs	r3, r3, #31
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	17c8      	asrs	r0, r1, #31
 800147a:	460c      	mov	r4, r1
 800147c:	4605      	mov	r5, r0
 800147e:	ebb2 0804 	subs.w	r8, r2, r4
 8001482:	eb63 0905 	sbc.w	r9, r3, r5
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4906      	ldr	r1, [pc, #24]	@ (80014ac <UTILS_NanosecondsToTimespec+0x94>)
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	441a      	add	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
    }
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a8:	44b82fa1 	.word	0x44b82fa1
 80014ac:	3b9aca00 	.word	0x3b9aca00
 80014b0:	3b9aca00 	.word	0x3b9aca00
 80014b4:	00000000 	.word	0x00000000

080014b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b08e      	sub	sp, #56	@ 0x38
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80014c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80014c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80014c8:	2300      	movs	r3, #0
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80014da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fd36 	bl	8005f50 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80014e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e6:	17da      	asrs	r2, r3, #31
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	61fa      	str	r2, [r7, #28]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	000b      	movs	r3, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	2200      	movs	r2, #0
 8001502:	461c      	mov	r4, r3
 8001504:	4615      	mov	r5, r2
 8001506:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800150a:	1911      	adds	r1, r2, r4
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	416b      	adcs	r3, r5
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001516:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800151a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	f04f 0500 	mov.w	r5, #0
 800152a:	015d      	lsls	r5, r3, #5
 800152c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001530:	0154      	lsls	r4, r2, #5
 8001532:	4622      	mov	r2, r4
 8001534:	462b      	mov	r3, r5
 8001536:	ebb2 0800 	subs.w	r8, r2, r0
 800153a:	eb63 0901 	sbc.w	r9, r3, r1
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800154a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800154e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001552:	4690      	mov	r8, r2
 8001554:	4699      	mov	r9, r3
 8001556:	eb18 0a00 	adds.w	sl, r8, r0
 800155a:	eb49 0b01 	adc.w	fp, r9, r1
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800156a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800156e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001572:	ebb2 040a 	subs.w	r4, r2, sl
 8001576:	603c      	str	r4, [r7, #0]
 8001578:	eb63 030b 	sbc.w	r3, r3, fp
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001582:	4623      	mov	r3, r4
 8001584:	181b      	adds	r3, r3, r0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	462b      	mov	r3, r5
 800158a:	eb41 0303 	adc.w	r3, r1, r3
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	6a3a      	ldr	r2, [r7, #32]
 8001592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001596:	f7ff ff3f 	bl	8001418 <UTILS_NanosecondsToTimespec>

    return 0;
 800159a:	2300      	movs	r3, #0
 800159c:	4618      	mov	r0, r3
 800159e:	3738      	adds	r7, #56	@ 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_MspInit+0x54>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <HAL_MspInit+0x54>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_MspInit+0x54>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_MspInit+0x54>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_MspInit+0x54>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <HAL_MspInit+0x54>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	210f      	movs	r1, #15
 80015ea:	f06f 0001 	mvn.w	r0, #1
 80015ee:	f000 fc02 	bl	8001df6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a4d      	ldr	r2, [pc, #308]	@ (8001754 <HAL_UART_MspInit+0x154>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 8093 	bne.w	800174a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_UART_MspInit+0x158>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	4a4a      	ldr	r2, [pc, #296]	@ (8001758 <HAL_UART_MspInit+0x158>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001632:	6413      	str	r3, [r2, #64]	@ 0x40
 8001634:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <HAL_UART_MspInit+0x158>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_UART_MspInit+0x158>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	4a43      	ldr	r2, [pc, #268]	@ (8001758 <HAL_UART_MspInit+0x158>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_UART_MspInit+0x158>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166c:	2307      	movs	r3, #7
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4839      	ldr	r0, [pc, #228]	@ (800175c <HAL_UART_MspInit+0x15c>)
 8001678:	f000 fff6 	bl	8002668 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800167c:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <HAL_UART_MspInit+0x160>)
 800167e:	4a39      	ldr	r2, [pc, #228]	@ (8001764 <HAL_UART_MspInit+0x164>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <HAL_UART_MspInit+0x160>)
 8001684:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001688:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168a:	4b35      	ldr	r3, [pc, #212]	@ (8001760 <HAL_UART_MspInit+0x160>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b33      	ldr	r3, [pc, #204]	@ (8001760 <HAL_UART_MspInit+0x160>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_UART_MspInit+0x160>)
 8001698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80016aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ba:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016c0:	4827      	ldr	r0, [pc, #156]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016c2:	f000 fbcf 	bl	8001e64 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80016cc:	f7ff fe00 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a23      	ldr	r2, [pc, #140]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016d6:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_UART_MspInit+0x160>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016de:	4a23      	ldr	r2, [pc, #140]	@ (800176c <HAL_UART_MspInit+0x16c>)
 80016e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016e2:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016ec:	2240      	movs	r2, #64	@ 0x40
 80016ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <HAL_UART_MspInit+0x168>)
 80016f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_UART_MspInit+0x168>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001712:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001716:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_UART_MspInit+0x168>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800171e:	4812      	ldr	r0, [pc, #72]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001720:	f000 fba0 	bl	8001e64 <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800172a:	f7ff fdd1 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001732:	639a      	str	r2, [r3, #56]	@ 0x38
 8001734:	4a0c      	ldr	r2, [pc, #48]	@ (8001768 <HAL_UART_MspInit+0x168>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2105      	movs	r1, #5
 800173e:	2026      	movs	r0, #38	@ 0x26
 8001740:	f000 fb59 	bl	8001df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001744:	2026      	movs	r0, #38	@ 0x26
 8001746:	f000 fb72 	bl	8001e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40004400 	.word	0x40004400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	20003eb4 	.word	0x20003eb4
 8001764:	40026088 	.word	0x40026088
 8001768:	20003f14 	.word	0x20003f14
 800176c:	400260a0 	.word	0x400260a0

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 fa29 	bl	8001c00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017ae:	f004 fd53 	bl	8006258 <xTaskGetSchedulerState>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d001      	beq.n	80017bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017b8:	f005 fb4e 	bl	8006e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA1_Stream5_IRQHandler+0x10>)
 80017c6:	f000 fce5 	bl	8002194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20003eb4 	.word	0x20003eb4

080017d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA1_Stream6_IRQHandler+0x10>)
 80017da:	f000 fcdb 	bl	8002194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20003f14 	.word	0x20003f14

080017e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <USART2_IRQHandler+0x10>)
 80017ee:	f001 fed5 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20003e6c 	.word	0x20003e6c

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001816:	f013 f81f 	bl	8014858 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
  while (1) {}    /* Make sure we hang here */
 800183e:	bf00      	nop
 8001840:	e7fd      	b.n	800183e <_exit+0x12>

08001842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e00a      	b.n	800186a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001854:	f3af 8000 	nop.w
 8001858:	4601      	mov	r1, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	60ba      	str	r2, [r7, #8]
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf0      	blt.n	8001854 <_read+0x12>
  }

  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e009      	b.n	80018a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf1      	blt.n	800188e <_write+0x12>
  }
  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_close>:

int _close(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018dc:	605a      	str	r2, [r3, #4]
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_isatty>:

int _isatty(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f012 ff84 	bl	8014858 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20018000 	.word	0x20018000
 800197c:	00000400 	.word	0x00000400
 8001980:	20003fbc 	.word	0x20003fbc
 8001984:	2000dde8 	.word	0x2000dde8

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80019bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019c0:	4904      	ldr	r1, [pc, #16]	@ (80019d4 <cubemx_transport_open+0x28>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f001 fd46 	bl	8003454 <HAL_UART_Receive_DMA>
    return true;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20003fc0 	.word	0x20003fc0

080019d8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f001 fd58 	bl	800349e <HAL_UART_DMAStop>
    return true;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001a0c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d11c      	bne.n	8001a54 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f001 fca6 	bl	8003374 <HAL_UART_Transmit_DMA>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a2c:	e002      	b.n	8001a34 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f002 ffc2 	bl	80049b8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <cubemx_transport_write+0x4e>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	d1f3      	bne.n	8001a2e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <cubemx_transport_write+0x58>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e002      	b.n	8001a56 <cubemx_transport_write+0x5e>
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a54:	2300      	movs	r3, #0
    }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001a74:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7a:	b672      	cpsid	i
}
 8001a7c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <cubemx_transport_read+0x9c>)
 8001a8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a8e:	b662      	cpsie	i
}
 8001a90:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f002 ff8d 	bl	80049b8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <cubemx_transport_read+0xa0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <cubemx_transport_read+0x9c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d103      	bne.n	8001ab2 <cubemx_transport_read+0x52>
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbe3      	blt.n	8001a7a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ab6:	e011      	b.n	8001adc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <cubemx_transport_read+0xa0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	440b      	add	r3, r1
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <cubemx_transport_read+0xa4>)
 8001ac4:	5c8a      	ldrb	r2, [r1, r2]
 8001ac6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <cubemx_transport_read+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <cubemx_transport_read+0xa0>)
 8001ad4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <cubemx_transport_read+0xa0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <cubemx_transport_read+0x9c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d003      	beq.n	8001af0 <cubemx_transport_read+0x90>
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3e3      	bcc.n	8001ab8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001af0:	69bb      	ldr	r3, [r7, #24]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200047c4 	.word	0x200047c4
 8001b00:	200047c0 	.word	0x200047c0
 8001b04:	20003fc0 	.word	0x20003fc0

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b0c:	f7ff ff3c 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f012 fe95 	bl	8014864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff f98d 	bl	8000e58 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001b4c:	080164b0 	.word	0x080164b0
  ldr r2, =_sbss
 8001b50:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001b54:	2000dde4 	.word	0x2000dde4

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f92b 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fd0a 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f943 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bdc:	f000 f90b 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000008 	.word	0x20000008

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	200047c8 	.word	0x200047c8

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200047c8 	.word	0x200047c8

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feda 	bl	8001c28 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fec1 	bl	8001c28 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fb01 	bl	8002570 <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fab8 	bl	8002504 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	223f      	movs	r2, #63	@ 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fa4a 	bl	80024a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207e:	f7ff fdd3 	bl	8001c28 <HAL_GetTick>
 8002082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2280      	movs	r2, #128	@ 0x80
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e052      	b.n	8002148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_Abort+0x62>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f2:	e013      	b.n	800211c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f4:	f7ff fd98 	bl	8001c28 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d90c      	bls.n	800211c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e015      	b.n	8002148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e4      	bne.n	80020f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	223f      	movs	r2, #63	@ 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00c      	b.n	8002188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2205      	movs	r2, #5
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a0:	4b8e      	ldr	r3, [pc, #568]	@ (80023dc <HAL_DMA_IRQHandler+0x248>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a8e      	ldr	r2, [pc, #568]	@ (80023e0 <HAL_DMA_IRQHandler+0x24c>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	2208      	movs	r2, #8
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01a      	beq.n	8002200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2208      	movs	r2, #8
 80021ee:	409a      	lsls	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f043 0202 	orr.w	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2204      	movs	r2, #4
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d012      	beq.n	800226c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00b      	beq.n	800226c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2204      	movs	r2, #4
 800225a:	409a      	lsls	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	2210      	movs	r2, #16
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d043      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03c      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	2210      	movs	r2, #16
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d024      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
 80022c2:	e01f      	b.n	8002304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
 80022d4:	e016      	b.n	8002304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0208 	bic.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	2220      	movs	r2, #32
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 808f 	beq.w	8002434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8087 	beq.w	8002434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	2220      	movs	r2, #32
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b05      	cmp	r3, #5
 800233c:	d136      	bne.n	80023ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0216 	bic.w	r2, r2, #22
 800234c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800235c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <HAL_DMA_IRQHandler+0x1da>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0208 	bic.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	223f      	movs	r2, #63	@ 0x3f
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d07e      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
        }
        return;
 80023aa:	e079      	b.n	80024a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01d      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10d      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d031      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e02c      	b.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
 80023da:	bf00      	nop
 80023dc:	20000004 	.word	0x20000004
 80023e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e01e      	b.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10f      	bne.n	8002424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0210 	bic.w	r2, r2, #16
 8002412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	2b00      	cmp	r3, #0
 800243a:	d032      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2205      	movs	r2, #5
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	d307      	bcc.n	800247c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f2      	bne.n	8002460 <HAL_DMA_IRQHandler+0x2cc>
 800247a:	e000      	b.n	800247e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800247c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
 800249e:	e000      	b.n	80024a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024a0:	bf00      	nop
    }
  }
}
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	d108      	bne.n	80024e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024e6:	e007      	b.n	80024f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3b10      	subs	r3, #16
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <DMA_CalcBaseAndBitshift+0x64>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251e:	4a13      	ldr	r2, [pc, #76]	@ (800256c <DMA_CalcBaseAndBitshift+0x68>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d909      	bls.n	8002546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	@ 0x58
 8002544:	e007      	b.n	8002556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	aaaaaaab 	.word	0xaaaaaaab
 800256c:	08015724 	.word	0x08015724

08002570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11f      	bne.n	80025ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d856      	bhi.n	800263e <DMA_CheckFifoParam+0xce>
 8002590:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <DMA_CheckFifoParam+0x28>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025bb 	.word	0x080025bb
 80025a0:	080025a9 	.word	0x080025a9
 80025a4:	0800263f 	.word	0x0800263f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d046      	beq.n	8002642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e043      	b.n	8002642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025c2:	d140      	bne.n	8002646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e03d      	b.n	8002646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d2:	d121      	bne.n	8002618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d837      	bhi.n	800264a <DMA_CheckFifoParam+0xda>
 80025da:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <DMA_CheckFifoParam+0x70>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	080025f7 	.word	0x080025f7
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	08002609 	.word	0x08002609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e030      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d025      	beq.n	800264e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002606:	e022      	b.n	800264e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002610:	d11f      	bne.n	8002652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002616:	e01c      	b.n	8002652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d903      	bls.n	8002626 <DMA_CheckFifoParam+0xb6>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d003      	beq.n	800262c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002624:	e018      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      break;
 800262a:	e015      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e00b      	b.n	8002656 <DMA_CheckFifoParam+0xe6>
      break;
 800263e:	bf00      	nop
 8002640:	e00a      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e008      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e006      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;   
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
    }
  } 
  
  return status; 
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e159      	b.n	8002938 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	f040 8148 	bne.w	8002932 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d005      	beq.n	80026ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d130      	bne.n	800271c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 0201 	and.w	r2, r3, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b03      	cmp	r3, #3
 8002726:	d017      	beq.n	8002758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d123      	bne.n	80027ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	08da      	lsrs	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3208      	adds	r2, #8
 800276c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a2 	beq.w	8002932 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <HAL_GPIO_Init+0x2e8>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	4a56      	ldr	r2, [pc, #344]	@ (8002950 <HAL_GPIO_Init+0x2e8>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fe:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <HAL_GPIO_Init+0x2e8>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280a:	4a52      	ldr	r2, [pc, #328]	@ (8002954 <HAL_GPIO_Init+0x2ec>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a49      	ldr	r2, [pc, #292]	@ (8002958 <HAL_GPIO_Init+0x2f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x202>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a48      	ldr	r2, [pc, #288]	@ (800295c <HAL_GPIO_Init+0x2f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x1fe>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a47      	ldr	r2, [pc, #284]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x1fa>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a46      	ldr	r2, [pc, #280]	@ (8002964 <HAL_GPIO_Init+0x2fc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x1f6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a45      	ldr	r2, [pc, #276]	@ (8002968 <HAL_GPIO_Init+0x300>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x1f2>
 8002856:	2304      	movs	r3, #4
 8002858:	e008      	b.n	800286c <HAL_GPIO_Init+0x204>
 800285a:	2307      	movs	r3, #7
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x204>
 800285e:	2303      	movs	r3, #3
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x204>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x204>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x204>
 800286a:	2300      	movs	r3, #0
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	@ (8002954 <HAL_GPIO_Init+0x2ec>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b38      	ldr	r3, [pc, #224]	@ (800296c <HAL_GPIO_Init+0x304>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ae:	4a2f      	ldr	r2, [pc, #188]	@ (800296c <HAL_GPIO_Init+0x304>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <HAL_GPIO_Init+0x304>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d8:	4a24      	ldr	r2, [pc, #144]	@ (800296c <HAL_GPIO_Init+0x304>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028de:	4b23      	ldr	r3, [pc, #140]	@ (800296c <HAL_GPIO_Init+0x304>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002902:	4a1a      	ldr	r2, [pc, #104]	@ (800296c <HAL_GPIO_Init+0x304>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <HAL_GPIO_Init+0x304>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292c:	4a0f      	ldr	r2, [pc, #60]	@ (800296c <HAL_GPIO_Init+0x304>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	f67f aea2 	bls.w	8002684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400
 8002960:	40020800 	.word	0x40020800
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40013c00 	.word	0x40013c00

08002970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
 800297c:	4613      	mov	r3, r2
 800297e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002980:	787b      	ldrb	r3, [r7, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800298c:	e003      	b.n	8002996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	619a      	str	r2, [r3, #24]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e267      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029c2:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e242      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6f      	ldr	r2, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6c      	ldr	r2, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b69      	ldr	r3, [pc, #420]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a68      	ldr	r2, [pc, #416]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f8e4 	bl	8001c28 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff f8e0 	bl	8001c28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e207      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff f8d0 	bl	8001c28 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff f8cc 	bl	8001c28 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1f3      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c7      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f885 	bl	8001c28 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f881 	bl	8001c28 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a8      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f864 	bl	8001c28 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff f860 	bl	8001c28 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e187      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7ff f844 	bl	8001c28 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7ff f840 	bl	8001c28 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e167      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff f82d 	bl	8001c28 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7ff f829 	bl	8001c28 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d907      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e150      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000
 8002bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ea      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8097 	beq.w	8002d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b81      	ldr	r3, [pc, #516]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a7c      	ldr	r2, [pc, #496]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b77      	ldr	r3, [pc, #476]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a73      	ldr	r2, [pc, #460]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fe ffe9 	bl	8001c28 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fe ffe5 	bl	8001c28 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e10c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2ea>
 8002c80:	4b64      	ldr	r3, [pc, #400]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a63      	ldr	r2, [pc, #396]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x30c>
 8002c96:	4b5f      	ldr	r3, [pc, #380]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b55      	ldr	r3, [pc, #340]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe ffaa 	bl	8001c28 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe ffa6 	bl	8001c28 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0cb      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ff94 	bl	8001c28 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe ff90 	bl	8001c28 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0b5      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ee      	bne.n	8002d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a1 	beq.w	8002e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d42:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d05c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d141      	bne.n	8002dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe ff64 	bl	8001c28 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe ff60 	bl	8001c28 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e087      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	491b      	ldr	r1, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe ff39 	bl	8001c28 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe ff35 	bl	8001c28 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e05c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x416>
 8002dd8:	e054      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe ff22 	bl	8001c28 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe ff1e 	bl	8001c28 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e045      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x444>
 8002e06:	e03d      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e038      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d028      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d121      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d11a      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d111      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fe50 	bl	8001c28 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe fe4c 	bl	8001c28 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f821 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	@ (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fdb0 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	0801570c 	.word	0x0801570c
 8003058:	20000004 	.word	0x20000004
 800305c:	20000008 	.word	0x20000008

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b094      	sub	sp, #80	@ 0x50
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003078:	4b79      	ldr	r3, [pc, #484]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d00d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003084:	2b08      	cmp	r3, #8
 8003086:	f200 80e1 	bhi.w	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003092:	e0db      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b73      	ldr	r3, [pc, #460]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 8003096:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003098:	e0db      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x208>)
 800309c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309e:	e0d8      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030d2:	4622      	mov	r2, r4
 80030d4:	462b      	mov	r3, r5
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4621      	mov	r1, r4
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	6139      	str	r1, [r7, #16]
 80030f0:	4629      	mov	r1, r5
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003104:	4659      	mov	r1, fp
 8003106:	018b      	lsls	r3, r1, #6
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310e:	4651      	mov	r1, sl
 8003110:	018a      	lsls	r2, r1, #6
 8003112:	4651      	mov	r1, sl
 8003114:	ebb2 0801 	subs.w	r8, r2, r1
 8003118:	4659      	mov	r1, fp
 800311a:	eb63 0901 	sbc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	462b      	mov	r3, r5
 8003140:	eb49 0303 	adc.w	r3, r9, r3
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003152:	4629      	mov	r1, r5
 8003154:	024b      	lsls	r3, r1, #9
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315c:	4621      	mov	r1, r4
 800315e:	024a      	lsls	r2, r1, #9
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003170:	f7fd faaa 	bl	80006c8 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317c:	e058      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b38      	ldr	r3, [pc, #224]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	4618      	mov	r0, r3
 8003188:	4611      	mov	r1, r2
 800318a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0159      	lsls	r1, r3, #5
 80031a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031aa:	0150      	lsls	r0, r2, #5
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4641      	mov	r1, r8
 80031b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031b6:	4649      	mov	r1, r9
 80031b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d0:	ebb2 040a 	subs.w	r4, r2, sl
 80031d4:	eb63 050b 	sbc.w	r5, r3, fp
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003206:	4629      	mov	r1, r5
 8003208:	028b      	lsls	r3, r1, #10
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003210:	4621      	mov	r1, r4
 8003212:	028a      	lsls	r2, r1, #10
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	61fa      	str	r2, [r7, #28]
 8003220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003224:	f7fd fa50 	bl	80006c8 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003254:	4618      	mov	r0, r3
 8003256:	3750      	adds	r7, #80	@ 0x50
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b03      	ldr	r3, [pc, #12]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff0 	bl	800326c <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	0801571c 	.word	0x0801571c

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffdc 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	0801571c 	.word	0x0801571c

080032d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e042      	b.n	800336c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe f980 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	@ 0x24
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ffc9 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800332c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800333c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800334c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	@ 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	d156      	bne.n	800343c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_Transmit_DMA+0x26>
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e04f      	b.n	800343e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2221      	movs	r2, #33	@ 0x21
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <HAL_UART_Transmit_DMA+0xd4>)
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	4a20      	ldr	r2, [pc, #128]	@ (800344c <HAL_UART_Transmit_DMA+0xd8>)
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <HAL_UART_Transmit_DMA+0xdc>)
 80033d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	2200      	movs	r2, #0
 80033dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80033de:	f107 0308 	add.w	r3, r7, #8
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3304      	adds	r3, #4
 80033f2:	461a      	mov	r2, r3
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	f7fe fde3 	bl	8001fc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003402:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	617b      	str	r3, [r7, #20]
   return(result);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003424:	627a      	str	r2, [r7, #36]	@ 0x24
 8003426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	61fb      	str	r3, [r7, #28]
   return(result);
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	@ 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	08003b3d 	.word	0x08003b3d
 800344c:	08003bd7 	.word	0x08003bd7
 8003450:	08003d5b 	.word	0x08003d5b

08003454 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	d112      	bne.n	8003494 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_UART_Receive_DMA+0x26>
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00b      	b.n	8003496 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	461a      	mov	r2, r3
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fcb0 	bl	8003df0 <UART_Start_Receive_DMA>
 8003490:	4603      	mov	r3, r0
 8003492:	e000      	b.n	8003496 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b090      	sub	sp, #64	@ 0x40
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b4:	2b80      	cmp	r3, #128	@ 0x80
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b21      	cmp	r3, #33	@ 0x21
 80034ca:	d128      	bne.n	800351e <HAL_UART_DMAStop+0x80>
 80034cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d025      	beq.n	800351e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	623b      	str	r3, [r7, #32]
   return(result);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3314      	adds	r3, #20
 80034f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fdac 	bl	8002070 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fd03 	bl	8003f24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b22      	cmp	r3, #34	@ 0x22
 800353e:	d128      	bne.n	8003592 <HAL_UART_DMAStop+0xf4>
 8003540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d025      	beq.n	8003592 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	60fb      	str	r3, [r7, #12]
   return(result);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	617b      	str	r3, [r7, #20]
   return(result);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd72 	bl	8002070 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fcf1 	bl	8003f74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3740      	adds	r7, #64	@ 0x40
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0ba      	sub	sp, #232	@ 0xe8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fd99 	bl	8004132 <UART_Receive_IT>
      return;
 8003600:	e25b      	b.n	8003aba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80de 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
 800360c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80d1 	beq.w	80037c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
 8003632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 81f2 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fd24 	bl	8004132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_UART_IRQHandler+0x17a>
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04f      	beq.n	80037b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fc2c 	bl	8003f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d141      	bne.n	80037ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003756:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800376e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <HAL_UART_IRQHandler+0x3e0>)
 8003784:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fce0 	bl	8002150 <HAL_DMA_Abort_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00e      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9b2 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00a      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9ae 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e006      	b.n	80037c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9aa 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037c2:	e175      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	bf00      	nop
    return;
 80037c6:	e173      	b.n	8003ab0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	f040 814f 	bne.w	8003a70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8148 	beq.w	8003a70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8141 	beq.w	8003a70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	f040 80b6 	bne.w	8003980 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8145 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800382e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003832:	429a      	cmp	r2, r3
 8003834:	f080 813e 	bcs.w	8003ab4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800383e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384a:	f000 8088 	beq.w	800395e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800386c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800387a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1d9      	bne.n	800384e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e1      	bne.n	800389a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003900:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800392c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003940:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003942:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800394e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e3      	bne.n	800391c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fb89 	bl	8002070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800396c:	b29b      	uxth	r3, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	b29b      	uxth	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f8d5 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800397a:	e09b      	b.n	8003ab4 <HAL_UART_IRQHandler+0x518>
 800397c:	0800403b 	.word	0x0800403b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003988:	b29b      	uxth	r3, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 808e 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800399c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8089 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e3      	bne.n	80039a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	623b      	str	r3, [r7, #32]
   return(result);
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e3      	bne.n	80039de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a48:	61fa      	str	r2, [r7, #28]
 8003a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	69b9      	ldr	r1, [r7, #24]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	617b      	str	r3, [r7, #20]
   return(result);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e3      	bne.n	8003a24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f85b 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a6e:	e023      	b.n	8003ab8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_UART_IRQHandler+0x4f4>
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 faea 	bl	8004062 <UART_Transmit_IT>
    return;
 8003a8e:	e014      	b.n	8003aba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <HAL_UART_IRQHandler+0x51e>
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fb2a 	bl	8004102 <UART_EndTransmit_IT>
    return;
 8003aae:	e004      	b.n	8003aba <HAL_UART_IRQHandler+0x51e>
    return;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_UART_IRQHandler+0x51e>
      return;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_UART_IRQHandler+0x51e>
      return;
 8003ab8:	bf00      	nop
  }
}
 8003aba:	37e8      	adds	r7, #232	@ 0xe8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b090      	sub	sp, #64	@ 0x40
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d137      	bne.n	8003bc8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bc6:	e002      	b.n	8003bce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003bc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bca:	f7ff ff79 	bl	8003ac0 <HAL_UART_TxCpltCallback>
}
 8003bce:	bf00      	nop
 8003bd0:	3740      	adds	r7, #64	@ 0x40
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff ff75 	bl	8003ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b09c      	sub	sp, #112	@ 0x70
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d172      	bne.n	8003cf4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c10:	2200      	movs	r2, #0
 8003c12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c68:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e5      	bne.n	8003c48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c92:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e5      	bne.n	8003c7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d119      	bne.n	8003cf4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0310 	bic.w	r3, r3, #16
 8003cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ce0:	61fa      	str	r2, [r7, #28]
 8003ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	617b      	str	r3, [r7, #20]
   return(result);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d106      	bne.n	8003d10 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d06:	4619      	mov	r1, r3
 8003d08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d0a:	f7ff ff0b 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d0e:	e002      	b.n	8003d16 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003d10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d12:	f7ff fee9 	bl	8003ae8 <HAL_UART_RxCpltCallback>
}
 8003d16:	bf00      	nop
 8003d18:	3770      	adds	r7, #112	@ 0x70
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff feed 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d4a:	e002      	b.n	8003d52 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff fed5 	bl	8003afc <HAL_UART_RxHalfCpltCallback>
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b80      	cmp	r3, #128	@ 0x80
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b21      	cmp	r3, #33	@ 0x21
 8003d8c:	d108      	bne.n	8003da0 <UART_DMAError+0x46>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f000 f8c2 	bl	8003f24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b22      	cmp	r3, #34	@ 0x22
 8003dc0:	d108      	bne.n	8003dd4 <UART_DMAError+0x7a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	f000 f8d0 	bl	8003f74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	f043 0210 	orr.w	r2, r3, #16
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f7ff fe95 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b098      	sub	sp, #96	@ 0x60
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2222      	movs	r2, #34	@ 0x22
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f18 <UART_Start_Receive_DMA+0x128>)
 8003e1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	4a3d      	ldr	r2, [pc, #244]	@ (8003f1c <UART_Start_Receive_DMA+0x12c>)
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f20 <UART_Start_Receive_DMA+0x130>)
 8003e2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	2200      	movs	r2, #0
 8003e36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e38:	f107 0308 	add.w	r3, r7, #8
 8003e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f7fe f8b6 	bl	8001fc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d019      	beq.n	8003ea6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003e98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e5      	bne.n	8003e72 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ec6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003efa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3760      	adds	r7, #96	@ 0x60
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	08003bf3 	.word	0x08003bf3
 8003f1c:	08003d1f 	.word	0x08003d1f
 8003f20:	08003d5b 	.word	0x08003d5b

08003f24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	61ba      	str	r2, [r7, #24]
 8003f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003f68:	bf00      	nop
 8003f6a:	3724      	adds	r7, #36	@ 0x24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b095      	sub	sp, #84	@ 0x54
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d119      	bne.n	8004020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	647b      	str	r3, [r7, #68]	@ 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400c:	61ba      	str	r2, [r7, #24]
 800400e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	613b      	str	r3, [r7, #16]
   return(result);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800402e:	bf00      	nop
 8004030:	3754      	adds	r7, #84	@ 0x54
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fd5b 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b21      	cmp	r3, #33	@ 0x21
 8004074:	d13e      	bne.n	80040f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407e:	d114      	bne.n	80040aa <UART_Transmit_IT+0x48>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d110      	bne.n	80040aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	e008      	b.n	80040bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6211      	str	r1, [r2, #32]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4619      	mov	r1, r3
 80040ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fccc 	bl	8003ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b08c      	sub	sp, #48	@ 0x30
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	@ 0x22
 8004144:	f040 80ae 	bne.w	80042a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d117      	bne.n	8004182 <UART_Receive_IT+0x50>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	b29a      	uxth	r2, r3
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004180:	e026      	b.n	80041d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004194:	d007      	beq.n	80041a6 <UART_Receive_IT+0x74>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <UART_Receive_IT+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e008      	b.n	80041c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d15d      	bne.n	80042a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0220 	bic.w	r2, r2, #32
 80041f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	2b01      	cmp	r3, #1
 8004228:	d135      	bne.n	8004296 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	623a      	str	r2, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	61bb      	str	r3, [r7, #24]
   return(result);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d10a      	bne.n	8004288 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fc48 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
 8004294:	e002      	b.n	800429c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fc26 	bl	8003ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e002      	b.n	80042a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3730      	adds	r7, #48	@ 0x30
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b0c0      	sub	sp, #256	@ 0x100
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	68d9      	ldr	r1, [r3, #12]
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	ea40 0301 	orr.w	r3, r0, r1
 80042d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004308:	f021 010c 	bic.w	r1, r1, #12
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004316:	430b      	orrs	r3, r1
 8004318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	6999      	ldr	r1, [r3, #24]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	ea40 0301 	orr.w	r3, r0, r1
 8004336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8f      	ldr	r3, [pc, #572]	@ (800457c <UART_SetConfig+0x2cc>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d005      	beq.n	8004350 <UART_SetConfig+0xa0>
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8d      	ldr	r3, [pc, #564]	@ (8004580 <UART_SetConfig+0x2d0>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d104      	bne.n	800435a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7fe ffac 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8004354:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004358:	e003      	b.n	8004362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435a:	f7fe ff93 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 800435e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800436c:	f040 810c 	bne.w	8004588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800437a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800437e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	1891      	adds	r1, r2, r2
 8004388:	65b9      	str	r1, [r7, #88]	@ 0x58
 800438a:	415b      	adcs	r3, r3
 800438c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800438e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004392:	4621      	mov	r1, r4
 8004394:	eb12 0801 	adds.w	r8, r2, r1
 8004398:	4629      	mov	r1, r5
 800439a:	eb43 0901 	adc.w	r9, r3, r1
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b2:	4690      	mov	r8, r2
 80043b4:	4699      	mov	r9, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	eb18 0303 	adds.w	r3, r8, r3
 80043bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043c0:	462b      	mov	r3, r5
 80043c2:	eb49 0303 	adc.w	r3, r9, r3
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043de:	460b      	mov	r3, r1
 80043e0:	18db      	adds	r3, r3, r3
 80043e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e4:	4613      	mov	r3, r2
 80043e6:	eb42 0303 	adc.w	r3, r2, r3
 80043ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043f4:	f7fc f968 	bl	80006c8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b61      	ldr	r3, [pc, #388]	@ (8004584 <UART_SetConfig+0x2d4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004410:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004420:	415b      	adcs	r3, r3
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004428:	4641      	mov	r1, r8
 800442a:	eb12 0a01 	adds.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb43 0b01 	adc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004448:	4692      	mov	sl, r2
 800444a:	469b      	mov	fp, r3
 800444c:	4643      	mov	r3, r8
 800444e:	eb1a 0303 	adds.w	r3, sl, r3
 8004452:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004456:	464b      	mov	r3, r9
 8004458:	eb4b 0303 	adc.w	r3, fp, r3
 800445c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800446c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	643b      	str	r3, [r7, #64]	@ 0x40
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
 8004482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800448a:	f7fc f91d 	bl	80006c8 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4611      	mov	r1, r2
 8004494:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <UART_SetConfig+0x2d4>)
 8004496:	fba3 2301 	umull	r2, r3, r3, r1
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2264      	movs	r2, #100	@ 0x64
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	1acb      	subs	r3, r1, r3
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044aa:	4b36      	ldr	r3, [pc, #216]	@ (8004584 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 2302 	umull	r2, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044b8:	441c      	add	r4, r3
 80044ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044d4:	415b      	adcs	r3, r3
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004510:	464b      	mov	r3, r9
 8004512:	460a      	mov	r2, r1
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004528:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800452c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004530:	460b      	mov	r3, r1
 8004532:	18db      	adds	r3, r3, r3
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004536:	4613      	mov	r3, r2
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004546:	f7fc f8bf 	bl	80006c8 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <UART_SetConfig+0x2d4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	@ 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3332      	adds	r3, #50	@ 0x32
 8004562:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <UART_SetConfig+0x2d4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 0207 	and.w	r2, r3, #7
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4422      	add	r2, r4
 8004576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004578:	e106      	b.n	8004788 <UART_SetConfig+0x4d8>
 800457a:	bf00      	nop
 800457c:	40011000 	.word	0x40011000
 8004580:	40011400 	.word	0x40011400
 8004584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004592:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	6239      	str	r1, [r7, #32]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045aa:	4641      	mov	r1, r8
 80045ac:	1854      	adds	r4, r2, r1
 80045ae:	4649      	mov	r1, r9
 80045b0:	eb43 0501 	adc.w	r5, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	00eb      	lsls	r3, r5, #3
 80045be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c2:	00e2      	lsls	r2, r4, #3
 80045c4:	4614      	mov	r4, r2
 80045c6:	461d      	mov	r5, r3
 80045c8:	4643      	mov	r3, r8
 80045ca:	18e3      	adds	r3, r4, r3
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045d0:	464b      	mov	r3, r9
 80045d2:	eb45 0303 	adc.w	r3, r5, r3
 80045d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045f6:	4629      	mov	r1, r5
 80045f8:	008b      	lsls	r3, r1, #2
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004600:	4621      	mov	r1, r4
 8004602:	008a      	lsls	r2, r1, #2
 8004604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004608:	f7fc f85e 	bl	80006c8 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b60      	ldr	r3, [pc, #384]	@ (8004794 <UART_SetConfig+0x4e4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004624:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	61b9      	str	r1, [r7, #24]
 8004634:	415b      	adcs	r3, r3
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6139      	str	r1, [r7, #16]
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004686:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004694:	4649      	mov	r1, r9
 8004696:	008b      	lsls	r3, r1, #2
 8004698:	4641      	mov	r1, r8
 800469a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469e:	4641      	mov	r1, r8
 80046a0:	008a      	lsls	r2, r1, #2
 80046a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046a6:	f7fc f80f 	bl	80006c8 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	4b38      	ldr	r3, [pc, #224]	@ (8004794 <UART_SetConfig+0x4e4>)
 80046b2:	fba3 2301 	umull	r2, r3, r3, r1
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2264      	movs	r2, #100	@ 0x64
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	1acb      	subs	r3, r1, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	@ 0x32
 80046c4:	4a33      	ldr	r2, [pc, #204]	@ (8004794 <UART_SetConfig+0x4e4>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d0:	441c      	add	r4, r3
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046da:	677a      	str	r2, [r7, #116]	@ 0x74
 80046dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	415b      	adcs	r3, r3
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004722:	464b      	mov	r3, r9
 8004724:	460a      	mov	r2, r1
 8004726:	eb42 0303 	adc.w	r3, r2, r3
 800472a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	663b      	str	r3, [r7, #96]	@ 0x60
 8004736:	667a      	str	r2, [r7, #100]	@ 0x64
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004744:	4649      	mov	r1, r9
 8004746:	008b      	lsls	r3, r1, #2
 8004748:	4641      	mov	r1, r8
 800474a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474e:	4641      	mov	r1, r8
 8004750:	008a      	lsls	r2, r1, #2
 8004752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004756:	f7fb ffb7 	bl	80006c8 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <UART_SetConfig+0x4e4>)
 8004760:	fba3 1302 	umull	r1, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	2164      	movs	r1, #100	@ 0x64
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	3332      	adds	r3, #50	@ 0x32
 8004772:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <UART_SetConfig+0x4e4>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4422      	add	r2, r4
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800478e:	46bd      	mov	sp, r7
 8004790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <__NVIC_SetPriority>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0a      	blt.n	80047c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	490c      	ldr	r1, [pc, #48]	@ (80047e4 <__NVIC_SetPriority+0x4c>)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	0112      	lsls	r2, r2, #4
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	440b      	add	r3, r1
 80047bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047c0:	e00a      	b.n	80047d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4908      	ldr	r1, [pc, #32]	@ (80047e8 <__NVIC_SetPriority+0x50>)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3b04      	subs	r3, #4
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	440b      	add	r3, r1
 80047d6:	761a      	strb	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000e100 	.word	0xe000e100
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047f0:	2100      	movs	r1, #0
 80047f2:	f06f 0004 	mvn.w	r0, #4
 80047f6:	f7ff ffcf 	bl	8004798 <__NVIC_SetPriority>
#endif
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	603b      	str	r3, [r7, #0]
  return(result);
 800480c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004812:	f06f 0305 	mvn.w	r3, #5
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e00c      	b.n	8004834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800481a:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <osKernelInitialize+0x44>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004822:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <osKernelInitialize+0x44>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e002      	b.n	8004834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004834:	687b      	ldr	r3, [r7, #4]
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	200047cc 	.word	0x200047cc

08004848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484e:	f3ef 8305 	mrs	r3, IPSR
 8004852:	603b      	str	r3, [r7, #0]
  return(result);
 8004854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <osKernelStart+0x1a>
    stat = osErrorISR;
 800485a:	f06f 0305 	mvn.w	r3, #5
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	e010      	b.n	8004884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004862:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <osKernelStart+0x48>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d109      	bne.n	800487e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800486a:	f7ff ffbf 	bl	80047ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <osKernelStart+0x48>)
 8004870:	2202      	movs	r2, #2
 8004872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004874:	f001 f87a 	bl	800596c <vTaskStartScheduler>
      stat = osOK;
 8004878:	2300      	movs	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	e002      	b.n	8004884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200047cc 	.word	0x200047cc

08004894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	@ 0x38
 8004898:	af04      	add	r7, sp, #16
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a4:	f3ef 8305 	mrs	r3, IPSR
 80048a8:	617b      	str	r3, [r7, #20]
  return(result);
 80048aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d17e      	bne.n	80049ae <osThreadNew+0x11a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d07b      	beq.n	80049ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048ba:	2318      	movs	r3, #24
 80048bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d045      	beq.n	800495a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <osThreadNew+0x48>
        name = attr->name;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <osThreadNew+0x6e>
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b38      	cmp	r3, #56	@ 0x38
 80048f4:	d805      	bhi.n	8004902 <osThreadNew+0x6e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <osThreadNew+0x72>
        return (NULL);
 8004902:	2300      	movs	r3, #0
 8004904:	e054      	b.n	80049b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <osThreadNew+0xa8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b5b      	cmp	r3, #91	@ 0x5b
 8004924:	d90a      	bls.n	800493c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <osThreadNew+0xa8>
        mem = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e010      	b.n	800495e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <osThreadNew+0xca>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <osThreadNew+0xca>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <osThreadNew+0xca>
          mem = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e001      	b.n	800495e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d110      	bne.n	8004986 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800496c:	9202      	str	r2, [sp, #8]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a3a      	ldr	r2, [r7, #32]
 8004978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fe1a 	bl	80055b4 <xTaskCreateStatic>
 8004980:	4603      	mov	r3, r0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e013      	b.n	80049ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	b29a      	uxth	r2, r3
 8004990:	f107 0310 	add.w	r3, r7, #16
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe68 	bl	8005674 <xTaskCreate>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <osThreadNew+0x11a>
            hTask = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049ae:	693b      	ldr	r3, [r7, #16]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	@ 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c0:	f3ef 8305 	mrs	r3, IPSR
 80049c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <osDelay+0x1c>
    stat = osErrorISR;
 80049cc:	f06f 0305 	mvn.w	r3, #5
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e007      	b.n	80049e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 ff8e 	bl	8005900 <vTaskDelay>
    }
  }

  return (stat);
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <vApplicationGetIdleTaskMemory+0x30>)
 8004a06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2280      	movs	r2, #128	@ 0x80
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	200047d0 	.word	0x200047d0
 8004a20:	2000482c 	.word	0x2000482c

08004a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a07      	ldr	r2, [pc, #28]	@ (8004a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a06      	ldr	r2, [pc, #24]	@ (8004a54 <vApplicationGetTimerTaskMemory+0x30>)
 8004a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	20004a2c 	.word	0x20004a2c
 8004a54:	20004a88 	.word	0x20004a88

08004a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f103 0208 	add.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f103 0208 	add.w	r2, r3, #8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b10:	d103      	bne.n	8004b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00c      	b.n	8004b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e002      	b.n	8004b28 <vListInsert+0x2e>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d2f6      	bcs.n	8004b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6852      	ldr	r2, [r2, #4]
 8004b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d103      	bne.n	8004ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericReset+0x2c>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60bb      	str	r3, [r7, #8]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bec:	f002 f8a4 	bl	8006d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	441a      	add	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	441a      	add	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	22ff      	movs	r2, #255	@ 0xff
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	22ff      	movs	r2, #255	@ 0xff
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d114      	bne.n	8004c6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01a      	beq.n	8004c80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 f91a 	bl	8005e88 <xTaskRemoveFromEventList>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d012      	beq.n	8004c80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <xQueueGenericReset+0xd0>)
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	e009      	b.n	8004c80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3310      	adds	r3, #16
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fef1 	bl	8004a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3324      	adds	r3, #36	@ 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff feec 	bl	8004a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c80:	f002 f88c 	bl	8006d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c84:	2301      	movs	r3, #1
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	@ 0x38
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <xQueueGenericCreateStatic+0x56>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <xQueueGenericCreateStatic+0x5a>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <xQueueGenericCreateStatic+0x5c>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	623b      	str	r3, [r7, #32]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <xQueueGenericCreateStatic+0x84>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <xQueueGenericCreateStatic+0x88>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <xQueueGenericCreateStatic+0x8a>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	61fb      	str	r3, [r7, #28]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d3a:	2350      	movs	r3, #80	@ 0x50
 8004d3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b50      	cmp	r3, #80	@ 0x50
 8004d42:	d00b      	beq.n	8004d5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f805 	bl	8004d8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3730      	adds	r7, #48	@ 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e002      	b.n	8004db0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	69b8      	ldr	r0, [r7, #24]
 8004dc0:	f7ff fefe 	bl	8004bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004de2:	2300      	movs	r3, #0
 8004de4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xQueueGenericSend+0x34>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <xQueueGenericSend+0x42>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <xQueueGenericSend+0x46>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueGenericSend+0x48>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <xQueueGenericSend+0x64>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d103      	bne.n	8004e46 <xQueueGenericSend+0x72>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericSend+0x76>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericSend+0x78>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <xQueueGenericSend+0x94>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e68:	f001 f9f6 	bl	8006258 <xTaskGetSchedulerState>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <xQueueGenericSend+0xa4>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <xQueueGenericSend+0xa8>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <xQueueGenericSend+0xaa>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <xQueueGenericSend+0xc6>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	61fb      	str	r3, [r7, #28]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e9a:	f001 ff4d 	bl	8006d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <xQueueGenericSend+0xdc>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d129      	bne.n	8004f04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eb6:	f000 fa0f 	bl	80052d8 <prvCopyDataToQueue>
 8004eba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	3324      	adds	r3, #36	@ 0x24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 ffdd 	bl	8005e88 <xTaskRemoveFromEventList>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd4 <xQueueGenericSend+0x200>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	e00a      	b.n	8004efc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eec:	4b39      	ldr	r3, [pc, #228]	@ (8004fd4 <xQueueGenericSend+0x200>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004efc:	f001 ff4e 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e063      	b.n	8004fcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f0a:	f001 ff47 	bl	8006d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e05c      	b.n	8004fcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 f83f 	bl	8005fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f26:	f001 ff39 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f2a:	f000 fd87 	bl	8005a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f2e:	f001 ff03 	bl	8006d38 <vPortEnterCritical>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3e:	d103      	bne.n	8004f48 <xQueueGenericSend+0x174>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSend+0x18a>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f5e:	f001 ff1d 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f62:	1d3a      	adds	r2, r7, #4
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f82e 	bl	8005fcc <xTaskCheckForTimeOut>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d124      	bne.n	8004fc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f78:	f000 faa6 	bl	80054c8 <prvIsQueueFull>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d018      	beq.n	8004fb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	3310      	adds	r3, #16
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff2a 	bl	8005de4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f92:	f000 fa31 	bl	80053f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f96:	f000 fd5f 	bl	8005a58 <xTaskResumeAll>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f af7c 	bne.w	8004e9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <xQueueGenericSend+0x200>)
 8004fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	e772      	b.n	8004e9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb6:	f000 fa1f 	bl	80053f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fba:	f000 fd4d 	bl	8005a58 <xTaskResumeAll>
 8004fbe:	e76c      	b.n	8004e9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fc2:	f000 fa19 	bl	80053f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fc6:	f000 fd47 	bl	8005a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3738      	adds	r7, #56	@ 0x38
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b090      	sub	sp, #64	@ 0x40
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <xQueueGenericSendFromISR+0x3e>
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueGenericSendFromISR+0x42>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueGenericSendFromISR+0x44>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d103      	bne.n	8005046 <xQueueGenericSendFromISR+0x6e>
 800503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <xQueueGenericSendFromISR+0x72>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericSendFromISR+0x74>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	623b      	str	r3, [r7, #32]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005068:	f001 ff46 	bl	8006ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800506c:	f3ef 8211 	mrs	r2, BASEPRI
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005084:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <xQueueGenericSendFromISR+0xc2>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d12f      	bne.n	80050fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050b0:	f000 f912 	bl	80052d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050bc:	d112      	bne.n	80050e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	3324      	adds	r3, #36	@ 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fedc 	bl	8005e88 <xTaskRemoveFromEventList>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00e      	beq.n	80050f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e007      	b.n	80050f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050e8:	3301      	adds	r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	b25a      	sxtb	r2, r3
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050f4:	2301      	movs	r3, #1
 80050f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80050f8:	e001      	b.n	80050fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005108:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800510a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800510c:	4618      	mov	r0, r3
 800510e:	3740      	adds	r7, #64	@ 0x40
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	@ 0x30
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <xQueueReceive+0x32>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	623b      	str	r3, [r7, #32]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <xQueueReceive+0x40>
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <xQueueReceive+0x44>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <xQueueReceive+0x46>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <xQueueReceive+0x62>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	61fb      	str	r3, [r7, #28]
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	e7fd      	b.n	8005172 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005176:	f001 f86f 	bl	8006258 <xTaskGetSchedulerState>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <xQueueReceive+0x72>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <xQueueReceive+0x76>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueReceive+0x78>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueReceive+0x94>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	61bb      	str	r3, [r7, #24]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a8:	f001 fdc6 	bl	8006d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01f      	beq.n	80051f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051bc:	f000 f8f6 	bl	80053ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fe57 	bl	8005e88 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b3c      	ldr	r3, [pc, #240]	@ (80052d4 <xQueueReceive+0x1c0>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051f0:	f001 fdd4 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e069      	b.n	80052cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051fe:	f001 fdcd 	bl	8006d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005202:	2300      	movs	r3, #0
 8005204:	e062      	b.n	80052cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fec5 	bl	8005fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800521a:	f001 fdbf 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800521e:	f000 fc0d 	bl	8005a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005222:	f001 fd89 	bl	8006d38 <vPortEnterCritical>
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005232:	d103      	bne.n	800523c <xQueueReceive+0x128>
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005242:	b25b      	sxtb	r3, r3
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005248:	d103      	bne.n	8005252 <xQueueReceive+0x13e>
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005252:	f001 fda3 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005256:	1d3a      	adds	r2, r7, #4
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f000 feb4 	bl	8005fcc <xTaskCheckForTimeOut>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d123      	bne.n	80052b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800526a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526c:	f000 f916 	bl	800549c <prvIsQueueEmpty>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d017      	beq.n	80052a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	3324      	adds	r3, #36	@ 0x24
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fdb0 	bl	8005de4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005286:	f000 f8b7 	bl	80053f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800528a:	f000 fbe5 	bl	8005a58 <xTaskResumeAll>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d189      	bne.n	80051a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005294:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <xQueueReceive+0x1c0>)
 8005296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	e780      	b.n	80051a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a8:	f000 f8a6 	bl	80053f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ac:	f000 fbd4 	bl	8005a58 <xTaskResumeAll>
 80052b0:	e77a      	b.n	80051a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052b4:	f000 f8a0 	bl	80053f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052b8:	f000 fbce 	bl	8005a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052be:	f000 f8ed 	bl	800549c <prvIsQueueEmpty>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f43f af6f 	beq.w	80051a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3730      	adds	r7, #48	@ 0x30
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d14d      	bne.n	800539a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ffc6 	bl	8006294 <xTaskPriorityDisinherit>
 8005308:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	e043      	b.n	800539a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d119      	bne.n	800534c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6858      	ldr	r0, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	461a      	mov	r2, r3
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	f00f facd 	bl	80148c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	429a      	cmp	r2, r3
 8005340:	d32b      	bcc.n	800539a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	e026      	b.n	800539a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68d8      	ldr	r0, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	461a      	mov	r2, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	f00f fab3 	bl	80148c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	425b      	negs	r3, r3
 8005366:	441a      	add	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d207      	bcs.n	8005388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	425b      	negs	r3, r3
 8005382:	441a      	add	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d105      	bne.n	800539a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3b01      	subs	r3, #1
 8005398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d018      	beq.n	80053f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d303      	bcc.n	80053e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68d9      	ldr	r1, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	461a      	mov	r2, r3
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f00f fa69 	bl	80148c2 <memcpy>
	}
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005400:	f001 fc9a 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800540a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800540c:	e011      	b.n	8005432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d012      	beq.n	800543c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3324      	adds	r3, #36	@ 0x24
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fd34 	bl	8005e88 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005426:	f000 fe35 	bl	8006094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	3b01      	subs	r3, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dce9      	bgt.n	800540e <prvUnlockQueue+0x16>
 800543a:	e000      	b.n	800543e <prvUnlockQueue+0x46>
					break;
 800543c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	22ff      	movs	r2, #255	@ 0xff
 8005442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005446:	f001 fca9 	bl	8006d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800544a:	f001 fc75 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005456:	e011      	b.n	800547c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d012      	beq.n	8005486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3310      	adds	r3, #16
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fd0f 	bl	8005e88 <xTaskRemoveFromEventList>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005470:	f000 fe10 	bl	8006094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	3b01      	subs	r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800547c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005480:	2b00      	cmp	r3, #0
 8005482:	dce9      	bgt.n	8005458 <prvUnlockQueue+0x60>
 8005484:	e000      	b.n	8005488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	22ff      	movs	r2, #255	@ 0xff
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005490:	f001 fc84 	bl	8006d9c <vPortExitCritical>
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054a4:	f001 fc48 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e001      	b.n	80054ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ba:	f001 fc6f 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054d0:	f001 fc32 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d102      	bne.n	80054e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e001      	b.n	80054ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ea:	f001 fc57 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 80054ee:	68fb      	ldr	r3, [r7, #12]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e014      	b.n	8005532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005508:	4a0f      	ldr	r2, [pc, #60]	@ (8005548 <vQueueAddToRegistry+0x50>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005514:	490c      	ldr	r1, [pc, #48]	@ (8005548 <vQueueAddToRegistry+0x50>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <vQueueAddToRegistry+0x50>)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800552a:	e006      	b.n	800553a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b07      	cmp	r3, #7
 8005536:	d9e7      	bls.n	8005508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20004e88 	.word	0x20004e88

0800554c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800555c:	f001 fbec 	bl	8006d38 <vPortEnterCritical>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005566:	b25b      	sxtb	r3, r3
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800556c:	d103      	bne.n	8005576 <vQueueWaitForMessageRestricted+0x2a>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800557c:	b25b      	sxtb	r3, r3
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005582:	d103      	bne.n	800558c <vQueueWaitForMessageRestricted+0x40>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800558c:	f001 fc06 	bl	8006d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3324      	adds	r3, #36	@ 0x24
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fc45 	bl	8005e30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7ff ff26 	bl	80053f8 <prvUnlockQueue>
	}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	@ 0x38
 80055b8:	af04      	add	r7, sp, #16
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	61fb      	str	r3, [r7, #28]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055fe:	235c      	movs	r3, #92	@ 0x5c
 8005600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b5c      	cmp	r3, #92	@ 0x5c
 8005606:	d00b      	beq.n	8005620 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61bb      	str	r3, [r7, #24]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005620:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01e      	beq.n	8005666 <xTaskCreateStatic+0xb2>
 8005628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01b      	beq.n	8005666 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005640:	2300      	movs	r3, #0
 8005642:	9303      	str	r3, [sp, #12]
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	9302      	str	r3, [sp, #8]
 8005648:	f107 0314 	add.w	r3, r7, #20
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f850 	bl	80056fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800565e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005660:	f000 f8de 	bl	8005820 <prvAddNewTaskToReadyList>
 8005664:	e001      	b.n	800566a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800566a:	697b      	ldr	r3, [r7, #20]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	@ 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	@ 0x30
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fc77 	bl	8006f7c <pvPortMalloc>
 800568e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005696:	205c      	movs	r0, #92	@ 0x5c
 8005698:	f001 fc70 	bl	8006f7c <pvPortMalloc>
 800569c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80056aa:	e005      	b.n	80056b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056ac:	6978      	ldr	r0, [r7, #20]
 80056ae:	f001 fd33 	bl	8007118 <vPortFree>
 80056b2:	e001      	b.n	80056b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f80e 	bl	80056fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056e2:	69f8      	ldr	r0, [r7, #28]
 80056e4:	f000 f89c 	bl	8005820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056e8:	2301      	movs	r3, #1
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e002      	b.n	80056f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056f4:	69bb      	ldr	r3, [r7, #24]
	}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b088      	sub	sp, #32
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	461a      	mov	r2, r3
 8005716:	21a5      	movs	r1, #165	@ 0xa5
 8005718:	f00f f80a 	bl	8014730 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005726:	3b01      	subs	r3, #1
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f023 0307 	bic.w	r3, r3, #7
 8005734:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	617b      	str	r3, [r7, #20]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01f      	beq.n	800579e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e012      	b.n	800578a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	7819      	ldrb	r1, [r3, #0]
 800576c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	3334      	adds	r3, #52	@ 0x34
 8005774:	460a      	mov	r2, r1
 8005776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b0f      	cmp	r3, #15
 800578e:	d9e9      	bls.n	8005764 <prvInitialiseNewTask+0x66>
 8005790:	e000      	b.n	8005794 <prvInitialiseNewTask+0x96>
			{
				break;
 8005792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800579c:	e003      	b.n	80057a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	2b37      	cmp	r3, #55	@ 0x37
 80057aa:	d901      	bls.n	80057b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057ac:	2337      	movs	r3, #55	@ 0x37
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f966 	bl	8004a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	3318      	adds	r3, #24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff f961 	bl	8004a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	2200      	movs	r2, #0
 80057f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	69b8      	ldr	r0, [r7, #24]
 8005800:	f001 f966 	bl	8006ad0 <pxPortInitialiseStack>
 8005804:	4602      	mov	r2, r0
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005816:	bf00      	nop
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005828:	f001 fa86 	bl	8006d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800582c:	4b2d      	ldr	r3, [pc, #180]	@ (80058e4 <prvAddNewTaskToReadyList+0xc4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	4a2c      	ldr	r2, [pc, #176]	@ (80058e4 <prvAddNewTaskToReadyList+0xc4>)
 8005834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005836:	4b2c      	ldr	r3, [pc, #176]	@ (80058e8 <prvAddNewTaskToReadyList+0xc8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800583e:	4a2a      	ldr	r2, [pc, #168]	@ (80058e8 <prvAddNewTaskToReadyList+0xc8>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005844:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <prvAddNewTaskToReadyList+0xc4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d110      	bne.n	800586e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800584c:	f000 fc46 	bl	80060dc <prvInitialiseTaskLists>
 8005850:	e00d      	b.n	800586e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005852:	4b26      	ldr	r3, [pc, #152]	@ (80058ec <prvAddNewTaskToReadyList+0xcc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800585a:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <prvAddNewTaskToReadyList+0xc8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	429a      	cmp	r2, r3
 8005866:	d802      	bhi.n	800586e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005868:	4a1f      	ldr	r2, [pc, #124]	@ (80058e8 <prvAddNewTaskToReadyList+0xc8>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800586e:	4b20      	ldr	r3, [pc, #128]	@ (80058f0 <prvAddNewTaskToReadyList+0xd0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <prvAddNewTaskToReadyList+0xd0>)
 8005876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005878:	4b1d      	ldr	r3, [pc, #116]	@ (80058f0 <prvAddNewTaskToReadyList+0xd0>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005884:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <prvAddNewTaskToReadyList+0xd4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d903      	bls.n	8005894 <prvAddNewTaskToReadyList+0x74>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	4a18      	ldr	r2, [pc, #96]	@ (80058f4 <prvAddNewTaskToReadyList+0xd4>)
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <prvAddNewTaskToReadyList+0xd8>)
 80058a2:	441a      	add	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7ff f901 	bl	8004ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058b0:	f001 fa74 	bl	8006d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058b4:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <prvAddNewTaskToReadyList+0xcc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <prvAddNewTaskToReadyList+0xc8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d207      	bcs.n	80058da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058ca:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <prvAddNewTaskToReadyList+0xdc>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000539c 	.word	0x2000539c
 80058e8:	20004ec8 	.word	0x20004ec8
 80058ec:	200053a8 	.word	0x200053a8
 80058f0:	200053b8 	.word	0x200053b8
 80058f4:	200053a4 	.word	0x200053a4
 80058f8:	20004ecc 	.word	0x20004ecc
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005912:	4b14      	ldr	r3, [pc, #80]	@ (8005964 <vTaskDelay+0x64>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <vTaskDelay+0x32>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60bb      	str	r3, [r7, #8]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005932:	f000 f883 	bl	8005a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005936:	2100      	movs	r1, #0
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fd1b 	bl	8006374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800593e:	f000 f88b 	bl	8005a58 <xTaskResumeAll>
 8005942:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800594a:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <vTaskDelay+0x68>)
 800594c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200053c4 	.word	0x200053c4
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	@ 0x28
 8005970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800597a:	463a      	mov	r2, r7
 800597c:	1d39      	adds	r1, r7, #4
 800597e:	f107 0308 	add.w	r3, r7, #8
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff f834 	bl	80049f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	9202      	str	r2, [sp, #8]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	2300      	movs	r3, #0
 8005998:	460a      	mov	r2, r1
 800599a:	4922      	ldr	r1, [pc, #136]	@ (8005a24 <vTaskStartScheduler+0xb8>)
 800599c:	4822      	ldr	r0, [pc, #136]	@ (8005a28 <vTaskStartScheduler+0xbc>)
 800599e:	f7ff fe09 	bl	80055b4 <xTaskCreateStatic>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <vTaskStartScheduler+0xc0>)
 80059a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059a8:	4b20      	ldr	r3, [pc, #128]	@ (8005a2c <vTaskStartScheduler+0xc0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e001      	b.n	80059ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d102      	bne.n	80059c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059c0:	f000 fd2c 	bl	800641c <xTimerCreateTimerTask>
 80059c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d116      	bne.n	80059fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	613b      	str	r3, [r7, #16]
}
 80059de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059e0:	4b13      	ldr	r3, [pc, #76]	@ (8005a30 <vTaskStartScheduler+0xc4>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059e8:	4b12      	ldr	r3, [pc, #72]	@ (8005a34 <vTaskStartScheduler+0xc8>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059ee:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <vTaskStartScheduler+0xcc>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059f4:	f001 f8fc 	bl	8006bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059f8:	e00f      	b.n	8005a1a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a00:	d10b      	bne.n	8005a1a <vTaskStartScheduler+0xae>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <vTaskStartScheduler+0xaa>
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	080156b4 	.word	0x080156b4
 8005a28:	080060ad 	.word	0x080060ad
 8005a2c:	200053c0 	.word	0x200053c0
 8005a30:	200053bc 	.word	0x200053bc
 8005a34:	200053a8 	.word	0x200053a8
 8005a38:	200053a0 	.word	0x200053a0

08005a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <vTaskSuspendAll+0x18>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a03      	ldr	r2, [pc, #12]	@ (8005a54 <vTaskSuspendAll+0x18>)
 8005a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	200053c4 	.word	0x200053c4

08005a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a66:	4b42      	ldr	r3, [pc, #264]	@ (8005b70 <xTaskResumeAll+0x118>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <xTaskResumeAll+0x2e>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	603b      	str	r3, [r7, #0]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a86:	f001 f957 	bl	8006d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a8a:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <xTaskResumeAll+0x118>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a37      	ldr	r2, [pc, #220]	@ (8005b70 <xTaskResumeAll+0x118>)
 8005a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a94:	4b36      	ldr	r3, [pc, #216]	@ (8005b70 <xTaskResumeAll+0x118>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d162      	bne.n	8005b62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a9c:	4b35      	ldr	r3, [pc, #212]	@ (8005b74 <xTaskResumeAll+0x11c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05e      	beq.n	8005b62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aa4:	e02f      	b.n	8005b06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa6:	4b34      	ldr	r3, [pc, #208]	@ (8005b78 <xTaskResumeAll+0x120>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3318      	adds	r3, #24
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff f85a 	bl	8004b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff f855 	bl	8004b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b7c <xTaskResumeAll+0x124>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d903      	bls.n	8005ad6 <xTaskResumeAll+0x7e>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b7c <xTaskResumeAll+0x124>)
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4a27      	ldr	r2, [pc, #156]	@ (8005b80 <xTaskResumeAll+0x128>)
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f7fe ffe0 	bl	8004ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af6:	4b23      	ldr	r3, [pc, #140]	@ (8005b84 <xTaskResumeAll+0x12c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b00:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <xTaskResumeAll+0x130>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b06:	4b1c      	ldr	r3, [pc, #112]	@ (8005b78 <xTaskResumeAll+0x120>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1cb      	bne.n	8005aa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b14:	f000 fb80 	bl	8006218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b18:	4b1c      	ldr	r3, [pc, #112]	@ (8005b8c <xTaskResumeAll+0x134>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b24:	f000 f846 	bl	8005bb4 <xTaskIncrementTick>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b2e:	4b16      	ldr	r3, [pc, #88]	@ (8005b88 <xTaskResumeAll+0x130>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f1      	bne.n	8005b24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005b40:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <xTaskResumeAll+0x134>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b46:	4b10      	ldr	r3, [pc, #64]	@ (8005b88 <xTaskResumeAll+0x130>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b52:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <xTaskResumeAll+0x138>)
 8005b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b62:	f001 f91b 	bl	8006d9c <vPortExitCritical>

	return xAlreadyYielded;
 8005b66:	68bb      	ldr	r3, [r7, #8]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200053c4 	.word	0x200053c4
 8005b74:	2000539c 	.word	0x2000539c
 8005b78:	2000535c 	.word	0x2000535c
 8005b7c:	200053a4 	.word	0x200053a4
 8005b80:	20004ecc 	.word	0x20004ecc
 8005b84:	20004ec8 	.word	0x20004ec8
 8005b88:	200053b0 	.word	0x200053b0
 8005b8c:	200053ac 	.word	0x200053ac
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b9a:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <xTaskGetTickCount+0x1c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ba0:	687b      	ldr	r3, [r7, #4]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	200053a0 	.word	0x200053a0

08005bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8005cfc <xTaskIncrementTick+0x148>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f040 8090 	bne.w	8005ce8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d00 <xTaskIncrementTick+0x14c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8005d00 <xTaskIncrementTick+0x14c>)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d121      	bne.n	8005c20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bdc:	4b49      	ldr	r3, [pc, #292]	@ (8005d04 <xTaskIncrementTick+0x150>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <xTaskIncrementTick+0x46>
 8005bfe:	4b41      	ldr	r3, [pc, #260]	@ (8005d04 <xTaskIncrementTick+0x150>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	4b40      	ldr	r3, [pc, #256]	@ (8005d08 <xTaskIncrementTick+0x154>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3e      	ldr	r2, [pc, #248]	@ (8005d04 <xTaskIncrementTick+0x150>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d08 <xTaskIncrementTick+0x154>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <xTaskIncrementTick+0x158>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	4a3c      	ldr	r2, [pc, #240]	@ (8005d0c <xTaskIncrementTick+0x158>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	f000 fafc 	bl	8006218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c20:	4b3b      	ldr	r3, [pc, #236]	@ (8005d10 <xTaskIncrementTick+0x15c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d349      	bcc.n	8005cbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c2a:	4b36      	ldr	r3, [pc, #216]	@ (8005d04 <xTaskIncrementTick+0x150>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c34:	4b36      	ldr	r3, [pc, #216]	@ (8005d10 <xTaskIncrementTick+0x15c>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c3a:	601a      	str	r2, [r3, #0]
					break;
 8005c3c:	e03f      	b.n	8005cbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3e:	4b31      	ldr	r3, [pc, #196]	@ (8005d04 <xTaskIncrementTick+0x150>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d203      	bcs.n	8005c5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c56:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <xTaskIncrementTick+0x15c>)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c5c:	e02f      	b.n	8005cbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe ff82 	bl	8004b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3318      	adds	r3, #24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe ff79 	bl	8004b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7e:	4b25      	ldr	r3, [pc, #148]	@ (8005d14 <xTaskIncrementTick+0x160>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d903      	bls.n	8005c8e <xTaskIncrementTick+0xda>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	4a22      	ldr	r2, [pc, #136]	@ (8005d14 <xTaskIncrementTick+0x160>)
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <xTaskIncrementTick+0x164>)
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7fe ff04 	bl	8004ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cae:	4b1b      	ldr	r3, [pc, #108]	@ (8005d1c <xTaskIncrementTick+0x168>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3b8      	bcc.n	8005c2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cbc:	e7b5      	b.n	8005c2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cbe:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <xTaskIncrementTick+0x168>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	4914      	ldr	r1, [pc, #80]	@ (8005d18 <xTaskIncrementTick+0x164>)
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d901      	bls.n	8005cda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cda:	4b11      	ldr	r3, [pc, #68]	@ (8005d20 <xTaskIncrementTick+0x16c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e004      	b.n	8005cf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <xTaskIncrementTick+0x170>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a0d      	ldr	r2, [pc, #52]	@ (8005d24 <xTaskIncrementTick+0x170>)
 8005cf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cf2:	697b      	ldr	r3, [r7, #20]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200053c4 	.word	0x200053c4
 8005d00:	200053a0 	.word	0x200053a0
 8005d04:	20005354 	.word	0x20005354
 8005d08:	20005358 	.word	0x20005358
 8005d0c:	200053b4 	.word	0x200053b4
 8005d10:	200053bc 	.word	0x200053bc
 8005d14:	200053a4 	.word	0x200053a4
 8005d18:	20004ecc 	.word	0x20004ecc
 8005d1c:	20004ec8 	.word	0x20004ec8
 8005d20:	200053b0 	.word	0x200053b0
 8005d24:	200053ac 	.word	0x200053ac

08005d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d2e:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <vTaskSwitchContext+0xa8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d36:	4b27      	ldr	r3, [pc, #156]	@ (8005dd4 <vTaskSwitchContext+0xac>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d3c:	e042      	b.n	8005dc4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005d3e:	4b25      	ldr	r3, [pc, #148]	@ (8005dd4 <vTaskSwitchContext+0xac>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d44:	4b24      	ldr	r3, [pc, #144]	@ (8005dd8 <vTaskSwitchContext+0xb0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e011      	b.n	8005d70 <vTaskSwitchContext+0x48>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <vTaskSwitchContext+0x42>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	607b      	str	r3, [r7, #4]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <vTaskSwitchContext+0x3e>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	491a      	ldr	r1, [pc, #104]	@ (8005ddc <vTaskSwitchContext+0xb4>)
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0e3      	beq.n	8005d4c <vTaskSwitchContext+0x24>
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <vTaskSwitchContext+0xb4>)
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3308      	adds	r3, #8
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d104      	bne.n	8005db4 <vTaskSwitchContext+0x8c>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4a09      	ldr	r2, [pc, #36]	@ (8005de0 <vTaskSwitchContext+0xb8>)
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	4a06      	ldr	r2, [pc, #24]	@ (8005dd8 <vTaskSwitchContext+0xb0>)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6013      	str	r3, [r2, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	200053c4 	.word	0x200053c4
 8005dd4:	200053b0 	.word	0x200053b0
 8005dd8:	200053a4 	.word	0x200053a4
 8005ddc:	20004ecc 	.word	0x20004ecc
 8005de0:	20004ec8 	.word	0x20004ec8

08005de4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60fb      	str	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e0c:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <vTaskPlaceOnEventList+0x48>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3318      	adds	r3, #24
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fe fe70 	bl	8004afa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	6838      	ldr	r0, [r7, #0]
 8005e1e:	f000 faa9 	bl	8006374 <prvAddCurrentTaskToDelayedList>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20004ec8 	.word	0x20004ec8

08005e30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	617b      	str	r3, [r7, #20]
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3318      	adds	r3, #24
 8005e60:	4619      	mov	r1, r3
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7fe fe25 	bl	8004ab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	68b8      	ldr	r0, [r7, #8]
 8005e78:	f000 fa7c 	bl	8006374 <prvAddCurrentTaskToDelayedList>
	}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20004ec8 	.word	0x20004ec8

08005e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	60fb      	str	r3, [r7, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fe56 	bl	8004b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f38 <xTaskRemoveFromEventList+0xb0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11d      	bne.n	8005f04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fe4d 	bl	8004b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed6:	4b19      	ldr	r3, [pc, #100]	@ (8005f3c <xTaskRemoveFromEventList+0xb4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <xTaskRemoveFromEventList+0x5e>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <xTaskRemoveFromEventList+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a13      	ldr	r2, [pc, #76]	@ (8005f40 <xTaskRemoveFromEventList+0xb8>)
 8005ef4:	441a      	add	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe fdd8 	bl	8004ab2 <vListInsertEnd>
 8005f02:	e005      	b.n	8005f10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3318      	adds	r3, #24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	480e      	ldr	r0, [pc, #56]	@ (8005f44 <xTaskRemoveFromEventList+0xbc>)
 8005f0c:	f7fe fdd1 	bl	8004ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f14:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <xTaskRemoveFromEventList+0xc0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d905      	bls.n	8005f2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <xTaskRemoveFromEventList+0xc4>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e001      	b.n	8005f2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	200053c4 	.word	0x200053c4
 8005f3c:	200053a4 	.word	0x200053a4
 8005f40:	20004ecc 	.word	0x20004ecc
 8005f44:	2000535c 	.word	0x2000535c
 8005f48:	20004ec8 	.word	0x20004ec8
 8005f4c:	200053b0 	.word	0x200053b0

08005f50 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	60fb      	str	r3, [r7, #12]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005f76:	f000 fedf 	bl	8006d38 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f7a:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <vTaskSetTimeOutState+0x48>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <vTaskSetTimeOutState+0x4c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005f8a:	f000 ff07 	bl	8006d9c <vPortExitCritical>
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200053b4 	.word	0x200053b4
 8005f9c:	200053a0 	.word	0x200053a0

08005fa0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <vTaskInternalSetTimeOutState+0x24>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <vTaskInternalSetTimeOutState+0x28>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	605a      	str	r2, [r3, #4]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	200053b4 	.word	0x200053b4
 8005fc8:	200053a0 	.word	0x200053a0

08005fcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	613b      	str	r3, [r7, #16]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60fb      	str	r3, [r7, #12]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006012:	f000 fe91 	bl	8006d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006016:	4b1d      	ldr	r3, [pc, #116]	@ (800608c <xTaskCheckForTimeOut+0xc0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800602e:	d102      	bne.n	8006036 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	e023      	b.n	800607e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <xTaskCheckForTimeOut+0xc4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d007      	beq.n	8006052 <xTaskCheckForTimeOut+0x86>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e015      	b.n	800607e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d20b      	bcs.n	8006074 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ff99 	bl	8005fa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e004      	b.n	800607e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800607e:	f000 fe8d 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 8006082:	69fb      	ldr	r3, [r7, #28]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	200053a0 	.word	0x200053a0
 8006090:	200053b4 	.word	0x200053b4

08006094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006098:	4b03      	ldr	r3, [pc, #12]	@ (80060a8 <vTaskMissedYield+0x14>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	200053b0 	.word	0x200053b0

080060ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060b4:	f000 f852 	bl	800615c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <prvIdleTask+0x28>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d9f9      	bls.n	80060b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <prvIdleTask+0x2c>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d0:	e7f0      	b.n	80060b4 <prvIdleTask+0x8>
 80060d2:	bf00      	nop
 80060d4:	20004ecc 	.word	0x20004ecc
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	e00c      	b.n	8006102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4a12      	ldr	r2, [pc, #72]	@ (800613c <prvInitialiseTaskLists+0x60>)
 80060f4:	4413      	add	r3, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fcae 	bl	8004a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b37      	cmp	r3, #55	@ 0x37
 8006106:	d9ef      	bls.n	80060e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006108:	480d      	ldr	r0, [pc, #52]	@ (8006140 <prvInitialiseTaskLists+0x64>)
 800610a:	f7fe fca5 	bl	8004a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800610e:	480d      	ldr	r0, [pc, #52]	@ (8006144 <prvInitialiseTaskLists+0x68>)
 8006110:	f7fe fca2 	bl	8004a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006114:	480c      	ldr	r0, [pc, #48]	@ (8006148 <prvInitialiseTaskLists+0x6c>)
 8006116:	f7fe fc9f 	bl	8004a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800611a:	480c      	ldr	r0, [pc, #48]	@ (800614c <prvInitialiseTaskLists+0x70>)
 800611c:	f7fe fc9c 	bl	8004a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006120:	480b      	ldr	r0, [pc, #44]	@ (8006150 <prvInitialiseTaskLists+0x74>)
 8006122:	f7fe fc99 	bl	8004a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <prvInitialiseTaskLists+0x78>)
 8006128:	4a05      	ldr	r2, [pc, #20]	@ (8006140 <prvInitialiseTaskLists+0x64>)
 800612a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <prvInitialiseTaskLists+0x7c>)
 800612e:	4a05      	ldr	r2, [pc, #20]	@ (8006144 <prvInitialiseTaskLists+0x68>)
 8006130:	601a      	str	r2, [r3, #0]
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20004ecc 	.word	0x20004ecc
 8006140:	2000532c 	.word	0x2000532c
 8006144:	20005340 	.word	0x20005340
 8006148:	2000535c 	.word	0x2000535c
 800614c:	20005370 	.word	0x20005370
 8006150:	20005388 	.word	0x20005388
 8006154:	20005354 	.word	0x20005354
 8006158:	20005358 	.word	0x20005358

0800615c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006162:	e019      	b.n	8006198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006164:	f000 fde8 	bl	8006d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006168:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <prvCheckTasksWaitingTermination+0x50>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fcf9 	bl	8004b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800617a:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3b01      	subs	r3, #1
 8006180:	4a0b      	ldr	r2, [pc, #44]	@ (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 8006182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006184:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	4a0a      	ldr	r2, [pc, #40]	@ (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 800618c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800618e:	f000 fe05 	bl	8006d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f810 	bl	80061b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006198:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e1      	bne.n	8006164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20005370 	.word	0x20005370
 80061b0:	2000539c 	.word	0x2000539c
 80061b4:	20005384 	.word	0x20005384

080061b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 ffa2 	bl	8007118 <vPortFree>
				vPortFree( pxTCB );
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 ff9f 	bl	8007118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061da:	e019      	b.n	8006210 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d103      	bne.n	80061ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 ff96 	bl	8007118 <vPortFree>
	}
 80061ec:	e010      	b.n	8006210 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d00b      	beq.n	8006210 <prvDeleteTCB+0x58>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60fb      	str	r3, [r7, #12]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <prvDeleteTCB+0x54>
	}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621e:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <prvResetNextTaskUnblockTime+0x38>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006228:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <prvResetNextTaskUnblockTime+0x3c>)
 800622a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800622e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006230:	e008      	b.n	8006244 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <prvResetNextTaskUnblockTime+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a04      	ldr	r2, [pc, #16]	@ (8006254 <prvResetNextTaskUnblockTime+0x3c>)
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20005354 	.word	0x20005354
 8006254:	200053bc 	.word	0x200053bc

08006258 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <xTaskGetSchedulerState+0x34>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006266:	2301      	movs	r3, #1
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	e008      	b.n	800627e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626c:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <xTaskGetSchedulerState+0x38>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006274:	2302      	movs	r3, #2
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	e001      	b.n	800627e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800627e:	687b      	ldr	r3, [r7, #4]
	}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	200053a8 	.word	0x200053a8
 8006290:	200053c4 	.word	0x200053c4

08006294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d058      	beq.n	800635c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006368 <xTaskPriorityDisinherit+0xd4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d00b      	beq.n	80062cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60bb      	str	r3, [r7, #8]
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d02c      	beq.n	800635c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	2b00      	cmp	r3, #0
 8006308:	d128      	bne.n	800635c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3304      	adds	r3, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fc2c 	bl	8004b6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006320:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <xTaskPriorityDisinherit+0xd8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <xTaskPriorityDisinherit+0xa8>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	4a0c      	ldr	r2, [pc, #48]	@ (800636c <xTaskPriorityDisinherit+0xd8>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a09      	ldr	r2, [pc, #36]	@ (8006370 <xTaskPriorityDisinherit+0xdc>)
 800634a:	441a      	add	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe fbad 	bl	8004ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800635c:	697b      	ldr	r3, [r7, #20]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20004ec8 	.word	0x20004ec8
 800636c:	200053a4 	.word	0x200053a4
 8006370:	20004ecc 	.word	0x20004ecc

08006374 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800637e:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <prvAddCurrentTaskToDelayedList+0x90>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006384:	4b20      	ldr	r3, [pc, #128]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fbee 	bl	8004b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006396:	d10a      	bne.n	80063ae <prvAddCurrentTaskToDelayedList+0x3a>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800639e:	4b1a      	ldr	r3, [pc, #104]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4819      	ldr	r0, [pc, #100]	@ (800640c <prvAddCurrentTaskToDelayedList+0x98>)
 80063a8:	f7fe fb83 	bl	8004ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063ac:	e026      	b.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d209      	bcs.n	80063da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fb91 	bl	8004afa <vListInsert>
}
 80063d8:	e010      	b.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063da:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fb87 	bl	8004afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d202      	bcs.n	80063fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	200053a0 	.word	0x200053a0
 8006408:	20004ec8 	.word	0x20004ec8
 800640c:	20005388 	.word	0x20005388
 8006410:	20005358 	.word	0x20005358
 8006414:	20005354 	.word	0x20005354
 8006418:	200053bc 	.word	0x200053bc

0800641c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	@ 0x28
 8006420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006426:	f000 fb13 	bl	8006a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800642a:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <xTimerCreateTimerTask+0x84>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d021      	beq.n	8006476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800643a:	1d3a      	adds	r2, r7, #4
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	f107 030c 	add.w	r3, r7, #12
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe faed 	bl	8004a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	2302      	movs	r3, #2
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	460a      	mov	r2, r1
 800645c:	4911      	ldr	r1, [pc, #68]	@ (80064a4 <xTimerCreateTimerTask+0x88>)
 800645e:	4812      	ldr	r0, [pc, #72]	@ (80064a8 <xTimerCreateTimerTask+0x8c>)
 8006460:	f7ff f8a8 	bl	80055b4 <xTaskCreateStatic>
 8006464:	4603      	mov	r3, r0
 8006466:	4a11      	ldr	r2, [pc, #68]	@ (80064ac <xTimerCreateTimerTask+0x90>)
 8006468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <xTimerCreateTimerTask+0x90>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006472:	2301      	movs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	613b      	str	r3, [r7, #16]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006494:	697b      	ldr	r3, [r7, #20]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200053f8 	.word	0x200053f8
 80064a4:	080156bc 	.word	0x080156bc
 80064a8:	080065e9 	.word	0x080065e9
 80064ac:	200053fc 	.word	0x200053fc

080064b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	@ 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	623b      	str	r3, [r7, #32]
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064e0:	4b19      	ldr	r3, [pc, #100]	@ (8006548 <xTimerGenericCommand+0x98>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02a      	beq.n	800653e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	dc18      	bgt.n	800652c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064fa:	f7ff fead 	bl	8006258 <xTaskGetSchedulerState>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b02      	cmp	r3, #2
 8006502:	d109      	bne.n	8006518 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006504:	4b10      	ldr	r3, [pc, #64]	@ (8006548 <xTimerGenericCommand+0x98>)
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	f107 0110 	add.w	r1, r7, #16
 800650c:	2300      	movs	r3, #0
 800650e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006510:	f7fe fc60 	bl	8004dd4 <xQueueGenericSend>
 8006514:	6278      	str	r0, [r7, #36]	@ 0x24
 8006516:	e012      	b.n	800653e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <xTimerGenericCommand+0x98>)
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	f107 0110 	add.w	r1, r7, #16
 8006520:	2300      	movs	r3, #0
 8006522:	2200      	movs	r2, #0
 8006524:	f7fe fc56 	bl	8004dd4 <xQueueGenericSend>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24
 800652a:	e008      	b.n	800653e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <xTimerGenericCommand+0x98>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	f107 0110 	add.w	r1, r7, #16
 8006534:	2300      	movs	r3, #0
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	f7fe fd4e 	bl	8004fd8 <xQueueGenericSendFromISR>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006540:	4618      	mov	r0, r3
 8006542:	3728      	adds	r7, #40	@ 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	200053f8 	.word	0x200053f8

0800654c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af02      	add	r7, sp, #8
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006556:	4b23      	ldr	r3, [pc, #140]	@ (80065e4 <prvProcessExpiredTimer+0x98>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	3304      	adds	r3, #4
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fb01 	bl	8004b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d023      	beq.n	80065c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	18d1      	adds	r1, r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	6978      	ldr	r0, [r7, #20]
 8006586:	f000 f8d5 	bl	8006734 <prvInsertTimerInActiveList>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d020      	beq.n	80065d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006590:	2300      	movs	r3, #0
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	2100      	movs	r1, #0
 800659a:	6978      	ldr	r0, [r7, #20]
 800659c:	f7ff ff88 	bl	80064b0 <xTimerGenericCommand>
 80065a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d114      	bne.n	80065d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	6978      	ldr	r0, [r7, #20]
 80065d8:	4798      	blx	r3
}
 80065da:	bf00      	nop
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200053f0 	.word	0x200053f0

080065e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065f0:	f107 0308 	add.w	r3, r7, #8
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f859 	bl	80066ac <prvGetNextExpireTime>
 80065fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4619      	mov	r1, r3
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f805 	bl	8006610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006606:	f000 f8d7 	bl	80067b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800660a:	bf00      	nop
 800660c:	e7f0      	b.n	80065f0 <prvTimerTask+0x8>
	...

08006610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800661a:	f7ff fa0f 	bl	8005a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f866 	bl	80066f4 <prvSampleTimeNow>
 8006628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d130      	bne.n	8006692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <prvProcessTimerOrBlockTask+0x3c>
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d806      	bhi.n	800664c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800663e:	f7ff fa0b 	bl	8005a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff ff81 	bl	800654c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800664a:	e024      	b.n	8006696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006652:	4b13      	ldr	r3, [pc, #76]	@ (80066a0 <prvProcessTimerOrBlockTask+0x90>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <prvProcessTimerOrBlockTask+0x50>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <prvProcessTimerOrBlockTask+0x52>
 8006660:	2300      	movs	r3, #0
 8006662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006664:	4b0f      	ldr	r3, [pc, #60]	@ (80066a4 <prvProcessTimerOrBlockTask+0x94>)
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	f7fe ff6b 	bl	800554c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006676:	f7ff f9ef 	bl	8005a58 <xTaskResumeAll>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006680:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <prvProcessTimerOrBlockTask+0x98>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
}
 8006690:	e001      	b.n	8006696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006692:	f7ff f9e1 	bl	8005a58 <xTaskResumeAll>
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200053f4 	.word	0x200053f4
 80066a4:	200053f8 	.word	0x200053f8
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066b4:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <prvGetNextExpireTime+0x44>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <prvGetNextExpireTime+0x16>
 80066be:	2201      	movs	r2, #1
 80066c0:	e000      	b.n	80066c4 <prvGetNextExpireTime+0x18>
 80066c2:	2200      	movs	r2, #0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <prvGetNextExpireTime+0x44>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e001      	b.n	80066e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	200053f0 	.word	0x200053f0

080066f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066fc:	f7ff fa4a 	bl	8005b94 <xTaskGetTickCount>
 8006700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006702:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <prvSampleTimeNow+0x3c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	429a      	cmp	r2, r3
 800670a:	d205      	bcs.n	8006718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800670c:	f000 f93a 	bl	8006984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e002      	b.n	800671e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800671e:	4a04      	ldr	r2, [pc, #16]	@ (8006730 <prvSampleTimeNow+0x3c>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006724:	68fb      	ldr	r3, [r7, #12]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20005400 	.word	0x20005400

08006734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d812      	bhi.n	8006780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	429a      	cmp	r2, r3
 8006766:	d302      	bcc.n	800676e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e01b      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800676e:	4b10      	ldr	r3, [pc, #64]	@ (80067b0 <prvInsertTimerInActiveList+0x7c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe f9be 	bl	8004afa <vListInsert>
 800677e:	e012      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d206      	bcs.n	8006796 <prvInsertTimerInActiveList+0x62>
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e007      	b.n	80067a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <prvInsertTimerInActiveList+0x80>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fe f9aa 	bl	8004afa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067a6:	697b      	ldr	r3, [r7, #20]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200053f4 	.word	0x200053f4
 80067b4:	200053f0 	.word	0x200053f0

080067b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	@ 0x38
 80067bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067be:	e0ce      	b.n	800695e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da19      	bge.n	80067fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	3304      	adds	r3, #4
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61fb      	str	r3, [r7, #28]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f0:	6850      	ldr	r0, [r2, #4]
 80067f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f4:	6892      	ldr	r2, [r2, #8]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f2c0 80ae 	blt.w	800695e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	3304      	adds	r3, #4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe f9aa 	bl	8004b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006818:	463b      	mov	r3, r7
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff ff6a 	bl	80066f4 <prvSampleTimeNow>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b09      	cmp	r3, #9
 8006826:	f200 8097 	bhi.w	8006958 <prvProcessReceivedCommands+0x1a0>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <prvProcessReceivedCommands+0x78>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006859 	.word	0x08006859
 8006834:	08006859 	.word	0x08006859
 8006838:	08006859 	.word	0x08006859
 800683c:	080068cf 	.word	0x080068cf
 8006840:	080068e3 	.word	0x080068e3
 8006844:	0800692f 	.word	0x0800692f
 8006848:	08006859 	.word	0x08006859
 800684c:	08006859 	.word	0x08006859
 8006850:	080068cf 	.word	0x080068cf
 8006854:	080068e3 	.word	0x080068e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	18d1      	adds	r1, r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006878:	f7ff ff5c 	bl	8006734 <prvInsertTimerInActiveList>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d06c      	beq.n	800695c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d061      	beq.n	800695c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	441a      	add	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068aa:	f7ff fe01 	bl	80064b0 <xTimerGenericCommand>
 80068ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d152      	bne.n	800695c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61bb      	str	r3, [r7, #24]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80068e0:	e03d      	b.n	800695e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	617b      	str	r3, [r7, #20]
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	18d1      	adds	r1, r2, r3
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006928:	f7ff ff04 	bl	8006734 <prvInsertTimerInActiveList>
					break;
 800692c:	e017      	b.n	800695e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d103      	bne.n	8006944 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800693c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800693e:	f000 fbeb 	bl	8007118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006942:	e00c      	b.n	800695e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006956:	e002      	b.n	800695e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <prvProcessReceivedCommands+0x1a6>
					break;
 800695c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800695e:	4b08      	ldr	r3, [pc, #32]	@ (8006980 <prvProcessReceivedCommands+0x1c8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1d39      	adds	r1, r7, #4
 8006964:	2200      	movs	r2, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fbd4 	bl	8005114 <xQueueReceive>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	f47f af26 	bne.w	80067c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3730      	adds	r7, #48	@ 0x30
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200053f8 	.word	0x200053f8

08006984 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800698a:	e049      	b.n	8006a20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800698c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006996:	4b2c      	ldr	r3, [pc, #176]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe f8e1 	bl	8004b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02f      	beq.n	8006a20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d90e      	bls.n	80069f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069de:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fe f886 	bl	8004afa <vListInsert>
 80069ee:	e017      	b.n	8006a20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fd58 	bl	80064b0 <xTimerGenericCommand>
 8006a00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	603b      	str	r3, [r7, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	e7fd      	b.n	8006a1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a20:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1b0      	bne.n	800698c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a2a:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <prvSwitchTimerLists+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a04      	ldr	r2, [pc, #16]	@ (8006a48 <prvSwitchTimerLists+0xc4>)
 8006a36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a38:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <prvSwitchTimerLists+0xc8>)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200053f0 	.word	0x200053f0
 8006a4c:	200053f4 	.word	0x200053f4

08006a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a56:	f000 f96f 	bl	8006d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a5a:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <prvCheckForValidListAndQueue+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d120      	bne.n	8006aa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a62:	4814      	ldr	r0, [pc, #80]	@ (8006ab4 <prvCheckForValidListAndQueue+0x64>)
 8006a64:	f7fd fff8 	bl	8004a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a68:	4813      	ldr	r0, [pc, #76]	@ (8006ab8 <prvCheckForValidListAndQueue+0x68>)
 8006a6a:	f7fd fff5 	bl	8004a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a6e:	4b13      	ldr	r3, [pc, #76]	@ (8006abc <prvCheckForValidListAndQueue+0x6c>)
 8006a70:	4a10      	ldr	r2, [pc, #64]	@ (8006ab4 <prvCheckForValidListAndQueue+0x64>)
 8006a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a74:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <prvCheckForValidListAndQueue+0x70>)
 8006a76:	4a10      	ldr	r2, [pc, #64]	@ (8006ab8 <prvCheckForValidListAndQueue+0x68>)
 8006a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4b11      	ldr	r3, [pc, #68]	@ (8006ac4 <prvCheckForValidListAndQueue+0x74>)
 8006a80:	4a11      	ldr	r2, [pc, #68]	@ (8006ac8 <prvCheckForValidListAndQueue+0x78>)
 8006a82:	2110      	movs	r1, #16
 8006a84:	200a      	movs	r0, #10
 8006a86:	f7fe f905 	bl	8004c94 <xQueueGenericCreateStatic>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4a08      	ldr	r2, [pc, #32]	@ (8006ab0 <prvCheckForValidListAndQueue+0x60>)
 8006a8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <prvCheckForValidListAndQueue+0x60>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <prvCheckForValidListAndQueue+0x60>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	490b      	ldr	r1, [pc, #44]	@ (8006acc <prvCheckForValidListAndQueue+0x7c>)
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fd2a 	bl	80054f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aa4:	f000 f97a 	bl	8006d9c <vPortExitCritical>
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200053f8 	.word	0x200053f8
 8006ab4:	200053c8 	.word	0x200053c8
 8006ab8:	200053dc 	.word	0x200053dc
 8006abc:	200053f0 	.word	0x200053f0
 8006ac0:	200053f4 	.word	0x200053f4
 8006ac4:	200054a4 	.word	0x200054a4
 8006ac8:	20005404 	.word	0x20005404
 8006acc:	080156c4 	.word	0x080156c4

08006ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b00:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <pxPortInitialiseStack+0x64>)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b14      	subs	r3, #20
 8006b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f06f 0202 	mvn.w	r2, #2
 8006b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3b20      	subs	r3, #32
 8006b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b26:	68fb      	ldr	r3, [r7, #12]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	08006b39 	.word	0x08006b39

08006b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b42:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <prvTaskExitError+0x58>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4a:	d00b      	beq.n	8006b64 <prvTaskExitError+0x2c>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60fb      	str	r3, [r7, #12]
}
 8006b5e:	bf00      	nop
 8006b60:	bf00      	nop
 8006b62:	e7fd      	b.n	8006b60 <prvTaskExitError+0x28>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	60bb      	str	r3, [r7, #8]
}
 8006b76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b78:	bf00      	nop
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0fc      	beq.n	8006b7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000010 	.word	0x20000010
	...

08006ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ba0:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <pxCurrentTCBConst2>)
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	6808      	ldr	r0, [r1, #0]
 8006ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	f380 8809 	msr	PSP, r0
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	4770      	bx	lr
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst2>:
 8006bc0:	20004ec8 	.word	0x20004ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bc8:	4808      	ldr	r0, [pc, #32]	@ (8006bec <prvPortStartFirstTask+0x24>)
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	f380 8808 	msr	MSP, r0
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8814 	msr	CONTROL, r0
 8006bda:	b662      	cpsie	i
 8006bdc:	b661      	cpsie	f
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	df00      	svc	0
 8006be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bea:	bf00      	nop
 8006bec:	e000ed08 	.word	0xe000ed08

08006bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bf6:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a47      	ldr	r2, [pc, #284]	@ (8006d18 <xPortStartScheduler+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10b      	bne.n	8006c18 <xPortStartScheduler+0x28>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <xPortStartScheduler+0x12c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10b      	bne.n	8006c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60fb      	str	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c3a:	4b39      	ldr	r3, [pc, #228]	@ (8006d20 <xPortStartScheduler+0x130>)
 8006c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	22ff      	movs	r2, #255	@ 0xff
 8006c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <xPortStartScheduler+0x134>)
 8006c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c64:	2207      	movs	r2, #7
 8006c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c68:	e009      	b.n	8006c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c86:	2b80      	cmp	r3, #128	@ 0x80
 8006c88:	d0ef      	beq.n	8006c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c8a:	4b27      	ldr	r3, [pc, #156]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1c3 0307 	rsb	r3, r3, #7
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d00b      	beq.n	8006cae <xPortStartScheduler+0xbe>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc0:	4a19      	ldr	r2, [pc, #100]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ccc:	4b17      	ldr	r3, [pc, #92]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cd8:	4b14      	ldr	r3, [pc, #80]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ce4:	f000 f8da 	bl	8006e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	@ (8006d30 <xPortStartScheduler+0x140>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cee:	f000 f8f9 	bl	8006ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cfe:	f7ff ff63 	bl	8006bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d02:	f7ff f811 	bl	8005d28 <vTaskSwitchContext>
	prvTaskExitError();
 8006d06:	f7ff ff17 	bl	8006b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed00 	.word	0xe000ed00
 8006d18:	410fc271 	.word	0x410fc271
 8006d1c:	410fc270 	.word	0x410fc270
 8006d20:	e000e400 	.word	0xe000e400
 8006d24:	200054f4 	.word	0x200054f4
 8006d28:	200054f8 	.word	0x200054f8
 8006d2c:	e000ed20 	.word	0xe000ed20
 8006d30:	20000010 	.word	0x20000010
 8006d34:	e000ef34 	.word	0xe000ef34

08006d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a0e      	ldr	r2, [pc, #56]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d110      	bne.n	8006d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d64:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <vPortEnterCritical+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	603b      	str	r3, [r7, #0]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vPortEnterCritical+0x4a>
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000010 	.word	0x20000010
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <vPortExitCritical+0x50>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <vPortExitCritical+0x26>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <vPortExitCritical+0x50>)
 8006dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <vPortExitCritical+0x50>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <vPortExitCritical+0x44>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	20000010 	.word	0x20000010

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b15      	ldr	r3, [pc, #84]	@ (8006e50 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f01e 0f10 	tst.w	lr, #16
 8006e00:	bf08      	it	eq
 8006e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e14:	f380 8811 	msr	BASEPRI, r0
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f7fe ff82 	bl	8005d28 <vTaskSwitchContext>
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f380 8811 	msr	BASEPRI, r0
 8006e2c:	bc09      	pop	{r0, r3}
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	6808      	ldr	r0, [r1, #0]
 8006e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e36:	f01e 0f10 	tst.w	lr, #16
 8006e3a:	bf08      	it	eq
 8006e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e40:	f380 8809 	msr	PSP, r0
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	f3af 8000 	nop.w

08006e50 <pxCurrentTCBConst>:
 8006e50:	20004ec8 	.word	0x20004ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e72:	f7fe fe9f 	bl	8005bb4 <xTaskIncrementTick>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <xPortSysTickHandler+0x40>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <vPortSetupTimerInterrupt+0x38>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <vPortSetupTimerInterrupt+0x3c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006edc <vPortSetupTimerInterrupt+0x40>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ee0 <vPortSetupTimerInterrupt+0x44>)
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ebe:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e010 	.word	0xe000e010
 8006ed4:	e000e018 	.word	0xe000e018
 8006ed8:	20000004 	.word	0x20000004
 8006edc:	10624dd3 	.word	0x10624dd3
 8006ee0:	e000e014 	.word	0xe000e014

08006ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ef4 <vPortEnableVFP+0x10>
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006eee:	6001      	str	r1, [r0, #0]
 8006ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed88 	.word	0xe000ed88

08006ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006efe:	f3ef 8305 	mrs	r3, IPSR
 8006f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d915      	bls.n	8006f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f0a:	4a18      	ldr	r2, [pc, #96]	@ (8006f6c <vPortValidateInterruptPriority+0x74>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f14:	4b16      	ldr	r3, [pc, #88]	@ (8006f70 <vPortValidateInterruptPriority+0x78>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	7afa      	ldrb	r2, [r7, #11]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d20b      	bcs.n	8006f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	607b      	str	r3, [r7, #4]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f36:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <vPortValidateInterruptPriority+0x7c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f78 <vPortValidateInterruptPriority+0x80>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d90b      	bls.n	8006f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	603b      	str	r3, [r7, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vPortValidateInterruptPriority+0x62>
	}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	e000e3f0 	.word	0xe000e3f0
 8006f70:	200054f4 	.word	0x200054f4
 8006f74:	e000ed0c 	.word	0xe000ed0c
 8006f78:	200054f8 	.word	0x200054f8

08006f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	@ 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f88:	f7fe fd58 	bl	8005a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8007100 <pvPortMalloc+0x184>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f94:	f000 f924 	bl	80071e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f98:	4b5a      	ldr	r3, [pc, #360]	@ (8007104 <pvPortMalloc+0x188>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8095 	bne.w	80070d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fac:	2208      	movs	r2, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f023 0307 	bic.w	r3, r3, #7
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <pvPortMalloc+0x6e>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	617b      	str	r3, [r7, #20]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d06f      	beq.n	80070d0 <pvPortMalloc+0x154>
 8006ff0:	4b45      	ldr	r3, [pc, #276]	@ (8007108 <pvPortMalloc+0x18c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d86a      	bhi.n	80070d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ffa:	4b44      	ldr	r3, [pc, #272]	@ (800710c <pvPortMalloc+0x190>)
 8006ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ffe:	4b43      	ldr	r3, [pc, #268]	@ (800710c <pvPortMalloc+0x190>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007004:	e004      	b.n	8007010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <pvPortMalloc+0xa6>
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f1      	bne.n	8007006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007022:	4b37      	ldr	r3, [pc, #220]	@ (8007100 <pvPortMalloc+0x184>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007028:	429a      	cmp	r2, r3
 800702a:	d051      	beq.n	80070d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	4413      	add	r3, r2
 8007034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	2308      	movs	r3, #8
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	429a      	cmp	r2, r3
 800704c:	d920      	bls.n	8007090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800704e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <pvPortMalloc+0xfc>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800708a:	69b8      	ldr	r0, [r7, #24]
 800708c:	f000 f90a 	bl	80072a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007090:	4b1d      	ldr	r3, [pc, #116]	@ (8007108 <pvPortMalloc+0x18c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	4a1b      	ldr	r2, [pc, #108]	@ (8007108 <pvPortMalloc+0x18c>)
 800709c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800709e:	4b1a      	ldr	r3, [pc, #104]	@ (8007108 <pvPortMalloc+0x18c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007110 <pvPortMalloc+0x194>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d203      	bcs.n	80070b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070aa:	4b17      	ldr	r3, [pc, #92]	@ (8007108 <pvPortMalloc+0x18c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a18      	ldr	r2, [pc, #96]	@ (8007110 <pvPortMalloc+0x194>)
 80070b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <pvPortMalloc+0x188>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070c6:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <pvPortMalloc+0x198>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3301      	adds	r3, #1
 80070cc:	4a11      	ldr	r2, [pc, #68]	@ (8007114 <pvPortMalloc+0x198>)
 80070ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070d0:	f7fe fcc2 	bl	8005a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <pvPortMalloc+0x17a>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	60fb      	str	r3, [r7, #12]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <pvPortMalloc+0x176>
	return pvReturn;
 80070f6:	69fb      	ldr	r3, [r7, #28]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	@ 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20009104 	.word	0x20009104
 8007104:	20009118 	.word	0x20009118
 8007108:	20009108 	.word	0x20009108
 800710c:	200090fc 	.word	0x200090fc
 8007110:	2000910c 	.word	0x2000910c
 8007114:	20009110 	.word	0x20009110

08007118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04f      	beq.n	80071ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800712a:	2308      	movs	r3, #8
 800712c:	425b      	negs	r3, r3
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4b25      	ldr	r3, [pc, #148]	@ (80071d4 <vPortFree+0xbc>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10b      	bne.n	800715e <vPortFree+0x46>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	e7fd      	b.n	800715a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <vPortFree+0x66>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	60bb      	str	r3, [r7, #8]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <vPortFree+0xbc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01e      	beq.n	80071ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11a      	bne.n	80071ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	4b0e      	ldr	r3, [pc, #56]	@ (80071d4 <vPortFree+0xbc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	43db      	mvns	r3, r3
 800719e:	401a      	ands	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071a4:	f7fe fc4a 	bl	8005a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <vPortFree+0xc0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4413      	add	r3, r2
 80071b2:	4a09      	ldr	r2, [pc, #36]	@ (80071d8 <vPortFree+0xc0>)
 80071b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071b6:	6938      	ldr	r0, [r7, #16]
 80071b8:	f000 f874 	bl	80072a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071bc:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <vPortFree+0xc4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a06      	ldr	r2, [pc, #24]	@ (80071dc <vPortFree+0xc4>)
 80071c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071c6:	f7fe fc47 	bl	8005a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071ca:	bf00      	nop
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20009118 	.word	0x20009118
 80071d8:	20009108 	.word	0x20009108
 80071dc:	20009114 	.word	0x20009114

080071e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80071ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071ec:	4b27      	ldr	r3, [pc, #156]	@ (800728c <prvHeapInit+0xac>)
 80071ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3307      	adds	r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	4a1f      	ldr	r2, [pc, #124]	@ (800728c <prvHeapInit+0xac>)
 8007210:	4413      	add	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007218:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <prvHeapInit+0xb0>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800721e:	4b1c      	ldr	r3, [pc, #112]	@ (8007290 <prvHeapInit+0xb0>)
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	4413      	add	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800722c:	2208      	movs	r2, #8
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a15      	ldr	r2, [pc, #84]	@ (8007294 <prvHeapInit+0xb4>)
 8007240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <prvHeapInit+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800724a:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <prvHeapInit+0xb4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007260:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <prvHeapInit+0xb4>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a0a      	ldr	r2, [pc, #40]	@ (8007298 <prvHeapInit+0xb8>)
 800726e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a09      	ldr	r2, [pc, #36]	@ (800729c <prvHeapInit+0xbc>)
 8007276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007278:	4b09      	ldr	r3, [pc, #36]	@ (80072a0 <prvHeapInit+0xc0>)
 800727a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800727e:	601a      	str	r2, [r3, #0]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	200054fc 	.word	0x200054fc
 8007290:	200090fc 	.word	0x200090fc
 8007294:	20009104 	.word	0x20009104
 8007298:	2000910c 	.word	0x2000910c
 800729c:	20009108 	.word	0x20009108
 80072a0:	20009118 	.word	0x20009118

080072a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072ac:	4b28      	ldr	r3, [pc, #160]	@ (8007350 <prvInsertBlockIntoFreeList+0xac>)
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e002      	b.n	80072b8 <prvInsertBlockIntoFreeList+0x14>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d8f7      	bhi.n	80072b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	4413      	add	r3, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d108      	bne.n	80072e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	441a      	add	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d118      	bne.n	800732c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b15      	ldr	r3, [pc, #84]	@ (8007354 <prvInsertBlockIntoFreeList+0xb0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d00d      	beq.n	8007322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	441a      	add	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e008      	b.n	8007334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007322:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <prvInsertBlockIntoFreeList+0xb0>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e003      	b.n	8007334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d002      	beq.n	8007342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	200090fc 	.word	0x200090fc
 8007354:	20009104 	.word	0x20009104

08007358 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007358:	4b04      	ldr	r3, [pc, #16]	@ (800736c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	b10a      	cbz	r2, 8007362 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800735e:	4803      	ldr	r0, [pc, #12]	@ (800736c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007360:	4770      	bx	lr
 8007362:	4a03      	ldr	r2, [pc, #12]	@ (8007370 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8007364:	4801      	ldr	r0, [pc, #4]	@ (800736c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	4770      	bx	lr
 800736c:	2000001c 	.word	0x2000001c
 8007370:	200001d0 	.word	0x200001d0

08007374 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007374:	4a02      	ldr	r2, [pc, #8]	@ (8007380 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8007376:	4b03      	ldr	r3, [pc, #12]	@ (8007384 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	200001d0 	.word	0x200001d0
 8007384:	2000001c 	.word	0x2000001c

08007388 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8007388:	f003 b92c 	b.w	800a5e4 <geometry_msgs__msg__Twist__init>

0800738c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800738c:	f003 b94e 	b.w	800a62c <geometry_msgs__msg__Twist__fini>

08007390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007390:	b510      	push	{r4, lr}
 8007392:	f000 f819 	bl	80073c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007396:	4c07      	ldr	r4, [pc, #28]	@ (80073b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8007398:	60e0      	str	r0, [r4, #12]
 800739a:	f000 f815 	bl	80073c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800739e:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80073a0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	b10a      	cbz	r2, 80073aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 80073a6:	4804      	ldr	r0, [pc, #16]	@ (80073b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	4a04      	ldr	r2, [pc, #16]	@ (80073bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 80073ac:	4802      	ldr	r0, [pc, #8]	@ (80073b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	bd10      	pop	{r4, pc}
 80073b4:	20000028 	.word	0x20000028
 80073b8:	200000a0 	.word	0x200000a0
 80073bc:	200001d4 	.word	0x200001d4

080073c0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 80073c0:	f003 b940 	b.w	800a644 <geometry_msgs__msg__Vector3__init>

080073c4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 80073c4:	f003 b942 	b.w	800a64c <geometry_msgs__msg__Vector3__fini>

080073c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80073c8:	4b04      	ldr	r3, [pc, #16]	@ (80073dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	b10a      	cbz	r2, 80073d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80073ce:	4803      	ldr	r0, [pc, #12]	@ (80073dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80073d0:	4770      	bx	lr
 80073d2:	4a03      	ldr	r2, [pc, #12]	@ (80073e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80073d4:	4801      	ldr	r0, [pc, #4]	@ (80073dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	4770      	bx	lr
 80073dc:	20000160 	.word	0x20000160
 80073e0:	200001d4 	.word	0x200001d4

080073e4 <get_serialized_size_geometry_msgs__msg__Twist>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	b148      	cbz	r0, 80073fe <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 80073ea:	460d      	mov	r5, r1
 80073ec:	f000 f860 	bl	80074b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80073f0:	4606      	mov	r6, r0
 80073f2:	1829      	adds	r1, r5, r0
 80073f4:	f104 0018 	add.w	r0, r4, #24
 80073f8:	f000 f85a 	bl	80074b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 80073fc:	4430      	add	r0, r6
 80073fe:	bd70      	pop	{r4, r5, r6, pc}

08007400 <_Twist__cdr_deserialize>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	460c      	mov	r4, r1
 8007404:	b189      	cbz	r1, 800742a <_Twist__cdr_deserialize+0x2a>
 8007406:	4605      	mov	r5, r0
 8007408:	f000 f8de 	bl	80075c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800740c:	6843      	ldr	r3, [r0, #4]
 800740e:	4621      	mov	r1, r4
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	4628      	mov	r0, r5
 8007414:	4798      	blx	r3
 8007416:	f000 f8d7 	bl	80075c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800741a:	6843      	ldr	r3, [r0, #4]
 800741c:	f104 0118 	add.w	r1, r4, #24
 8007420:	4628      	mov	r0, r5
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007428:	4718      	bx	r3
 800742a:	4608      	mov	r0, r1
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	bf00      	nop

08007430 <_Twist__cdr_serialize>:
 8007430:	b510      	push	{r4, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	9101      	str	r1, [sp, #4]
 8007436:	b190      	cbz	r0, 800745e <_Twist__cdr_serialize+0x2e>
 8007438:	4604      	mov	r4, r0
 800743a:	f000 f8c5 	bl	80075c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800743e:	6843      	ldr	r3, [r0, #4]
 8007440:	9901      	ldr	r1, [sp, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	4620      	mov	r0, r4
 8007446:	4798      	blx	r3
 8007448:	f000 f8be 	bl	80075c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800744c:	6843      	ldr	r3, [r0, #4]
 800744e:	9901      	ldr	r1, [sp, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f104 0018 	add.w	r0, r4, #24
 8007456:	b002      	add	sp, #8
 8007458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745c:	4718      	bx	r3
 800745e:	b002      	add	sp, #8
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop

08007464 <_Twist__get_serialized_size>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	b148      	cbz	r0, 800747e <_Twist__get_serialized_size+0x1a>
 800746a:	2100      	movs	r1, #0
 800746c:	f000 f820 	bl	80074b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007470:	4605      	mov	r5, r0
 8007472:	4601      	mov	r1, r0
 8007474:	f104 0018 	add.w	r0, r4, #24
 8007478:	f000 f81a 	bl	80074b0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800747c:	4428      	add	r0, r5
 800747e:	bd38      	pop	{r3, r4, r5, pc}

08007480 <_Twist__max_serialized_size>:
 8007480:	b510      	push	{r4, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	2301      	movs	r3, #1
 8007486:	2100      	movs	r1, #0
 8007488:	f10d 0007 	add.w	r0, sp, #7
 800748c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007490:	f000 f87e 	bl	8007590 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007494:	4604      	mov	r4, r0
 8007496:	4601      	mov	r1, r0
 8007498:	f10d 0007 	add.w	r0, sp, #7
 800749c:	f000 f878 	bl	8007590 <max_serialized_size_geometry_msgs__msg__Vector3>
 80074a0:	4420      	add	r0, r4
 80074a2:	b002      	add	sp, #8
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop

080074a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80074a8:	4800      	ldr	r0, [pc, #0]	@ (80074ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80074aa:	4770      	bx	lr
 80074ac:	2000016c 	.word	0x2000016c

080074b0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80074b0:	b1b8      	cbz	r0, 80074e2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80074b2:	b538      	push	{r3, r4, r5, lr}
 80074b4:	460d      	mov	r5, r1
 80074b6:	4628      	mov	r0, r5
 80074b8:	2108      	movs	r1, #8
 80074ba:	f001 f9fd 	bl	80088b8 <ucdr_alignment>
 80074be:	f105 0308 	add.w	r3, r5, #8
 80074c2:	181c      	adds	r4, r3, r0
 80074c4:	2108      	movs	r1, #8
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 f9f6 	bl	80088b8 <ucdr_alignment>
 80074cc:	3008      	adds	r0, #8
 80074ce:	4404      	add	r4, r0
 80074d0:	2108      	movs	r1, #8
 80074d2:	4620      	mov	r0, r4
 80074d4:	f001 f9f0 	bl	80088b8 <ucdr_alignment>
 80074d8:	f1c5 0508 	rsb	r5, r5, #8
 80074dc:	4428      	add	r0, r5
 80074de:	4420      	add	r0, r4
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	4770      	bx	lr

080074e4 <_Vector3__cdr_deserialize>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	460c      	mov	r4, r1
 80074e8:	b171      	cbz	r1, 8007508 <_Vector3__cdr_deserialize+0x24>
 80074ea:	4605      	mov	r5, r0
 80074ec:	f001 f8c6 	bl	800867c <ucdr_deserialize_double>
 80074f0:	f104 0108 	add.w	r1, r4, #8
 80074f4:	4628      	mov	r0, r5
 80074f6:	f001 f8c1 	bl	800867c <ucdr_deserialize_double>
 80074fa:	f104 0110 	add.w	r1, r4, #16
 80074fe:	4628      	mov	r0, r5
 8007500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007504:	f001 b8ba 	b.w	800867c <ucdr_deserialize_double>
 8007508:	4608      	mov	r0, r1
 800750a:	bd38      	pop	{r3, r4, r5, pc}

0800750c <_Vector3__cdr_serialize>:
 800750c:	b198      	cbz	r0, 8007536 <_Vector3__cdr_serialize+0x2a>
 800750e:	b538      	push	{r3, r4, r5, lr}
 8007510:	ed90 0b00 	vldr	d0, [r0]
 8007514:	460d      	mov	r5, r1
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	f000 ffdf 	bl	80084dc <ucdr_serialize_double>
 800751e:	ed94 0b02 	vldr	d0, [r4, #8]
 8007522:	4628      	mov	r0, r5
 8007524:	f000 ffda 	bl	80084dc <ucdr_serialize_double>
 8007528:	ed94 0b04 	vldr	d0, [r4, #16]
 800752c:	4628      	mov	r0, r5
 800752e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007532:	f000 bfd3 	b.w	80084dc <ucdr_serialize_double>
 8007536:	4770      	bx	lr

08007538 <_Vector3__get_serialized_size>:
 8007538:	b198      	cbz	r0, 8007562 <_Vector3__get_serialized_size+0x2a>
 800753a:	b510      	push	{r4, lr}
 800753c:	2108      	movs	r1, #8
 800753e:	2000      	movs	r0, #0
 8007540:	f001 f9ba 	bl	80088b8 <ucdr_alignment>
 8007544:	f100 0408 	add.w	r4, r0, #8
 8007548:	2108      	movs	r1, #8
 800754a:	4620      	mov	r0, r4
 800754c:	f001 f9b4 	bl	80088b8 <ucdr_alignment>
 8007550:	3008      	adds	r0, #8
 8007552:	4404      	add	r4, r0
 8007554:	2108      	movs	r1, #8
 8007556:	4620      	mov	r0, r4
 8007558:	f001 f9ae 	bl	80088b8 <ucdr_alignment>
 800755c:	3008      	adds	r0, #8
 800755e:	4420      	add	r0, r4
 8007560:	bd10      	pop	{r4, pc}
 8007562:	4770      	bx	lr

08007564 <_Vector3__max_serialized_size>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2108      	movs	r1, #8
 8007568:	2000      	movs	r0, #0
 800756a:	f001 f9a5 	bl	80088b8 <ucdr_alignment>
 800756e:	f100 0508 	add.w	r5, r0, #8
 8007572:	2108      	movs	r1, #8
 8007574:	4628      	mov	r0, r5
 8007576:	f001 f99f 	bl	80088b8 <ucdr_alignment>
 800757a:	f100 0408 	add.w	r4, r0, #8
 800757e:	442c      	add	r4, r5
 8007580:	2108      	movs	r1, #8
 8007582:	4620      	mov	r0, r4
 8007584:	f001 f998 	bl	80088b8 <ucdr_alignment>
 8007588:	3008      	adds	r0, #8
 800758a:	4420      	add	r0, r4
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop

08007590 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	2301      	movs	r3, #1
 8007594:	460c      	mov	r4, r1
 8007596:	7003      	strb	r3, [r0, #0]
 8007598:	2108      	movs	r1, #8
 800759a:	4620      	mov	r0, r4
 800759c:	f001 f98c 	bl	80088b8 <ucdr_alignment>
 80075a0:	f104 0508 	add.w	r5, r4, #8
 80075a4:	1946      	adds	r6, r0, r5
 80075a6:	2108      	movs	r1, #8
 80075a8:	4630      	mov	r0, r6
 80075aa:	f001 f985 	bl	80088b8 <ucdr_alignment>
 80075ae:	f100 0508 	add.w	r5, r0, #8
 80075b2:	4435      	add	r5, r6
 80075b4:	2108      	movs	r1, #8
 80075b6:	4628      	mov	r0, r5
 80075b8:	f001 f97e 	bl	80088b8 <ucdr_alignment>
 80075bc:	f1c4 0408 	rsb	r4, r4, #8
 80075c0:	4420      	add	r0, r4
 80075c2:	4428      	add	r0, r5
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	bf00      	nop

080075c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80075c8:	4800      	ldr	r0, [pc, #0]	@ (80075cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 80075ca:	4770      	bx	lr
 80075cc:	20000194 	.word	0x20000194

080075d0 <ucdr_serialize_bool>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	460d      	mov	r5, r1
 80075d4:	2101      	movs	r1, #1
 80075d6:	4604      	mov	r4, r0
 80075d8:	f001 f922 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80075dc:	b148      	cbz	r0, 80075f2 <ucdr_serialize_bool+0x22>
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	701d      	strb	r5, [r3, #0]
 80075e2:	68a2      	ldr	r2, [r4, #8]
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	2101      	movs	r1, #1
 80075e8:	440a      	add	r2, r1
 80075ea:	440b      	add	r3, r1
 80075ec:	60a2      	str	r2, [r4, #8]
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	7561      	strb	r1, [r4, #21]
 80075f2:	7da0      	ldrb	r0, [r4, #22]
 80075f4:	f080 0001 	eor.w	r0, r0, #1
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop

080075fc <ucdr_deserialize_bool>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	460d      	mov	r5, r1
 8007600:	2101      	movs	r1, #1
 8007602:	4604      	mov	r4, r0
 8007604:	f001 f90c 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007608:	b160      	cbz	r0, 8007624 <ucdr_deserialize_bool+0x28>
 800760a:	68a2      	ldr	r2, [r4, #8]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007612:	3900      	subs	r1, #0
 8007614:	bf18      	it	ne
 8007616:	2101      	movne	r1, #1
 8007618:	7029      	strb	r1, [r5, #0]
 800761a:	3301      	adds	r3, #1
 800761c:	2101      	movs	r1, #1
 800761e:	60a2      	str	r2, [r4, #8]
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	7561      	strb	r1, [r4, #21]
 8007624:	7da0      	ldrb	r0, [r4, #22]
 8007626:	f080 0001 	eor.w	r0, r0, #1
 800762a:	bd38      	pop	{r3, r4, r5, pc}

0800762c <ucdr_serialize_uint8_t>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	460d      	mov	r5, r1
 8007630:	2101      	movs	r1, #1
 8007632:	4604      	mov	r4, r0
 8007634:	f001 f8f4 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007638:	b148      	cbz	r0, 800764e <ucdr_serialize_uint8_t+0x22>
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	701d      	strb	r5, [r3, #0]
 800763e:	68a2      	ldr	r2, [r4, #8]
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	2101      	movs	r1, #1
 8007644:	440a      	add	r2, r1
 8007646:	440b      	add	r3, r1
 8007648:	60a2      	str	r2, [r4, #8]
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	7561      	strb	r1, [r4, #21]
 800764e:	7da0      	ldrb	r0, [r4, #22]
 8007650:	f080 0001 	eor.w	r0, r0, #1
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop

08007658 <ucdr_deserialize_uint8_t>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	460d      	mov	r5, r1
 800765c:	2101      	movs	r1, #1
 800765e:	4604      	mov	r4, r0
 8007660:	f001 f8de 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007664:	b150      	cbz	r0, 800767c <ucdr_deserialize_uint8_t+0x24>
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	702b      	strb	r3, [r5, #0]
 800766c:	68a2      	ldr	r2, [r4, #8]
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	2101      	movs	r1, #1
 8007672:	440a      	add	r2, r1
 8007674:	440b      	add	r3, r1
 8007676:	60a2      	str	r2, [r4, #8]
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	7561      	strb	r1, [r4, #21]
 800767c:	7da0      	ldrb	r0, [r4, #22]
 800767e:	f080 0001 	eor.w	r0, r0, #1
 8007682:	bd38      	pop	{r3, r4, r5, pc}

08007684 <ucdr_serialize_uint16_t>:
 8007684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	460b      	mov	r3, r1
 800768c:	2102      	movs	r1, #2
 800768e:	4604      	mov	r4, r0
 8007690:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007694:	f001 f918 	bl	80088c8 <ucdr_buffer_alignment>
 8007698:	4601      	mov	r1, r0
 800769a:	4620      	mov	r0, r4
 800769c:	7d67      	ldrb	r7, [r4, #21]
 800769e:	f001 f957 	bl	8008950 <ucdr_advance_buffer>
 80076a2:	2102      	movs	r1, #2
 80076a4:	4620      	mov	r0, r4
 80076a6:	f001 f8af 	bl	8008808 <ucdr_check_buffer_available_for>
 80076aa:	bb78      	cbnz	r0, 800770c <ucdr_serialize_uint16_t+0x88>
 80076ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	d926      	bls.n	8007702 <ucdr_serialize_uint16_t+0x7e>
 80076b4:	1b5e      	subs	r6, r3, r5
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	f1c6 0802 	rsb	r8, r6, #2
 80076be:	4433      	add	r3, r6
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	4641      	mov	r1, r8
 80076c4:	4620      	mov	r0, r4
 80076c6:	f001 f8ab 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d03b      	beq.n	8007746 <ucdr_serialize_uint16_t+0xc2>
 80076ce:	7d23      	ldrb	r3, [r4, #20]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d04a      	beq.n	800776a <ucdr_serialize_uint16_t+0xe6>
 80076d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076d8:	702b      	strb	r3, [r5, #0]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d040      	beq.n	8007760 <ucdr_serialize_uint16_t+0xdc>
 80076de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076e2:	706b      	strb	r3, [r5, #1]
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	68a2      	ldr	r2, [r4, #8]
 80076e8:	7da0      	ldrb	r0, [r4, #22]
 80076ea:	3302      	adds	r3, #2
 80076ec:	1b9e      	subs	r6, r3, r6
 80076ee:	4442      	add	r2, r8
 80076f0:	2302      	movs	r3, #2
 80076f2:	f080 0001 	eor.w	r0, r0, #1
 80076f6:	60a2      	str	r2, [r4, #8]
 80076f8:	6126      	str	r6, [r4, #16]
 80076fa:	7563      	strb	r3, [r4, #21]
 80076fc:	b002      	add	sp, #8
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007702:	2102      	movs	r1, #2
 8007704:	4620      	mov	r0, r4
 8007706:	f001 f88b 	bl	8008820 <ucdr_check_final_buffer_behavior>
 800770a:	b190      	cbz	r0, 8007732 <ucdr_serialize_uint16_t+0xae>
 800770c:	7d23      	ldrb	r3, [r4, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	68a3      	ldr	r3, [r4, #8]
 8007712:	d014      	beq.n	800773e <ucdr_serialize_uint16_t+0xba>
 8007714:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007720:	705a      	strb	r2, [r3, #1]
 8007722:	68a2      	ldr	r2, [r4, #8]
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	3202      	adds	r2, #2
 8007728:	3302      	adds	r3, #2
 800772a:	2102      	movs	r1, #2
 800772c:	60a2      	str	r2, [r4, #8]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	7561      	strb	r1, [r4, #21]
 8007732:	7da0      	ldrb	r0, [r4, #22]
 8007734:	f080 0001 	eor.w	r0, r0, #1
 8007738:	b002      	add	sp, #8
 800773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800773e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e7ed      	b.n	8007722 <ucdr_serialize_uint16_t+0x9e>
 8007746:	68a2      	ldr	r2, [r4, #8]
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	7da0      	ldrb	r0, [r4, #22]
 800774c:	7567      	strb	r7, [r4, #21]
 800774e:	1b92      	subs	r2, r2, r6
 8007750:	1b9b      	subs	r3, r3, r6
 8007752:	f080 0001 	eor.w	r0, r0, #1
 8007756:	60a2      	str	r2, [r4, #8]
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	b002      	add	sp, #8
 800775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e7bc      	b.n	80076e4 <ucdr_serialize_uint16_t+0x60>
 800776a:	4628      	mov	r0, r5
 800776c:	f10d 0506 	add.w	r5, sp, #6
 8007770:	4629      	mov	r1, r5
 8007772:	4632      	mov	r2, r6
 8007774:	f00d f8a5 	bl	80148c2 <memcpy>
 8007778:	68a0      	ldr	r0, [r4, #8]
 800777a:	4642      	mov	r2, r8
 800777c:	19a9      	adds	r1, r5, r6
 800777e:	f00d f8a0 	bl	80148c2 <memcpy>
 8007782:	e7af      	b.n	80076e4 <ucdr_serialize_uint16_t+0x60>

08007784 <ucdr_serialize_endian_uint16_t>:
 8007784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007788:	b083      	sub	sp, #12
 800778a:	460d      	mov	r5, r1
 800778c:	2102      	movs	r1, #2
 800778e:	4604      	mov	r4, r0
 8007790:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007794:	f001 f898 	bl	80088c8 <ucdr_buffer_alignment>
 8007798:	4601      	mov	r1, r0
 800779a:	4620      	mov	r0, r4
 800779c:	f894 8015 	ldrb.w	r8, [r4, #21]
 80077a0:	f001 f8d6 	bl	8008950 <ucdr_advance_buffer>
 80077a4:	2102      	movs	r1, #2
 80077a6:	4620      	mov	r0, r4
 80077a8:	f001 f82e 	bl	8008808 <ucdr_check_buffer_available_for>
 80077ac:	bb70      	cbnz	r0, 800780c <ucdr_serialize_endian_uint16_t+0x88>
 80077ae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80077b2:	42be      	cmp	r6, r7
 80077b4:	d925      	bls.n	8007802 <ucdr_serialize_endian_uint16_t+0x7e>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	60a6      	str	r6, [r4, #8]
 80077ba:	1bf6      	subs	r6, r6, r7
 80077bc:	4433      	add	r3, r6
 80077be:	f1c6 0902 	rsb	r9, r6, #2
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	4649      	mov	r1, r9
 80077c6:	4620      	mov	r0, r4
 80077c8:	f001 f82a 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d039      	beq.n	8007844 <ucdr_serialize_endian_uint16_t+0xc0>
 80077d0:	2d01      	cmp	r5, #1
 80077d2:	d04a      	beq.n	800786a <ucdr_serialize_endian_uint16_t+0xe6>
 80077d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80077d8:	703b      	strb	r3, [r7, #0]
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d040      	beq.n	8007860 <ucdr_serialize_endian_uint16_t+0xdc>
 80077de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80077e2:	707b      	strb	r3, [r7, #1]
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	68a2      	ldr	r2, [r4, #8]
 80077e8:	7da0      	ldrb	r0, [r4, #22]
 80077ea:	3302      	adds	r3, #2
 80077ec:	444a      	add	r2, r9
 80077ee:	1b9b      	subs	r3, r3, r6
 80077f0:	2102      	movs	r1, #2
 80077f2:	f080 0001 	eor.w	r0, r0, #1
 80077f6:	60a2      	str	r2, [r4, #8]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	7561      	strb	r1, [r4, #21]
 80077fc:	b003      	add	sp, #12
 80077fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007802:	2102      	movs	r1, #2
 8007804:	4620      	mov	r0, r4
 8007806:	f001 f80b 	bl	8008820 <ucdr_check_final_buffer_behavior>
 800780a:	b188      	cbz	r0, 8007830 <ucdr_serialize_endian_uint16_t+0xac>
 800780c:	2d01      	cmp	r5, #1
 800780e:	68a3      	ldr	r3, [r4, #8]
 8007810:	d014      	beq.n	800783c <ucdr_serialize_endian_uint16_t+0xb8>
 8007812:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	68a3      	ldr	r3, [r4, #8]
 800781a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800781e:	705a      	strb	r2, [r3, #1]
 8007820:	68a2      	ldr	r2, [r4, #8]
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	3202      	adds	r2, #2
 8007826:	3302      	adds	r3, #2
 8007828:	2102      	movs	r1, #2
 800782a:	60a2      	str	r2, [r4, #8]
 800782c:	6123      	str	r3, [r4, #16]
 800782e:	7561      	strb	r1, [r4, #21]
 8007830:	7da0      	ldrb	r0, [r4, #22]
 8007832:	f080 0001 	eor.w	r0, r0, #1
 8007836:	b003      	add	sp, #12
 8007838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800783c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	e7ed      	b.n	8007820 <ucdr_serialize_endian_uint16_t+0x9c>
 8007844:	68a2      	ldr	r2, [r4, #8]
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	7da0      	ldrb	r0, [r4, #22]
 800784a:	f884 8015 	strb.w	r8, [r4, #21]
 800784e:	1b92      	subs	r2, r2, r6
 8007850:	1b9b      	subs	r3, r3, r6
 8007852:	f080 0001 	eor.w	r0, r0, #1
 8007856:	60a2      	str	r2, [r4, #8]
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	b003      	add	sp, #12
 800785c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007860:	68a3      	ldr	r3, [r4, #8]
 8007862:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e7bc      	b.n	80077e4 <ucdr_serialize_endian_uint16_t+0x60>
 800786a:	f10d 0506 	add.w	r5, sp, #6
 800786e:	4629      	mov	r1, r5
 8007870:	4632      	mov	r2, r6
 8007872:	4638      	mov	r0, r7
 8007874:	f00d f825 	bl	80148c2 <memcpy>
 8007878:	68a0      	ldr	r0, [r4, #8]
 800787a:	464a      	mov	r2, r9
 800787c:	19a9      	adds	r1, r5, r6
 800787e:	f00d f820 	bl	80148c2 <memcpy>
 8007882:	e7af      	b.n	80077e4 <ucdr_serialize_endian_uint16_t+0x60>

08007884 <ucdr_deserialize_uint16_t>:
 8007884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007888:	460d      	mov	r5, r1
 800788a:	2102      	movs	r1, #2
 800788c:	4604      	mov	r4, r0
 800788e:	f001 f81b 	bl	80088c8 <ucdr_buffer_alignment>
 8007892:	4601      	mov	r1, r0
 8007894:	4620      	mov	r0, r4
 8007896:	f894 8015 	ldrb.w	r8, [r4, #21]
 800789a:	f001 f859 	bl	8008950 <ucdr_advance_buffer>
 800789e:	2102      	movs	r1, #2
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 ffb1 	bl	8008808 <ucdr_check_buffer_available_for>
 80078a6:	bb60      	cbnz	r0, 8007902 <ucdr_deserialize_uint16_t+0x7e>
 80078a8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80078ac:	42be      	cmp	r6, r7
 80078ae:	d923      	bls.n	80078f8 <ucdr_deserialize_uint16_t+0x74>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	60a6      	str	r6, [r4, #8]
 80078b4:	1bf6      	subs	r6, r6, r7
 80078b6:	4433      	add	r3, r6
 80078b8:	f1c6 0902 	rsb	r9, r6, #2
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4649      	mov	r1, r9
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 ffad 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d034      	beq.n	8007934 <ucdr_deserialize_uint16_t+0xb0>
 80078ca:	7d23      	ldrb	r3, [r4, #20]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d042      	beq.n	8007956 <ucdr_deserialize_uint16_t+0xd2>
 80078d0:	787b      	ldrb	r3, [r7, #1]
 80078d2:	702b      	strb	r3, [r5, #0]
 80078d4:	2e00      	cmp	r6, #0
 80078d6:	d03a      	beq.n	800794e <ucdr_deserialize_uint16_t+0xca>
 80078d8:	783b      	ldrb	r3, [r7, #0]
 80078da:	706b      	strb	r3, [r5, #1]
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	68a2      	ldr	r2, [r4, #8]
 80078e0:	7da0      	ldrb	r0, [r4, #22]
 80078e2:	2102      	movs	r1, #2
 80078e4:	3302      	adds	r3, #2
 80078e6:	444a      	add	r2, r9
 80078e8:	1b9b      	subs	r3, r3, r6
 80078ea:	7561      	strb	r1, [r4, #21]
 80078ec:	60a2      	str	r2, [r4, #8]
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	f080 0001 	eor.w	r0, r0, #1
 80078f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f8:	2102      	movs	r1, #2
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 ff90 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007900:	b180      	cbz	r0, 8007924 <ucdr_deserialize_uint16_t+0xa0>
 8007902:	7d23      	ldrb	r3, [r4, #20]
 8007904:	2b01      	cmp	r3, #1
 8007906:	68a3      	ldr	r3, [r4, #8]
 8007908:	d011      	beq.n	800792e <ucdr_deserialize_uint16_t+0xaa>
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	702b      	strb	r3, [r5, #0]
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	706b      	strb	r3, [r5, #1]
 8007914:	68a2      	ldr	r2, [r4, #8]
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	3202      	adds	r2, #2
 800791a:	3302      	adds	r3, #2
 800791c:	2102      	movs	r1, #2
 800791e:	60a2      	str	r2, [r4, #8]
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	7561      	strb	r1, [r4, #21]
 8007924:	7da0      	ldrb	r0, [r4, #22]
 8007926:	f080 0001 	eor.w	r0, r0, #1
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	802b      	strh	r3, [r5, #0]
 8007932:	e7ef      	b.n	8007914 <ucdr_deserialize_uint16_t+0x90>
 8007934:	68a2      	ldr	r2, [r4, #8]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	7da0      	ldrb	r0, [r4, #22]
 800793a:	f884 8015 	strb.w	r8, [r4, #21]
 800793e:	1b92      	subs	r2, r2, r6
 8007940:	1b9b      	subs	r3, r3, r6
 8007942:	60a2      	str	r2, [r4, #8]
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	f080 0001 	eor.w	r0, r0, #1
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	706b      	strb	r3, [r5, #1]
 8007954:	e7c2      	b.n	80078dc <ucdr_deserialize_uint16_t+0x58>
 8007956:	4639      	mov	r1, r7
 8007958:	4632      	mov	r2, r6
 800795a:	4628      	mov	r0, r5
 800795c:	f00c ffb1 	bl	80148c2 <memcpy>
 8007960:	68a1      	ldr	r1, [r4, #8]
 8007962:	464a      	mov	r2, r9
 8007964:	19a8      	adds	r0, r5, r6
 8007966:	f00c ffac 	bl	80148c2 <memcpy>
 800796a:	e7b7      	b.n	80078dc <ucdr_deserialize_uint16_t+0x58>

0800796c <ucdr_deserialize_endian_uint16_t>:
 800796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007970:	460e      	mov	r6, r1
 8007972:	2102      	movs	r1, #2
 8007974:	4604      	mov	r4, r0
 8007976:	4615      	mov	r5, r2
 8007978:	f000 ffa6 	bl	80088c8 <ucdr_buffer_alignment>
 800797c:	4601      	mov	r1, r0
 800797e:	4620      	mov	r0, r4
 8007980:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007984:	f000 ffe4 	bl	8008950 <ucdr_advance_buffer>
 8007988:	2102      	movs	r1, #2
 800798a:	4620      	mov	r0, r4
 800798c:	f000 ff3c 	bl	8008808 <ucdr_check_buffer_available_for>
 8007990:	bb70      	cbnz	r0, 80079f0 <ucdr_deserialize_endian_uint16_t+0x84>
 8007992:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8007996:	4547      	cmp	r7, r8
 8007998:	d925      	bls.n	80079e6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	60a7      	str	r7, [r4, #8]
 800799e:	eba7 0708 	sub.w	r7, r7, r8
 80079a2:	443b      	add	r3, r7
 80079a4:	f1c7 0a02 	rsb	sl, r7, #2
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	4651      	mov	r1, sl
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 ff37 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d034      	beq.n	8007a20 <ucdr_deserialize_endian_uint16_t+0xb4>
 80079b6:	2e01      	cmp	r6, #1
 80079b8:	d043      	beq.n	8007a42 <ucdr_deserialize_endian_uint16_t+0xd6>
 80079ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079be:	702b      	strb	r3, [r5, #0]
 80079c0:	2f00      	cmp	r7, #0
 80079c2:	d03a      	beq.n	8007a3a <ucdr_deserialize_endian_uint16_t+0xce>
 80079c4:	f898 3000 	ldrb.w	r3, [r8]
 80079c8:	706b      	strb	r3, [r5, #1]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	68a2      	ldr	r2, [r4, #8]
 80079ce:	7da0      	ldrb	r0, [r4, #22]
 80079d0:	2102      	movs	r1, #2
 80079d2:	3302      	adds	r3, #2
 80079d4:	4452      	add	r2, sl
 80079d6:	1bdb      	subs	r3, r3, r7
 80079d8:	7561      	strb	r1, [r4, #21]
 80079da:	60a2      	str	r2, [r4, #8]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	f080 0001 	eor.w	r0, r0, #1
 80079e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e6:	2102      	movs	r1, #2
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 ff19 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80079ee:	b178      	cbz	r0, 8007a10 <ucdr_deserialize_endian_uint16_t+0xa4>
 80079f0:	2e01      	cmp	r6, #1
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	d011      	beq.n	8007a1a <ucdr_deserialize_endian_uint16_t+0xae>
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	702b      	strb	r3, [r5, #0]
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	706b      	strb	r3, [r5, #1]
 8007a00:	68a2      	ldr	r2, [r4, #8]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	3202      	adds	r2, #2
 8007a06:	3302      	adds	r3, #2
 8007a08:	2102      	movs	r1, #2
 8007a0a:	60a2      	str	r2, [r4, #8]
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	7561      	strb	r1, [r4, #21]
 8007a10:	7da0      	ldrb	r0, [r4, #22]
 8007a12:	f080 0001 	eor.w	r0, r0, #1
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	802b      	strh	r3, [r5, #0]
 8007a1e:	e7ef      	b.n	8007a00 <ucdr_deserialize_endian_uint16_t+0x94>
 8007a20:	68a2      	ldr	r2, [r4, #8]
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	7da0      	ldrb	r0, [r4, #22]
 8007a26:	f884 9015 	strb.w	r9, [r4, #21]
 8007a2a:	1bd2      	subs	r2, r2, r7
 8007a2c:	1bdb      	subs	r3, r3, r7
 8007a2e:	60a2      	str	r2, [r4, #8]
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	f080 0001 	eor.w	r0, r0, #1
 8007a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	706b      	strb	r3, [r5, #1]
 8007a40:	e7c3      	b.n	80079ca <ucdr_deserialize_endian_uint16_t+0x5e>
 8007a42:	4641      	mov	r1, r8
 8007a44:	463a      	mov	r2, r7
 8007a46:	4628      	mov	r0, r5
 8007a48:	f00c ff3b 	bl	80148c2 <memcpy>
 8007a4c:	68a1      	ldr	r1, [r4, #8]
 8007a4e:	4652      	mov	r2, sl
 8007a50:	19e8      	adds	r0, r5, r7
 8007a52:	f00c ff36 	bl	80148c2 <memcpy>
 8007a56:	e7b8      	b.n	80079ca <ucdr_deserialize_endian_uint16_t+0x5e>

08007a58 <ucdr_serialize_uint32_t>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	4604      	mov	r4, r0
 8007a60:	9101      	str	r1, [sp, #4]
 8007a62:	2104      	movs	r1, #4
 8007a64:	f000 ff30 	bl	80088c8 <ucdr_buffer_alignment>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	7d67      	ldrb	r7, [r4, #21]
 8007a6e:	f000 ff6f 	bl	8008950 <ucdr_advance_buffer>
 8007a72:	2104      	movs	r1, #4
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fec7 	bl	8008808 <ucdr_check_buffer_available_for>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d139      	bne.n	8007af2 <ucdr_serialize_uint32_t+0x9a>
 8007a7e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007a82:	42ab      	cmp	r3, r5
 8007a84:	d930      	bls.n	8007ae8 <ucdr_serialize_uint32_t+0x90>
 8007a86:	1b5e      	subs	r6, r3, r5
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	f1c6 0804 	rsb	r8, r6, #4
 8007a90:	4433      	add	r3, r6
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	4641      	mov	r1, r8
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 fec2 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d04c      	beq.n	8007b3a <ucdr_serialize_uint32_t+0xe2>
 8007aa0:	7d23      	ldrb	r3, [r4, #20]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d063      	beq.n	8007b6e <ucdr_serialize_uint32_t+0x116>
 8007aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007aaa:	702b      	strb	r3, [r5, #0]
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	d051      	beq.n	8007b54 <ucdr_serialize_uint32_t+0xfc>
 8007ab0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ab4:	706b      	strb	r3, [r5, #1]
 8007ab6:	2e01      	cmp	r6, #1
 8007ab8:	d050      	beq.n	8007b5c <ucdr_serialize_uint32_t+0x104>
 8007aba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007abe:	70ab      	strb	r3, [r5, #2]
 8007ac0:	2e02      	cmp	r6, #2
 8007ac2:	d04f      	beq.n	8007b64 <ucdr_serialize_uint32_t+0x10c>
 8007ac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007ac8:	70eb      	strb	r3, [r5, #3]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	68a2      	ldr	r2, [r4, #8]
 8007ace:	7da0      	ldrb	r0, [r4, #22]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	1b9e      	subs	r6, r3, r6
 8007ad4:	4442      	add	r2, r8
 8007ad6:	2304      	movs	r3, #4
 8007ad8:	f080 0001 	eor.w	r0, r0, #1
 8007adc:	60a2      	str	r2, [r4, #8]
 8007ade:	6126      	str	r6, [r4, #16]
 8007ae0:	7563      	strb	r3, [r4, #21]
 8007ae2:	b002      	add	sp, #8
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	2104      	movs	r1, #4
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fe98 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007af0:	b1d0      	cbz	r0, 8007b28 <ucdr_serialize_uint32_t+0xd0>
 8007af2:	7d23      	ldrb	r3, [r4, #20]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	d01c      	beq.n	8007b34 <ucdr_serialize_uint32_t+0xdc>
 8007afa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b06:	705a      	strb	r2, [r3, #1]
 8007b08:	68a3      	ldr	r3, [r4, #8]
 8007b0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007b0e:	709a      	strb	r2, [r3, #2]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b16:	70da      	strb	r2, [r3, #3]
 8007b18:	68a2      	ldr	r2, [r4, #8]
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	3204      	adds	r2, #4
 8007b1e:	3304      	adds	r3, #4
 8007b20:	2104      	movs	r1, #4
 8007b22:	60a2      	str	r2, [r4, #8]
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	7561      	strb	r1, [r4, #21]
 8007b28:	7da0      	ldrb	r0, [r4, #22]
 8007b2a:	f080 0001 	eor.w	r0, r0, #1
 8007b2e:	b002      	add	sp, #8
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	9a01      	ldr	r2, [sp, #4]
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e7ee      	b.n	8007b18 <ucdr_serialize_uint32_t+0xc0>
 8007b3a:	68a2      	ldr	r2, [r4, #8]
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	7da0      	ldrb	r0, [r4, #22]
 8007b40:	7567      	strb	r7, [r4, #21]
 8007b42:	1b92      	subs	r2, r2, r6
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	f080 0001 	eor.w	r0, r0, #1
 8007b4a:	60a2      	str	r2, [r4, #8]
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	b002      	add	sp, #8
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b54:	68a3      	ldr	r3, [r4, #8]
 8007b56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	68a3      	ldr	r3, [r4, #8]
 8007b5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e7ad      	b.n	8007aca <ucdr_serialize_uint32_t+0x72>
 8007b6e:	4628      	mov	r0, r5
 8007b70:	ad01      	add	r5, sp, #4
 8007b72:	4629      	mov	r1, r5
 8007b74:	4632      	mov	r2, r6
 8007b76:	f00c fea4 	bl	80148c2 <memcpy>
 8007b7a:	68a0      	ldr	r0, [r4, #8]
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	19a9      	adds	r1, r5, r6
 8007b80:	f00c fe9f 	bl	80148c2 <memcpy>
 8007b84:	e7a1      	b.n	8007aca <ucdr_serialize_uint32_t+0x72>
 8007b86:	bf00      	nop

08007b88 <ucdr_serialize_endian_uint32_t>:
 8007b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	460d      	mov	r5, r1
 8007b90:	2104      	movs	r1, #4
 8007b92:	4604      	mov	r4, r0
 8007b94:	9201      	str	r2, [sp, #4]
 8007b96:	f000 fe97 	bl	80088c8 <ucdr_buffer_alignment>
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007ba2:	f000 fed5 	bl	8008950 <ucdr_advance_buffer>
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fe2d 	bl	8008808 <ucdr_check_buffer_available_for>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d138      	bne.n	8007c24 <ucdr_serialize_endian_uint32_t+0x9c>
 8007bb2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007bb6:	42b7      	cmp	r7, r6
 8007bb8:	d92f      	bls.n	8007c1a <ucdr_serialize_endian_uint32_t+0x92>
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	60a7      	str	r7, [r4, #8]
 8007bbe:	1bbf      	subs	r7, r7, r6
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f1c7 0904 	rsb	r9, r7, #4
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fe28 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d04a      	beq.n	8007c6a <ucdr_serialize_endian_uint32_t+0xe2>
 8007bd4:	2d01      	cmp	r5, #1
 8007bd6:	d063      	beq.n	8007ca0 <ucdr_serialize_endian_uint32_t+0x118>
 8007bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007bdc:	7033      	strb	r3, [r6, #0]
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	d051      	beq.n	8007c86 <ucdr_serialize_endian_uint32_t+0xfe>
 8007be2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007be6:	7073      	strb	r3, [r6, #1]
 8007be8:	2f01      	cmp	r7, #1
 8007bea:	d050      	beq.n	8007c8e <ucdr_serialize_endian_uint32_t+0x106>
 8007bec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007bf0:	70b3      	strb	r3, [r6, #2]
 8007bf2:	2f02      	cmp	r7, #2
 8007bf4:	d04f      	beq.n	8007c96 <ucdr_serialize_endian_uint32_t+0x10e>
 8007bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007bfa:	70f3      	strb	r3, [r6, #3]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	68a2      	ldr	r2, [r4, #8]
 8007c00:	7da0      	ldrb	r0, [r4, #22]
 8007c02:	3304      	adds	r3, #4
 8007c04:	444a      	add	r2, r9
 8007c06:	1bdb      	subs	r3, r3, r7
 8007c08:	2104      	movs	r1, #4
 8007c0a:	f080 0001 	eor.w	r0, r0, #1
 8007c0e:	60a2      	str	r2, [r4, #8]
 8007c10:	6123      	str	r3, [r4, #16]
 8007c12:	7561      	strb	r1, [r4, #21]
 8007c14:	b003      	add	sp, #12
 8007c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	2104      	movs	r1, #4
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fdff 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007c22:	b1c8      	cbz	r0, 8007c58 <ucdr_serialize_endian_uint32_t+0xd0>
 8007c24:	2d01      	cmp	r5, #1
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	d01c      	beq.n	8007c64 <ucdr_serialize_endian_uint32_t+0xdc>
 8007c2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c36:	705a      	strb	r2, [r3, #1]
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007c3e:	709a      	strb	r2, [r3, #2]
 8007c40:	68a3      	ldr	r3, [r4, #8]
 8007c42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007c46:	70da      	strb	r2, [r3, #3]
 8007c48:	68a2      	ldr	r2, [r4, #8]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	3204      	adds	r2, #4
 8007c4e:	3304      	adds	r3, #4
 8007c50:	2104      	movs	r1, #4
 8007c52:	60a2      	str	r2, [r4, #8]
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	7561      	strb	r1, [r4, #21]
 8007c58:	7da0      	ldrb	r0, [r4, #22]
 8007c5a:	f080 0001 	eor.w	r0, r0, #1
 8007c5e:	b003      	add	sp, #12
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c64:	9a01      	ldr	r2, [sp, #4]
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e7ee      	b.n	8007c48 <ucdr_serialize_endian_uint32_t+0xc0>
 8007c6a:	68a2      	ldr	r2, [r4, #8]
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	7da0      	ldrb	r0, [r4, #22]
 8007c70:	f884 8015 	strb.w	r8, [r4, #21]
 8007c74:	1bd2      	subs	r2, r2, r7
 8007c76:	1bdb      	subs	r3, r3, r7
 8007c78:	f080 0001 	eor.w	r0, r0, #1
 8007c7c:	60a2      	str	r2, [r4, #8]
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	b003      	add	sp, #12
 8007c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e7ad      	b.n	8007bfc <ucdr_serialize_endian_uint32_t+0x74>
 8007ca0:	ad01      	add	r5, sp, #4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f00c fe0b 	bl	80148c2 <memcpy>
 8007cac:	68a0      	ldr	r0, [r4, #8]
 8007cae:	464a      	mov	r2, r9
 8007cb0:	19e9      	adds	r1, r5, r7
 8007cb2:	f00c fe06 	bl	80148c2 <memcpy>
 8007cb6:	e7a1      	b.n	8007bfc <ucdr_serialize_endian_uint32_t+0x74>

08007cb8 <ucdr_deserialize_uint32_t>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	2104      	movs	r1, #4
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	f000 fe01 	bl	80088c8 <ucdr_buffer_alignment>
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007cce:	f000 fe3f 	bl	8008950 <ucdr_advance_buffer>
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fd97 	bl	8008808 <ucdr_check_buffer_available_for>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d138      	bne.n	8007d50 <ucdr_deserialize_uint32_t+0x98>
 8007cde:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007ce2:	42b7      	cmp	r7, r6
 8007ce4:	d92f      	bls.n	8007d46 <ucdr_deserialize_uint32_t+0x8e>
 8007ce6:	6923      	ldr	r3, [r4, #16]
 8007ce8:	60a7      	str	r7, [r4, #8]
 8007cea:	1bbf      	subs	r7, r7, r6
 8007cec:	443b      	add	r3, r7
 8007cee:	f1c7 0904 	rsb	r9, r7, #4
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 fd92 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d046      	beq.n	8007d8e <ucdr_deserialize_uint32_t+0xd6>
 8007d00:	7d23      	ldrb	r3, [r4, #20]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d05c      	beq.n	8007dc0 <ucdr_deserialize_uint32_t+0x108>
 8007d06:	78f3      	ldrb	r3, [r6, #3]
 8007d08:	702b      	strb	r3, [r5, #0]
 8007d0a:	2f00      	cmp	r7, #0
 8007d0c:	d04c      	beq.n	8007da8 <ucdr_deserialize_uint32_t+0xf0>
 8007d0e:	78b3      	ldrb	r3, [r6, #2]
 8007d10:	706b      	strb	r3, [r5, #1]
 8007d12:	2f01      	cmp	r7, #1
 8007d14:	f105 0302 	add.w	r3, r5, #2
 8007d18:	d04a      	beq.n	8007db0 <ucdr_deserialize_uint32_t+0xf8>
 8007d1a:	7873      	ldrb	r3, [r6, #1]
 8007d1c:	70ab      	strb	r3, [r5, #2]
 8007d1e:	2f02      	cmp	r7, #2
 8007d20:	f105 0303 	add.w	r3, r5, #3
 8007d24:	d048      	beq.n	8007db8 <ucdr_deserialize_uint32_t+0x100>
 8007d26:	7833      	ldrb	r3, [r6, #0]
 8007d28:	70eb      	strb	r3, [r5, #3]
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	68a2      	ldr	r2, [r4, #8]
 8007d2e:	7da0      	ldrb	r0, [r4, #22]
 8007d30:	2104      	movs	r1, #4
 8007d32:	3304      	adds	r3, #4
 8007d34:	444a      	add	r2, r9
 8007d36:	1bdb      	subs	r3, r3, r7
 8007d38:	7561      	strb	r1, [r4, #21]
 8007d3a:	60a2      	str	r2, [r4, #8]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	f080 0001 	eor.w	r0, r0, #1
 8007d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d46:	2104      	movs	r1, #4
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 fd69 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007d4e:	b1b0      	cbz	r0, 8007d7e <ucdr_deserialize_uint32_t+0xc6>
 8007d50:	7d23      	ldrb	r3, [r4, #20]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	68a3      	ldr	r3, [r4, #8]
 8007d56:	d017      	beq.n	8007d88 <ucdr_deserialize_uint32_t+0xd0>
 8007d58:	78db      	ldrb	r3, [r3, #3]
 8007d5a:	702b      	strb	r3, [r5, #0]
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	706b      	strb	r3, [r5, #1]
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	70ab      	strb	r3, [r5, #2]
 8007d68:	68a3      	ldr	r3, [r4, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	70eb      	strb	r3, [r5, #3]
 8007d6e:	68a2      	ldr	r2, [r4, #8]
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	3204      	adds	r2, #4
 8007d74:	3304      	adds	r3, #4
 8007d76:	2104      	movs	r1, #4
 8007d78:	60a2      	str	r2, [r4, #8]
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	7561      	strb	r1, [r4, #21]
 8007d7e:	7da0      	ldrb	r0, [r4, #22]
 8007d80:	f080 0001 	eor.w	r0, r0, #1
 8007d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	e7ef      	b.n	8007d6e <ucdr_deserialize_uint32_t+0xb6>
 8007d8e:	68a2      	ldr	r2, [r4, #8]
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	7da0      	ldrb	r0, [r4, #22]
 8007d94:	f884 8015 	strb.w	r8, [r4, #21]
 8007d98:	1bd2      	subs	r2, r2, r7
 8007d9a:	1bdb      	subs	r3, r3, r7
 8007d9c:	60a2      	str	r2, [r4, #8]
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	f080 0001 	eor.w	r0, r0, #1
 8007da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da8:	68a3      	ldr	r3, [r4, #8]
 8007daa:	789b      	ldrb	r3, [r3, #2]
 8007dac:	706b      	strb	r3, [r5, #1]
 8007dae:	1cab      	adds	r3, r5, #2
 8007db0:	68a2      	ldr	r2, [r4, #8]
 8007db2:	7852      	ldrb	r2, [r2, #1]
 8007db4:	f803 2b01 	strb.w	r2, [r3], #1
 8007db8:	68a2      	ldr	r2, [r4, #8]
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e7b4      	b.n	8007d2a <ucdr_deserialize_uint32_t+0x72>
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	463a      	mov	r2, r7
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f00c fd7c 	bl	80148c2 <memcpy>
 8007dca:	68a1      	ldr	r1, [r4, #8]
 8007dcc:	464a      	mov	r2, r9
 8007dce:	19e8      	adds	r0, r5, r7
 8007dd0:	f00c fd77 	bl	80148c2 <memcpy>
 8007dd4:	e7a9      	b.n	8007d2a <ucdr_deserialize_uint32_t+0x72>
 8007dd6:	bf00      	nop

08007dd8 <ucdr_deserialize_endian_uint32_t>:
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	460e      	mov	r6, r1
 8007dde:	2104      	movs	r1, #4
 8007de0:	4604      	mov	r4, r0
 8007de2:	4615      	mov	r5, r2
 8007de4:	f000 fd70 	bl	80088c8 <ucdr_buffer_alignment>
 8007de8:	4601      	mov	r1, r0
 8007dea:	4620      	mov	r0, r4
 8007dec:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007df0:	f000 fdae 	bl	8008950 <ucdr_advance_buffer>
 8007df4:	2104      	movs	r1, #4
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 fd06 	bl	8008808 <ucdr_check_buffer_available_for>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d13c      	bne.n	8007e7a <ucdr_deserialize_endian_uint32_t+0xa2>
 8007e00:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8007e04:	42bb      	cmp	r3, r7
 8007e06:	d933      	bls.n	8007e70 <ucdr_deserialize_endian_uint32_t+0x98>
 8007e08:	eba3 0807 	sub.w	r8, r3, r7
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	f1c8 0a04 	rsb	sl, r8, #4
 8007e14:	4443      	add	r3, r8
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	4651      	mov	r1, sl
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 fd00 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d048      	beq.n	8007eb6 <ucdr_deserialize_endian_uint32_t+0xde>
 8007e24:	2e01      	cmp	r6, #1
 8007e26:	d061      	beq.n	8007eec <ucdr_deserialize_endian_uint32_t+0x114>
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	702b      	strb	r3, [r5, #0]
 8007e2c:	f1b8 0f00 	cmp.w	r8, #0
 8007e30:	d050      	beq.n	8007ed4 <ucdr_deserialize_endian_uint32_t+0xfc>
 8007e32:	78bb      	ldrb	r3, [r7, #2]
 8007e34:	706b      	strb	r3, [r5, #1]
 8007e36:	f1b8 0f01 	cmp.w	r8, #1
 8007e3a:	f105 0302 	add.w	r3, r5, #2
 8007e3e:	d04d      	beq.n	8007edc <ucdr_deserialize_endian_uint32_t+0x104>
 8007e40:	787b      	ldrb	r3, [r7, #1]
 8007e42:	70ab      	strb	r3, [r5, #2]
 8007e44:	f1b8 0f02 	cmp.w	r8, #2
 8007e48:	f105 0303 	add.w	r3, r5, #3
 8007e4c:	d04a      	beq.n	8007ee4 <ucdr_deserialize_endian_uint32_t+0x10c>
 8007e4e:	783b      	ldrb	r3, [r7, #0]
 8007e50:	70eb      	strb	r3, [r5, #3]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	68a2      	ldr	r2, [r4, #8]
 8007e56:	7da0      	ldrb	r0, [r4, #22]
 8007e58:	2104      	movs	r1, #4
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4452      	add	r2, sl
 8007e5e:	eba3 0308 	sub.w	r3, r3, r8
 8007e62:	7561      	strb	r1, [r4, #21]
 8007e64:	60a2      	str	r2, [r4, #8]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	f080 0001 	eor.w	r0, r0, #1
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	2104      	movs	r1, #4
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fcd4 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007e78:	b1a8      	cbz	r0, 8007ea6 <ucdr_deserialize_endian_uint32_t+0xce>
 8007e7a:	2e01      	cmp	r6, #1
 8007e7c:	68a3      	ldr	r3, [r4, #8]
 8007e7e:	d017      	beq.n	8007eb0 <ucdr_deserialize_endian_uint32_t+0xd8>
 8007e80:	78db      	ldrb	r3, [r3, #3]
 8007e82:	702b      	strb	r3, [r5, #0]
 8007e84:	68a3      	ldr	r3, [r4, #8]
 8007e86:	789b      	ldrb	r3, [r3, #2]
 8007e88:	706b      	strb	r3, [r5, #1]
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	70ab      	strb	r3, [r5, #2]
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	70eb      	strb	r3, [r5, #3]
 8007e96:	68a2      	ldr	r2, [r4, #8]
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	3204      	adds	r2, #4
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	60a2      	str	r2, [r4, #8]
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	7561      	strb	r1, [r4, #21]
 8007ea6:	7da0      	ldrb	r0, [r4, #22]
 8007ea8:	f080 0001 	eor.w	r0, r0, #1
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	e7ef      	b.n	8007e96 <ucdr_deserialize_endian_uint32_t+0xbe>
 8007eb6:	68a2      	ldr	r2, [r4, #8]
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	7da0      	ldrb	r0, [r4, #22]
 8007ebc:	f884 9015 	strb.w	r9, [r4, #21]
 8007ec0:	eba2 0208 	sub.w	r2, r2, r8
 8007ec4:	eba3 0308 	sub.w	r3, r3, r8
 8007ec8:	60a2      	str	r2, [r4, #8]
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	f080 0001 	eor.w	r0, r0, #1
 8007ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	789b      	ldrb	r3, [r3, #2]
 8007ed8:	706b      	strb	r3, [r5, #1]
 8007eda:	1cab      	adds	r3, r5, #2
 8007edc:	68a2      	ldr	r2, [r4, #8]
 8007ede:	7852      	ldrb	r2, [r2, #1]
 8007ee0:	f803 2b01 	strb.w	r2, [r3], #1
 8007ee4:	68a2      	ldr	r2, [r4, #8]
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e7b2      	b.n	8007e52 <ucdr_deserialize_endian_uint32_t+0x7a>
 8007eec:	4639      	mov	r1, r7
 8007eee:	4642      	mov	r2, r8
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f00c fce6 	bl	80148c2 <memcpy>
 8007ef6:	68a1      	ldr	r1, [r4, #8]
 8007ef8:	4652      	mov	r2, sl
 8007efa:	eb05 0008 	add.w	r0, r5, r8
 8007efe:	f00c fce0 	bl	80148c2 <memcpy>
 8007f02:	e7a6      	b.n	8007e52 <ucdr_deserialize_endian_uint32_t+0x7a>

08007f04 <ucdr_serialize_uint64_t>:
 8007f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f08:	2108      	movs	r1, #8
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8007f12:	f000 fcd9 	bl	80088c8 <ucdr_buffer_alignment>
 8007f16:	4601      	mov	r1, r0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	7d67      	ldrb	r7, [r4, #21]
 8007f1c:	f000 fd18 	bl	8008950 <ucdr_advance_buffer>
 8007f20:	2108      	movs	r1, #8
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 fc70 	bl	8008808 <ucdr_check_buffer_available_for>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d14e      	bne.n	8007fca <ucdr_serialize_uint64_t+0xc6>
 8007f2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	d945      	bls.n	8007fc0 <ucdr_serialize_uint64_t+0xbc>
 8007f34:	1b5e      	subs	r6, r3, r5
 8007f36:	60a3      	str	r3, [r4, #8]
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	f1c6 0808 	rsb	r8, r6, #8
 8007f3e:	4433      	add	r3, r6
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	4641      	mov	r1, r8
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fc6b 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d074      	beq.n	8008038 <ucdr_serialize_uint64_t+0x134>
 8007f4e:	7d23      	ldrb	r3, [r4, #20]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	f000 809b 	beq.w	800808c <ucdr_serialize_uint64_t+0x188>
 8007f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f5a:	702b      	strb	r3, [r5, #0]
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	d078      	beq.n	8008052 <ucdr_serialize_uint64_t+0x14e>
 8007f60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f64:	706b      	strb	r3, [r5, #1]
 8007f66:	2e01      	cmp	r6, #1
 8007f68:	d077      	beq.n	800805a <ucdr_serialize_uint64_t+0x156>
 8007f6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007f6e:	70ab      	strb	r3, [r5, #2]
 8007f70:	2e02      	cmp	r6, #2
 8007f72:	d076      	beq.n	8008062 <ucdr_serialize_uint64_t+0x15e>
 8007f74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007f78:	70eb      	strb	r3, [r5, #3]
 8007f7a:	2e03      	cmp	r6, #3
 8007f7c:	d075      	beq.n	800806a <ucdr_serialize_uint64_t+0x166>
 8007f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f82:	712b      	strb	r3, [r5, #4]
 8007f84:	2e04      	cmp	r6, #4
 8007f86:	d074      	beq.n	8008072 <ucdr_serialize_uint64_t+0x16e>
 8007f88:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007f8c:	716b      	strb	r3, [r5, #5]
 8007f8e:	2e05      	cmp	r6, #5
 8007f90:	d073      	beq.n	800807a <ucdr_serialize_uint64_t+0x176>
 8007f92:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007f96:	71ab      	strb	r3, [r5, #6]
 8007f98:	2e06      	cmp	r6, #6
 8007f9a:	d072      	beq.n	8008082 <ucdr_serialize_uint64_t+0x17e>
 8007f9c:	f89d 3000 	ldrb.w	r3, [sp]
 8007fa0:	71eb      	strb	r3, [r5, #7]
 8007fa2:	6923      	ldr	r3, [r4, #16]
 8007fa4:	68a2      	ldr	r2, [r4, #8]
 8007fa6:	7da0      	ldrb	r0, [r4, #22]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	1b9e      	subs	r6, r3, r6
 8007fac:	4442      	add	r2, r8
 8007fae:	2308      	movs	r3, #8
 8007fb0:	f080 0001 	eor.w	r0, r0, #1
 8007fb4:	60a2      	str	r2, [r4, #8]
 8007fb6:	6126      	str	r6, [r4, #16]
 8007fb8:	7563      	strb	r3, [r4, #21]
 8007fba:	b002      	add	sp, #8
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	2108      	movs	r1, #8
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fc2c 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8007fc8:	b350      	cbz	r0, 8008020 <ucdr_serialize_uint64_t+0x11c>
 8007fca:	7d23      	ldrb	r3, [r4, #20]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d02d      	beq.n	800802c <ucdr_serialize_uint64_t+0x128>
 8007fd0:	68a3      	ldr	r3, [r4, #8]
 8007fd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	68a3      	ldr	r3, [r4, #8]
 8007fda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007fde:	705a      	strb	r2, [r3, #1]
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007fe6:	709a      	strb	r2, [r3, #2]
 8007fe8:	68a3      	ldr	r3, [r4, #8]
 8007fea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007fee:	70da      	strb	r2, [r3, #3]
 8007ff0:	68a3      	ldr	r3, [r4, #8]
 8007ff2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007ff6:	711a      	strb	r2, [r3, #4]
 8007ff8:	68a3      	ldr	r3, [r4, #8]
 8007ffa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007ffe:	715a      	strb	r2, [r3, #5]
 8008000:	68a3      	ldr	r3, [r4, #8]
 8008002:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008006:	719a      	strb	r2, [r3, #6]
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	f89d 2000 	ldrb.w	r2, [sp]
 800800e:	71da      	strb	r2, [r3, #7]
 8008010:	68a2      	ldr	r2, [r4, #8]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	3208      	adds	r2, #8
 8008016:	3308      	adds	r3, #8
 8008018:	2108      	movs	r1, #8
 800801a:	60a2      	str	r2, [r4, #8]
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	7561      	strb	r1, [r4, #21]
 8008020:	7da0      	ldrb	r0, [r4, #22]
 8008022:	f080 0001 	eor.w	r0, r0, #1
 8008026:	b002      	add	sp, #8
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	466b      	mov	r3, sp
 800802e:	cb03      	ldmia	r3!, {r0, r1}
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	6018      	str	r0, [r3, #0]
 8008034:	6059      	str	r1, [r3, #4]
 8008036:	e7eb      	b.n	8008010 <ucdr_serialize_uint64_t+0x10c>
 8008038:	68a2      	ldr	r2, [r4, #8]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	7da0      	ldrb	r0, [r4, #22]
 800803e:	7567      	strb	r7, [r4, #21]
 8008040:	1b92      	subs	r2, r2, r6
 8008042:	1b9b      	subs	r3, r3, r6
 8008044:	f080 0001 	eor.w	r0, r0, #1
 8008048:	60a2      	str	r2, [r4, #8]
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	b002      	add	sp, #8
 800804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	f89d 2000 	ldrb.w	r2, [sp]
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e78a      	b.n	8007fa2 <ucdr_serialize_uint64_t+0x9e>
 800808c:	4628      	mov	r0, r5
 800808e:	466d      	mov	r5, sp
 8008090:	4629      	mov	r1, r5
 8008092:	4632      	mov	r2, r6
 8008094:	f00c fc15 	bl	80148c2 <memcpy>
 8008098:	68a0      	ldr	r0, [r4, #8]
 800809a:	4642      	mov	r2, r8
 800809c:	19a9      	adds	r1, r5, r6
 800809e:	f00c fc10 	bl	80148c2 <memcpy>
 80080a2:	e77e      	b.n	8007fa2 <ucdr_serialize_uint64_t+0x9e>

080080a4 <ucdr_serialize_int16_t>:
 80080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	460b      	mov	r3, r1
 80080ac:	2102      	movs	r1, #2
 80080ae:	4604      	mov	r4, r0
 80080b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80080b4:	f000 fc08 	bl	80088c8 <ucdr_buffer_alignment>
 80080b8:	4601      	mov	r1, r0
 80080ba:	4620      	mov	r0, r4
 80080bc:	7d67      	ldrb	r7, [r4, #21]
 80080be:	f000 fc47 	bl	8008950 <ucdr_advance_buffer>
 80080c2:	2102      	movs	r1, #2
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fb9f 	bl	8008808 <ucdr_check_buffer_available_for>
 80080ca:	bb78      	cbnz	r0, 800812c <ucdr_serialize_int16_t+0x88>
 80080cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80080d0:	42ab      	cmp	r3, r5
 80080d2:	d926      	bls.n	8008122 <ucdr_serialize_int16_t+0x7e>
 80080d4:	1b5e      	subs	r6, r3, r5
 80080d6:	60a3      	str	r3, [r4, #8]
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	f1c6 0802 	rsb	r8, r6, #2
 80080de:	4433      	add	r3, r6
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	4641      	mov	r1, r8
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fb9b 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d03b      	beq.n	8008166 <ucdr_serialize_int16_t+0xc2>
 80080ee:	7d23      	ldrb	r3, [r4, #20]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d04a      	beq.n	800818a <ucdr_serialize_int16_t+0xe6>
 80080f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80080f8:	702b      	strb	r3, [r5, #0]
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d040      	beq.n	8008180 <ucdr_serialize_int16_t+0xdc>
 80080fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008102:	706b      	strb	r3, [r5, #1]
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	68a2      	ldr	r2, [r4, #8]
 8008108:	7da0      	ldrb	r0, [r4, #22]
 800810a:	3302      	adds	r3, #2
 800810c:	1b9e      	subs	r6, r3, r6
 800810e:	4442      	add	r2, r8
 8008110:	2302      	movs	r3, #2
 8008112:	f080 0001 	eor.w	r0, r0, #1
 8008116:	60a2      	str	r2, [r4, #8]
 8008118:	6126      	str	r6, [r4, #16]
 800811a:	7563      	strb	r3, [r4, #21]
 800811c:	b002      	add	sp, #8
 800811e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008122:	2102      	movs	r1, #2
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fb7b 	bl	8008820 <ucdr_check_final_buffer_behavior>
 800812a:	b190      	cbz	r0, 8008152 <ucdr_serialize_int16_t+0xae>
 800812c:	7d23      	ldrb	r3, [r4, #20]
 800812e:	2b01      	cmp	r3, #1
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	d014      	beq.n	800815e <ucdr_serialize_int16_t+0xba>
 8008134:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	68a3      	ldr	r3, [r4, #8]
 800813c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008140:	705a      	strb	r2, [r3, #1]
 8008142:	68a2      	ldr	r2, [r4, #8]
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	3202      	adds	r2, #2
 8008148:	3302      	adds	r3, #2
 800814a:	2102      	movs	r1, #2
 800814c:	60a2      	str	r2, [r4, #8]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	7561      	strb	r1, [r4, #21]
 8008152:	7da0      	ldrb	r0, [r4, #22]
 8008154:	f080 0001 	eor.w	r0, r0, #1
 8008158:	b002      	add	sp, #8
 800815a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008162:	801a      	strh	r2, [r3, #0]
 8008164:	e7ed      	b.n	8008142 <ucdr_serialize_int16_t+0x9e>
 8008166:	68a2      	ldr	r2, [r4, #8]
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	7da0      	ldrb	r0, [r4, #22]
 800816c:	7567      	strb	r7, [r4, #21]
 800816e:	1b92      	subs	r2, r2, r6
 8008170:	1b9b      	subs	r3, r3, r6
 8008172:	f080 0001 	eor.w	r0, r0, #1
 8008176:	60a2      	str	r2, [r4, #8]
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	b002      	add	sp, #8
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	e7bc      	b.n	8008104 <ucdr_serialize_int16_t+0x60>
 800818a:	4628      	mov	r0, r5
 800818c:	f10d 0506 	add.w	r5, sp, #6
 8008190:	4629      	mov	r1, r5
 8008192:	4632      	mov	r2, r6
 8008194:	f00c fb95 	bl	80148c2 <memcpy>
 8008198:	68a0      	ldr	r0, [r4, #8]
 800819a:	4642      	mov	r2, r8
 800819c:	19a9      	adds	r1, r5, r6
 800819e:	f00c fb90 	bl	80148c2 <memcpy>
 80081a2:	e7af      	b.n	8008104 <ucdr_serialize_int16_t+0x60>

080081a4 <ucdr_deserialize_int16_t>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	460d      	mov	r5, r1
 80081aa:	2102      	movs	r1, #2
 80081ac:	4604      	mov	r4, r0
 80081ae:	f000 fb8b 	bl	80088c8 <ucdr_buffer_alignment>
 80081b2:	4601      	mov	r1, r0
 80081b4:	4620      	mov	r0, r4
 80081b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80081ba:	f000 fbc9 	bl	8008950 <ucdr_advance_buffer>
 80081be:	2102      	movs	r1, #2
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fb21 	bl	8008808 <ucdr_check_buffer_available_for>
 80081c6:	bb60      	cbnz	r0, 8008222 <ucdr_deserialize_int16_t+0x7e>
 80081c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80081cc:	42be      	cmp	r6, r7
 80081ce:	d923      	bls.n	8008218 <ucdr_deserialize_int16_t+0x74>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	60a6      	str	r6, [r4, #8]
 80081d4:	1bf6      	subs	r6, r6, r7
 80081d6:	4433      	add	r3, r6
 80081d8:	f1c6 0902 	rsb	r9, r6, #2
 80081dc:	6123      	str	r3, [r4, #16]
 80081de:	4649      	mov	r1, r9
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fb1d 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d034      	beq.n	8008254 <ucdr_deserialize_int16_t+0xb0>
 80081ea:	7d23      	ldrb	r3, [r4, #20]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d042      	beq.n	8008276 <ucdr_deserialize_int16_t+0xd2>
 80081f0:	787b      	ldrb	r3, [r7, #1]
 80081f2:	702b      	strb	r3, [r5, #0]
 80081f4:	2e00      	cmp	r6, #0
 80081f6:	d03a      	beq.n	800826e <ucdr_deserialize_int16_t+0xca>
 80081f8:	783b      	ldrb	r3, [r7, #0]
 80081fa:	706b      	strb	r3, [r5, #1]
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	68a2      	ldr	r2, [r4, #8]
 8008200:	7da0      	ldrb	r0, [r4, #22]
 8008202:	2102      	movs	r1, #2
 8008204:	3302      	adds	r3, #2
 8008206:	444a      	add	r2, r9
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	7561      	strb	r1, [r4, #21]
 800820c:	60a2      	str	r2, [r4, #8]
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	f080 0001 	eor.w	r0, r0, #1
 8008214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008218:	2102      	movs	r1, #2
 800821a:	4620      	mov	r0, r4
 800821c:	f000 fb00 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008220:	b180      	cbz	r0, 8008244 <ucdr_deserialize_int16_t+0xa0>
 8008222:	7d23      	ldrb	r3, [r4, #20]
 8008224:	2b01      	cmp	r3, #1
 8008226:	68a3      	ldr	r3, [r4, #8]
 8008228:	d011      	beq.n	800824e <ucdr_deserialize_int16_t+0xaa>
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	702b      	strb	r3, [r5, #0]
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	706b      	strb	r3, [r5, #1]
 8008234:	68a2      	ldr	r2, [r4, #8]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	3202      	adds	r2, #2
 800823a:	3302      	adds	r3, #2
 800823c:	2102      	movs	r1, #2
 800823e:	60a2      	str	r2, [r4, #8]
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	7561      	strb	r1, [r4, #21]
 8008244:	7da0      	ldrb	r0, [r4, #22]
 8008246:	f080 0001 	eor.w	r0, r0, #1
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	802b      	strh	r3, [r5, #0]
 8008252:	e7ef      	b.n	8008234 <ucdr_deserialize_int16_t+0x90>
 8008254:	68a2      	ldr	r2, [r4, #8]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	7da0      	ldrb	r0, [r4, #22]
 800825a:	f884 8015 	strb.w	r8, [r4, #21]
 800825e:	1b92      	subs	r2, r2, r6
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	60a2      	str	r2, [r4, #8]
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	f080 0001 	eor.w	r0, r0, #1
 800826a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	706b      	strb	r3, [r5, #1]
 8008274:	e7c2      	b.n	80081fc <ucdr_deserialize_int16_t+0x58>
 8008276:	4639      	mov	r1, r7
 8008278:	4632      	mov	r2, r6
 800827a:	4628      	mov	r0, r5
 800827c:	f00c fb21 	bl	80148c2 <memcpy>
 8008280:	68a1      	ldr	r1, [r4, #8]
 8008282:	464a      	mov	r2, r9
 8008284:	19a8      	adds	r0, r5, r6
 8008286:	f00c fb1c 	bl	80148c2 <memcpy>
 800828a:	e7b7      	b.n	80081fc <ucdr_deserialize_int16_t+0x58>

0800828c <ucdr_serialize_int32_t>:
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	4604      	mov	r4, r0
 8008294:	9101      	str	r1, [sp, #4]
 8008296:	2104      	movs	r1, #4
 8008298:	f000 fb16 	bl	80088c8 <ucdr_buffer_alignment>
 800829c:	4601      	mov	r1, r0
 800829e:	4620      	mov	r0, r4
 80082a0:	7d67      	ldrb	r7, [r4, #21]
 80082a2:	f000 fb55 	bl	8008950 <ucdr_advance_buffer>
 80082a6:	2104      	movs	r1, #4
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 faad 	bl	8008808 <ucdr_check_buffer_available_for>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d139      	bne.n	8008326 <ucdr_serialize_int32_t+0x9a>
 80082b2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80082b6:	42ab      	cmp	r3, r5
 80082b8:	d930      	bls.n	800831c <ucdr_serialize_int32_t+0x90>
 80082ba:	1b5e      	subs	r6, r3, r5
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	f1c6 0804 	rsb	r8, r6, #4
 80082c4:	4433      	add	r3, r6
 80082c6:	6123      	str	r3, [r4, #16]
 80082c8:	4641      	mov	r1, r8
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 faa8 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d04c      	beq.n	800836e <ucdr_serialize_int32_t+0xe2>
 80082d4:	7d23      	ldrb	r3, [r4, #20]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d063      	beq.n	80083a2 <ucdr_serialize_int32_t+0x116>
 80082da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082de:	702b      	strb	r3, [r5, #0]
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	d051      	beq.n	8008388 <ucdr_serialize_int32_t+0xfc>
 80082e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082e8:	706b      	strb	r3, [r5, #1]
 80082ea:	2e01      	cmp	r6, #1
 80082ec:	d050      	beq.n	8008390 <ucdr_serialize_int32_t+0x104>
 80082ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082f2:	70ab      	strb	r3, [r5, #2]
 80082f4:	2e02      	cmp	r6, #2
 80082f6:	d04f      	beq.n	8008398 <ucdr_serialize_int32_t+0x10c>
 80082f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082fc:	70eb      	strb	r3, [r5, #3]
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	68a2      	ldr	r2, [r4, #8]
 8008302:	7da0      	ldrb	r0, [r4, #22]
 8008304:	3304      	adds	r3, #4
 8008306:	1b9e      	subs	r6, r3, r6
 8008308:	4442      	add	r2, r8
 800830a:	2304      	movs	r3, #4
 800830c:	f080 0001 	eor.w	r0, r0, #1
 8008310:	60a2      	str	r2, [r4, #8]
 8008312:	6126      	str	r6, [r4, #16]
 8008314:	7563      	strb	r3, [r4, #21]
 8008316:	b002      	add	sp, #8
 8008318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831c:	2104      	movs	r1, #4
 800831e:	4620      	mov	r0, r4
 8008320:	f000 fa7e 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008324:	b1d0      	cbz	r0, 800835c <ucdr_serialize_int32_t+0xd0>
 8008326:	7d23      	ldrb	r3, [r4, #20]
 8008328:	2b01      	cmp	r3, #1
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	d01c      	beq.n	8008368 <ucdr_serialize_int32_t+0xdc>
 800832e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800833a:	705a      	strb	r2, [r3, #1]
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008342:	709a      	strb	r2, [r3, #2]
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800834a:	70da      	strb	r2, [r3, #3]
 800834c:	68a2      	ldr	r2, [r4, #8]
 800834e:	6923      	ldr	r3, [r4, #16]
 8008350:	3204      	adds	r2, #4
 8008352:	3304      	adds	r3, #4
 8008354:	2104      	movs	r1, #4
 8008356:	60a2      	str	r2, [r4, #8]
 8008358:	6123      	str	r3, [r4, #16]
 800835a:	7561      	strb	r1, [r4, #21]
 800835c:	7da0      	ldrb	r0, [r4, #22]
 800835e:	f080 0001 	eor.w	r0, r0, #1
 8008362:	b002      	add	sp, #8
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	9a01      	ldr	r2, [sp, #4]
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e7ee      	b.n	800834c <ucdr_serialize_int32_t+0xc0>
 800836e:	68a2      	ldr	r2, [r4, #8]
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	7da0      	ldrb	r0, [r4, #22]
 8008374:	7567      	strb	r7, [r4, #21]
 8008376:	1b92      	subs	r2, r2, r6
 8008378:	1b9b      	subs	r3, r3, r6
 800837a:	f080 0001 	eor.w	r0, r0, #1
 800837e:	60a2      	str	r2, [r4, #8]
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	b002      	add	sp, #8
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	68a3      	ldr	r3, [r4, #8]
 8008392:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	68a3      	ldr	r3, [r4, #8]
 800839a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e7ad      	b.n	80082fe <ucdr_serialize_int32_t+0x72>
 80083a2:	4628      	mov	r0, r5
 80083a4:	ad01      	add	r5, sp, #4
 80083a6:	4629      	mov	r1, r5
 80083a8:	4632      	mov	r2, r6
 80083aa:	f00c fa8a 	bl	80148c2 <memcpy>
 80083ae:	68a0      	ldr	r0, [r4, #8]
 80083b0:	4642      	mov	r2, r8
 80083b2:	19a9      	adds	r1, r5, r6
 80083b4:	f00c fa85 	bl	80148c2 <memcpy>
 80083b8:	e7a1      	b.n	80082fe <ucdr_serialize_int32_t+0x72>
 80083ba:	bf00      	nop

080083bc <ucdr_deserialize_int32_t>:
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c0:	460d      	mov	r5, r1
 80083c2:	2104      	movs	r1, #4
 80083c4:	4604      	mov	r4, r0
 80083c6:	f000 fa7f 	bl	80088c8 <ucdr_buffer_alignment>
 80083ca:	4601      	mov	r1, r0
 80083cc:	4620      	mov	r0, r4
 80083ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80083d2:	f000 fabd 	bl	8008950 <ucdr_advance_buffer>
 80083d6:	2104      	movs	r1, #4
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fa15 	bl	8008808 <ucdr_check_buffer_available_for>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d138      	bne.n	8008454 <ucdr_deserialize_int32_t+0x98>
 80083e2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80083e6:	42b7      	cmp	r7, r6
 80083e8:	d92f      	bls.n	800844a <ucdr_deserialize_int32_t+0x8e>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	60a7      	str	r7, [r4, #8]
 80083ee:	1bbf      	subs	r7, r7, r6
 80083f0:	443b      	add	r3, r7
 80083f2:	f1c7 0904 	rsb	r9, r7, #4
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	4649      	mov	r1, r9
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fa10 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008400:	2800      	cmp	r0, #0
 8008402:	d046      	beq.n	8008492 <ucdr_deserialize_int32_t+0xd6>
 8008404:	7d23      	ldrb	r3, [r4, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d05c      	beq.n	80084c4 <ucdr_deserialize_int32_t+0x108>
 800840a:	78f3      	ldrb	r3, [r6, #3]
 800840c:	702b      	strb	r3, [r5, #0]
 800840e:	2f00      	cmp	r7, #0
 8008410:	d04c      	beq.n	80084ac <ucdr_deserialize_int32_t+0xf0>
 8008412:	78b3      	ldrb	r3, [r6, #2]
 8008414:	706b      	strb	r3, [r5, #1]
 8008416:	2f01      	cmp	r7, #1
 8008418:	f105 0302 	add.w	r3, r5, #2
 800841c:	d04a      	beq.n	80084b4 <ucdr_deserialize_int32_t+0xf8>
 800841e:	7873      	ldrb	r3, [r6, #1]
 8008420:	70ab      	strb	r3, [r5, #2]
 8008422:	2f02      	cmp	r7, #2
 8008424:	f105 0303 	add.w	r3, r5, #3
 8008428:	d048      	beq.n	80084bc <ucdr_deserialize_int32_t+0x100>
 800842a:	7833      	ldrb	r3, [r6, #0]
 800842c:	70eb      	strb	r3, [r5, #3]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	68a2      	ldr	r2, [r4, #8]
 8008432:	7da0      	ldrb	r0, [r4, #22]
 8008434:	2104      	movs	r1, #4
 8008436:	3304      	adds	r3, #4
 8008438:	444a      	add	r2, r9
 800843a:	1bdb      	subs	r3, r3, r7
 800843c:	7561      	strb	r1, [r4, #21]
 800843e:	60a2      	str	r2, [r4, #8]
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	f080 0001 	eor.w	r0, r0, #1
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	2104      	movs	r1, #4
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f9e7 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008452:	b1b0      	cbz	r0, 8008482 <ucdr_deserialize_int32_t+0xc6>
 8008454:	7d23      	ldrb	r3, [r4, #20]
 8008456:	2b01      	cmp	r3, #1
 8008458:	68a3      	ldr	r3, [r4, #8]
 800845a:	d017      	beq.n	800848c <ucdr_deserialize_int32_t+0xd0>
 800845c:	78db      	ldrb	r3, [r3, #3]
 800845e:	702b      	strb	r3, [r5, #0]
 8008460:	68a3      	ldr	r3, [r4, #8]
 8008462:	789b      	ldrb	r3, [r3, #2]
 8008464:	706b      	strb	r3, [r5, #1]
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	70ab      	strb	r3, [r5, #2]
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	70eb      	strb	r3, [r5, #3]
 8008472:	68a2      	ldr	r2, [r4, #8]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	3204      	adds	r2, #4
 8008478:	3304      	adds	r3, #4
 800847a:	2104      	movs	r1, #4
 800847c:	60a2      	str	r2, [r4, #8]
 800847e:	6123      	str	r3, [r4, #16]
 8008480:	7561      	strb	r1, [r4, #21]
 8008482:	7da0      	ldrb	r0, [r4, #22]
 8008484:	f080 0001 	eor.w	r0, r0, #1
 8008488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	e7ef      	b.n	8008472 <ucdr_deserialize_int32_t+0xb6>
 8008492:	68a2      	ldr	r2, [r4, #8]
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	7da0      	ldrb	r0, [r4, #22]
 8008498:	f884 8015 	strb.w	r8, [r4, #21]
 800849c:	1bd2      	subs	r2, r2, r7
 800849e:	1bdb      	subs	r3, r3, r7
 80084a0:	60a2      	str	r2, [r4, #8]
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	f080 0001 	eor.w	r0, r0, #1
 80084a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	789b      	ldrb	r3, [r3, #2]
 80084b0:	706b      	strb	r3, [r5, #1]
 80084b2:	1cab      	adds	r3, r5, #2
 80084b4:	68a2      	ldr	r2, [r4, #8]
 80084b6:	7852      	ldrb	r2, [r2, #1]
 80084b8:	f803 2b01 	strb.w	r2, [r3], #1
 80084bc:	68a2      	ldr	r2, [r4, #8]
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	e7b4      	b.n	800842e <ucdr_deserialize_int32_t+0x72>
 80084c4:	4631      	mov	r1, r6
 80084c6:	463a      	mov	r2, r7
 80084c8:	4628      	mov	r0, r5
 80084ca:	f00c f9fa 	bl	80148c2 <memcpy>
 80084ce:	68a1      	ldr	r1, [r4, #8]
 80084d0:	464a      	mov	r2, r9
 80084d2:	19e8      	adds	r0, r5, r7
 80084d4:	f00c f9f5 	bl	80148c2 <memcpy>
 80084d8:	e7a9      	b.n	800842e <ucdr_deserialize_int32_t+0x72>
 80084da:	bf00      	nop

080084dc <ucdr_serialize_double>:
 80084dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e0:	2108      	movs	r1, #8
 80084e2:	b082      	sub	sp, #8
 80084e4:	4604      	mov	r4, r0
 80084e6:	ed8d 0b00 	vstr	d0, [sp]
 80084ea:	f000 f9ed 	bl	80088c8 <ucdr_buffer_alignment>
 80084ee:	4601      	mov	r1, r0
 80084f0:	4620      	mov	r0, r4
 80084f2:	7d67      	ldrb	r7, [r4, #21]
 80084f4:	f000 fa2c 	bl	8008950 <ucdr_advance_buffer>
 80084f8:	2108      	movs	r1, #8
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f984 	bl	8008808 <ucdr_check_buffer_available_for>
 8008500:	2800      	cmp	r0, #0
 8008502:	d14e      	bne.n	80085a2 <ucdr_serialize_double+0xc6>
 8008504:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008508:	42ab      	cmp	r3, r5
 800850a:	d945      	bls.n	8008598 <ucdr_serialize_double+0xbc>
 800850c:	1b5e      	subs	r6, r3, r5
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	f1c6 0808 	rsb	r8, r6, #8
 8008516:	4433      	add	r3, r6
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	4641      	mov	r1, r8
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f97f 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008522:	2800      	cmp	r0, #0
 8008524:	d074      	beq.n	8008610 <ucdr_serialize_double+0x134>
 8008526:	7d23      	ldrb	r3, [r4, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f000 809b 	beq.w	8008664 <ucdr_serialize_double+0x188>
 800852e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008532:	702b      	strb	r3, [r5, #0]
 8008534:	2e00      	cmp	r6, #0
 8008536:	d078      	beq.n	800862a <ucdr_serialize_double+0x14e>
 8008538:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800853c:	706b      	strb	r3, [r5, #1]
 800853e:	2e01      	cmp	r6, #1
 8008540:	d077      	beq.n	8008632 <ucdr_serialize_double+0x156>
 8008542:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008546:	70ab      	strb	r3, [r5, #2]
 8008548:	2e02      	cmp	r6, #2
 800854a:	d076      	beq.n	800863a <ucdr_serialize_double+0x15e>
 800854c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008550:	70eb      	strb	r3, [r5, #3]
 8008552:	2e03      	cmp	r6, #3
 8008554:	d075      	beq.n	8008642 <ucdr_serialize_double+0x166>
 8008556:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800855a:	712b      	strb	r3, [r5, #4]
 800855c:	2e04      	cmp	r6, #4
 800855e:	d074      	beq.n	800864a <ucdr_serialize_double+0x16e>
 8008560:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008564:	716b      	strb	r3, [r5, #5]
 8008566:	2e05      	cmp	r6, #5
 8008568:	d073      	beq.n	8008652 <ucdr_serialize_double+0x176>
 800856a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800856e:	71ab      	strb	r3, [r5, #6]
 8008570:	2e06      	cmp	r6, #6
 8008572:	d072      	beq.n	800865a <ucdr_serialize_double+0x17e>
 8008574:	f89d 3000 	ldrb.w	r3, [sp]
 8008578:	71eb      	strb	r3, [r5, #7]
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	68a2      	ldr	r2, [r4, #8]
 800857e:	7da0      	ldrb	r0, [r4, #22]
 8008580:	3308      	adds	r3, #8
 8008582:	1b9e      	subs	r6, r3, r6
 8008584:	4442      	add	r2, r8
 8008586:	2308      	movs	r3, #8
 8008588:	f080 0001 	eor.w	r0, r0, #1
 800858c:	60a2      	str	r2, [r4, #8]
 800858e:	6126      	str	r6, [r4, #16]
 8008590:	7563      	strb	r3, [r4, #21]
 8008592:	b002      	add	sp, #8
 8008594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008598:	2108      	movs	r1, #8
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f940 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80085a0:	b350      	cbz	r0, 80085f8 <ucdr_serialize_double+0x11c>
 80085a2:	7d23      	ldrb	r3, [r4, #20]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d02d      	beq.n	8008604 <ucdr_serialize_double+0x128>
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80085b6:	705a      	strb	r2, [r3, #1]
 80085b8:	68a3      	ldr	r3, [r4, #8]
 80085ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80085be:	709a      	strb	r2, [r3, #2]
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085c6:	70da      	strb	r2, [r3, #3]
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80085ce:	711a      	strb	r2, [r3, #4]
 80085d0:	68a3      	ldr	r3, [r4, #8]
 80085d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80085d6:	715a      	strb	r2, [r3, #5]
 80085d8:	68a3      	ldr	r3, [r4, #8]
 80085da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80085de:	719a      	strb	r2, [r3, #6]
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	f89d 2000 	ldrb.w	r2, [sp]
 80085e6:	71da      	strb	r2, [r3, #7]
 80085e8:	68a2      	ldr	r2, [r4, #8]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	3208      	adds	r2, #8
 80085ee:	3308      	adds	r3, #8
 80085f0:	2108      	movs	r1, #8
 80085f2:	60a2      	str	r2, [r4, #8]
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	7561      	strb	r1, [r4, #21]
 80085f8:	7da0      	ldrb	r0, [r4, #22]
 80085fa:	f080 0001 	eor.w	r0, r0, #1
 80085fe:	b002      	add	sp, #8
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	466b      	mov	r3, sp
 8008606:	cb03      	ldmia	r3!, {r0, r1}
 8008608:	68a3      	ldr	r3, [r4, #8]
 800860a:	6018      	str	r0, [r3, #0]
 800860c:	6059      	str	r1, [r3, #4]
 800860e:	e7eb      	b.n	80085e8 <ucdr_serialize_double+0x10c>
 8008610:	68a2      	ldr	r2, [r4, #8]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	7da0      	ldrb	r0, [r4, #22]
 8008616:	7567      	strb	r7, [r4, #21]
 8008618:	1b92      	subs	r2, r2, r6
 800861a:	1b9b      	subs	r3, r3, r6
 800861c:	f080 0001 	eor.w	r0, r0, #1
 8008620:	60a2      	str	r2, [r4, #8]
 8008622:	6123      	str	r3, [r4, #16]
 8008624:	b002      	add	sp, #8
 8008626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	f89d 2000 	ldrb.w	r2, [sp]
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e78a      	b.n	800857a <ucdr_serialize_double+0x9e>
 8008664:	4628      	mov	r0, r5
 8008666:	466d      	mov	r5, sp
 8008668:	4629      	mov	r1, r5
 800866a:	4632      	mov	r2, r6
 800866c:	f00c f929 	bl	80148c2 <memcpy>
 8008670:	68a0      	ldr	r0, [r4, #8]
 8008672:	4642      	mov	r2, r8
 8008674:	19a9      	adds	r1, r5, r6
 8008676:	f00c f924 	bl	80148c2 <memcpy>
 800867a:	e77e      	b.n	800857a <ucdr_serialize_double+0x9e>

0800867c <ucdr_deserialize_double>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	460d      	mov	r5, r1
 8008682:	2108      	movs	r1, #8
 8008684:	4604      	mov	r4, r0
 8008686:	f000 f91f 	bl	80088c8 <ucdr_buffer_alignment>
 800868a:	4601      	mov	r1, r0
 800868c:	4620      	mov	r0, r4
 800868e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008692:	f000 f95d 	bl	8008950 <ucdr_advance_buffer>
 8008696:	2108      	movs	r1, #8
 8008698:	4620      	mov	r0, r4
 800869a:	f000 f8b5 	bl	8008808 <ucdr_check_buffer_available_for>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d151      	bne.n	8008746 <ucdr_deserialize_double+0xca>
 80086a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80086a6:	42be      	cmp	r6, r7
 80086a8:	d948      	bls.n	800873c <ucdr_deserialize_double+0xc0>
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	60a6      	str	r6, [r4, #8]
 80086ae:	1bf6      	subs	r6, r6, r7
 80086b0:	4433      	add	r3, r6
 80086b2:	f1c6 0808 	rsb	r8, r6, #8
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	4641      	mov	r1, r8
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f8b0 	bl	8008820 <ucdr_check_final_buffer_behavior>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d06d      	beq.n	80087a0 <ucdr_deserialize_double+0x124>
 80086c4:	7d23      	ldrb	r3, [r4, #20]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	f000 8093 	beq.w	80087f2 <ucdr_deserialize_double+0x176>
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	702b      	strb	r3, [r5, #0]
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	d072      	beq.n	80087ba <ucdr_deserialize_double+0x13e>
 80086d4:	79bb      	ldrb	r3, [r7, #6]
 80086d6:	706b      	strb	r3, [r5, #1]
 80086d8:	2e01      	cmp	r6, #1
 80086da:	f105 0302 	add.w	r3, r5, #2
 80086de:	d070      	beq.n	80087c2 <ucdr_deserialize_double+0x146>
 80086e0:	797b      	ldrb	r3, [r7, #5]
 80086e2:	70ab      	strb	r3, [r5, #2]
 80086e4:	2e02      	cmp	r6, #2
 80086e6:	f105 0303 	add.w	r3, r5, #3
 80086ea:	d06e      	beq.n	80087ca <ucdr_deserialize_double+0x14e>
 80086ec:	793b      	ldrb	r3, [r7, #4]
 80086ee:	70eb      	strb	r3, [r5, #3]
 80086f0:	2e03      	cmp	r6, #3
 80086f2:	f105 0304 	add.w	r3, r5, #4
 80086f6:	d06c      	beq.n	80087d2 <ucdr_deserialize_double+0x156>
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	712b      	strb	r3, [r5, #4]
 80086fc:	2e04      	cmp	r6, #4
 80086fe:	f105 0305 	add.w	r3, r5, #5
 8008702:	d06a      	beq.n	80087da <ucdr_deserialize_double+0x15e>
 8008704:	78bb      	ldrb	r3, [r7, #2]
 8008706:	716b      	strb	r3, [r5, #5]
 8008708:	2e05      	cmp	r6, #5
 800870a:	f105 0306 	add.w	r3, r5, #6
 800870e:	d068      	beq.n	80087e2 <ucdr_deserialize_double+0x166>
 8008710:	787b      	ldrb	r3, [r7, #1]
 8008712:	71ab      	strb	r3, [r5, #6]
 8008714:	2e06      	cmp	r6, #6
 8008716:	f105 0307 	add.w	r3, r5, #7
 800871a:	d066      	beq.n	80087ea <ucdr_deserialize_double+0x16e>
 800871c:	783b      	ldrb	r3, [r7, #0]
 800871e:	71eb      	strb	r3, [r5, #7]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	68a2      	ldr	r2, [r4, #8]
 8008724:	7da0      	ldrb	r0, [r4, #22]
 8008726:	3308      	adds	r3, #8
 8008728:	1b9e      	subs	r6, r3, r6
 800872a:	2308      	movs	r3, #8
 800872c:	4442      	add	r2, r8
 800872e:	7563      	strb	r3, [r4, #21]
 8008730:	60a2      	str	r2, [r4, #8]
 8008732:	6126      	str	r6, [r4, #16]
 8008734:	f080 0001 	eor.w	r0, r0, #1
 8008738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873c:	2108      	movs	r1, #8
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f86e 	bl	8008820 <ucdr_check_final_buffer_behavior>
 8008744:	b310      	cbz	r0, 800878c <ucdr_deserialize_double+0x110>
 8008746:	7d23      	ldrb	r3, [r4, #20]
 8008748:	2b01      	cmp	r3, #1
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	d023      	beq.n	8008796 <ucdr_deserialize_double+0x11a>
 800874e:	79db      	ldrb	r3, [r3, #7]
 8008750:	702b      	strb	r3, [r5, #0]
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	799b      	ldrb	r3, [r3, #6]
 8008756:	706b      	strb	r3, [r5, #1]
 8008758:	68a3      	ldr	r3, [r4, #8]
 800875a:	795b      	ldrb	r3, [r3, #5]
 800875c:	70ab      	strb	r3, [r5, #2]
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	70eb      	strb	r3, [r5, #3]
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	78db      	ldrb	r3, [r3, #3]
 8008768:	712b      	strb	r3, [r5, #4]
 800876a:	68a3      	ldr	r3, [r4, #8]
 800876c:	789b      	ldrb	r3, [r3, #2]
 800876e:	716b      	strb	r3, [r5, #5]
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	71ab      	strb	r3, [r5, #6]
 8008776:	68a3      	ldr	r3, [r4, #8]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	71eb      	strb	r3, [r5, #7]
 800877c:	68a2      	ldr	r2, [r4, #8]
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	3208      	adds	r2, #8
 8008782:	3308      	adds	r3, #8
 8008784:	2108      	movs	r1, #8
 8008786:	60a2      	str	r2, [r4, #8]
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	7561      	strb	r1, [r4, #21]
 800878c:	7da0      	ldrb	r0, [r4, #22]
 800878e:	f080 0001 	eor.w	r0, r0, #1
 8008792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	606b      	str	r3, [r5, #4]
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	e7ed      	b.n	800877c <ucdr_deserialize_double+0x100>
 80087a0:	68a2      	ldr	r2, [r4, #8]
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	7da0      	ldrb	r0, [r4, #22]
 80087a6:	f884 9015 	strb.w	r9, [r4, #21]
 80087aa:	1b92      	subs	r2, r2, r6
 80087ac:	1b9b      	subs	r3, r3, r6
 80087ae:	60a2      	str	r2, [r4, #8]
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	f080 0001 	eor.w	r0, r0, #1
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	799b      	ldrb	r3, [r3, #6]
 80087be:	706b      	strb	r3, [r5, #1]
 80087c0:	1cab      	adds	r3, r5, #2
 80087c2:	68a2      	ldr	r2, [r4, #8]
 80087c4:	7952      	ldrb	r2, [r2, #5]
 80087c6:	f803 2b01 	strb.w	r2, [r3], #1
 80087ca:	68a2      	ldr	r2, [r4, #8]
 80087cc:	7912      	ldrb	r2, [r2, #4]
 80087ce:	f803 2b01 	strb.w	r2, [r3], #1
 80087d2:	68a2      	ldr	r2, [r4, #8]
 80087d4:	78d2      	ldrb	r2, [r2, #3]
 80087d6:	f803 2b01 	strb.w	r2, [r3], #1
 80087da:	68a2      	ldr	r2, [r4, #8]
 80087dc:	7892      	ldrb	r2, [r2, #2]
 80087de:	f803 2b01 	strb.w	r2, [r3], #1
 80087e2:	68a2      	ldr	r2, [r4, #8]
 80087e4:	7852      	ldrb	r2, [r2, #1]
 80087e6:	f803 2b01 	strb.w	r2, [r3], #1
 80087ea:	68a2      	ldr	r2, [r4, #8]
 80087ec:	7812      	ldrb	r2, [r2, #0]
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e796      	b.n	8008720 <ucdr_deserialize_double+0xa4>
 80087f2:	4639      	mov	r1, r7
 80087f4:	4632      	mov	r2, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	f00c f863 	bl	80148c2 <memcpy>
 80087fc:	68a1      	ldr	r1, [r4, #8]
 80087fe:	4642      	mov	r2, r8
 8008800:	19a8      	adds	r0, r5, r6
 8008802:	f00c f85e 	bl	80148c2 <memcpy>
 8008806:	e78b      	b.n	8008720 <ucdr_deserialize_double+0xa4>

08008808 <ucdr_check_buffer_available_for>:
 8008808:	7d83      	ldrb	r3, [r0, #22]
 800880a:	b93b      	cbnz	r3, 800881c <ucdr_check_buffer_available_for+0x14>
 800880c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008810:	4419      	add	r1, r3
 8008812:	4288      	cmp	r0, r1
 8008814:	bf34      	ite	cc
 8008816:	2000      	movcc	r0, #0
 8008818:	2001      	movcs	r0, #1
 800881a:	4770      	bx	lr
 800881c:	2000      	movs	r0, #0
 800881e:	4770      	bx	lr

08008820 <ucdr_check_final_buffer_behavior>:
 8008820:	7d83      	ldrb	r3, [r0, #22]
 8008822:	b943      	cbnz	r3, 8008836 <ucdr_check_final_buffer_behavior+0x16>
 8008824:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008828:	4291      	cmp	r1, r2
 800882a:	b510      	push	{r4, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	d205      	bcs.n	800883c <ucdr_check_final_buffer_behavior+0x1c>
 8008830:	2301      	movs	r3, #1
 8008832:	4618      	mov	r0, r3
 8008834:	bd10      	pop	{r4, pc}
 8008836:	2300      	movs	r3, #0
 8008838:	4618      	mov	r0, r3
 800883a:	4770      	bx	lr
 800883c:	6982      	ldr	r2, [r0, #24]
 800883e:	b13a      	cbz	r2, 8008850 <ucdr_check_final_buffer_behavior+0x30>
 8008840:	69c1      	ldr	r1, [r0, #28]
 8008842:	4790      	blx	r2
 8008844:	f080 0301 	eor.w	r3, r0, #1
 8008848:	b2db      	uxtb	r3, r3
 800884a:	75a0      	strb	r0, [r4, #22]
 800884c:	4618      	mov	r0, r3
 800884e:	bd10      	pop	{r4, pc}
 8008850:	2001      	movs	r0, #1
 8008852:	75a0      	strb	r0, [r4, #22]
 8008854:	e7fa      	b.n	800884c <ucdr_check_final_buffer_behavior+0x2c>
 8008856:	bf00      	nop

08008858 <ucdr_set_on_full_buffer_callback>:
 8008858:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop

08008860 <ucdr_init_buffer_origin_offset_endian>:
 8008860:	b410      	push	{r4}
 8008862:	9c01      	ldr	r4, [sp, #4]
 8008864:	6001      	str	r1, [r0, #0]
 8008866:	440a      	add	r2, r1
 8008868:	6042      	str	r2, [r0, #4]
 800886a:	190a      	adds	r2, r1, r4
 800886c:	441c      	add	r4, r3
 800886e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008872:	6082      	str	r2, [r0, #8]
 8008874:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008878:	7503      	strb	r3, [r0, #20]
 800887a:	2200      	movs	r2, #0
 800887c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008884:	7542      	strb	r2, [r0, #21]
 8008886:	7582      	strb	r2, [r0, #22]
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop

0800888c <ucdr_init_buffer_origin_offset>:
 800888c:	b510      	push	{r4, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	9c04      	ldr	r4, [sp, #16]
 8008892:	9400      	str	r4, [sp, #0]
 8008894:	2401      	movs	r4, #1
 8008896:	9401      	str	r4, [sp, #4]
 8008898:	f7ff ffe2 	bl	8008860 <ucdr_init_buffer_origin_offset_endian>
 800889c:	b002      	add	sp, #8
 800889e:	bd10      	pop	{r4, pc}

080088a0 <ucdr_init_buffer_origin>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	2400      	movs	r4, #0
 80088a6:	9400      	str	r4, [sp, #0]
 80088a8:	f7ff fff0 	bl	800888c <ucdr_init_buffer_origin_offset>
 80088ac:	b002      	add	sp, #8
 80088ae:	bd10      	pop	{r4, pc}

080088b0 <ucdr_init_buffer>:
 80088b0:	2300      	movs	r3, #0
 80088b2:	f7ff bff5 	b.w	80088a0 <ucdr_init_buffer_origin>
 80088b6:	bf00      	nop

080088b8 <ucdr_alignment>:
 80088b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80088bc:	fb03 0011 	mls	r0, r3, r1, r0
 80088c0:	1a08      	subs	r0, r1, r0
 80088c2:	3901      	subs	r1, #1
 80088c4:	4008      	ands	r0, r1
 80088c6:	4770      	bx	lr

080088c8 <ucdr_buffer_alignment>:
 80088c8:	7d43      	ldrb	r3, [r0, #21]
 80088ca:	428b      	cmp	r3, r1
 80088cc:	d208      	bcs.n	80088e0 <ucdr_buffer_alignment+0x18>
 80088ce:	6900      	ldr	r0, [r0, #16]
 80088d0:	fbb0 f3f1 	udiv	r3, r0, r1
 80088d4:	fb01 0013 	mls	r0, r1, r3, r0
 80088d8:	1a08      	subs	r0, r1, r0
 80088da:	3901      	subs	r1, #1
 80088dc:	4008      	ands	r0, r1
 80088de:	4770      	bx	lr
 80088e0:	2000      	movs	r0, #0
 80088e2:	4770      	bx	lr

080088e4 <ucdr_align_to>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	460d      	mov	r5, r1
 80088ea:	f7ff ffed 	bl	80088c8 <ucdr_buffer_alignment>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	6921      	ldr	r1, [r4, #16]
 80088f2:	7565      	strb	r5, [r4, #21]
 80088f4:	181a      	adds	r2, r3, r0
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	4408      	add	r0, r1
 80088fc:	bf28      	it	cs
 80088fe:	4613      	movcs	r3, r2
 8008900:	6120      	str	r0, [r4, #16]
 8008902:	60a3      	str	r3, [r4, #8]
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	bf00      	nop

08008908 <ucdr_buffer_length>:
 8008908:	6882      	ldr	r2, [r0, #8]
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	1a10      	subs	r0, r2, r0
 800890e:	4770      	bx	lr

08008910 <ucdr_buffer_remaining>:
 8008910:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008914:	1a10      	subs	r0, r2, r0
 8008916:	4770      	bx	lr

08008918 <ucdr_check_final_buffer_behavior_array>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	7d83      	ldrb	r3, [r0, #22]
 800891c:	b963      	cbnz	r3, 8008938 <ucdr_check_final_buffer_behavior_array+0x20>
 800891e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	d308      	bcc.n	800893c <ucdr_check_final_buffer_behavior_array+0x24>
 800892a:	b139      	cbz	r1, 800893c <ucdr_check_final_buffer_behavior_array+0x24>
 800892c:	6983      	ldr	r3, [r0, #24]
 800892e:	b163      	cbz	r3, 800894a <ucdr_check_final_buffer_behavior_array+0x32>
 8008930:	69c1      	ldr	r1, [r0, #28]
 8008932:	4798      	blx	r3
 8008934:	75a0      	strb	r0, [r4, #22]
 8008936:	b108      	cbz	r0, 800893c <ucdr_check_final_buffer_behavior_array+0x24>
 8008938:	2000      	movs	r0, #0
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	4620      	mov	r0, r4
 800893e:	f7ff ffe7 	bl	8008910 <ucdr_buffer_remaining>
 8008942:	42a8      	cmp	r0, r5
 8008944:	bf28      	it	cs
 8008946:	4628      	movcs	r0, r5
 8008948:	bd38      	pop	{r3, r4, r5, pc}
 800894a:	2301      	movs	r3, #1
 800894c:	7583      	strb	r3, [r0, #22]
 800894e:	e7f3      	b.n	8008938 <ucdr_check_final_buffer_behavior_array+0x20>

08008950 <ucdr_advance_buffer>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4604      	mov	r4, r0
 8008954:	460d      	mov	r5, r1
 8008956:	f7ff ff57 	bl	8008808 <ucdr_check_buffer_available_for>
 800895a:	b178      	cbz	r0, 800897c <ucdr_advance_buffer+0x2c>
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	68a2      	ldr	r2, [r4, #8]
 8008960:	442b      	add	r3, r5
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	2301      	movs	r3, #1
 8008966:	442a      	add	r2, r5
 8008968:	7563      	strb	r3, [r4, #21]
 800896a:	60a2      	str	r2, [r4, #8]
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	68a2      	ldr	r2, [r4, #8]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	4402      	add	r2, r0
 8008974:	4403      	add	r3, r0
 8008976:	1a2d      	subs	r5, r5, r0
 8008978:	60a2      	str	r2, [r4, #8]
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	4629      	mov	r1, r5
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f7ff ffc9 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8008986:	2800      	cmp	r0, #0
 8008988:	d1f1      	bne.n	800896e <ucdr_advance_buffer+0x1e>
 800898a:	2301      	movs	r3, #1
 800898c:	7563      	strb	r3, [r4, #21]
 800898e:	bd38      	pop	{r3, r4, r5, pc}

08008990 <rcl_get_zero_initialized_publisher>:
 8008990:	4b01      	ldr	r3, [pc, #4]	@ (8008998 <rcl_get_zero_initialized_publisher+0x8>)
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	080158ec 	.word	0x080158ec

0800899c <rcl_publisher_init>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	b088      	sub	sp, #32
 80089a2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	d069      	beq.n	8008a7c <rcl_publisher_init+0xe0>
 80089a8:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80089ac:	4604      	mov	r4, r0
 80089ae:	4648      	mov	r0, r9
 80089b0:	460e      	mov	r6, r1
 80089b2:	4690      	mov	r8, r2
 80089b4:	461f      	mov	r7, r3
 80089b6:	f001 f825 	bl	8009a04 <rcutils_allocator_is_valid>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d05e      	beq.n	8008a7c <rcl_publisher_init+0xe0>
 80089be:	2c00      	cmp	r4, #0
 80089c0:	d05c      	beq.n	8008a7c <rcl_publisher_init+0xe0>
 80089c2:	f8d4 a000 	ldr.w	sl, [r4]
 80089c6:	f1ba 0f00 	cmp.w	sl, #0
 80089ca:	d004      	beq.n	80089d6 <rcl_publisher_init+0x3a>
 80089cc:	2764      	movs	r7, #100	@ 0x64
 80089ce:	4638      	mov	r0, r7
 80089d0:	b008      	add	sp, #32
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	4630      	mov	r0, r6
 80089d8:	f005 f944 	bl	800dc64 <rcl_node_is_valid>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d052      	beq.n	8008a86 <rcl_publisher_init+0xea>
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	d04a      	beq.n	8008a7c <rcl_publisher_init+0xe0>
 80089e6:	2f00      	cmp	r7, #0
 80089e8:	d048      	beq.n	8008a7c <rcl_publisher_init+0xe0>
 80089ea:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80089ee:	aa07      	add	r2, sp, #28
 80089f0:	9205      	str	r2, [sp, #20]
 80089f2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80089f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80089fe:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a02:	4639      	mov	r1, r7
 8008a04:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f005 f97f 	bl	800dd0c <rcl_node_resolve_name>
 8008a0e:	4607      	mov	r7, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d14f      	bne.n	8008ab4 <rcl_publisher_init+0x118>
 8008a14:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008a16:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008a18:	20c8      	movs	r0, #200	@ 0xc8
 8008a1a:	4798      	blx	r3
 8008a1c:	6020      	str	r0, [r4, #0]
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d04e      	beq.n	8008ac0 <rcl_publisher_init+0x124>
 8008a22:	4630      	mov	r0, r6
 8008a24:	f005 f940 	bl	800dca8 <rcl_node_get_rmw_handle>
 8008a28:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	9a07      	ldr	r2, [sp, #28]
 8008a30:	6827      	ldr	r7, [r4, #0]
 8008a32:	462b      	mov	r3, r5
 8008a34:	4641      	mov	r1, r8
 8008a36:	f001 f8f5 	bl	8009c24 <rmw_create_publisher>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8008a40:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008a44:	b370      	cbz	r0, 8008aa4 <rcl_publisher_init+0x108>
 8008a46:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8008a4a:	f001 f9c9 	bl	8009de0 <rmw_publisher_get_actual_qos>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	4607      	mov	r7, r0
 8008a52:	b9d0      	cbnz	r0, 8008a8a <rcl_publisher_init+0xee>
 8008a54:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8008a58:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	2270      	movs	r2, #112	@ 0x70
 8008a60:	4618      	mov	r0, r3
 8008a62:	f00b ff2e 	bl	80148c2 <memcpy>
 8008a66:	6832      	ldr	r2, [r6, #0]
 8008a68:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8008a6c:	9807      	ldr	r0, [sp, #28]
 8008a6e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8008a70:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008a72:	4798      	blx	r3
 8008a74:	4638      	mov	r0, r7
 8008a76:	b008      	add	sp, #32
 8008a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7c:	270b      	movs	r7, #11
 8008a7e:	4638      	mov	r0, r7
 8008a80:	b008      	add	sp, #32
 8008a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a86:	27c8      	movs	r7, #200	@ 0xc8
 8008a88:	e7a1      	b.n	80089ce <rcl_publisher_init+0x32>
 8008a8a:	b18b      	cbz	r3, 8008ab0 <rcl_publisher_init+0x114>
 8008a8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008a90:	b142      	cbz	r2, 8008aa4 <rcl_publisher_init+0x108>
 8008a92:	4630      	mov	r0, r6
 8008a94:	f005 f908 	bl	800dca8 <rcl_node_get_rmw_handle>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8008a9e:	f001 f9af 	bl	8009e00 <rmw_destroy_publisher>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8008aa6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	4790      	blx	r2
 8008aac:	2300      	movs	r3, #0
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	2701      	movs	r7, #1
 8008ab2:	e7db      	b.n	8008a6c <rcl_publisher_init+0xd0>
 8008ab4:	2867      	cmp	r0, #103	@ 0x67
 8008ab6:	d0d9      	beq.n	8008a6c <rcl_publisher_init+0xd0>
 8008ab8:	2869      	cmp	r0, #105	@ 0x69
 8008aba:	d003      	beq.n	8008ac4 <rcl_publisher_init+0x128>
 8008abc:	280a      	cmp	r0, #10
 8008abe:	d1f7      	bne.n	8008ab0 <rcl_publisher_init+0x114>
 8008ac0:	270a      	movs	r7, #10
 8008ac2:	e7d3      	b.n	8008a6c <rcl_publisher_init+0xd0>
 8008ac4:	2767      	movs	r7, #103	@ 0x67
 8008ac6:	e7d1      	b.n	8008a6c <rcl_publisher_init+0xd0>

08008ac8 <rcl_publisher_get_default_options>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d14      	ldr	r5, [pc, #80]	@ (8008b1c <rcl_publisher_get_default_options+0x54>)
 8008acc:	4914      	ldr	r1, [pc, #80]	@ (8008b20 <rcl_publisher_get_default_options+0x58>)
 8008ace:	b088      	sub	sp, #32
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	2250      	movs	r2, #80	@ 0x50
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f00b fef4 	bl	80148c2 <memcpy>
 8008ada:	a802      	add	r0, sp, #8
 8008adc:	f000 ff84 	bl	80099e8 <rcutils_get_default_allocator>
 8008ae0:	f10d 0c08 	add.w	ip, sp, #8
 8008ae4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ae8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8008aec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008af0:	466e      	mov	r6, sp
 8008af2:	f8dc 3000 	ldr.w	r3, [ip]
 8008af6:	f8ce 3000 	str.w	r3, [lr]
 8008afa:	4630      	mov	r0, r6
 8008afc:	f001 f814 	bl	8009b28 <rmw_get_default_publisher_options>
 8008b00:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008b04:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008b08:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b0c:	2270      	movs	r2, #112	@ 0x70
 8008b0e:	4629      	mov	r1, r5
 8008b10:	4620      	mov	r0, r4
 8008b12:	f00b fed6 	bl	80148c2 <memcpy>
 8008b16:	4620      	mov	r0, r4
 8008b18:	b008      	add	sp, #32
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	20009120 	.word	0x20009120
 8008b20:	080158f0 	.word	0x080158f0

08008b24 <rcl_publish>:
 8008b24:	b1f8      	cbz	r0, 8008b66 <rcl_publish+0x42>
 8008b26:	6803      	ldr	r3, [r0, #0]
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	b1b3      	cbz	r3, 8008b5c <rcl_publish+0x38>
 8008b2e:	4616      	mov	r6, r2
 8008b30:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008b34:	b192      	cbz	r2, 8008b5c <rcl_publish+0x38>
 8008b36:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008b3a:	460d      	mov	r5, r1
 8008b3c:	f004 fcb8 	bl	800d4b0 <rcl_context_is_valid>
 8008b40:	b160      	cbz	r0, 8008b5c <rcl_publish+0x38>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008b48:	b140      	cbz	r0, 8008b5c <rcl_publish+0x38>
 8008b4a:	b155      	cbz	r5, 8008b62 <rcl_publish+0x3e>
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f001 f808 	bl	8009b64 <rmw_publish>
 8008b54:	3800      	subs	r0, #0
 8008b56:	bf18      	it	ne
 8008b58:	2001      	movne	r0, #1
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
 8008b62:	200b      	movs	r0, #11
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008b6a:	4770      	bx	lr

08008b6c <rcl_publisher_is_valid>:
 8008b6c:	b1a0      	cbz	r0, 8008b98 <rcl_publisher_is_valid+0x2c>
 8008b6e:	6803      	ldr	r3, [r0, #0]
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4604      	mov	r4, r0
 8008b74:	b173      	cbz	r3, 8008b94 <rcl_publisher_is_valid+0x28>
 8008b76:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008b7a:	b15a      	cbz	r2, 8008b94 <rcl_publisher_is_valid+0x28>
 8008b7c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8008b80:	f004 fc96 	bl	800d4b0 <rcl_context_is_valid>
 8008b84:	b130      	cbz	r0, 8008b94 <rcl_publisher_is_valid+0x28>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008b8c:	3800      	subs	r0, #0
 8008b8e:	bf18      	it	ne
 8008b90:	2001      	movne	r0, #1
 8008b92:	bd10      	pop	{r4, pc}
 8008b94:	2000      	movs	r0, #0
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	2000      	movs	r0, #0
 8008b9a:	4770      	bx	lr

08008b9c <rcl_publisher_is_valid_except_context>:
 8008b9c:	b130      	cbz	r0, 8008bac <rcl_publisher_is_valid_except_context+0x10>
 8008b9e:	6800      	ldr	r0, [r0, #0]
 8008ba0:	b120      	cbz	r0, 8008bac <rcl_publisher_is_valid_except_context+0x10>
 8008ba2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8008ba6:	3800      	subs	r0, #0
 8008ba8:	bf18      	it	ne
 8008baa:	2001      	movne	r0, #1
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <_rclc_check_for_new_data>:
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d046      	beq.n	8008c42 <_rclc_check_for_new_data+0x92>
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	7802      	ldrb	r2, [r0, #0]
 8008bb8:	b084      	sub	sp, #16
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2a0a      	cmp	r2, #10
 8008bbe:	d842      	bhi.n	8008c46 <_rclc_check_for_new_data+0x96>
 8008bc0:	e8df f002 	tbb	[pc, r2]
 8008bc4:	14181212 	.word	0x14181212
 8008bc8:	06060614 	.word	0x06060614
 8008bcc:	2e1a      	.short	0x2e1a
 8008bce:	16          	.byte	0x16
 8008bcf:	00          	.byte	0x00
 8008bd0:	6a0a      	ldr	r2, [r1, #32]
 8008bd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008bd4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008bd8:	2000      	movs	r0, #0
 8008bda:	1a12      	subs	r2, r2, r0
 8008bdc:	bf18      	it	ne
 8008bde:	2201      	movne	r2, #1
 8008be0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8008be4:	b004      	add	sp, #16
 8008be6:	bd10      	pop	{r4, pc}
 8008be8:	680a      	ldr	r2, [r1, #0]
 8008bea:	e7f2      	b.n	8008bd2 <_rclc_check_for_new_data+0x22>
 8008bec:	698a      	ldr	r2, [r1, #24]
 8008bee:	e7f0      	b.n	8008bd2 <_rclc_check_for_new_data+0x22>
 8008bf0:	688a      	ldr	r2, [r1, #8]
 8008bf2:	e7ee      	b.n	8008bd2 <_rclc_check_for_new_data+0x22>
 8008bf4:	690a      	ldr	r2, [r1, #16]
 8008bf6:	e7ec      	b.n	8008bd2 <_rclc_check_for_new_data+0x22>
 8008bf8:	685c      	ldr	r4, [r3, #4]
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8008c00:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8008c04:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8008c08:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8008c12:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8008c16:	f104 0110 	add.w	r1, r4, #16
 8008c1a:	f006 fd45 	bl	800f6a8 <rcl_action_client_wait_set_get_entities_ready>
 8008c1e:	e7e1      	b.n	8008be4 <_rclc_check_for_new_data+0x34>
 8008c20:	685c      	ldr	r4, [r3, #4]
 8008c22:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8008c26:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8008c2a:	e9cd 3200 	strd	r3, r2, [sp]
 8008c2e:	4608      	mov	r0, r1
 8008c30:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8008c34:	f104 0220 	add.w	r2, r4, #32
 8008c38:	f104 0110 	add.w	r1, r4, #16
 8008c3c:	f006 ff4c 	bl	800fad8 <rcl_action_server_wait_set_get_entities_ready>
 8008c40:	e7d0      	b.n	8008be4 <_rclc_check_for_new_data+0x34>
 8008c42:	200b      	movs	r0, #11
 8008c44:	4770      	bx	lr
 8008c46:	2001      	movs	r0, #1
 8008c48:	e7cc      	b.n	8008be4 <_rclc_check_for_new_data+0x34>
 8008c4a:	bf00      	nop

08008c4c <_rclc_take_new_data>:
 8008c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c4e:	b09b      	sub	sp, #108	@ 0x6c
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f000 8088 	beq.w	8008d66 <_rclc_take_new_data+0x11a>
 8008c56:	7803      	ldrb	r3, [r0, #0]
 8008c58:	4604      	mov	r4, r0
 8008c5a:	2b0a      	cmp	r3, #10
 8008c5c:	f200 8167 	bhi.w	8008f2e <_rclc_take_new_data+0x2e2>
 8008c60:	e8df f003 	tbb	[pc, r3]
 8008c64:	44152d2d 	.word	0x44152d2d
 8008c68:	19191944 	.word	0x19191944
 8008c6c:	065a      	.short	0x065a
 8008c6e:	15          	.byte	0x15
 8008c6f:	00          	.byte	0x00
 8008c70:	6840      	ldr	r0, [r0, #4]
 8008c72:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 80b2 	bne.w	8008de0 <_rclc_take_new_data+0x194>
 8008c7c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 80e4 	bne.w	8008e4e <_rclc_take_new_data+0x202>
 8008c86:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d16f      	bne.n	8008d6e <_rclc_take_new_data+0x122>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	4628      	mov	r0, r5
 8008c92:	b01b      	add	sp, #108	@ 0x6c
 8008c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c96:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008c98:	6a0b      	ldr	r3, [r1, #32]
 8008c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f5      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008ca2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008ca6:	f104 0110 	add.w	r1, r4, #16
 8008caa:	f005 f9d9 	bl	800e060 <rcl_take_request>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d0ec      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008cb4:	f240 2359 	movw	r3, #601	@ 0x259
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	d013      	beq.n	8008ce4 <_rclc_take_new_data+0x98>
 8008cbc:	e029      	b.n	8008d12 <_rclc_take_new_data+0xc6>
 8008cbe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008cc0:	680b      	ldr	r3, [r1, #0]
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0e1      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008cca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	aa0a      	add	r2, sp, #40	@ 0x28
 8008cd2:	f005 fb03 	bl	800e2dc <rcl_take>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d0d9      	beq.n	8008c90 <_rclc_take_new_data+0x44>
 8008cdc:	f240 1391 	movw	r3, #401	@ 0x191
 8008ce0:	4298      	cmp	r0, r3
 8008ce2:	d116      	bne.n	8008d12 <_rclc_take_new_data+0xc6>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8008cea:	e7d1      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008cec:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008cee:	698b      	ldr	r3, [r1, #24]
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0ca      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008cf8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008cfc:	f104 0110 	add.w	r1, r4, #16
 8008d00:	f004 fb66 	bl	800d3d0 <rcl_take_response>
 8008d04:	4605      	mov	r5, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0c1      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008d0a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	d0be      	beq.n	8008c90 <_rclc_take_new_data+0x44>
 8008d12:	f000 fe9d 	bl	8009a50 <rcutils_reset_error>
 8008d16:	e7bb      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008d18:	6840      	ldr	r0, [r0, #4]
 8008d1a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d17d      	bne.n	8008e1e <_rclc_take_new_data+0x1d2>
 8008d22:	69c3      	ldr	r3, [r0, #28]
 8008d24:	b11b      	cbz	r3, 8008d2e <_rclc_take_new_data+0xe2>
 8008d26:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d144      	bne.n	8008db8 <_rclc_take_new_data+0x16c>
 8008d2e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f040 80ac 	bne.w	8008e90 <_rclc_take_new_data+0x244>
 8008d38:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0a6      	beq.n	8008c8e <_rclc_take_new_data+0x42>
 8008d40:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008d42:	a90a      	add	r1, sp, #40	@ 0x28
 8008d44:	3010      	adds	r0, #16
 8008d46:	f006 fb87 	bl	800f458 <rcl_action_take_result_response>
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d1e0      	bne.n	8008d12 <_rclc_take_new_data+0xc6>
 8008d50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d54:	6860      	ldr	r0, [r4, #4]
 8008d56:	f006 ffe3 	bl	800fd20 <rclc_action_find_handle_by_result_request_sequence_number>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d098      	beq.n	8008c90 <_rclc_take_new_data+0x44>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8008d64:	e794      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008d66:	250b      	movs	r5, #11
 8008d68:	4628      	mov	r0, r5
 8008d6a:	b01b      	add	sp, #108	@ 0x6c
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	ae04      	add	r6, sp, #16
 8008d70:	aa0a      	add	r2, sp, #40	@ 0x28
 8008d72:	3010      	adds	r0, #16
 8008d74:	4631      	mov	r1, r6
 8008d76:	f006 fde3 	bl	800f940 <rcl_action_take_cancel_request>
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1c8      	bne.n	8008d12 <_rclc_take_new_data+0xc6>
 8008d80:	6860      	ldr	r0, [r4, #4]
 8008d82:	a90a      	add	r1, sp, #40	@ 0x28
 8008d84:	f006 ff8a 	bl	800fc9c <rclc_action_find_goal_handle_by_uuid>
 8008d88:	4607      	mov	r7, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f000 80bb 	beq.w	8008f06 <_rclc_take_new_data+0x2ba>
 8008d90:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8008d94:	2101      	movs	r1, #1
 8008d96:	f006 ff0b 	bl	800fbb0 <rcl_action_transition_goal_state>
 8008d9a:	2803      	cmp	r0, #3
 8008d9c:	4684      	mov	ip, r0
 8008d9e:	f040 80a7 	bne.w	8008ef0 <_rclc_take_new_data+0x2a4>
 8008da2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008da4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8008da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008daa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008dae:	e884 0003 	stmia.w	r4, {r0, r1}
 8008db2:	f887 c008 	strb.w	ip, [r7, #8]
 8008db6:	e76b      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008db8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008dba:	3010      	adds	r0, #16
 8008dbc:	f006 fbcc 	bl	800f558 <rcl_action_take_feedback>
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1a5      	bne.n	8008d12 <_rclc_take_new_data+0xc6>
 8008dc6:	6860      	ldr	r0, [r4, #4]
 8008dc8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008dca:	f006 ff67 	bl	800fc9c <rclc_action_find_goal_handle_by_uuid>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f000 80a3 	beq.w	8008f1c <_rclc_take_new_data+0x2d0>
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	6860      	ldr	r0, [r4, #4]
 8008dda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8008dde:	e7a6      	b.n	8008d2e <_rclc_take_new_data+0xe2>
 8008de0:	f006 ff36 	bl	800fc50 <rclc_action_take_goal_handle>
 8008de4:	4606      	mov	r6, r0
 8008de6:	6860      	ldr	r0, [r4, #4]
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	f43f af47 	beq.w	8008c7c <_rclc_take_new_data+0x30>
 8008dee:	6070      	str	r0, [r6, #4]
 8008df0:	69f2      	ldr	r2, [r6, #28]
 8008df2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8008df6:	3010      	adds	r0, #16
 8008df8:	f006 fcea 	bl	800f7d0 <rcl_action_take_goal_request>
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f040 808e 	bne.w	8008f20 <_rclc_take_new_data+0x2d4>
 8008e04:	69f7      	ldr	r7, [r6, #28]
 8008e06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e08:	7235      	strb	r5, [r6, #8]
 8008e0a:	f8c6 0009 	str.w	r0, [r6, #9]
 8008e0e:	f8c6 100d 	str.w	r1, [r6, #13]
 8008e12:	6860      	ldr	r0, [r4, #4]
 8008e14:	f8c6 2011 	str.w	r2, [r6, #17]
 8008e18:	f8c6 3015 	str.w	r3, [r6, #21]
 8008e1c:	e72e      	b.n	8008c7c <_rclc_take_new_data+0x30>
 8008e1e:	aa04      	add	r2, sp, #16
 8008e20:	a90a      	add	r1, sp, #40	@ 0x28
 8008e22:	3010      	adds	r0, #16
 8008e24:	f006 faa0 	bl	800f368 <rcl_action_take_goal_response>
 8008e28:	4605      	mov	r5, r0
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f47f af71 	bne.w	8008d12 <_rclc_take_new_data+0xc6>
 8008e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e34:	6860      	ldr	r0, [r4, #4]
 8008e36:	f006 ff61 	bl	800fcfc <rclc_action_find_handle_by_goal_request_sequence_number>
 8008e3a:	b130      	cbz	r0, 8008e4a <_rclc_take_new_data+0x1fe>
 8008e3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008e40:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8008e44:	2201      	movs	r2, #1
 8008e46:	f880 2020 	strb.w	r2, [r0, #32]
 8008e4a:	6860      	ldr	r0, [r4, #4]
 8008e4c:	e769      	b.n	8008d22 <_rclc_take_new_data+0xd6>
 8008e4e:	aa04      	add	r2, sp, #16
 8008e50:	3010      	adds	r0, #16
 8008e52:	a90a      	add	r1, sp, #40	@ 0x28
 8008e54:	f006 fd34 	bl	800f8c0 <rcl_action_take_result_request>
 8008e58:	4605      	mov	r5, r0
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f47f af59 	bne.w	8008d12 <_rclc_take_new_data+0xc6>
 8008e60:	6860      	ldr	r0, [r4, #4]
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	f006 ff1a 	bl	800fc9c <rclc_action_find_goal_handle_by_uuid>
 8008e68:	4607      	mov	r7, r0
 8008e6a:	b160      	cbz	r0, 8008e86 <_rclc_take_new_data+0x23a>
 8008e6c:	ad0a      	add	r5, sp, #40	@ 0x28
 8008e6e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8008e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008e76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e7a:	f04f 0c02 	mov.w	ip, #2
 8008e7e:	e886 0003 	stmia.w	r6, {r0, r1}
 8008e82:	f887 c008 	strb.w	ip, [r7, #8]
 8008e86:	6860      	ldr	r0, [r4, #4]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008e8e:	e6fa      	b.n	8008c86 <_rclc_take_new_data+0x3a>
 8008e90:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8008e94:	a90a      	add	r1, sp, #40	@ 0x28
 8008e96:	3010      	adds	r0, #16
 8008e98:	f006 fb1e 	bl	800f4d8 <rcl_action_take_cancel_response>
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f47f af37 	bne.w	8008d12 <_rclc_take_new_data+0xc6>
 8008ea4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ea8:	6860      	ldr	r0, [r4, #4]
 8008eaa:	f006 ff4b 	bl	800fd44 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	6860      	ldr	r0, [r4, #4]
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	f43f af40 	beq.w	8008d38 <_rclc_take_new_data+0xec>
 8008eb8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008eba:	2701      	movs	r7, #1
 8008ebc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f43f af3a 	beq.w	8008d38 <_rclc_take_new_data+0xec>
 8008ec4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008ec6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008eca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008ece:	f006 fee5 	bl	800fc9c <rclc_action_find_goal_handle_by_uuid>
 8008ed2:	b138      	cbz	r0, 8008ee4 <_rclc_take_new_data+0x298>
 8008ed4:	6860      	ldr	r0, [r4, #4]
 8008ed6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008ed8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8008edc:	3501      	adds	r5, #1
 8008ede:	42ab      	cmp	r3, r5
 8008ee0:	d8f0      	bhi.n	8008ec4 <_rclc_take_new_data+0x278>
 8008ee2:	e729      	b.n	8008d38 <_rclc_take_new_data+0xec>
 8008ee4:	6860      	ldr	r0, [r4, #4]
 8008ee6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008ee8:	3501      	adds	r5, #1
 8008eea:	42ab      	cmp	r3, r5
 8008eec:	d8ea      	bhi.n	8008ec4 <_rclc_take_new_data+0x278>
 8008eee:	e723      	b.n	8008d38 <_rclc_take_new_data+0xec>
 8008ef0:	ab06      	add	r3, sp, #24
 8008ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ef4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008ef8:	2103      	movs	r1, #3
 8008efa:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008efe:	6860      	ldr	r0, [r4, #4]
 8008f00:	f006 ff96 	bl	800fe30 <rclc_action_server_goal_cancel_reject>
 8008f04:	e6c4      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008f06:	ab06      	add	r3, sp, #24
 8008f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008f0e:	2102      	movs	r1, #2
 8008f10:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008f14:	6860      	ldr	r0, [r4, #4]
 8008f16:	f006 ff8b 	bl	800fe30 <rclc_action_server_goal_cancel_reject>
 8008f1a:	e6b9      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008f1c:	6860      	ldr	r0, [r4, #4]
 8008f1e:	e706      	b.n	8008d2e <_rclc_take_new_data+0xe2>
 8008f20:	6860      	ldr	r0, [r4, #4]
 8008f22:	4631      	mov	r1, r6
 8008f24:	f006 fea4 	bl	800fc70 <rclc_action_remove_used_goal_handle>
 8008f28:	f000 fd92 	bl	8009a50 <rcutils_reset_error>
 8008f2c:	e6b0      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008f2e:	2501      	movs	r5, #1
 8008f30:	e6ae      	b.n	8008c90 <_rclc_take_new_data+0x44>
 8008f32:	bf00      	nop

08008f34 <_rclc_execute.part.0>:
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f36:	7803      	ldrb	r3, [r0, #0]
 8008f38:	b087      	sub	sp, #28
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2b0a      	cmp	r3, #10
 8008f3e:	f200 8136 	bhi.w	80091ae <_rclc_execute.part.0+0x27a>
 8008f42:	e8df f003 	tbb	[pc, r3]
 8008f46:	435e      	.short	0x435e
 8008f48:	06a1664f 	.word	0x06a1664f
 8008f4c:	6c1e0606 	.word	0x6c1e0606
 8008f50:	59          	.byte	0x59
 8008f51:	00          	.byte	0x00
 8008f52:	2b06      	cmp	r3, #6
 8008f54:	f000 8122 	beq.w	800919c <_rclc_execute.part.0+0x268>
 8008f58:	2b07      	cmp	r3, #7
 8008f5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008f5c:	f040 8118 	bne.w	8009190 <_rclc_execute.part.0+0x25c>
 8008f60:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8008f64:	6880      	ldr	r0, [r0, #8]
 8008f66:	4798      	blx	r3
 8008f68:	f104 0110 	add.w	r1, r4, #16
 8008f6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008f6e:	6860      	ldr	r0, [r4, #4]
 8008f70:	f005 f8b6 	bl	800e0e0 <rcl_send_response>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d033      	beq.n	8008fe0 <_rclc_execute.part.0+0xac>
 8008f78:	9005      	str	r0, [sp, #20]
 8008f7a:	f000 fd69 	bl	8009a50 <rcutils_reset_error>
 8008f7e:	9805      	ldr	r0, [sp, #20]
 8008f80:	e02e      	b.n	8008fe0 <_rclc_execute.part.0+0xac>
 8008f82:	6840      	ldr	r0, [r0, #4]
 8008f84:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 8086 	beq.w	800909a <_rclc_execute.part.0+0x166>
 8008f8e:	2600      	movs	r6, #0
 8008f90:	2701      	movs	r7, #1
 8008f92:	e004      	b.n	8008f9e <_rclc_execute.part.0+0x6a>
 8008f94:	f006 fe36 	bl	800fc04 <rclc_action_send_result_request>
 8008f98:	b998      	cbnz	r0, 8008fc2 <_rclc_execute.part.0+0x8e>
 8008f9a:	722f      	strb	r7, [r5, #8]
 8008f9c:	6860      	ldr	r0, [r4, #4]
 8008f9e:	f006 fee3 	bl	800fd68 <rclc_action_find_first_handle_with_goal_response>
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d077      	beq.n	8009098 <_rclc_execute.part.0+0x164>
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8008fb2:	f885 6020 	strb.w	r6, [r5, #32]
 8008fb6:	4798      	blx	r3
 8008fb8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e8      	bne.n	8008f94 <_rclc_execute.part.0+0x60>
 8008fc2:	6860      	ldr	r0, [r4, #4]
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f006 fe53 	bl	800fc70 <rclc_action_remove_used_goal_handle>
 8008fca:	e7e7      	b.n	8008f9c <_rclc_execute.part.0+0x68>
 8008fcc:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8008fd0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	f000 80c9 	beq.w	800916c <_rclc_execute.part.0+0x238>
 8008fda:	6880      	ldr	r0, [r0, #8]
 8008fdc:	4798      	blx	r3
 8008fde:	2000      	movs	r0, #0
 8008fe0:	b007      	add	sp, #28
 8008fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe4:	6840      	ldr	r0, [r0, #4]
 8008fe6:	f005 fa7d 	bl	800e4e4 <rcl_timer_call>
 8008fea:	f240 3321 	movw	r3, #801	@ 0x321
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	d004      	beq.n	8008ffc <_rclc_execute.part.0+0xc8>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d0f4      	beq.n	8008fe0 <_rclc_execute.part.0+0xac>
 8008ff6:	e7bf      	b.n	8008f78 <_rclc_execute.part.0+0x44>
 8008ff8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008ffa:	4798      	blx	r3
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	b007      	add	sp, #28
 8009000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009002:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009006:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009008:	b925      	cbnz	r5, 8009014 <_rclc_execute.part.0+0xe0>
 800900a:	4628      	mov	r0, r5
 800900c:	4798      	blx	r3
 800900e:	4628      	mov	r0, r5
 8009010:	e7e6      	b.n	8008fe0 <_rclc_execute.part.0+0xac>
 8009012:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009014:	68a0      	ldr	r0, [r4, #8]
 8009016:	4798      	blx	r3
 8009018:	2000      	movs	r0, #0
 800901a:	b007      	add	sp, #28
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	6840      	ldr	r0, [r0, #4]
 8009020:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009024:	bb3b      	cbnz	r3, 8009076 <_rclc_execute.part.0+0x142>
 8009026:	f890 3020 	ldrb.w	r3, [r0, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d07b      	beq.n	8009126 <_rclc_execute.part.0+0x1f2>
 800902e:	f640 0634 	movw	r6, #2100	@ 0x834
 8009032:	2701      	movs	r7, #1
 8009034:	e007      	b.n	8009046 <_rclc_execute.part.0+0x112>
 8009036:	4628      	mov	r0, r5
 8009038:	f006 feae 	bl	800fd98 <rclc_action_server_response_goal_request>
 800903c:	6860      	ldr	r0, [r4, #4]
 800903e:	4629      	mov	r1, r5
 8009040:	f006 fe16 	bl	800fc70 <rclc_action_remove_used_goal_handle>
 8009044:	6860      	ldr	r0, [r4, #4]
 8009046:	2100      	movs	r1, #0
 8009048:	f006 fe40 	bl	800fccc <rclc_action_find_first_handle_by_status>
 800904c:	4605      	mov	r5, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	d066      	beq.n	8009120 <_rclc_execute.part.0+0x1ec>
 8009052:	6863      	ldr	r3, [r4, #4]
 8009054:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	4798      	blx	r3
 800905a:	42b0      	cmp	r0, r6
 800905c:	f04f 0100 	mov.w	r1, #0
 8009060:	d1e9      	bne.n	8009036 <_rclc_execute.part.0+0x102>
 8009062:	2101      	movs	r1, #1
 8009064:	4628      	mov	r0, r5
 8009066:	f006 fe97 	bl	800fd98 <rclc_action_server_response_goal_request>
 800906a:	722f      	strb	r7, [r5, #8]
 800906c:	e7ea      	b.n	8009044 <_rclc_execute.part.0+0x110>
 800906e:	6848      	ldr	r0, [r1, #4]
 8009070:	f006 fdfe 	bl	800fc70 <rclc_action_remove_used_goal_handle>
 8009074:	6860      	ldr	r0, [r4, #4]
 8009076:	f006 fe35 	bl	800fce4 <rclc_action_find_first_terminated_handle>
 800907a:	4601      	mov	r1, r0
 800907c:	2800      	cmp	r0, #0
 800907e:	d1f6      	bne.n	800906e <_rclc_execute.part.0+0x13a>
 8009080:	6860      	ldr	r0, [r4, #4]
 8009082:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009086:	e7ce      	b.n	8009026 <_rclc_execute.part.0+0xf2>
 8009088:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800908a:	6880      	ldr	r0, [r0, #8]
 800908c:	f104 0110 	add.w	r1, r4, #16
 8009090:	4798      	blx	r3
 8009092:	2000      	movs	r0, #0
 8009094:	b007      	add	sp, #28
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	6860      	ldr	r0, [r4, #4]
 800909a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800909e:	b18b      	cbz	r3, 80090c4 <_rclc_execute.part.0+0x190>
 80090a0:	68c5      	ldr	r5, [r0, #12]
 80090a2:	b32d      	cbz	r5, 80090f0 <_rclc_execute.part.0+0x1bc>
 80090a4:	2600      	movs	r6, #0
 80090a6:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80090aa:	b143      	cbz	r3, 80090be <_rclc_execute.part.0+0x18a>
 80090ac:	69c3      	ldr	r3, [r0, #28]
 80090ae:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80090b2:	b123      	cbz	r3, 80090be <_rclc_execute.part.0+0x18a>
 80090b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80090b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80090b8:	4628      	mov	r0, r5
 80090ba:	4798      	blx	r3
 80090bc:	6860      	ldr	r0, [r4, #4]
 80090be:	682d      	ldr	r5, [r5, #0]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	d1f0      	bne.n	80090a6 <_rclc_execute.part.0+0x172>
 80090c4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80090c8:	b193      	cbz	r3, 80090f0 <_rclc_execute.part.0+0x1bc>
 80090ca:	68c5      	ldr	r5, [r0, #12]
 80090cc:	b185      	cbz	r5, 80090f0 <_rclc_execute.part.0+0x1bc>
 80090ce:	2600      	movs	r6, #0
 80090d0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80090d4:	b14b      	cbz	r3, 80090ea <_rclc_execute.part.0+0x1b6>
 80090d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80090d8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80090dc:	b12b      	cbz	r3, 80090ea <_rclc_execute.part.0+0x1b6>
 80090de:	4628      	mov	r0, r5
 80090e0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80090e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80090e6:	4798      	blx	r3
 80090e8:	6860      	ldr	r0, [r4, #4]
 80090ea:	682d      	ldr	r5, [r5, #0]
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d1ef      	bne.n	80090d0 <_rclc_execute.part.0+0x19c>
 80090f0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d081      	beq.n	8008ffc <_rclc_execute.part.0+0xc8>
 80090f8:	2700      	movs	r7, #0
 80090fa:	e00b      	b.n	8009114 <_rclc_execute.part.0+0x1e0>
 80090fc:	6863      	ldr	r3, [r4, #4]
 80090fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009100:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009102:	6a1e      	ldr	r6, [r3, #32]
 8009104:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009108:	47b0      	blx	r6
 800910a:	6860      	ldr	r0, [r4, #4]
 800910c:	4629      	mov	r1, r5
 800910e:	f006 fdaf 	bl	800fc70 <rclc_action_remove_used_goal_handle>
 8009112:	6860      	ldr	r0, [r4, #4]
 8009114:	f006 fe34 	bl	800fd80 <rclc_action_find_first_handle_with_result_response>
 8009118:	4605      	mov	r5, r0
 800911a:	2800      	cmp	r0, #0
 800911c:	d1ee      	bne.n	80090fc <_rclc_execute.part.0+0x1c8>
 800911e:	e76d      	b.n	8008ffc <_rclc_execute.part.0+0xc8>
 8009120:	6860      	ldr	r0, [r4, #4]
 8009122:	f880 5020 	strb.w	r5, [r0, #32]
 8009126:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800912a:	2b00      	cmp	r3, #0
 800912c:	f43f af66 	beq.w	8008ffc <_rclc_execute.part.0+0xc8>
 8009130:	68c5      	ldr	r5, [r0, #12]
 8009132:	b1b5      	cbz	r5, 8009162 <_rclc_execute.part.0+0x22e>
 8009134:	2602      	movs	r6, #2
 8009136:	e001      	b.n	800913c <_rclc_execute.part.0+0x208>
 8009138:	682d      	ldr	r5, [r5, #0]
 800913a:	b195      	cbz	r5, 8009162 <_rclc_execute.part.0+0x22e>
 800913c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d1f9      	bne.n	8009138 <_rclc_execute.part.0+0x204>
 8009144:	69c3      	ldr	r3, [r0, #28]
 8009146:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009148:	4628      	mov	r0, r5
 800914a:	4798      	blx	r3
 800914c:	4603      	mov	r3, r0
 800914e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009152:	4628      	mov	r0, r5
 8009154:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009158:	b163      	cbz	r3, 8009174 <_rclc_execute.part.0+0x240>
 800915a:	f006 fe3d 	bl	800fdd8 <rclc_action_server_goal_cancel_accept>
 800915e:	6860      	ldr	r0, [r4, #4]
 8009160:	e7ea      	b.n	8009138 <_rclc_execute.part.0+0x204>
 8009162:	2300      	movs	r3, #0
 8009164:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009168:	4618      	mov	r0, r3
 800916a:	e739      	b.n	8008fe0 <_rclc_execute.part.0+0xac>
 800916c:	4628      	mov	r0, r5
 800916e:	4798      	blx	r3
 8009170:	4628      	mov	r0, r5
 8009172:	e735      	b.n	8008fe0 <_rclc_execute.part.0+0xac>
 8009174:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009176:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800917a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800917e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009182:	6860      	ldr	r0, [r4, #4]
 8009184:	2101      	movs	r1, #1
 8009186:	f006 fe53 	bl	800fe30 <rclc_action_server_goal_cancel_reject>
 800918a:	722e      	strb	r6, [r5, #8]
 800918c:	6860      	ldr	r0, [r4, #4]
 800918e:	e7d3      	b.n	8009138 <_rclc_execute.part.0+0x204>
 8009190:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009192:	6880      	ldr	r0, [r0, #8]
 8009194:	4798      	blx	r3
 8009196:	f104 0110 	add.w	r1, r4, #16
 800919a:	e6e7      	b.n	8008f6c <_rclc_execute.part.0+0x38>
 800919c:	f100 0110 	add.w	r1, r0, #16
 80091a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80091a2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80091a4:	6880      	ldr	r0, [r0, #8]
 80091a6:	9105      	str	r1, [sp, #20]
 80091a8:	4798      	blx	r3
 80091aa:	9905      	ldr	r1, [sp, #20]
 80091ac:	e6de      	b.n	8008f6c <_rclc_execute.part.0+0x38>
 80091ae:	2001      	movs	r0, #1
 80091b0:	e716      	b.n	8008fe0 <_rclc_execute.part.0+0xac>
 80091b2:	bf00      	nop

080091b4 <rclc_executor_trigger_any>:
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d03f      	beq.n	8009238 <rclc_executor_trigger_any+0x84>
 80091b8:	2900      	cmp	r1, #0
 80091ba:	d03e      	beq.n	800923a <rclc_executor_trigger_any+0x86>
 80091bc:	4603      	mov	r3, r0
 80091be:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80091c2:	2200      	movs	r2, #0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d037      	beq.n	8009238 <rclc_executor_trigger_any+0x84>
 80091c8:	b430      	push	{r4, r5}
 80091ca:	f893 c000 	ldrb.w	ip, [r3]
 80091ce:	f1bc 0f08 	cmp.w	ip, #8
 80091d2:	d11e      	bne.n	8009212 <rclc_executor_trigger_any+0x5e>
 80091d4:	685c      	ldr	r4, [r3, #4]
 80091d6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80091d8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80091dc:	d105      	bne.n	80091ea <rclc_executor_trigger_any+0x36>
 80091de:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80091e2:	b910      	cbnz	r0, 80091ea <rclc_executor_trigger_any+0x36>
 80091e4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 80091e8:	b128      	cbz	r0, 80091f6 <rclc_executor_trigger_any+0x42>
 80091ea:	bc30      	pop	{r4, r5}
 80091ec:	4770      	bx	lr
 80091ee:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1f9      	bne.n	80091ea <rclc_executor_trigger_any+0x36>
 80091f6:	3201      	adds	r2, #1
 80091f8:	4291      	cmp	r1, r2
 80091fa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80091fe:	d018      	beq.n	8009232 <rclc_executor_trigger_any+0x7e>
 8009200:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009204:	2800      	cmp	r0, #0
 8009206:	d0f0      	beq.n	80091ea <rclc_executor_trigger_any+0x36>
 8009208:	f893 c000 	ldrb.w	ip, [r3]
 800920c:	f1bc 0f08 	cmp.w	ip, #8
 8009210:	d0e0      	beq.n	80091d4 <rclc_executor_trigger_any+0x20>
 8009212:	f1bc 0f09 	cmp.w	ip, #9
 8009216:	d1ea      	bne.n	80091ee <rclc_executor_trigger_any+0x3a>
 8009218:	685c      	ldr	r4, [r3, #4]
 800921a:	6a25      	ldr	r5, [r4, #32]
 800921c:	2d00      	cmp	r5, #0
 800921e:	d1e4      	bne.n	80091ea <rclc_executor_trigger_any+0x36>
 8009220:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009224:	2800      	cmp	r0, #0
 8009226:	d1e0      	bne.n	80091ea <rclc_executor_trigger_any+0x36>
 8009228:	3201      	adds	r2, #1
 800922a:	4291      	cmp	r1, r2
 800922c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009230:	d1e6      	bne.n	8009200 <rclc_executor_trigger_any+0x4c>
 8009232:	2000      	movs	r0, #0
 8009234:	bc30      	pop	{r4, r5}
 8009236:	4770      	bx	lr
 8009238:	4770      	bx	lr
 800923a:	4608      	mov	r0, r1
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop

08009240 <rclc_executor_init>:
 8009240:	2800      	cmp	r0, #0
 8009242:	d05f      	beq.n	8009304 <rclc_executor_init+0xc4>
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	b0b0      	sub	sp, #192	@ 0xc0
 800924c:	2900      	cmp	r1, #0
 800924e:	d051      	beq.n	80092f4 <rclc_executor_init+0xb4>
 8009250:	4605      	mov	r5, r0
 8009252:	4618      	mov	r0, r3
 8009254:	4616      	mov	r6, r2
 8009256:	461f      	mov	r7, r3
 8009258:	f000 fbd4 	bl	8009a04 <rcutils_allocator_is_valid>
 800925c:	2800      	cmp	r0, #0
 800925e:	d049      	beq.n	80092f4 <rclc_executor_init+0xb4>
 8009260:	2e00      	cmp	r6, #0
 8009262:	d047      	beq.n	80092f4 <rclc_executor_init+0xb4>
 8009264:	492c      	ldr	r1, [pc, #176]	@ (8009318 <rclc_executor_init+0xd8>)
 8009266:	2288      	movs	r2, #136	@ 0x88
 8009268:	a80e      	add	r0, sp, #56	@ 0x38
 800926a:	f00b fb2a 	bl	80148c2 <memcpy>
 800926e:	a90e      	add	r1, sp, #56	@ 0x38
 8009270:	2288      	movs	r2, #136	@ 0x88
 8009272:	4628      	mov	r0, r5
 8009274:	f00b fb25 	bl	80148c2 <memcpy>
 8009278:	602c      	str	r4, [r5, #0]
 800927a:	4668      	mov	r0, sp
 800927c:	60ae      	str	r6, [r5, #8]
 800927e:	466c      	mov	r4, sp
 8009280:	f005 faa2 	bl	800e7c8 <rcl_get_zero_initialized_wait_set>
 8009284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009286:	f105 0c14 	add.w	ip, r5, #20
 800928a:	f8d7 8000 	ldr.w	r8, [r7]
 800928e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800929e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009310 <rclc_executor_init+0xd0>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	f8cc 3000 	str.w	r3, [ip]
 80092a8:	6939      	ldr	r1, [r7, #16]
 80092aa:	612f      	str	r7, [r5, #16]
 80092ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80092b0:	01b0      	lsls	r0, r6, #6
 80092b2:	47c0      	blx	r8
 80092b4:	6068      	str	r0, [r5, #4]
 80092b6:	b338      	cbz	r0, 8009308 <rclc_executor_init+0xc8>
 80092b8:	2400      	movs	r4, #0
 80092ba:	e000      	b.n	80092be <rclc_executor_init+0x7e>
 80092bc:	6868      	ldr	r0, [r5, #4]
 80092be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80092c2:	4631      	mov	r1, r6
 80092c4:	3401      	adds	r4, #1
 80092c6:	f000 fa73 	bl	80097b0 <rclc_executor_handle_init>
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d1f6      	bne.n	80092bc <rclc_executor_init+0x7c>
 80092ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80092d2:	f000 fa63 	bl	800979c <rclc_executor_handle_counters_zero_init>
 80092d6:	4a11      	ldr	r2, [pc, #68]	@ (800931c <rclc_executor_init+0xdc>)
 80092d8:	686b      	ldr	r3, [r5, #4]
 80092da:	2000      	movs	r0, #0
 80092dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80092e0:	b163      	cbz	r3, 80092fc <rclc_executor_init+0xbc>
 80092e2:	692b      	ldr	r3, [r5, #16]
 80092e4:	b153      	cbz	r3, 80092fc <rclc_executor_init+0xbc>
 80092e6:	68ab      	ldr	r3, [r5, #8]
 80092e8:	b143      	cbz	r3, 80092fc <rclc_executor_init+0xbc>
 80092ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 80092ee:	b030      	add	sp, #192	@ 0xc0
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	200b      	movs	r0, #11
 80092f6:	b030      	add	sp, #192	@ 0xc0
 80092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fc:	4618      	mov	r0, r3
 80092fe:	b030      	add	sp, #192	@ 0xc0
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	200b      	movs	r0, #11
 8009306:	4770      	bx	lr
 8009308:	200a      	movs	r0, #10
 800930a:	e7f4      	b.n	80092f6 <rclc_executor_init+0xb6>
 800930c:	f3af 8000 	nop.w
 8009310:	3b9aca00 	.word	0x3b9aca00
 8009314:	00000000 	.word	0x00000000
 8009318:	08015940 	.word	0x08015940
 800931c:	080091b5 	.word	0x080091b5

08009320 <rclc_executor_add_subscription>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009326:	b338      	cbz	r0, 8009378 <rclc_executor_add_subscription+0x58>
 8009328:	b331      	cbz	r1, 8009378 <rclc_executor_add_subscription+0x58>
 800932a:	b32a      	cbz	r2, 8009378 <rclc_executor_add_subscription+0x58>
 800932c:	b323      	cbz	r3, 8009378 <rclc_executor_add_subscription+0x58>
 800932e:	4604      	mov	r4, r0
 8009330:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009334:	42a8      	cmp	r0, r5
 8009336:	d301      	bcc.n	800933c <rclc_executor_add_subscription+0x1c>
 8009338:	2001      	movs	r0, #1
 800933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933c:	6866      	ldr	r6, [r4, #4]
 800933e:	0187      	lsls	r7, r0, #6
 8009340:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009344:	2500      	movs	r5, #0
 8009346:	55f5      	strb	r5, [r6, r7]
 8009348:	3001      	adds	r0, #1
 800934a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800934e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009352:	2301      	movs	r3, #1
 8009354:	f104 0514 	add.w	r5, r4, #20
 8009358:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800935c:	f88c e001 	strb.w	lr, [ip, #1]
 8009360:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009364:	60e0      	str	r0, [r4, #12]
 8009366:	4628      	mov	r0, r5
 8009368:	f005 fa42 	bl	800e7f0 <rcl_wait_set_is_valid>
 800936c:	b930      	cbnz	r0, 800937c <rclc_executor_add_subscription+0x5c>
 800936e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009370:	3301      	adds	r3, #1
 8009372:	2000      	movs	r0, #0
 8009374:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	200b      	movs	r0, #11
 800937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937c:	4628      	mov	r0, r5
 800937e:	f005 fa3d 	bl	800e7fc <rcl_wait_set_fini>
 8009382:	2800      	cmp	r0, #0
 8009384:	d0f3      	beq.n	800936e <rclc_executor_add_subscription+0x4e>
 8009386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009388 <rclc_executor_prepare>:
 8009388:	2800      	cmp	r0, #0
 800938a:	d044      	beq.n	8009416 <rclc_executor_prepare+0x8e>
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	f100 0514 	add.w	r5, r0, #20
 8009392:	b09b      	sub	sp, #108	@ 0x6c
 8009394:	4604      	mov	r4, r0
 8009396:	4628      	mov	r0, r5
 8009398:	f005 fa2a 	bl	800e7f0 <rcl_wait_set_is_valid>
 800939c:	b110      	cbz	r0, 80093a4 <rclc_executor_prepare+0x1c>
 800939e:	2000      	movs	r0, #0
 80093a0:	b01b      	add	sp, #108	@ 0x6c
 80093a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a4:	4628      	mov	r0, r5
 80093a6:	f005 fa29 	bl	800e7fc <rcl_wait_set_fini>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d130      	bne.n	8009410 <rclc_executor_prepare+0x88>
 80093ae:	a80c      	add	r0, sp, #48	@ 0x30
 80093b0:	f005 fa0a 	bl	800e7c8 <rcl_get_zero_initialized_wait_set>
 80093b4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80093b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80093bc:	46ae      	mov	lr, r5
 80093be:	6927      	ldr	r7, [r4, #16]
 80093c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80093c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80093c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80093cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80093d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80093d4:	f8dc 3000 	ldr.w	r3, [ip]
 80093d8:	f8ce 3000 	str.w	r3, [lr]
 80093dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80093de:	ae04      	add	r6, sp, #16
 80093e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80093ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80093f0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80093f4:	e9cd 2100 	strd	r2, r1, [sp]
 80093f8:	4628      	mov	r0, r5
 80093fa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80093fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80093fe:	f005 fcfb 	bl	800edf8 <rcl_wait_set_init>
 8009402:	2800      	cmp	r0, #0
 8009404:	d0cc      	beq.n	80093a0 <rclc_executor_prepare+0x18>
 8009406:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009408:	f000 fb22 	bl	8009a50 <rcutils_reset_error>
 800940c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800940e:	e7c7      	b.n	80093a0 <rclc_executor_prepare+0x18>
 8009410:	f000 fb1e 	bl	8009a50 <rcutils_reset_error>
 8009414:	e7cb      	b.n	80093ae <rclc_executor_prepare+0x26>
 8009416:	200b      	movs	r0, #11
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <rclc_executor_spin_some.part.0>:
 800941c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	f100 0614 	add.w	r6, r0, #20
 8009424:	b083      	sub	sp, #12
 8009426:	4691      	mov	r9, r2
 8009428:	4698      	mov	r8, r3
 800942a:	4605      	mov	r5, r0
 800942c:	f7ff ffac 	bl	8009388 <rclc_executor_prepare>
 8009430:	4630      	mov	r0, r6
 8009432:	f005 faaf 	bl	800e994 <rcl_wait_set_clear>
 8009436:	4607      	mov	r7, r0
 8009438:	2800      	cmp	r0, #0
 800943a:	f040 80ed 	bne.w	8009618 <rclc_executor_spin_some.part.0+0x1fc>
 800943e:	68ab      	ldr	r3, [r5, #8]
 8009440:	4604      	mov	r4, r0
 8009442:	b303      	cbz	r3, 8009486 <rclc_executor_spin_some.part.0+0x6a>
 8009444:	6869      	ldr	r1, [r5, #4]
 8009446:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800944a:	01a2      	lsls	r2, r4, #6
 800944c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009450:	b1cb      	cbz	r3, 8009486 <rclc_executor_spin_some.part.0+0x6a>
 8009452:	5c8b      	ldrb	r3, [r1, r2]
 8009454:	2b0a      	cmp	r3, #10
 8009456:	f200 80d8 	bhi.w	800960a <rclc_executor_spin_some.part.0+0x1ee>
 800945a:	e8df f003 	tbb	[pc, r3]
 800945e:	9c9c      	.short	0x9c9c
 8009460:	068c8ca7 	.word	0x068c8ca7
 8009464:	bdc90606 	.word	0xbdc90606
 8009468:	b2          	.byte	0xb2
 8009469:	00          	.byte	0x00
 800946a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800946e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009472:	4630      	mov	r0, r6
 8009474:	f005 fdd6 	bl	800f024 <rcl_wait_set_add_service>
 8009478:	2800      	cmp	r0, #0
 800947a:	f040 8086 	bne.w	800958a <rclc_executor_spin_some.part.0+0x16e>
 800947e:	68ab      	ldr	r3, [r5, #8]
 8009480:	3401      	adds	r4, #1
 8009482:	429c      	cmp	r4, r3
 8009484:	d3de      	bcc.n	8009444 <rclc_executor_spin_some.part.0+0x28>
 8009486:	4643      	mov	r3, r8
 8009488:	464a      	mov	r2, r9
 800948a:	4630      	mov	r0, r6
 800948c:	f005 fdf8 	bl	800f080 <rcl_wait>
 8009490:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80c7 	beq.w	8009628 <rclc_executor_spin_some.part.0+0x20c>
 800949a:	2b01      	cmp	r3, #1
 800949c:	f040 80b5 	bne.w	800960a <rclc_executor_spin_some.part.0+0x1ee>
 80094a0:	68ab      	ldr	r3, [r5, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 8159 	beq.w	800975a <rclc_executor_spin_some.part.0+0x33e>
 80094a8:	2400      	movs	r4, #0
 80094aa:	46a0      	mov	r8, r4
 80094ac:	f240 1991 	movw	r9, #401	@ 0x191
 80094b0:	e00a      	b.n	80094c8 <rclc_executor_spin_some.part.0+0xac>
 80094b2:	f7ff fb7d 	bl	8008bb0 <_rclc_check_for_new_data>
 80094b6:	4604      	mov	r4, r0
 80094b8:	b110      	cbz	r0, 80094c0 <rclc_executor_spin_some.part.0+0xa4>
 80094ba:	4548      	cmp	r0, r9
 80094bc:	f040 80b2 	bne.w	8009624 <rclc_executor_spin_some.part.0+0x208>
 80094c0:	68ab      	ldr	r3, [r5, #8]
 80094c2:	4598      	cmp	r8, r3
 80094c4:	f080 8126 	bcs.w	8009714 <rclc_executor_spin_some.part.0+0x2f8>
 80094c8:	686a      	ldr	r2, [r5, #4]
 80094ca:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80094ce:	4631      	mov	r1, r6
 80094d0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80094d4:	f108 0801 	add.w	r8, r8, #1
 80094d8:	f1bc 0f00 	cmp.w	ip, #0
 80094dc:	d1e9      	bne.n	80094b2 <rclc_executor_spin_some.part.0+0x96>
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80094e6:	4798      	blx	r3
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f000 809b 	beq.w	8009624 <rclc_executor_spin_some.part.0+0x208>
 80094ee:	68ab      	ldr	r3, [r5, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8097 	beq.w	8009624 <rclc_executor_spin_some.part.0+0x208>
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	f240 1991 	movw	r9, #401	@ 0x191
 80094fe:	e009      	b.n	8009514 <rclc_executor_spin_some.part.0+0xf8>
 8009500:	f7ff fba4 	bl	8008c4c <_rclc_take_new_data>
 8009504:	4604      	mov	r4, r0
 8009506:	b110      	cbz	r0, 800950e <rclc_executor_spin_some.part.0+0xf2>
 8009508:	4548      	cmp	r0, r9
 800950a:	f040 808b 	bne.w	8009624 <rclc_executor_spin_some.part.0+0x208>
 800950e:	68ab      	ldr	r3, [r5, #8]
 8009510:	4598      	cmp	r8, r3
 8009512:	d209      	bcs.n	8009528 <rclc_executor_spin_some.part.0+0x10c>
 8009514:	6868      	ldr	r0, [r5, #4]
 8009516:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800951a:	4631      	mov	r1, r6
 800951c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009520:	f108 0801 	add.w	r8, r8, #1
 8009524:	2a00      	cmp	r2, #0
 8009526:	d1eb      	bne.n	8009500 <rclc_executor_spin_some.part.0+0xe4>
 8009528:	2600      	movs	r6, #0
 800952a:	b97b      	cbnz	r3, 800954c <rclc_executor_spin_some.part.0+0x130>
 800952c:	e07a      	b.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 800952e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009532:	2a08      	cmp	r2, #8
 8009534:	f000 80fd 	beq.w	8009732 <rclc_executor_spin_some.part.0+0x316>
 8009538:	2a09      	cmp	r2, #9
 800953a:	f000 80ef 	beq.w	800971c <rclc_executor_spin_some.part.0+0x300>
 800953e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009542:	b98a      	cbnz	r2, 8009568 <rclc_executor_spin_some.part.0+0x14c>
 8009544:	3601      	adds	r6, #1
 8009546:	429e      	cmp	r6, r3
 8009548:	d262      	bcs.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 800954a:	2400      	movs	r4, #0
 800954c:	686a      	ldr	r2, [r5, #4]
 800954e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009552:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009556:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800955a:	2900      	cmp	r1, #0
 800955c:	d062      	beq.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 800955e:	7841      	ldrb	r1, [r0, #1]
 8009560:	2900      	cmp	r1, #0
 8009562:	d0e4      	beq.n	800952e <rclc_executor_spin_some.part.0+0x112>
 8009564:	2901      	cmp	r1, #1
 8009566:	d1ed      	bne.n	8009544 <rclc_executor_spin_some.part.0+0x128>
 8009568:	f7ff fce4 	bl	8008f34 <_rclc_execute.part.0>
 800956c:	2800      	cmp	r0, #0
 800956e:	f040 80b6 	bne.w	80096de <rclc_executor_spin_some.part.0+0x2c2>
 8009572:	68ab      	ldr	r3, [r5, #8]
 8009574:	e7e6      	b.n	8009544 <rclc_executor_spin_some.part.0+0x128>
 8009576:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800957a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800957e:	4630      	mov	r0, r6
 8009580:	f005 fd24 	bl	800efcc <rcl_wait_set_add_client>
 8009584:	2800      	cmp	r0, #0
 8009586:	f43f af7a 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 800958a:	9001      	str	r0, [sp, #4]
 800958c:	f000 fa60 	bl	8009a50 <rcutils_reset_error>
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	4607      	mov	r7, r0
 8009594:	e03c      	b.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 8009596:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800959a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800959e:	4630      	mov	r0, r6
 80095a0:	f005 f9cc 	bl	800e93c <rcl_wait_set_add_subscription>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f43f af6a 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 80095aa:	e7ee      	b.n	800958a <rclc_executor_spin_some.part.0+0x16e>
 80095ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095b4:	4630      	mov	r0, r6
 80095b6:	f005 fcd9 	bl	800ef6c <rcl_wait_set_add_timer>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f43f af5f 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 80095c0:	e7e3      	b.n	800958a <rclc_executor_spin_some.part.0+0x16e>
 80095c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095ca:	4630      	mov	r0, r6
 80095cc:	f005 fca2 	bl	800ef14 <rcl_wait_set_add_guard_condition>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f43f af54 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 80095d6:	e7d8      	b.n	800958a <rclc_executor_spin_some.part.0+0x16e>
 80095d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095e0:	3110      	adds	r1, #16
 80095e2:	4630      	mov	r0, r6
 80095e4:	f006 fa24 	bl	800fa30 <rcl_action_wait_set_add_action_server>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f43f af48 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 80095ee:	e7cc      	b.n	800958a <rclc_executor_spin_some.part.0+0x16e>
 80095f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095f8:	3110      	adds	r1, #16
 80095fa:	2300      	movs	r3, #0
 80095fc:	4630      	mov	r0, r6
 80095fe:	f005 ffef 	bl	800f5e0 <rcl_action_wait_set_add_action_client>
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f af3b 	beq.w	800947e <rclc_executor_spin_some.part.0+0x62>
 8009608:	e7bf      	b.n	800958a <rclc_executor_spin_some.part.0+0x16e>
 800960a:	f000 fa21 	bl	8009a50 <rcutils_reset_error>
 800960e:	2701      	movs	r7, #1
 8009610:	4638      	mov	r0, r7
 8009612:	b003      	add	sp, #12
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	f000 fa1a 	bl	8009a50 <rcutils_reset_error>
 800961c:	4638      	mov	r0, r7
 800961e:	b003      	add	sp, #12
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	4627      	mov	r7, r4
 8009626:	e7f3      	b.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 8009628:	68ab      	ldr	r3, [r5, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8092 	beq.w	8009754 <rclc_executor_spin_some.part.0+0x338>
 8009630:	2400      	movs	r4, #0
 8009632:	46a0      	mov	r8, r4
 8009634:	f240 1991 	movw	r9, #401	@ 0x191
 8009638:	e008      	b.n	800964c <rclc_executor_spin_some.part.0+0x230>
 800963a:	f7ff fab9 	bl	8008bb0 <_rclc_check_for_new_data>
 800963e:	4604      	mov	r4, r0
 8009640:	b108      	cbz	r0, 8009646 <rclc_executor_spin_some.part.0+0x22a>
 8009642:	4548      	cmp	r0, r9
 8009644:	d1ee      	bne.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 8009646:	68ab      	ldr	r3, [r5, #8]
 8009648:	4598      	cmp	r8, r3
 800964a:	d265      	bcs.n	8009718 <rclc_executor_spin_some.part.0+0x2fc>
 800964c:	686a      	ldr	r2, [r5, #4]
 800964e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009652:	4631      	mov	r1, r6
 8009654:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009658:	f108 0801 	add.w	r8, r8, #1
 800965c:	f1bc 0f00 	cmp.w	ip, #0
 8009660:	d1eb      	bne.n	800963a <rclc_executor_spin_some.part.0+0x21e>
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800966a:	4798      	blx	r3
 800966c:	2800      	cmp	r0, #0
 800966e:	d0d9      	beq.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 8009670:	68ab      	ldr	r3, [r5, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0d6      	beq.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 8009676:	f04f 0800 	mov.w	r8, #0
 800967a:	f240 1991 	movw	r9, #401	@ 0x191
 800967e:	f240 2a59 	movw	sl, #601	@ 0x259
 8009682:	e00e      	b.n	80096a2 <rclc_executor_spin_some.part.0+0x286>
 8009684:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d033      	beq.n	80096f4 <rclc_executor_spin_some.part.0+0x2d8>
 800968c:	2b09      	cmp	r3, #9
 800968e:	d028      	beq.n	80096e2 <rclc_executor_spin_some.part.0+0x2c6>
 8009690:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009694:	b9fb      	cbnz	r3, 80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 8009696:	68ab      	ldr	r3, [r5, #8]
 8009698:	f108 0801 	add.w	r8, r8, #1
 800969c:	4598      	cmp	r8, r3
 800969e:	d2b7      	bcs.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 80096a0:	2400      	movs	r4, #0
 80096a2:	6868      	ldr	r0, [r5, #4]
 80096a4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80096a8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80096ac:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0b7      	beq.n	8009624 <rclc_executor_spin_some.part.0+0x208>
 80096b4:	4631      	mov	r1, r6
 80096b6:	f7ff fac9 	bl	8008c4c <_rclc_take_new_data>
 80096ba:	b118      	cbz	r0, 80096c4 <rclc_executor_spin_some.part.0+0x2a8>
 80096bc:	4548      	cmp	r0, r9
 80096be:	d001      	beq.n	80096c4 <rclc_executor_spin_some.part.0+0x2a8>
 80096c0:	4550      	cmp	r0, sl
 80096c2:	d10c      	bne.n	80096de <rclc_executor_spin_some.part.0+0x2c2>
 80096c4:	686b      	ldr	r3, [r5, #4]
 80096c6:	eb13 000b 	adds.w	r0, r3, fp
 80096ca:	d021      	beq.n	8009710 <rclc_executor_spin_some.part.0+0x2f4>
 80096cc:	7842      	ldrb	r2, [r0, #1]
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d0d8      	beq.n	8009684 <rclc_executor_spin_some.part.0+0x268>
 80096d2:	2a01      	cmp	r2, #1
 80096d4:	d1df      	bne.n	8009696 <rclc_executor_spin_some.part.0+0x27a>
 80096d6:	f7ff fc2d 	bl	8008f34 <_rclc_execute.part.0>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0db      	beq.n	8009696 <rclc_executor_spin_some.part.0+0x27a>
 80096de:	4607      	mov	r7, r0
 80096e0:	e796      	b.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 80096e2:	6843      	ldr	r3, [r0, #4]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	d1f5      	bne.n	80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 80096ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0d1      	beq.n	8009696 <rclc_executor_spin_some.part.0+0x27a>
 80096f2:	e7f0      	b.n	80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 80096f4:	6843      	ldr	r3, [r0, #4]
 80096f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096f8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80096fc:	d1eb      	bne.n	80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 80096fe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009702:	2a00      	cmp	r2, #0
 8009704:	d1e7      	bne.n	80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 8009706:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0c3      	beq.n	8009696 <rclc_executor_spin_some.part.0+0x27a>
 800970e:	e7e2      	b.n	80096d6 <rclc_executor_spin_some.part.0+0x2ba>
 8009710:	270b      	movs	r7, #11
 8009712:	e77d      	b.n	8009610 <rclc_executor_spin_some.part.0+0x1f4>
 8009714:	686a      	ldr	r2, [r5, #4]
 8009716:	e6e2      	b.n	80094de <rclc_executor_spin_some.part.0+0xc2>
 8009718:	686a      	ldr	r2, [r5, #4]
 800971a:	e7a2      	b.n	8009662 <rclc_executor_spin_some.part.0+0x246>
 800971c:	6842      	ldr	r2, [r0, #4]
 800971e:	6a11      	ldr	r1, [r2, #32]
 8009720:	2900      	cmp	r1, #0
 8009722:	f47f af21 	bne.w	8009568 <rclc_executor_spin_some.part.0+0x14c>
 8009726:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800972a:	2a00      	cmp	r2, #0
 800972c:	f43f af0a 	beq.w	8009544 <rclc_executor_spin_some.part.0+0x128>
 8009730:	e71a      	b.n	8009568 <rclc_executor_spin_some.part.0+0x14c>
 8009732:	6842      	ldr	r2, [r0, #4]
 8009734:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8009736:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800973a:	f47f af15 	bne.w	8009568 <rclc_executor_spin_some.part.0+0x14c>
 800973e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8009742:	2900      	cmp	r1, #0
 8009744:	f47f af10 	bne.w	8009568 <rclc_executor_spin_some.part.0+0x14c>
 8009748:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800974c:	2a00      	cmp	r2, #0
 800974e:	f43f aef9 	beq.w	8009544 <rclc_executor_spin_some.part.0+0x128>
 8009752:	e709      	b.n	8009568 <rclc_executor_spin_some.part.0+0x14c>
 8009754:	686a      	ldr	r2, [r5, #4]
 8009756:	461c      	mov	r4, r3
 8009758:	e783      	b.n	8009662 <rclc_executor_spin_some.part.0+0x246>
 800975a:	686a      	ldr	r2, [r5, #4]
 800975c:	461c      	mov	r4, r3
 800975e:	e6be      	b.n	80094de <rclc_executor_spin_some.part.0+0xc2>

08009760 <rclc_executor_spin>:
 8009760:	b1d0      	cbz	r0, 8009798 <rclc_executor_spin+0x38>
 8009762:	b510      	push	{r4, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	b082      	sub	sp, #8
 8009768:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	e9cd 2300 	strd	r2, r3, [sp]
 8009772:	f003 fe9d 	bl	800d4b0 <rcl_context_is_valid>
 8009776:	4601      	mov	r1, r0
 8009778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800977c:	4620      	mov	r0, r4
 800977e:	b131      	cbz	r1, 800978e <rclc_executor_spin+0x2e>
 8009780:	f7ff fe4c 	bl	800941c <rclc_executor_spin_some.part.0>
 8009784:	f030 0302 	bics.w	r3, r0, #2
 8009788:	d0ee      	beq.n	8009768 <rclc_executor_spin+0x8>
 800978a:	b002      	add	sp, #8
 800978c:	bd10      	pop	{r4, pc}
 800978e:	f000 f95f 	bl	8009a50 <rcutils_reset_error>
 8009792:	2001      	movs	r0, #1
 8009794:	b002      	add	sp, #8
 8009796:	bd10      	pop	{r4, pc}
 8009798:	200b      	movs	r0, #11
 800979a:	4770      	bx	lr

0800979c <rclc_executor_handle_counters_zero_init>:
 800979c:	b130      	cbz	r0, 80097ac <rclc_executor_handle_counters_zero_init+0x10>
 800979e:	b508      	push	{r3, lr}
 80097a0:	2220      	movs	r2, #32
 80097a2:	2100      	movs	r1, #0
 80097a4:	f00a ffc4 	bl	8014730 <memset>
 80097a8:	2000      	movs	r0, #0
 80097aa:	bd08      	pop	{r3, pc}
 80097ac:	200b      	movs	r0, #11
 80097ae:	4770      	bx	lr

080097b0 <rclc_executor_handle_init>:
 80097b0:	b168      	cbz	r0, 80097ce <rclc_executor_handle_init+0x1e>
 80097b2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80097d8 <rclc_executor_handle_init+0x28>
 80097b6:	2300      	movs	r3, #0
 80097b8:	220b      	movs	r2, #11
 80097ba:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 80097be:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80097c2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80097c6:	8002      	strh	r2, [r0, #0]
 80097c8:	8703      	strh	r3, [r0, #56]	@ 0x38
 80097ca:	4618      	mov	r0, r3
 80097cc:	4770      	bx	lr
 80097ce:	200b      	movs	r0, #11
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	f3af 8000 	nop.w
	...

080097e0 <rclc_support_init>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	b3b8      	cbz	r0, 8009858 <rclc_support_init+0x78>
 80097e8:	461c      	mov	r4, r3
 80097ea:	b3ab      	cbz	r3, 8009858 <rclc_support_init+0x78>
 80097ec:	460f      	mov	r7, r1
 80097ee:	4690      	mov	r8, r2
 80097f0:	4606      	mov	r6, r0
 80097f2:	f003 ffc7 	bl	800d784 <rcl_get_zero_initialized_init_options>
 80097f6:	f104 030c 	add.w	r3, r4, #12
 80097fa:	9005      	str	r0, [sp, #20]
 80097fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009800:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009804:	a805      	add	r0, sp, #20
 8009806:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800980a:	f003 ffbd 	bl	800d788 <rcl_init_options_init>
 800980e:	4605      	mov	r5, r0
 8009810:	b9e0      	cbnz	r0, 800984c <rclc_support_init+0x6c>
 8009812:	ad02      	add	r5, sp, #8
 8009814:	4628      	mov	r0, r5
 8009816:	f003 fe41 	bl	800d49c <rcl_get_zero_initialized_context>
 800981a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800981e:	4633      	mov	r3, r6
 8009820:	e886 0003 	stmia.w	r6, {r0, r1}
 8009824:	aa05      	add	r2, sp, #20
 8009826:	4641      	mov	r1, r8
 8009828:	4638      	mov	r0, r7
 800982a:	f003 fea7 	bl	800d57c <rcl_init>
 800982e:	4605      	mov	r5, r0
 8009830:	b9b8      	cbnz	r0, 8009862 <rclc_support_init+0x82>
 8009832:	60b4      	str	r4, [r6, #8]
 8009834:	4622      	mov	r2, r4
 8009836:	f106 010c 	add.w	r1, r6, #12
 800983a:	2003      	movs	r0, #3
 800983c:	f004 fdce 	bl	800e3dc <rcl_clock_init>
 8009840:	4605      	mov	r5, r0
 8009842:	b970      	cbnz	r0, 8009862 <rclc_support_init+0x82>
 8009844:	a805      	add	r0, sp, #20
 8009846:	f004 f805 	bl	800d854 <rcl_init_options_fini>
 800984a:	b108      	cbz	r0, 8009850 <rclc_support_init+0x70>
 800984c:	f000 f900 	bl	8009a50 <rcutils_reset_error>
 8009850:	4628      	mov	r0, r5
 8009852:	b006      	add	sp, #24
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	250b      	movs	r5, #11
 800985a:	4628      	mov	r0, r5
 800985c:	b006      	add	sp, #24
 800985e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009862:	f000 f8f5 	bl	8009a50 <rcutils_reset_error>
 8009866:	a805      	add	r0, sp, #20
 8009868:	f003 fff4 	bl	800d854 <rcl_init_options_fini>
 800986c:	2800      	cmp	r0, #0
 800986e:	d0ef      	beq.n	8009850 <rclc_support_init+0x70>
 8009870:	e7ec      	b.n	800984c <rclc_support_init+0x6c>
 8009872:	bf00      	nop

08009874 <rclc_node_init_default>:
 8009874:	b3b8      	cbz	r0, 80098e6 <rclc_node_init_default+0x72>
 8009876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800987a:	460d      	mov	r5, r1
 800987c:	b0a1      	sub	sp, #132	@ 0x84
 800987e:	b329      	cbz	r1, 80098cc <rclc_node_init_default+0x58>
 8009880:	4616      	mov	r6, r2
 8009882:	b31a      	cbz	r2, 80098cc <rclc_node_init_default+0x58>
 8009884:	461f      	mov	r7, r3
 8009886:	b30b      	cbz	r3, 80098cc <rclc_node_init_default+0x58>
 8009888:	f10d 0810 	add.w	r8, sp, #16
 800988c:	4604      	mov	r4, r0
 800988e:	4640      	mov	r0, r8
 8009890:	f004 f898 	bl	800d9c4 <rcl_get_zero_initialized_node>
 8009894:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009898:	f10d 0918 	add.w	r9, sp, #24
 800989c:	e884 0003 	stmia.w	r4, {r0, r1}
 80098a0:	4648      	mov	r0, r9
 80098a2:	f004 fa07 	bl	800dcb4 <rcl_node_get_default_options>
 80098a6:	4640      	mov	r0, r8
 80098a8:	f004 f88c 	bl	800d9c4 <rcl_get_zero_initialized_node>
 80098ac:	f8cd 9000 	str.w	r9, [sp]
 80098b0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80098b4:	463b      	mov	r3, r7
 80098b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80098ba:	4632      	mov	r2, r6
 80098bc:	4629      	mov	r1, r5
 80098be:	4620      	mov	r0, r4
 80098c0:	f004 f88a 	bl	800d9d8 <rcl_node_init>
 80098c4:	b930      	cbnz	r0, 80098d4 <rclc_node_init_default+0x60>
 80098c6:	b021      	add	sp, #132	@ 0x84
 80098c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098cc:	200b      	movs	r0, #11
 80098ce:	b021      	add	sp, #132	@ 0x84
 80098d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d4:	9003      	str	r0, [sp, #12]
 80098d6:	f000 f8bb 	bl	8009a50 <rcutils_reset_error>
 80098da:	f000 f8b9 	bl	8009a50 <rcutils_reset_error>
 80098de:	9803      	ldr	r0, [sp, #12]
 80098e0:	b021      	add	sp, #132	@ 0x84
 80098e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098e6:	200b      	movs	r0, #11
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop

080098ec <rclc_publisher_init_default>:
 80098ec:	b368      	cbz	r0, 800994a <rclc_publisher_init_default+0x5e>
 80098ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f2:	460d      	mov	r5, r1
 80098f4:	b0a0      	sub	sp, #128	@ 0x80
 80098f6:	b321      	cbz	r1, 8009942 <rclc_publisher_init_default+0x56>
 80098f8:	4616      	mov	r6, r2
 80098fa:	b312      	cbz	r2, 8009942 <rclc_publisher_init_default+0x56>
 80098fc:	461f      	mov	r7, r3
 80098fe:	b303      	cbz	r3, 8009942 <rclc_publisher_init_default+0x56>
 8009900:	4604      	mov	r4, r0
 8009902:	f7ff f845 	bl	8008990 <rcl_get_zero_initialized_publisher>
 8009906:	f10d 0810 	add.w	r8, sp, #16
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	4640      	mov	r0, r8
 800990e:	f7ff f8db 	bl	8008ac8 <rcl_publisher_get_default_options>
 8009912:	490f      	ldr	r1, [pc, #60]	@ (8009950 <rclc_publisher_init_default+0x64>)
 8009914:	2250      	movs	r2, #80	@ 0x50
 8009916:	4640      	mov	r0, r8
 8009918:	f00a ffd3 	bl	80148c2 <memcpy>
 800991c:	f8cd 8000 	str.w	r8, [sp]
 8009920:	463b      	mov	r3, r7
 8009922:	4632      	mov	r2, r6
 8009924:	4629      	mov	r1, r5
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff f838 	bl	800899c <rcl_publisher_init>
 800992c:	b910      	cbnz	r0, 8009934 <rclc_publisher_init_default+0x48>
 800992e:	b020      	add	sp, #128	@ 0x80
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	9003      	str	r0, [sp, #12]
 8009936:	f000 f88b 	bl	8009a50 <rcutils_reset_error>
 800993a:	9803      	ldr	r0, [sp, #12]
 800993c:	b020      	add	sp, #128	@ 0x80
 800993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009942:	200b      	movs	r0, #11
 8009944:	b020      	add	sp, #128	@ 0x80
 8009946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800994a:	200b      	movs	r0, #11
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	080159c8 	.word	0x080159c8

08009954 <rclc_subscription_init_default>:
 8009954:	b368      	cbz	r0, 80099b2 <rclc_subscription_init_default+0x5e>
 8009956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995a:	460d      	mov	r5, r1
 800995c:	b0a0      	sub	sp, #128	@ 0x80
 800995e:	b321      	cbz	r1, 80099aa <rclc_subscription_init_default+0x56>
 8009960:	4616      	mov	r6, r2
 8009962:	b312      	cbz	r2, 80099aa <rclc_subscription_init_default+0x56>
 8009964:	461f      	mov	r7, r3
 8009966:	b303      	cbz	r3, 80099aa <rclc_subscription_init_default+0x56>
 8009968:	4604      	mov	r4, r0
 800996a:	f004 fbdb 	bl	800e124 <rcl_get_zero_initialized_subscription>
 800996e:	f10d 0810 	add.w	r8, sp, #16
 8009972:	6020      	str	r0, [r4, #0]
 8009974:	4640      	mov	r0, r8
 8009976:	f004 fc83 	bl	800e280 <rcl_subscription_get_default_options>
 800997a:	490f      	ldr	r1, [pc, #60]	@ (80099b8 <rclc_subscription_init_default+0x64>)
 800997c:	2250      	movs	r2, #80	@ 0x50
 800997e:	4640      	mov	r0, r8
 8009980:	f00a ff9f 	bl	80148c2 <memcpy>
 8009984:	f8cd 8000 	str.w	r8, [sp]
 8009988:	463b      	mov	r3, r7
 800998a:	4632      	mov	r2, r6
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	f004 fbce 	bl	800e130 <rcl_subscription_init>
 8009994:	b910      	cbnz	r0, 800999c <rclc_subscription_init_default+0x48>
 8009996:	b020      	add	sp, #128	@ 0x80
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	9003      	str	r0, [sp, #12]
 800999e:	f000 f857 	bl	8009a50 <rcutils_reset_error>
 80099a2:	9803      	ldr	r0, [sp, #12]
 80099a4:	b020      	add	sp, #128	@ 0x80
 80099a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099aa:	200b      	movs	r0, #11
 80099ac:	b020      	add	sp, #128	@ 0x80
 80099ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b2:	200b      	movs	r0, #11
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	08015a18 	.word	0x08015a18

080099bc <__default_zero_allocate>:
 80099bc:	f00a bae0 	b.w	8013f80 <calloc>

080099c0 <__default_reallocate>:
 80099c0:	f00a bc6c 	b.w	801429c <realloc>

080099c4 <__default_deallocate>:
 80099c4:	f00a bb48 	b.w	8014058 <free>

080099c8 <__default_allocate>:
 80099c8:	f00a bb3e 	b.w	8014048 <malloc>

080099cc <rcutils_get_zero_initialized_allocator>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4c05      	ldr	r4, [pc, #20]	@ (80099e4 <rcutils_get_zero_initialized_allocator+0x18>)
 80099d0:	4686      	mov	lr, r0
 80099d2:	4684      	mov	ip, r0
 80099d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	f8cc 3000 	str.w	r3, [ip]
 80099e0:	4670      	mov	r0, lr
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	08015a68 	.word	0x08015a68

080099e8 <rcutils_get_default_allocator>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	4c05      	ldr	r4, [pc, #20]	@ (8009a00 <rcutils_get_default_allocator+0x18>)
 80099ec:	4686      	mov	lr, r0
 80099ee:	4684      	mov	ip, r0
 80099f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	f8cc 3000 	str.w	r3, [ip]
 80099fc:	4670      	mov	r0, lr
 80099fe:	bd10      	pop	{r4, pc}
 8009a00:	200001bc 	.word	0x200001bc

08009a04 <rcutils_allocator_is_valid>:
 8009a04:	b158      	cbz	r0, 8009a1e <rcutils_allocator_is_valid+0x1a>
 8009a06:	6803      	ldr	r3, [r0, #0]
 8009a08:	b143      	cbz	r3, 8009a1c <rcutils_allocator_is_valid+0x18>
 8009a0a:	6843      	ldr	r3, [r0, #4]
 8009a0c:	b133      	cbz	r3, 8009a1c <rcutils_allocator_is_valid+0x18>
 8009a0e:	68c3      	ldr	r3, [r0, #12]
 8009a10:	b123      	cbz	r3, 8009a1c <rcutils_allocator_is_valid+0x18>
 8009a12:	6880      	ldr	r0, [r0, #8]
 8009a14:	3800      	subs	r0, #0
 8009a16:	bf18      	it	ne
 8009a18:	2001      	movne	r0, #1
 8009a1a:	4770      	bx	lr
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	4770      	bx	lr

08009a20 <rcutils_get_error_string>:
 8009a20:	4b06      	ldr	r3, [pc, #24]	@ (8009a3c <rcutils_get_error_string+0x1c>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	b13b      	cbz	r3, 8009a36 <rcutils_get_error_string+0x16>
 8009a26:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <rcutils_get_error_string+0x20>)
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	b90a      	cbnz	r2, 8009a30 <rcutils_get_error_string+0x10>
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	4b04      	ldr	r3, [pc, #16]	@ (8009a44 <rcutils_get_error_string+0x24>)
 8009a32:	7818      	ldrb	r0, [r3, #0]
 8009a34:	4770      	bx	lr
 8009a36:	4b04      	ldr	r3, [pc, #16]	@ (8009a48 <rcutils_get_error_string+0x28>)
 8009a38:	7818      	ldrb	r0, [r3, #0]
 8009a3a:	4770      	bx	lr
 8009a3c:	20009190 	.word	0x20009190
 8009a40:	200091a9 	.word	0x200091a9
 8009a44:	200091a8 	.word	0x200091a8
 8009a48:	08015a7c 	.word	0x08015a7c
 8009a4c:	00000000 	.word	0x00000000

08009a50 <rcutils_reset_error>:
 8009a50:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009a70 <rcutils_reset_error+0x20>
 8009a54:	4a08      	ldr	r2, [pc, #32]	@ (8009a78 <rcutils_reset_error+0x28>)
 8009a56:	4809      	ldr	r0, [pc, #36]	@ (8009a7c <rcutils_reset_error+0x2c>)
 8009a58:	4909      	ldr	r1, [pc, #36]	@ (8009a80 <rcutils_reset_error+0x30>)
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	8013      	strh	r3, [r2, #0]
 8009a5e:	ed82 7b02 	vstr	d7, [r2, #8]
 8009a62:	4a08      	ldr	r2, [pc, #32]	@ (8009a84 <rcutils_reset_error+0x34>)
 8009a64:	7003      	strb	r3, [r0, #0]
 8009a66:	700b      	strb	r3, [r1, #0]
 8009a68:	7013      	strb	r3, [r2, #0]
 8009a6a:	4770      	bx	lr
 8009a6c:	f3af 8000 	nop.w
	...
 8009a78:	20009198 	.word	0x20009198
 8009a7c:	200091a9 	.word	0x200091a9
 8009a80:	200091a8 	.word	0x200091a8
 8009a84:	20009190 	.word	0x20009190

08009a88 <rcutils_system_time_now>:
 8009a88:	b308      	cbz	r0, 8009ace <rcutils_system_time_now+0x46>
 8009a8a:	b570      	push	{r4, r5, r6, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4669      	mov	r1, sp
 8009a92:	2001      	movs	r0, #1
 8009a94:	f7f7 fd10 	bl	80014b8 <clock_gettime>
 8009a98:	e9dd 3500 	ldrd	r3, r5, [sp]
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	db13      	blt.n	8009ac8 <rcutils_system_time_now+0x40>
 8009aa0:	9902      	ldr	r1, [sp, #8]
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	db0d      	blt.n	8009ac2 <rcutils_system_time_now+0x3a>
 8009aa6:	4e0b      	ldr	r6, [pc, #44]	@ (8009ad4 <rcutils_system_time_now+0x4c>)
 8009aa8:	fba3 3206 	umull	r3, r2, r3, r6
 8009aac:	185b      	adds	r3, r3, r1
 8009aae:	fb06 2205 	mla	r2, r6, r5, r2
 8009ab2:	f04f 0000 	mov.w	r0, #0
 8009ab6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8009aba:	e9c4 3200 	strd	r3, r2, [r4]
 8009abe:	b004      	add	sp, #16
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	ea53 0205 	orrs.w	r2, r3, r5
 8009ac6:	d1ee      	bne.n	8009aa6 <rcutils_system_time_now+0x1e>
 8009ac8:	2002      	movs	r0, #2
 8009aca:	b004      	add	sp, #16
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	200b      	movs	r0, #11
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	3b9aca00 	.word	0x3b9aca00

08009ad8 <rcutils_steady_time_now>:
 8009ad8:	b308      	cbz	r0, 8009b1e <rcutils_steady_time_now+0x46>
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4669      	mov	r1, sp
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	f7f7 fce8 	bl	80014b8 <clock_gettime>
 8009ae8:	e9dd 3500 	ldrd	r3, r5, [sp]
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	db13      	blt.n	8009b18 <rcutils_steady_time_now+0x40>
 8009af0:	9902      	ldr	r1, [sp, #8]
 8009af2:	2900      	cmp	r1, #0
 8009af4:	db0d      	blt.n	8009b12 <rcutils_steady_time_now+0x3a>
 8009af6:	4e0b      	ldr	r6, [pc, #44]	@ (8009b24 <rcutils_steady_time_now+0x4c>)
 8009af8:	fba3 3206 	umull	r3, r2, r3, r6
 8009afc:	185b      	adds	r3, r3, r1
 8009afe:	fb06 2205 	mla	r2, r6, r5, r2
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8009b0a:	e9c4 3200 	strd	r3, r2, [r4]
 8009b0e:	b004      	add	sp, #16
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	ea53 0205 	orrs.w	r2, r3, r5
 8009b16:	d1ee      	bne.n	8009af6 <rcutils_steady_time_now+0x1e>
 8009b18:	2002      	movs	r0, #2
 8009b1a:	b004      	add	sp, #16
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	200b      	movs	r0, #11
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	3b9aca00 	.word	0x3b9aca00

08009b28 <rmw_get_default_publisher_options>:
 8009b28:	2200      	movs	r2, #0
 8009b2a:	6002      	str	r2, [r0, #0]
 8009b2c:	7102      	strb	r2, [r0, #4]
 8009b2e:	4770      	bx	lr

08009b30 <rmw_uros_set_custom_transport>:
 8009b30:	b470      	push	{r4, r5, r6}
 8009b32:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009b36:	b162      	cbz	r2, 8009b52 <rmw_uros_set_custom_transport+0x22>
 8009b38:	b15b      	cbz	r3, 8009b52 <rmw_uros_set_custom_transport+0x22>
 8009b3a:	b155      	cbz	r5, 8009b52 <rmw_uros_set_custom_transport+0x22>
 8009b3c:	b14e      	cbz	r6, 8009b52 <rmw_uros_set_custom_transport+0x22>
 8009b3e:	4c06      	ldr	r4, [pc, #24]	@ (8009b58 <rmw_uros_set_custom_transport+0x28>)
 8009b40:	7020      	strb	r0, [r4, #0]
 8009b42:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009b46:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009b4a:	6166      	str	r6, [r4, #20]
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	bc70      	pop	{r4, r5, r6}
 8009b50:	4770      	bx	lr
 8009b52:	200b      	movs	r0, #11
 8009b54:	bc70      	pop	{r4, r5, r6}
 8009b56:	4770      	bx	lr
 8009b58:	200091ac 	.word	0x200091ac

08009b5c <flush_session>:
 8009b5c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8009b5e:	f001 bc87 	b.w	800b470 <uxr_run_session_until_confirm_delivery>
 8009b62:	bf00      	nop

08009b64 <rmw_publish>:
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d053      	beq.n	8009c10 <rmw_publish+0xac>
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	b08e      	sub	sp, #56	@ 0x38
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d04b      	beq.n	8009c0a <rmw_publish+0xa6>
 8009b72:	4604      	mov	r4, r0
 8009b74:	6800      	ldr	r0, [r0, #0]
 8009b76:	f000 fced 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d045      	beq.n	8009c0a <rmw_publish+0xa6>
 8009b7e:	6866      	ldr	r6, [r4, #4]
 8009b80:	2e00      	cmp	r6, #0
 8009b82:	d042      	beq.n	8009c0a <rmw_publish+0xa6>
 8009b84:	69b4      	ldr	r4, [r6, #24]
 8009b86:	4628      	mov	r0, r5
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	4798      	blx	r3
 8009b8c:	69f3      	ldr	r3, [r6, #28]
 8009b8e:	9005      	str	r0, [sp, #20]
 8009b90:	b113      	cbz	r3, 8009b98 <rmw_publish+0x34>
 8009b92:	a805      	add	r0, sp, #20
 8009b94:	4798      	blx	r3
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	9000      	str	r0, [sp, #0]
 8009ba0:	6972      	ldr	r2, [r6, #20]
 8009ba2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009ba4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009ba8:	ab06      	add	r3, sp, #24
 8009baa:	f002 fa4d 	bl	800c048 <uxr_prepare_output_stream>
 8009bae:	b1d8      	cbz	r0, 8009be8 <rmw_publish+0x84>
 8009bb0:	68a3      	ldr	r3, [r4, #8]
 8009bb2:	a906      	add	r1, sp, #24
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	4798      	blx	r3
 8009bb8:	6a33      	ldr	r3, [r6, #32]
 8009bba:	4604      	mov	r4, r0
 8009bbc:	b10b      	cbz	r3, 8009bc2 <rmw_publish+0x5e>
 8009bbe:	a806      	add	r0, sp, #24
 8009bc0:	4798      	blx	r3
 8009bc2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009bcc:	d022      	beq.n	8009c14 <rmw_publish+0xb0>
 8009bce:	6918      	ldr	r0, [r3, #16]
 8009bd0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8009bd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009bd6:	f001 fc4b 	bl	800b470 <uxr_run_session_until_confirm_delivery>
 8009bda:	4020      	ands	r0, r4
 8009bdc:	b2c4      	uxtb	r4, r0
 8009bde:	f084 0001 	eor.w	r0, r4, #1
 8009be2:	b2c0      	uxtb	r0, r0
 8009be4:	b00e      	add	sp, #56	@ 0x38
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009bec:	6918      	ldr	r0, [r3, #16]
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <rmw_publish+0xbc>)
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	9602      	str	r6, [sp, #8]
 8009bf8:	6972      	ldr	r2, [r6, #20]
 8009bfa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009bfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c00:	ab06      	add	r3, sp, #24
 8009c02:	f002 fa51 	bl	800c0a8 <uxr_prepare_output_stream_fragmented>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1d2      	bne.n	8009bb0 <rmw_publish+0x4c>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	b00e      	add	sp, #56	@ 0x38
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	2001      	movs	r0, #1
 8009c12:	4770      	bx	lr
 8009c14:	6918      	ldr	r0, [r3, #16]
 8009c16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c1a:	f001 f869 	bl	800acf0 <uxr_flash_output_streams>
 8009c1e:	e7de      	b.n	8009bde <rmw_publish+0x7a>
 8009c20:	08009b5d 	.word	0x08009b5d

08009c24 <rmw_create_publisher>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f000 80cc 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c30:	460e      	mov	r6, r1
 8009c32:	2900      	cmp	r1, #0
 8009c34:	f000 80c8 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c38:	4604      	mov	r4, r0
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	4615      	mov	r5, r2
 8009c3e:	4698      	mov	r8, r3
 8009c40:	f000 fc88 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f000 80bf 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	f000 80bc 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c50:	782b      	ldrb	r3, [r5, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 80b8 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c58:	f1b8 0f00 	cmp.w	r8, #0
 8009c5c:	f000 80b4 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c60:	485c      	ldr	r0, [pc, #368]	@ (8009dd4 <rmw_create_publisher+0x1b0>)
 8009c62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009c66:	f006 fe63 	bl	8010930 <get_memory>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	f000 80ac 	beq.w	8009dc8 <rmw_create_publisher+0x1a4>
 8009c70:	6884      	ldr	r4, [r0, #8]
 8009c72:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8009c76:	f006 fec3 	bl	8010a00 <rmw_get_implementation_identifier>
 8009c7a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8009c7e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8009c82:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8009c86:	4628      	mov	r0, r5
 8009c88:	f7f6 fab4 	bl	80001f4 <strlen>
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	283c      	cmp	r0, #60	@ 0x3c
 8009c90:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8009c94:	f200 8091 	bhi.w	8009dba <rmw_create_publisher+0x196>
 8009c98:	4a4f      	ldr	r2, [pc, #316]	@ (8009dd8 <rmw_create_publisher+0x1b4>)
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	213c      	movs	r1, #60	@ 0x3c
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f00a fc6c 	bl	801457c <sniprintf>
 8009ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009ca8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8009caa:	4641      	mov	r1, r8
 8009cac:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8009cb0:	2250      	movs	r2, #80	@ 0x50
 8009cb2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009cb6:	f00a fe04 	bl	80148c2 <memcpy>
 8009cba:	f898 3008 	ldrb.w	r3, [r8, #8]
 8009cbe:	4947      	ldr	r1, [pc, #284]	@ (8009ddc <rmw_create_publisher+0x1b8>)
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc6:	bf0c      	ite	eq
 8009cc8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8009ccc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8009cd0:	67a3      	str	r3, [r4, #120]	@ 0x78
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 fc49 	bl	800a570 <get_message_typesupport_handle>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d06b      	beq.n	8009dba <rmw_create_publisher+0x196>
 8009ce2:	6842      	ldr	r2, [r0, #4]
 8009ce4:	61a2      	str	r2, [r4, #24]
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	d067      	beq.n	8009dba <rmw_create_publisher+0x196>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4643      	mov	r3, r8
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f007 f8ec 	bl	8010ecc <create_topic>
 8009cf4:	6260      	str	r0, [r4, #36]	@ 0x24
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d063      	beq.n	8009dc2 <rmw_create_publisher+0x19e>
 8009cfa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d02:	2103      	movs	r1, #3
 8009d04:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8009d08:	1c42      	adds	r2, r0, #1
 8009d0a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8009d0e:	f000 fea1 	bl	800aa54 <uxr_object_id>
 8009d12:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009d16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d1a:	6120      	str	r0, [r4, #16]
 8009d1c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8009d20:	6910      	ldr	r0, [r2, #16]
 8009d22:	2506      	movs	r5, #6
 8009d24:	9500      	str	r5, [sp, #0]
 8009d26:	6819      	ldr	r1, [r3, #0]
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009d2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009d32:	f000 fd41 	bl	800a7b8 <uxr_buffer_create_publisher_bin>
 8009d36:	4602      	mov	r2, r0
 8009d38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009d3c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009d40:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009d44:	f000 fb86 	bl	800a454 <run_xrce_session>
 8009d48:	b3b8      	cbz	r0, 8009dba <rmw_create_publisher+0x196>
 8009d4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d52:	2105      	movs	r1, #5
 8009d54:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8009d58:	1c42      	adds	r2, r0, #1
 8009d5a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8009d5e:	f000 fe79 	bl	800aa54 <uxr_object_id>
 8009d62:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009d66:	6160      	str	r0, [r4, #20]
 8009d68:	691e      	ldr	r6, [r3, #16]
 8009d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d6e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8009d72:	f10d 0a10 	add.w	sl, sp, #16
 8009d76:	4641      	mov	r1, r8
 8009d78:	4650      	mov	r0, sl
 8009d7a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8009d7e:	f000 fb85 	bl	800a48c <convert_qos_profile>
 8009d82:	9503      	str	r5, [sp, #12]
 8009d84:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009d88:	9001      	str	r0, [sp, #4]
 8009d8a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009d8e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8009d98:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009d9c:	f8d8 1000 	ldr.w	r1, [r8]
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 fd69 	bl	800a878 <uxr_buffer_create_datawriter_bin>
 8009da6:	4602      	mov	r2, r0
 8009da8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009dac:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009db0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009db4:	f000 fb4e 	bl	800a454 <run_xrce_session>
 8009db8:	b938      	cbnz	r0, 8009dca <rmw_create_publisher+0x1a6>
 8009dba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009dbc:	b108      	cbz	r0, 8009dc2 <rmw_create_publisher+0x19e>
 8009dbe:	f000 fa47 	bl	800a250 <rmw_uxrce_fini_topic_memory>
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f000 f9ec 	bl	800a1a0 <rmw_uxrce_fini_publisher_memory>
 8009dc8:	2700      	movs	r7, #0
 8009dca:	4638      	mov	r0, r7
 8009dcc:	b007      	add	sp, #28
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000daa4 	.word	0x2000daa4
 8009dd8:	08015a90 	.word	0x08015a90
 8009ddc:	08015820 	.word	0x08015820

08009de0 <rmw_publisher_get_actual_qos>:
 8009de0:	b150      	cbz	r0, 8009df8 <rmw_publisher_get_actual_qos+0x18>
 8009de2:	b508      	push	{r3, lr}
 8009de4:	460b      	mov	r3, r1
 8009de6:	b149      	cbz	r1, 8009dfc <rmw_publisher_get_actual_qos+0x1c>
 8009de8:	6841      	ldr	r1, [r0, #4]
 8009dea:	2250      	movs	r2, #80	@ 0x50
 8009dec:	3128      	adds	r1, #40	@ 0x28
 8009dee:	4618      	mov	r0, r3
 8009df0:	f00a fd67 	bl	80148c2 <memcpy>
 8009df4:	2000      	movs	r0, #0
 8009df6:	bd08      	pop	{r3, pc}
 8009df8:	200b      	movs	r0, #11
 8009dfa:	4770      	bx	lr
 8009dfc:	200b      	movs	r0, #11
 8009dfe:	bd08      	pop	{r3, pc}

08009e00 <rmw_destroy_publisher>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	b128      	cbz	r0, 8009e10 <rmw_destroy_publisher+0x10>
 8009e04:	4604      	mov	r4, r0
 8009e06:	6800      	ldr	r0, [r0, #0]
 8009e08:	460d      	mov	r5, r1
 8009e0a:	f000 fba3 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8009e0e:	b910      	cbnz	r0, 8009e16 <rmw_destroy_publisher+0x16>
 8009e10:	2401      	movs	r4, #1
 8009e12:	4620      	mov	r0, r4
 8009e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e16:	6863      	ldr	r3, [r4, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d0f9      	beq.n	8009e10 <rmw_destroy_publisher+0x10>
 8009e1c:	2d00      	cmp	r5, #0
 8009e1e:	d0f7      	beq.n	8009e10 <rmw_destroy_publisher+0x10>
 8009e20:	6828      	ldr	r0, [r5, #0]
 8009e22:	f000 fb97 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0f2      	beq.n	8009e10 <rmw_destroy_publisher+0x10>
 8009e2a:	686c      	ldr	r4, [r5, #4]
 8009e2c:	2c00      	cmp	r4, #0
 8009e2e:	d0ef      	beq.n	8009e10 <rmw_destroy_publisher+0x10>
 8009e30:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009e32:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8009e36:	f007 f899 	bl	8010f6c <destroy_topic>
 8009e3a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009e3e:	6962      	ldr	r2, [r4, #20]
 8009e40:	6918      	ldr	r0, [r3, #16]
 8009e42:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009e46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	f000 fc00 	bl	800a650 <uxr_buffer_delete_entity>
 8009e50:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009e54:	6922      	ldr	r2, [r4, #16]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	6809      	ldr	r1, [r1, #0]
 8009e60:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009e64:	f000 fbf4 	bl	800a650 <uxr_buffer_delete_entity>
 8009e68:	693e      	ldr	r6, [r7, #16]
 8009e6a:	4622      	mov	r2, r4
 8009e6c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8009e70:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8009e74:	4604      	mov	r4, r0
 8009e76:	4630      	mov	r0, r6
 8009e78:	f000 faec 	bl	800a454 <run_xrce_session>
 8009e7c:	693e      	ldr	r6, [r7, #16]
 8009e7e:	4622      	mov	r2, r4
 8009e80:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8009e84:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f000 fae2 	bl	800a454 <run_xrce_session>
 8009e90:	b12c      	cbz	r4, 8009e9e <rmw_destroy_publisher+0x9e>
 8009e92:	b120      	cbz	r0, 8009e9e <rmw_destroy_publisher+0x9e>
 8009e94:	2400      	movs	r4, #0
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 f982 	bl	800a1a0 <rmw_uxrce_fini_publisher_memory>
 8009e9c:	e7b9      	b.n	8009e12 <rmw_destroy_publisher+0x12>
 8009e9e:	2402      	movs	r4, #2
 8009ea0:	e7f9      	b.n	8009e96 <rmw_destroy_publisher+0x96>
 8009ea2:	bf00      	nop

08009ea4 <rmw_uxrce_init_service_memory>:
 8009ea4:	b1e2      	cbz	r2, 8009ee0 <rmw_uxrce_init_service_memory+0x3c>
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	7b05      	ldrb	r5, [r0, #12]
 8009eac:	4606      	mov	r6, r0
 8009eae:	b9ad      	cbnz	r5, 8009edc <rmw_uxrce_init_service_memory+0x38>
 8009eb0:	23c8      	movs	r3, #200	@ 0xc8
 8009eb2:	e9c0 5500 	strd	r5, r5, [r0]
 8009eb6:	6083      	str	r3, [r0, #8]
 8009eb8:	f240 1301 	movw	r3, #257	@ 0x101
 8009ebc:	4617      	mov	r7, r2
 8009ebe:	8183      	strh	r3, [r0, #12]
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	46a8      	mov	r8, r5
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	3501      	adds	r5, #1
 8009eca:	f006 fd41 	bl	8010950 <put_memory>
 8009ece:	42af      	cmp	r7, r5
 8009ed0:	60a4      	str	r4, [r4, #8]
 8009ed2:	f884 800c 	strb.w	r8, [r4, #12]
 8009ed6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8009eda:	d1f3      	bne.n	8009ec4 <rmw_uxrce_init_service_memory+0x20>
 8009edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop

08009ee4 <rmw_uxrce_init_client_memory>:
 8009ee4:	b1e2      	cbz	r2, 8009f20 <rmw_uxrce_init_client_memory+0x3c>
 8009ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eea:	7b05      	ldrb	r5, [r0, #12]
 8009eec:	4606      	mov	r6, r0
 8009eee:	b9ad      	cbnz	r5, 8009f1c <rmw_uxrce_init_client_memory+0x38>
 8009ef0:	23c8      	movs	r3, #200	@ 0xc8
 8009ef2:	e9c0 5500 	strd	r5, r5, [r0]
 8009ef6:	6083      	str	r3, [r0, #8]
 8009ef8:	f240 1301 	movw	r3, #257	@ 0x101
 8009efc:	4617      	mov	r7, r2
 8009efe:	8183      	strh	r3, [r0, #12]
 8009f00:	460c      	mov	r4, r1
 8009f02:	46a8      	mov	r8, r5
 8009f04:	4621      	mov	r1, r4
 8009f06:	4630      	mov	r0, r6
 8009f08:	3501      	adds	r5, #1
 8009f0a:	f006 fd21 	bl	8010950 <put_memory>
 8009f0e:	42af      	cmp	r7, r5
 8009f10:	60a4      	str	r4, [r4, #8]
 8009f12:	f884 800c 	strb.w	r8, [r4, #12]
 8009f16:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8009f1a:	d1f3      	bne.n	8009f04 <rmw_uxrce_init_client_memory+0x20>
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop

08009f24 <rmw_uxrce_init_publisher_memory>:
 8009f24:	b1e2      	cbz	r2, 8009f60 <rmw_uxrce_init_publisher_memory+0x3c>
 8009f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2a:	7b05      	ldrb	r5, [r0, #12]
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	b9ad      	cbnz	r5, 8009f5c <rmw_uxrce_init_publisher_memory+0x38>
 8009f30:	23d8      	movs	r3, #216	@ 0xd8
 8009f32:	e9c0 5500 	strd	r5, r5, [r0]
 8009f36:	6083      	str	r3, [r0, #8]
 8009f38:	f240 1301 	movw	r3, #257	@ 0x101
 8009f3c:	4617      	mov	r7, r2
 8009f3e:	8183      	strh	r3, [r0, #12]
 8009f40:	460c      	mov	r4, r1
 8009f42:	46a8      	mov	r8, r5
 8009f44:	4621      	mov	r1, r4
 8009f46:	4630      	mov	r0, r6
 8009f48:	3501      	adds	r5, #1
 8009f4a:	f006 fd01 	bl	8010950 <put_memory>
 8009f4e:	42af      	cmp	r7, r5
 8009f50:	60a4      	str	r4, [r4, #8]
 8009f52:	f884 800c 	strb.w	r8, [r4, #12]
 8009f56:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8009f5a:	d1f3      	bne.n	8009f44 <rmw_uxrce_init_publisher_memory+0x20>
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop

08009f64 <rmw_uxrce_init_subscription_memory>:
 8009f64:	b1e2      	cbz	r2, 8009fa0 <rmw_uxrce_init_subscription_memory+0x3c>
 8009f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6a:	7b05      	ldrb	r5, [r0, #12]
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b9ad      	cbnz	r5, 8009f9c <rmw_uxrce_init_subscription_memory+0x38>
 8009f70:	23d8      	movs	r3, #216	@ 0xd8
 8009f72:	e9c0 5500 	strd	r5, r5, [r0]
 8009f76:	6083      	str	r3, [r0, #8]
 8009f78:	f240 1301 	movw	r3, #257	@ 0x101
 8009f7c:	4617      	mov	r7, r2
 8009f7e:	8183      	strh	r3, [r0, #12]
 8009f80:	460c      	mov	r4, r1
 8009f82:	46a8      	mov	r8, r5
 8009f84:	4621      	mov	r1, r4
 8009f86:	4630      	mov	r0, r6
 8009f88:	3501      	adds	r5, #1
 8009f8a:	f006 fce1 	bl	8010950 <put_memory>
 8009f8e:	42af      	cmp	r7, r5
 8009f90:	60a4      	str	r4, [r4, #8]
 8009f92:	f884 800c 	strb.w	r8, [r4, #12]
 8009f96:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8009f9a:	d1f3      	bne.n	8009f84 <rmw_uxrce_init_subscription_memory+0x20>
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop

08009fa4 <rmw_uxrce_init_node_memory>:
 8009fa4:	b1e2      	cbz	r2, 8009fe0 <rmw_uxrce_init_node_memory+0x3c>
 8009fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009faa:	7b05      	ldrb	r5, [r0, #12]
 8009fac:	4606      	mov	r6, r0
 8009fae:	b9ad      	cbnz	r5, 8009fdc <rmw_uxrce_init_node_memory+0x38>
 8009fb0:	23a4      	movs	r3, #164	@ 0xa4
 8009fb2:	e9c0 5500 	strd	r5, r5, [r0]
 8009fb6:	6083      	str	r3, [r0, #8]
 8009fb8:	f240 1301 	movw	r3, #257	@ 0x101
 8009fbc:	4617      	mov	r7, r2
 8009fbe:	8183      	strh	r3, [r0, #12]
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	46a8      	mov	r8, r5
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	3501      	adds	r5, #1
 8009fca:	f006 fcc1 	bl	8010950 <put_memory>
 8009fce:	42af      	cmp	r7, r5
 8009fd0:	60a4      	str	r4, [r4, #8]
 8009fd2:	f884 800c 	strb.w	r8, [r4, #12]
 8009fd6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8009fda:	d1f3      	bne.n	8009fc4 <rmw_uxrce_init_node_memory+0x20>
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop

08009fe4 <rmw_uxrce_init_session_memory>:
 8009fe4:	b1ea      	cbz	r2, 800a022 <rmw_uxrce_init_session_memory+0x3e>
 8009fe6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fea:	7b05      	ldrb	r5, [r0, #12]
 8009fec:	4606      	mov	r6, r0
 8009fee:	b9b5      	cbnz	r5, 800a01e <rmw_uxrce_init_session_memory+0x3a>
 8009ff0:	e9c0 5500 	strd	r5, r5, [r0]
 8009ff4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8009ff8:	f240 1301 	movw	r3, #257	@ 0x101
 8009ffc:	4617      	mov	r7, r2
 8009ffe:	f8c0 8008 	str.w	r8, [r0, #8]
 800a002:	460c      	mov	r4, r1
 800a004:	8183      	strh	r3, [r0, #12]
 800a006:	46a9      	mov	r9, r5
 800a008:	4621      	mov	r1, r4
 800a00a:	4630      	mov	r0, r6
 800a00c:	3501      	adds	r5, #1
 800a00e:	f006 fc9f 	bl	8010950 <put_memory>
 800a012:	42af      	cmp	r7, r5
 800a014:	60a4      	str	r4, [r4, #8]
 800a016:	f884 900c 	strb.w	r9, [r4, #12]
 800a01a:	4444      	add	r4, r8
 800a01c:	d1f4      	bne.n	800a008 <rmw_uxrce_init_session_memory+0x24>
 800a01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a022:	4770      	bx	lr

0800a024 <rmw_uxrce_init_topic_memory>:
 800a024:	b1e2      	cbz	r2, 800a060 <rmw_uxrce_init_topic_memory+0x3c>
 800a026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	7b05      	ldrb	r5, [r0, #12]
 800a02c:	4606      	mov	r6, r0
 800a02e:	b9ad      	cbnz	r5, 800a05c <rmw_uxrce_init_topic_memory+0x38>
 800a030:	231c      	movs	r3, #28
 800a032:	e9c0 5500 	strd	r5, r5, [r0]
 800a036:	6083      	str	r3, [r0, #8]
 800a038:	f240 1301 	movw	r3, #257	@ 0x101
 800a03c:	4617      	mov	r7, r2
 800a03e:	8183      	strh	r3, [r0, #12]
 800a040:	460c      	mov	r4, r1
 800a042:	46a8      	mov	r8, r5
 800a044:	4621      	mov	r1, r4
 800a046:	4630      	mov	r0, r6
 800a048:	3501      	adds	r5, #1
 800a04a:	f006 fc81 	bl	8010950 <put_memory>
 800a04e:	42af      	cmp	r7, r5
 800a050:	60a4      	str	r4, [r4, #8]
 800a052:	f884 800c 	strb.w	r8, [r4, #12]
 800a056:	f104 041c 	add.w	r4, r4, #28
 800a05a:	d1f3      	bne.n	800a044 <rmw_uxrce_init_topic_memory+0x20>
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop

0800a064 <rmw_uxrce_init_static_input_buffer_memory>:
 800a064:	b1ea      	cbz	r2, 800a0a2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	7b05      	ldrb	r5, [r0, #12]
 800a06c:	4606      	mov	r6, r0
 800a06e:	b9b5      	cbnz	r5, 800a09e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a070:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a074:	e9c0 5500 	strd	r5, r5, [r0]
 800a078:	6083      	str	r3, [r0, #8]
 800a07a:	f240 1301 	movw	r3, #257	@ 0x101
 800a07e:	4617      	mov	r7, r2
 800a080:	8183      	strh	r3, [r0, #12]
 800a082:	460c      	mov	r4, r1
 800a084:	46a8      	mov	r8, r5
 800a086:	4621      	mov	r1, r4
 800a088:	4630      	mov	r0, r6
 800a08a:	3501      	adds	r5, #1
 800a08c:	f006 fc60 	bl	8010950 <put_memory>
 800a090:	42af      	cmp	r7, r5
 800a092:	60a4      	str	r4, [r4, #8]
 800a094:	f884 800c 	strb.w	r8, [r4, #12]
 800a098:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a09c:	d1f3      	bne.n	800a086 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a2:	4770      	bx	lr

0800a0a4 <rmw_uxrce_init_init_options_impl_memory>:
 800a0a4:	b1e2      	cbz	r2, 800a0e0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	7b05      	ldrb	r5, [r0, #12]
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	b9ad      	cbnz	r5, 800a0dc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a0b0:	232c      	movs	r3, #44	@ 0x2c
 800a0b2:	e9c0 5500 	strd	r5, r5, [r0]
 800a0b6:	6083      	str	r3, [r0, #8]
 800a0b8:	f240 1301 	movw	r3, #257	@ 0x101
 800a0bc:	4617      	mov	r7, r2
 800a0be:	8183      	strh	r3, [r0, #12]
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	46a8      	mov	r8, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	3501      	adds	r5, #1
 800a0ca:	f006 fc41 	bl	8010950 <put_memory>
 800a0ce:	42af      	cmp	r7, r5
 800a0d0:	60a4      	str	r4, [r4, #8]
 800a0d2:	f884 800c 	strb.w	r8, [r4, #12]
 800a0d6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800a0da:	d1f3      	bne.n	800a0c4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop

0800a0e4 <rmw_uxrce_init_wait_set_memory>:
 800a0e4:	b1e2      	cbz	r2, 800a120 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	7b05      	ldrb	r5, [r0, #12]
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	b9ad      	cbnz	r5, 800a11c <rmw_uxrce_init_wait_set_memory+0x38>
 800a0f0:	231c      	movs	r3, #28
 800a0f2:	e9c0 5500 	strd	r5, r5, [r0]
 800a0f6:	6083      	str	r3, [r0, #8]
 800a0f8:	f240 1301 	movw	r3, #257	@ 0x101
 800a0fc:	4617      	mov	r7, r2
 800a0fe:	8183      	strh	r3, [r0, #12]
 800a100:	460c      	mov	r4, r1
 800a102:	46a8      	mov	r8, r5
 800a104:	4621      	mov	r1, r4
 800a106:	4630      	mov	r0, r6
 800a108:	3501      	adds	r5, #1
 800a10a:	f006 fc21 	bl	8010950 <put_memory>
 800a10e:	42af      	cmp	r7, r5
 800a110:	60a4      	str	r4, [r4, #8]
 800a112:	f884 800c 	strb.w	r8, [r4, #12]
 800a116:	f104 041c 	add.w	r4, r4, #28
 800a11a:	d1f3      	bne.n	800a104 <rmw_uxrce_init_wait_set_memory+0x20>
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop

0800a124 <rmw_uxrce_init_guard_condition_memory>:
 800a124:	b1e2      	cbz	r2, 800a160 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	7b05      	ldrb	r5, [r0, #12]
 800a12c:	4606      	mov	r6, r0
 800a12e:	b9ad      	cbnz	r5, 800a15c <rmw_uxrce_init_guard_condition_memory+0x38>
 800a130:	2320      	movs	r3, #32
 800a132:	e9c0 5500 	strd	r5, r5, [r0]
 800a136:	6083      	str	r3, [r0, #8]
 800a138:	f240 1301 	movw	r3, #257	@ 0x101
 800a13c:	4617      	mov	r7, r2
 800a13e:	8183      	strh	r3, [r0, #12]
 800a140:	460c      	mov	r4, r1
 800a142:	46a8      	mov	r8, r5
 800a144:	4621      	mov	r1, r4
 800a146:	4630      	mov	r0, r6
 800a148:	3501      	adds	r5, #1
 800a14a:	f006 fc01 	bl	8010950 <put_memory>
 800a14e:	42af      	cmp	r7, r5
 800a150:	60a4      	str	r4, [r4, #8]
 800a152:	f884 800c 	strb.w	r8, [r4, #12]
 800a156:	f104 0420 	add.w	r4, r4, #32
 800a15a:	d1f3      	bne.n	800a144 <rmw_uxrce_init_guard_condition_memory+0x20>
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop

0800a164 <rmw_uxrce_fini_session_memory>:
 800a164:	4601      	mov	r1, r0
 800a166:	4801      	ldr	r0, [pc, #4]	@ (800a16c <rmw_uxrce_fini_session_memory+0x8>)
 800a168:	f006 bbf2 	b.w	8010950 <put_memory>
 800a16c:	2000dac4 	.word	0x2000dac4

0800a170 <rmw_uxrce_fini_node_memory>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4604      	mov	r4, r0
 800a174:	6800      	ldr	r0, [r0, #0]
 800a176:	b128      	cbz	r0, 800a184 <rmw_uxrce_fini_node_memory+0x14>
 800a178:	4b07      	ldr	r3, [pc, #28]	@ (800a198 <rmw_uxrce_fini_node_memory+0x28>)
 800a17a:	6819      	ldr	r1, [r3, #0]
 800a17c:	f7f6 f830 	bl	80001e0 <strcmp>
 800a180:	b940      	cbnz	r0, 800a194 <rmw_uxrce_fini_node_memory+0x24>
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	b129      	cbz	r1, 800a194 <rmw_uxrce_fini_node_memory+0x24>
 800a188:	2500      	movs	r5, #0
 800a18a:	4804      	ldr	r0, [pc, #16]	@ (800a19c <rmw_uxrce_fini_node_memory+0x2c>)
 800a18c:	610d      	str	r5, [r1, #16]
 800a18e:	f006 fbdf 	bl	8010950 <put_memory>
 800a192:	6065      	str	r5, [r4, #4]
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	0801607c 	.word	0x0801607c
 800a19c:	2000da94 	.word	0x2000da94

0800a1a0 <rmw_uxrce_fini_publisher_memory>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	6800      	ldr	r0, [r0, #0]
 800a1a6:	b128      	cbz	r0, 800a1b4 <rmw_uxrce_fini_publisher_memory+0x14>
 800a1a8:	4b06      	ldr	r3, [pc, #24]	@ (800a1c4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800a1aa:	6819      	ldr	r1, [r3, #0]
 800a1ac:	f7f6 f818 	bl	80001e0 <strcmp>
 800a1b0:	b938      	cbnz	r0, 800a1c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	6861      	ldr	r1, [r4, #4]
 800a1b6:	b121      	cbz	r1, 800a1c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800a1b8:	4803      	ldr	r0, [pc, #12]	@ (800a1c8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800a1ba:	f006 fbc9 	bl	8010950 <put_memory>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	bd10      	pop	{r4, pc}
 800a1c4:	0801607c 	.word	0x0801607c
 800a1c8:	2000daa4 	.word	0x2000daa4

0800a1cc <rmw_uxrce_fini_subscription_memory>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	6800      	ldr	r0, [r0, #0]
 800a1d2:	b128      	cbz	r0, 800a1e0 <rmw_uxrce_fini_subscription_memory+0x14>
 800a1d4:	4b06      	ldr	r3, [pc, #24]	@ (800a1f0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a1d6:	6819      	ldr	r1, [r3, #0]
 800a1d8:	f7f6 f802 	bl	80001e0 <strcmp>
 800a1dc:	b938      	cbnz	r0, 800a1ee <rmw_uxrce_fini_subscription_memory+0x22>
 800a1de:	6020      	str	r0, [r4, #0]
 800a1e0:	6861      	ldr	r1, [r4, #4]
 800a1e2:	b121      	cbz	r1, 800a1ee <rmw_uxrce_fini_subscription_memory+0x22>
 800a1e4:	4803      	ldr	r0, [pc, #12]	@ (800a1f4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800a1e6:	f006 fbb3 	bl	8010950 <put_memory>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6063      	str	r3, [r4, #4]
 800a1ee:	bd10      	pop	{r4, pc}
 800a1f0:	0801607c 	.word	0x0801607c
 800a1f4:	2000dae4 	.word	0x2000dae4

0800a1f8 <rmw_uxrce_fini_service_memory>:
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	6800      	ldr	r0, [r0, #0]
 800a1fe:	b128      	cbz	r0, 800a20c <rmw_uxrce_fini_service_memory+0x14>
 800a200:	4b06      	ldr	r3, [pc, #24]	@ (800a21c <rmw_uxrce_fini_service_memory+0x24>)
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	f7f5 ffec 	bl	80001e0 <strcmp>
 800a208:	b938      	cbnz	r0, 800a21a <rmw_uxrce_fini_service_memory+0x22>
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	6861      	ldr	r1, [r4, #4]
 800a20e:	b121      	cbz	r1, 800a21a <rmw_uxrce_fini_service_memory+0x22>
 800a210:	4803      	ldr	r0, [pc, #12]	@ (800a220 <rmw_uxrce_fini_service_memory+0x28>)
 800a212:	f006 fb9d 	bl	8010950 <put_memory>
 800a216:	2300      	movs	r3, #0
 800a218:	6063      	str	r3, [r4, #4]
 800a21a:	bd10      	pop	{r4, pc}
 800a21c:	0801607c 	.word	0x0801607c
 800a220:	2000dab4 	.word	0x2000dab4

0800a224 <rmw_uxrce_fini_client_memory>:
 800a224:	b510      	push	{r4, lr}
 800a226:	4604      	mov	r4, r0
 800a228:	6800      	ldr	r0, [r0, #0]
 800a22a:	b128      	cbz	r0, 800a238 <rmw_uxrce_fini_client_memory+0x14>
 800a22c:	4b06      	ldr	r3, [pc, #24]	@ (800a248 <rmw_uxrce_fini_client_memory+0x24>)
 800a22e:	6819      	ldr	r1, [r3, #0]
 800a230:	f7f5 ffd6 	bl	80001e0 <strcmp>
 800a234:	b938      	cbnz	r0, 800a246 <rmw_uxrce_fini_client_memory+0x22>
 800a236:	6020      	str	r0, [r4, #0]
 800a238:	6861      	ldr	r1, [r4, #4]
 800a23a:	b121      	cbz	r1, 800a246 <rmw_uxrce_fini_client_memory+0x22>
 800a23c:	4803      	ldr	r0, [pc, #12]	@ (800a24c <rmw_uxrce_fini_client_memory+0x28>)
 800a23e:	f006 fb87 	bl	8010950 <put_memory>
 800a242:	2300      	movs	r3, #0
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	bd10      	pop	{r4, pc}
 800a248:	0801607c 	.word	0x0801607c
 800a24c:	200091c8 	.word	0x200091c8

0800a250 <rmw_uxrce_fini_topic_memory>:
 800a250:	b510      	push	{r4, lr}
 800a252:	4604      	mov	r4, r0
 800a254:	4621      	mov	r1, r4
 800a256:	4803      	ldr	r0, [pc, #12]	@ (800a264 <rmw_uxrce_fini_topic_memory+0x14>)
 800a258:	f006 fb7a 	bl	8010950 <put_memory>
 800a25c:	2300      	movs	r3, #0
 800a25e:	61a3      	str	r3, [r4, #24]
 800a260:	bd10      	pop	{r4, pc}
 800a262:	bf00      	nop
 800a264:	2000daf4 	.word	0x2000daf4

0800a268 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a268:	b082      	sub	sp, #8
 800a26a:	b530      	push	{r4, r5, lr}
 800a26c:	4925      	ldr	r1, [pc, #148]	@ (800a304 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800a26e:	680d      	ldr	r5, [r1, #0]
 800a270:	ac03      	add	r4, sp, #12
 800a272:	e884 000c 	stmia.w	r4, {r2, r3}
 800a276:	461c      	mov	r4, r3
 800a278:	2d00      	cmp	r5, #0
 800a27a:	d041      	beq.n	800a300 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800a27c:	462b      	mov	r3, r5
 800a27e:	2100      	movs	r1, #0
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800a288:	4290      	cmp	r0, r2
 800a28a:	bf08      	it	eq
 800a28c:	3101      	addeq	r1, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1f6      	bne.n	800a280 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800a292:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d029      	beq.n	800a2ee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a29a:	d907      	bls.n	800a2ac <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d005      	beq.n	800a2ac <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	b002      	add	sp, #8
 800a2aa:	4770      	bx	lr
 800a2ac:	b314      	cbz	r4, 800a2f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800a2ae:	428c      	cmp	r4, r1
 800a2b0:	d820      	bhi.n	800a2f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800a2b2:	2d00      	cmp	r5, #0
 800a2b4:	d0f4      	beq.n	800a2a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800a2bc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800a2c0:	e002      	b.n	800a2c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800a2c2:	686d      	ldr	r5, [r5, #4]
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	d0ec      	beq.n	800a2a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800a2c8:	68ab      	ldr	r3, [r5, #8]
 800a2ca:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800a2ce:	4290      	cmp	r0, r2
 800a2d0:	d1f7      	bne.n	800a2c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a2d2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800a2d6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800a2da:	4562      	cmp	r2, ip
 800a2dc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a2e0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800a2e4:	daed      	bge.n	800a2c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a2e6:	4694      	mov	ip, r2
 800a2e8:	461c      	mov	r4, r3
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	e7e9      	b.n	800a2c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a2ee:	b10c      	cbz	r4, 800a2f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800a2f0:	428c      	cmp	r4, r1
 800a2f2:	d9d5      	bls.n	800a2a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800a2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f8:	4802      	ldr	r0, [pc, #8]	@ (800a304 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800a2fa:	b002      	add	sp, #8
 800a2fc:	f006 bb18 	b.w	8010930 <get_memory>
 800a300:	4629      	mov	r1, r5
 800a302:	e7c6      	b.n	800a292 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800a304:	2000dad4 	.word	0x2000dad4

0800a308 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800a308:	4b11      	ldr	r3, [pc, #68]	@ (800a350 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	b530      	push	{r4, r5, lr}
 800a30e:	b1e3      	cbz	r3, 800a34a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800a310:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800a314:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800a318:	2400      	movs	r4, #0
 800a31a:	e001      	b.n	800a320 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	b193      	cbz	r3, 800a346 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800a326:	4288      	cmp	r0, r1
 800a328:	d1f8      	bne.n	800a31c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800a32a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800a32e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800a332:	4571      	cmp	r1, lr
 800a334:	eb72 050c 	sbcs.w	r5, r2, ip
 800a338:	daf0      	bge.n	800a31c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800a33a:	461c      	mov	r4, r3
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	468e      	mov	lr, r1
 800a340:	4694      	mov	ip, r2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1ec      	bne.n	800a320 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800a346:	4620      	mov	r0, r4
 800a348:	bd30      	pop	{r4, r5, pc}
 800a34a:	461c      	mov	r4, r3
 800a34c:	4620      	mov	r0, r4
 800a34e:	bd30      	pop	{r4, r5, pc}
 800a350:	2000dad4 	.word	0x2000dad4
 800a354:	00000000 	.word	0x00000000

0800a358 <rmw_uxrce_clean_expired_static_input_buffer>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	4b3c      	ldr	r3, [pc, #240]	@ (800a450 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800a35e:	ed2d 8b06 	vpush	{d8-d10}
 800a362:	681f      	ldr	r7, [r3, #0]
 800a364:	b08d      	sub	sp, #52	@ 0x34
 800a366:	f007 fc21 	bl	8011bac <rmw_uros_epoch_nanos>
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	d05d      	beq.n	800a42a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800a36e:	46b8      	mov	r8, r7
 800a370:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800a438 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800a374:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a378:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800a440 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800a382:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800a448 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800a386:	4681      	mov	r9, r0
 800a388:	468a      	mov	sl, r1
 800a38a:	ac04      	add	r4, sp, #16
 800a38c:	d03f      	beq.n	800a40e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800a38e:	2b05      	cmp	r3, #5
 800a390:	d044      	beq.n	800a41c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800a392:	2b03      	cmp	r3, #3
 800a394:	d03b      	beq.n	800a40e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800a396:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a39a:	ed8d ab06 	vstr	d10, [sp, #24]
 800a39e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800a3a2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800a3a6:	ab08      	add	r3, sp, #32
 800a3a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a3ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a3b2:	f006 f8f1 	bl	8010598 <rmw_time_equal>
 800a3b6:	b118      	cbz	r0, 800a3c0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800a3b8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800a3bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a3c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a3c4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800a3c8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800a3cc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800a3d0:	f006 f936 	bl	8010640 <rmw_time_total_nsec>
 800a3d4:	1830      	adds	r0, r6, r0
 800a3d6:	eb47 0101 	adc.w	r1, r7, r1
 800a3da:	4548      	cmp	r0, r9
 800a3dc:	eb71 030a 	sbcs.w	r3, r1, sl
 800a3e0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800a3e4:	db05      	blt.n	800a3f2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800a3e6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800a3ea:	4591      	cmp	r9, r2
 800a3ec:	eb7a 0303 	sbcs.w	r3, sl, r3
 800a3f0:	da03      	bge.n	800a3fa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800a3f2:	4817      	ldr	r0, [pc, #92]	@ (800a450 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	f006 faab 	bl	8010950 <put_memory>
 800a3fa:	f1bb 0f00 	cmp.w	fp, #0
 800a3fe:	d014      	beq.n	800a42a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800a400:	46d8      	mov	r8, fp
 800a402:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a406:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d1bf      	bne.n	800a38e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800a40e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800a412:	3340      	adds	r3, #64	@ 0x40
 800a414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a41a:	e7c0      	b.n	800a39e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800a41c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800a420:	3348      	adds	r3, #72	@ 0x48
 800a422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a428:	e7b9      	b.n	800a39e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800a42a:	b00d      	add	sp, #52	@ 0x34
 800a42c:	ecbd 8b06 	vpop	{d8-d10}
 800a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a434:	f3af 8000 	nop.w
	...
 800a440:	00000001 	.word	0x00000001
 800a444:	00000000 	.word	0x00000000
 800a448:	0000001e 	.word	0x0000001e
 800a44c:	00000000 	.word	0x00000000
 800a450:	2000dad4 	.word	0x2000dad4

0800a454 <run_xrce_session>:
 800a454:	b510      	push	{r4, lr}
 800a456:	788c      	ldrb	r4, [r1, #2]
 800a458:	b086      	sub	sp, #24
 800a45a:	2c01      	cmp	r4, #1
 800a45c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a460:	d00c      	beq.n	800a47c <run_xrce_session+0x28>
 800a462:	4619      	mov	r1, r3
 800a464:	2301      	movs	r3, #1
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	f10d 020e 	add.w	r2, sp, #14
 800a46c:	f10d 0317 	add.w	r3, sp, #23
 800a470:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a474:	f001 f822 	bl	800b4bc <uxr_run_session_until_all_status>
 800a478:	b006      	add	sp, #24
 800a47a:	bd10      	pop	{r4, pc}
 800a47c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a480:	f000 fc36 	bl	800acf0 <uxr_flash_output_streams>
 800a484:	4620      	mov	r0, r4
 800a486:	b006      	add	sp, #24
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	bf00      	nop

0800a48c <convert_qos_profile>:
 800a48c:	7a4a      	ldrb	r2, [r1, #9]
 800a48e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a492:	2a02      	cmp	r2, #2
 800a494:	bf18      	it	ne
 800a496:	2200      	movne	r2, #0
 800a498:	7002      	strb	r2, [r0, #0]
 800a49a:	780a      	ldrb	r2, [r1, #0]
 800a49c:	8889      	ldrh	r1, [r1, #4]
 800a49e:	8081      	strh	r1, [r0, #4]
 800a4a0:	f1ac 0c02 	sub.w	ip, ip, #2
 800a4a4:	f1a2 0202 	sub.w	r2, r2, #2
 800a4a8:	fabc fc8c 	clz	ip, ip
 800a4ac:	fab2 f282 	clz	r2, r2
 800a4b0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a4b4:	0952      	lsrs	r2, r2, #5
 800a4b6:	f880 c001 	strb.w	ip, [r0, #1]
 800a4ba:	7082      	strb	r2, [r0, #2]
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop

0800a4c0 <generate_type_name>:
 800a4c0:	b530      	push	{r4, r5, lr}
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	700b      	strb	r3, [r1, #0]
 800a4c6:	6803      	ldr	r3, [r0, #0]
 800a4c8:	b087      	sub	sp, #28
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	b1d3      	cbz	r3, 800a504 <generate_type_name+0x44>
 800a4ce:	4a0f      	ldr	r2, [pc, #60]	@ (800a50c <generate_type_name+0x4c>)
 800a4d0:	4615      	mov	r5, r2
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	9500      	str	r5, [sp, #0]
 800a4d6:	6842      	ldr	r2, [r0, #4]
 800a4d8:	480d      	ldr	r0, [pc, #52]	@ (800a510 <generate_type_name+0x50>)
 800a4da:	9001      	str	r0, [sp, #4]
 800a4dc:	4608      	mov	r0, r1
 800a4de:	490d      	ldr	r1, [pc, #52]	@ (800a514 <generate_type_name+0x54>)
 800a4e0:	9204      	str	r2, [sp, #16]
 800a4e2:	9105      	str	r1, [sp, #20]
 800a4e4:	9102      	str	r1, [sp, #8]
 800a4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a518 <generate_type_name+0x58>)
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f00a f847 	bl	801457c <sniprintf>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	db05      	blt.n	800a4fe <generate_type_name+0x3e>
 800a4f2:	4284      	cmp	r4, r0
 800a4f4:	bfd4      	ite	le
 800a4f6:	2000      	movle	r0, #0
 800a4f8:	2001      	movgt	r0, #1
 800a4fa:	b007      	add	sp, #28
 800a4fc:	bd30      	pop	{r4, r5, pc}
 800a4fe:	2000      	movs	r0, #0
 800a500:	b007      	add	sp, #28
 800a502:	bd30      	pop	{r4, r5, pc}
 800a504:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <generate_type_name+0x5c>)
 800a506:	4a01      	ldr	r2, [pc, #4]	@ (800a50c <generate_type_name+0x4c>)
 800a508:	461d      	mov	r5, r3
 800a50a:	e7e2      	b.n	800a4d2 <generate_type_name+0x12>
 800a50c:	08015a80 	.word	0x08015a80
 800a510:	08015a98 	.word	0x08015a98
 800a514:	08015a94 	.word	0x08015a94
 800a518:	08015a84 	.word	0x08015a84
 800a51c:	08015e54 	.word	0x08015e54

0800a520 <generate_topic_name>:
 800a520:	b510      	push	{r4, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	4614      	mov	r4, r2
 800a526:	9000      	str	r0, [sp, #0]
 800a528:	4b08      	ldr	r3, [pc, #32]	@ (800a54c <generate_topic_name+0x2c>)
 800a52a:	4a09      	ldr	r2, [pc, #36]	@ (800a550 <generate_topic_name+0x30>)
 800a52c:	4608      	mov	r0, r1
 800a52e:	4621      	mov	r1, r4
 800a530:	f00a f824 	bl	801457c <sniprintf>
 800a534:	2800      	cmp	r0, #0
 800a536:	db05      	blt.n	800a544 <generate_topic_name+0x24>
 800a538:	4284      	cmp	r4, r0
 800a53a:	bfd4      	ite	le
 800a53c:	2000      	movle	r0, #0
 800a53e:	2001      	movgt	r0, #1
 800a540:	b002      	add	sp, #8
 800a542:	bd10      	pop	{r4, pc}
 800a544:	2000      	movs	r0, #0
 800a546:	b002      	add	sp, #8
 800a548:	bd10      	pop	{r4, pc}
 800a54a:	bf00      	nop
 800a54c:	08015aa4 	.word	0x08015aa4
 800a550:	08015a9c 	.word	0x08015a9c

0800a554 <is_uxrce_rmw_identifier_valid>:
 800a554:	b510      	push	{r4, lr}
 800a556:	4604      	mov	r4, r0
 800a558:	b140      	cbz	r0, 800a56c <is_uxrce_rmw_identifier_valid+0x18>
 800a55a:	f006 fa51 	bl	8010a00 <rmw_get_implementation_identifier>
 800a55e:	4601      	mov	r1, r0
 800a560:	4620      	mov	r0, r4
 800a562:	f7f5 fe3d 	bl	80001e0 <strcmp>
 800a566:	fab0 f080 	clz	r0, r0
 800a56a:	0940      	lsrs	r0, r0, #5
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	bf00      	nop

0800a570 <get_message_typesupport_handle>:
 800a570:	6883      	ldr	r3, [r0, #8]
 800a572:	4718      	bx	r3

0800a574 <get_message_typesupport_handle_function>:
 800a574:	b510      	push	{r4, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	6800      	ldr	r0, [r0, #0]
 800a57a:	f7f5 fe31 	bl	80001e0 <strcmp>
 800a57e:	2800      	cmp	r0, #0
 800a580:	bf0c      	ite	eq
 800a582:	4620      	moveq	r0, r4
 800a584:	2000      	movne	r0, #0
 800a586:	bd10      	pop	{r4, pc}

0800a588 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	6805      	ldr	r5, [r0, #0]
 800a58e:	4604      	mov	r4, r0
 800a590:	4628      	mov	r0, r5
 800a592:	460e      	mov	r6, r1
 800a594:	f7f5 fe24 	bl	80001e0 <strcmp>
 800a598:	b1c8      	cbz	r0, 800a5ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800a59a:	4b11      	ldr	r3, [pc, #68]	@ (800a5e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	d112      	bne.n	800a5c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a5a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a5a6:	f8d8 4000 	ldr.w	r4, [r8]
 800a5aa:	b16c      	cbz	r4, 800a5c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a5ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a5b0:	2700      	movs	r7, #0
 800a5b2:	3d04      	subs	r5, #4
 800a5b4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	f7f5 fe11 	bl	80001e0 <strcmp>
 800a5be:	00bb      	lsls	r3, r7, #2
 800a5c0:	b140      	cbz	r0, 800a5d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	42bc      	cmp	r4, r7
 800a5c6:	d1f5      	bne.n	800a5b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5dc:	58d3      	ldr	r3, [r2, r3]
 800a5de:	4718      	bx	r3
 800a5e0:	200001d0 	.word	0x200001d0

0800a5e4 <geometry_msgs__msg__Twist__init>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	b1a8      	cbz	r0, 800a616 <geometry_msgs__msg__Twist__init+0x32>
 800a5ea:	f000 f82b 	bl	800a644 <geometry_msgs__msg__Vector3__init>
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	b140      	cbz	r0, 800a604 <geometry_msgs__msg__Twist__init+0x20>
 800a5f2:	f105 0618 	add.w	r6, r5, #24
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f000 f824 	bl	800a644 <geometry_msgs__msg__Vector3__init>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	b168      	cbz	r0, 800a61c <geometry_msgs__msg__Twist__init+0x38>
 800a600:	4620      	mov	r0, r4
 800a602:	bd70      	pop	{r4, r5, r6, pc}
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f821 	bl	800a64c <geometry_msgs__msg__Vector3__fini>
 800a60a:	f105 0018 	add.w	r0, r5, #24
 800a60e:	f000 f81d 	bl	800a64c <geometry_msgs__msg__Vector3__fini>
 800a612:	4620      	mov	r0, r4
 800a614:	bd70      	pop	{r4, r5, r6, pc}
 800a616:	4604      	mov	r4, r0
 800a618:	4620      	mov	r0, r4
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 f815 	bl	800a64c <geometry_msgs__msg__Vector3__fini>
 800a622:	4630      	mov	r0, r6
 800a624:	f000 f812 	bl	800a64c <geometry_msgs__msg__Vector3__fini>
 800a628:	e7ea      	b.n	800a600 <geometry_msgs__msg__Twist__init+0x1c>
 800a62a:	bf00      	nop

0800a62c <geometry_msgs__msg__Twist__fini>:
 800a62c:	b148      	cbz	r0, 800a642 <geometry_msgs__msg__Twist__fini+0x16>
 800a62e:	b510      	push	{r4, lr}
 800a630:	4604      	mov	r4, r0
 800a632:	f000 f80b 	bl	800a64c <geometry_msgs__msg__Vector3__fini>
 800a636:	f104 0018 	add.w	r0, r4, #24
 800a63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63e:	f000 b805 	b.w	800a64c <geometry_msgs__msg__Vector3__fini>
 800a642:	4770      	bx	lr

0800a644 <geometry_msgs__msg__Vector3__init>:
 800a644:	3800      	subs	r0, #0
 800a646:	bf18      	it	ne
 800a648:	2001      	movne	r0, #1
 800a64a:	4770      	bx	lr

0800a64c <geometry_msgs__msg__Vector3__fini>:
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop

0800a650 <uxr_buffer_delete_entity>:
 800a650:	b510      	push	{r4, lr}
 800a652:	2300      	movs	r3, #0
 800a654:	b08e      	sub	sp, #56	@ 0x38
 800a656:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a65a:	2303      	movs	r3, #3
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	2204      	movs	r2, #4
 800a660:	ab06      	add	r3, sp, #24
 800a662:	4604      	mov	r4, r0
 800a664:	9103      	str	r1, [sp, #12]
 800a666:	f001 f951 	bl	800b90c <uxr_prepare_stream_to_write_submessage>
 800a66a:	b918      	cbnz	r0, 800a674 <uxr_buffer_delete_entity+0x24>
 800a66c:	4604      	mov	r4, r0
 800a66e:	4620      	mov	r0, r4
 800a670:	b00e      	add	sp, #56	@ 0x38
 800a672:	bd10      	pop	{r4, pc}
 800a674:	9902      	ldr	r1, [sp, #8]
 800a676:	aa05      	add	r2, sp, #20
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 fa7d 	bl	800bb78 <uxr_init_base_object_request>
 800a67e:	a905      	add	r1, sp, #20
 800a680:	4604      	mov	r4, r0
 800a682:	a806      	add	r0, sp, #24
 800a684:	f002 fcce 	bl	800d024 <uxr_serialize_DELETE_Payload>
 800a688:	4620      	mov	r0, r4
 800a68a:	b00e      	add	sp, #56	@ 0x38
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	bf00      	nop

0800a690 <uxr_common_create_entity>:
 800a690:	b510      	push	{r4, lr}
 800a692:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a696:	b08c      	sub	sp, #48	@ 0x30
 800a698:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a69c:	f1bc 0f01 	cmp.w	ip, #1
 800a6a0:	bf0c      	ite	eq
 800a6a2:	f003 0201 	andeq.w	r2, r3, #1
 800a6a6:	2200      	movne	r2, #0
 800a6a8:	330e      	adds	r3, #14
 800a6aa:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800a6ae:	9101      	str	r1, [sp, #4]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	9903      	ldr	r1, [sp, #12]
 800a6b8:	ab04      	add	r3, sp, #16
 800a6ba:	b292      	uxth	r2, r2
 800a6bc:	4604      	mov	r4, r0
 800a6be:	f001 f925 	bl	800b90c <uxr_prepare_stream_to_write_submessage>
 800a6c2:	b918      	cbnz	r0, 800a6cc <uxr_common_create_entity+0x3c>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	b00c      	add	sp, #48	@ 0x30
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	9902      	ldr	r1, [sp, #8]
 800a6ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 fa51 	bl	800bb78 <uxr_init_base_object_request>
 800a6d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6d8:	4604      	mov	r4, r0
 800a6da:	a804      	add	r0, sp, #16
 800a6dc:	f002 fbfe 	bl	800cedc <uxr_serialize_CREATE_Payload>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	b00c      	add	sp, #48	@ 0x30
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop

0800a6e8 <uxr_buffer_create_participant_bin>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800a6ee:	ac11      	add	r4, sp, #68	@ 0x44
 800a6f0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a6fa:	7223      	strb	r3, [r4, #8]
 800a6fc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800a6fe:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800a702:	2201      	movs	r2, #1
 800a704:	2100      	movs	r1, #0
 800a706:	4605      	mov	r5, r0
 800a708:	7122      	strb	r2, [r4, #4]
 800a70a:	f88d 1014 	strb.w	r1, [sp, #20]
 800a70e:	b1cb      	cbz	r3, 800a744 <uxr_buffer_create_participant_bin+0x5c>
 800a710:	f88d 201c 	strb.w	r2, [sp, #28]
 800a714:	9308      	str	r3, [sp, #32]
 800a716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a71a:	a915      	add	r1, sp, #84	@ 0x54
 800a71c:	a809      	add	r0, sp, #36	@ 0x24
 800a71e:	f7fe f8c7 	bl	80088b0 <ucdr_init_buffer>
 800a722:	a905      	add	r1, sp, #20
 800a724:	a809      	add	r0, sp, #36	@ 0x24
 800a726:	f001 ffbb 	bl	800c6a0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a72a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a72c:	9600      	str	r6, [sp, #0]
 800a72e:	9401      	str	r4, [sp, #4]
 800a730:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a734:	60e3      	str	r3, [r4, #12]
 800a736:	4628      	mov	r0, r5
 800a738:	b29b      	uxth	r3, r3
 800a73a:	f7ff ffa9 	bl	800a690 <uxr_common_create_entity>
 800a73e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	f88d 301c 	strb.w	r3, [sp, #28]
 800a748:	e7e5      	b.n	800a716 <uxr_buffer_create_participant_bin+0x2e>
 800a74a:	bf00      	nop

0800a74c <uxr_buffer_create_topic_bin>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800a752:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a756:	9105      	str	r1, [sp, #20]
 800a758:	4605      	mov	r5, r0
 800a75a:	a997      	add	r1, sp, #604	@ 0x25c
 800a75c:	4618      	mov	r0, r3
 800a75e:	2302      	movs	r3, #2
 800a760:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800a764:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800a768:	f000 f996 	bl	800aa98 <uxr_object_id_to_raw>
 800a76c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800a76e:	9306      	str	r3, [sp, #24]
 800a770:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800a772:	930a      	str	r3, [sp, #40]	@ 0x28
 800a774:	2303      	movs	r3, #3
 800a776:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a77a:	2301      	movs	r3, #1
 800a77c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a780:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a784:	a917      	add	r1, sp, #92	@ 0x5c
 800a786:	2300      	movs	r3, #0
 800a788:	a80b      	add	r0, sp, #44	@ 0x2c
 800a78a:	f88d 301c 	strb.w	r3, [sp, #28]
 800a78e:	f7fe f88f 	bl	80088b0 <ucdr_init_buffer>
 800a792:	a906      	add	r1, sp, #24
 800a794:	a80b      	add	r0, sp, #44	@ 0x2c
 800a796:	f001 ffa5 	bl	800c6e4 <uxr_serialize_OBJK_Topic_Binary>
 800a79a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a79e:	ac13      	add	r4, sp, #76	@ 0x4c
 800a7a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a7a4:	9600      	str	r6, [sp, #0]
 800a7a6:	9401      	str	r4, [sp, #4]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f7ff ff70 	bl	800a690 <uxr_common_create_entity>
 800a7b0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	bf00      	nop

0800a7b8 <uxr_buffer_create_publisher_bin>:
 800a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ba:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800a7be:	4605      	mov	r5, r0
 800a7c0:	9105      	str	r1, [sp, #20]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	2603      	movs	r6, #3
 800a7c6:	a992      	add	r1, sp, #584	@ 0x248
 800a7c8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a7cc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800a7d0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800a7d4:	f000 f960 	bl	800aa98 <uxr_object_id_to_raw>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7de:	a912      	add	r1, sp, #72	@ 0x48
 800a7e0:	a806      	add	r0, sp, #24
 800a7e2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800a7e6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800a7ea:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800a7ee:	f7fe f85f 	bl	80088b0 <ucdr_init_buffer>
 800a7f2:	a993      	add	r1, sp, #588	@ 0x24c
 800a7f4:	a806      	add	r0, sp, #24
 800a7f6:	f002 f829 	bl	800c84c <uxr_serialize_OBJK_Publisher_Binary>
 800a7fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7fe:	ac0e      	add	r4, sp, #56	@ 0x38
 800a800:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a804:	9700      	str	r7, [sp, #0]
 800a806:	9401      	str	r4, [sp, #4]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4628      	mov	r0, r5
 800a80c:	f7ff ff40 	bl	800a690 <uxr_common_create_entity>
 800a810:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a816:	bf00      	nop

0800a818 <uxr_buffer_create_subscriber_bin>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800a81e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a822:	9105      	str	r1, [sp, #20]
 800a824:	4605      	mov	r5, r0
 800a826:	a992      	add	r1, sp, #584	@ 0x248
 800a828:	4618      	mov	r0, r3
 800a82a:	2304      	movs	r3, #4
 800a82c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800a830:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800a834:	f000 f930 	bl	800aa98 <uxr_object_id_to_raw>
 800a838:	2300      	movs	r3, #0
 800a83a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a83e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800a842:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800a846:	a912      	add	r1, sp, #72	@ 0x48
 800a848:	2303      	movs	r3, #3
 800a84a:	a806      	add	r0, sp, #24
 800a84c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800a850:	f7fe f82e 	bl	80088b0 <ucdr_init_buffer>
 800a854:	a993      	add	r1, sp, #588	@ 0x24c
 800a856:	a806      	add	r0, sp, #24
 800a858:	f002 f8a8 	bl	800c9ac <uxr_serialize_OBJK_Subscriber_Binary>
 800a85c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a85e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a860:	ac0e      	add	r4, sp, #56	@ 0x38
 800a862:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a866:	9600      	str	r6, [sp, #0]
 800a868:	9401      	str	r4, [sp, #4]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	4628      	mov	r0, r5
 800a86e:	f7ff ff0f 	bl	800a690 <uxr_common_create_entity>
 800a872:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800a876:	bd70      	pop	{r4, r5, r6, pc}

0800a878 <uxr_buffer_create_datawriter_bin>:
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a880:	ac1d      	add	r4, sp, #116	@ 0x74
 800a882:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a886:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800a88a:	9105      	str	r1, [sp, #20]
 800a88c:	4606      	mov	r6, r0
 800a88e:	a9a1      	add	r1, sp, #644	@ 0x284
 800a890:	4618      	mov	r0, r3
 800a892:	2305      	movs	r3, #5
 800a894:	7123      	strb	r3, [r4, #4]
 800a896:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800a89a:	2703      	movs	r7, #3
 800a89c:	f000 f8fc 	bl	800aa98 <uxr_object_id_to_raw>
 800a8a0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800a8a2:	7227      	strb	r7, [r4, #8]
 800a8a4:	a90e      	add	r1, sp, #56	@ 0x38
 800a8a6:	f000 f8f7 	bl	800aa98 <uxr_object_id_to_raw>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800a8b0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800a8b4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800a8b8:	3d00      	subs	r5, #0
 800a8ba:	bf18      	it	ne
 800a8bc:	2501      	movne	r5, #1
 800a8be:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800a8c2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800a8c6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a8ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800a8d4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a8d8:	bb8a      	cbnz	r2, 800a93e <uxr_buffer_create_datawriter_bin+0xc6>
 800a8da:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a8de:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800a8e2:	f04f 0c13 	mov.w	ip, #19
 800a8e6:	250b      	movs	r5, #11
 800a8e8:	2221      	movs	r2, #33	@ 0x21
 800a8ea:	2111      	movs	r1, #17
 800a8ec:	2009      	movs	r0, #9
 800a8ee:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800a8f2:	b923      	cbnz	r3, 800a8fe <uxr_buffer_create_datawriter_bin+0x86>
 800a8f4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800a8f8:	4672      	mov	r2, lr
 800a8fa:	4661      	mov	r1, ip
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800a902:	2b01      	cmp	r3, #1
 800a904:	d025      	beq.n	800a952 <uxr_buffer_create_datawriter_bin+0xda>
 800a906:	2b03      	cmp	r3, #3
 800a908:	d029      	beq.n	800a95e <uxr_buffer_create_datawriter_bin+0xe6>
 800a90a:	b32b      	cbz	r3, 800a958 <uxr_buffer_create_datawriter_bin+0xe0>
 800a90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a910:	a921      	add	r1, sp, #132	@ 0x84
 800a912:	a806      	add	r0, sp, #24
 800a914:	f7fd ffcc 	bl	80088b0 <ucdr_init_buffer>
 800a918:	a90e      	add	r1, sp, #56	@ 0x38
 800a91a:	a806      	add	r0, sp, #24
 800a91c:	f002 f8f8 	bl	800cb10 <uxr_serialize_OBJK_DataWriter_Binary>
 800a920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a922:	f8cd 8000 	str.w	r8, [sp]
 800a926:	9401      	str	r4, [sp, #4]
 800a928:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a92c:	60e3      	str	r3, [r4, #12]
 800a92e:	4630      	mov	r0, r6
 800a930:	b29b      	uxth	r3, r3
 800a932:	f7ff fead 	bl	800a690 <uxr_common_create_entity>
 800a936:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800a942:	f04f 0c12 	mov.w	ip, #18
 800a946:	250a      	movs	r5, #10
 800a948:	2220      	movs	r2, #32
 800a94a:	2110      	movs	r1, #16
 800a94c:	2008      	movs	r0, #8
 800a94e:	2702      	movs	r7, #2
 800a950:	e7cd      	b.n	800a8ee <uxr_buffer_create_datawriter_bin+0x76>
 800a952:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800a956:	e7d9      	b.n	800a90c <uxr_buffer_create_datawriter_bin+0x94>
 800a958:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800a95c:	e7d6      	b.n	800a90c <uxr_buffer_create_datawriter_bin+0x94>
 800a95e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800a962:	e7d3      	b.n	800a90c <uxr_buffer_create_datawriter_bin+0x94>

0800a964 <uxr_buffer_create_datareader_bin>:
 800a964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a968:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800a96c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a96e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a972:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800a976:	9105      	str	r1, [sp, #20]
 800a978:	4606      	mov	r6, r0
 800a97a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800a97c:	4618      	mov	r0, r3
 800a97e:	2306      	movs	r3, #6
 800a980:	7123      	strb	r3, [r4, #4]
 800a982:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800a986:	2703      	movs	r7, #3
 800a988:	f000 f886 	bl	800aa98 <uxr_object_id_to_raw>
 800a98c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800a98e:	7227      	strb	r7, [r4, #8]
 800a990:	a90e      	add	r1, sp, #56	@ 0x38
 800a992:	f000 f881 	bl	800aa98 <uxr_object_id_to_raw>
 800a996:	2300      	movs	r3, #0
 800a998:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800a99c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800a9a0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800a9a4:	3d00      	subs	r5, #0
 800a9a6:	bf18      	it	ne
 800a9a8:	2501      	movne	r5, #1
 800a9aa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800a9ae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800a9b2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800a9b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800a9ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a9be:	2301      	movs	r3, #1
 800a9c0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800a9c4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a9c8:	bb8a      	cbnz	r2, 800aa2e <uxr_buffer_create_datareader_bin+0xca>
 800a9ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800a9ce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800a9d2:	f04f 0c13 	mov.w	ip, #19
 800a9d6:	250b      	movs	r5, #11
 800a9d8:	2221      	movs	r2, #33	@ 0x21
 800a9da:	2111      	movs	r1, #17
 800a9dc:	2009      	movs	r0, #9
 800a9de:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800a9e2:	b923      	cbnz	r3, 800a9ee <uxr_buffer_create_datareader_bin+0x8a>
 800a9e4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800a9e8:	4672      	mov	r2, lr
 800a9ea:	4661      	mov	r1, ip
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d025      	beq.n	800aa42 <uxr_buffer_create_datareader_bin+0xde>
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d029      	beq.n	800aa4e <uxr_buffer_create_datareader_bin+0xea>
 800a9fa:	b32b      	cbz	r3, 800aa48 <uxr_buffer_create_datareader_bin+0xe4>
 800a9fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa00:	a923      	add	r1, sp, #140	@ 0x8c
 800aa02:	a806      	add	r0, sp, #24
 800aa04:	f7fd ff54 	bl	80088b0 <ucdr_init_buffer>
 800aa08:	a90e      	add	r1, sp, #56	@ 0x38
 800aa0a:	a806      	add	r0, sp, #24
 800aa0c:	f002 f844 	bl	800ca98 <uxr_serialize_OBJK_DataReader_Binary>
 800aa10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa12:	f8cd 8000 	str.w	r8, [sp]
 800aa16:	9401      	str	r4, [sp, #4]
 800aa18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800aa1c:	60e3      	str	r3, [r4, #12]
 800aa1e:	4630      	mov	r0, r6
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	f7ff fe35 	bl	800a690 <uxr_common_create_entity>
 800aa26:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800aa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800aa32:	f04f 0c12 	mov.w	ip, #18
 800aa36:	250a      	movs	r5, #10
 800aa38:	2220      	movs	r2, #32
 800aa3a:	2110      	movs	r1, #16
 800aa3c:	2008      	movs	r0, #8
 800aa3e:	2702      	movs	r7, #2
 800aa40:	e7cd      	b.n	800a9de <uxr_buffer_create_datareader_bin+0x7a>
 800aa42:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800aa46:	e7d9      	b.n	800a9fc <uxr_buffer_create_datareader_bin+0x98>
 800aa48:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800aa4c:	e7d6      	b.n	800a9fc <uxr_buffer_create_datareader_bin+0x98>
 800aa4e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800aa52:	e7d3      	b.n	800a9fc <uxr_buffer_create_datareader_bin+0x98>

0800aa54 <uxr_object_id>:
 800aa54:	b082      	sub	sp, #8
 800aa56:	2300      	movs	r3, #0
 800aa58:	f88d 1006 	strb.w	r1, [sp, #6]
 800aa5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa60:	f360 030f 	bfi	r3, r0, #0, #16
 800aa64:	f362 431f 	bfi	r3, r2, #16, #16
 800aa68:	4618      	mov	r0, r3
 800aa6a:	b002      	add	sp, #8
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop

0800aa70 <uxr_object_id_from_raw>:
 800aa70:	7843      	ldrb	r3, [r0, #1]
 800aa72:	7801      	ldrb	r1, [r0, #0]
 800aa74:	b082      	sub	sp, #8
 800aa76:	f003 020f 	and.w	r2, r3, #15
 800aa7a:	f88d 2006 	strb.w	r2, [sp, #6]
 800aa7e:	091b      	lsrs	r3, r3, #4
 800aa80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa84:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f363 000f 	bfi	r0, r3, #0, #16
 800aa8e:	f362 401f 	bfi	r0, r2, #16, #16
 800aa92:	b002      	add	sp, #8
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop

0800aa98 <uxr_object_id_to_raw>:
 800aa98:	4602      	mov	r2, r0
 800aa9a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800aaa4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800aaa8:	f881 c000 	strb.w	ip, [r1]
 800aaac:	7048      	strb	r0, [r1, #1]
 800aaae:	b002      	add	sp, #8
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop

0800aab4 <on_get_fragmentation_info>:
 800aab4:	b500      	push	{lr}
 800aab6:	b08b      	sub	sp, #44	@ 0x2c
 800aab8:	4601      	mov	r1, r0
 800aaba:	2204      	movs	r2, #4
 800aabc:	a802      	add	r0, sp, #8
 800aabe:	f7fd fef7 	bl	80088b0 <ucdr_init_buffer>
 800aac2:	f10d 0305 	add.w	r3, sp, #5
 800aac6:	f10d 0206 	add.w	r2, sp, #6
 800aaca:	a901      	add	r1, sp, #4
 800aacc:	a802      	add	r0, sp, #8
 800aace:	f001 f9d5 	bl	800be7c <uxr_read_submessage_header>
 800aad2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aad6:	2b0d      	cmp	r3, #13
 800aad8:	d003      	beq.n	800aae2 <on_get_fragmentation_info+0x2e>
 800aada:	2000      	movs	r0, #0
 800aadc:	b00b      	add	sp, #44	@ 0x2c
 800aade:	f85d fb04 	ldr.w	pc, [sp], #4
 800aae2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aae6:	f013 0f02 	tst.w	r3, #2
 800aaea:	bf14      	ite	ne
 800aaec:	2002      	movne	r0, #2
 800aaee:	2001      	moveq	r0, #1
 800aaf0:	b00b      	add	sp, #44	@ 0x2c
 800aaf2:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaf6:	bf00      	nop

0800aaf8 <read_submessage_get_info>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	2500      	movs	r5, #0
 800aafc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ab00:	4604      	mov	r4, r0
 800ab02:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ab06:	460e      	mov	r6, r1
 800ab08:	a810      	add	r0, sp, #64	@ 0x40
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ab10:	f009 fe0e 	bl	8014730 <memset>
 800ab14:	a903      	add	r1, sp, #12
 800ab16:	4630      	mov	r0, r6
 800ab18:	f002 fa70 	bl	800cffc <uxr_deserialize_GET_INFO_Payload>
 800ab1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ab20:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ab24:	4620      	mov	r0, r4
 800ab26:	f001 f81f 	bl	800bb68 <uxr_session_header_offset>
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	9000      	str	r0, [sp, #0]
 800ab2e:	220c      	movs	r2, #12
 800ab30:	a905      	add	r1, sp, #20
 800ab32:	a808      	add	r0, sp, #32
 800ab34:	f7fd feaa 	bl	800888c <ucdr_init_buffer_origin_offset>
 800ab38:	a910      	add	r1, sp, #64	@ 0x40
 800ab3a:	a808      	add	r0, sp, #32
 800ab3c:	f002 fad0 	bl	800d0e0 <uxr_serialize_INFO_Payload>
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	462a      	mov	r2, r5
 800ab44:	4629      	mov	r1, r5
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 ffb8 	bl	800babc <uxr_stamp_session_header>
 800ab4c:	a808      	add	r0, sp, #32
 800ab4e:	f7fd fedb 	bl	8008908 <ucdr_buffer_length>
 800ab52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ab54:	4602      	mov	r2, r0
 800ab56:	a905      	add	r1, sp, #20
 800ab58:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ab5c:	47a0      	blx	r4
 800ab5e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ab62:	bd70      	pop	{r4, r5, r6, pc}

0800ab64 <write_submessage_acknack.isra.0>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	b092      	sub	sp, #72	@ 0x48
 800ab68:	4605      	mov	r5, r0
 800ab6a:	460e      	mov	r6, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	f000 fffb 	bl	800bb68 <uxr_session_header_offset>
 800ab72:	a905      	add	r1, sp, #20
 800ab74:	9000      	str	r0, [sp, #0]
 800ab76:	2300      	movs	r3, #0
 800ab78:	a80a      	add	r0, sp, #40	@ 0x28
 800ab7a:	2211      	movs	r2, #17
 800ab7c:	f7fd fe86 	bl	800888c <ucdr_init_buffer_origin_offset>
 800ab80:	2218      	movs	r2, #24
 800ab82:	fb02 5404 	mla	r4, r2, r4, r5
 800ab86:	2300      	movs	r3, #0
 800ab88:	2205      	movs	r2, #5
 800ab8a:	3450      	adds	r4, #80	@ 0x50
 800ab8c:	210a      	movs	r1, #10
 800ab8e:	a80a      	add	r0, sp, #40	@ 0x28
 800ab90:	f001 f95a 	bl	800be48 <uxr_buffer_submessage_header>
 800ab94:	a903      	add	r1, sp, #12
 800ab96:	4620      	mov	r0, r4
 800ab98:	f007 fc16 	bl	80123c8 <uxr_compute_acknack>
 800ab9c:	ba40      	rev16	r0, r0
 800ab9e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800aba2:	a903      	add	r1, sp, #12
 800aba4:	a80a      	add	r0, sp, #40	@ 0x28
 800aba6:	f88d 6010 	strb.w	r6, [sp, #16]
 800abaa:	f002 fb09 	bl	800d1c0 <uxr_serialize_ACKNACK_Payload>
 800abae:	2200      	movs	r2, #0
 800abb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb2:	4611      	mov	r1, r2
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 ff81 	bl	800babc <uxr_stamp_session_header>
 800abba:	a80a      	add	r0, sp, #40	@ 0x28
 800abbc:	f7fd fea4 	bl	8008908 <ucdr_buffer_length>
 800abc0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800abc2:	4602      	mov	r2, r0
 800abc4:	a905      	add	r1, sp, #20
 800abc6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800abca:	47a0      	blx	r4
 800abcc:	b012      	add	sp, #72	@ 0x48
 800abce:	bd70      	pop	{r4, r5, r6, pc}

0800abd0 <uxr_init_session>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ac08 <uxr_init_session+0x38>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800abdc:	4604      	mov	r4, r0
 800abde:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800abe2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800abe6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800abea:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800abee:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800abf2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800abf6:	2181      	movs	r1, #129	@ 0x81
 800abf8:	f000 fecc 	bl	800b994 <uxr_init_session_info>
 800abfc:	f104 0008 	add.w	r0, r4, #8
 800ac00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac04:	f001 b83c 	b.w	800bc80 <uxr_init_stream_storage>
	...

0800ac10 <uxr_set_status_callback>:
 800ac10:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop

0800ac18 <uxr_set_topic_callback>:
 800ac18:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop

0800ac20 <uxr_set_request_callback>:
 800ac20:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <uxr_set_reply_callback>:
 800ac28:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop

0800ac30 <uxr_create_output_best_effort_stream>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	e9cd 2100 	strd	r2, r1, [sp]
 800ac38:	4604      	mov	r4, r0
 800ac3a:	f000 ff95 	bl	800bb68 <uxr_session_header_offset>
 800ac3e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ac42:	4603      	mov	r3, r0
 800ac44:	f104 0008 	add.w	r0, r4, #8
 800ac48:	b004      	add	sp, #16
 800ac4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac4e:	f001 b861 	b.w	800bd14 <uxr_add_output_best_effort_buffer>
 800ac52:	bf00      	nop

0800ac54 <uxr_create_output_reliable_stream>:
 800ac54:	b510      	push	{r4, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	9303      	str	r3, [sp, #12]
 800ac60:	f000 ff82 	bl	800bb68 <uxr_session_header_offset>
 800ac64:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ac68:	9000      	str	r0, [sp, #0]
 800ac6a:	9905      	ldr	r1, [sp, #20]
 800ac6c:	f104 0008 	add.w	r0, r4, #8
 800ac70:	f001 f864 	bl	800bd3c <uxr_add_output_reliable_buffer>
 800ac74:	2200      	movs	r2, #0
 800ac76:	b2c3      	uxtb	r3, r0
 800ac78:	f363 0207 	bfi	r2, r3, #0, #8
 800ac7c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ac80:	f363 220f 	bfi	r2, r3, #8, #8
 800ac84:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ac88:	f363 4217 	bfi	r2, r3, #16, #8
 800ac8c:	0e03      	lsrs	r3, r0, #24
 800ac8e:	f363 621f 	bfi	r2, r3, #24, #8
 800ac92:	4610      	mov	r0, r2
 800ac94:	b008      	add	sp, #32
 800ac96:	bd10      	pop	{r4, pc}

0800ac98 <uxr_create_input_best_effort_stream>:
 800ac98:	b082      	sub	sp, #8
 800ac9a:	3008      	adds	r0, #8
 800ac9c:	b002      	add	sp, #8
 800ac9e:	f001 b867 	b.w	800bd70 <uxr_add_input_best_effort_buffer>
 800aca2:	bf00      	nop

0800aca4 <uxr_create_input_reliable_stream>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	4c0b      	ldr	r4, [pc, #44]	@ (800acd8 <uxr_create_input_reliable_stream+0x34>)
 800acaa:	9400      	str	r4, [sp, #0]
 800acac:	3008      	adds	r0, #8
 800acae:	f001 f875 	bl	800bd9c <uxr_add_input_reliable_buffer>
 800acb2:	2200      	movs	r2, #0
 800acb4:	b2c3      	uxtb	r3, r0
 800acb6:	f363 0207 	bfi	r2, r3, #0, #8
 800acba:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800acbe:	f363 220f 	bfi	r2, r3, #8, #8
 800acc2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800acc6:	f363 4217 	bfi	r2, r3, #16, #8
 800acca:	0e03      	lsrs	r3, r0, #24
 800accc:	f363 621f 	bfi	r2, r3, #24, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	b004      	add	sp, #16
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	bf00      	nop
 800acd8:	0800aab5 	.word	0x0800aab5

0800acdc <uxr_epoch_nanos>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	4604      	mov	r4, r0
 800ace0:	f001 f912 	bl	800bf08 <uxr_nanos>
 800ace4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	eb61 0102 	sbc.w	r1, r1, r2
 800acee:	bd10      	pop	{r4, pc}

0800acf0 <uxr_flash_output_streams>:
 800acf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	7e03      	ldrb	r3, [r0, #24]
 800acf6:	b084      	sub	sp, #16
 800acf8:	4604      	mov	r4, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d035      	beq.n	800ad6a <uxr_flash_output_streams+0x7a>
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	4648      	mov	r0, r9
 800ad04:	f10d 0802 	add.w	r8, sp, #2
 800ad08:	af03      	add	r7, sp, #12
 800ad0a:	ae02      	add	r6, sp, #8
 800ad0c:	e006      	b.n	800ad1c <uxr_flash_output_streams+0x2c>
 800ad0e:	7e23      	ldrb	r3, [r4, #24]
 800ad10:	f109 0901 	add.w	r9, r9, #1
 800ad14:	fa5f f089 	uxtb.w	r0, r9
 800ad18:	4283      	cmp	r3, r0
 800ad1a:	d926      	bls.n	800ad6a <uxr_flash_output_streams+0x7a>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ad24:	f000 ff58 	bl	800bbd8 <uxr_stream_id>
 800ad28:	3508      	adds	r5, #8
 800ad2a:	4684      	mov	ip, r0
 800ad2c:	4643      	mov	r3, r8
 800ad2e:	463a      	mov	r2, r7
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	f8cd c004 	str.w	ip, [sp, #4]
 800ad38:	f007 fbcc 	bl	80124d4 <uxr_prepare_best_effort_buffer_to_send>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d0e6      	beq.n	800ad0e <uxr_flash_output_streams+0x1e>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ad46:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 feb6 	bl	800babc <uxr_stamp_session_header>
 800ad50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ad52:	9a03      	ldr	r2, [sp, #12]
 800ad54:	685d      	ldr	r5, [r3, #4]
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	9902      	ldr	r1, [sp, #8]
 800ad5a:	47a8      	blx	r5
 800ad5c:	f109 0901 	add.w	r9, r9, #1
 800ad60:	7e23      	ldrb	r3, [r4, #24]
 800ad62:	fa5f f089 	uxtb.w	r0, r9
 800ad66:	4283      	cmp	r3, r0
 800ad68:	d8d8      	bhi.n	800ad1c <uxr_flash_output_streams+0x2c>
 800ad6a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ad6e:	b38b      	cbz	r3, 800add4 <uxr_flash_output_streams+0xe4>
 800ad70:	f04f 0900 	mov.w	r9, #0
 800ad74:	f10d 0802 	add.w	r8, sp, #2
 800ad78:	af03      	add	r7, sp, #12
 800ad7a:	ae02      	add	r6, sp, #8
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	2201      	movs	r2, #1
 800ad80:	2102      	movs	r1, #2
 800ad82:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ad86:	f000 ff27 	bl	800bbd8 <uxr_stream_id>
 800ad8a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ad8e:	3520      	adds	r5, #32
 800ad90:	9001      	str	r0, [sp, #4]
 800ad92:	e00d      	b.n	800adb0 <uxr_flash_output_streams+0xc0>
 800ad94:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ad98:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	f000 fe8d 	bl	800babc <uxr_stamp_session_header>
 800ada2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ada4:	9a03      	ldr	r2, [sp, #12]
 800ada6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800adaa:	9902      	ldr	r1, [sp, #8]
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	47d0      	blx	sl
 800adb0:	4643      	mov	r3, r8
 800adb2:	463a      	mov	r2, r7
 800adb4:	4631      	mov	r1, r6
 800adb6:	4628      	mov	r0, r5
 800adb8:	f007 fdaa 	bl	8012910 <uxr_prepare_next_reliable_buffer_to_send>
 800adbc:	4603      	mov	r3, r0
 800adbe:	4620      	mov	r0, r4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e7      	bne.n	800ad94 <uxr_flash_output_streams+0xa4>
 800adc4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800adc8:	f109 0901 	add.w	r9, r9, #1
 800adcc:	fa5f f089 	uxtb.w	r0, r9
 800add0:	4283      	cmp	r3, r0
 800add2:	d8d4      	bhi.n	800ad7e <uxr_flash_output_streams+0x8e>
 800add4:	b004      	add	sp, #16
 800add6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adda:	bf00      	nop

0800addc <read_submessage_info>:
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	460d      	mov	r5, r1
 800ade2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ade6:	4669      	mov	r1, sp
 800ade8:	4607      	mov	r7, r0
 800adea:	4628      	mov	r0, r5
 800adec:	f002 f814 	bl	800ce18 <uxr_deserialize_BaseObjectReply>
 800adf0:	a902      	add	r1, sp, #8
 800adf2:	4604      	mov	r4, r0
 800adf4:	4628      	mov	r0, r5
 800adf6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800adfa:	f7fc fbff 	bl	80075fc <ucdr_deserialize_bool>
 800adfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ae02:	4004      	ands	r4, r0
 800ae04:	b2e4      	uxtb	r4, r4
 800ae06:	b95b      	cbnz	r3, 800ae20 <read_submessage_info+0x44>
 800ae08:	a987      	add	r1, sp, #540	@ 0x21c
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f7fc fbf6 	bl	80075fc <ucdr_deserialize_bool>
 800ae10:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ae14:	4606      	mov	r6, r0
 800ae16:	b94b      	cbnz	r3, 800ae2c <read_submessage_info+0x50>
 800ae18:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae20:	a903      	add	r1, sp, #12
 800ae22:	4628      	mov	r0, r5
 800ae24:	f001 fea0 	bl	800cb68 <uxr_deserialize_ObjectVariant>
 800ae28:	4004      	ands	r4, r0
 800ae2a:	e7ed      	b.n	800ae08 <read_submessage_info+0x2c>
 800ae2c:	a988      	add	r1, sp, #544	@ 0x220
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f7fc fc12 	bl	8007658 <ucdr_deserialize_uint8_t>
 800ae34:	4234      	tst	r4, r6
 800ae36:	d0ef      	beq.n	800ae18 <read_submessage_info+0x3c>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d0ed      	beq.n	800ae18 <read_submessage_info+0x3c>
 800ae3c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ae40:	2b0d      	cmp	r3, #13
 800ae42:	d1e9      	bne.n	800ae18 <read_submessage_info+0x3c>
 800ae44:	a98a      	add	r1, sp, #552	@ 0x228
 800ae46:	4628      	mov	r0, r5
 800ae48:	f7fd f9ac 	bl	80081a4 <ucdr_deserialize_int16_t>
 800ae4c:	b140      	cbz	r0, 800ae60 <read_submessage_info+0x84>
 800ae4e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dd07      	ble.n	800ae66 <read_submessage_info+0x8a>
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	bf14      	ite	ne
 800ae5c:	2001      	movne	r0, #1
 800ae5e:	2002      	moveq	r0, #2
 800ae60:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ae64:	e7d8      	b.n	800ae18 <read_submessage_info+0x3c>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e7fa      	b.n	800ae60 <read_submessage_info+0x84>
 800ae6a:	bf00      	nop

0800ae6c <read_submessage_list>:
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	b097      	sub	sp, #92	@ 0x5c
 800ae72:	4ec1      	ldr	r6, [pc, #772]	@ (800b178 <read_submessage_list+0x30c>)
 800ae74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	f04f 0801 	mov.w	r8, #1
 800ae7e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ae82:	aa0c      	add	r2, sp, #48	@ 0x30
 800ae84:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 fff7 	bl	800be7c <uxr_read_submessage_header>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f000 813e 	beq.w	800b110 <read_submessage_list+0x2a4>
 800ae94:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ae98:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ae9c:	3b02      	subs	r3, #2
 800ae9e:	2b0d      	cmp	r3, #13
 800aea0:	d8ed      	bhi.n	800ae7e <read_submessage_list+0x12>
 800aea2:	a101      	add	r1, pc, #4	@ (adr r1, 800aea8 <read_submessage_list+0x3c>)
 800aea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aea8:	0800b107 	.word	0x0800b107
 800aeac:	0800ae7f 	.word	0x0800ae7f
 800aeb0:	0800b0f7 	.word	0x0800b0f7
 800aeb4:	0800b095 	.word	0x0800b095
 800aeb8:	0800b08b 	.word	0x0800b08b
 800aebc:	0800ae7f 	.word	0x0800ae7f
 800aec0:	0800ae7f 	.word	0x0800ae7f
 800aec4:	0800afeb 	.word	0x0800afeb
 800aec8:	0800af7b 	.word	0x0800af7b
 800aecc:	0800af3b 	.word	0x0800af3b
 800aed0:	0800ae7f 	.word	0x0800ae7f
 800aed4:	0800ae7f 	.word	0x0800ae7f
 800aed8:	0800ae7f 	.word	0x0800ae7f
 800aedc:	0800aee1 	.word	0x0800aee1
 800aee0:	a910      	add	r1, sp, #64	@ 0x40
 800aee2:	4628      	mov	r0, r5
 800aee4:	f002 f9bc 	bl	800d260 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800aee8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800aeec:	f1b9 0f00 	cmp.w	r9, #0
 800aef0:	f000 8116 	beq.w	800b120 <read_submessage_list+0x2b4>
 800aef4:	f001 f808 	bl	800bf08 <uxr_nanos>
 800aef8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800af00:	2100      	movs	r1, #0
 800af02:	468c      	mov	ip, r1
 800af04:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800af08:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800af0c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af0e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800af10:	468c      	mov	ip, r1
 800af12:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800af16:	46e2      	mov	sl, ip
 800af18:	46bc      	mov	ip, r7
 800af1a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800af1e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800af22:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800af26:	e9cd 7100 	strd	r7, r1, [sp]
 800af2a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800af2e:	9106      	str	r1, [sp, #24]
 800af30:	4620      	mov	r0, r4
 800af32:	47c8      	blx	r9
 800af34:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800af38:	e7a1      	b.n	800ae7e <read_submessage_list+0x12>
 800af3a:	a910      	add	r1, sp, #64	@ 0x40
 800af3c:	4628      	mov	r0, r5
 800af3e:	f002 f97d 	bl	800d23c <uxr_deserialize_HEARTBEAT_Payload>
 800af42:	2100      	movs	r1, #0
 800af44:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800af48:	f000 fe70 	bl	800bc2c <uxr_stream_id_from_raw>
 800af4c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800af50:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af52:	4639      	mov	r1, r7
 800af54:	f104 0008 	add.w	r0, r4, #8
 800af58:	f000 ff56 	bl	800be08 <uxr_get_input_reliable_stream>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d08e      	beq.n	800ae7e <read_submessage_list+0x12>
 800af60:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800af64:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800af68:	f007 fa22 	bl	80123b0 <uxr_process_heartbeat>
 800af6c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800af70:	463a      	mov	r2, r7
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff fdf6 	bl	800ab64 <write_submessage_acknack.isra.0>
 800af78:	e781      	b.n	800ae7e <read_submessage_list+0x12>
 800af7a:	a910      	add	r1, sp, #64	@ 0x40
 800af7c:	4628      	mov	r0, r5
 800af7e:	f002 f935 	bl	800d1ec <uxr_deserialize_ACKNACK_Payload>
 800af82:	2100      	movs	r1, #0
 800af84:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800af88:	f000 fe50 	bl	800bc2c <uxr_stream_id_from_raw>
 800af8c:	900d      	str	r0, [sp, #52]	@ 0x34
 800af8e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800af92:	f104 0008 	add.w	r0, r4, #8
 800af96:	f000 ff23 	bl	800bde0 <uxr_get_output_reliable_stream>
 800af9a:	4607      	mov	r7, r0
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f43f af6e 	beq.w	800ae7e <read_submessage_list+0x12>
 800afa2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800afa6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800afaa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800afae:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800afb2:	b289      	uxth	r1, r1
 800afb4:	f007 fd56 	bl	8012a64 <uxr_process_acknack>
 800afb8:	4638      	mov	r0, r7
 800afba:	f007 fd13 	bl	80129e4 <uxr_begin_output_nack_buffer_it>
 800afbe:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800afc2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800afc6:	e006      	b.n	800afd6 <read_submessage_list+0x16a>
 800afc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800afca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800afcc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800afd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	47c8      	blx	r9
 800afd6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800afda:	aa0f      	add	r2, sp, #60	@ 0x3c
 800afdc:	4651      	mov	r1, sl
 800afde:	4638      	mov	r0, r7
 800afe0:	f007 fd02 	bl	80129e8 <uxr_next_reliable_nack_buffer_to_send>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1ef      	bne.n	800afc8 <read_submessage_list+0x15c>
 800afe8:	e749      	b.n	800ae7e <read_submessage_list+0x12>
 800afea:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800afee:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800aff2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800aff6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800affa:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800affe:	4651      	mov	r1, sl
 800b000:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b004:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800b008:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800b00c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800b010:	4628      	mov	r0, r5
 800b012:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800b016:	f001 fe49 	bl	800ccac <uxr_deserialize_BaseObjectRequest>
 800b01a:	4650      	mov	r0, sl
 800b01c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b01e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800b022:	f000 fdc7 	bl	800bbb4 <uxr_parse_base_object_request>
 800b026:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800b02a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b02c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800b030:	9110      	str	r1, [sp, #64]	@ 0x40
 800b032:	3f04      	subs	r7, #4
 800b034:	f009 090e 	and.w	r9, r9, #14
 800b038:	b2bf      	uxth	r7, r7
 800b03a:	f1bb 0f00 	cmp.w	fp, #0
 800b03e:	d006      	beq.n	800b04e <read_submessage_list+0x1e2>
 800b040:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	4652      	mov	r2, sl
 800b048:	2300      	movs	r3, #0
 800b04a:	4620      	mov	r0, r4
 800b04c:	47d8      	blx	fp
 800b04e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800b050:	b16a      	cbz	r2, 800b06e <read_submessage_list+0x202>
 800b052:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b054:	2100      	movs	r1, #0
 800b056:	3802      	subs	r0, #2
 800b058:	e002      	b.n	800b060 <read_submessage_list+0x1f4>
 800b05a:	3101      	adds	r1, #1
 800b05c:	4291      	cmp	r1, r2
 800b05e:	d006      	beq.n	800b06e <read_submessage_list+0x202>
 800b060:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b064:	4553      	cmp	r3, sl
 800b066:	d1f8      	bne.n	800b05a <read_submessage_list+0x1ee>
 800b068:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b06a:	2200      	movs	r2, #0
 800b06c:	545a      	strb	r2, [r3, r1]
 800b06e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800b072:	9102      	str	r1, [sp, #8]
 800b074:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b076:	9101      	str	r1, [sp, #4]
 800b078:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b07a:	9100      	str	r1, [sp, #0]
 800b07c:	464b      	mov	r3, r9
 800b07e:	463a      	mov	r2, r7
 800b080:	4629      	mov	r1, r5
 800b082:	4620      	mov	r0, r4
 800b084:	f007 fdac 	bl	8012be0 <read_submessage_format>
 800b088:	e6f9      	b.n	800ae7e <read_submessage_list+0x12>
 800b08a:	4629      	mov	r1, r5
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff fea5 	bl	800addc <read_submessage_info>
 800b092:	e6f4      	b.n	800ae7e <read_submessage_list+0x12>
 800b094:	2a00      	cmp	r2, #0
 800b096:	d03e      	beq.n	800b116 <read_submessage_list+0x2aa>
 800b098:	a910      	add	r1, sp, #64	@ 0x40
 800b09a:	4628      	mov	r0, r5
 800b09c:	f002 f802 	bl	800d0a4 <uxr_deserialize_STATUS_Payload>
 800b0a0:	a90e      	add	r1, sp, #56	@ 0x38
 800b0a2:	aa0d      	add	r2, sp, #52	@ 0x34
 800b0a4:	a810      	add	r0, sp, #64	@ 0x40
 800b0a6:	f000 fd85 	bl	800bbb4 <uxr_parse_base_object_request>
 800b0aa:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800b0ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0b0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800b0b4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800b0b8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b0ba:	f1ba 0f00 	cmp.w	sl, #0
 800b0be:	d006      	beq.n	800b0ce <read_submessage_list+0x262>
 800b0c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	47d0      	blx	sl
 800b0ce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800b0d0:	2a00      	cmp	r2, #0
 800b0d2:	f43f aed4 	beq.w	800ae7e <read_submessage_list+0x12>
 800b0d6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b0d8:	2100      	movs	r1, #0
 800b0da:	3802      	subs	r0, #2
 800b0dc:	e003      	b.n	800b0e6 <read_submessage_list+0x27a>
 800b0de:	3101      	adds	r1, #1
 800b0e0:	4291      	cmp	r1, r2
 800b0e2:	f43f aecc 	beq.w	800ae7e <read_submessage_list+0x12>
 800b0e6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800b0ea:	42bb      	cmp	r3, r7
 800b0ec:	d1f7      	bne.n	800b0de <read_submessage_list+0x272>
 800b0ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b0f0:	f803 9001 	strb.w	r9, [r3, r1]
 800b0f4:	e6c3      	b.n	800ae7e <read_submessage_list+0x12>
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	f47f aec1 	bne.w	800ae7e <read_submessage_list+0x12>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fc9e 	bl	800ba40 <uxr_read_create_session_status>
 800b104:	e6bb      	b.n	800ae7e <read_submessage_list+0x12>
 800b106:	4629      	mov	r1, r5
 800b108:	4620      	mov	r0, r4
 800b10a:	f7ff fcf5 	bl	800aaf8 <read_submessage_get_info>
 800b10e:	e6b6      	b.n	800ae7e <read_submessage_list+0x12>
 800b110:	b017      	add	sp, #92	@ 0x5c
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	4629      	mov	r1, r5
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fc9d 	bl	800ba58 <uxr_read_delete_session_status>
 800b11e:	e6ae      	b.n	800ae7e <read_submessage_list+0x12>
 800b120:	f000 fef2 	bl	800bf08 <uxr_nanos>
 800b124:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b126:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b128:	464f      	mov	r7, r9
 800b12a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800b12e:	1812      	adds	r2, r2, r0
 800b130:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b132:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800b134:	eb47 0101 	adc.w	r1, r7, r1
 800b138:	464f      	mov	r7, r9
 800b13a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800b13e:	463b      	mov	r3, r7
 800b140:	4684      	mov	ip, r0
 800b142:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800b146:	fbc7 0906 	smlal	r0, r9, r7, r6
 800b14a:	eb1c 0c00 	adds.w	ip, ip, r0
 800b14e:	464f      	mov	r7, r9
 800b150:	eb43 0307 	adc.w	r3, r3, r7
 800b154:	ebb2 0c0c 	subs.w	ip, r2, ip
 800b158:	eb61 0303 	sbc.w	r3, r1, r3
 800b15c:	0fda      	lsrs	r2, r3, #31
 800b15e:	eb12 020c 	adds.w	r2, r2, ip
 800b162:	f143 0300 	adc.w	r3, r3, #0
 800b166:	0852      	lsrs	r2, r2, #1
 800b168:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800b16c:	105b      	asrs	r3, r3, #1
 800b16e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800b172:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800b176:	e6dd      	b.n	800af34 <read_submessage_list+0xc8>
 800b178:	3b9aca00 	.word	0x3b9aca00

0800b17c <listen_message_reliably>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	1e0b      	subs	r3, r1, #0
 800b182:	b09d      	sub	sp, #116	@ 0x74
 800b184:	bfb8      	it	lt
 800b186:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800b18a:	4680      	mov	r8, r0
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	f000 fea1 	bl	800bed4 <uxr_millis>
 800b192:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800b196:	4681      	mov	r9, r0
 800b198:	2a00      	cmp	r2, #0
 800b19a:	f000 80a1 	beq.w	800b2e0 <listen_message_reliably+0x164>
 800b19e:	2600      	movs	r6, #0
 800b1a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b1a4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b1a8:	9303      	str	r3, [sp, #12]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	e00f      	b.n	800b1d0 <listen_message_reliably+0x54>
 800b1b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b1b4:	9903      	ldr	r1, [sp, #12]
 800b1b6:	455a      	cmp	r2, fp
 800b1b8:	f106 0601 	add.w	r6, r6, #1
 800b1bc:	eb73 0101 	sbcs.w	r1, r3, r1
 800b1c0:	b2f0      	uxtb	r0, r6
 800b1c2:	da01      	bge.n	800b1c8 <listen_message_reliably+0x4c>
 800b1c4:	4693      	mov	fp, r2
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800b1cc:	4283      	cmp	r3, r0
 800b1ce:	d960      	bls.n	800b292 <listen_message_reliably+0x116>
 800b1d0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b1d4:	2102      	movs	r1, #2
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f000 fcfe 	bl	800bbd8 <uxr_stream_id>
 800b1dc:	00e4      	lsls	r4, r4, #3
 800b1de:	f104 0520 	add.w	r5, r4, #32
 800b1e2:	4445      	add	r5, r8
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	464a      	mov	r2, r9
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1ee:	f007 fbcf 	bl	8012990 <uxr_update_output_stream_heartbeat_timestamp>
 800b1f2:	eb08 0304 	add.w	r3, r8, r4
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d0da      	beq.n	800b1b0 <listen_message_reliably+0x34>
 800b1fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b1fe:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	4640      	mov	r0, r8
 800b206:	f000 fcaf 	bl	800bb68 <uxr_session_header_offset>
 800b20a:	3501      	adds	r5, #1
 800b20c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800b210:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b214:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800b218:	2300      	movs	r3, #0
 800b21a:	2211      	movs	r2, #17
 800b21c:	9000      	str	r0, [sp, #0]
 800b21e:	a90c      	add	r1, sp, #48	@ 0x30
 800b220:	4650      	mov	r0, sl
 800b222:	f7fd fb33 	bl	800888c <ucdr_init_buffer_origin_offset>
 800b226:	2300      	movs	r3, #0
 800b228:	2205      	movs	r2, #5
 800b22a:	210b      	movs	r1, #11
 800b22c:	4650      	mov	r0, sl
 800b22e:	f000 fe0b 	bl	800be48 <uxr_buffer_submessage_header>
 800b232:	8968      	ldrh	r0, [r5, #10]
 800b234:	2101      	movs	r1, #1
 800b236:	f007 fd9d 	bl	8012d74 <uxr_seq_num_add>
 800b23a:	892b      	ldrh	r3, [r5, #8]
 800b23c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800b240:	4602      	mov	r2, r0
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800b248:	a90a      	add	r1, sp, #40	@ 0x28
 800b24a:	4650      	mov	r0, sl
 800b24c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800b250:	f001 ffe0 	bl	800d214 <uxr_serialize_HEARTBEAT_Payload>
 800b254:	2200      	movs	r2, #0
 800b256:	4611      	mov	r1, r2
 800b258:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b25a:	4640      	mov	r0, r8
 800b25c:	f000 fc2e 	bl	800babc <uxr_stamp_session_header>
 800b260:	4650      	mov	r0, sl
 800b262:	f7fd fb51 	bl	8008908 <ucdr_buffer_length>
 800b266:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b26a:	4602      	mov	r2, r0
 800b26c:	a90c      	add	r1, sp, #48	@ 0x30
 800b26e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b272:	4444      	add	r4, r8
 800b274:	47a8      	blx	r5
 800b276:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800b27a:	9903      	ldr	r1, [sp, #12]
 800b27c:	455a      	cmp	r2, fp
 800b27e:	f106 0601 	add.w	r6, r6, #1
 800b282:	eb73 0101 	sbcs.w	r1, r3, r1
 800b286:	b2f0      	uxtb	r0, r6
 800b288:	db9c      	blt.n	800b1c4 <listen_message_reliably+0x48>
 800b28a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800b28e:	4283      	cmp	r3, r0
 800b290:	d89e      	bhi.n	800b1d0 <listen_message_reliably+0x54>
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b298:	429a      	cmp	r2, r3
 800b29a:	bf08      	it	eq
 800b29c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800b2a0:	d01e      	beq.n	800b2e0 <listen_message_reliably+0x164>
 800b2a2:	ebab 0309 	sub.w	r3, fp, r9
 800b2a6:	9905      	ldr	r1, [sp, #20]
 800b2a8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bf08      	it	eq
 800b2b0:	2301      	moveq	r3, #1
 800b2b2:	4299      	cmp	r1, r3
 800b2b4:	bfa8      	it	ge
 800b2b6:	4619      	movge	r1, r3
 800b2b8:	6894      	ldr	r4, [r2, #8]
 800b2ba:	6810      	ldr	r0, [r2, #0]
 800b2bc:	4689      	mov	r9, r1
 800b2be:	460b      	mov	r3, r1
 800b2c0:	aa08      	add	r2, sp, #32
 800b2c2:	a907      	add	r1, sp, #28
 800b2c4:	47a0      	blx	r4
 800b2c6:	b968      	cbnz	r0, 800b2e4 <listen_message_reliably+0x168>
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	eba3 0309 	sub.w	r3, r3, r9
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	9305      	str	r3, [sp, #20]
 800b2d2:	f73f af5c 	bgt.w	800b18e <listen_message_reliably+0x12>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4620      	mov	r0, r4
 800b2da:	b01d      	add	sp, #116	@ 0x74
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	9b05      	ldr	r3, [sp, #20]
 800b2e2:	e7e0      	b.n	800b2a6 <listen_message_reliably+0x12a>
 800b2e4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	a80c      	add	r0, sp, #48	@ 0x30
 800b2ec:	f7fd fae0 	bl	80088b0 <ucdr_init_buffer>
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	f10d 031a 	add.w	r3, sp, #26
 800b2f6:	aa06      	add	r2, sp, #24
 800b2f8:	a90c      	add	r1, sp, #48	@ 0x30
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	f88d 5018 	strb.w	r5, [sp, #24]
 800b300:	f000 fbf0 	bl	800bae4 <uxr_read_session_header>
 800b304:	b918      	cbnz	r0, 800b30e <listen_message_reliably+0x192>
 800b306:	4620      	mov	r0, r4
 800b308:	b01d      	add	sp, #116	@ 0x74
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	4629      	mov	r1, r5
 800b310:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b314:	f000 fc8a 	bl	800bc2c <uxr_stream_id_from_raw>
 800b318:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800b31c:	2d01      	cmp	r5, #1
 800b31e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800b322:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800b326:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b32a:	d04b      	beq.n	800b3c4 <listen_message_reliably+0x248>
 800b32c:	2d02      	cmp	r5, #2
 800b32e:	d00f      	beq.n	800b350 <listen_message_reliably+0x1d4>
 800b330:	2d00      	cmp	r5, #0
 800b332:	d1e8      	bne.n	800b306 <listen_message_reliably+0x18a>
 800b334:	4629      	mov	r1, r5
 800b336:	4628      	mov	r0, r5
 800b338:	f000 fc78 	bl	800bc2c <uxr_stream_id_from_raw>
 800b33c:	a90c      	add	r1, sp, #48	@ 0x30
 800b33e:	4602      	mov	r2, r0
 800b340:	4640      	mov	r0, r8
 800b342:	920a      	str	r2, [sp, #40]	@ 0x28
 800b344:	f7ff fd92 	bl	800ae6c <read_submessage_list>
 800b348:	4620      	mov	r0, r4
 800b34a:	b01d      	add	sp, #116	@ 0x74
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	4631      	mov	r1, r6
 800b352:	f108 0008 	add.w	r0, r8, #8
 800b356:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800b35a:	f000 fd55 	bl	800be08 <uxr_get_input_reliable_stream>
 800b35e:	4607      	mov	r7, r0
 800b360:	b338      	cbz	r0, 800b3b2 <listen_message_reliably+0x236>
 800b362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b364:	9203      	str	r2, [sp, #12]
 800b366:	a80c      	add	r0, sp, #48	@ 0x30
 800b368:	f7fd fad2 	bl	8008910 <ucdr_buffer_remaining>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f10d 0019 	add.w	r0, sp, #25
 800b372:	9000      	str	r0, [sp, #0]
 800b374:	9a03      	ldr	r2, [sp, #12]
 800b376:	4651      	mov	r1, sl
 800b378:	4638      	mov	r0, r7
 800b37a:	f006 ff1f 	bl	80121bc <uxr_receive_reliable_message>
 800b37e:	b1c0      	cbz	r0, 800b3b2 <listen_message_reliably+0x236>
 800b380:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b384:	b393      	cbz	r3, 800b3ec <listen_message_reliably+0x270>
 800b386:	ad14      	add	r5, sp, #80	@ 0x50
 800b388:	f04f 0a02 	mov.w	sl, #2
 800b38c:	e00a      	b.n	800b3a4 <listen_message_reliably+0x228>
 800b38e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800b392:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800b396:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800b39a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b39c:	4629      	mov	r1, r5
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f7ff fd64 	bl	800ae6c <read_submessage_list>
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f006 ff87 	bl	80122bc <uxr_next_input_reliable_buffer_available>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d1ed      	bne.n	800b38e <listen_message_reliably+0x212>
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	f7ff fbd4 	bl	800ab64 <write_submessage_acknack.isra.0>
 800b3bc:	4620      	mov	r0, r4
 800b3be:	b01d      	add	sp, #116	@ 0x74
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	f108 0008 	add.w	r0, r8, #8
 800b3ca:	f000 fd13 	bl	800bdf4 <uxr_get_input_best_effort_stream>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d099      	beq.n	800b306 <listen_message_reliably+0x18a>
 800b3d2:	4651      	mov	r1, sl
 800b3d4:	f006 fe5e 	bl	8012094 <uxr_receive_best_effort_message>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d094      	beq.n	800b306 <listen_message_reliably+0x18a>
 800b3dc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800b3e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3e2:	a90c      	add	r1, sp, #48	@ 0x30
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	f7ff fd41 	bl	800ae6c <read_submessage_list>
 800b3ea:	e78c      	b.n	800b306 <listen_message_reliably+0x18a>
 800b3ec:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800b3f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3f2:	a90c      	add	r1, sp, #48	@ 0x30
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	f7ff fd39 	bl	800ae6c <read_submessage_list>
 800b3fa:	e7c4      	b.n	800b386 <listen_message_reliably+0x20a>

0800b3fc <uxr_run_session_timeout>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	f000 fd67 	bl	800bed4 <uxr_millis>
 800b406:	4606      	mov	r6, r0
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff fc71 	bl	800acf0 <uxr_flash_output_streams>
 800b40e:	4629      	mov	r1, r5
 800b410:	4620      	mov	r0, r4
 800b412:	f7ff feb3 	bl	800b17c <listen_message_reliably>
 800b416:	f000 fd5d 	bl	800bed4 <uxr_millis>
 800b41a:	1b83      	subs	r3, r0, r6
 800b41c:	1ae9      	subs	r1, r5, r3
 800b41e:	2900      	cmp	r1, #0
 800b420:	dcf6      	bgt.n	800b410 <uxr_run_session_timeout+0x14>
 800b422:	f104 0008 	add.w	r0, r4, #8
 800b426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b42a:	f000 bcf7 	b.w	800be1c <uxr_output_streams_confirmed>
 800b42e:	bf00      	nop

0800b430 <uxr_run_session_until_data>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	4604      	mov	r4, r0
 800b434:	460d      	mov	r5, r1
 800b436:	f000 fd4d 	bl	800bed4 <uxr_millis>
 800b43a:	4606      	mov	r6, r0
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7ff fc57 	bl	800acf0 <uxr_flash_output_streams>
 800b442:	2300      	movs	r3, #0
 800b444:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800b448:	4629      	mov	r1, r5
 800b44a:	e005      	b.n	800b458 <uxr_run_session_until_data+0x28>
 800b44c:	f000 fd42 	bl	800bed4 <uxr_millis>
 800b450:	1b83      	subs	r3, r0, r6
 800b452:	1ae9      	subs	r1, r5, r3
 800b454:	2900      	cmp	r1, #0
 800b456:	dd07      	ble.n	800b468 <uxr_run_session_until_data+0x38>
 800b458:	4620      	mov	r0, r4
 800b45a:	f7ff fe8f 	bl	800b17c <listen_message_reliably>
 800b45e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800b462:	2800      	cmp	r0, #0
 800b464:	d0f2      	beq.n	800b44c <uxr_run_session_until_data+0x1c>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
 800b46e:	bf00      	nop

0800b470 <uxr_run_session_until_confirm_delivery>:
 800b470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b474:	4606      	mov	r6, r0
 800b476:	460d      	mov	r5, r1
 800b478:	f000 fd2c 	bl	800bed4 <uxr_millis>
 800b47c:	4607      	mov	r7, r0
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff fc36 	bl	800acf0 <uxr_flash_output_streams>
 800b484:	2d00      	cmp	r5, #0
 800b486:	f106 0808 	add.w	r8, r6, #8
 800b48a:	bfa8      	it	ge
 800b48c:	462c      	movge	r4, r5
 800b48e:	da07      	bge.n	800b4a0 <uxr_run_session_until_confirm_delivery+0x30>
 800b490:	e00e      	b.n	800b4b0 <uxr_run_session_until_confirm_delivery+0x40>
 800b492:	f7ff fe73 	bl	800b17c <listen_message_reliably>
 800b496:	f000 fd1d 	bl	800bed4 <uxr_millis>
 800b49a:	1bc3      	subs	r3, r0, r7
 800b49c:	1aec      	subs	r4, r5, r3
 800b49e:	d407      	bmi.n	800b4b0 <uxr_run_session_until_confirm_delivery+0x40>
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	f000 fcbb 	bl	800be1c <uxr_output_streams_confirmed>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0f0      	beq.n	800b492 <uxr_run_session_until_confirm_delivery+0x22>
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b6:	f000 bcb1 	b.w	800be1c <uxr_output_streams_confirmed>
 800b4ba:	bf00      	nop

0800b4bc <uxr_run_session_until_all_status>:
 800b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	9c08      	ldr	r4, [sp, #32]
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	4691      	mov	r9, r2
 800b4c8:	461d      	mov	r5, r3
 800b4ca:	f7ff fc11 	bl	800acf0 <uxr_flash_output_streams>
 800b4ce:	b124      	cbz	r4, 800b4da <uxr_run_session_until_all_status+0x1e>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	21ff      	movs	r1, #255	@ 0xff
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f009 f92b 	bl	8014730 <memset>
 800b4da:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800b4de:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800b4e0:	f000 fcf8 	bl	800bed4 <uxr_millis>
 800b4e4:	3d01      	subs	r5, #1
 800b4e6:	f1a9 0902 	sub.w	r9, r9, #2
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7ff fe44 	bl	800b17c <listen_message_reliably>
 800b4f4:	f000 fcee 	bl	800bed4 <uxr_millis>
 800b4f8:	eba0 0008 	sub.w	r0, r0, r8
 800b4fc:	1a39      	subs	r1, r7, r0
 800b4fe:	b344      	cbz	r4, 800b552 <uxr_run_session_until_all_status+0x96>
 800b500:	4628      	mov	r0, r5
 800b502:	46ac      	mov	ip, r5
 800b504:	2301      	movs	r3, #1
 800b506:	e002      	b.n	800b50e <uxr_run_session_until_all_status+0x52>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d20d      	bcs.n	800b528 <uxr_run_session_until_all_status+0x6c>
 800b50c:	3301      	adds	r3, #1
 800b50e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800b512:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800b516:	d1f7      	bne.n	800b508 <uxr_run_session_until_all_status+0x4c>
 800b518:	42a3      	cmp	r3, r4
 800b51a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800b51e:	d213      	bcs.n	800b548 <uxr_run_session_until_all_status+0x8c>
 800b520:	2a00      	cmp	r2, #0
 800b522:	d0f3      	beq.n	800b50c <uxr_run_session_until_all_status+0x50>
 800b524:	2900      	cmp	r1, #0
 800b526:	dce2      	bgt.n	800b4ee <uxr_run_session_until_all_status+0x32>
 800b528:	2300      	movs	r3, #0
 800b52a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800b52c:	442c      	add	r4, r5
 800b52e:	e001      	b.n	800b534 <uxr_run_session_until_all_status+0x78>
 800b530:	2b01      	cmp	r3, #1
 800b532:	d812      	bhi.n	800b55a <uxr_run_session_until_all_status+0x9e>
 800b534:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b538:	4284      	cmp	r4, r0
 800b53a:	d1f9      	bne.n	800b530 <uxr_run_session_until_all_status+0x74>
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	bf8c      	ite	hi
 800b540:	2000      	movhi	r0, #0
 800b542:	2001      	movls	r0, #1
 800b544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b548:	2900      	cmp	r1, #0
 800b54a:	dded      	ble.n	800b528 <uxr_run_session_until_all_status+0x6c>
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	d1ce      	bne.n	800b4ee <uxr_run_session_until_all_status+0x32>
 800b550:	e7ea      	b.n	800b528 <uxr_run_session_until_all_status+0x6c>
 800b552:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800b554:	2001      	movs	r0, #1
 800b556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55a:	2000      	movs	r0, #0
 800b55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b560 <wait_session_status>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4604      	mov	r4, r0
 800b566:	b09d      	sub	sp, #116	@ 0x74
 800b568:	20ff      	movs	r0, #255	@ 0xff
 800b56a:	7160      	strb	r0, [r4, #5]
 800b56c:	9303      	str	r3, [sp, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 80b6 	beq.w	800b6e0 <wait_session_status+0x180>
 800b574:	468a      	mov	sl, r1
 800b576:	4691      	mov	r9, r2
 800b578:	f04f 0b00 	mov.w	fp, #0
 800b57c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b57e:	464a      	mov	r2, r9
 800b580:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b584:	4651      	mov	r1, sl
 800b586:	47a8      	blx	r5
 800b588:	f000 fca4 	bl	800bed4 <uxr_millis>
 800b58c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b590:	4605      	mov	r5, r0
 800b592:	e009      	b.n	800b5a8 <wait_session_status+0x48>
 800b594:	f000 fc9e 	bl	800bed4 <uxr_millis>
 800b598:	1b40      	subs	r0, r0, r5
 800b59a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dd40      	ble.n	800b624 <wait_session_status+0xc4>
 800b5a2:	7960      	ldrb	r0, [r4, #5]
 800b5a4:	28ff      	cmp	r0, #255	@ 0xff
 800b5a6:	d145      	bne.n	800b634 <wait_session_status+0xd4>
 800b5a8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b5aa:	a908      	add	r1, sp, #32
 800b5ac:	6896      	ldr	r6, [r2, #8]
 800b5ae:	6810      	ldr	r0, [r2, #0]
 800b5b0:	aa09      	add	r2, sp, #36	@ 0x24
 800b5b2:	47b0      	blx	r6
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d0ed      	beq.n	800b594 <wait_session_status+0x34>
 800b5b8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b5bc:	a80c      	add	r0, sp, #48	@ 0x30
 800b5be:	f7fd f977 	bl	80088b0 <ucdr_init_buffer>
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	f10d 031e 	add.w	r3, sp, #30
 800b5c8:	aa07      	add	r2, sp, #28
 800b5ca:	a90c      	add	r1, sp, #48	@ 0x30
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f88d 601c 	strb.w	r6, [sp, #28]
 800b5d2:	f000 fa87 	bl	800bae4 <uxr_read_session_header>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d0dc      	beq.n	800b594 <wait_session_status+0x34>
 800b5da:	4631      	mov	r1, r6
 800b5dc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b5e0:	f000 fb24 	bl	800bc2c <uxr_stream_id_from_raw>
 800b5e4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b5e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b5ec:	9302      	str	r3, [sp, #8]
 800b5ee:	2f01      	cmp	r7, #1
 800b5f0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800b5f4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b5f8:	d05c      	beq.n	800b6b4 <wait_session_status+0x154>
 800b5fa:	2f02      	cmp	r7, #2
 800b5fc:	d020      	beq.n	800b640 <wait_session_status+0xe0>
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d1c8      	bne.n	800b594 <wait_session_status+0x34>
 800b602:	4639      	mov	r1, r7
 800b604:	4638      	mov	r0, r7
 800b606:	f000 fb11 	bl	800bc2c <uxr_stream_id_from_raw>
 800b60a:	a90c      	add	r1, sp, #48	@ 0x30
 800b60c:	4602      	mov	r2, r0
 800b60e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b610:	4620      	mov	r0, r4
 800b612:	f7ff fc2b 	bl	800ae6c <read_submessage_list>
 800b616:	f000 fc5d 	bl	800bed4 <uxr_millis>
 800b61a:	1b40      	subs	r0, r0, r5
 800b61c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b620:	2b00      	cmp	r3, #0
 800b622:	dcbe      	bgt.n	800b5a2 <wait_session_status+0x42>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	7960      	ldrb	r0, [r4, #5]
 800b628:	f10b 0b01 	add.w	fp, fp, #1
 800b62c:	455b      	cmp	r3, fp
 800b62e:	d001      	beq.n	800b634 <wait_session_status+0xd4>
 800b630:	28ff      	cmp	r0, #255	@ 0xff
 800b632:	d0a3      	beq.n	800b57c <wait_session_status+0x1c>
 800b634:	38ff      	subs	r0, #255	@ 0xff
 800b636:	bf18      	it	ne
 800b638:	2001      	movne	r0, #1
 800b63a:	b01d      	add	sp, #116	@ 0x74
 800b63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b640:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	4631      	mov	r1, r6
 800b648:	f104 0008 	add.w	r0, r4, #8
 800b64c:	f000 fbdc 	bl	800be08 <uxr_get_input_reliable_stream>
 800b650:	4680      	mov	r8, r0
 800b652:	b348      	cbz	r0, 800b6a8 <wait_session_status+0x148>
 800b654:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b656:	9205      	str	r2, [sp, #20]
 800b658:	a80c      	add	r0, sp, #48	@ 0x30
 800b65a:	f7fd f959 	bl	8008910 <ucdr_buffer_remaining>
 800b65e:	4603      	mov	r3, r0
 800b660:	f10d 001d 	add.w	r0, sp, #29
 800b664:	9000      	str	r0, [sp, #0]
 800b666:	9a05      	ldr	r2, [sp, #20]
 800b668:	9902      	ldr	r1, [sp, #8]
 800b66a:	4640      	mov	r0, r8
 800b66c:	f006 fda6 	bl	80121bc <uxr_receive_reliable_message>
 800b670:	b1d0      	cbz	r0, 800b6a8 <wait_session_status+0x148>
 800b672:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d03a      	beq.n	800b6f0 <wait_session_status+0x190>
 800b67a:	9f04      	ldr	r7, [sp, #16]
 800b67c:	e00a      	b.n	800b694 <wait_session_status+0x134>
 800b67e:	f04f 0302 	mov.w	r3, #2
 800b682:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800b686:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b68a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800b68e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b690:	f7ff fbec 	bl	800ae6c <read_submessage_list>
 800b694:	a914      	add	r1, sp, #80	@ 0x50
 800b696:	2204      	movs	r2, #4
 800b698:	4640      	mov	r0, r8
 800b69a:	f006 fe0f 	bl	80122bc <uxr_next_input_reliable_buffer_available>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	a914      	add	r1, sp, #80	@ 0x50
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1ea      	bne.n	800b67e <wait_session_status+0x11e>
 800b6a8:	9904      	ldr	r1, [sp, #16]
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7ff fa59 	bl	800ab64 <write_submessage_acknack.isra.0>
 800b6b2:	e76f      	b.n	800b594 <wait_session_status+0x34>
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	f104 0008 	add.w	r0, r4, #8
 800b6ba:	f000 fb9b 	bl	800bdf4 <uxr_get_input_best_effort_stream>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f43f af68 	beq.w	800b594 <wait_session_status+0x34>
 800b6c4:	9902      	ldr	r1, [sp, #8]
 800b6c6:	f006 fce5 	bl	8012094 <uxr_receive_best_effort_message>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f43f af62 	beq.w	800b594 <wait_session_status+0x34>
 800b6d0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b6d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6d6:	a90c      	add	r1, sp, #48	@ 0x30
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f7ff fbc7 	bl	800ae6c <read_submessage_list>
 800b6de:	e759      	b.n	800b594 <wait_session_status+0x34>
 800b6e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b6e2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b6e6:	47a0      	blx	r4
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	b01d      	add	sp, #116	@ 0x74
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b6f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6f6:	a90c      	add	r1, sp, #48	@ 0x30
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7ff fbb7 	bl	800ae6c <read_submessage_list>
 800b6fe:	e7bc      	b.n	800b67a <wait_session_status+0x11a>

0800b700 <uxr_delete_session_retries>:
 800b700:	b530      	push	{r4, r5, lr}
 800b702:	b08f      	sub	sp, #60	@ 0x3c
 800b704:	4604      	mov	r4, r0
 800b706:	460d      	mov	r5, r1
 800b708:	f000 fa2e 	bl	800bb68 <uxr_session_header_offset>
 800b70c:	2300      	movs	r3, #0
 800b70e:	2210      	movs	r2, #16
 800b710:	9000      	str	r0, [sp, #0]
 800b712:	a902      	add	r1, sp, #8
 800b714:	a806      	add	r0, sp, #24
 800b716:	f7fd f8b9 	bl	800888c <ucdr_init_buffer_origin_offset>
 800b71a:	a906      	add	r1, sp, #24
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 f973 	bl	800ba08 <uxr_buffer_delete_session>
 800b722:	2200      	movs	r2, #0
 800b724:	4611      	mov	r1, r2
 800b726:	9b06      	ldr	r3, [sp, #24]
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 f9c7 	bl	800babc <uxr_stamp_session_header>
 800b72e:	a806      	add	r0, sp, #24
 800b730:	f7fd f8ea 	bl	8008908 <ucdr_buffer_length>
 800b734:	462b      	mov	r3, r5
 800b736:	4602      	mov	r2, r0
 800b738:	a902      	add	r1, sp, #8
 800b73a:	4620      	mov	r0, r4
 800b73c:	f7ff ff10 	bl	800b560 <wait_session_status>
 800b740:	b118      	cbz	r0, 800b74a <uxr_delete_session_retries+0x4a>
 800b742:	7960      	ldrb	r0, [r4, #5]
 800b744:	fab0 f080 	clz	r0, r0
 800b748:	0940      	lsrs	r0, r0, #5
 800b74a:	b00f      	add	sp, #60	@ 0x3c
 800b74c:	bd30      	pop	{r4, r5, pc}
 800b74e:	bf00      	nop

0800b750 <uxr_create_session>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	f100 0b08 	add.w	fp, r0, #8
 800b758:	b0ab      	sub	sp, #172	@ 0xac
 800b75a:	4604      	mov	r4, r0
 800b75c:	4658      	mov	r0, fp
 800b75e:	f000 fa99 	bl	800bc94 <uxr_reset_stream_storage>
 800b762:	4620      	mov	r0, r4
 800b764:	f000 fa00 	bl	800bb68 <uxr_session_header_offset>
 800b768:	2300      	movs	r3, #0
 800b76a:	9000      	str	r0, [sp, #0]
 800b76c:	221c      	movs	r2, #28
 800b76e:	a90b      	add	r1, sp, #44	@ 0x2c
 800b770:	a812      	add	r0, sp, #72	@ 0x48
 800b772:	f7fd f88b 	bl	800888c <ucdr_init_buffer_origin_offset>
 800b776:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b778:	8a1a      	ldrh	r2, [r3, #16]
 800b77a:	3a04      	subs	r2, #4
 800b77c:	b292      	uxth	r2, r2
 800b77e:	a912      	add	r1, sp, #72	@ 0x48
 800b780:	4620      	mov	r0, r4
 800b782:	f000 f917 	bl	800b9b4 <uxr_buffer_create_session>
 800b786:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 f983 	bl	800ba94 <uxr_stamp_create_session_header>
 800b78e:	a812      	add	r0, sp, #72	@ 0x48
 800b790:	f7fd f8ba 	bl	8008908 <ucdr_buffer_length>
 800b794:	23ff      	movs	r3, #255	@ 0xff
 800b796:	7163      	strb	r3, [r4, #5]
 800b798:	230a      	movs	r3, #10
 800b79a:	46da      	mov	sl, fp
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	4683      	mov	fp, r0
 800b7a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b7a2:	465a      	mov	r2, fp
 800b7a4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b7a8:	a90b      	add	r1, sp, #44	@ 0x2c
 800b7aa:	47a8      	blx	r5
 800b7ac:	f000 fb92 	bl	800bed4 <uxr_millis>
 800b7b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	e009      	b.n	800b7cc <uxr_create_session+0x7c>
 800b7b8:	f000 fb8c 	bl	800bed4 <uxr_millis>
 800b7bc:	1b40      	subs	r0, r0, r5
 800b7be:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	7962      	ldrb	r2, [r4, #5]
 800b7c6:	dd38      	ble.n	800b83a <uxr_create_session+0xea>
 800b7c8:	2aff      	cmp	r2, #255	@ 0xff
 800b7ca:	d13c      	bne.n	800b846 <uxr_create_session+0xf6>
 800b7cc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b7ce:	a907      	add	r1, sp, #28
 800b7d0:	6896      	ldr	r6, [r2, #8]
 800b7d2:	6810      	ldr	r0, [r2, #0]
 800b7d4:	aa08      	add	r2, sp, #32
 800b7d6:	47b0      	blx	r6
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0ed      	beq.n	800b7b8 <uxr_create_session+0x68>
 800b7dc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b7e0:	a81a      	add	r0, sp, #104	@ 0x68
 800b7e2:	f7fd f865 	bl	80088b0 <ucdr_init_buffer>
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	f10d 031a 	add.w	r3, sp, #26
 800b7ec:	aa06      	add	r2, sp, #24
 800b7ee:	a91a      	add	r1, sp, #104	@ 0x68
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f88d 6018 	strb.w	r6, [sp, #24]
 800b7f6:	f000 f975 	bl	800bae4 <uxr_read_session_header>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0dc      	beq.n	800b7b8 <uxr_create_session+0x68>
 800b7fe:	4631      	mov	r1, r6
 800b800:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b804:	f000 fa12 	bl	800bc2c <uxr_stream_id_from_raw>
 800b808:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b80c:	2e01      	cmp	r6, #1
 800b80e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800b812:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b816:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800b81a:	d053      	beq.n	800b8c4 <uxr_create_session+0x174>
 800b81c:	2e02      	cmp	r6, #2
 800b81e:	d018      	beq.n	800b852 <uxr_create_session+0x102>
 800b820:	2e00      	cmp	r6, #0
 800b822:	d1c9      	bne.n	800b7b8 <uxr_create_session+0x68>
 800b824:	4631      	mov	r1, r6
 800b826:	4630      	mov	r0, r6
 800b828:	f000 fa00 	bl	800bc2c <uxr_stream_id_from_raw>
 800b82c:	a91a      	add	r1, sp, #104	@ 0x68
 800b82e:	4602      	mov	r2, r0
 800b830:	900a      	str	r0, [sp, #40]	@ 0x28
 800b832:	4620      	mov	r0, r4
 800b834:	f7ff fb1a 	bl	800ae6c <read_submessage_list>
 800b838:	e7be      	b.n	800b7b8 <uxr_create_session+0x68>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	d001      	beq.n	800b846 <uxr_create_session+0xf6>
 800b842:	2aff      	cmp	r2, #255	@ 0xff
 800b844:	d0ac      	beq.n	800b7a0 <uxr_create_session+0x50>
 800b846:	2a00      	cmp	r2, #0
 800b848:	d051      	beq.n	800b8ee <uxr_create_session+0x19e>
 800b84a:	2000      	movs	r0, #0
 800b84c:	b02b      	add	sp, #172	@ 0xac
 800b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b852:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	4639      	mov	r1, r7
 800b85a:	4650      	mov	r0, sl
 800b85c:	f000 fad4 	bl	800be08 <uxr_get_input_reliable_stream>
 800b860:	4680      	mov	r8, r0
 800b862:	b348      	cbz	r0, 800b8b8 <uxr_create_session+0x168>
 800b864:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b866:	9205      	str	r2, [sp, #20]
 800b868:	a81a      	add	r0, sp, #104	@ 0x68
 800b86a:	f7fd f851 	bl	8008910 <ucdr_buffer_remaining>
 800b86e:	4603      	mov	r3, r0
 800b870:	f10d 0019 	add.w	r0, sp, #25
 800b874:	9000      	str	r0, [sp, #0]
 800b876:	9a05      	ldr	r2, [sp, #20]
 800b878:	4649      	mov	r1, r9
 800b87a:	4640      	mov	r0, r8
 800b87c:	f006 fc9e 	bl	80121bc <uxr_receive_reliable_message>
 800b880:	b1d0      	cbz	r0, 800b8b8 <uxr_create_session+0x168>
 800b882:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d038      	beq.n	800b8fc <uxr_create_session+0x1ac>
 800b88a:	9e04      	ldr	r6, [sp, #16]
 800b88c:	e00a      	b.n	800b8a4 <uxr_create_session+0x154>
 800b88e:	f04f 0302 	mov.w	r3, #2
 800b892:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800b896:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800b89a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b89e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8a0:	f7ff fae4 	bl	800ae6c <read_submessage_list>
 800b8a4:	a922      	add	r1, sp, #136	@ 0x88
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	f006 fd07 	bl	80122bc <uxr_next_input_reliable_buffer_available>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	a922      	add	r1, sp, #136	@ 0x88
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ea      	bne.n	800b88e <uxr_create_session+0x13e>
 800b8b8:	9904      	ldr	r1, [sp, #16]
 800b8ba:	463a      	mov	r2, r7
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7ff f951 	bl	800ab64 <write_submessage_acknack.isra.0>
 800b8c2:	e779      	b.n	800b7b8 <uxr_create_session+0x68>
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	f000 fa94 	bl	800bdf4 <uxr_get_input_best_effort_stream>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f43f af73 	beq.w	800b7b8 <uxr_create_session+0x68>
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	f006 fbde 	bl	8012094 <uxr_receive_best_effort_message>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	f43f af6d 	beq.w	800b7b8 <uxr_create_session+0x68>
 800b8de:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b8e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8e4:	a91a      	add	r1, sp, #104	@ 0x68
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f7ff fac0 	bl	800ae6c <read_submessage_list>
 800b8ec:	e764      	b.n	800b7b8 <uxr_create_session+0x68>
 800b8ee:	4650      	mov	r0, sl
 800b8f0:	f000 f9d0 	bl	800bc94 <uxr_reset_stream_storage>
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	b02b      	add	sp, #172	@ 0xac
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b900:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b902:	a91a      	add	r1, sp, #104	@ 0x68
 800b904:	4620      	mov	r0, r4
 800b906:	f7ff fab1 	bl	800ae6c <read_submessage_list>
 800b90a:	e7be      	b.n	800b88a <uxr_create_session+0x13a>

0800b90c <uxr_prepare_stream_to_write_submessage>:
 800b90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	4682      	mov	sl, r0
 800b914:	4610      	mov	r0, r2
 800b916:	4615      	mov	r5, r2
 800b918:	461e      	mov	r6, r3
 800b91a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800b91e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b922:	9101      	str	r1, [sp, #4]
 800b924:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b928:	f000 face 	bl	800bec8 <uxr_submessage_padding>
 800b92c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b930:	f105 0904 	add.w	r9, r5, #4
 800b934:	2b01      	cmp	r3, #1
 800b936:	4481      	add	r9, r0
 800b938:	d01d      	beq.n	800b976 <uxr_prepare_stream_to_write_submessage+0x6a>
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d116      	bne.n	800b96c <uxr_prepare_stream_to_write_submessage+0x60>
 800b93e:	4621      	mov	r1, r4
 800b940:	f10a 0008 	add.w	r0, sl, #8
 800b944:	f000 fa4c 	bl	800bde0 <uxr_get_output_reliable_stream>
 800b948:	4604      	mov	r4, r0
 800b94a:	b158      	cbz	r0, 800b964 <uxr_prepare_stream_to_write_submessage+0x58>
 800b94c:	4649      	mov	r1, r9
 800b94e:	4632      	mov	r2, r6
 800b950:	f006 fe70 	bl	8012634 <uxr_prepare_reliable_buffer_to_write>
 800b954:	4604      	mov	r4, r0
 800b956:	b12c      	cbz	r4, 800b964 <uxr_prepare_stream_to_write_submessage+0x58>
 800b958:	4643      	mov	r3, r8
 800b95a:	b2aa      	uxth	r2, r5
 800b95c:	4639      	mov	r1, r7
 800b95e:	4630      	mov	r0, r6
 800b960:	f000 fa72 	bl	800be48 <uxr_buffer_submessage_header>
 800b964:	4620      	mov	r0, r4
 800b966:	b002      	add	sp, #8
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	2400      	movs	r4, #0
 800b96e:	4620      	mov	r0, r4
 800b970:	b002      	add	sp, #8
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b976:	4621      	mov	r1, r4
 800b978:	f10a 0008 	add.w	r0, sl, #8
 800b97c:	f000 fa28 	bl	800bdd0 <uxr_get_output_best_effort_stream>
 800b980:	4604      	mov	r4, r0
 800b982:	2800      	cmp	r0, #0
 800b984:	d0ee      	beq.n	800b964 <uxr_prepare_stream_to_write_submessage+0x58>
 800b986:	4649      	mov	r1, r9
 800b988:	4632      	mov	r2, r6
 800b98a:	f006 fd83 	bl	8012494 <uxr_prepare_best_effort_buffer_to_write>
 800b98e:	4604      	mov	r4, r0
 800b990:	e7e1      	b.n	800b956 <uxr_prepare_stream_to_write_submessage+0x4a>
 800b992:	bf00      	nop

0800b994 <uxr_init_session_info>:
 800b994:	0e13      	lsrs	r3, r2, #24
 800b996:	7043      	strb	r3, [r0, #1]
 800b998:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800b99c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b9a0:	7001      	strb	r1, [r0, #0]
 800b9a2:	70c3      	strb	r3, [r0, #3]
 800b9a4:	2109      	movs	r1, #9
 800b9a6:	23ff      	movs	r3, #255	@ 0xff
 800b9a8:	f880 c002 	strb.w	ip, [r0, #2]
 800b9ac:	7102      	strb	r2, [r0, #4]
 800b9ae:	80c1      	strh	r1, [r0, #6]
 800b9b0:	7143      	strb	r3, [r0, #5]
 800b9b2:	4770      	bx	lr

0800b9b4 <uxr_buffer_create_session>:
 800b9b4:	b530      	push	{r4, r5, lr}
 800b9b6:	b089      	sub	sp, #36	@ 0x24
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4d12      	ldr	r5, [pc, #72]	@ (800ba04 <uxr_buffer_create_session+0x50>)
 800b9bc:	9307      	str	r3, [sp, #28]
 800b9be:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	80c2      	strh	r2, [r0, #6]
 800b9c8:	f88d 2004 	strb.w	r2, [sp, #4]
 800b9cc:	682a      	ldr	r2, [r5, #0]
 800b9ce:	9200      	str	r2, [sp, #0]
 800b9d0:	88aa      	ldrh	r2, [r5, #4]
 800b9d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b9d6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800b9da:	9202      	str	r2, [sp, #8]
 800b9dc:	460c      	mov	r4, r1
 800b9de:	7802      	ldrb	r2, [r0, #0]
 800b9e0:	9303      	str	r3, [sp, #12]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	f88d 200c 	strb.w	r2, [sp, #12]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	2210      	movs	r2, #16
 800b9ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b9f0:	9306      	str	r3, [sp, #24]
 800b9f2:	f000 fa29 	bl	800be48 <uxr_buffer_submessage_header>
 800b9f6:	4669      	mov	r1, sp
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f001 fa6d 	bl	800ced8 <uxr_serialize_CREATE_CLIENT_Payload>
 800b9fe:	b009      	add	sp, #36	@ 0x24
 800ba00:	bd30      	pop	{r4, r5, pc}
 800ba02:	bf00      	nop
 800ba04:	080156cc 	.word	0x080156cc

0800ba08 <uxr_buffer_delete_session>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba3c <uxr_buffer_delete_session+0x34>)
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ba12:	f8ad c006 	strh.w	ip, [sp, #6]
 800ba16:	460c      	mov	r4, r1
 800ba18:	2202      	movs	r2, #2
 800ba1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba1e:	80c2      	strh	r2, [r0, #6]
 800ba20:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ba24:	2204      	movs	r2, #4
 800ba26:	2300      	movs	r3, #0
 800ba28:	2103      	movs	r1, #3
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fa0c 	bl	800be48 <uxr_buffer_submessage_header>
 800ba30:	a901      	add	r1, sp, #4
 800ba32:	4620      	mov	r0, r4
 800ba34:	f001 faf6 	bl	800d024 <uxr_serialize_DELETE_Payload>
 800ba38:	b002      	add	sp, #8
 800ba3a:	bd10      	pop	{r4, pc}
 800ba3c:	080156cc 	.word	0x080156cc

0800ba40 <uxr_read_create_session_status>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	a901      	add	r1, sp, #4
 800ba4a:	f001 fafb 	bl	800d044 <uxr_deserialize_STATUS_AGENT_Payload>
 800ba4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba52:	7163      	strb	r3, [r4, #5]
 800ba54:	b008      	add	sp, #32
 800ba56:	bd10      	pop	{r4, pc}

0800ba58 <uxr_read_delete_session_status>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	4608      	mov	r0, r1
 800ba60:	a902      	add	r1, sp, #8
 800ba62:	f001 fb1f 	bl	800d0a4 <uxr_deserialize_STATUS_Payload>
 800ba66:	88e3      	ldrh	r3, [r4, #6]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d001      	beq.n	800ba70 <uxr_read_delete_session_status+0x18>
 800ba6c:	b004      	add	sp, #16
 800ba6e:	bd10      	pop	{r4, pc}
 800ba70:	f10d 000a 	add.w	r0, sp, #10
 800ba74:	f7fe fffc 	bl	800aa70 <uxr_object_id_from_raw>
 800ba78:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ba7c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ba80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	bf04      	itt	eq
 800ba8a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ba8e:	7163      	strbeq	r3, [r4, #5]
 800ba90:	b004      	add	sp, #16
 800ba92:	bd10      	pop	{r4, pc}

0800ba94 <uxr_stamp_create_session_header>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	2208      	movs	r2, #8
 800ba98:	b08a      	sub	sp, #40	@ 0x28
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	eb0d 0002 	add.w	r0, sp, r2
 800baa0:	f7fc ff06 	bl	80088b0 <ucdr_init_buffer>
 800baa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa8:	9400      	str	r4, [sp, #0]
 800baaa:	2300      	movs	r3, #0
 800baac:	461a      	mov	r2, r3
 800baae:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800bab2:	a802      	add	r0, sp, #8
 800bab4:	f000 fbc2 	bl	800c23c <uxr_serialize_message_header>
 800bab8:	b00a      	add	sp, #40	@ 0x28
 800baba:	bd10      	pop	{r4, pc}

0800babc <uxr_stamp_session_header>:
 800babc:	b530      	push	{r4, r5, lr}
 800babe:	b08d      	sub	sp, #52	@ 0x34
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	9203      	str	r2, [sp, #12]
 800bac6:	4619      	mov	r1, r3
 800bac8:	a804      	add	r0, sp, #16
 800baca:	2208      	movs	r2, #8
 800bacc:	f7fc fef0 	bl	80088b0 <ucdr_init_buffer>
 800bad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad4:	9b03      	ldr	r3, [sp, #12]
 800bad6:	9400      	str	r4, [sp, #0]
 800bad8:	462a      	mov	r2, r5
 800bada:	a804      	add	r0, sp, #16
 800badc:	f000 fbae 	bl	800c23c <uxr_serialize_message_header>
 800bae0:	b00d      	add	sp, #52	@ 0x34
 800bae2:	bd30      	pop	{r4, r5, pc}

0800bae4 <uxr_read_session_header>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	4607      	mov	r7, r0
 800baea:	b084      	sub	sp, #16
 800baec:	4608      	mov	r0, r1
 800baee:	460c      	mov	r4, r1
 800baf0:	4615      	mov	r5, r2
 800baf2:	461e      	mov	r6, r3
 800baf4:	f7fc ff0c 	bl	8008910 <ucdr_buffer_remaining>
 800baf8:	2808      	cmp	r0, #8
 800bafa:	d803      	bhi.n	800bb04 <uxr_read_session_header+0x20>
 800bafc:	2000      	movs	r0, #0
 800bafe:	b004      	add	sp, #16
 800bb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb04:	f10d 080c 	add.w	r8, sp, #12
 800bb08:	4633      	mov	r3, r6
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	f8cd 8000 	str.w	r8, [sp]
 800bb10:	4620      	mov	r0, r4
 800bb12:	f10d 010b 	add.w	r1, sp, #11
 800bb16:	f000 fbaf 	bl	800c278 <uxr_deserialize_message_header>
 800bb1a:	783a      	ldrb	r2, [r7, #0]
 800bb1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d1eb      	bne.n	800bafc <uxr_read_session_header+0x18>
 800bb24:	061b      	lsls	r3, r3, #24
 800bb26:	d41c      	bmi.n	800bb62 <uxr_read_session_header+0x7e>
 800bb28:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800bb2c:	787b      	ldrb	r3, [r7, #1]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d003      	beq.n	800bb3a <uxr_read_session_header+0x56>
 800bb32:	2001      	movs	r0, #1
 800bb34:	f080 0001 	eor.w	r0, r0, #1
 800bb38:	e7e1      	b.n	800bafe <uxr_read_session_header+0x1a>
 800bb3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bb3e:	78bb      	ldrb	r3, [r7, #2]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	f107 0102 	add.w	r1, r7, #2
 800bb46:	d1f4      	bne.n	800bb32 <uxr_read_session_header+0x4e>
 800bb48:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800bb4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d1ee      	bne.n	800bb32 <uxr_read_session_header+0x4e>
 800bb54:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bb58:	784b      	ldrb	r3, [r1, #1]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d1e9      	bne.n	800bb32 <uxr_read_session_header+0x4e>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e7e8      	b.n	800bb34 <uxr_read_session_header+0x50>
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7cb      	b.n	800bafe <uxr_read_session_header+0x1a>
 800bb66:	bf00      	nop

0800bb68 <uxr_session_header_offset>:
 800bb68:	f990 3000 	ldrsb.w	r3, [r0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bfac      	ite	ge
 800bb70:	2008      	movge	r0, #8
 800bb72:	2004      	movlt	r0, #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop

0800bb78 <uxr_init_base_object_request>:
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	88c3      	ldrh	r3, [r0, #6]
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800bb82:	9101      	str	r1, [sp, #4]
 800bb84:	f1a3 010a 	sub.w	r1, r3, #10
 800bb88:	b289      	uxth	r1, r1
 800bb8a:	42a1      	cmp	r1, r4
 800bb8c:	d80e      	bhi.n	800bbac <uxr_init_base_object_request+0x34>
 800bb8e:	3301      	adds	r3, #1
 800bb90:	b29c      	uxth	r4, r3
 800bb92:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	80c4      	strh	r4, [r0, #6]
 800bb9a:	9801      	ldr	r0, [sp, #4]
 800bb9c:	7011      	strb	r1, [r2, #0]
 800bb9e:	7053      	strb	r3, [r2, #1]
 800bba0:	1c91      	adds	r1, r2, #2
 800bba2:	f7fe ff79 	bl	800aa98 <uxr_object_id_to_raw>
 800bba6:	4620      	mov	r0, r4
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd10      	pop	{r4, pc}
 800bbac:	230a      	movs	r3, #10
 800bbae:	2100      	movs	r1, #0
 800bbb0:	461c      	mov	r4, r3
 800bbb2:	e7f1      	b.n	800bb98 <uxr_init_base_object_request+0x20>

0800bbb4 <uxr_parse_base_object_request>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	3002      	adds	r0, #2
 800bbba:	460d      	mov	r5, r1
 800bbbc:	4616      	mov	r6, r2
 800bbbe:	f7fe ff57 	bl	800aa70 <uxr_object_id_from_raw>
 800bbc2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800bbc6:	8028      	strh	r0, [r5, #0]
 800bbc8:	806b      	strh	r3, [r5, #2]
 800bbca:	7822      	ldrb	r2, [r4, #0]
 800bbcc:	7863      	ldrb	r3, [r4, #1]
 800bbce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bbd2:	8033      	strh	r3, [r6, #0]
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}
 800bbd6:	bf00      	nop

0800bbd8 <uxr_stream_id>:
 800bbd8:	2901      	cmp	r1, #1
 800bbda:	b082      	sub	sp, #8
 800bbdc:	d01d      	beq.n	800bc1a <uxr_stream_id+0x42>
 800bbde:	2902      	cmp	r1, #2
 800bbe0:	f04f 0c00 	mov.w	ip, #0
 800bbe4:	d01e      	beq.n	800bc24 <uxr_stream_id+0x4c>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f36c 0307 	bfi	r3, ip, #0, #8
 800bbec:	f360 230f 	bfi	r3, r0, #8, #8
 800bbf0:	f361 4317 	bfi	r3, r1, #16, #8
 800bbf4:	f362 631f 	bfi	r3, r2, #24, #8
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f362 0007 	bfi	r0, r2, #0, #8
 800bc00:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bc04:	f362 200f 	bfi	r0, r2, #8, #8
 800bc08:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bc0c:	f362 4017 	bfi	r0, r2, #16, #8
 800bc10:	0e1b      	lsrs	r3, r3, #24
 800bc12:	f363 601f 	bfi	r0, r3, #24, #8
 800bc16:	b002      	add	sp, #8
 800bc18:	4770      	bx	lr
 800bc1a:	f100 0c01 	add.w	ip, r0, #1
 800bc1e:	fa5f fc8c 	uxtb.w	ip, ip
 800bc22:	e7e0      	b.n	800bbe6 <uxr_stream_id+0xe>
 800bc24:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800bc28:	e7dd      	b.n	800bbe6 <uxr_stream_id+0xe>
 800bc2a:	bf00      	nop

0800bc2c <uxr_stream_id_from_raw>:
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	b130      	cbz	r0, 800bc3e <uxr_stream_id_from_raw+0x12>
 800bc30:	0603      	lsls	r3, r0, #24
 800bc32:	d420      	bmi.n	800bc76 <uxr_stream_id_from_raw+0x4a>
 800bc34:	1e42      	subs	r2, r0, #1
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	f04f 0c01 	mov.w	ip, #1
 800bc3c:	e001      	b.n	800bc42 <uxr_stream_id_from_raw+0x16>
 800bc3e:	4684      	mov	ip, r0
 800bc40:	4602      	mov	r2, r0
 800bc42:	2300      	movs	r3, #0
 800bc44:	f360 0307 	bfi	r3, r0, #0, #8
 800bc48:	f362 230f 	bfi	r3, r2, #8, #8
 800bc4c:	f36c 4317 	bfi	r3, ip, #16, #8
 800bc50:	f361 631f 	bfi	r3, r1, #24, #8
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	2000      	movs	r0, #0
 800bc58:	f362 0007 	bfi	r0, r2, #0, #8
 800bc5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bc60:	f362 200f 	bfi	r0, r2, #8, #8
 800bc64:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bc68:	f362 4017 	bfi	r0, r2, #16, #8
 800bc6c:	0e1b      	lsrs	r3, r3, #24
 800bc6e:	f363 601f 	bfi	r0, r3, #24, #8
 800bc72:	b002      	add	sp, #8
 800bc74:	4770      	bx	lr
 800bc76:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800bc7a:	f04f 0c02 	mov.w	ip, #2
 800bc7e:	e7e0      	b.n	800bc42 <uxr_stream_id_from_raw+0x16>

0800bc80 <uxr_init_stream_storage>:
 800bc80:	2300      	movs	r3, #0
 800bc82:	7403      	strb	r3, [r0, #16]
 800bc84:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800bc88:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800bc8c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop

0800bc94 <uxr_reset_stream_storage>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	7c03      	ldrb	r3, [r0, #16]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	b153      	cbz	r3, 800bcb2 <uxr_reset_stream_storage+0x1e>
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	2500      	movs	r5, #0
 800bca0:	4630      	mov	r0, r6
 800bca2:	f006 fbf1 	bl	8012488 <uxr_reset_output_best_effort_stream>
 800bca6:	7c23      	ldrb	r3, [r4, #16]
 800bca8:	3501      	adds	r5, #1
 800bcaa:	42ab      	cmp	r3, r5
 800bcac:	f106 0610 	add.w	r6, r6, #16
 800bcb0:	d8f6      	bhi.n	800bca0 <uxr_reset_stream_storage+0xc>
 800bcb2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bcb6:	b163      	cbz	r3, 800bcd2 <uxr_reset_stream_storage+0x3e>
 800bcb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcbc:	2500      	movs	r5, #0
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f006 f9e4 	bl	801208c <uxr_reset_input_best_effort_stream>
 800bcc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bcc8:	3501      	adds	r5, #1
 800bcca:	42ab      	cmp	r3, r5
 800bccc:	f106 0602 	add.w	r6, r6, #2
 800bcd0:	d8f5      	bhi.n	800bcbe <uxr_reset_stream_storage+0x2a>
 800bcd2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bcd6:	b163      	cbz	r3, 800bcf2 <uxr_reset_stream_storage+0x5e>
 800bcd8:	f104 0618 	add.w	r6, r4, #24
 800bcdc:	2500      	movs	r5, #0
 800bcde:	4630      	mov	r0, r6
 800bce0:	f006 fc7e 	bl	80125e0 <uxr_reset_output_reliable_stream>
 800bce4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bce8:	3501      	adds	r5, #1
 800bcea:	42ab      	cmp	r3, r5
 800bcec:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800bcf0:	d8f5      	bhi.n	800bcde <uxr_reset_stream_storage+0x4a>
 800bcf2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800bcf6:	b163      	cbz	r3, 800bd12 <uxr_reset_stream_storage+0x7e>
 800bcf8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800bcfc:	2500      	movs	r5, #0
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f006 fa38 	bl	8012174 <uxr_reset_input_reliable_stream>
 800bd04:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800bd08:	3501      	adds	r5, #1
 800bd0a:	42ab      	cmp	r3, r5
 800bd0c:	f106 0618 	add.w	r6, r6, #24
 800bd10:	d8f5      	bhi.n	800bcfe <uxr_reset_stream_storage+0x6a>
 800bd12:	bd70      	pop	{r4, r5, r6, pc}

0800bd14 <uxr_add_output_best_effort_buffer>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	7c04      	ldrb	r4, [r0, #16]
 800bd18:	f104 0c01 	add.w	ip, r4, #1
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	f880 c010 	strb.w	ip, [r0, #16]
 800bd22:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800bd26:	f006 fba5 	bl	8012474 <uxr_init_output_best_effort_stream>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4620      	mov	r0, r4
 800bd30:	b002      	add	sp, #8
 800bd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd36:	f7ff bf4f 	b.w	800bbd8 <uxr_stream_id>
 800bd3a:	bf00      	nop

0800bd3c <uxr_add_output_reliable_buffer>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	4684      	mov	ip, r0
 800bd42:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bd46:	9000      	str	r0, [sp, #0]
 800bd48:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800bd4c:	2028      	movs	r0, #40	@ 0x28
 800bd4e:	fb00 c004 	mla	r0, r0, r4, ip
 800bd52:	f104 0e01 	add.w	lr, r4, #1
 800bd56:	3018      	adds	r0, #24
 800bd58:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800bd5c:	f006 fc08 	bl	8012570 <uxr_init_output_reliable_stream>
 800bd60:	2201      	movs	r2, #1
 800bd62:	2102      	movs	r1, #2
 800bd64:	4620      	mov	r0, r4
 800bd66:	b004      	add	sp, #16
 800bd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd6c:	f7ff bf34 	b.w	800bbd8 <uxr_stream_id>

0800bd70 <uxr_add_input_best_effort_buffer>:
 800bd70:	b510      	push	{r4, lr}
 800bd72:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800bd76:	4603      	mov	r3, r0
 800bd78:	1c62      	adds	r2, r4, #1
 800bd7a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800bd7e:	b082      	sub	sp, #8
 800bd80:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bd84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd88:	f006 f97c 	bl	8012084 <uxr_init_input_best_effort_stream>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2101      	movs	r1, #1
 800bd90:	4620      	mov	r0, r4
 800bd92:	b002      	add	sp, #8
 800bd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd98:	f7ff bf1e 	b.w	800bbd8 <uxr_stream_id>

0800bd9c <uxr_add_input_reliable_buffer>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	4684      	mov	ip, r0
 800bda2:	9806      	ldr	r0, [sp, #24]
 800bda4:	9000      	str	r0, [sp, #0]
 800bda6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800bdaa:	2018      	movs	r0, #24
 800bdac:	fb00 c004 	mla	r0, r0, r4, ip
 800bdb0:	f104 0e01 	add.w	lr, r4, #1
 800bdb4:	3048      	adds	r0, #72	@ 0x48
 800bdb6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800bdba:	f006 f9af 	bl	801211c <uxr_init_input_reliable_stream>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2102      	movs	r1, #2
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b004      	add	sp, #16
 800bdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdca:	f7ff bf05 	b.w	800bbd8 <uxr_stream_id>
 800bdce:	bf00      	nop

0800bdd0 <uxr_get_output_best_effort_stream>:
 800bdd0:	7c03      	ldrb	r3, [r0, #16]
 800bdd2:	428b      	cmp	r3, r1
 800bdd4:	bf8c      	ite	hi
 800bdd6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bdda:	2000      	movls	r0, #0
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop

0800bde0 <uxr_get_output_reliable_stream>:
 800bde0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bde4:	428b      	cmp	r3, r1
 800bde6:	bf83      	ittte	hi
 800bde8:	2328      	movhi	r3, #40	@ 0x28
 800bdea:	fb03 0001 	mlahi	r0, r3, r1, r0
 800bdee:	3018      	addhi	r0, #24
 800bdf0:	2000      	movls	r0, #0
 800bdf2:	4770      	bx	lr

0800bdf4 <uxr_get_input_best_effort_stream>:
 800bdf4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bdf8:	428b      	cmp	r3, r1
 800bdfa:	bf86      	itte	hi
 800bdfc:	3121      	addhi	r1, #33	@ 0x21
 800bdfe:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800be02:	2000      	movls	r0, #0
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop

0800be08 <uxr_get_input_reliable_stream>:
 800be08:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800be0c:	428b      	cmp	r3, r1
 800be0e:	bf83      	ittte	hi
 800be10:	2318      	movhi	r3, #24
 800be12:	fb03 0001 	mlahi	r0, r3, r1, r0
 800be16:	3048      	addhi	r0, #72	@ 0x48
 800be18:	2000      	movls	r0, #0
 800be1a:	4770      	bx	lr

0800be1c <uxr_output_streams_confirmed>:
 800be1c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800be20:	b183      	cbz	r3, 800be44 <uxr_output_streams_confirmed+0x28>
 800be22:	b570      	push	{r4, r5, r6, lr}
 800be24:	4606      	mov	r6, r0
 800be26:	f100 0518 	add.w	r5, r0, #24
 800be2a:	2400      	movs	r4, #0
 800be2c:	e001      	b.n	800be32 <uxr_output_streams_confirmed+0x16>
 800be2e:	3528      	adds	r5, #40	@ 0x28
 800be30:	b138      	cbz	r0, 800be42 <uxr_output_streams_confirmed+0x26>
 800be32:	4628      	mov	r0, r5
 800be34:	f006 fe44 	bl	8012ac0 <uxr_is_output_up_to_date>
 800be38:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800be3c:	3401      	adds	r4, #1
 800be3e:	42a3      	cmp	r3, r4
 800be40:	d8f5      	bhi.n	800be2e <uxr_output_streams_confirmed+0x12>
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	2001      	movs	r0, #1
 800be46:	4770      	bx	lr

0800be48 <uxr_buffer_submessage_header>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	4604      	mov	r4, r0
 800be4c:	460e      	mov	r6, r1
 800be4e:	2104      	movs	r1, #4
 800be50:	4615      	mov	r5, r2
 800be52:	461f      	mov	r7, r3
 800be54:	f7fc fd46 	bl	80088e4 <ucdr_align_to>
 800be58:	2301      	movs	r3, #1
 800be5a:	ea47 0203 	orr.w	r2, r7, r3
 800be5e:	4631      	mov	r1, r6
 800be60:	7523      	strb	r3, [r4, #20]
 800be62:	4620      	mov	r0, r4
 800be64:	462b      	mov	r3, r5
 800be66:	f000 fa27 	bl	800c2b8 <uxr_serialize_submessage_header>
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7fc fd50 	bl	8008910 <ucdr_buffer_remaining>
 800be70:	42a8      	cmp	r0, r5
 800be72:	bf34      	ite	cc
 800be74:	2000      	movcc	r0, #0
 800be76:	2001      	movcs	r0, #1
 800be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be7a:	bf00      	nop

0800be7c <uxr_read_submessage_header>:
 800be7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	2104      	movs	r1, #4
 800be86:	4616      	mov	r6, r2
 800be88:	4698      	mov	r8, r3
 800be8a:	f7fc fd2b 	bl	80088e4 <ucdr_align_to>
 800be8e:	4620      	mov	r0, r4
 800be90:	f7fc fd3e 	bl	8008910 <ucdr_buffer_remaining>
 800be94:	2803      	cmp	r0, #3
 800be96:	bf8c      	ite	hi
 800be98:	2701      	movhi	r7, #1
 800be9a:	2700      	movls	r7, #0
 800be9c:	d802      	bhi.n	800bea4 <uxr_read_submessage_header+0x28>
 800be9e:	4638      	mov	r0, r7
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	4633      	mov	r3, r6
 800bea6:	4642      	mov	r2, r8
 800bea8:	4620      	mov	r0, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	f000 fa18 	bl	800c2e0 <uxr_deserialize_submessage_header>
 800beb0:	f898 3000 	ldrb.w	r3, [r8]
 800beb4:	f003 0201 	and.w	r2, r3, #1
 800beb8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bebc:	f888 3000 	strb.w	r3, [r8]
 800bec0:	7522      	strb	r2, [r4, #20]
 800bec2:	4638      	mov	r0, r7
 800bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bec8 <uxr_submessage_padding>:
 800bec8:	f010 0003 	ands.w	r0, r0, #3
 800becc:	bf18      	it	ne
 800bece:	f1c0 0004 	rsbne	r0, r0, #4
 800bed2:	4770      	bx	lr

0800bed4 <uxr_millis>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	4669      	mov	r1, sp
 800beda:	2001      	movs	r0, #1
 800bedc:	f7f5 faec 	bl	80014b8 <clock_gettime>
 800bee0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800bee4:	4906      	ldr	r1, [pc, #24]	@ (800bf00 <uxr_millis+0x2c>)
 800bee6:	fba0 0301 	umull	r0, r3, r0, r1
 800beea:	1900      	adds	r0, r0, r4
 800beec:	fb01 3102 	mla	r1, r1, r2, r3
 800bef0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800bef4:	4a03      	ldr	r2, [pc, #12]	@ (800bf04 <uxr_millis+0x30>)
 800bef6:	2300      	movs	r3, #0
 800bef8:	f7f4 fb96 	bl	8000628 <__aeabi_ldivmod>
 800befc:	b004      	add	sp, #16
 800befe:	bd10      	pop	{r4, pc}
 800bf00:	3b9aca00 	.word	0x3b9aca00
 800bf04:	000f4240 	.word	0x000f4240

0800bf08 <uxr_nanos>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	4669      	mov	r1, sp
 800bf0e:	2001      	movs	r0, #1
 800bf10:	f7f5 fad2 	bl	80014b8 <clock_gettime>
 800bf14:	4a06      	ldr	r2, [pc, #24]	@ (800bf30 <uxr_nanos+0x28>)
 800bf16:	9800      	ldr	r0, [sp, #0]
 800bf18:	9902      	ldr	r1, [sp, #8]
 800bf1a:	9c01      	ldr	r4, [sp, #4]
 800bf1c:	fba0 0302 	umull	r0, r3, r0, r2
 800bf20:	1840      	adds	r0, r0, r1
 800bf22:	fb02 3304 	mla	r3, r2, r4, r3
 800bf26:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800bf2a:	b004      	add	sp, #16
 800bf2c:	bd10      	pop	{r4, pc}
 800bf2e:	bf00      	nop
 800bf30:	3b9aca00 	.word	0x3b9aca00

0800bf34 <on_full_output_buffer_fragmented>:
 800bf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	b08a      	sub	sp, #40	@ 0x28
 800bf3c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800bf40:	4606      	mov	r6, r0
 800bf42:	f104 0008 	add.w	r0, r4, #8
 800bf46:	f7ff ff4b 	bl	800bde0 <uxr_get_output_reliable_stream>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	f006 fdc2 	bl	8012ad4 <get_available_free_slots>
 800bf50:	b968      	cbnz	r0, 800bf6e <on_full_output_buffer_fragmented+0x3a>
 800bf52:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800bf56:	4620      	mov	r0, r4
 800bf58:	4798      	blx	r3
 800bf5a:	b918      	cbnz	r0, 800bf64 <on_full_output_buffer_fragmented+0x30>
 800bf5c:	2001      	movs	r0, #1
 800bf5e:	b00a      	add	sp, #40	@ 0x28
 800bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf64:	4628      	mov	r0, r5
 800bf66:	f006 fdb5 	bl	8012ad4 <get_available_free_slots>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d0f6      	beq.n	800bf5c <on_full_output_buffer_fragmented+0x28>
 800bf6e:	8929      	ldrh	r1, [r5, #8]
 800bf70:	89eb      	ldrh	r3, [r5, #14]
 800bf72:	7b28      	ldrb	r0, [r5, #12]
 800bf74:	686a      	ldr	r2, [r5, #4]
 800bf76:	fbb2 f8f1 	udiv	r8, r2, r1
 800bf7a:	fbb3 f2f1 	udiv	r2, r3, r1
 800bf7e:	fb01 3112 	mls	r1, r1, r2, r3
 800bf82:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800bf86:	b289      	uxth	r1, r1
 800bf88:	fb08 f101 	mul.w	r1, r8, r1
 800bf8c:	30fc      	adds	r0, #252	@ 0xfc
 800bf8e:	f1a8 0804 	sub.w	r8, r8, #4
 800bf92:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800bf96:	4440      	add	r0, r8
 800bf98:	b287      	uxth	r7, r0
 800bf9a:	1bdb      	subs	r3, r3, r7
 800bf9c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	3104      	adds	r1, #4
 800bfa4:	4419      	add	r1, r3
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	a802      	add	r0, sp, #8
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f7fc fc6b 	bl	800888c <ucdr_init_buffer_origin_offset>
 800bfb6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800bfba:	f102 0308 	add.w	r3, r2, #8
 800bfbe:	4543      	cmp	r3, r8
 800bfc0:	d928      	bls.n	800c014 <on_full_output_buffer_fragmented+0xe0>
 800bfc2:	463a      	mov	r2, r7
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	210d      	movs	r1, #13
 800bfc8:	a802      	add	r0, sp, #8
 800bfca:	f7ff ff3d 	bl	800be48 <uxr_buffer_submessage_header>
 800bfce:	8929      	ldrh	r1, [r5, #8]
 800bfd0:	89eb      	ldrh	r3, [r5, #14]
 800bfd2:	fbb3 f2f1 	udiv	r2, r3, r1
 800bfd6:	fb01 3312 	mls	r3, r1, r2, r3
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	686a      	ldr	r2, [r5, #4]
 800bfde:	fbb2 f2f1 	udiv	r2, r2, r1
 800bfe2:	fb02 f303 	mul.w	r3, r2, r3
 800bfe6:	682a      	ldr	r2, [r5, #0]
 800bfe8:	f842 8003 	str.w	r8, [r2, r3]
 800bfec:	89e8      	ldrh	r0, [r5, #14]
 800bfee:	2101      	movs	r1, #1
 800bff0:	f006 fec0 	bl	8012d74 <uxr_seq_num_add>
 800bff4:	9904      	ldr	r1, [sp, #16]
 800bff6:	9a03      	ldr	r2, [sp, #12]
 800bff8:	81e8      	strh	r0, [r5, #14]
 800bffa:	1a52      	subs	r2, r2, r1
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7fc fc57 	bl	80088b0 <ucdr_init_buffer>
 800c002:	4630      	mov	r0, r6
 800c004:	490f      	ldr	r1, [pc, #60]	@ (800c044 <on_full_output_buffer_fragmented+0x110>)
 800c006:	4622      	mov	r2, r4
 800c008:	f7fc fc26 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 800c00c:	2000      	movs	r0, #0
 800c00e:	b00a      	add	sp, #40	@ 0x28
 800c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c014:	b292      	uxth	r2, r2
 800c016:	2302      	movs	r3, #2
 800c018:	210d      	movs	r1, #13
 800c01a:	a802      	add	r0, sp, #8
 800c01c:	f7ff ff14 	bl	800be48 <uxr_buffer_submessage_header>
 800c020:	8928      	ldrh	r0, [r5, #8]
 800c022:	89eb      	ldrh	r3, [r5, #14]
 800c024:	fbb3 f1f0 	udiv	r1, r3, r0
 800c028:	fb00 3311 	mls	r3, r0, r1, r3
 800c02c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800c030:	6869      	ldr	r1, [r5, #4]
 800c032:	fbb1 f1f0 	udiv	r1, r1, r0
 800c036:	b29b      	uxth	r3, r3
 800c038:	fb01 f303 	mul.w	r3, r1, r3
 800c03c:	6829      	ldr	r1, [r5, #0]
 800c03e:	3208      	adds	r2, #8
 800c040:	50ca      	str	r2, [r1, r3]
 800c042:	e7d3      	b.n	800bfec <on_full_output_buffer_fragmented+0xb8>
 800c044:	0800bf35 	.word	0x0800bf35

0800c048 <uxr_prepare_output_stream>:
 800c048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04a:	b087      	sub	sp, #28
 800c04c:	2707      	movs	r7, #7
 800c04e:	9202      	str	r2, [sp, #8]
 800c050:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c052:	9103      	str	r1, [sp, #12]
 800c054:	2500      	movs	r5, #0
 800c056:	3204      	adds	r2, #4
 800c058:	e9cd 7500 	strd	r7, r5, [sp]
 800c05c:	461c      	mov	r4, r3
 800c05e:	4606      	mov	r6, r0
 800c060:	f7ff fc54 	bl	800b90c <uxr_prepare_stream_to_write_submessage>
 800c064:	f080 0201 	eor.w	r2, r0, #1
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	75a2      	strb	r2, [r4, #22]
 800c06c:	b112      	cbz	r2, 800c074 <uxr_prepare_output_stream+0x2c>
 800c06e:	4628      	mov	r0, r5
 800c070:	b007      	add	sp, #28
 800c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c074:	aa05      	add	r2, sp, #20
 800c076:	9902      	ldr	r1, [sp, #8]
 800c078:	4630      	mov	r0, r6
 800c07a:	f7ff fd7d 	bl	800bb78 <uxr_init_base_object_request>
 800c07e:	a905      	add	r1, sp, #20
 800c080:	4605      	mov	r5, r0
 800c082:	4620      	mov	r0, r4
 800c084:	f001 f88c 	bl	800d1a0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c088:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c08c:	69a6      	ldr	r6, [r4, #24]
 800c08e:	69e7      	ldr	r7, [r4, #28]
 800c090:	1a52      	subs	r2, r2, r1
 800c092:	4620      	mov	r0, r4
 800c094:	f7fc fc0c 	bl	80088b0 <ucdr_init_buffer>
 800c098:	4620      	mov	r0, r4
 800c09a:	463a      	mov	r2, r7
 800c09c:	4631      	mov	r1, r6
 800c09e:	f7fc fbdb 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	b007      	add	sp, #28
 800c0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c0a8 <uxr_prepare_output_stream_fragmented>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	b091      	sub	sp, #68	@ 0x44
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	9105      	str	r1, [sp, #20]
 800c0b2:	3008      	adds	r0, #8
 800c0b4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c0b8:	461e      	mov	r6, r3
 800c0ba:	9204      	str	r2, [sp, #16]
 800c0bc:	f7ff fe90 	bl	800bde0 <uxr_get_output_reliable_stream>
 800c0c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	f000 8091 	beq.w	800c1ec <uxr_prepare_output_stream_fragmented+0x144>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	f000 808d 	beq.w	800c1ec <uxr_prepare_output_stream_fragmented+0x144>
 800c0d2:	f006 fcff 	bl	8012ad4 <get_available_free_slots>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f000 8083 	beq.w	800c1e2 <uxr_prepare_output_stream_fragmented+0x13a>
 800c0dc:	8922      	ldrh	r2, [r4, #8]
 800c0de:	89e7      	ldrh	r7, [r4, #14]
 800c0e0:	fbb7 f9f2 	udiv	r9, r7, r2
 800c0e4:	fb02 7919 	mls	r9, r2, r9, r7
 800c0e8:	fa1f f989 	uxth.w	r9, r9
 800c0ec:	6863      	ldr	r3, [r4, #4]
 800c0ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	9203      	str	r2, [sp, #12]
 800c0f6:	fb02 f909 	mul.w	r9, r2, r9
 800c0fa:	f109 0904 	add.w	r9, r9, #4
 800c0fe:	4499      	add	r9, r3
 800c100:	7b23      	ldrb	r3, [r4, #12]
 800c102:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c106:	4543      	cmp	r3, r8
 800c108:	f1a2 0b04 	sub.w	fp, r2, #4
 800c10c:	d37a      	bcc.n	800c204 <uxr_prepare_output_stream_fragmented+0x15c>
 800c10e:	f1ab 0a04 	sub.w	sl, fp, #4
 800c112:	ebaa 0a03 	sub.w	sl, sl, r3
 800c116:	465a      	mov	r2, fp
 800c118:	2300      	movs	r3, #0
 800c11a:	4649      	mov	r1, r9
 800c11c:	a808      	add	r0, sp, #32
 800c11e:	f8cd 8000 	str.w	r8, [sp]
 800c122:	f7fc fbb3 	bl	800888c <ucdr_init_buffer_origin_offset>
 800c126:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c128:	fa1f fa8a 	uxth.w	sl, sl
 800c12c:	4652      	mov	r2, sl
 800c12e:	f103 0a08 	add.w	sl, r3, #8
 800c132:	45da      	cmp	sl, fp
 800c134:	bf34      	ite	cc
 800c136:	2302      	movcc	r3, #2
 800c138:	2300      	movcs	r3, #0
 800c13a:	210d      	movs	r1, #13
 800c13c:	a808      	add	r0, sp, #32
 800c13e:	f7ff fe83 	bl	800be48 <uxr_buffer_submessage_header>
 800c142:	8921      	ldrh	r1, [r4, #8]
 800c144:	fbb7 f2f1 	udiv	r2, r7, r1
 800c148:	fb01 7212 	mls	r2, r1, r2, r7
 800c14c:	b292      	uxth	r2, r2
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	fbb3 f3f1 	udiv	r3, r3, r1
 800c154:	fb02 f303 	mul.w	r3, r2, r3
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	4638      	mov	r0, r7
 800c15c:	f842 b003 	str.w	fp, [r2, r3]
 800c160:	2101      	movs	r1, #1
 800c162:	f006 fe07 	bl	8012d74 <uxr_seq_num_add>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	f108 0104 	add.w	r1, r8, #4
 800c16c:	f1a3 0208 	sub.w	r2, r3, #8
 800c170:	eba2 0208 	sub.w	r2, r2, r8
 800c174:	4449      	add	r1, r9
 800c176:	4607      	mov	r7, r0
 800c178:	4630      	mov	r0, r6
 800c17a:	f7fc fb99 	bl	80088b0 <ucdr_init_buffer>
 800c17e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c180:	81e7      	strh	r7, [r4, #14]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c188:	bf28      	it	cs
 800c18a:	2200      	movcs	r2, #0
 800c18c:	2300      	movs	r3, #0
 800c18e:	b292      	uxth	r2, r2
 800c190:	2107      	movs	r1, #7
 800c192:	4630      	mov	r0, r6
 800c194:	f7ff fe58 	bl	800be48 <uxr_buffer_submessage_header>
 800c198:	9904      	ldr	r1, [sp, #16]
 800c19a:	aa07      	add	r2, sp, #28
 800c19c:	4628      	mov	r0, r5
 800c19e:	f7ff fceb 	bl	800bb78 <uxr_init_base_object_request>
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	b318      	cbz	r0, 800c1ee <uxr_prepare_output_stream_fragmented+0x146>
 800c1a6:	a907      	add	r1, sp, #28
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 fff9 	bl	800d1a0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c1ae:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	1a52      	subs	r2, r2, r1
 800c1b6:	f7fc fb7b 	bl	80088b0 <ucdr_init_buffer>
 800c1ba:	9b05      	ldr	r3, [sp, #20]
 800c1bc:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800c1c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c1c2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800c1c6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c1c8:	491b      	ldr	r1, [pc, #108]	@ (800c238 <uxr_prepare_output_stream_fragmented+0x190>)
 800c1ca:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800c1d4:	462a      	mov	r2, r5
 800c1d6:	f7fc fb3f 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 800c1da:	4620      	mov	r0, r4
 800c1dc:	b011      	add	sp, #68	@ 0x44
 800c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c1e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	4798      	blx	r3
 800c1ea:	b920      	cbnz	r0, 800c1f6 <uxr_prepare_output_stream_fragmented+0x14e>
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	b011      	add	sp, #68	@ 0x44
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f006 fc6c 	bl	8012ad4 <get_available_free_slots>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	f47f af6d 	bne.w	800c0dc <uxr_prepare_output_stream_fragmented+0x34>
 800c202:	e7f3      	b.n	800c1ec <uxr_prepare_output_stream_fragmented+0x144>
 800c204:	4638      	mov	r0, r7
 800c206:	2101      	movs	r1, #1
 800c208:	f006 fdb4 	bl	8012d74 <uxr_seq_num_add>
 800c20c:	8921      	ldrh	r1, [r4, #8]
 800c20e:	fbb0 f2f1 	udiv	r2, r0, r1
 800c212:	fb01 0912 	mls	r9, r1, r2, r0
 800c216:	fa1f f289 	uxth.w	r2, r9
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	fbb3 f9f1 	udiv	r9, r3, r1
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	fb02 f909 	mul.w	r9, r2, r9
 800c226:	f109 0904 	add.w	r9, r9, #4
 800c22a:	4499      	add	r9, r3
 800c22c:	4607      	mov	r7, r0
 800c22e:	7b23      	ldrb	r3, [r4, #12]
 800c230:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c234:	e76b      	b.n	800c10e <uxr_prepare_output_stream_fragmented+0x66>
 800c236:	bf00      	nop
 800c238:	0800bf35 	.word	0x0800bf35

0800c23c <uxr_serialize_message_header>:
 800c23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c23e:	b083      	sub	sp, #12
 800c240:	4616      	mov	r6, r2
 800c242:	4604      	mov	r4, r0
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	460d      	mov	r5, r1
 800c248:	9f08      	ldr	r7, [sp, #32]
 800c24a:	f7fb f9ef 	bl	800762c <ucdr_serialize_uint8_t>
 800c24e:	4631      	mov	r1, r6
 800c250:	4620      	mov	r0, r4
 800c252:	f7fb f9eb 	bl	800762c <ucdr_serialize_uint8_t>
 800c256:	9a01      	ldr	r2, [sp, #4]
 800c258:	2101      	movs	r1, #1
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7fb fa92 	bl	8007784 <ucdr_serialize_endian_uint16_t>
 800c260:	062b      	lsls	r3, r5, #24
 800c262:	d501      	bpl.n	800c268 <uxr_serialize_message_header+0x2c>
 800c264:	b003      	add	sp, #12
 800c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c268:	2204      	movs	r2, #4
 800c26a:	4639      	mov	r1, r7
 800c26c:	4620      	mov	r0, r4
 800c26e:	b003      	add	sp, #12
 800c270:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c274:	f005 bd0c 	b.w	8011c90 <ucdr_serialize_array_uint8_t>

0800c278 <uxr_deserialize_message_header>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	b083      	sub	sp, #12
 800c27c:	4616      	mov	r6, r2
 800c27e:	4604      	mov	r4, r0
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	460d      	mov	r5, r1
 800c284:	9f08      	ldr	r7, [sp, #32]
 800c286:	f7fb f9e7 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c28a:	4631      	mov	r1, r6
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7fb f9e3 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c292:	9a01      	ldr	r2, [sp, #4]
 800c294:	2101      	movs	r1, #1
 800c296:	4620      	mov	r0, r4
 800c298:	f7fb fb68 	bl	800796c <ucdr_deserialize_endian_uint16_t>
 800c29c:	f995 3000 	ldrsb.w	r3, [r5]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da01      	bge.n	800c2a8 <uxr_deserialize_message_header+0x30>
 800c2a4:	b003      	add	sp, #12
 800c2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	b003      	add	sp, #12
 800c2b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c2b4:	f005 bd50 	b.w	8011d58 <ucdr_deserialize_array_uint8_t>

0800c2b8 <uxr_serialize_submessage_header>:
 800c2b8:	b530      	push	{r4, r5, lr}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	4615      	mov	r5, r2
 800c2be:	4604      	mov	r4, r0
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	f7fb f9b3 	bl	800762c <ucdr_serialize_uint8_t>
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f7fb f9af 	bl	800762c <ucdr_serialize_uint8_t>
 800c2ce:	9a01      	ldr	r2, [sp, #4]
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	b003      	add	sp, #12
 800c2d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2da:	f7fb ba53 	b.w	8007784 <ucdr_serialize_endian_uint16_t>
 800c2de:	bf00      	nop

0800c2e0 <uxr_deserialize_submessage_header>:
 800c2e0:	b530      	push	{r4, r5, lr}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	4615      	mov	r5, r2
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f7fb f9b5 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f7fb f9b1 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c2f6:	9a01      	ldr	r2, [sp, #4]
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	b003      	add	sp, #12
 800c2fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c302:	f7fb bb33 	b.w	800796c <ucdr_deserialize_endian_uint16_t>
 800c306:	bf00      	nop

0800c308 <uxr_serialize_CLIENT_Representation>:
 800c308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c30c:	2204      	movs	r2, #4
 800c30e:	460e      	mov	r6, r1
 800c310:	4605      	mov	r5, r0
 800c312:	f005 fcbd 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c316:	2202      	movs	r2, #2
 800c318:	4607      	mov	r7, r0
 800c31a:	1d31      	adds	r1, r6, #4
 800c31c:	4628      	mov	r0, r5
 800c31e:	f005 fcb7 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c322:	4038      	ands	r0, r7
 800c324:	2202      	movs	r2, #2
 800c326:	1db1      	adds	r1, r6, #6
 800c328:	b2c7      	uxtb	r7, r0
 800c32a:	4628      	mov	r0, r5
 800c32c:	f005 fcb0 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c330:	2204      	movs	r2, #4
 800c332:	4007      	ands	r7, r0
 800c334:	f106 0108 	add.w	r1, r6, #8
 800c338:	4628      	mov	r0, r5
 800c33a:	f005 fca9 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c33e:	7b31      	ldrb	r1, [r6, #12]
 800c340:	4007      	ands	r7, r0
 800c342:	4628      	mov	r0, r5
 800c344:	f7fb f972 	bl	800762c <ucdr_serialize_uint8_t>
 800c348:	7b71      	ldrb	r1, [r6, #13]
 800c34a:	4007      	ands	r7, r0
 800c34c:	4628      	mov	r0, r5
 800c34e:	f7fb f93f 	bl	80075d0 <ucdr_serialize_bool>
 800c352:	7b73      	ldrb	r3, [r6, #13]
 800c354:	ea07 0800 	and.w	r8, r7, r0
 800c358:	b93b      	cbnz	r3, 800c36a <uxr_serialize_CLIENT_Representation+0x62>
 800c35a:	8bb1      	ldrh	r1, [r6, #28]
 800c35c:	4628      	mov	r0, r5
 800c35e:	f7fb f991 	bl	8007684 <ucdr_serialize_uint16_t>
 800c362:	ea08 0000 	and.w	r0, r8, r0
 800c366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36a:	6931      	ldr	r1, [r6, #16]
 800c36c:	4628      	mov	r0, r5
 800c36e:	f7fb fb73 	bl	8007a58 <ucdr_serialize_uint32_t>
 800c372:	6933      	ldr	r3, [r6, #16]
 800c374:	b1e3      	cbz	r3, 800c3b0 <uxr_serialize_CLIENT_Representation+0xa8>
 800c376:	b1c0      	cbz	r0, 800c3aa <uxr_serialize_CLIENT_Representation+0xa2>
 800c378:	4637      	mov	r7, r6
 800c37a:	f04f 0900 	mov.w	r9, #0
 800c37e:	e001      	b.n	800c384 <uxr_serialize_CLIENT_Representation+0x7c>
 800c380:	3708      	adds	r7, #8
 800c382:	b194      	cbz	r4, 800c3aa <uxr_serialize_CLIENT_Representation+0xa2>
 800c384:	6979      	ldr	r1, [r7, #20]
 800c386:	4628      	mov	r0, r5
 800c388:	f005 fda2 	bl	8011ed0 <ucdr_serialize_string>
 800c38c:	69b9      	ldr	r1, [r7, #24]
 800c38e:	4604      	mov	r4, r0
 800c390:	4628      	mov	r0, r5
 800c392:	f005 fd9d 	bl	8011ed0 <ucdr_serialize_string>
 800c396:	6933      	ldr	r3, [r6, #16]
 800c398:	f109 0901 	add.w	r9, r9, #1
 800c39c:	4004      	ands	r4, r0
 800c39e:	4599      	cmp	r9, r3
 800c3a0:	b2e4      	uxtb	r4, r4
 800c3a2:	d3ed      	bcc.n	800c380 <uxr_serialize_CLIENT_Representation+0x78>
 800c3a4:	ea08 0804 	and.w	r8, r8, r4
 800c3a8:	e7d7      	b.n	800c35a <uxr_serialize_CLIENT_Representation+0x52>
 800c3aa:	f04f 0800 	mov.w	r8, #0
 800c3ae:	e7d4      	b.n	800c35a <uxr_serialize_CLIENT_Representation+0x52>
 800c3b0:	ea08 0800 	and.w	r8, r8, r0
 800c3b4:	e7d1      	b.n	800c35a <uxr_serialize_CLIENT_Representation+0x52>
 800c3b6:	bf00      	nop

0800c3b8 <uxr_deserialize_CLIENT_Representation>:
 800c3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3bc:	2204      	movs	r2, #4
 800c3be:	460c      	mov	r4, r1
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	f005 fcc9 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	1d21      	adds	r1, r4, #4
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f005 fcc3 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800c3d2:	4038      	ands	r0, r7
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	1da1      	adds	r1, r4, #6
 800c3d8:	b2c6      	uxtb	r6, r0
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f005 fcbc 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	4006      	ands	r6, r0
 800c3e4:	f104 0108 	add.w	r1, r4, #8
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f005 fcb5 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800c3ee:	f104 010c 	add.w	r1, r4, #12
 800c3f2:	4006      	ands	r6, r0
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f7fb f92f 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c3fa:	f104 010d 	add.w	r1, r4, #13
 800c3fe:	ea06 0700 	and.w	r7, r6, r0
 800c402:	4628      	mov	r0, r5
 800c404:	f7fb f8fa 	bl	80075fc <ucdr_deserialize_bool>
 800c408:	7b63      	ldrb	r3, [r4, #13]
 800c40a:	4007      	ands	r7, r0
 800c40c:	b93b      	cbnz	r3, 800c41e <uxr_deserialize_CLIENT_Representation+0x66>
 800c40e:	f104 011c 	add.w	r1, r4, #28
 800c412:	4628      	mov	r0, r5
 800c414:	f7fb fa36 	bl	8007884 <ucdr_deserialize_uint16_t>
 800c418:	4038      	ands	r0, r7
 800c41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c41e:	f104 0110 	add.w	r1, r4, #16
 800c422:	4628      	mov	r0, r5
 800c424:	f7fb fc48 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800c428:	6923      	ldr	r3, [r4, #16]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d903      	bls.n	800c436 <uxr_deserialize_CLIENT_Representation+0x7e>
 800c42e:	2301      	movs	r3, #1
 800c430:	75ab      	strb	r3, [r5, #22]
 800c432:	2700      	movs	r7, #0
 800c434:	e7eb      	b.n	800c40e <uxr_deserialize_CLIENT_Representation+0x56>
 800c436:	b30b      	cbz	r3, 800c47c <uxr_deserialize_CLIENT_Representation+0xc4>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d0fa      	beq.n	800c432 <uxr_deserialize_CLIENT_Representation+0x7a>
 800c43c:	46a0      	mov	r8, r4
 800c43e:	f04f 0900 	mov.w	r9, #0
 800c442:	e001      	b.n	800c448 <uxr_deserialize_CLIENT_Representation+0x90>
 800c444:	2e00      	cmp	r6, #0
 800c446:	d0f4      	beq.n	800c432 <uxr_deserialize_CLIENT_Representation+0x7a>
 800c448:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c44c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c450:	4628      	mov	r0, r5
 800c452:	f005 fd4d 	bl	8011ef0 <ucdr_deserialize_string>
 800c456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c45a:	4606      	mov	r6, r0
 800c45c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c460:	4628      	mov	r0, r5
 800c462:	f005 fd45 	bl	8011ef0 <ucdr_deserialize_string>
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	f109 0901 	add.w	r9, r9, #1
 800c46c:	4006      	ands	r6, r0
 800c46e:	4599      	cmp	r9, r3
 800c470:	f108 0808 	add.w	r8, r8, #8
 800c474:	b2f6      	uxtb	r6, r6
 800c476:	d3e5      	bcc.n	800c444 <uxr_deserialize_CLIENT_Representation+0x8c>
 800c478:	4037      	ands	r7, r6
 800c47a:	e7c8      	b.n	800c40e <uxr_deserialize_CLIENT_Representation+0x56>
 800c47c:	4007      	ands	r7, r0
 800c47e:	e7c6      	b.n	800c40e <uxr_deserialize_CLIENT_Representation+0x56>

0800c480 <uxr_serialize_AGENT_Representation>:
 800c480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c484:	2204      	movs	r2, #4
 800c486:	460f      	mov	r7, r1
 800c488:	4605      	mov	r5, r0
 800c48a:	f005 fc01 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c48e:	2202      	movs	r2, #2
 800c490:	4604      	mov	r4, r0
 800c492:	1d39      	adds	r1, r7, #4
 800c494:	4628      	mov	r0, r5
 800c496:	f005 fbfb 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c49a:	4020      	ands	r0, r4
 800c49c:	2202      	movs	r2, #2
 800c49e:	1db9      	adds	r1, r7, #6
 800c4a0:	b2c4      	uxtb	r4, r0
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f005 fbf4 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c4a8:	7a39      	ldrb	r1, [r7, #8]
 800c4aa:	4004      	ands	r4, r0
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f7fb f88f 	bl	80075d0 <ucdr_serialize_bool>
 800c4b2:	7a3b      	ldrb	r3, [r7, #8]
 800c4b4:	ea00 0804 	and.w	r8, r0, r4
 800c4b8:	b913      	cbnz	r3, 800c4c0 <uxr_serialize_AGENT_Representation+0x40>
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c0:	68f9      	ldr	r1, [r7, #12]
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f7fb fac8 	bl	8007a58 <ucdr_serialize_uint32_t>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	b303      	cbz	r3, 800c50e <uxr_serialize_AGENT_Representation+0x8e>
 800c4cc:	b1d0      	cbz	r0, 800c504 <uxr_serialize_AGENT_Representation+0x84>
 800c4ce:	463e      	mov	r6, r7
 800c4d0:	f04f 0900 	mov.w	r9, #0
 800c4d4:	e001      	b.n	800c4da <uxr_serialize_AGENT_Representation+0x5a>
 800c4d6:	3608      	adds	r6, #8
 800c4d8:	b1a4      	cbz	r4, 800c504 <uxr_serialize_AGENT_Representation+0x84>
 800c4da:	6931      	ldr	r1, [r6, #16]
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f005 fcf7 	bl	8011ed0 <ucdr_serialize_string>
 800c4e2:	6971      	ldr	r1, [r6, #20]
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f005 fcf2 	bl	8011ed0 <ucdr_serialize_string>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f109 0901 	add.w	r9, r9, #1
 800c4f2:	4004      	ands	r4, r0
 800c4f4:	4599      	cmp	r9, r3
 800c4f6:	b2e4      	uxtb	r4, r4
 800c4f8:	d3ed      	bcc.n	800c4d6 <uxr_serialize_AGENT_Representation+0x56>
 800c4fa:	ea08 0804 	and.w	r8, r8, r4
 800c4fe:	4640      	mov	r0, r8
 800c500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c504:	f04f 0800 	mov.w	r8, #0
 800c508:	4640      	mov	r0, r8
 800c50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c50e:	ea08 0800 	and.w	r8, r8, r0
 800c512:	e7d2      	b.n	800c4ba <uxr_serialize_AGENT_Representation+0x3a>

0800c514 <uxr_serialize_DATAWRITER_Representation>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	460d      	mov	r5, r1
 800c518:	7809      	ldrb	r1, [r1, #0]
 800c51a:	4606      	mov	r6, r0
 800c51c:	f7fb f886 	bl	800762c <ucdr_serialize_uint8_t>
 800c520:	4604      	mov	r4, r0
 800c522:	b130      	cbz	r0, 800c532 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c524:	782b      	ldrb	r3, [r5, #0]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d00c      	beq.n	800c544 <uxr_serialize_DATAWRITER_Representation+0x30>
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d010      	beq.n	800c550 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d008      	beq.n	800c544 <uxr_serialize_DATAWRITER_Representation+0x30>
 800c532:	2202      	movs	r2, #2
 800c534:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800c538:	4630      	mov	r0, r6
 800c53a:	f005 fba9 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c53e:	4020      	ands	r0, r4
 800c540:	b2c0      	uxtb	r0, r0
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	6869      	ldr	r1, [r5, #4]
 800c546:	4630      	mov	r0, r6
 800c548:	f005 fcc2 	bl	8011ed0 <ucdr_serialize_string>
 800c54c:	4604      	mov	r4, r0
 800c54e:	e7f0      	b.n	800c532 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c550:	4629      	mov	r1, r5
 800c552:	4630      	mov	r0, r6
 800c554:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c558:	3104      	adds	r1, #4
 800c55a:	f005 fc8d 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800c55e:	4604      	mov	r4, r0
 800c560:	e7e7      	b.n	800c532 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c562:	bf00      	nop

0800c564 <uxr_serialize_ObjectVariant.part.0>:
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	780b      	ldrb	r3, [r1, #0]
 800c568:	3b01      	subs	r3, #1
 800c56a:	460c      	mov	r4, r1
 800c56c:	4605      	mov	r5, r0
 800c56e:	2b0d      	cmp	r3, #13
 800c570:	d854      	bhi.n	800c61c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c572:	e8df f003 	tbb	[pc, r3]
 800c576:	0730      	.short	0x0730
 800c578:	07071b1b 	.word	0x07071b1b
 800c57c:	0c530707 	.word	0x0c530707
 800c580:	494e0c0c 	.word	0x494e0c0c
 800c584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c588:	3104      	adds	r1, #4
 800c58a:	f7ff bfc3 	b.w	800c514 <uxr_serialize_DATAWRITER_Representation>
 800c58e:	7909      	ldrb	r1, [r1, #4]
 800c590:	f7fb f84c 	bl	800762c <ucdr_serialize_uint8_t>
 800c594:	b1e8      	cbz	r0, 800c5d2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800c596:	7923      	ldrb	r3, [r4, #4]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d001      	beq.n	800c5a0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d13d      	bne.n	800c61c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c5a0:	68a1      	ldr	r1, [r4, #8]
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5a8:	f005 bc92 	b.w	8011ed0 <ucdr_serialize_string>
 800c5ac:	7909      	ldrb	r1, [r1, #4]
 800c5ae:	f7fb f83d 	bl	800762c <ucdr_serialize_uint8_t>
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	b120      	cbz	r0, 800c5c0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c5b6:	7923      	ldrb	r3, [r4, #4]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d039      	beq.n	800c630 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d02f      	beq.n	800c620 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f005 fb62 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800c5cc:	4030      	ands	r0, r6
 800c5ce:	b2c0      	uxtb	r0, r0
 800c5d0:	bd70      	pop	{r4, r5, r6, pc}
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}
 800c5d6:	7909      	ldrb	r1, [r1, #4]
 800c5d8:	f7fb f828 	bl	800762c <ucdr_serialize_uint8_t>
 800c5dc:	4606      	mov	r6, r0
 800c5de:	b158      	cbz	r0, 800c5f8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c5e0:	7923      	ldrb	r3, [r4, #4]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d003      	beq.n	800c5ee <uxr_serialize_ObjectVariant.part.0+0x8a>
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d028      	beq.n	800c63c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d104      	bne.n	800c5f8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c5ee:	68a1      	ldr	r1, [r4, #8]
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f005 fc6d 	bl	8011ed0 <ucdr_serialize_string>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f7fb fd51 	bl	80080a4 <ucdr_serialize_int16_t>
 800c602:	4030      	ands	r0, r6
 800c604:	b2c0      	uxtb	r0, r0
 800c606:	bd70      	pop	{r4, r5, r6, pc}
 800c608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c60c:	3104      	adds	r1, #4
 800c60e:	f7ff be7b 	b.w	800c308 <uxr_serialize_CLIENT_Representation>
 800c612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c616:	3104      	adds	r1, #4
 800c618:	f7ff bf32 	b.w	800c480 <uxr_serialize_AGENT_Representation>
 800c61c:	2001      	movs	r0, #1
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	68a2      	ldr	r2, [r4, #8]
 800c622:	f104 010c 	add.w	r1, r4, #12
 800c626:	4628      	mov	r0, r5
 800c628:	f005 fc26 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800c62c:	4606      	mov	r6, r0
 800c62e:	e7c7      	b.n	800c5c0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c630:	68a1      	ldr	r1, [r4, #8]
 800c632:	4628      	mov	r0, r5
 800c634:	f005 fc4c 	bl	8011ed0 <ucdr_serialize_string>
 800c638:	4606      	mov	r6, r0
 800c63a:	e7c1      	b.n	800c5c0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c63c:	68a2      	ldr	r2, [r4, #8]
 800c63e:	f104 010c 	add.w	r1, r4, #12
 800c642:	4628      	mov	r0, r5
 800c644:	f005 fc18 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800c648:	4606      	mov	r6, r0
 800c64a:	e7d5      	b.n	800c5f8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800c64c <uxr_deserialize_DATAWRITER_Representation>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4606      	mov	r6, r0
 800c650:	460d      	mov	r5, r1
 800c652:	f7fb f801 	bl	8007658 <ucdr_deserialize_uint8_t>
 800c656:	4604      	mov	r4, r0
 800c658:	b130      	cbz	r0, 800c668 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c65a:	782b      	ldrb	r3, [r5, #0]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d00c      	beq.n	800c67a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c660:	2b03      	cmp	r3, #3
 800c662:	d012      	beq.n	800c68a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d008      	beq.n	800c67a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c668:	2202      	movs	r2, #2
 800c66a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800c66e:	4630      	mov	r0, r6
 800c670:	f005 fb72 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800c674:	4020      	ands	r0, r4
 800c676:	b2c0      	uxtb	r0, r0
 800c678:	bd70      	pop	{r4, r5, r6, pc}
 800c67a:	6869      	ldr	r1, [r5, #4]
 800c67c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c680:	4630      	mov	r0, r6
 800c682:	f005 fc35 	bl	8011ef0 <ucdr_deserialize_string>
 800c686:	4604      	mov	r4, r0
 800c688:	e7ee      	b.n	800c668 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c68a:	1d2b      	adds	r3, r5, #4
 800c68c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c690:	f105 0108 	add.w	r1, r5, #8
 800c694:	4630      	mov	r0, r6
 800c696:	f005 fc01 	bl	8011e9c <ucdr_deserialize_sequence_uint8_t>
 800c69a:	4604      	mov	r4, r0
 800c69c:	e7e4      	b.n	800c668 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c69e:	bf00      	nop

0800c6a0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	7809      	ldrb	r1, [r1, #0]
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	f7fa ff92 	bl	80075d0 <ucdr_serialize_bool>
 800c6ac:	782b      	ldrb	r3, [r5, #0]
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	b94b      	cbnz	r3, 800c6c6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c6b2:	7a29      	ldrb	r1, [r5, #8]
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7fa ff8b 	bl	80075d0 <ucdr_serialize_bool>
 800c6ba:	7a2b      	ldrb	r3, [r5, #8]
 800c6bc:	4004      	ands	r4, r0
 800c6be:	b2e4      	uxtb	r4, r4
 800c6c0:	b943      	cbnz	r3, 800c6d4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	6869      	ldr	r1, [r5, #4]
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f005 fc01 	bl	8011ed0 <ucdr_serialize_string>
 800c6ce:	4004      	ands	r4, r0
 800c6d0:	b2e4      	uxtb	r4, r4
 800c6d2:	e7ee      	b.n	800c6b2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c6d4:	68e9      	ldr	r1, [r5, #12]
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f005 fbfa 	bl	8011ed0 <ucdr_serialize_string>
 800c6dc:	4004      	ands	r4, r0
 800c6de:	4620      	mov	r0, r4
 800c6e0:	bd70      	pop	{r4, r5, r6, pc}
 800c6e2:	bf00      	nop

0800c6e4 <uxr_serialize_OBJK_Topic_Binary>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	6809      	ldr	r1, [r1, #0]
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	f005 fbf0 	bl	8011ed0 <ucdr_serialize_string>
 800c6f0:	7929      	ldrb	r1, [r5, #4]
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7fa ff6b 	bl	80075d0 <ucdr_serialize_bool>
 800c6fa:	792b      	ldrb	r3, [r5, #4]
 800c6fc:	4004      	ands	r4, r0
 800c6fe:	b2e4      	uxtb	r4, r4
 800c700:	b943      	cbnz	r3, 800c714 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c702:	7b29      	ldrb	r1, [r5, #12]
 800c704:	4630      	mov	r0, r6
 800c706:	f7fa ff63 	bl	80075d0 <ucdr_serialize_bool>
 800c70a:	7b2b      	ldrb	r3, [r5, #12]
 800c70c:	4004      	ands	r4, r0
 800c70e:	b93b      	cbnz	r3, 800c720 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c710:	4620      	mov	r0, r4
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	68a9      	ldr	r1, [r5, #8]
 800c716:	4630      	mov	r0, r6
 800c718:	f005 fbda 	bl	8011ed0 <ucdr_serialize_string>
 800c71c:	4004      	ands	r4, r0
 800c71e:	e7f0      	b.n	800c702 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c720:	6929      	ldr	r1, [r5, #16]
 800c722:	4630      	mov	r0, r6
 800c724:	f005 fbd4 	bl	8011ed0 <ucdr_serialize_string>
 800c728:	4004      	ands	r4, r0
 800c72a:	b2e4      	uxtb	r4, r4
 800c72c:	4620      	mov	r0, r4
 800c72e:	bd70      	pop	{r4, r5, r6, pc}

0800c730 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c734:	460c      	mov	r4, r1
 800c736:	7809      	ldrb	r1, [r1, #0]
 800c738:	4606      	mov	r6, r0
 800c73a:	f7fa ff49 	bl	80075d0 <ucdr_serialize_bool>
 800c73e:	7823      	ldrb	r3, [r4, #0]
 800c740:	4605      	mov	r5, r0
 800c742:	b96b      	cbnz	r3, 800c760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c744:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800c748:	4630      	mov	r0, r6
 800c74a:	f7fa ff41 	bl	80075d0 <ucdr_serialize_bool>
 800c74e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c752:	4005      	ands	r5, r0
 800c754:	b2ed      	uxtb	r5, r5
 800c756:	2b00      	cmp	r3, #0
 800c758:	d169      	bne.n	800c82e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c75a:	4628      	mov	r0, r5
 800c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c760:	6861      	ldr	r1, [r4, #4]
 800c762:	4630      	mov	r0, r6
 800c764:	f7fb f978 	bl	8007a58 <ucdr_serialize_uint32_t>
 800c768:	6863      	ldr	r3, [r4, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d06b      	beq.n	800c846 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d067      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c772:	68a1      	ldr	r1, [r4, #8]
 800c774:	4630      	mov	r0, r6
 800c776:	f005 fbab 	bl	8011ed0 <ucdr_serialize_string>
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d953      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c780:	2800      	cmp	r0, #0
 800c782:	d05e      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c784:	68e1      	ldr	r1, [r4, #12]
 800c786:	4630      	mov	r0, r6
 800c788:	f005 fba2 	bl	8011ed0 <ucdr_serialize_string>
 800c78c:	6863      	ldr	r3, [r4, #4]
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d94a      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c792:	2800      	cmp	r0, #0
 800c794:	d055      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c796:	6921      	ldr	r1, [r4, #16]
 800c798:	4630      	mov	r0, r6
 800c79a:	f005 fb99 	bl	8011ed0 <ucdr_serialize_string>
 800c79e:	6863      	ldr	r3, [r4, #4]
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d941      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d04c      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7a8:	6961      	ldr	r1, [r4, #20]
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f005 fb90 	bl	8011ed0 <ucdr_serialize_string>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	d938      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d043      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7ba:	69a1      	ldr	r1, [r4, #24]
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f005 fb87 	bl	8011ed0 <ucdr_serialize_string>
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	2b05      	cmp	r3, #5
 800c7c6:	d92f      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d03a      	beq.n	800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7cc:	69e1      	ldr	r1, [r4, #28]
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f005 fb7e 	bl	8011ed0 <ucdr_serialize_string>
 800c7d4:	6863      	ldr	r3, [r4, #4]
 800c7d6:	2b06      	cmp	r3, #6
 800c7d8:	d926      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7da:	b390      	cbz	r0, 800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7dc:	6a21      	ldr	r1, [r4, #32]
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f005 fb76 	bl	8011ed0 <ucdr_serialize_string>
 800c7e4:	6863      	ldr	r3, [r4, #4]
 800c7e6:	2b07      	cmp	r3, #7
 800c7e8:	d91e      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7ea:	b350      	cbz	r0, 800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f005 fb6e 	bl	8011ed0 <ucdr_serialize_string>
 800c7f4:	6863      	ldr	r3, [r4, #4]
 800c7f6:	2b08      	cmp	r3, #8
 800c7f8:	d916      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7fa:	b310      	cbz	r0, 800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c7fe:	4630      	mov	r0, r6
 800c800:	f005 fb66 	bl	8011ed0 <ucdr_serialize_string>
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	2b09      	cmp	r3, #9
 800c808:	d90e      	bls.n	800c828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c80a:	b1d0      	cbz	r0, 800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c80c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800c810:	2709      	movs	r7, #9
 800c812:	e000      	b.n	800c816 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c814:	b1a8      	cbz	r0, 800c842 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c816:	f858 1b04 	ldr.w	r1, [r8], #4
 800c81a:	4630      	mov	r0, r6
 800c81c:	f005 fb58 	bl	8011ed0 <ucdr_serialize_string>
 800c820:	6862      	ldr	r2, [r4, #4]
 800c822:	3701      	adds	r7, #1
 800c824:	4297      	cmp	r7, r2
 800c826:	d3f5      	bcc.n	800c814 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c828:	4005      	ands	r5, r0
 800c82a:	b2ed      	uxtb	r5, r5
 800c82c:	e78a      	b.n	800c744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c82e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c830:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c834:	4630      	mov	r0, r6
 800c836:	f005 fb1f 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800c83a:	4005      	ands	r5, r0
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c842:	2500      	movs	r5, #0
 800c844:	e77e      	b.n	800c744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c846:	4028      	ands	r0, r5
 800c848:	b2c5      	uxtb	r5, r0
 800c84a:	e77b      	b.n	800c744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c84c <uxr_serialize_OBJK_Publisher_Binary>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	460d      	mov	r5, r1
 800c850:	7809      	ldrb	r1, [r1, #0]
 800c852:	4606      	mov	r6, r0
 800c854:	f7fa febc 	bl	80075d0 <ucdr_serialize_bool>
 800c858:	782b      	ldrb	r3, [r5, #0]
 800c85a:	4604      	mov	r4, r0
 800c85c:	b94b      	cbnz	r3, 800c872 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c85e:	7a29      	ldrb	r1, [r5, #8]
 800c860:	4630      	mov	r0, r6
 800c862:	f7fa feb5 	bl	80075d0 <ucdr_serialize_bool>
 800c866:	7a2b      	ldrb	r3, [r5, #8]
 800c868:	4004      	ands	r4, r0
 800c86a:	b2e4      	uxtb	r4, r4
 800c86c:	b943      	cbnz	r3, 800c880 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c86e:	4620      	mov	r0, r4
 800c870:	bd70      	pop	{r4, r5, r6, pc}
 800c872:	6869      	ldr	r1, [r5, #4]
 800c874:	4630      	mov	r0, r6
 800c876:	f005 fb2b 	bl	8011ed0 <ucdr_serialize_string>
 800c87a:	4004      	ands	r4, r0
 800c87c:	b2e4      	uxtb	r4, r4
 800c87e:	e7ee      	b.n	800c85e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c880:	f105 010c 	add.w	r1, r5, #12
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff ff53 	bl	800c730 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c88a:	4004      	ands	r4, r0
 800c88c:	4620      	mov	r0, r4
 800c88e:	bd70      	pop	{r4, r5, r6, pc}

0800c890 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c894:	460c      	mov	r4, r1
 800c896:	7809      	ldrb	r1, [r1, #0]
 800c898:	4606      	mov	r6, r0
 800c89a:	f7fa fe99 	bl	80075d0 <ucdr_serialize_bool>
 800c89e:	7823      	ldrb	r3, [r4, #0]
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	b96b      	cbnz	r3, 800c8c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800c8a4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7fa fe91 	bl	80075d0 <ucdr_serialize_bool>
 800c8ae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c8b2:	4005      	ands	r5, r0
 800c8b4:	b2ed      	uxtb	r5, r5
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d169      	bne.n	800c98e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	6861      	ldr	r1, [r4, #4]
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7fb f8c8 	bl	8007a58 <ucdr_serialize_uint32_t>
 800c8c8:	6863      	ldr	r3, [r4, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d06b      	beq.n	800c9a6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d067      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c8d2:	68a1      	ldr	r1, [r4, #8]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f005 fafb 	bl	8011ed0 <ucdr_serialize_string>
 800c8da:	6863      	ldr	r3, [r4, #4]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d953      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d05e      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c8e4:	68e1      	ldr	r1, [r4, #12]
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f005 faf2 	bl	8011ed0 <ucdr_serialize_string>
 800c8ec:	6863      	ldr	r3, [r4, #4]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d94a      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d055      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c8f6:	6921      	ldr	r1, [r4, #16]
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f005 fae9 	bl	8011ed0 <ucdr_serialize_string>
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	2b03      	cmp	r3, #3
 800c902:	d941      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c904:	2800      	cmp	r0, #0
 800c906:	d04c      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c908:	6961      	ldr	r1, [r4, #20]
 800c90a:	4630      	mov	r0, r6
 800c90c:	f005 fae0 	bl	8011ed0 <ucdr_serialize_string>
 800c910:	6863      	ldr	r3, [r4, #4]
 800c912:	2b04      	cmp	r3, #4
 800c914:	d938      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c916:	2800      	cmp	r0, #0
 800c918:	d043      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c91a:	69a1      	ldr	r1, [r4, #24]
 800c91c:	4630      	mov	r0, r6
 800c91e:	f005 fad7 	bl	8011ed0 <ucdr_serialize_string>
 800c922:	6863      	ldr	r3, [r4, #4]
 800c924:	2b05      	cmp	r3, #5
 800c926:	d92f      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d03a      	beq.n	800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c92c:	69e1      	ldr	r1, [r4, #28]
 800c92e:	4630      	mov	r0, r6
 800c930:	f005 face 	bl	8011ed0 <ucdr_serialize_string>
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	2b06      	cmp	r3, #6
 800c938:	d926      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c93a:	b390      	cbz	r0, 800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c93c:	6a21      	ldr	r1, [r4, #32]
 800c93e:	4630      	mov	r0, r6
 800c940:	f005 fac6 	bl	8011ed0 <ucdr_serialize_string>
 800c944:	6863      	ldr	r3, [r4, #4]
 800c946:	2b07      	cmp	r3, #7
 800c948:	d91e      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c94a:	b350      	cbz	r0, 800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c94c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c94e:	4630      	mov	r0, r6
 800c950:	f005 fabe 	bl	8011ed0 <ucdr_serialize_string>
 800c954:	6863      	ldr	r3, [r4, #4]
 800c956:	2b08      	cmp	r3, #8
 800c958:	d916      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c95a:	b310      	cbz	r0, 800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c95c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c95e:	4630      	mov	r0, r6
 800c960:	f005 fab6 	bl	8011ed0 <ucdr_serialize_string>
 800c964:	6863      	ldr	r3, [r4, #4]
 800c966:	2b09      	cmp	r3, #9
 800c968:	d90e      	bls.n	800c988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800c96a:	b1d0      	cbz	r0, 800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c96c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800c970:	2709      	movs	r7, #9
 800c972:	e000      	b.n	800c976 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800c974:	b1a8      	cbz	r0, 800c9a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800c976:	f858 1b04 	ldr.w	r1, [r8], #4
 800c97a:	4630      	mov	r0, r6
 800c97c:	f005 faa8 	bl	8011ed0 <ucdr_serialize_string>
 800c980:	6862      	ldr	r2, [r4, #4]
 800c982:	3701      	adds	r7, #1
 800c984:	4297      	cmp	r7, r2
 800c986:	d3f5      	bcc.n	800c974 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800c988:	4005      	ands	r5, r0
 800c98a:	b2ed      	uxtb	r5, r5
 800c98c:	e78a      	b.n	800c8a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800c98e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c990:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c994:	4630      	mov	r0, r6
 800c996:	f005 fa6f 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800c99a:	4005      	ands	r5, r0
 800c99c:	4628      	mov	r0, r5
 800c99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a2:	2500      	movs	r5, #0
 800c9a4:	e77e      	b.n	800c8a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800c9a6:	4028      	ands	r0, r5
 800c9a8:	b2c5      	uxtb	r5, r0
 800c9aa:	e77b      	b.n	800c8a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800c9ac <uxr_serialize_OBJK_Subscriber_Binary>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	7809      	ldrb	r1, [r1, #0]
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	f7fa fe0c 	bl	80075d0 <ucdr_serialize_bool>
 800c9b8:	782b      	ldrb	r3, [r5, #0]
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	b94b      	cbnz	r3, 800c9d2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800c9be:	7a29      	ldrb	r1, [r5, #8]
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7fa fe05 	bl	80075d0 <ucdr_serialize_bool>
 800c9c6:	7a2b      	ldrb	r3, [r5, #8]
 800c9c8:	4004      	ands	r4, r0
 800c9ca:	b2e4      	uxtb	r4, r4
 800c9cc:	b943      	cbnz	r3, 800c9e0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	bd70      	pop	{r4, r5, r6, pc}
 800c9d2:	6869      	ldr	r1, [r5, #4]
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f005 fa7b 	bl	8011ed0 <ucdr_serialize_string>
 800c9da:	4004      	ands	r4, r0
 800c9dc:	b2e4      	uxtb	r4, r4
 800c9de:	e7ee      	b.n	800c9be <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800c9e0:	f105 010c 	add.w	r1, r5, #12
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff ff53 	bl	800c890 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800c9ea:	4004      	ands	r4, r0
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}

0800c9f0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c9f0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c9f4:	4688      	mov	r8, r1
 800c9f6:	8809      	ldrh	r1, [r1, #0]
 800c9f8:	4681      	mov	r9, r0
 800c9fa:	f7fa fe43 	bl	8007684 <ucdr_serialize_uint16_t>
 800c9fe:	f898 1002 	ldrb.w	r1, [r8, #2]
 800ca02:	4606      	mov	r6, r0
 800ca04:	4648      	mov	r0, r9
 800ca06:	f7fa fde3 	bl	80075d0 <ucdr_serialize_bool>
 800ca0a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ca0e:	4006      	ands	r6, r0
 800ca10:	b2f5      	uxtb	r5, r6
 800ca12:	b9eb      	cbnz	r3, 800ca50 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800ca14:	f898 1006 	ldrb.w	r1, [r8, #6]
 800ca18:	4648      	mov	r0, r9
 800ca1a:	f7fa fdd9 	bl	80075d0 <ucdr_serialize_bool>
 800ca1e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ca22:	4005      	ands	r5, r0
 800ca24:	bb7b      	cbnz	r3, 800ca86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800ca26:	f898 100c 	ldrb.w	r1, [r8, #12]
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	f7fa fdd0 	bl	80075d0 <ucdr_serialize_bool>
 800ca30:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ca34:	4005      	ands	r5, r0
 800ca36:	b9f3      	cbnz	r3, 800ca76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800ca38:	f898 1014 	ldrb.w	r1, [r8, #20]
 800ca3c:	4648      	mov	r0, r9
 800ca3e:	f7fa fdc7 	bl	80075d0 <ucdr_serialize_bool>
 800ca42:	f898 3014 	ldrb.w	r3, [r8, #20]
 800ca46:	4005      	ands	r5, r0
 800ca48:	b94b      	cbnz	r3, 800ca5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ca50:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800ca54:	4648      	mov	r0, r9
 800ca56:	f7fa fe15 	bl	8007684 <ucdr_serialize_uint16_t>
 800ca5a:	4005      	ands	r5, r0
 800ca5c:	e7da      	b.n	800ca14 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800ca5e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ca62:	f108 011c 	add.w	r1, r8, #28
 800ca66:	4648      	mov	r0, r9
 800ca68:	f005 fa06 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800ca6c:	4028      	ands	r0, r5
 800ca6e:	b2c5      	uxtb	r5, r0
 800ca70:	4628      	mov	r0, r5
 800ca72:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ca76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ca7a:	4648      	mov	r0, r9
 800ca7c:	f7fa ffec 	bl	8007a58 <ucdr_serialize_uint32_t>
 800ca80:	4028      	ands	r0, r5
 800ca82:	b2c5      	uxtb	r5, r0
 800ca84:	e7d8      	b.n	800ca38 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ca86:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ca8a:	4648      	mov	r0, r9
 800ca8c:	f7fa ffe4 	bl	8007a58 <ucdr_serialize_uint32_t>
 800ca90:	4028      	ands	r0, r5
 800ca92:	b2c5      	uxtb	r5, r0
 800ca94:	e7c7      	b.n	800ca26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ca96:	bf00      	nop

0800ca98 <uxr_serialize_OBJK_DataReader_Binary>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	4606      	mov	r6, r0
 800caa0:	f005 f8f6 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800caa4:	78a1      	ldrb	r1, [r4, #2]
 800caa6:	4605      	mov	r5, r0
 800caa8:	4630      	mov	r0, r6
 800caaa:	f7fa fd91 	bl	80075d0 <ucdr_serialize_bool>
 800caae:	78a3      	ldrb	r3, [r4, #2]
 800cab0:	4005      	ands	r5, r0
 800cab2:	b2ed      	uxtb	r5, r5
 800cab4:	b90b      	cbnz	r3, 800caba <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800cab6:	4628      	mov	r0, r5
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caba:	f104 0108 	add.w	r1, r4, #8
 800cabe:	4630      	mov	r0, r6
 800cac0:	f7ff ff96 	bl	800c9f0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800cac4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800cac8:	4607      	mov	r7, r0
 800caca:	4630      	mov	r0, r6
 800cacc:	f7fa fd80 	bl	80075d0 <ucdr_serialize_bool>
 800cad0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800cad4:	4038      	ands	r0, r7
 800cad6:	b2c7      	uxtb	r7, r0
 800cad8:	b95b      	cbnz	r3, 800caf2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800cada:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800cade:	4630      	mov	r0, r6
 800cae0:	f7fa fd76 	bl	80075d0 <ucdr_serialize_bool>
 800cae4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800cae8:	4007      	ands	r7, r0
 800caea:	b94b      	cbnz	r3, 800cb00 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800caec:	403d      	ands	r5, r7
 800caee:	4628      	mov	r0, r5
 800caf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7fb fa04 	bl	8007f04 <ucdr_serialize_uint64_t>
 800cafc:	4007      	ands	r7, r0
 800cafe:	e7ec      	b.n	800cada <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800cb00:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800cb02:	4630      	mov	r0, r6
 800cb04:	f005 f9e4 	bl	8011ed0 <ucdr_serialize_string>
 800cb08:	4007      	ands	r7, r0
 800cb0a:	b2ff      	uxtb	r7, r7
 800cb0c:	e7ee      	b.n	800caec <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800cb0e:	bf00      	nop

0800cb10 <uxr_serialize_OBJK_DataWriter_Binary>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	2202      	movs	r2, #2
 800cb14:	460d      	mov	r5, r1
 800cb16:	4606      	mov	r6, r0
 800cb18:	f005 f8ba 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cb1c:	78a9      	ldrb	r1, [r5, #2]
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4630      	mov	r0, r6
 800cb22:	f7fa fd55 	bl	80075d0 <ucdr_serialize_bool>
 800cb26:	78ab      	ldrb	r3, [r5, #2]
 800cb28:	4004      	ands	r4, r0
 800cb2a:	b2e4      	uxtb	r4, r4
 800cb2c:	b90b      	cbnz	r3, 800cb32 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800cb2e:	4620      	mov	r0, r4
 800cb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb32:	f105 0108 	add.w	r1, r5, #8
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7ff ff5a 	bl	800c9f0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800cb3c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800cb40:	4607      	mov	r7, r0
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7fa fd44 	bl	80075d0 <ucdr_serialize_bool>
 800cb48:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800cb4c:	4038      	ands	r0, r7
 800cb4e:	b2c7      	uxtb	r7, r0
 800cb50:	b913      	cbnz	r3, 800cb58 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800cb52:	403c      	ands	r4, r7
 800cb54:	4620      	mov	r0, r4
 800cb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb58:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7fb f9d1 	bl	8007f04 <ucdr_serialize_uint64_t>
 800cb62:	4007      	ands	r7, r0
 800cb64:	e7f5      	b.n	800cb52 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800cb66:	bf00      	nop

0800cb68 <uxr_deserialize_ObjectVariant>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	460e      	mov	r6, r1
 800cb6e:	f7fa fd73 	bl	8007658 <ucdr_deserialize_uint8_t>
 800cb72:	b168      	cbz	r0, 800cb90 <uxr_deserialize_ObjectVariant+0x28>
 800cb74:	7833      	ldrb	r3, [r6, #0]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	4604      	mov	r4, r0
 800cb7a:	2b0d      	cmp	r3, #13
 800cb7c:	d809      	bhi.n	800cb92 <uxr_deserialize_ObjectVariant+0x2a>
 800cb7e:	e8df f003 	tbb	[pc, r3]
 800cb82:	0a41      	.short	0x0a41
 800cb84:	0a0a2323 	.word	0x0a0a2323
 800cb88:	10080a0a 	.word	0x10080a0a
 800cb8c:	565c1010 	.word	0x565c1010
 800cb90:	2400      	movs	r4, #0
 800cb92:	4620      	mov	r0, r4
 800cb94:	bd70      	pop	{r4, r5, r6, pc}
 800cb96:	1d31      	adds	r1, r6, #4
 800cb98:	4628      	mov	r0, r5
 800cb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb9e:	f7ff bd55 	b.w	800c64c <uxr_deserialize_DATAWRITER_Representation>
 800cba2:	1d31      	adds	r1, r6, #4
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7fa fd57 	bl	8007658 <ucdr_deserialize_uint8_t>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d0f0      	beq.n	800cb90 <uxr_deserialize_ObjectVariant+0x28>
 800cbae:	7933      	ldrb	r3, [r6, #4]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d001      	beq.n	800cbb8 <uxr_deserialize_ObjectVariant+0x50>
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d1ec      	bne.n	800cb92 <uxr_deserialize_ObjectVariant+0x2a>
 800cbb8:	68b1      	ldr	r1, [r6, #8]
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbc4:	f005 b994 	b.w	8011ef0 <ucdr_deserialize_string>
 800cbc8:	1d31      	adds	r1, r6, #4
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7fa fd44 	bl	8007658 <ucdr_deserialize_uint8_t>
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	b170      	cbz	r0, 800cbf2 <uxr_deserialize_ObjectVariant+0x8a>
 800cbd4:	7933      	ldrb	r3, [r6, #4]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d04c      	beq.n	800cc74 <uxr_deserialize_ObjectVariant+0x10c>
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d109      	bne.n	800cbf2 <uxr_deserialize_ObjectVariant+0x8a>
 800cbde:	f106 0308 	add.w	r3, r6, #8
 800cbe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbe6:	f106 010c 	add.w	r1, r6, #12
 800cbea:	4628      	mov	r0, r5
 800cbec:	f005 f956 	bl	8011e9c <ucdr_deserialize_sequence_uint8_t>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	f005 f8ad 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800cbfe:	4020      	ands	r0, r4
 800cc00:	b2c4      	uxtb	r4, r0
 800cc02:	e7c6      	b.n	800cb92 <uxr_deserialize_ObjectVariant+0x2a>
 800cc04:	1d31      	adds	r1, r6, #4
 800cc06:	4628      	mov	r0, r5
 800cc08:	f7fa fd26 	bl	8007658 <ucdr_deserialize_uint8_t>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	b130      	cbz	r0, 800cc1e <uxr_deserialize_ObjectVariant+0xb6>
 800cc10:	7933      	ldrb	r3, [r6, #4]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d036      	beq.n	800cc84 <uxr_deserialize_ObjectVariant+0x11c>
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d03c      	beq.n	800cc94 <uxr_deserialize_ObjectVariant+0x12c>
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d032      	beq.n	800cc84 <uxr_deserialize_ObjectVariant+0x11c>
 800cc1e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800cc22:	4628      	mov	r0, r5
 800cc24:	f7fb fabe 	bl	80081a4 <ucdr_deserialize_int16_t>
 800cc28:	4020      	ands	r0, r4
 800cc2a:	b2c4      	uxtb	r4, r0
 800cc2c:	e7b1      	b.n	800cb92 <uxr_deserialize_ObjectVariant+0x2a>
 800cc2e:	1d31      	adds	r1, r6, #4
 800cc30:	4628      	mov	r0, r5
 800cc32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc36:	f7ff bbbf 	b.w	800c3b8 <uxr_deserialize_CLIENT_Representation>
 800cc3a:	2204      	movs	r2, #4
 800cc3c:	18b1      	adds	r1, r6, r2
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f005 f88a 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800cc44:	2202      	movs	r2, #2
 800cc46:	f106 0108 	add.w	r1, r6, #8
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f005 f883 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800cc52:	2202      	movs	r2, #2
 800cc54:	4004      	ands	r4, r0
 800cc56:	f106 010a 	add.w	r1, r6, #10
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f005 f87c 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800cc60:	b2e4      	uxtb	r4, r4
 800cc62:	4603      	mov	r3, r0
 800cc64:	f106 010c 	add.w	r1, r6, #12
 800cc68:	4628      	mov	r0, r5
 800cc6a:	401c      	ands	r4, r3
 800cc6c:	f7fa fcc6 	bl	80075fc <ucdr_deserialize_bool>
 800cc70:	4004      	ands	r4, r0
 800cc72:	e78e      	b.n	800cb92 <uxr_deserialize_ObjectVariant+0x2a>
 800cc74:	68b1      	ldr	r1, [r6, #8]
 800cc76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	f005 f938 	bl	8011ef0 <ucdr_deserialize_string>
 800cc80:	4604      	mov	r4, r0
 800cc82:	e7b6      	b.n	800cbf2 <uxr_deserialize_ObjectVariant+0x8a>
 800cc84:	68b1      	ldr	r1, [r6, #8]
 800cc86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f005 f930 	bl	8011ef0 <ucdr_deserialize_string>
 800cc90:	4604      	mov	r4, r0
 800cc92:	e7c4      	b.n	800cc1e <uxr_deserialize_ObjectVariant+0xb6>
 800cc94:	f106 0308 	add.w	r3, r6, #8
 800cc98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc9c:	f106 010c 	add.w	r1, r6, #12
 800cca0:	4628      	mov	r0, r5
 800cca2:	f005 f8fb 	bl	8011e9c <ucdr_deserialize_sequence_uint8_t>
 800cca6:	4604      	mov	r4, r0
 800cca8:	e7b9      	b.n	800cc1e <uxr_deserialize_ObjectVariant+0xb6>
 800ccaa:	bf00      	nop

0800ccac <uxr_deserialize_BaseObjectRequest>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	2202      	movs	r2, #2
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	460e      	mov	r6, r1
 800ccb4:	f005 f850 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800ccb8:	2202      	movs	r2, #2
 800ccba:	4604      	mov	r4, r0
 800ccbc:	18b1      	adds	r1, r6, r2
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f005 f84a 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800ccc4:	4020      	ands	r0, r4
 800ccc6:	b2c0      	uxtb	r0, r0
 800ccc8:	bd70      	pop	{r4, r5, r6, pc}
 800ccca:	bf00      	nop

0800cccc <uxr_serialize_ActivityInfoVariant>:
 800cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	7809      	ldrb	r1, [r1, #0]
 800ccd4:	4607      	mov	r7, r0
 800ccd6:	f7fa fca9 	bl	800762c <ucdr_serialize_uint8_t>
 800ccda:	4681      	mov	r9, r0
 800ccdc:	b138      	cbz	r0, 800ccee <uxr_serialize_ActivityInfoVariant+0x22>
 800ccde:	782b      	ldrb	r3, [r5, #0]
 800cce0:	2b06      	cmp	r3, #6
 800cce2:	f000 8082 	beq.w	800cdea <uxr_serialize_ActivityInfoVariant+0x11e>
 800cce6:	2b0d      	cmp	r3, #13
 800cce8:	d016      	beq.n	800cd18 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ccea:	2b05      	cmp	r3, #5
 800ccec:	d002      	beq.n	800ccf4 <uxr_serialize_ActivityInfoVariant+0x28>
 800ccee:	4648      	mov	r0, r9
 800ccf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f7fb f9d3 	bl	80080a4 <ucdr_serialize_int16_t>
 800ccfe:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800cd02:	4681      	mov	r9, r0
 800cd04:	4638      	mov	r0, r7
 800cd06:	f7fb f8fd 	bl	8007f04 <ucdr_serialize_uint64_t>
 800cd0a:	ea09 0000 	and.w	r0, r9, r0
 800cd0e:	fa5f f980 	uxtb.w	r9, r0
 800cd12:	4648      	mov	r0, r9
 800cd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd18:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	f7fb f9c1 	bl	80080a4 <ucdr_serialize_int16_t>
 800cd22:	68e9      	ldr	r1, [r5, #12]
 800cd24:	4681      	mov	r9, r0
 800cd26:	4638      	mov	r0, r7
 800cd28:	f7fa fe96 	bl	8007a58 <ucdr_serialize_uint32_t>
 800cd2c:	68eb      	ldr	r3, [r5, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0eb      	beq.n	800cd0a <uxr_serialize_ActivityInfoVariant+0x3e>
 800cd32:	b320      	cbz	r0, 800cd7e <uxr_serialize_ActivityInfoVariant+0xb2>
 800cd34:	f105 080c 	add.w	r8, r5, #12
 800cd38:	2600      	movs	r6, #0
 800cd3a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800cd3e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800cd42:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7fa fc70 	bl	800762c <ucdr_serialize_uint8_t>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d053      	beq.n	800cdf8 <uxr_serialize_ActivityInfoVariant+0x12c>
 800cd50:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800cd54:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800cd58:	0074      	lsls	r4, r6, #1
 800cd5a:	00c9      	lsls	r1, r1, #3
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d854      	bhi.n	800ce0a <uxr_serialize_ActivityInfoVariant+0x13e>
 800cd60:	e8df f003 	tbb	[pc, r3]
 800cd64:	02102132 	.word	0x02102132
 800cd68:	4441      	add	r1, r8
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	6889      	ldr	r1, [r1, #8]
 800cd6e:	f005 f8af 	bl	8011ed0 <ucdr_serialize_string>
 800cd72:	68ea      	ldr	r2, [r5, #12]
 800cd74:	3601      	adds	r6, #1
 800cd76:	4296      	cmp	r6, r2
 800cd78:	d242      	bcs.n	800ce00 <uxr_serialize_ActivityInfoVariant+0x134>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d1dd      	bne.n	800cd3a <uxr_serialize_ActivityInfoVariant+0x6e>
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	e7b4      	b.n	800ccee <uxr_serialize_ActivityInfoVariant+0x22>
 800cd84:	3108      	adds	r1, #8
 800cd86:	4441      	add	r1, r8
 800cd88:	2210      	movs	r2, #16
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f004 ff80 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cd90:	4434      	add	r4, r6
 800cd92:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cd96:	4604      	mov	r4, r0
 800cd98:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	f7fa fe5c 	bl	8007a58 <ucdr_serialize_uint32_t>
 800cda0:	4020      	ands	r0, r4
 800cda2:	b2c0      	uxtb	r0, r0
 800cda4:	e7e5      	b.n	800cd72 <uxr_serialize_ActivityInfoVariant+0xa6>
 800cda6:	3108      	adds	r1, #8
 800cda8:	4441      	add	r1, r8
 800cdaa:	2204      	movs	r2, #4
 800cdac:	4638      	mov	r0, r7
 800cdae:	f004 ff6f 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cdb2:	4434      	add	r4, r6
 800cdb4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cdb8:	4604      	mov	r4, r0
 800cdba:	8b19      	ldrh	r1, [r3, #24]
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7fa fc61 	bl	8007684 <ucdr_serialize_uint16_t>
 800cdc2:	4020      	ands	r0, r4
 800cdc4:	b2c0      	uxtb	r0, r0
 800cdc6:	e7d4      	b.n	800cd72 <uxr_serialize_ActivityInfoVariant+0xa6>
 800cdc8:	3108      	adds	r1, #8
 800cdca:	4441      	add	r1, r8
 800cdcc:	2202      	movs	r2, #2
 800cdce:	4638      	mov	r0, r7
 800cdd0:	f004 ff5e 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cdd4:	4434      	add	r4, r6
 800cdd6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800cdda:	4604      	mov	r4, r0
 800cddc:	7d99      	ldrb	r1, [r3, #22]
 800cdde:	4638      	mov	r0, r7
 800cde0:	f7fa fc24 	bl	800762c <ucdr_serialize_uint8_t>
 800cde4:	4020      	ands	r0, r4
 800cde6:	b2c0      	uxtb	r0, r0
 800cde8:	e7c3      	b.n	800cd72 <uxr_serialize_ActivityInfoVariant+0xa6>
 800cdea:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cdee:	4638      	mov	r0, r7
 800cdf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf4:	f7fb b956 	b.w	80080a4 <ucdr_serialize_int16_t>
 800cdf8:	68ea      	ldr	r2, [r5, #12]
 800cdfa:	3601      	adds	r6, #1
 800cdfc:	42b2      	cmp	r2, r6
 800cdfe:	d8be      	bhi.n	800cd7e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ce00:	ea09 0900 	and.w	r9, r9, r0
 800ce04:	fa5f f989 	uxtb.w	r9, r9
 800ce08:	e771      	b.n	800ccee <uxr_serialize_ActivityInfoVariant+0x22>
 800ce0a:	68eb      	ldr	r3, [r5, #12]
 800ce0c:	3601      	adds	r6, #1
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	f10a 0a18 	add.w	sl, sl, #24
 800ce14:	d395      	bcc.n	800cd42 <uxr_serialize_ActivityInfoVariant+0x76>
 800ce16:	e76a      	b.n	800ccee <uxr_serialize_ActivityInfoVariant+0x22>

0800ce18 <uxr_deserialize_BaseObjectReply>:
 800ce18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460f      	mov	r7, r1
 800ce22:	f004 ff99 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800ce26:	2202      	movs	r2, #2
 800ce28:	18b9      	adds	r1, r7, r2
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f004 ff93 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800ce32:	1d39      	adds	r1, r7, #4
 800ce34:	4680      	mov	r8, r0
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7fa fc0e 	bl	8007658 <ucdr_deserialize_uint8_t>
 800ce3c:	1d79      	adds	r1, r7, #5
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7fa fc09 	bl	8007658 <ucdr_deserialize_uint8_t>
 800ce46:	ea05 0508 	and.w	r5, r5, r8
 800ce4a:	402c      	ands	r4, r5
 800ce4c:	4020      	ands	r0, r4
 800ce4e:	b2c0      	uxtb	r0, r0
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce54 <uxr_serialize_ReadSpecification>:
 800ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce58:	460e      	mov	r6, r1
 800ce5a:	7809      	ldrb	r1, [r1, #0]
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	f7fa fbe5 	bl	800762c <ucdr_serialize_uint8_t>
 800ce62:	7871      	ldrb	r1, [r6, #1]
 800ce64:	4604      	mov	r4, r0
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7fa fbe0 	bl	800762c <ucdr_serialize_uint8_t>
 800ce6c:	78b1      	ldrb	r1, [r6, #2]
 800ce6e:	4004      	ands	r4, r0
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7fa fbad 	bl	80075d0 <ucdr_serialize_bool>
 800ce76:	78b3      	ldrb	r3, [r6, #2]
 800ce78:	b2e4      	uxtb	r4, r4
 800ce7a:	4004      	ands	r4, r0
 800ce7c:	b94b      	cbnz	r3, 800ce92 <uxr_serialize_ReadSpecification+0x3e>
 800ce7e:	7a31      	ldrb	r1, [r6, #8]
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7fa fba5 	bl	80075d0 <ucdr_serialize_bool>
 800ce86:	7a33      	ldrb	r3, [r6, #8]
 800ce88:	4004      	ands	r4, r0
 800ce8a:	b943      	cbnz	r3, 800ce9e <uxr_serialize_ReadSpecification+0x4a>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce92:	6871      	ldr	r1, [r6, #4]
 800ce94:	4638      	mov	r0, r7
 800ce96:	f005 f81b 	bl	8011ed0 <ucdr_serialize_string>
 800ce9a:	4004      	ands	r4, r0
 800ce9c:	e7ef      	b.n	800ce7e <uxr_serialize_ReadSpecification+0x2a>
 800ce9e:	8971      	ldrh	r1, [r6, #10]
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7fa fbef 	bl	8007684 <ucdr_serialize_uint16_t>
 800cea6:	89b1      	ldrh	r1, [r6, #12]
 800cea8:	4605      	mov	r5, r0
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f7fa fbea 	bl	8007684 <ucdr_serialize_uint16_t>
 800ceb0:	89f1      	ldrh	r1, [r6, #14]
 800ceb2:	4005      	ands	r5, r0
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7fa fbe5 	bl	8007684 <ucdr_serialize_uint16_t>
 800ceba:	8a31      	ldrh	r1, [r6, #16]
 800cebc:	4680      	mov	r8, r0
 800cebe:	4638      	mov	r0, r7
 800cec0:	f7fa fbe0 	bl	8007684 <ucdr_serialize_uint16_t>
 800cec4:	b2ed      	uxtb	r5, r5
 800cec6:	4025      	ands	r5, r4
 800cec8:	ea08 0505 	and.w	r5, r8, r5
 800cecc:	ea00 0405 	and.w	r4, r0, r5
 800ced0:	4620      	mov	r0, r4
 800ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced6:	bf00      	nop

0800ced8 <uxr_serialize_CREATE_CLIENT_Payload>:
 800ced8:	f7ff ba16 	b.w	800c308 <uxr_serialize_CLIENT_Representation>

0800cedc <uxr_serialize_CREATE_Payload>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	2202      	movs	r2, #2
 800cee0:	4607      	mov	r7, r0
 800cee2:	460e      	mov	r6, r1
 800cee4:	f004 fed4 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cee8:	2202      	movs	r2, #2
 800ceea:	18b1      	adds	r1, r6, r2
 800ceec:	4605      	mov	r5, r0
 800ceee:	4638      	mov	r0, r7
 800cef0:	f004 fece 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cef4:	7931      	ldrb	r1, [r6, #4]
 800cef6:	4604      	mov	r4, r0
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7fa fb97 	bl	800762c <ucdr_serialize_uint8_t>
 800cefe:	b170      	cbz	r0, 800cf1e <uxr_serialize_CREATE_Payload+0x42>
 800cf00:	7933      	ldrb	r3, [r6, #4]
 800cf02:	402c      	ands	r4, r5
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b2e4      	uxtb	r4, r4
 800cf08:	2b0d      	cmp	r3, #13
 800cf0a:	d809      	bhi.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cf0c:	e8df f003 	tbb	[pc, r3]
 800cf10:	23230a4c 	.word	0x23230a4c
 800cf14:	0a0a0a0a 	.word	0x0a0a0a0a
 800cf18:	12121208 	.word	0x12121208
 800cf1c:	3e45      	.short	0x3e45
 800cf1e:	2400      	movs	r4, #0
 800cf20:	4620      	mov	r0, r4
 800cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf24:	f106 0108 	add.w	r1, r6, #8
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff faf3 	bl	800c514 <uxr_serialize_DATAWRITER_Representation>
 800cf2e:	4004      	ands	r4, r0
 800cf30:	4620      	mov	r0, r4
 800cf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf34:	7a31      	ldrb	r1, [r6, #8]
 800cf36:	4638      	mov	r0, r7
 800cf38:	f7fa fb78 	bl	800762c <ucdr_serialize_uint8_t>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d0ee      	beq.n	800cf1e <uxr_serialize_CREATE_Payload+0x42>
 800cf40:	7a33      	ldrb	r3, [r6, #8]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d001      	beq.n	800cf4a <uxr_serialize_CREATE_Payload+0x6e>
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d1ea      	bne.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cf4a:	68f1      	ldr	r1, [r6, #12]
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f004 ffbf 	bl	8011ed0 <ucdr_serialize_string>
 800cf52:	4004      	ands	r4, r0
 800cf54:	e7e4      	b.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cf56:	7a31      	ldrb	r1, [r6, #8]
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f7fa fb67 	bl	800762c <ucdr_serialize_uint8_t>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	b158      	cbz	r0, 800cf7a <uxr_serialize_CREATE_Payload+0x9e>
 800cf62:	7a33      	ldrb	r3, [r6, #8]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d034      	beq.n	800cfd2 <uxr_serialize_CREATE_Payload+0xf6>
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d106      	bne.n	800cf7a <uxr_serialize_CREATE_Payload+0x9e>
 800cf6c:	68f2      	ldr	r2, [r6, #12]
 800cf6e:	f106 0110 	add.w	r1, r6, #16
 800cf72:	4638      	mov	r0, r7
 800cf74:	f004 ff80 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800cf78:	4605      	mov	r5, r0
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800cf80:	4638      	mov	r0, r7
 800cf82:	f004 fe85 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800cf86:	4028      	ands	r0, r5
 800cf88:	4004      	ands	r4, r0
 800cf8a:	e7c9      	b.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cf8c:	f106 0108 	add.w	r1, r6, #8
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff f9b9 	bl	800c308 <uxr_serialize_CLIENT_Representation>
 800cf96:	4004      	ands	r4, r0
 800cf98:	e7c2      	b.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cf9a:	f106 0108 	add.w	r1, r6, #8
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	f7ff fa6e 	bl	800c480 <uxr_serialize_AGENT_Representation>
 800cfa4:	4004      	ands	r4, r0
 800cfa6:	e7bb      	b.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cfa8:	7a31      	ldrb	r1, [r6, #8]
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7fa fb3e 	bl	800762c <ucdr_serialize_uint8_t>
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	b130      	cbz	r0, 800cfc2 <uxr_serialize_CREATE_Payload+0xe6>
 800cfb4:	7a33      	ldrb	r3, [r6, #8]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d011      	beq.n	800cfde <uxr_serialize_CREATE_Payload+0x102>
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d015      	beq.n	800cfea <uxr_serialize_CREATE_Payload+0x10e>
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d00d      	beq.n	800cfde <uxr_serialize_CREATE_Payload+0x102>
 800cfc2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7fb f86c 	bl	80080a4 <ucdr_serialize_int16_t>
 800cfcc:	4028      	ands	r0, r5
 800cfce:	4004      	ands	r4, r0
 800cfd0:	e7a6      	b.n	800cf20 <uxr_serialize_CREATE_Payload+0x44>
 800cfd2:	68f1      	ldr	r1, [r6, #12]
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f004 ff7b 	bl	8011ed0 <ucdr_serialize_string>
 800cfda:	4605      	mov	r5, r0
 800cfdc:	e7cd      	b.n	800cf7a <uxr_serialize_CREATE_Payload+0x9e>
 800cfde:	68f1      	ldr	r1, [r6, #12]
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f004 ff75 	bl	8011ed0 <ucdr_serialize_string>
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	e7eb      	b.n	800cfc2 <uxr_serialize_CREATE_Payload+0xe6>
 800cfea:	68f2      	ldr	r2, [r6, #12]
 800cfec:	f106 0110 	add.w	r1, r6, #16
 800cff0:	4638      	mov	r0, r7
 800cff2:	f004 ff41 	bl	8011e78 <ucdr_serialize_sequence_uint8_t>
 800cff6:	4605      	mov	r5, r0
 800cff8:	e7e3      	b.n	800cfc2 <uxr_serialize_CREATE_Payload+0xe6>
 800cffa:	bf00      	nop

0800cffc <uxr_deserialize_GET_INFO_Payload>:
 800cffc:	b570      	push	{r4, r5, r6, lr}
 800cffe:	2202      	movs	r2, #2
 800d000:	4605      	mov	r5, r0
 800d002:	460e      	mov	r6, r1
 800d004:	f004 fea8 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d008:	2202      	movs	r2, #2
 800d00a:	18b1      	adds	r1, r6, r2
 800d00c:	4604      	mov	r4, r0
 800d00e:	4628      	mov	r0, r5
 800d010:	f004 fea2 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d014:	1d31      	adds	r1, r6, #4
 800d016:	4004      	ands	r4, r0
 800d018:	4628      	mov	r0, r5
 800d01a:	f7fa fe4d 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800d01e:	b2e4      	uxtb	r4, r4
 800d020:	4020      	ands	r0, r4
 800d022:	bd70      	pop	{r4, r5, r6, pc}

0800d024 <uxr_serialize_DELETE_Payload>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	2202      	movs	r2, #2
 800d028:	4605      	mov	r5, r0
 800d02a:	460e      	mov	r6, r1
 800d02c:	f004 fe30 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d030:	2202      	movs	r2, #2
 800d032:	4604      	mov	r4, r0
 800d034:	18b1      	adds	r1, r6, r2
 800d036:	4628      	mov	r0, r5
 800d038:	f004 fe2a 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d03c:	4020      	ands	r0, r4
 800d03e:	b2c0      	uxtb	r0, r0
 800d040:	bd70      	pop	{r4, r5, r6, pc}
 800d042:	bf00      	nop

0800d044 <uxr_deserialize_STATUS_AGENT_Payload>:
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	4605      	mov	r5, r0
 800d04a:	460e      	mov	r6, r1
 800d04c:	f7fa fb04 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d050:	1c71      	adds	r1, r6, #1
 800d052:	4604      	mov	r4, r0
 800d054:	4628      	mov	r0, r5
 800d056:	f7fa faff 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d05a:	2204      	movs	r2, #4
 800d05c:	18b1      	adds	r1, r6, r2
 800d05e:	4680      	mov	r8, r0
 800d060:	4628      	mov	r0, r5
 800d062:	f004 fe79 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d066:	f106 0108 	add.w	r1, r6, #8
 800d06a:	4607      	mov	r7, r0
 800d06c:	2202      	movs	r2, #2
 800d06e:	4628      	mov	r0, r5
 800d070:	f004 fe72 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d074:	ea04 0308 	and.w	r3, r4, r8
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	ea03 0407 	and.w	r4, r3, r7
 800d07e:	2202      	movs	r2, #2
 800d080:	4607      	mov	r7, r0
 800d082:	f106 010a 	add.w	r1, r6, #10
 800d086:	4628      	mov	r0, r5
 800d088:	f004 fe66 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d08c:	f106 010c 	add.w	r1, r6, #12
 800d090:	4603      	mov	r3, r0
 800d092:	4628      	mov	r0, r5
 800d094:	461d      	mov	r5, r3
 800d096:	f7fa fab1 	bl	80075fc <ucdr_deserialize_bool>
 800d09a:	403c      	ands	r4, r7
 800d09c:	4025      	ands	r5, r4
 800d09e:	4028      	ands	r0, r5
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0a4 <uxr_deserialize_STATUS_Payload>:
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	460f      	mov	r7, r1
 800d0ae:	f004 fe53 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	18b9      	adds	r1, r7, r2
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f004 fe4d 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d0be:	1d39      	adds	r1, r7, #4
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7fa fac8 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d0c8:	1d79      	adds	r1, r7, #5
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7fa fac3 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d0d2:	ea05 0508 	and.w	r5, r5, r8
 800d0d6:	402c      	ands	r4, r5
 800d0d8:	4020      	ands	r0, r4
 800d0da:	b2c0      	uxtb	r0, r0
 800d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0e0 <uxr_serialize_INFO_Payload>:
 800d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	f004 fdd1 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	18a1      	adds	r1, r4, r2
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	f004 fdcb 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d0fa:	7921      	ldrb	r1, [r4, #4]
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	4628      	mov	r0, r5
 800d100:	f7fa fa94 	bl	800762c <ucdr_serialize_uint8_t>
 800d104:	7961      	ldrb	r1, [r4, #5]
 800d106:	4606      	mov	r6, r0
 800d108:	4628      	mov	r0, r5
 800d10a:	f7fa fa8f 	bl	800762c <ucdr_serialize_uint8_t>
 800d10e:	ea08 0807 	and.w	r8, r8, r7
 800d112:	ea06 0608 	and.w	r6, r6, r8
 800d116:	4006      	ands	r6, r0
 800d118:	7a21      	ldrb	r1, [r4, #8]
 800d11a:	4628      	mov	r0, r5
 800d11c:	f7fa fa58 	bl	80075d0 <ucdr_serialize_bool>
 800d120:	7a23      	ldrb	r3, [r4, #8]
 800d122:	b2f7      	uxtb	r7, r6
 800d124:	4606      	mov	r6, r0
 800d126:	b96b      	cbnz	r3, 800d144 <uxr_serialize_INFO_Payload+0x64>
 800d128:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800d12c:	4628      	mov	r0, r5
 800d12e:	f7fa fa4f 	bl	80075d0 <ucdr_serialize_bool>
 800d132:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800d136:	4030      	ands	r0, r6
 800d138:	b2c6      	uxtb	r6, r0
 800d13a:	b983      	cbnz	r3, 800d15e <uxr_serialize_INFO_Payload+0x7e>
 800d13c:	ea06 0007 	and.w	r0, r6, r7
 800d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d144:	7b21      	ldrb	r1, [r4, #12]
 800d146:	4628      	mov	r0, r5
 800d148:	f7fa fa70 	bl	800762c <ucdr_serialize_uint8_t>
 800d14c:	b188      	cbz	r0, 800d172 <uxr_serialize_INFO_Payload+0x92>
 800d14e:	f104 010c 	add.w	r1, r4, #12
 800d152:	4628      	mov	r0, r5
 800d154:	f7ff fa06 	bl	800c564 <uxr_serialize_ObjectVariant.part.0>
 800d158:	4030      	ands	r0, r6
 800d15a:	b2c6      	uxtb	r6, r0
 800d15c:	e7e4      	b.n	800d128 <uxr_serialize_INFO_Payload+0x48>
 800d15e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800d162:	4628      	mov	r0, r5
 800d164:	f7ff fdb2 	bl	800cccc <uxr_serialize_ActivityInfoVariant>
 800d168:	4006      	ands	r6, r0
 800d16a:	ea06 0007 	and.w	r0, r6, r7
 800d16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d172:	4606      	mov	r6, r0
 800d174:	e7d8      	b.n	800d128 <uxr_serialize_INFO_Payload+0x48>
 800d176:	bf00      	nop

0800d178 <uxr_serialize_READ_DATA_Payload>:
 800d178:	b570      	push	{r4, r5, r6, lr}
 800d17a:	2202      	movs	r2, #2
 800d17c:	4605      	mov	r5, r0
 800d17e:	460e      	mov	r6, r1
 800d180:	f004 fd86 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d184:	2202      	movs	r2, #2
 800d186:	18b1      	adds	r1, r6, r2
 800d188:	4604      	mov	r4, r0
 800d18a:	4628      	mov	r0, r5
 800d18c:	f004 fd80 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d190:	1d31      	adds	r1, r6, #4
 800d192:	4004      	ands	r4, r0
 800d194:	4628      	mov	r0, r5
 800d196:	f7ff fe5d 	bl	800ce54 <uxr_serialize_ReadSpecification>
 800d19a:	b2e4      	uxtb	r4, r4
 800d19c:	4020      	ands	r0, r4
 800d19e:	bd70      	pop	{r4, r5, r6, pc}

0800d1a0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	460e      	mov	r6, r1
 800d1a8:	f004 fd72 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	18b1      	adds	r1, r6, r2
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f004 fd6c 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d1b8:	4020      	ands	r0, r4
 800d1ba:	b2c0      	uxtb	r0, r0
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	bf00      	nop

0800d1c0 <uxr_serialize_ACKNACK_Payload>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	f834 1b02 	ldrh.w	r1, [r4], #2
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	f7fa fa5a 	bl	8007684 <ucdr_serialize_uint16_t>
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f004 fd5a 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d1dc:	7931      	ldrb	r1, [r6, #4]
 800d1de:	4004      	ands	r4, r0
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f7fa fa23 	bl	800762c <ucdr_serialize_uint8_t>
 800d1e6:	b2e4      	uxtb	r4, r4
 800d1e8:	4020      	ands	r0, r4
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}

0800d1ec <uxr_deserialize_ACKNACK_Payload>:
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	460e      	mov	r6, r1
 800d1f2:	f7fa fb47 	bl	8007884 <ucdr_deserialize_uint16_t>
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	18b1      	adds	r1, r6, r2
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f004 fdab 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d202:	1d31      	adds	r1, r6, #4
 800d204:	4004      	ands	r4, r0
 800d206:	4628      	mov	r0, r5
 800d208:	f7fa fa26 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d20c:	b2e4      	uxtb	r4, r4
 800d20e:	4020      	ands	r0, r4
 800d210:	bd70      	pop	{r4, r5, r6, pc}
 800d212:	bf00      	nop

0800d214 <uxr_serialize_HEARTBEAT_Payload>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	460d      	mov	r5, r1
 800d218:	8809      	ldrh	r1, [r1, #0]
 800d21a:	4606      	mov	r6, r0
 800d21c:	f7fa fa32 	bl	8007684 <ucdr_serialize_uint16_t>
 800d220:	8869      	ldrh	r1, [r5, #2]
 800d222:	4604      	mov	r4, r0
 800d224:	4630      	mov	r0, r6
 800d226:	f7fa fa2d 	bl	8007684 <ucdr_serialize_uint16_t>
 800d22a:	7929      	ldrb	r1, [r5, #4]
 800d22c:	4004      	ands	r4, r0
 800d22e:	4630      	mov	r0, r6
 800d230:	f7fa f9fc 	bl	800762c <ucdr_serialize_uint8_t>
 800d234:	b2e4      	uxtb	r4, r4
 800d236:	4020      	ands	r0, r4
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	bf00      	nop

0800d23c <uxr_deserialize_HEARTBEAT_Payload>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4605      	mov	r5, r0
 800d240:	460e      	mov	r6, r1
 800d242:	f7fa fb1f 	bl	8007884 <ucdr_deserialize_uint16_t>
 800d246:	1cb1      	adds	r1, r6, #2
 800d248:	4604      	mov	r4, r0
 800d24a:	4628      	mov	r0, r5
 800d24c:	f7fa fb1a 	bl	8007884 <ucdr_deserialize_uint16_t>
 800d250:	1d31      	adds	r1, r6, #4
 800d252:	4004      	ands	r4, r0
 800d254:	4628      	mov	r0, r5
 800d256:	f7fa f9ff 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d25a:	b2e4      	uxtb	r4, r4
 800d25c:	4020      	ands	r0, r4
 800d25e:	bd70      	pop	{r4, r5, r6, pc}

0800d260 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	4605      	mov	r5, r0
 800d266:	460e      	mov	r6, r1
 800d268:	f7fb f8a8 	bl	80083bc <ucdr_deserialize_int32_t>
 800d26c:	1d31      	adds	r1, r6, #4
 800d26e:	4607      	mov	r7, r0
 800d270:	4628      	mov	r0, r5
 800d272:	f7fa fd21 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800d276:	f106 0108 	add.w	r1, r6, #8
 800d27a:	4680      	mov	r8, r0
 800d27c:	4628      	mov	r0, r5
 800d27e:	f7fb f89d 	bl	80083bc <ucdr_deserialize_int32_t>
 800d282:	f106 010c 	add.w	r1, r6, #12
 800d286:	4604      	mov	r4, r0
 800d288:	4628      	mov	r0, r5
 800d28a:	f7fa fd15 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800d28e:	ea07 0708 	and.w	r7, r7, r8
 800d292:	403c      	ands	r4, r7
 800d294:	f106 0110 	add.w	r1, r6, #16
 800d298:	4004      	ands	r4, r0
 800d29a:	4628      	mov	r0, r5
 800d29c:	f7fb f88e 	bl	80083bc <ucdr_deserialize_int32_t>
 800d2a0:	f106 0114 	add.w	r1, r6, #20
 800d2a4:	4607      	mov	r7, r0
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	f7fa fd06 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800d2ac:	b2e4      	uxtb	r4, r4
 800d2ae:	403c      	ands	r4, r7
 800d2b0:	4020      	ands	r0, r4
 800d2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b6:	bf00      	nop

0800d2b8 <uxr_serialize_SampleIdentity>:
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	220c      	movs	r2, #12
 800d2be:	4604      	mov	r4, r0
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	f004 fce5 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d2c6:	2203      	movs	r2, #3
 800d2c8:	f105 010c 	add.w	r1, r5, #12
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f004 fcde 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 800d2d4:	7be9      	ldrb	r1, [r5, #15]
 800d2d6:	4680      	mov	r8, r0
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f7fa f9a7 	bl	800762c <ucdr_serialize_uint8_t>
 800d2de:	6929      	ldr	r1, [r5, #16]
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7fa ffd2 	bl	800828c <ucdr_serialize_int32_t>
 800d2e8:	6969      	ldr	r1, [r5, #20]
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	ea07 0708 	and.w	r7, r7, r8
 800d2f2:	461c      	mov	r4, r3
 800d2f4:	f7fa fbb0 	bl	8007a58 <ucdr_serialize_uint32_t>
 800d2f8:	403e      	ands	r6, r7
 800d2fa:	4034      	ands	r4, r6
 800d2fc:	4020      	ands	r0, r4
 800d2fe:	b2c0      	uxtb	r0, r0
 800d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d304 <uxr_deserialize_SampleIdentity>:
 800d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d308:	220c      	movs	r2, #12
 800d30a:	4604      	mov	r4, r0
 800d30c:	460d      	mov	r5, r1
 800d30e:	f004 fd23 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d312:	2203      	movs	r2, #3
 800d314:	f105 010c 	add.w	r1, r5, #12
 800d318:	4607      	mov	r7, r0
 800d31a:	4620      	mov	r0, r4
 800d31c:	f004 fd1c 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 800d320:	f105 010f 	add.w	r1, r5, #15
 800d324:	4680      	mov	r8, r0
 800d326:	4620      	mov	r0, r4
 800d328:	f7fa f996 	bl	8007658 <ucdr_deserialize_uint8_t>
 800d32c:	f105 0110 	add.w	r1, r5, #16
 800d330:	4606      	mov	r6, r0
 800d332:	4620      	mov	r0, r4
 800d334:	f7fb f842 	bl	80083bc <ucdr_deserialize_int32_t>
 800d338:	f105 0114 	add.w	r1, r5, #20
 800d33c:	4603      	mov	r3, r0
 800d33e:	4620      	mov	r0, r4
 800d340:	ea07 0708 	and.w	r7, r7, r8
 800d344:	461c      	mov	r4, r3
 800d346:	f7fa fcb7 	bl	8007cb8 <ucdr_deserialize_uint32_t>
 800d34a:	403e      	ands	r6, r7
 800d34c:	4034      	ands	r4, r6
 800d34e:	4020      	ands	r0, r4
 800d350:	b2c0      	uxtb	r0, r0
 800d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d356:	bf00      	nop

0800d358 <rcl_client_get_rmw_handle>:
 800d358:	b118      	cbz	r0, 800d362 <rcl_client_get_rmw_handle+0xa>
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	b108      	cbz	r0, 800d362 <rcl_client_get_rmw_handle+0xa>
 800d35e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d362:	4770      	bx	lr

0800d364 <rcl_send_request>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	b1e8      	cbz	r0, 800d3a6 <rcl_send_request+0x42>
 800d36a:	4604      	mov	r4, r0
 800d36c:	6800      	ldr	r0, [r0, #0]
 800d36e:	b1d0      	cbz	r0, 800d3a6 <rcl_send_request+0x42>
 800d370:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800d374:	b1bb      	cbz	r3, 800d3a6 <rcl_send_request+0x42>
 800d376:	460e      	mov	r6, r1
 800d378:	b1d1      	cbz	r1, 800d3b0 <rcl_send_request+0x4c>
 800d37a:	4615      	mov	r5, r2
 800d37c:	b1c2      	cbz	r2, 800d3b0 <rcl_send_request+0x4c>
 800d37e:	2105      	movs	r1, #5
 800d380:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d384:	f002 fd74 	bl	800fe70 <__atomic_load_8>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	e9c5 0100 	strd	r0, r1, [r5]
 800d38e:	462a      	mov	r2, r5
 800d390:	4631      	mov	r1, r6
 800d392:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d396:	f003 ff1f 	bl	80111d8 <rmw_send_request>
 800d39a:	4606      	mov	r6, r0
 800d39c:	b160      	cbz	r0, 800d3b8 <rcl_send_request+0x54>
 800d39e:	2601      	movs	r6, #1
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	b002      	add	sp, #8
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
 800d3a6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	b002      	add	sp, #8
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	260b      	movs	r6, #11
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	b002      	add	sp, #8
 800d3b6:	bd70      	pop	{r4, r5, r6, pc}
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	2105      	movs	r1, #5
 800d3bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3c0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800d3c4:	9100      	str	r1, [sp, #0]
 800d3c6:	f002 fdbf 	bl	800ff48 <__atomic_exchange_8>
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	b002      	add	sp, #8
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}

0800d3d0 <rcl_take_response>:
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	468e      	mov	lr, r1
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	4616      	mov	r6, r2
 800d3d8:	4605      	mov	r5, r0
 800d3da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3de:	b08c      	sub	sp, #48	@ 0x30
 800d3e0:	f10d 0c18 	add.w	ip, sp, #24
 800d3e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d3ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d3f0:	b35d      	cbz	r5, 800d44a <rcl_take_response+0x7a>
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	b34b      	cbz	r3, 800d44a <rcl_take_response+0x7a>
 800d3f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800d3fa:	b330      	cbz	r0, 800d44a <rcl_take_response+0x7a>
 800d3fc:	b346      	cbz	r6, 800d450 <rcl_take_response+0x80>
 800d3fe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d458 <rcl_take_response+0x88>
 800d402:	2300      	movs	r3, #0
 800d404:	f88d 3007 	strb.w	r3, [sp, #7]
 800d408:	4632      	mov	r2, r6
 800d40a:	f10d 0307 	add.w	r3, sp, #7
 800d40e:	a902      	add	r1, sp, #8
 800d410:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d414:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d418:	f003 ffe6 	bl	80113e8 <rmw_take_response>
 800d41c:	4605      	mov	r5, r0
 800d41e:	b9c8      	cbnz	r0, 800d454 <rcl_take_response+0x84>
 800d420:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d424:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d428:	2a00      	cmp	r2, #0
 800d42a:	bf08      	it	eq
 800d42c:	461d      	moveq	r5, r3
 800d42e:	f10d 0e18 	add.w	lr, sp, #24
 800d432:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d436:	46a4      	mov	ip, r4
 800d438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d43c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d440:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d444:	4628      	mov	r0, r5
 800d446:	b00c      	add	sp, #48	@ 0x30
 800d448:	bd70      	pop	{r4, r5, r6, pc}
 800d44a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800d44e:	e7ee      	b.n	800d42e <rcl_take_response+0x5e>
 800d450:	250b      	movs	r5, #11
 800d452:	e7ec      	b.n	800d42e <rcl_take_response+0x5e>
 800d454:	2501      	movs	r5, #1
 800d456:	e7ea      	b.n	800d42e <rcl_take_response+0x5e>
	...

0800d460 <rcl_client_is_valid>:
 800d460:	b130      	cbz	r0, 800d470 <rcl_client_is_valid+0x10>
 800d462:	6800      	ldr	r0, [r0, #0]
 800d464:	b120      	cbz	r0, 800d470 <rcl_client_is_valid+0x10>
 800d466:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800d46a:	3800      	subs	r0, #0
 800d46c:	bf18      	it	ne
 800d46e:	2001      	movne	r0, #1
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop

0800d474 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d474:	280b      	cmp	r0, #11
 800d476:	dc0d      	bgt.n	800d494 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d478:	2800      	cmp	r0, #0
 800d47a:	db09      	blt.n	800d490 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d47c:	280b      	cmp	r0, #11
 800d47e:	d807      	bhi.n	800d490 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d480:	e8df f000 	tbb	[pc, r0]
 800d484:	07060607 	.word	0x07060607
 800d488:	06060606 	.word	0x06060606
 800d48c:	07070606 	.word	0x07070606
 800d490:	2001      	movs	r0, #1
 800d492:	4770      	bx	lr
 800d494:	28cb      	cmp	r0, #203	@ 0xcb
 800d496:	bf18      	it	ne
 800d498:	2001      	movne	r0, #1
 800d49a:	4770      	bx	lr

0800d49c <rcl_get_zero_initialized_context>:
 800d49c:	4a03      	ldr	r2, [pc, #12]	@ (800d4ac <rcl_get_zero_initialized_context+0x10>)
 800d49e:	4603      	mov	r3, r0
 800d4a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	4770      	bx	lr
 800d4ac:	08015ac0 	.word	0x08015ac0

0800d4b0 <rcl_context_is_valid>:
 800d4b0:	b118      	cbz	r0, 800d4ba <rcl_context_is_valid+0xa>
 800d4b2:	6840      	ldr	r0, [r0, #4]
 800d4b4:	3800      	subs	r0, #0
 800d4b6:	bf18      	it	ne
 800d4b8:	2001      	movne	r0, #1
 800d4ba:	4770      	bx	lr

0800d4bc <__cleanup_context>:
 800d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	6800      	ldr	r0, [r0, #0]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	6073      	str	r3, [r6, #4]
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d049      	beq.n	800d560 <__cleanup_context+0xa4>
 800d4cc:	6947      	ldr	r7, [r0, #20]
 800d4ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d4d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d4d6:	b137      	cbz	r7, 800d4e6 <__cleanup_context+0x2a>
 800d4d8:	3014      	adds	r0, #20
 800d4da:	f000 f9bb 	bl	800d854 <rcl_init_options_fini>
 800d4de:	4607      	mov	r7, r0
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d144      	bne.n	800d56e <__cleanup_context+0xb2>
 800d4e4:	6830      	ldr	r0, [r6, #0]
 800d4e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d4e8:	b143      	cbz	r3, 800d4fc <__cleanup_context+0x40>
 800d4ea:	3028      	adds	r0, #40	@ 0x28
 800d4ec:	f003 fcbc 	bl	8010e68 <rmw_context_fini>
 800d4f0:	b118      	cbz	r0, 800d4fa <__cleanup_context+0x3e>
 800d4f2:	2f00      	cmp	r7, #0
 800d4f4:	d03e      	beq.n	800d574 <__cleanup_context+0xb8>
 800d4f6:	f7fc faab 	bl	8009a50 <rcutils_reset_error>
 800d4fa:	6830      	ldr	r0, [r6, #0]
 800d4fc:	6a03      	ldr	r3, [r0, #32]
 800d4fe:	b1db      	cbz	r3, 800d538 <__cleanup_context+0x7c>
 800d500:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d504:	2a01      	cmp	r2, #1
 800d506:	f17c 0100 	sbcs.w	r1, ip, #0
 800d50a:	db11      	blt.n	800d530 <__cleanup_context+0x74>
 800d50c:	2400      	movs	r4, #0
 800d50e:	4625      	mov	r5, r4
 800d510:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d514:	4649      	mov	r1, r9
 800d516:	b1b8      	cbz	r0, 800d548 <__cleanup_context+0x8c>
 800d518:	47c0      	blx	r8
 800d51a:	6833      	ldr	r3, [r6, #0]
 800d51c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d520:	3401      	adds	r4, #1
 800d522:	f145 0500 	adc.w	r5, r5, #0
 800d526:	4294      	cmp	r4, r2
 800d528:	eb75 010c 	sbcs.w	r1, r5, ip
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	dbef      	blt.n	800d510 <__cleanup_context+0x54>
 800d530:	4618      	mov	r0, r3
 800d532:	4649      	mov	r1, r9
 800d534:	47c0      	blx	r8
 800d536:	6830      	ldr	r0, [r6, #0]
 800d538:	4649      	mov	r1, r9
 800d53a:	47c0      	blx	r8
 800d53c:	2300      	movs	r3, #0
 800d53e:	e9c6 3300 	strd	r3, r3, [r6]
 800d542:	4638      	mov	r0, r7
 800d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d548:	3401      	adds	r4, #1
 800d54a:	f145 0500 	adc.w	r5, r5, #0
 800d54e:	4294      	cmp	r4, r2
 800d550:	eb75 010c 	sbcs.w	r1, r5, ip
 800d554:	dbdc      	blt.n	800d510 <__cleanup_context+0x54>
 800d556:	4618      	mov	r0, r3
 800d558:	4649      	mov	r1, r9
 800d55a:	47c0      	blx	r8
 800d55c:	6830      	ldr	r0, [r6, #0]
 800d55e:	e7eb      	b.n	800d538 <__cleanup_context+0x7c>
 800d560:	4607      	mov	r7, r0
 800d562:	2300      	movs	r3, #0
 800d564:	e9c6 3300 	strd	r3, r3, [r6]
 800d568:	4638      	mov	r0, r7
 800d56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d56e:	f7fc fa6f 	bl	8009a50 <rcutils_reset_error>
 800d572:	e7b7      	b.n	800d4e4 <__cleanup_context+0x28>
 800d574:	f7ff ff7e 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800d578:	4607      	mov	r7, r0
 800d57a:	e7bc      	b.n	800d4f6 <__cleanup_context+0x3a>

0800d57c <rcl_init>:
 800d57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d580:	1e05      	subs	r5, r0, #0
 800d582:	b09e      	sub	sp, #120	@ 0x78
 800d584:	460e      	mov	r6, r1
 800d586:	4690      	mov	r8, r2
 800d588:	461f      	mov	r7, r3
 800d58a:	f340 809c 	ble.w	800d6c6 <rcl_init+0x14a>
 800d58e:	2900      	cmp	r1, #0
 800d590:	f000 809c 	beq.w	800d6cc <rcl_init+0x150>
 800d594:	f1a1 0e04 	sub.w	lr, r1, #4
 800d598:	f04f 0c00 	mov.w	ip, #0
 800d59c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d5a0:	f10c 0c01 	add.w	ip, ip, #1
 800d5a4:	2c00      	cmp	r4, #0
 800d5a6:	f000 8091 	beq.w	800d6cc <rcl_init+0x150>
 800d5aa:	4565      	cmp	r5, ip
 800d5ac:	d1f6      	bne.n	800d59c <rcl_init+0x20>
 800d5ae:	f1b8 0f00 	cmp.w	r8, #0
 800d5b2:	f000 808b 	beq.w	800d6cc <rcl_init+0x150>
 800d5b6:	f8d8 4000 	ldr.w	r4, [r8]
 800d5ba:	2c00      	cmp	r4, #0
 800d5bc:	f000 8086 	beq.w	800d6cc <rcl_init+0x150>
 800d5c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800d5c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	f8cc 3000 	str.w	r3, [ip]
 800d5d0:	a819      	add	r0, sp, #100	@ 0x64
 800d5d2:	f7fc fa17 	bl	8009a04 <rcutils_allocator_is_valid>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d078      	beq.n	800d6cc <rcl_init+0x150>
 800d5da:	2f00      	cmp	r7, #0
 800d5dc:	d076      	beq.n	800d6cc <rcl_init+0x150>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d178      	bne.n	800d6d6 <rcl_init+0x15a>
 800d5e4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800d5e8:	2178      	movs	r1, #120	@ 0x78
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	4798      	blx	r3
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	6038      	str	r0, [r7, #0]
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f000 80b6 	beq.w	800d764 <rcl_init+0x1e8>
 800d5f8:	a802      	add	r0, sp, #8
 800d5fa:	f002 ff89 	bl	8010510 <rmw_get_zero_initialized_context>
 800d5fe:	a902      	add	r1, sp, #8
 800d600:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d604:	2250      	movs	r2, #80	@ 0x50
 800d606:	ac19      	add	r4, sp, #100	@ 0x64
 800d608:	f007 f95b 	bl	80148c2 <memcpy>
 800d60c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d60e:	f8d7 e000 	ldr.w	lr, [r7]
 800d612:	46f4      	mov	ip, lr
 800d614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	f8cc 3000 	str.w	r3, [ip]
 800d61e:	f10e 0114 	add.w	r1, lr, #20
 800d622:	4640      	mov	r0, r8
 800d624:	f000 f940 	bl	800d8a8 <rcl_init_options_copy>
 800d628:	4604      	mov	r4, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d144      	bne.n	800d6b8 <rcl_init+0x13c>
 800d62e:	f8d7 9000 	ldr.w	r9, [r7]
 800d632:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800d636:	f8c9 0020 	str.w	r0, [r9, #32]
 800d63a:	f8c9 5018 	str.w	r5, [r9, #24]
 800d63e:	f8c9 801c 	str.w	r8, [r9, #28]
 800d642:	2d00      	cmp	r5, #0
 800d644:	d04e      	beq.n	800d6e4 <rcl_init+0x168>
 800d646:	2e00      	cmp	r6, #0
 800d648:	d04c      	beq.n	800d6e4 <rcl_init+0x168>
 800d64a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800d64e:	2104      	movs	r1, #4
 800d650:	4628      	mov	r0, r5
 800d652:	4798      	blx	r3
 800d654:	f8c9 0020 	str.w	r0, [r9, #32]
 800d658:	f8d7 9000 	ldr.w	r9, [r7]
 800d65c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d660:	46ca      	mov	sl, r9
 800d662:	b343      	cbz	r3, 800d6b6 <rcl_init+0x13a>
 800d664:	2d01      	cmp	r5, #1
 800d666:	f178 0300 	sbcs.w	r3, r8, #0
 800d66a:	db3b      	blt.n	800d6e4 <rcl_init+0x168>
 800d66c:	2400      	movs	r4, #0
 800d66e:	3e04      	subs	r6, #4
 800d670:	46a1      	mov	r9, r4
 800d672:	e00b      	b.n	800d68c <rcl_init+0x110>
 800d674:	6831      	ldr	r1, [r6, #0]
 800d676:	f007 f924 	bl	80148c2 <memcpy>
 800d67a:	3401      	adds	r4, #1
 800d67c:	f149 0900 	adc.w	r9, r9, #0
 800d680:	45c8      	cmp	r8, r9
 800d682:	bf08      	it	eq
 800d684:	42a5      	cmpeq	r5, r4
 800d686:	d02b      	beq.n	800d6e0 <rcl_init+0x164>
 800d688:	f8d7 a000 	ldr.w	sl, [r7]
 800d68c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d690:	f7f2 fdb0 	bl	80001f4 <strlen>
 800d694:	1c42      	adds	r2, r0, #1
 800d696:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d698:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800d69a:	f8da a020 	ldr.w	sl, [sl, #32]
 800d69e:	9201      	str	r2, [sp, #4]
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	4798      	blx	r3
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	9a01      	ldr	r2, [sp, #4]
 800d6ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d1de      	bne.n	800d674 <rcl_init+0xf8>
 800d6b6:	240a      	movs	r4, #10
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f7ff feff 	bl	800d4bc <__cleanup_context>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	b01e      	add	sp, #120	@ 0x78
 800d6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	f43f af71 	beq.w	800d5ae <rcl_init+0x32>
 800d6cc:	240b      	movs	r4, #11
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	b01e      	add	sp, #120	@ 0x78
 800d6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d6:	2464      	movs	r4, #100	@ 0x64
 800d6d8:	4620      	mov	r0, r4
 800d6da:	b01e      	add	sp, #120	@ 0x78
 800d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e0:	f8d7 9000 	ldr.w	r9, [r7]
 800d6e4:	4926      	ldr	r1, [pc, #152]	@ (800d780 <rcl_init+0x204>)
 800d6e6:	680b      	ldr	r3, [r1, #0]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	d036      	beq.n	800d75a <rcl_init+0x1de>
 800d6ec:	600b      	str	r3, [r1, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	2400      	movs	r4, #0
 800d6f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d6f6:	607b      	str	r3, [r7, #4]
 800d6f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800d700:	d034      	beq.n	800d76c <rcl_init+0x1f0>
 800d702:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800d706:	b93b      	cbnz	r3, 800d718 <rcl_init+0x19c>
 800d708:	3030      	adds	r0, #48	@ 0x30
 800d70a:	f000 f939 	bl	800d980 <rcl_get_localhost_only>
 800d70e:	4604      	mov	r4, r0
 800d710:	2800      	cmp	r0, #0
 800d712:	d1d1      	bne.n	800d6b8 <rcl_init+0x13c>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	6958      	ldr	r0, [r3, #20]
 800d718:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800d71a:	aa18      	add	r2, sp, #96	@ 0x60
 800d71c:	a917      	add	r1, sp, #92	@ 0x5c
 800d71e:	f001 f841 	bl	800e7a4 <rcl_validate_enclave_name>
 800d722:	4604      	mov	r4, r0
 800d724:	2800      	cmp	r0, #0
 800d726:	d1c7      	bne.n	800d6b8 <rcl_init+0x13c>
 800d728:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d72a:	b9eb      	cbnz	r3, 800d768 <rcl_init+0x1ec>
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	694b      	ldr	r3, [r1, #20]
 800d730:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d732:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800d736:	f000 fc3d 	bl	800dfb4 <rcl_get_security_options_from_environment>
 800d73a:	4604      	mov	r4, r0
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d1bb      	bne.n	800d6b8 <rcl_init+0x13c>
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	6948      	ldr	r0, [r1, #20]
 800d744:	3128      	adds	r1, #40	@ 0x28
 800d746:	3018      	adds	r0, #24
 800d748:	f003 fa58 	bl	8010bfc <rmw_init>
 800d74c:	4604      	mov	r4, r0
 800d74e:	2800      	cmp	r0, #0
 800d750:	d0bd      	beq.n	800d6ce <rcl_init+0x152>
 800d752:	f7ff fe8f 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800d756:	4604      	mov	r4, r0
 800d758:	e7ae      	b.n	800d6b8 <rcl_init+0x13c>
 800d75a:	2201      	movs	r2, #1
 800d75c:	461c      	mov	r4, r3
 800d75e:	600a      	str	r2, [r1, #0]
 800d760:	4613      	mov	r3, r2
 800d762:	e7c6      	b.n	800d6f2 <rcl_init+0x176>
 800d764:	240a      	movs	r4, #10
 800d766:	e7b2      	b.n	800d6ce <rcl_init+0x152>
 800d768:	2401      	movs	r4, #1
 800d76a:	e7a5      	b.n	800d6b8 <rcl_init+0x13c>
 800d76c:	3024      	adds	r0, #36	@ 0x24
 800d76e:	f005 ffb3 	bl	80136d8 <rcl_get_default_domain_id>
 800d772:	4604      	mov	r4, r0
 800d774:	2800      	cmp	r0, #0
 800d776:	d19f      	bne.n	800d6b8 <rcl_init+0x13c>
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	6958      	ldr	r0, [r3, #20]
 800d77c:	e7c1      	b.n	800d702 <rcl_init+0x186>
 800d77e:	bf00      	nop
 800d780:	2000db14 	.word	0x2000db14

0800d784 <rcl_get_zero_initialized_init_options>:
 800d784:	2000      	movs	r0, #0
 800d786:	4770      	bx	lr

0800d788 <rcl_init_options_init>:
 800d788:	b084      	sub	sp, #16
 800d78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d78c:	b097      	sub	sp, #92	@ 0x5c
 800d78e:	ae1d      	add	r6, sp, #116	@ 0x74
 800d790:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800d794:	2800      	cmp	r0, #0
 800d796:	d058      	beq.n	800d84a <rcl_init_options_init+0xc2>
 800d798:	6803      	ldr	r3, [r0, #0]
 800d79a:	4605      	mov	r5, r0
 800d79c:	b133      	cbz	r3, 800d7ac <rcl_init_options_init+0x24>
 800d79e:	2464      	movs	r4, #100	@ 0x64
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	b017      	add	sp, #92	@ 0x5c
 800d7a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d7a8:	b004      	add	sp, #16
 800d7aa:	4770      	bx	lr
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	f7fc f929 	bl	8009a04 <rcutils_allocator_is_valid>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d049      	beq.n	800d84a <rcl_init_options_init+0xc2>
 800d7b6:	46b4      	mov	ip, r6
 800d7b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7bc:	ac11      	add	r4, sp, #68	@ 0x44
 800d7be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7c0:	f8dc 3000 	ldr.w	r3, [ip]
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d7c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7ca:	2050      	movs	r0, #80	@ 0x50
 800d7cc:	4798      	blx	r3
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	6028      	str	r0, [r5, #0]
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d03b      	beq.n	800d84e <rcl_init_options_init+0xc6>
 800d7d6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800d7da:	4686      	mov	lr, r0
 800d7dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d7e4:	f8dc 3000 	ldr.w	r3, [ip]
 800d7e8:	f8ce 3000 	str.w	r3, [lr]
 800d7ec:	a802      	add	r0, sp, #8
 800d7ee:	f002 fe9f 	bl	8010530 <rmw_get_zero_initialized_init_options>
 800d7f2:	f10d 0e08 	add.w	lr, sp, #8
 800d7f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d7fa:	f104 0c18 	add.w	ip, r4, #24
 800d7fe:	682f      	ldr	r7, [r5, #0]
 800d800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d804:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d80c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d814:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d818:	ac20      	add	r4, sp, #128	@ 0x80
 800d81a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d81e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d822:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d826:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d82a:	f107 0018 	add.w	r0, r7, #24
 800d82e:	f003 f8ed 	bl	8010a0c <rmw_init_options_init>
 800d832:	4604      	mov	r4, r0
 800d834:	2800      	cmp	r0, #0
 800d836:	d0b3      	beq.n	800d7a0 <rcl_init_options_init+0x18>
 800d838:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800d83a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d83c:	6828      	ldr	r0, [r5, #0]
 800d83e:	4798      	blx	r3
 800d840:	4620      	mov	r0, r4
 800d842:	f7ff fe17 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800d846:	4604      	mov	r4, r0
 800d848:	e7aa      	b.n	800d7a0 <rcl_init_options_init+0x18>
 800d84a:	240b      	movs	r4, #11
 800d84c:	e7a8      	b.n	800d7a0 <rcl_init_options_init+0x18>
 800d84e:	240a      	movs	r4, #10
 800d850:	e7a6      	b.n	800d7a0 <rcl_init_options_init+0x18>
 800d852:	bf00      	nop

0800d854 <rcl_init_options_fini>:
 800d854:	b530      	push	{r4, r5, lr}
 800d856:	b087      	sub	sp, #28
 800d858:	b1f0      	cbz	r0, 800d898 <rcl_init_options_fini+0x44>
 800d85a:	6803      	ldr	r3, [r0, #0]
 800d85c:	4604      	mov	r4, r0
 800d85e:	b1db      	cbz	r3, 800d898 <rcl_init_options_fini+0x44>
 800d860:	469c      	mov	ip, r3
 800d862:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d866:	f10d 0e04 	add.w	lr, sp, #4
 800d86a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d86e:	f8dc 3000 	ldr.w	r3, [ip]
 800d872:	f8ce 3000 	str.w	r3, [lr]
 800d876:	a801      	add	r0, sp, #4
 800d878:	f7fc f8c4 	bl	8009a04 <rcutils_allocator_is_valid>
 800d87c:	b160      	cbz	r0, 800d898 <rcl_init_options_fini+0x44>
 800d87e:	6820      	ldr	r0, [r4, #0]
 800d880:	3018      	adds	r0, #24
 800d882:	f003 f973 	bl	8010b6c <rmw_init_options_fini>
 800d886:	4605      	mov	r5, r0
 800d888:	b950      	cbnz	r0, 800d8a0 <rcl_init_options_fini+0x4c>
 800d88a:	6820      	ldr	r0, [r4, #0]
 800d88c:	9b02      	ldr	r3, [sp, #8]
 800d88e:	9905      	ldr	r1, [sp, #20]
 800d890:	4798      	blx	r3
 800d892:	4628      	mov	r0, r5
 800d894:	b007      	add	sp, #28
 800d896:	bd30      	pop	{r4, r5, pc}
 800d898:	250b      	movs	r5, #11
 800d89a:	4628      	mov	r0, r5
 800d89c:	b007      	add	sp, #28
 800d89e:	bd30      	pop	{r4, r5, pc}
 800d8a0:	f7ff fde8 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	e7f8      	b.n	800d89a <rcl_init_options_fini+0x46>

0800d8a8 <rcl_init_options_copy>:
 800d8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ac:	b094      	sub	sp, #80	@ 0x50
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d058      	beq.n	800d964 <rcl_init_options_copy+0xbc>
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	6800      	ldr	r0, [r0, #0]
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d054      	beq.n	800d964 <rcl_init_options_copy+0xbc>
 800d8ba:	460e      	mov	r6, r1
 800d8bc:	f7fc f8a2 	bl	8009a04 <rcutils_allocator_is_valid>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d04f      	beq.n	800d964 <rcl_init_options_copy+0xbc>
 800d8c4:	2e00      	cmp	r6, #0
 800d8c6:	d04d      	beq.n	800d964 <rcl_init_options_copy+0xbc>
 800d8c8:	6833      	ldr	r3, [r6, #0]
 800d8ca:	b123      	cbz	r3, 800d8d6 <rcl_init_options_copy+0x2e>
 800d8cc:	2464      	movs	r4, #100	@ 0x64
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	b014      	add	sp, #80	@ 0x50
 800d8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d6:	6827      	ldr	r7, [r4, #0]
 800d8d8:	46bc      	mov	ip, r7
 800d8da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8de:	ad0f      	add	r5, sp, #60	@ 0x3c
 800d8e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8e6:	f8d7 8000 	ldr.w	r8, [r7]
 800d8ea:	602b      	str	r3, [r5, #0]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	2050      	movs	r0, #80	@ 0x50
 800d8f0:	47c0      	blx	r8
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	6030      	str	r0, [r6, #0]
 800d8f6:	b3d0      	cbz	r0, 800d96e <rcl_init_options_copy+0xc6>
 800d8f8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800d8fc:	4686      	mov	lr, r0
 800d8fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d902:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d906:	f8dc 3000 	ldr.w	r3, [ip]
 800d90a:	f8ce 3000 	str.w	r3, [lr]
 800d90e:	4668      	mov	r0, sp
 800d910:	f002 fe0e 	bl	8010530 <rmw_get_zero_initialized_init_options>
 800d914:	46ee      	mov	lr, sp
 800d916:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d91a:	f105 0c18 	add.w	ip, r5, #24
 800d91e:	6824      	ldr	r4, [r4, #0]
 800d920:	6835      	ldr	r5, [r6, #0]
 800d922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d92a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d92e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d932:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d936:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d93a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d93e:	f104 0018 	add.w	r0, r4, #24
 800d942:	f105 0118 	add.w	r1, r5, #24
 800d946:	f003 f8c9 	bl	8010adc <rmw_init_options_copy>
 800d94a:	4604      	mov	r4, r0
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d0be      	beq.n	800d8ce <rcl_init_options_copy+0x26>
 800d950:	f7fc f866 	bl	8009a20 <rcutils_get_error_string>
 800d954:	f7fc f87c 	bl	8009a50 <rcutils_reset_error>
 800d958:	4630      	mov	r0, r6
 800d95a:	f7ff ff7b 	bl	800d854 <rcl_init_options_fini>
 800d95e:	b140      	cbz	r0, 800d972 <rcl_init_options_copy+0xca>
 800d960:	4604      	mov	r4, r0
 800d962:	e7b4      	b.n	800d8ce <rcl_init_options_copy+0x26>
 800d964:	240b      	movs	r4, #11
 800d966:	4620      	mov	r0, r4
 800d968:	b014      	add	sp, #80	@ 0x50
 800d96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d96e:	240a      	movs	r4, #10
 800d970:	e7ad      	b.n	800d8ce <rcl_init_options_copy+0x26>
 800d972:	4620      	mov	r0, r4
 800d974:	b014      	add	sp, #80	@ 0x50
 800d976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d97a:	f7ff bd7b 	b.w	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800d97e:	bf00      	nop

0800d980 <rcl_get_localhost_only>:
 800d980:	b510      	push	{r4, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	2300      	movs	r3, #0
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	b1b8      	cbz	r0, 800d9ba <rcl_get_localhost_only+0x3a>
 800d98a:	4604      	mov	r4, r0
 800d98c:	a901      	add	r1, sp, #4
 800d98e:	480c      	ldr	r0, [pc, #48]	@ (800d9c0 <rcl_get_localhost_only+0x40>)
 800d990:	f002 fb12 	bl	800ffb8 <rcutils_get_env>
 800d994:	b110      	cbz	r0, 800d99c <rcl_get_localhost_only+0x1c>
 800d996:	2001      	movs	r0, #1
 800d998:	b002      	add	sp, #8
 800d99a:	bd10      	pop	{r4, pc}
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	b113      	cbz	r3, 800d9a6 <rcl_get_localhost_only+0x26>
 800d9a0:	781a      	ldrb	r2, [r3, #0]
 800d9a2:	2a31      	cmp	r2, #49	@ 0x31
 800d9a4:	d004      	beq.n	800d9b0 <rcl_get_localhost_only+0x30>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	7023      	strb	r3, [r4, #0]
 800d9ac:	b002      	add	sp, #8
 800d9ae:	bd10      	pop	{r4, pc}
 800d9b0:	785b      	ldrb	r3, [r3, #1]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f7      	bne.n	800d9a6 <rcl_get_localhost_only+0x26>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e7f6      	b.n	800d9a8 <rcl_get_localhost_only+0x28>
 800d9ba:	200b      	movs	r0, #11
 800d9bc:	b002      	add	sp, #8
 800d9be:	bd10      	pop	{r4, pc}
 800d9c0:	08015ac8 	.word	0x08015ac8

0800d9c4 <rcl_get_zero_initialized_node>:
 800d9c4:	4a03      	ldr	r2, [pc, #12]	@ (800d9d4 <rcl_get_zero_initialized_node+0x10>)
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	4770      	bx	lr
 800d9d4:	08015af0 	.word	0x08015af0

0800d9d8 <rcl_node_init>:
 800d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9dc:	b0a9      	sub	sp, #164	@ 0xa4
 800d9de:	4604      	mov	r4, r0
 800d9e0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800d9e4:	a823      	add	r0, sp, #140	@ 0x8c
 800d9e6:	460e      	mov	r6, r1
 800d9e8:	4615      	mov	r5, r2
 800d9ea:	461f      	mov	r7, r3
 800d9ec:	f006 f89c 	bl	8013b28 <rcl_guard_condition_get_default_options>
 800d9f0:	f1b8 0f00 	cmp.w	r8, #0
 800d9f4:	f000 80e6 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	f7fc f803 	bl	8009a04 <rcutils_allocator_is_valid>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f000 80e0 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800da04:	2e00      	cmp	r6, #0
 800da06:	f000 80dd 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800da0a:	2d00      	cmp	r5, #0
 800da0c:	f000 80da 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800da10:	2c00      	cmp	r4, #0
 800da12:	f000 80d7 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800da16:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800da1a:	f1b9 0f00 	cmp.w	r9, #0
 800da1e:	f040 80fd 	bne.w	800dc1c <rcl_node_init+0x244>
 800da22:	2f00      	cmp	r7, #0
 800da24:	f000 80ce 	beq.w	800dbc4 <rcl_node_init+0x1ec>
 800da28:	4638      	mov	r0, r7
 800da2a:	f7ff fd41 	bl	800d4b0 <rcl_context_is_valid>
 800da2e:	4682      	mov	sl, r0
 800da30:	2800      	cmp	r0, #0
 800da32:	f000 80cd 	beq.w	800dbd0 <rcl_node_init+0x1f8>
 800da36:	464a      	mov	r2, r9
 800da38:	a922      	add	r1, sp, #136	@ 0x88
 800da3a:	4630      	mov	r0, r6
 800da3c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800da40:	f002 ff18 	bl	8010874 <rmw_validate_node_name>
 800da44:	4681      	mov	r9, r0
 800da46:	2800      	cmp	r0, #0
 800da48:	f040 80be 	bne.w	800dbc8 <rcl_node_init+0x1f0>
 800da4c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800da4e:	2800      	cmp	r0, #0
 800da50:	f040 80f0 	bne.w	800dc34 <rcl_node_init+0x25c>
 800da54:	4628      	mov	r0, r5
 800da56:	f7f2 fbcd 	bl	80001f4 <strlen>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f040 80bb 	bne.w	800dbd6 <rcl_node_init+0x1fe>
 800da60:	4d7c      	ldr	r5, [pc, #496]	@ (800dc54 <rcl_node_init+0x27c>)
 800da62:	a922      	add	r1, sp, #136	@ 0x88
 800da64:	2200      	movs	r2, #0
 800da66:	4628      	mov	r0, r5
 800da68:	f002 fee6 	bl	8010838 <rmw_validate_namespace>
 800da6c:	4681      	mov	r9, r0
 800da6e:	2800      	cmp	r0, #0
 800da70:	f040 80aa 	bne.w	800dbc8 <rcl_node_init+0x1f0>
 800da74:	4682      	mov	sl, r0
 800da76:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800da78:	2800      	cmp	r0, #0
 800da7a:	f040 80e0 	bne.w	800dc3e <rcl_node_init+0x266>
 800da7e:	f8d8 3000 	ldr.w	r3, [r8]
 800da82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800da86:	2078      	movs	r0, #120	@ 0x78
 800da88:	4798      	blx	r3
 800da8a:	4681      	mov	r9, r0
 800da8c:	6060      	str	r0, [r4, #4]
 800da8e:	2800      	cmp	r0, #0
 800da90:	f000 80ca 	beq.w	800dc28 <rcl_node_init+0x250>
 800da94:	2200      	movs	r2, #0
 800da96:	2300      	movs	r3, #0
 800da98:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800da9c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800daa0:	a808      	add	r0, sp, #32
 800daa2:	f000 f907 	bl	800dcb4 <rcl_node_get_default_options>
 800daa6:	a908      	add	r1, sp, #32
 800daa8:	4648      	mov	r0, r9
 800daaa:	2268      	movs	r2, #104	@ 0x68
 800daac:	f006 ff09 	bl	80148c2 <memcpy>
 800dab0:	6861      	ldr	r1, [r4, #4]
 800dab2:	6027      	str	r7, [r4, #0]
 800dab4:	4640      	mov	r0, r8
 800dab6:	f000 f90b 	bl	800dcd0 <rcl_node_options_copy>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d158      	bne.n	800db70 <rcl_node_init+0x198>
 800dabe:	4628      	mov	r0, r5
 800dac0:	f7f2 fb98 	bl	80001f4 <strlen>
 800dac4:	4428      	add	r0, r5
 800dac6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800daca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800dace:	2b2f      	cmp	r3, #47	@ 0x2f
 800dad0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	bf0c      	ite	eq
 800dad8:	4b5f      	ldreq	r3, [pc, #380]	@ (800dc58 <rcl_node_init+0x280>)
 800dada:	4b60      	ldrne	r3, [pc, #384]	@ (800dc5c <rcl_node_init+0x284>)
 800dadc:	9302      	str	r3, [sp, #8]
 800dade:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dae8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800daec:	f002 fa8c 	bl	8010008 <rcutils_format_string_limit>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	4631      	mov	r1, r6
 800dafa:	3028      	adds	r0, #40	@ 0x28
 800dafc:	462a      	mov	r2, r5
 800dafe:	6866      	ldr	r6, [r4, #4]
 800db00:	f003 fad0 	bl	80110a4 <rmw_create_node>
 800db04:	6863      	ldr	r3, [r4, #4]
 800db06:	66b0      	str	r0, [r6, #104]	@ 0x68
 800db08:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d032      	beq.n	800db74 <rcl_node_init+0x19c>
 800db0e:	f003 fb5d 	bl	80111cc <rmw_node_get_graph_guard_condition>
 800db12:	4681      	mov	r9, r0
 800db14:	b360      	cbz	r0, 800db70 <rcl_node_init+0x198>
 800db16:	f8d8 3000 	ldr.w	r3, [r8]
 800db1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db1e:	6866      	ldr	r6, [r4, #4]
 800db20:	2008      	movs	r0, #8
 800db22:	4798      	blx	r3
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800db28:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800db2c:	f1bb 0f00 	cmp.w	fp, #0
 800db30:	d020      	beq.n	800db74 <rcl_node_init+0x19c>
 800db32:	a806      	add	r0, sp, #24
 800db34:	f005 ff68 	bl	8013a08 <rcl_get_zero_initialized_guard_condition>
 800db38:	a806      	add	r0, sp, #24
 800db3a:	c803      	ldmia	r0, {r0, r1}
 800db3c:	6863      	ldr	r3, [r4, #4]
 800db3e:	46c4      	mov	ip, r8
 800db40:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800db44:	e88b 0003 	stmia.w	fp, {r0, r1}
 800db48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db4c:	ae23      	add	r6, sp, #140	@ 0x8c
 800db4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800db50:	f8dc 3000 	ldr.w	r3, [ip]
 800db54:	6033      	str	r3, [r6, #0]
 800db56:	ab28      	add	r3, sp, #160	@ 0xa0
 800db58:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800db5c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800db60:	4649      	mov	r1, r9
 800db62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db64:	463a      	mov	r2, r7
 800db66:	4670      	mov	r0, lr
 800db68:	f005 ff58 	bl	8013a1c <rcl_guard_condition_init_from_rmw>
 800db6c:	4681      	mov	r9, r0
 800db6e:	b328      	cbz	r0, 800dbbc <rcl_node_init+0x1e4>
 800db70:	6863      	ldr	r3, [r4, #4]
 800db72:	b1f3      	cbz	r3, 800dbb2 <rcl_node_init+0x1da>
 800db74:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800db76:	b128      	cbz	r0, 800db84 <rcl_node_init+0x1ac>
 800db78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db7c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db80:	4798      	blx	r3
 800db82:	6863      	ldr	r3, [r4, #4]
 800db84:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800db86:	b110      	cbz	r0, 800db8e <rcl_node_init+0x1b6>
 800db88:	f003 faa4 	bl	80110d4 <rmw_destroy_node>
 800db8c:	6863      	ldr	r3, [r4, #4]
 800db8e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800db90:	b148      	cbz	r0, 800dba6 <rcl_node_init+0x1ce>
 800db92:	f005 ffa3 	bl	8013adc <rcl_guard_condition_fini>
 800db96:	6863      	ldr	r3, [r4, #4]
 800db98:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db9c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800db9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dba2:	4798      	blx	r3
 800dba4:	6863      	ldr	r3, [r4, #4]
 800dba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbb0:	4798      	blx	r3
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e9c4 3300 	strd	r3, r3, [r4]
 800dbb8:	f04f 0901 	mov.w	r9, #1
 800dbbc:	f1ba 0f00 	cmp.w	sl, #0
 800dbc0:	d125      	bne.n	800dc0e <rcl_node_init+0x236>
 800dbc2:	e001      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dbc4:	f04f 090b 	mov.w	r9, #11
 800dbc8:	4648      	mov	r0, r9
 800dbca:	b029      	add	sp, #164	@ 0xa4
 800dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800dbd4:	e7f8      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dbd6:	782b      	ldrb	r3, [r5, #0]
 800dbd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dbda:	f43f af42 	beq.w	800da62 <rcl_node_init+0x8a>
 800dbde:	9503      	str	r5, [sp, #12]
 800dbe0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	4b1e      	ldr	r3, [pc, #120]	@ (800dc60 <rcl_node_init+0x288>)
 800dbe8:	9302      	str	r3, [sp, #8]
 800dbea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dbf4:	f002 fa08 	bl	8010008 <rcutils_format_string_limit>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	b340      	cbz	r0, 800dc4e <rcl_node_init+0x276>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	a922      	add	r1, sp, #136	@ 0x88
 800dc00:	9222      	str	r2, [sp, #136]	@ 0x88
 800dc02:	f002 fe19 	bl	8010838 <rmw_validate_namespace>
 800dc06:	4681      	mov	r9, r0
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	f43f af34 	beq.w	800da76 <rcl_node_init+0x9e>
 800dc0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dc16:	4628      	mov	r0, r5
 800dc18:	4798      	blx	r3
 800dc1a:	e7d5      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dc1c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800dc20:	4648      	mov	r0, r9
 800dc22:	b029      	add	sp, #164	@ 0xa4
 800dc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc28:	f04f 090a 	mov.w	r9, #10
 800dc2c:	f1ba 0f00 	cmp.w	sl, #0
 800dc30:	d1ed      	bne.n	800dc0e <rcl_node_init+0x236>
 800dc32:	e7c9      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dc34:	f002 fe70 	bl	8010918 <rmw_node_name_validation_result_string>
 800dc38:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800dc3c:	e7c4      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dc3e:	f002 fe0d 	bl	801085c <rmw_namespace_validation_result_string>
 800dc42:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800dc46:	f1ba 0f00 	cmp.w	sl, #0
 800dc4a:	d1e0      	bne.n	800dc0e <rcl_node_init+0x236>
 800dc4c:	e7bc      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dc4e:	f04f 090a 	mov.w	r9, #10
 800dc52:	e7b9      	b.n	800dbc8 <rcl_node_init+0x1f0>
 800dc54:	08015ae0 	.word	0x08015ae0
 800dc58:	08015a9c 	.word	0x08015a9c
 800dc5c:	08015ae8 	.word	0x08015ae8
 800dc60:	08015ae4 	.word	0x08015ae4

0800dc64 <rcl_node_is_valid>:
 800dc64:	b130      	cbz	r0, 800dc74 <rcl_node_is_valid+0x10>
 800dc66:	6843      	ldr	r3, [r0, #4]
 800dc68:	b123      	cbz	r3, 800dc74 <rcl_node_is_valid+0x10>
 800dc6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc6c:	b113      	cbz	r3, 800dc74 <rcl_node_is_valid+0x10>
 800dc6e:	6800      	ldr	r0, [r0, #0]
 800dc70:	f7ff bc1e 	b.w	800d4b0 <rcl_context_is_valid>
 800dc74:	2000      	movs	r0, #0
 800dc76:	4770      	bx	lr

0800dc78 <rcl_node_get_name>:
 800dc78:	b120      	cbz	r0, 800dc84 <rcl_node_get_name+0xc>
 800dc7a:	6840      	ldr	r0, [r0, #4]
 800dc7c:	b110      	cbz	r0, 800dc84 <rcl_node_get_name+0xc>
 800dc7e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dc80:	b100      	cbz	r0, 800dc84 <rcl_node_get_name+0xc>
 800dc82:	6880      	ldr	r0, [r0, #8]
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop

0800dc88 <rcl_node_get_namespace>:
 800dc88:	b120      	cbz	r0, 800dc94 <rcl_node_get_namespace+0xc>
 800dc8a:	6840      	ldr	r0, [r0, #4]
 800dc8c:	b110      	cbz	r0, 800dc94 <rcl_node_get_namespace+0xc>
 800dc8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dc90:	b100      	cbz	r0, 800dc94 <rcl_node_get_namespace+0xc>
 800dc92:	68c0      	ldr	r0, [r0, #12]
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop

0800dc98 <rcl_node_get_options>:
 800dc98:	b128      	cbz	r0, 800dca6 <rcl_node_get_options+0xe>
 800dc9a:	6840      	ldr	r0, [r0, #4]
 800dc9c:	b118      	cbz	r0, 800dca6 <rcl_node_get_options+0xe>
 800dc9e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bf08      	it	eq
 800dca4:	2000      	moveq	r0, #0
 800dca6:	4770      	bx	lr

0800dca8 <rcl_node_get_rmw_handle>:
 800dca8:	b110      	cbz	r0, 800dcb0 <rcl_node_get_rmw_handle+0x8>
 800dcaa:	6840      	ldr	r0, [r0, #4]
 800dcac:	b100      	cbz	r0, 800dcb0 <rcl_node_get_rmw_handle+0x8>
 800dcae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop

0800dcb4 <rcl_node_get_default_options>:
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	2268      	movs	r2, #104	@ 0x68
 800dcb8:	4604      	mov	r4, r0
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f006 fd38 	bl	8014730 <memset>
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f7fb fe91 	bl	80099e8 <rcutils_get_default_allocator>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	7523      	strb	r3, [r4, #20]
 800dcca:	4620      	mov	r0, r4
 800dccc:	bd10      	pop	{r4, pc}
 800dcce:	bf00      	nop

0800dcd0 <rcl_node_options_copy>:
 800dcd0:	b1d0      	cbz	r0, 800dd08 <rcl_node_options_copy+0x38>
 800dcd2:	b570      	push	{r4, r5, r6, lr}
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	b1a9      	cbz	r1, 800dd04 <rcl_node_options_copy+0x34>
 800dcd8:	4288      	cmp	r0, r1
 800dcda:	4684      	mov	ip, r0
 800dcdc:	d012      	beq.n	800dd04 <rcl_node_options_copy+0x34>
 800dcde:	4605      	mov	r5, r0
 800dce0:	8a86      	ldrh	r6, [r0, #20]
 800dce2:	468e      	mov	lr, r1
 800dce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dce6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dcea:	682b      	ldr	r3, [r5, #0]
 800dcec:	f8ce 3000 	str.w	r3, [lr]
 800dcf0:	f10c 0118 	add.w	r1, ip, #24
 800dcf4:	2250      	movs	r2, #80	@ 0x50
 800dcf6:	82a6      	strh	r6, [r4, #20]
 800dcf8:	f104 0018 	add.w	r0, r4, #24
 800dcfc:	f006 fde1 	bl	80148c2 <memcpy>
 800dd00:	2000      	movs	r0, #0
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	200b      	movs	r0, #11
 800dd06:	bd70      	pop	{r4, r5, r6, pc}
 800dd08:	200b      	movs	r0, #11
 800dd0a:	4770      	bx	lr

0800dd0c <rcl_node_resolve_name>:
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd12:	b091      	sub	sp, #68	@ 0x44
 800dd14:	ac1a      	add	r4, sp, #104	@ 0x68
 800dd16:	e884 000c 	stmia.w	r4, {r2, r3}
 800dd1a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d03b      	beq.n	800dd9a <rcl_node_resolve_name+0x8e>
 800dd22:	460c      	mov	r4, r1
 800dd24:	4605      	mov	r5, r0
 800dd26:	f7ff ffb7 	bl	800dc98 <rcl_node_get_options>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d037      	beq.n	800dd9e <rcl_node_resolve_name+0x92>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f7ff ffa2 	bl	800dc78 <rcl_node_get_name>
 800dd34:	4606      	mov	r6, r0
 800dd36:	4628      	mov	r0, r5
 800dd38:	f7ff ffa6 	bl	800dc88 <rcl_node_get_namespace>
 800dd3c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800dd40:	4681      	mov	r9, r0
 800dd42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dd46:	ad0b      	add	r5, sp, #44	@ 0x2c
 800dd48:	46ac      	mov	ip, r5
 800dd4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd4e:	f8de 3000 	ldr.w	r3, [lr]
 800dd52:	f8cc 3000 	str.w	r3, [ip]
 800dd56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd58:	b1fb      	cbz	r3, 800dd9a <rcl_node_resolve_name+0x8e>
 800dd5a:	468a      	mov	sl, r1
 800dd5c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800dd60:	f002 faaa 	bl	80102b8 <rcutils_get_zero_initialized_string_map>
 800dd64:	ab10      	add	r3, sp, #64	@ 0x40
 800dd66:	9008      	str	r0, [sp, #32]
 800dd68:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800dd6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dd70:	2100      	movs	r1, #0
 800dd72:	e895 000c 	ldmia.w	r5, {r2, r3}
 800dd76:	a808      	add	r0, sp, #32
 800dd78:	f002 fb16 	bl	80103a8 <rcutils_string_map_init>
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	b180      	cbz	r0, 800dda2 <rcl_node_resolve_name+0x96>
 800dd80:	f7fb fe4e 	bl	8009a20 <rcutils_get_error_string>
 800dd84:	f7fb fe64 	bl	8009a50 <rcutils_reset_error>
 800dd88:	2f0a      	cmp	r7, #10
 800dd8a:	bf18      	it	ne
 800dd8c:	2701      	movne	r7, #1
 800dd8e:	4638      	mov	r0, r7
 800dd90:	b011      	add	sp, #68	@ 0x44
 800dd92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd96:	b002      	add	sp, #8
 800dd98:	4770      	bx	lr
 800dd9a:	270b      	movs	r7, #11
 800dd9c:	e7f7      	b.n	800dd8e <rcl_node_resolve_name+0x82>
 800dd9e:	2701      	movs	r7, #1
 800dda0:	e7f5      	b.n	800dd8e <rcl_node_resolve_name+0x82>
 800dda2:	9009      	str	r0, [sp, #36]	@ 0x24
 800dda4:	9007      	str	r0, [sp, #28]
 800dda6:	a808      	add	r0, sp, #32
 800dda8:	f005 fe28 	bl	80139fc <rcl_get_default_topic_name_substitutions>
 800ddac:	4607      	mov	r7, r0
 800ddae:	b1a8      	cbz	r0, 800dddc <rcl_node_resolve_name+0xd0>
 800ddb0:	280a      	cmp	r0, #10
 800ddb2:	9c07      	ldr	r4, [sp, #28]
 800ddb4:	d000      	beq.n	800ddb8 <rcl_node_resolve_name+0xac>
 800ddb6:	2701      	movs	r7, #1
 800ddb8:	a808      	add	r0, sp, #32
 800ddba:	f002 fb35 	bl	8010428 <rcutils_string_map_fini>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d13d      	bne.n	800de3e <rcl_node_resolve_name+0x132>
 800ddc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddc4:	4659      	mov	r1, fp
 800ddc6:	47d0      	blx	sl
 800ddc8:	4659      	mov	r1, fp
 800ddca:	4620      	mov	r0, r4
 800ddcc:	47d0      	blx	sl
 800ddce:	f1b8 0f00 	cmp.w	r8, #0
 800ddd2:	d0dc      	beq.n	800dd8e <rcl_node_resolve_name+0x82>
 800ddd4:	2f67      	cmp	r7, #103	@ 0x67
 800ddd6:	bf08      	it	eq
 800ddd8:	2768      	moveq	r7, #104	@ 0x68
 800ddda:	e7d8      	b.n	800dd8e <rcl_node_resolve_name+0x82>
 800dddc:	ab09      	add	r3, sp, #36	@ 0x24
 800ddde:	9305      	str	r3, [sp, #20]
 800dde0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dde2:	46ec      	mov	ip, sp
 800dde4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	f8cc 3000 	str.w	r3, [ip]
 800ddee:	464a      	mov	r2, r9
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	ab08      	add	r3, sp, #32
 800ddf6:	f005 fca3 	bl	8013740 <rcl_expand_topic_name>
 800ddfa:	4607      	mov	r7, r0
 800ddfc:	b9b8      	cbnz	r0, 800de2e <rcl_node_resolve_name+0x122>
 800ddfe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800de00:	9009      	str	r0, [sp, #36]	@ 0x24
 800de02:	4602      	mov	r2, r0
 800de04:	a90a      	add	r1, sp, #40	@ 0x28
 800de06:	4620      	mov	r0, r4
 800de08:	f002 fc52 	bl	80106b0 <rmw_validate_full_topic_name>
 800de0c:	b988      	cbnz	r0, 800de32 <rcl_node_resolve_name+0x126>
 800de0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800de10:	b9d5      	cbnz	r5, 800de48 <rcl_node_resolve_name+0x13c>
 800de12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de14:	a808      	add	r0, sp, #32
 800de16:	601c      	str	r4, [r3, #0]
 800de18:	f002 fb06 	bl	8010428 <rcutils_string_map_fini>
 800de1c:	4607      	mov	r7, r0
 800de1e:	b1a8      	cbz	r0, 800de4c <rcl_node_resolve_name+0x140>
 800de20:	f7fb fdfe 	bl	8009a20 <rcutils_get_error_string>
 800de24:	462c      	mov	r4, r5
 800de26:	f7fb fe13 	bl	8009a50 <rcutils_reset_error>
 800de2a:	2701      	movs	r7, #1
 800de2c:	e7c9      	b.n	800ddc2 <rcl_node_resolve_name+0xb6>
 800de2e:	9c07      	ldr	r4, [sp, #28]
 800de30:	e7c2      	b.n	800ddb8 <rcl_node_resolve_name+0xac>
 800de32:	f7fb fdf5 	bl	8009a20 <rcutils_get_error_string>
 800de36:	2701      	movs	r7, #1
 800de38:	f7fb fe0a 	bl	8009a50 <rcutils_reset_error>
 800de3c:	e7bc      	b.n	800ddb8 <rcl_node_resolve_name+0xac>
 800de3e:	f7fb fdef 	bl	8009a20 <rcutils_get_error_string>
 800de42:	f7fb fe05 	bl	8009a50 <rcutils_reset_error>
 800de46:	e7bc      	b.n	800ddc2 <rcl_node_resolve_name+0xb6>
 800de48:	2767      	movs	r7, #103	@ 0x67
 800de4a:	e7b5      	b.n	800ddb8 <rcl_node_resolve_name+0xac>
 800de4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de4e:	4659      	mov	r1, fp
 800de50:	47d0      	blx	sl
 800de52:	4659      	mov	r1, fp
 800de54:	4638      	mov	r0, r7
 800de56:	47d0      	blx	sl
 800de58:	e799      	b.n	800dd8e <rcl_node_resolve_name+0x82>
 800de5a:	bf00      	nop

0800de5c <exact_match_lookup>:
 800de5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5e:	f102 0708 	add.w	r7, r2, #8
 800de62:	460b      	mov	r3, r1
 800de64:	4614      	mov	r4, r2
 800de66:	4606      	mov	r6, r0
 800de68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800de6c:	b085      	sub	sp, #20
 800de6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800de72:	4618      	mov	r0, r3
 800de74:	4919      	ldr	r1, [pc, #100]	@ (800dedc <exact_match_lookup+0x80>)
 800de76:	e894 000c 	ldmia.w	r4, {r2, r3}
 800de7a:	f002 f8b7 	bl	800ffec <rcutils_join_path>
 800de7e:	7833      	ldrb	r3, [r6, #0]
 800de80:	2b2f      	cmp	r3, #47	@ 0x2f
 800de82:	4605      	mov	r5, r0
 800de84:	d023      	beq.n	800dece <exact_match_lookup+0x72>
 800de86:	f104 030c 	add.w	r3, r4, #12
 800de8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800de92:	1c70      	adds	r0, r6, #1
 800de94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800de98:	f002 f8ae 	bl	800fff8 <rcutils_to_native_path>
 800de9c:	4606      	mov	r6, r0
 800de9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800dea2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dea6:	4631      	mov	r1, r6
 800dea8:	e894 000c 	ldmia.w	r4, {r2, r3}
 800deac:	4628      	mov	r0, r5
 800deae:	f002 f89d 	bl	800ffec <rcutils_join_path>
 800deb2:	6862      	ldr	r2, [r4, #4]
 800deb4:	6921      	ldr	r1, [r4, #16]
 800deb6:	4603      	mov	r3, r0
 800deb8:	4630      	mov	r0, r6
 800deba:	461e      	mov	r6, r3
 800debc:	4790      	blx	r2
 800debe:	4628      	mov	r0, r5
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	6921      	ldr	r1, [r4, #16]
 800dec4:	4798      	blx	r3
 800dec6:	4635      	mov	r5, r6
 800dec8:	4628      	mov	r0, r5
 800deca:	b005      	add	sp, #20
 800decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dece:	7873      	ldrb	r3, [r6, #1]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1d8      	bne.n	800de86 <exact_match_lookup+0x2a>
 800ded4:	4628      	mov	r0, r5
 800ded6:	b005      	add	sp, #20
 800ded8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deda:	bf00      	nop
 800dedc:	08015b34 	.word	0x08015b34

0800dee0 <rcl_get_secure_root>:
 800dee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee4:	b085      	sub	sp, #20
 800dee6:	b168      	cbz	r0, 800df04 <rcl_get_secure_root+0x24>
 800dee8:	4607      	mov	r7, r0
 800deea:	4608      	mov	r0, r1
 800deec:	460c      	mov	r4, r1
 800deee:	f7fb fd89 	bl	8009a04 <rcutils_allocator_is_valid>
 800def2:	b138      	cbz	r0, 800df04 <rcl_get_secure_root+0x24>
 800def4:	2300      	movs	r3, #0
 800def6:	482d      	ldr	r0, [pc, #180]	@ (800dfac <rcl_get_secure_root+0xcc>)
 800def8:	9303      	str	r3, [sp, #12]
 800defa:	a903      	add	r1, sp, #12
 800defc:	f002 f85c 	bl	800ffb8 <rcutils_get_env>
 800df00:	4605      	mov	r5, r0
 800df02:	b120      	cbz	r0, 800df0e <rcl_get_secure_root+0x2e>
 800df04:	2500      	movs	r5, #0
 800df06:	4628      	mov	r0, r5
 800df08:	b005      	add	sp, #20
 800df0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	2a00      	cmp	r2, #0
 800df14:	d0f6      	beq.n	800df04 <rcl_get_secure_root+0x24>
 800df16:	f104 090c 	add.w	r9, r4, #12
 800df1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800df1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df22:	4618      	mov	r0, r3
 800df24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800df28:	f002 f988 	bl	801023c <rcutils_strdup>
 800df2c:	4680      	mov	r8, r0
 800df2e:	2800      	cmp	r0, #0
 800df30:	d0e8      	beq.n	800df04 <rcl_get_secure_root+0x24>
 800df32:	481f      	ldr	r0, [pc, #124]	@ (800dfb0 <rcl_get_secure_root+0xd0>)
 800df34:	9503      	str	r5, [sp, #12]
 800df36:	a903      	add	r1, sp, #12
 800df38:	f002 f83e 	bl	800ffb8 <rcutils_get_env>
 800df3c:	b160      	cbz	r0, 800df58 <rcl_get_secure_root+0x78>
 800df3e:	2600      	movs	r6, #0
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	6921      	ldr	r1, [r4, #16]
 800df44:	4630      	mov	r0, r6
 800df46:	4798      	blx	r3
 800df48:	4640      	mov	r0, r8
 800df4a:	6863      	ldr	r3, [r4, #4]
 800df4c:	6921      	ldr	r1, [r4, #16]
 800df4e:	4798      	blx	r3
 800df50:	4628      	mov	r0, r5
 800df52:	b005      	add	sp, #20
 800df54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df58:	9b03      	ldr	r3, [sp, #12]
 800df5a:	781e      	ldrb	r6, [r3, #0]
 800df5c:	b1f6      	cbz	r6, 800df9c <rcl_get_secure_root+0xbc>
 800df5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800df62:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df66:	4618      	mov	r0, r3
 800df68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800df6c:	f002 f966 	bl	801023c <rcutils_strdup>
 800df70:	4606      	mov	r6, r0
 800df72:	2800      	cmp	r0, #0
 800df74:	d0e3      	beq.n	800df3e <rcl_get_secure_root+0x5e>
 800df76:	4622      	mov	r2, r4
 800df78:	4641      	mov	r1, r8
 800df7a:	f7ff ff6f 	bl	800de5c <exact_match_lookup>
 800df7e:	4605      	mov	r5, r0
 800df80:	2d00      	cmp	r5, #0
 800df82:	d0dd      	beq.n	800df40 <rcl_get_secure_root+0x60>
 800df84:	4628      	mov	r0, r5
 800df86:	f002 f82f 	bl	800ffe8 <rcutils_is_directory>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d1d7      	bne.n	800df40 <rcl_get_secure_root+0x60>
 800df90:	4628      	mov	r0, r5
 800df92:	6921      	ldr	r1, [r4, #16]
 800df94:	461d      	mov	r5, r3
 800df96:	6863      	ldr	r3, [r4, #4]
 800df98:	4798      	blx	r3
 800df9a:	e7d1      	b.n	800df40 <rcl_get_secure_root+0x60>
 800df9c:	4622      	mov	r2, r4
 800df9e:	4638      	mov	r0, r7
 800dfa0:	4641      	mov	r1, r8
 800dfa2:	f7ff ff5b 	bl	800de5c <exact_match_lookup>
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	e7ea      	b.n	800df80 <rcl_get_secure_root+0xa0>
 800dfaa:	bf00      	nop
 800dfac:	08015b40 	.word	0x08015b40
 800dfb0:	08015b58 	.word	0x08015b58

0800dfb4 <rcl_get_security_options_from_environment>:
 800dfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	4820      	ldr	r0, [pc, #128]	@ (800e044 <rcl_get_security_options_from_environment+0x90>)
 800dfc2:	9301      	str	r3, [sp, #4]
 800dfc4:	a901      	add	r1, sp, #4
 800dfc6:	4690      	mov	r8, r2
 800dfc8:	f001 fff6 	bl	800ffb8 <rcutils_get_env>
 800dfcc:	b120      	cbz	r0, 800dfd8 <rcl_get_security_options_from_environment+0x24>
 800dfce:	2501      	movs	r5, #1
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	b002      	add	sp, #8
 800dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd8:	491b      	ldr	r1, [pc, #108]	@ (800e048 <rcl_get_security_options_from_environment+0x94>)
 800dfda:	4604      	mov	r4, r0
 800dfdc:	9801      	ldr	r0, [sp, #4]
 800dfde:	f7f2 f8ff 	bl	80001e0 <strcmp>
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	b9e8      	cbnz	r0, 800e022 <rcl_get_security_options_from_environment+0x6e>
 800dfe6:	9001      	str	r0, [sp, #4]
 800dfe8:	f1b8 0f00 	cmp.w	r8, #0
 800dfec:	d020      	beq.n	800e030 <rcl_get_security_options_from_environment+0x7c>
 800dfee:	4817      	ldr	r0, [pc, #92]	@ (800e04c <rcl_get_security_options_from_environment+0x98>)
 800dff0:	a901      	add	r1, sp, #4
 800dff2:	f001 ffe1 	bl	800ffb8 <rcutils_get_env>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d1e9      	bne.n	800dfce <rcl_get_security_options_from_environment+0x1a>
 800dffa:	4915      	ldr	r1, [pc, #84]	@ (800e050 <rcl_get_security_options_from_environment+0x9c>)
 800dffc:	9801      	ldr	r0, [sp, #4]
 800dffe:	f7f2 f8ef 	bl	80001e0 <strcmp>
 800e002:	fab0 f080 	clz	r0, r0
 800e006:	0940      	lsrs	r0, r0, #5
 800e008:	f888 0000 	strb.w	r0, [r8]
 800e00c:	4639      	mov	r1, r7
 800e00e:	4630      	mov	r0, r6
 800e010:	f7ff ff66 	bl	800dee0 <rcl_get_secure_root>
 800e014:	b170      	cbz	r0, 800e034 <rcl_get_security_options_from_environment+0x80>
 800e016:	f8c8 0004 	str.w	r0, [r8, #4]
 800e01a:	4628      	mov	r0, r5
 800e01c:	b002      	add	sp, #8
 800e01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e022:	4625      	mov	r5, r4
 800e024:	4628      	mov	r0, r5
 800e026:	f888 4000 	strb.w	r4, [r8]
 800e02a:	b002      	add	sp, #8
 800e02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e030:	250b      	movs	r5, #11
 800e032:	e7cd      	b.n	800dfd0 <rcl_get_security_options_from_environment+0x1c>
 800e034:	f898 5000 	ldrb.w	r5, [r8]
 800e038:	f1a5 0501 	sub.w	r5, r5, #1
 800e03c:	fab5 f585 	clz	r5, r5
 800e040:	096d      	lsrs	r5, r5, #5
 800e042:	e7c5      	b.n	800dfd0 <rcl_get_security_options_from_environment+0x1c>
 800e044:	08015af8 	.word	0x08015af8
 800e048:	08015b0c 	.word	0x08015b0c
 800e04c:	08015b14 	.word	0x08015b14
 800e050:	08015b2c 	.word	0x08015b2c

0800e054 <rcl_service_get_rmw_handle>:
 800e054:	b118      	cbz	r0, 800e05e <rcl_service_get_rmw_handle+0xa>
 800e056:	6800      	ldr	r0, [r0, #0]
 800e058:	b108      	cbz	r0, 800e05e <rcl_service_get_rmw_handle+0xa>
 800e05a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e05e:	4770      	bx	lr

0800e060 <rcl_take_request>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	468e      	mov	lr, r1
 800e064:	460c      	mov	r4, r1
 800e066:	4616      	mov	r6, r2
 800e068:	4605      	mov	r5, r0
 800e06a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e06e:	b08c      	sub	sp, #48	@ 0x30
 800e070:	f10d 0c18 	add.w	ip, sp, #24
 800e074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e078:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e07c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e080:	b30d      	cbz	r5, 800e0c6 <rcl_take_request+0x66>
 800e082:	682b      	ldr	r3, [r5, #0]
 800e084:	b1fb      	cbz	r3, 800e0c6 <rcl_take_request+0x66>
 800e086:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e08a:	b1e0      	cbz	r0, 800e0c6 <rcl_take_request+0x66>
 800e08c:	b336      	cbz	r6, 800e0dc <rcl_take_request+0x7c>
 800e08e:	2300      	movs	r3, #0
 800e090:	f88d 3007 	strb.w	r3, [sp, #7]
 800e094:	4632      	mov	r2, r6
 800e096:	f10d 0307 	add.w	r3, sp, #7
 800e09a:	a902      	add	r1, sp, #8
 800e09c:	f003 f8ea 	bl	8011274 <rmw_take_request>
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	b198      	cbz	r0, 800e0cc <rcl_take_request+0x6c>
 800e0a4:	280a      	cmp	r0, #10
 800e0a6:	bf18      	it	ne
 800e0a8:	2501      	movne	r5, #1
 800e0aa:	f10d 0e18 	add.w	lr, sp, #24
 800e0ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0b2:	46a4      	mov	ip, r4
 800e0b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e0bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	b00c      	add	sp, #48	@ 0x30
 800e0c4:	bd70      	pop	{r4, r5, r6, pc}
 800e0c6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800e0ca:	e7ee      	b.n	800e0aa <rcl_take_request+0x4a>
 800e0cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0d0:	f240 2359 	movw	r3, #601	@ 0x259
 800e0d4:	2a00      	cmp	r2, #0
 800e0d6:	bf08      	it	eq
 800e0d8:	461d      	moveq	r5, r3
 800e0da:	e7e6      	b.n	800e0aa <rcl_take_request+0x4a>
 800e0dc:	250b      	movs	r5, #11
 800e0de:	e7e4      	b.n	800e0aa <rcl_take_request+0x4a>

0800e0e0 <rcl_send_response>:
 800e0e0:	b170      	cbz	r0, 800e100 <rcl_send_response+0x20>
 800e0e2:	6800      	ldr	r0, [r0, #0]
 800e0e4:	b160      	cbz	r0, 800e100 <rcl_send_response+0x20>
 800e0e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e0ea:	b148      	cbz	r0, 800e100 <rcl_send_response+0x20>
 800e0ec:	b159      	cbz	r1, 800e106 <rcl_send_response+0x26>
 800e0ee:	b510      	push	{r4, lr}
 800e0f0:	b15a      	cbz	r2, 800e10a <rcl_send_response+0x2a>
 800e0f2:	f003 f91d 	bl	8011330 <rmw_send_response>
 800e0f6:	b110      	cbz	r0, 800e0fe <rcl_send_response+0x1e>
 800e0f8:	2802      	cmp	r0, #2
 800e0fa:	bf18      	it	ne
 800e0fc:	2001      	movne	r0, #1
 800e0fe:	bd10      	pop	{r4, pc}
 800e100:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e104:	4770      	bx	lr
 800e106:	200b      	movs	r0, #11
 800e108:	4770      	bx	lr
 800e10a:	200b      	movs	r0, #11
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	bf00      	nop

0800e110 <rcl_service_is_valid>:
 800e110:	b130      	cbz	r0, 800e120 <rcl_service_is_valid+0x10>
 800e112:	6800      	ldr	r0, [r0, #0]
 800e114:	b120      	cbz	r0, 800e120 <rcl_service_is_valid+0x10>
 800e116:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e11a:	3800      	subs	r0, #0
 800e11c:	bf18      	it	ne
 800e11e:	2001      	movne	r0, #1
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <rcl_get_zero_initialized_subscription>:
 800e124:	4b01      	ldr	r3, [pc, #4]	@ (800e12c <rcl_get_zero_initialized_subscription+0x8>)
 800e126:	6818      	ldr	r0, [r3, #0]
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	08015b78 	.word	0x08015b78

0800e130 <rcl_subscription_init>:
 800e130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e134:	b089      	sub	sp, #36	@ 0x24
 800e136:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e138:	b1d6      	cbz	r6, 800e170 <rcl_subscription_init+0x40>
 800e13a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800e13e:	4604      	mov	r4, r0
 800e140:	4648      	mov	r0, r9
 800e142:	460d      	mov	r5, r1
 800e144:	4690      	mov	r8, r2
 800e146:	461f      	mov	r7, r3
 800e148:	f7fb fc5c 	bl	8009a04 <rcutils_allocator_is_valid>
 800e14c:	b180      	cbz	r0, 800e170 <rcl_subscription_init+0x40>
 800e14e:	b17c      	cbz	r4, 800e170 <rcl_subscription_init+0x40>
 800e150:	4628      	mov	r0, r5
 800e152:	f7ff fd87 	bl	800dc64 <rcl_node_is_valid>
 800e156:	2800      	cmp	r0, #0
 800e158:	d054      	beq.n	800e204 <rcl_subscription_init+0xd4>
 800e15a:	f1b8 0f00 	cmp.w	r8, #0
 800e15e:	d007      	beq.n	800e170 <rcl_subscription_init+0x40>
 800e160:	b137      	cbz	r7, 800e170 <rcl_subscription_init+0x40>
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	b14b      	cbz	r3, 800e17a <rcl_subscription_init+0x4a>
 800e166:	2764      	movs	r7, #100	@ 0x64
 800e168:	4638      	mov	r0, r7
 800e16a:	b009      	add	sp, #36	@ 0x24
 800e16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e170:	270b      	movs	r7, #11
 800e172:	4638      	mov	r0, r7
 800e174:	b009      	add	sp, #36	@ 0x24
 800e176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e17e:	aa07      	add	r2, sp, #28
 800e180:	9205      	str	r2, [sp, #20]
 800e182:	9307      	str	r3, [sp, #28]
 800e184:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e188:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e18c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e190:	4639      	mov	r1, r7
 800e192:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e196:	4628      	mov	r0, r5
 800e198:	f7ff fdb8 	bl	800dd0c <rcl_node_resolve_name>
 800e19c:	4607      	mov	r7, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d15f      	bne.n	800e262 <rcl_subscription_init+0x132>
 800e1a2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800e1a6:	21c8      	movs	r1, #200	@ 0xc8
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	4798      	blx	r3
 800e1ac:	6020      	str	r0, [r4, #0]
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d05d      	beq.n	800e26e <rcl_subscription_init+0x13e>
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f7ff fd78 	bl	800dca8 <rcl_node_get_rmw_handle>
 800e1b8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	9a07      	ldr	r2, [sp, #28]
 800e1c0:	6827      	ldr	r7, [r4, #0]
 800e1c2:	4641      	mov	r1, r8
 800e1c4:	4633      	mov	r3, r6
 800e1c6:	f003 f99d 	bl	8011504 <rmw_create_subscription>
 800e1ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800e1ce:	6827      	ldr	r7, [r4, #0]
 800e1d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800e1d4:	b348      	cbz	r0, 800e22a <rcl_subscription_init+0xfa>
 800e1d6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800e1da:	f003 fa75 	bl	80116c8 <rmw_subscription_get_actual_qos>
 800e1de:	4607      	mov	r7, r0
 800e1e0:	b9a8      	cbnz	r0, 800e20e <rcl_subscription_init+0xde>
 800e1e2:	6820      	ldr	r0, [r4, #0]
 800e1e4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e1e8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800e1ec:	2270      	movs	r2, #112	@ 0x70
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	f006 fb67 	bl	80148c2 <memcpy>
 800e1f4:	9807      	ldr	r0, [sp, #28]
 800e1f6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e1f8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e1fa:	4798      	blx	r3
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	b009      	add	sp, #36	@ 0x24
 800e200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e204:	27c8      	movs	r7, #200	@ 0xc8
 800e206:	4638      	mov	r0, r7
 800e208:	b009      	add	sp, #36	@ 0x24
 800e20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e20e:	6827      	ldr	r7, [r4, #0]
 800e210:	b32f      	cbz	r7, 800e25e <rcl_subscription_init+0x12e>
 800e212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e216:	b14b      	cbz	r3, 800e22c <rcl_subscription_init+0xfc>
 800e218:	4628      	mov	r0, r5
 800e21a:	f7ff fd45 	bl	800dca8 <rcl_node_get_rmw_handle>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800e224:	f003 fa60 	bl	80116e8 <rmw_destroy_subscription>
 800e228:	6827      	ldr	r7, [r4, #0]
 800e22a:	b197      	cbz	r7, 800e252 <rcl_subscription_init+0x122>
 800e22c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800e230:	4628      	mov	r0, r5
 800e232:	f7fb fbe7 	bl	8009a04 <rcutils_allocator_is_valid>
 800e236:	b158      	cbz	r0, 800e250 <rcl_subscription_init+0x120>
 800e238:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e23a:	b148      	cbz	r0, 800e250 <rcl_subscription_init+0x120>
 800e23c:	4629      	mov	r1, r5
 800e23e:	f002 f98b 	bl	8010558 <rmw_subscription_content_filter_options_fini>
 800e242:	4605      	mov	r5, r0
 800e244:	b9b8      	cbnz	r0, 800e276 <rcl_subscription_init+0x146>
 800e246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e248:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e24a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e24c:	4798      	blx	r3
 800e24e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800e250:	6827      	ldr	r7, [r4, #0]
 800e252:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e254:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e256:	4638      	mov	r0, r7
 800e258:	4798      	blx	r3
 800e25a:	2300      	movs	r3, #0
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	2701      	movs	r7, #1
 800e260:	e7c8      	b.n	800e1f4 <rcl_subscription_init+0xc4>
 800e262:	2867      	cmp	r0, #103	@ 0x67
 800e264:	d0c6      	beq.n	800e1f4 <rcl_subscription_init+0xc4>
 800e266:	2869      	cmp	r0, #105	@ 0x69
 800e268:	d003      	beq.n	800e272 <rcl_subscription_init+0x142>
 800e26a:	280a      	cmp	r0, #10
 800e26c:	d1f7      	bne.n	800e25e <rcl_subscription_init+0x12e>
 800e26e:	270a      	movs	r7, #10
 800e270:	e7c0      	b.n	800e1f4 <rcl_subscription_init+0xc4>
 800e272:	2767      	movs	r7, #103	@ 0x67
 800e274:	e7be      	b.n	800e1f4 <rcl_subscription_init+0xc4>
 800e276:	f7ff f8fd 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800e27a:	6827      	ldr	r7, [r4, #0]
 800e27c:	e7e9      	b.n	800e252 <rcl_subscription_init+0x122>
 800e27e:	bf00      	nop

0800e280 <rcl_subscription_get_default_options>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	4d14      	ldr	r5, [pc, #80]	@ (800e2d4 <rcl_subscription_get_default_options+0x54>)
 800e284:	4914      	ldr	r1, [pc, #80]	@ (800e2d8 <rcl_subscription_get_default_options+0x58>)
 800e286:	b08a      	sub	sp, #40	@ 0x28
 800e288:	4604      	mov	r4, r0
 800e28a:	2250      	movs	r2, #80	@ 0x50
 800e28c:	4628      	mov	r0, r5
 800e28e:	f006 fb18 	bl	80148c2 <memcpy>
 800e292:	a804      	add	r0, sp, #16
 800e294:	f7fb fba8 	bl	80099e8 <rcutils_get_default_allocator>
 800e298:	f10d 0c10 	add.w	ip, sp, #16
 800e29c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2a0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e2a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e2a8:	466e      	mov	r6, sp
 800e2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e2ae:	f8ce 3000 	str.w	r3, [lr]
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	f002 f96a 	bl	801058c <rmw_get_default_subscription_options>
 800e2b8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e2bc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e2c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e2c4:	2270      	movs	r2, #112	@ 0x70
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f006 fafa 	bl	80148c2 <memcpy>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	b00a      	add	sp, #40	@ 0x28
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}
 800e2d4:	2000db18 	.word	0x2000db18
 800e2d8:	08015b80 	.word	0x08015b80

0800e2dc <rcl_take>:
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d04a      	beq.n	800e376 <rcl_take+0x9a>
 800e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	6800      	ldr	r0, [r0, #0]
 800e2e8:	b0a4      	sub	sp, #144	@ 0x90
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d03b      	beq.n	800e366 <rcl_take+0x8a>
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d036      	beq.n	800e366 <rcl_take+0x8a>
 800e2f8:	460e      	mov	r6, r1
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	d039      	beq.n	800e372 <rcl_take+0x96>
 800e2fe:	4615      	mov	r5, r2
 800e300:	2a00      	cmp	r2, #0
 800e302:	d03c      	beq.n	800e37e <rcl_take+0xa2>
 800e304:	a802      	add	r0, sp, #8
 800e306:	f002 f9cb 	bl	80106a0 <rmw_get_zero_initialized_message_info>
 800e30a:	f10d 0c08 	add.w	ip, sp, #8
 800e30e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e312:	46ae      	mov	lr, r5
 800e314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e318:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e31c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e320:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e324:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e328:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800e32c:	f04f 0800 	mov.w	r8, #0
 800e330:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800e334:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800e338:	6822      	ldr	r2, [r4, #0]
 800e33a:	462b      	mov	r3, r5
 800e33c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800e340:	9700      	str	r7, [sp, #0]
 800e342:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800e346:	4631      	mov	r1, r6
 800e348:	f003 fa2e 	bl	80117a8 <rmw_take_with_info>
 800e34c:	4603      	mov	r3, r0
 800e34e:	b9c0      	cbnz	r0, 800e382 <rcl_take+0xa6>
 800e350:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800e354:	f240 1291 	movw	r2, #401	@ 0x191
 800e358:	2900      	cmp	r1, #0
 800e35a:	bf08      	it	eq
 800e35c:	4613      	moveq	r3, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	b024      	add	sp, #144	@ 0x90
 800e362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e366:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e36a:	4618      	mov	r0, r3
 800e36c:	b024      	add	sp, #144	@ 0x90
 800e36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e372:	230b      	movs	r3, #11
 800e374:	e7f3      	b.n	800e35e <rcl_take+0x82>
 800e376:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e37a:	4618      	mov	r0, r3
 800e37c:	4770      	bx	lr
 800e37e:	ad14      	add	r5, sp, #80	@ 0x50
 800e380:	e7c0      	b.n	800e304 <rcl_take+0x28>
 800e382:	f7ff f877 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800e386:	4603      	mov	r3, r0
 800e388:	e7e9      	b.n	800e35e <rcl_take+0x82>
 800e38a:	bf00      	nop

0800e38c <rcl_subscription_get_rmw_handle>:
 800e38c:	b118      	cbz	r0, 800e396 <rcl_subscription_get_rmw_handle+0xa>
 800e38e:	6800      	ldr	r0, [r0, #0]
 800e390:	b108      	cbz	r0, 800e396 <rcl_subscription_get_rmw_handle+0xa>
 800e392:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800e396:	4770      	bx	lr

0800e398 <rcl_subscription_is_valid>:
 800e398:	b130      	cbz	r0, 800e3a8 <rcl_subscription_is_valid+0x10>
 800e39a:	6800      	ldr	r0, [r0, #0]
 800e39c:	b120      	cbz	r0, 800e3a8 <rcl_subscription_is_valid+0x10>
 800e39e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800e3a2:	3800      	subs	r0, #0
 800e3a4:	bf18      	it	ne
 800e3a6:	2001      	movne	r0, #1
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop

0800e3ac <rcl_get_system_time>:
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	f7fb bb6b 	b.w	8009a88 <rcutils_system_time_now>
 800e3b2:	bf00      	nop

0800e3b4 <rcl_get_steady_time>:
 800e3b4:	4608      	mov	r0, r1
 800e3b6:	f7fb bb8f 	b.w	8009ad8 <rcutils_steady_time_now>
 800e3ba:	bf00      	nop

0800e3bc <rcl_get_ros_time>:
 800e3bc:	7a03      	ldrb	r3, [r0, #8]
 800e3be:	b510      	push	{r4, lr}
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	b133      	cbz	r3, 800e3d2 <rcl_get_ros_time+0x16>
 800e3c4:	2105      	movs	r1, #5
 800e3c6:	f001 fd53 	bl	800fe70 <__atomic_load_8>
 800e3ca:	e9c4 0100 	strd	r0, r1, [r4]
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3d6:	4608      	mov	r0, r1
 800e3d8:	f7fb bb56 	b.w	8009a88 <rcutils_system_time_now>

0800e3dc <rcl_clock_init>:
 800e3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3de:	4605      	mov	r5, r0
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4614      	mov	r4, r2
 800e3e4:	460e      	mov	r6, r1
 800e3e6:	f7fb fb0d 	bl	8009a04 <rcutils_allocator_is_valid>
 800e3ea:	b128      	cbz	r0, 800e3f8 <rcl_clock_init+0x1c>
 800e3ec:	2d03      	cmp	r5, #3
 800e3ee:	d803      	bhi.n	800e3f8 <rcl_clock_init+0x1c>
 800e3f0:	e8df f005 	tbb	[pc, r5]
 800e3f4:	06532e1d 	.word	0x06532e1d
 800e3f8:	f04f 0c0b 	mov.w	ip, #11
 800e3fc:	4660      	mov	r0, ip
 800e3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e400:	2e00      	cmp	r6, #0
 800e402:	d0f9      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e404:	2c00      	cmp	r4, #0
 800e406:	d0f7      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e408:	2300      	movs	r3, #0
 800e40a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e40e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800e4c4 <rcl_clock_init+0xe8>
 800e412:	6133      	str	r3, [r6, #16]
 800e414:	f106 0514 	add.w	r5, r6, #20
 800e418:	469c      	mov	ip, r3
 800e41a:	2703      	movs	r7, #3
 800e41c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e41e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	7037      	strb	r7, [r6, #0]
 800e426:	f8c6 e00c 	str.w	lr, [r6, #12]
 800e42a:	4660      	mov	r0, ip
 800e42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e42e:	2e00      	cmp	r6, #0
 800e430:	d0e2      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e432:	2300      	movs	r3, #0
 800e434:	7033      	strb	r3, [r6, #0]
 800e436:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e43a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800e43e:	469c      	mov	ip, r3
 800e440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e442:	f106 0514 	add.w	r5, r6, #20
 800e446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	602b      	str	r3, [r5, #0]
 800e44c:	4660      	mov	r0, ip
 800e44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e450:	2e00      	cmp	r6, #0
 800e452:	d0d1      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e454:	2c00      	cmp	r4, #0
 800e456:	d0cf      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e458:	2700      	movs	r7, #0
 800e45a:	7037      	strb	r7, [r6, #0]
 800e45c:	46a4      	mov	ip, r4
 800e45e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e462:	f106 0514 	add.w	r5, r6, #20
 800e466:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800e46a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800e46e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e470:	f8dc 3000 	ldr.w	r3, [ip]
 800e474:	602b      	str	r3, [r5, #0]
 800e476:	6921      	ldr	r1, [r4, #16]
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	2010      	movs	r0, #16
 800e47c:	4798      	blx	r3
 800e47e:	6130      	str	r0, [r6, #16]
 800e480:	b1d0      	cbz	r0, 800e4b8 <rcl_clock_init+0xdc>
 800e482:	2200      	movs	r2, #0
 800e484:	2300      	movs	r3, #0
 800e486:	e9c0 2300 	strd	r2, r3, [r0]
 800e48a:	2301      	movs	r3, #1
 800e48c:	7207      	strb	r7, [r0, #8]
 800e48e:	4a0c      	ldr	r2, [pc, #48]	@ (800e4c0 <rcl_clock_init+0xe4>)
 800e490:	7033      	strb	r3, [r6, #0]
 800e492:	46bc      	mov	ip, r7
 800e494:	60f2      	str	r2, [r6, #12]
 800e496:	4660      	mov	r0, ip
 800e498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d0ac      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e49e:	2c00      	cmp	r4, #0
 800e4a0:	d0aa      	beq.n	800e3f8 <rcl_clock_init+0x1c>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800e4a8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800e4c8 <rcl_clock_init+0xec>
 800e4ac:	6133      	str	r3, [r6, #16]
 800e4ae:	f106 0514 	add.w	r5, r6, #20
 800e4b2:	469c      	mov	ip, r3
 800e4b4:	2702      	movs	r7, #2
 800e4b6:	e7b1      	b.n	800e41c <rcl_clock_init+0x40>
 800e4b8:	f04f 0c0a 	mov.w	ip, #10
 800e4bc:	e79e      	b.n	800e3fc <rcl_clock_init+0x20>
 800e4be:	bf00      	nop
 800e4c0:	0800e3bd 	.word	0x0800e3bd
 800e4c4:	0800e3b5 	.word	0x0800e3b5
 800e4c8:	0800e3ad 	.word	0x0800e3ad

0800e4cc <rcl_clock_get_now>:
 800e4cc:	b140      	cbz	r0, 800e4e0 <rcl_clock_get_now+0x14>
 800e4ce:	b139      	cbz	r1, 800e4e0 <rcl_clock_get_now+0x14>
 800e4d0:	7803      	ldrb	r3, [r0, #0]
 800e4d2:	b11b      	cbz	r3, 800e4dc <rcl_clock_get_now+0x10>
 800e4d4:	68c3      	ldr	r3, [r0, #12]
 800e4d6:	b10b      	cbz	r3, 800e4dc <rcl_clock_get_now+0x10>
 800e4d8:	6900      	ldr	r0, [r0, #16]
 800e4da:	4718      	bx	r3
 800e4dc:	2001      	movs	r0, #1
 800e4de:	4770      	bx	lr
 800e4e0:	200b      	movs	r0, #11
 800e4e2:	4770      	bx	lr

0800e4e4 <rcl_timer_call>:
 800e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	b087      	sub	sp, #28
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d06d      	beq.n	800e5ca <rcl_timer_call+0xe6>
 800e4ee:	6803      	ldr	r3, [r0, #0]
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d063      	beq.n	800e5be <rcl_timer_call+0xda>
 800e4f6:	f3bf 8f5b 	dmb	ish
 800e4fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e4fe:	f3bf 8f5b 	dmb	ish
 800e502:	2b00      	cmp	r3, #0
 800e504:	d150      	bne.n	800e5a8 <rcl_timer_call+0xc4>
 800e506:	6803      	ldr	r3, [r0, #0]
 800e508:	a904      	add	r1, sp, #16
 800e50a:	6818      	ldr	r0, [r3, #0]
 800e50c:	f7ff ffde 	bl	800e4cc <rcl_clock_get_now>
 800e510:	4605      	mov	r5, r0
 800e512:	2800      	cmp	r0, #0
 800e514:	d14a      	bne.n	800e5ac <rcl_timer_call+0xc8>
 800e516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	db4a      	blt.n	800e5b4 <rcl_timer_call+0xd0>
 800e51e:	6820      	ldr	r0, [r4, #0]
 800e520:	f04f 0a05 	mov.w	sl, #5
 800e524:	f8cd a000 	str.w	sl, [sp]
 800e528:	3020      	adds	r0, #32
 800e52a:	f001 fd0d 	bl	800ff48 <__atomic_exchange_8>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	f3bf 8f5b 	dmb	ish
 800e534:	4680      	mov	r8, r0
 800e536:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800e53a:	f3bf 8f5b 	dmb	ish
 800e53e:	6820      	ldr	r0, [r4, #0]
 800e540:	4689      	mov	r9, r1
 800e542:	3028      	adds	r0, #40	@ 0x28
 800e544:	4651      	mov	r1, sl
 800e546:	f001 fc93 	bl	800fe70 <__atomic_load_8>
 800e54a:	4606      	mov	r6, r0
 800e54c:	6820      	ldr	r0, [r4, #0]
 800e54e:	460f      	mov	r7, r1
 800e550:	3018      	adds	r0, #24
 800e552:	4651      	mov	r1, sl
 800e554:	f001 fc8c 	bl	800fe70 <__atomic_load_8>
 800e558:	1836      	adds	r6, r6, r0
 800e55a:	4602      	mov	r2, r0
 800e55c:	4682      	mov	sl, r0
 800e55e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800e562:	eb47 0701 	adc.w	r7, r7, r1
 800e566:	4286      	cmp	r6, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	eb77 010c 	sbcs.w	r1, r7, ip
 800e56e:	da04      	bge.n	800e57a <rcl_timer_call+0x96>
 800e570:	ea53 0102 	orrs.w	r1, r3, r2
 800e574:	d12e      	bne.n	800e5d4 <rcl_timer_call+0xf0>
 800e576:	4606      	mov	r6, r0
 800e578:	4667      	mov	r7, ip
 800e57a:	6820      	ldr	r0, [r4, #0]
 800e57c:	2105      	movs	r1, #5
 800e57e:	4632      	mov	r2, r6
 800e580:	463b      	mov	r3, r7
 800e582:	3028      	adds	r0, #40	@ 0x28
 800e584:	9100      	str	r1, [sp, #0]
 800e586:	f001 fca9 	bl	800fedc <__atomic_store_8>
 800e58a:	f1bb 0f00 	cmp.w	fp, #0
 800e58e:	d00d      	beq.n	800e5ac <rcl_timer_call+0xc8>
 800e590:	9a04      	ldr	r2, [sp, #16]
 800e592:	9b05      	ldr	r3, [sp, #20]
 800e594:	ebb2 0208 	subs.w	r2, r2, r8
 800e598:	4620      	mov	r0, r4
 800e59a:	eb63 0309 	sbc.w	r3, r3, r9
 800e59e:	47d8      	blx	fp
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	b007      	add	sp, #28
 800e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	f240 3521 	movw	r5, #801	@ 0x321
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	b007      	add	sp, #28
 800e5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	2501      	movs	r5, #1
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	b007      	add	sp, #28
 800e5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5be:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	b007      	add	sp, #28
 800e5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ca:	250b      	movs	r5, #11
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	b007      	add	sp, #28
 800e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d4:	1b80      	subs	r0, r0, r6
 800e5d6:	eb6c 0107 	sbc.w	r1, ip, r7
 800e5da:	3801      	subs	r0, #1
 800e5dc:	f161 0100 	sbc.w	r1, r1, #0
 800e5e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e5e4:	f7f2 f820 	bl	8000628 <__aeabi_ldivmod>
 800e5e8:	9b02      	ldr	r3, [sp, #8]
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	f141 0100 	adc.w	r1, r1, #0
 800e5f0:	fb00 f303 	mul.w	r3, r0, r3
 800e5f4:	fb01 330a 	mla	r3, r1, sl, r3
 800e5f8:	fba0 0a0a 	umull	r0, sl, r0, sl
 800e5fc:	1986      	adds	r6, r0, r6
 800e5fe:	4453      	add	r3, sl
 800e600:	eb43 0707 	adc.w	r7, r3, r7
 800e604:	e7b9      	b.n	800e57a <rcl_timer_call+0x96>
 800e606:	bf00      	nop

0800e608 <rcl_timer_is_ready>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	b378      	cbz	r0, 800e66e <rcl_timer_is_ready+0x66>
 800e60e:	6803      	ldr	r3, [r0, #0]
 800e610:	4604      	mov	r4, r0
 800e612:	b383      	cbz	r3, 800e676 <rcl_timer_is_ready+0x6e>
 800e614:	460d      	mov	r5, r1
 800e616:	b351      	cbz	r1, 800e66e <rcl_timer_is_ready+0x66>
 800e618:	f3bf 8f5b 	dmb	ish
 800e61c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e620:	f3bf 8f5b 	dmb	ish
 800e624:	b953      	cbnz	r3, 800e63c <rcl_timer_is_ready+0x34>
 800e626:	6803      	ldr	r3, [r0, #0]
 800e628:	4669      	mov	r1, sp
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	f7ff ff4e 	bl	800e4cc <rcl_clock_get_now>
 800e630:	4606      	mov	r6, r0
 800e632:	b140      	cbz	r0, 800e646 <rcl_timer_is_ready+0x3e>
 800e634:	f240 3321 	movw	r3, #801	@ 0x321
 800e638:	4298      	cmp	r0, r3
 800e63a:	d101      	bne.n	800e640 <rcl_timer_is_ready+0x38>
 800e63c:	2600      	movs	r6, #0
 800e63e:	702e      	strb	r6, [r5, #0]
 800e640:	4630      	mov	r0, r6
 800e642:	b002      	add	sp, #8
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	6820      	ldr	r0, [r4, #0]
 800e648:	2105      	movs	r1, #5
 800e64a:	3028      	adds	r0, #40	@ 0x28
 800e64c:	f001 fc10 	bl	800fe70 <__atomic_load_8>
 800e650:	9b00      	ldr	r3, [sp, #0]
 800e652:	1ac0      	subs	r0, r0, r3
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	eb61 0103 	sbc.w	r1, r1, r3
 800e65a:	2801      	cmp	r0, #1
 800e65c:	f171 0300 	sbcs.w	r3, r1, #0
 800e660:	bfb4      	ite	lt
 800e662:	2301      	movlt	r3, #1
 800e664:	2300      	movge	r3, #0
 800e666:	4630      	mov	r0, r6
 800e668:	702b      	strb	r3, [r5, #0]
 800e66a:	b002      	add	sp, #8
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	260b      	movs	r6, #11
 800e670:	4630      	mov	r0, r6
 800e672:	b002      	add	sp, #8
 800e674:	bd70      	pop	{r4, r5, r6, pc}
 800e676:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800e67a:	e7e1      	b.n	800e640 <rcl_timer_is_ready+0x38>

0800e67c <rcl_timer_get_time_until_next_call>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	b330      	cbz	r0, 800e6d0 <rcl_timer_get_time_until_next_call+0x54>
 800e682:	6803      	ldr	r3, [r0, #0]
 800e684:	4604      	mov	r4, r0
 800e686:	b33b      	cbz	r3, 800e6d8 <rcl_timer_get_time_until_next_call+0x5c>
 800e688:	460d      	mov	r5, r1
 800e68a:	b309      	cbz	r1, 800e6d0 <rcl_timer_get_time_until_next_call+0x54>
 800e68c:	f3bf 8f5b 	dmb	ish
 800e690:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e694:	f3bf 8f5b 	dmb	ish
 800e698:	b9ab      	cbnz	r3, 800e6c6 <rcl_timer_get_time_until_next_call+0x4a>
 800e69a:	6803      	ldr	r3, [r0, #0]
 800e69c:	4669      	mov	r1, sp
 800e69e:	6818      	ldr	r0, [r3, #0]
 800e6a0:	f7ff ff14 	bl	800e4cc <rcl_clock_get_now>
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	b958      	cbnz	r0, 800e6c0 <rcl_timer_get_time_until_next_call+0x44>
 800e6a8:	6820      	ldr	r0, [r4, #0]
 800e6aa:	2105      	movs	r1, #5
 800e6ac:	3028      	adds	r0, #40	@ 0x28
 800e6ae:	f001 fbdf 	bl	800fe70 <__atomic_load_8>
 800e6b2:	9b00      	ldr	r3, [sp, #0]
 800e6b4:	1ac0      	subs	r0, r0, r3
 800e6b6:	9b01      	ldr	r3, [sp, #4]
 800e6b8:	6028      	str	r0, [r5, #0]
 800e6ba:	eb61 0103 	sbc.w	r1, r1, r3
 800e6be:	6069      	str	r1, [r5, #4]
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	b002      	add	sp, #8
 800e6c4:	bd70      	pop	{r4, r5, r6, pc}
 800e6c6:	f240 3621 	movw	r6, #801	@ 0x321
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	b002      	add	sp, #8
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}
 800e6d0:	260b      	movs	r6, #11
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800e6dc:	e7f0      	b.n	800e6c0 <rcl_timer_get_time_until_next_call+0x44>
 800e6de:	bf00      	nop

0800e6e0 <rcl_timer_get_guard_condition>:
 800e6e0:	b130      	cbz	r0, 800e6f0 <rcl_timer_get_guard_condition+0x10>
 800e6e2:	6800      	ldr	r0, [r0, #0]
 800e6e4:	b120      	cbz	r0, 800e6f0 <rcl_timer_get_guard_condition+0x10>
 800e6e6:	68c3      	ldr	r3, [r0, #12]
 800e6e8:	b10b      	cbz	r3, 800e6ee <rcl_timer_get_guard_condition+0xe>
 800e6ea:	3008      	adds	r0, #8
 800e6ec:	4770      	bx	lr
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop

0800e6f4 <rcl_validate_enclave_name_with_size>:
 800e6f4:	b378      	cbz	r0, 800e756 <rcl_validate_enclave_name_with_size+0x62>
 800e6f6:	b570      	push	{r4, r5, r6, lr}
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	b0c2      	sub	sp, #264	@ 0x108
 800e6fc:	b302      	cbz	r2, 800e740 <rcl_validate_enclave_name_with_size+0x4c>
 800e6fe:	461e      	mov	r6, r3
 800e700:	466a      	mov	r2, sp
 800e702:	ab01      	add	r3, sp, #4
 800e704:	460c      	mov	r4, r1
 800e706:	f002 f849 	bl	801079c <rmw_validate_namespace_with_size>
 800e70a:	4684      	mov	ip, r0
 800e70c:	b9e8      	cbnz	r0, 800e74a <rcl_validate_enclave_name_with_size+0x56>
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	b923      	cbnz	r3, 800e71c <rcl_validate_enclave_name_with_size+0x28>
 800e712:	2300      	movs	r3, #0
 800e714:	602b      	str	r3, [r5, #0]
 800e716:	4660      	mov	r0, ip
 800e718:	b042      	add	sp, #264	@ 0x108
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	2b07      	cmp	r3, #7
 800e71e:	d007      	beq.n	800e730 <rcl_validate_enclave_name_with_size+0x3c>
 800e720:	1e5a      	subs	r2, r3, #1
 800e722:	2a05      	cmp	r2, #5
 800e724:	d833      	bhi.n	800e78e <rcl_validate_enclave_name_with_size+0x9a>
 800e726:	e8df f002 	tbb	[pc, r2]
 800e72a:	2c2f      	.short	0x2c2f
 800e72c:	1a232629 	.word	0x1a232629
 800e730:	2cff      	cmp	r4, #255	@ 0xff
 800e732:	d9ee      	bls.n	800e712 <rcl_validate_enclave_name_with_size+0x1e>
 800e734:	602b      	str	r3, [r5, #0]
 800e736:	2e00      	cmp	r6, #0
 800e738:	d0ed      	beq.n	800e716 <rcl_validate_enclave_name_with_size+0x22>
 800e73a:	23fe      	movs	r3, #254	@ 0xfe
 800e73c:	6033      	str	r3, [r6, #0]
 800e73e:	e7ea      	b.n	800e716 <rcl_validate_enclave_name_with_size+0x22>
 800e740:	f04f 0c0b 	mov.w	ip, #11
 800e744:	4660      	mov	r0, ip
 800e746:	b042      	add	sp, #264	@ 0x108
 800e748:	bd70      	pop	{r4, r5, r6, pc}
 800e74a:	f7fe fe93 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 800e74e:	4684      	mov	ip, r0
 800e750:	4660      	mov	r0, ip
 800e752:	b042      	add	sp, #264	@ 0x108
 800e754:	bd70      	pop	{r4, r5, r6, pc}
 800e756:	f04f 0c0b 	mov.w	ip, #11
 800e75a:	4660      	mov	r0, ip
 800e75c:	4770      	bx	lr
 800e75e:	2306      	movs	r3, #6
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	2e00      	cmp	r6, #0
 800e764:	d0d7      	beq.n	800e716 <rcl_validate_enclave_name_with_size+0x22>
 800e766:	9b01      	ldr	r3, [sp, #4]
 800e768:	6033      	str	r3, [r6, #0]
 800e76a:	4660      	mov	r0, ip
 800e76c:	b042      	add	sp, #264	@ 0x108
 800e76e:	bd70      	pop	{r4, r5, r6, pc}
 800e770:	2305      	movs	r3, #5
 800e772:	602b      	str	r3, [r5, #0]
 800e774:	e7f5      	b.n	800e762 <rcl_validate_enclave_name_with_size+0x6e>
 800e776:	2304      	movs	r3, #4
 800e778:	602b      	str	r3, [r5, #0]
 800e77a:	e7f2      	b.n	800e762 <rcl_validate_enclave_name_with_size+0x6e>
 800e77c:	2303      	movs	r3, #3
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	e7ef      	b.n	800e762 <rcl_validate_enclave_name_with_size+0x6e>
 800e782:	2302      	movs	r3, #2
 800e784:	602b      	str	r3, [r5, #0]
 800e786:	e7ec      	b.n	800e762 <rcl_validate_enclave_name_with_size+0x6e>
 800e788:	2301      	movs	r3, #1
 800e78a:	602b      	str	r3, [r5, #0]
 800e78c:	e7e9      	b.n	800e762 <rcl_validate_enclave_name_with_size+0x6e>
 800e78e:	4a04      	ldr	r2, [pc, #16]	@ (800e7a0 <rcl_validate_enclave_name_with_size+0xac>)
 800e790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e794:	a802      	add	r0, sp, #8
 800e796:	f001 fd25 	bl	80101e4 <rcutils_snprintf>
 800e79a:	f04f 0c01 	mov.w	ip, #1
 800e79e:	e7ba      	b.n	800e716 <rcl_validate_enclave_name_with_size+0x22>
 800e7a0:	08015bd0 	.word	0x08015bd0

0800e7a4 <rcl_validate_enclave_name>:
 800e7a4:	b168      	cbz	r0, 800e7c2 <rcl_validate_enclave_name+0x1e>
 800e7a6:	b570      	push	{r4, r5, r6, lr}
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	4616      	mov	r6, r2
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	f7f1 fd21 	bl	80001f4 <strlen>
 800e7b2:	4633      	mov	r3, r6
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	462a      	mov	r2, r5
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7be:	f7ff bf99 	b.w	800e6f4 <rcl_validate_enclave_name_with_size>
 800e7c2:	200b      	movs	r0, #11
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop

0800e7c8 <rcl_get_zero_initialized_wait_set>:
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	4c08      	ldr	r4, [pc, #32]	@ (800e7ec <rcl_get_zero_initialized_wait_set+0x24>)
 800e7cc:	4686      	mov	lr, r0
 800e7ce:	4684      	mov	ip, r0
 800e7d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	f8cc 3000 	str.w	r3, [ip]
 800e7e8:	4670      	mov	r0, lr
 800e7ea:	bd10      	pop	{r4, pc}
 800e7ec:	08015c30 	.word	0x08015c30

0800e7f0 <rcl_wait_set_is_valid>:
 800e7f0:	b118      	cbz	r0, 800e7fa <rcl_wait_set_is_valid+0xa>
 800e7f2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e7f4:	3800      	subs	r0, #0
 800e7f6:	bf18      	it	ne
 800e7f8:	2001      	movne	r0, #1
 800e7fa:	4770      	bx	lr

0800e7fc <rcl_wait_set_fini>:
 800e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	2800      	cmp	r0, #0
 800e804:	f000 8095 	beq.w	800e932 <rcl_wait_set_fini+0x136>
 800e808:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800e80a:	4604      	mov	r4, r0
 800e80c:	2e00      	cmp	r6, #0
 800e80e:	f000 808c 	beq.w	800e92a <rcl_wait_set_fini+0x12e>
 800e812:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800e814:	f003 f9b6 	bl	8011b84 <rmw_destroy_wait_set>
 800e818:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e81a:	1e06      	subs	r6, r0, #0
 800e81c:	bf18      	it	ne
 800e81e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800e822:	2d00      	cmp	r5, #0
 800e824:	f000 8081 	beq.w	800e92a <rcl_wait_set_fini+0x12e>
 800e828:	6820      	ldr	r0, [r4, #0]
 800e82a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800e82e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e830:	2700      	movs	r7, #0
 800e832:	6067      	str	r7, [r4, #4]
 800e834:	602f      	str	r7, [r5, #0]
 800e836:	b120      	cbz	r0, 800e842 <rcl_wait_set_fini+0x46>
 800e838:	9101      	str	r1, [sp, #4]
 800e83a:	47c0      	blx	r8
 800e83c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e83e:	9901      	ldr	r1, [sp, #4]
 800e840:	6027      	str	r7, [r4, #0]
 800e842:	68a8      	ldr	r0, [r5, #8]
 800e844:	b120      	cbz	r0, 800e850 <rcl_wait_set_fini+0x54>
 800e846:	47c0      	blx	r8
 800e848:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e84a:	2300      	movs	r3, #0
 800e84c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800e850:	68a0      	ldr	r0, [r4, #8]
 800e852:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800e854:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e856:	f04f 0800 	mov.w	r8, #0
 800e85a:	f8c4 800c 	str.w	r8, [r4, #12]
 800e85e:	f8c5 800c 	str.w	r8, [r5, #12]
 800e862:	b128      	cbz	r0, 800e870 <rcl_wait_set_fini+0x74>
 800e864:	47b8      	blx	r7
 800e866:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e868:	f8c4 8008 	str.w	r8, [r4, #8]
 800e86c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800e86e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e870:	6968      	ldr	r0, [r5, #20]
 800e872:	f04f 0800 	mov.w	r8, #0
 800e876:	f8c5 8010 	str.w	r8, [r5, #16]
 800e87a:	b128      	cbz	r0, 800e888 <rcl_wait_set_fini+0x8c>
 800e87c:	47b8      	blx	r7
 800e87e:	f8c5 8014 	str.w	r8, [r5, #20]
 800e882:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e884:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800e886:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e888:	6920      	ldr	r0, [r4, #16]
 800e88a:	f04f 0800 	mov.w	r8, #0
 800e88e:	f8c4 8014 	str.w	r8, [r4, #20]
 800e892:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800e896:	b128      	cbz	r0, 800e8a4 <rcl_wait_set_fini+0xa8>
 800e898:	47b8      	blx	r7
 800e89a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e89c:	f8c4 8010 	str.w	r8, [r4, #16]
 800e8a0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800e8a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e8a4:	69a0      	ldr	r0, [r4, #24]
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	f8c4 801c 	str.w	r8, [r4, #28]
 800e8ae:	f8c5 8018 	str.w	r8, [r5, #24]
 800e8b2:	b128      	cbz	r0, 800e8c0 <rcl_wait_set_fini+0xc4>
 800e8b4:	9101      	str	r1, [sp, #4]
 800e8b6:	47b8      	blx	r7
 800e8b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e8ba:	9901      	ldr	r1, [sp, #4]
 800e8bc:	f8c4 8018 	str.w	r8, [r4, #24]
 800e8c0:	6a28      	ldr	r0, [r5, #32]
 800e8c2:	b120      	cbz	r0, 800e8ce <rcl_wait_set_fini+0xd2>
 800e8c4:	47b8      	blx	r7
 800e8c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800e8ce:	6a20      	ldr	r0, [r4, #32]
 800e8d0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800e8d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e8d6:	2700      	movs	r7, #0
 800e8d8:	6267      	str	r7, [r4, #36]	@ 0x24
 800e8da:	626f      	str	r7, [r5, #36]	@ 0x24
 800e8dc:	b120      	cbz	r0, 800e8e8 <rcl_wait_set_fini+0xec>
 800e8de:	9101      	str	r1, [sp, #4]
 800e8e0:	47c0      	blx	r8
 800e8e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e8e4:	9901      	ldr	r1, [sp, #4]
 800e8e6:	6227      	str	r7, [r4, #32]
 800e8e8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800e8ea:	b120      	cbz	r0, 800e8f6 <rcl_wait_set_fini+0xfa>
 800e8ec:	47c0      	blx	r8
 800e8ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800e8f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e8f8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800e8fc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e8fe:	2700      	movs	r7, #0
 800e900:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800e902:	632f      	str	r7, [r5, #48]	@ 0x30
 800e904:	b120      	cbz	r0, 800e910 <rcl_wait_set_fini+0x114>
 800e906:	9101      	str	r1, [sp, #4]
 800e908:	47c0      	blx	r8
 800e90a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e90c:	9901      	ldr	r1, [sp, #4]
 800e90e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800e910:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800e912:	b120      	cbz	r0, 800e91e <rcl_wait_set_fini+0x122>
 800e914:	47c0      	blx	r8
 800e916:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800e918:	2300      	movs	r3, #0
 800e91a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800e91e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e920:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800e922:	4628      	mov	r0, r5
 800e924:	4798      	blx	r3
 800e926:	2300      	movs	r3, #0
 800e928:	6323      	str	r3, [r4, #48]	@ 0x30
 800e92a:	4630      	mov	r0, r6
 800e92c:	b002      	add	sp, #8
 800e92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e932:	260b      	movs	r6, #11
 800e934:	4630      	mov	r0, r6
 800e936:	b002      	add	sp, #8
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e93c <rcl_wait_set_add_subscription>:
 800e93c:	b318      	cbz	r0, 800e986 <rcl_wait_set_add_subscription+0x4a>
 800e93e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	4604      	mov	r4, r0
 800e944:	b30b      	cbz	r3, 800e98a <rcl_wait_set_add_subscription+0x4e>
 800e946:	b319      	cbz	r1, 800e990 <rcl_wait_set_add_subscription+0x54>
 800e948:	681d      	ldr	r5, [r3, #0]
 800e94a:	6840      	ldr	r0, [r0, #4]
 800e94c:	4285      	cmp	r5, r0
 800e94e:	d217      	bcs.n	800e980 <rcl_wait_set_add_subscription+0x44>
 800e950:	6820      	ldr	r0, [r4, #0]
 800e952:	1c6e      	adds	r6, r5, #1
 800e954:	601e      	str	r6, [r3, #0]
 800e956:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800e95a:	b102      	cbz	r2, 800e95e <rcl_wait_set_add_subscription+0x22>
 800e95c:	6015      	str	r5, [r2, #0]
 800e95e:	4608      	mov	r0, r1
 800e960:	f7ff fd14 	bl	800e38c <rcl_subscription_get_rmw_handle>
 800e964:	b150      	cbz	r0, 800e97c <rcl_wait_set_add_subscription+0x40>
 800e966:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e968:	6842      	ldr	r2, [r0, #4]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e970:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e972:	6853      	ldr	r3, [r2, #4]
 800e974:	3301      	adds	r3, #1
 800e976:	2000      	movs	r0, #0
 800e978:	6053      	str	r3, [r2, #4]
 800e97a:	bd70      	pop	{r4, r5, r6, pc}
 800e97c:	2001      	movs	r0, #1
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	f240 3086 	movw	r0, #902	@ 0x386
 800e984:	bd70      	pop	{r4, r5, r6, pc}
 800e986:	200b      	movs	r0, #11
 800e988:	4770      	bx	lr
 800e98a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	200b      	movs	r0, #11
 800e992:	bd70      	pop	{r4, r5, r6, pc}

0800e994 <rcl_wait_set_clear>:
 800e994:	2800      	cmp	r0, #0
 800e996:	d073      	beq.n	800ea80 <rcl_wait_set_clear+0xec>
 800e998:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d070      	beq.n	800ea84 <rcl_wait_set_clear+0xf0>
 800e9a2:	6800      	ldr	r0, [r0, #0]
 800e9a4:	b138      	cbz	r0, 800e9b6 <rcl_wait_set_clear+0x22>
 800e9a6:	6862      	ldr	r2, [r4, #4]
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	0092      	lsls	r2, r2, #2
 800e9ac:	f005 fec0 	bl	8014730 <memset>
 800e9b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	68a0      	ldr	r0, [r4, #8]
 800e9b8:	b138      	cbz	r0, 800e9ca <rcl_wait_set_clear+0x36>
 800e9ba:	68e2      	ldr	r2, [r4, #12]
 800e9bc:	2100      	movs	r1, #0
 800e9be:	0092      	lsls	r2, r2, #2
 800e9c0:	f005 feb6 	bl	8014730 <memset>
 800e9c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	69a0      	ldr	r0, [r4, #24]
 800e9cc:	b138      	cbz	r0, 800e9de <rcl_wait_set_clear+0x4a>
 800e9ce:	69e2      	ldr	r2, [r4, #28]
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	0092      	lsls	r2, r2, #2
 800e9d4:	f005 feac 	bl	8014730 <memset>
 800e9d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e9da:	2200      	movs	r2, #0
 800e9dc:	619a      	str	r2, [r3, #24]
 800e9de:	6a20      	ldr	r0, [r4, #32]
 800e9e0:	b138      	cbz	r0, 800e9f2 <rcl_wait_set_clear+0x5e>
 800e9e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	0092      	lsls	r2, r2, #2
 800e9e8:	f005 fea2 	bl	8014730 <memset>
 800e9ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e9f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e9f4:	b138      	cbz	r0, 800ea06 <rcl_wait_set_clear+0x72>
 800e9f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	0092      	lsls	r2, r2, #2
 800e9fc:	f005 fe98 	bl	8014730 <memset>
 800ea00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea02:	2200      	movs	r2, #0
 800ea04:	631a      	str	r2, [r3, #48]	@ 0x30
 800ea06:	6920      	ldr	r0, [r4, #16]
 800ea08:	b138      	cbz	r0, 800ea1a <rcl_wait_set_clear+0x86>
 800ea0a:	6962      	ldr	r2, [r4, #20]
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	0092      	lsls	r2, r2, #2
 800ea10:	f005 fe8e 	bl	8014730 <memset>
 800ea14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea16:	2200      	movs	r2, #0
 800ea18:	641a      	str	r2, [r3, #64]	@ 0x40
 800ea1a:	6898      	ldr	r0, [r3, #8]
 800ea1c:	b138      	cbz	r0, 800ea2e <rcl_wait_set_clear+0x9a>
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	2100      	movs	r1, #0
 800ea22:	0092      	lsls	r2, r2, #2
 800ea24:	f005 fe84 	bl	8014730 <memset>
 800ea28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	605a      	str	r2, [r3, #4]
 800ea2e:	6958      	ldr	r0, [r3, #20]
 800ea30:	b138      	cbz	r0, 800ea42 <rcl_wait_set_clear+0xae>
 800ea32:	691a      	ldr	r2, [r3, #16]
 800ea34:	2100      	movs	r1, #0
 800ea36:	0092      	lsls	r2, r2, #2
 800ea38:	f005 fe7a 	bl	8014730 <memset>
 800ea3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea3e:	2200      	movs	r2, #0
 800ea40:	611a      	str	r2, [r3, #16]
 800ea42:	6a18      	ldr	r0, [r3, #32]
 800ea44:	b138      	cbz	r0, 800ea56 <rcl_wait_set_clear+0xc2>
 800ea46:	69da      	ldr	r2, [r3, #28]
 800ea48:	2100      	movs	r1, #0
 800ea4a:	0092      	lsls	r2, r2, #2
 800ea4c:	f005 fe70 	bl	8014730 <memset>
 800ea50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea52:	2200      	movs	r2, #0
 800ea54:	61da      	str	r2, [r3, #28]
 800ea56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ea58:	b138      	cbz	r0, 800ea6a <rcl_wait_set_clear+0xd6>
 800ea5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	0092      	lsls	r2, r2, #2
 800ea60:	f005 fe66 	bl	8014730 <memset>
 800ea64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea66:	2200      	movs	r2, #0
 800ea68:	629a      	str	r2, [r3, #40]	@ 0x28
 800ea6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ea6c:	b138      	cbz	r0, 800ea7e <rcl_wait_set_clear+0xea>
 800ea6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea70:	2100      	movs	r1, #0
 800ea72:	0092      	lsls	r2, r2, #2
 800ea74:	f005 fe5c 	bl	8014730 <memset>
 800ea78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	6358      	str	r0, [r3, #52]	@ 0x34
 800ea7e:	bd10      	pop	{r4, pc}
 800ea80:	200b      	movs	r0, #11
 800ea82:	4770      	bx	lr
 800ea84:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop

0800ea8c <rcl_wait_set_resize>:
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	f000 8185 	beq.w	800ed9c <rcl_wait_set_resize+0x310>
 800ea92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea96:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800ea98:	b083      	sub	sp, #12
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	2c00      	cmp	r4, #0
 800ea9e:	f000 817f 	beq.w	800eda0 <rcl_wait_set_resize+0x314>
 800eaa2:	f04f 0900 	mov.w	r9, #0
 800eaa6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800eaaa:	461f      	mov	r7, r3
 800eaac:	4688      	mov	r8, r1
 800eaae:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800eab2:	4616      	mov	r6, r2
 800eab4:	f8c0 9004 	str.w	r9, [r0, #4]
 800eab8:	f8c4 9000 	str.w	r9, [r4]
 800eabc:	2900      	cmp	r1, #0
 800eabe:	f000 80bd 	beq.w	800ec3c <rcl_wait_set_resize+0x1b0>
 800eac2:	008c      	lsls	r4, r1, #2
 800eac4:	6800      	ldr	r0, [r0, #0]
 800eac6:	9301      	str	r3, [sp, #4]
 800eac8:	4652      	mov	r2, sl
 800eaca:	4621      	mov	r1, r4
 800eacc:	4798      	blx	r3
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	6028      	str	r0, [r5, #0]
 800ead2:	2800      	cmp	r0, #0
 800ead4:	f000 80cb 	beq.w	800ec6e <rcl_wait_set_resize+0x1e2>
 800ead8:	4622      	mov	r2, r4
 800eada:	4649      	mov	r1, r9
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	f005 fe27 	bl	8014730 <memset>
 800eae2:	f8c5 8004 	str.w	r8, [r5, #4]
 800eae6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800eaea:	9b01      	ldr	r3, [sp, #4]
 800eaec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800eaf0:	f8c8 9004 	str.w	r9, [r8, #4]
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4798      	blx	r3
 800eafa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800eafc:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80ac 	beq.w	800ec60 <rcl_wait_set_resize+0x1d4>
 800eb08:	4622      	mov	r2, r4
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f005 fe0f 	bl	8014730 <memset>
 800eb12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eb14:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800eb18:	f04f 0800 	mov.w	r8, #0
 800eb1c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800eb20:	f8c5 800c 	str.w	r8, [r5, #12]
 800eb24:	f8c4 800c 	str.w	r8, [r4, #12]
 800eb28:	2e00      	cmp	r6, #0
 800eb2a:	f040 80a4 	bne.w	800ec76 <rcl_wait_set_resize+0x1ea>
 800eb2e:	68a8      	ldr	r0, [r5, #8]
 800eb30:	b128      	cbz	r0, 800eb3e <rcl_wait_set_resize+0xb2>
 800eb32:	4649      	mov	r1, r9
 800eb34:	4790      	blx	r2
 800eb36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eb38:	60ae      	str	r6, [r5, #8]
 800eb3a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800eb3e:	f04f 0800 	mov.w	r8, #0
 800eb42:	19f6      	adds	r6, r6, r7
 800eb44:	f8c4 8010 	str.w	r8, [r4, #16]
 800eb48:	f040 80ac 	bne.w	800eca4 <rcl_wait_set_resize+0x218>
 800eb4c:	6960      	ldr	r0, [r4, #20]
 800eb4e:	b130      	cbz	r0, 800eb5e <rcl_wait_set_resize+0xd2>
 800eb50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800eb52:	4649      	mov	r1, r9
 800eb54:	4798      	blx	r3
 800eb56:	6166      	str	r6, [r4, #20]
 800eb58:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eb5a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800eb5e:	2600      	movs	r6, #0
 800eb60:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800eb64:	616e      	str	r6, [r5, #20]
 800eb66:	6426      	str	r6, [r4, #64]	@ 0x40
 800eb68:	2f00      	cmp	r7, #0
 800eb6a:	f040 80ad 	bne.w	800ecc8 <rcl_wait_set_resize+0x23c>
 800eb6e:	6928      	ldr	r0, [r5, #16]
 800eb70:	b138      	cbz	r0, 800eb82 <rcl_wait_set_resize+0xf6>
 800eb72:	4649      	mov	r1, r9
 800eb74:	47d0      	blx	sl
 800eb76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eb78:	612f      	str	r7, [r5, #16]
 800eb7a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800eb7e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800eb82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb84:	2600      	movs	r6, #0
 800eb86:	61ee      	str	r6, [r5, #28]
 800eb88:	61a6      	str	r6, [r4, #24]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f040 80af 	bne.w	800ecee <rcl_wait_set_resize+0x262>
 800eb90:	69a8      	ldr	r0, [r5, #24]
 800eb92:	b120      	cbz	r0, 800eb9e <rcl_wait_set_resize+0x112>
 800eb94:	4649      	mov	r1, r9
 800eb96:	47d0      	blx	sl
 800eb98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eb9c:	61ab      	str	r3, [r5, #24]
 800eb9e:	6a20      	ldr	r0, [r4, #32]
 800eba0:	b128      	cbz	r0, 800ebae <rcl_wait_set_resize+0x122>
 800eba2:	4649      	mov	r1, r9
 800eba4:	47d0      	blx	sl
 800eba6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800eba8:	2300      	movs	r3, #0
 800ebaa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ebae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ebb0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800ebb2:	2600      	movs	r6, #0
 800ebb4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800ebb8:	626e      	str	r6, [r5, #36]	@ 0x24
 800ebba:	6266      	str	r6, [r4, #36]	@ 0x24
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 80b6 	beq.w	800ed2e <rcl_wait_set_resize+0x2a2>
 800ebc2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800ebc6:	6a28      	ldr	r0, [r5, #32]
 800ebc8:	463a      	mov	r2, r7
 800ebca:	4651      	mov	r1, sl
 800ebcc:	47c8      	blx	r9
 800ebce:	6228      	str	r0, [r5, #32]
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d04c      	beq.n	800ec6e <rcl_wait_set_resize+0x1e2>
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	f005 fdaa 	bl	8014730 <memset>
 800ebdc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ebde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ebe0:	626b      	str	r3, [r5, #36]	@ 0x24
 800ebe2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800ebe4:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ebe6:	463a      	mov	r2, r7
 800ebe8:	4651      	mov	r1, sl
 800ebea:	47c8      	blx	r9
 800ebec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ebee:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800ebf0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800ebf2:	2c00      	cmp	r4, #0
 800ebf4:	f000 80f0 	beq.w	800edd8 <rcl_wait_set_resize+0x34c>
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	4652      	mov	r2, sl
 800ebfc:	4631      	mov	r1, r6
 800ebfe:	f005 fd97 	bl	8014730 <memset>
 800ec02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ec04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec06:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800ec08:	2600      	movs	r6, #0
 800ec0a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800ec0e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800ec10:	6326      	str	r6, [r4, #48]	@ 0x30
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f040 809d 	bne.w	800ed52 <rcl_wait_set_resize+0x2c6>
 800ec18:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800ec1a:	b120      	cbz	r0, 800ec26 <rcl_wait_set_resize+0x19a>
 800ec1c:	4639      	mov	r1, r7
 800ec1e:	47c0      	blx	r8
 800ec20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ec24:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ec26:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800ec28:	b310      	cbz	r0, 800ec70 <rcl_wait_set_resize+0x1e4>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	47c0      	blx	r8
 800ec2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ec30:	2000      	movs	r0, #0
 800ec32:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800ec36:	b003      	add	sp, #12
 800ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3c:	6800      	ldr	r0, [r0, #0]
 800ec3e:	b120      	cbz	r0, 800ec4a <rcl_wait_set_resize+0x1be>
 800ec40:	4651      	mov	r1, sl
 800ec42:	47d8      	blx	fp
 800ec44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ec46:	f8c5 8000 	str.w	r8, [r5]
 800ec4a:	68a0      	ldr	r0, [r4, #8]
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	f43f af61 	beq.w	800eb14 <rcl_wait_set_resize+0x88>
 800ec52:	4651      	mov	r1, sl
 800ec54:	47d8      	blx	fp
 800ec56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800ec5e:	e759      	b.n	800eb14 <rcl_wait_set_resize+0x88>
 800ec60:	6828      	ldr	r0, [r5, #0]
 800ec62:	9301      	str	r3, [sp, #4]
 800ec64:	4651      	mov	r1, sl
 800ec66:	47d8      	blx	fp
 800ec68:	9b01      	ldr	r3, [sp, #4]
 800ec6a:	e9c5 3300 	strd	r3, r3, [r5]
 800ec6e:	200a      	movs	r0, #10
 800ec70:	b003      	add	sp, #12
 800ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec76:	00b4      	lsls	r4, r6, #2
 800ec78:	68a8      	ldr	r0, [r5, #8]
 800ec7a:	464a      	mov	r2, r9
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	4798      	blx	r3
 800ec80:	60a8      	str	r0, [r5, #8]
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0f3      	beq.n	800ec6e <rcl_wait_set_resize+0x1e2>
 800ec86:	4622      	mov	r2, r4
 800ec88:	4641      	mov	r1, r8
 800ec8a:	f005 fd51 	bl	8014730 <memset>
 800ec8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ec90:	60ee      	str	r6, [r5, #12]
 800ec92:	f04f 0800 	mov.w	r8, #0
 800ec96:	19f6      	adds	r6, r6, r7
 800ec98:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ec9c:	f8c4 8010 	str.w	r8, [r4, #16]
 800eca0:	f43f af54 	beq.w	800eb4c <rcl_wait_set_resize+0xc0>
 800eca4:	00b6      	lsls	r6, r6, #2
 800eca6:	464a      	mov	r2, r9
 800eca8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ecaa:	6960      	ldr	r0, [r4, #20]
 800ecac:	4631      	mov	r1, r6
 800ecae:	4798      	blx	r3
 800ecb0:	4681      	mov	r9, r0
 800ecb2:	6160      	str	r0, [r4, #20]
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d076      	beq.n	800eda6 <rcl_wait_set_resize+0x31a>
 800ecb8:	4632      	mov	r2, r6
 800ecba:	4641      	mov	r1, r8
 800ecbc:	f005 fd38 	bl	8014730 <memset>
 800ecc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ecc2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ecc6:	e74a      	b.n	800eb5e <rcl_wait_set_resize+0xd2>
 800ecc8:	00bc      	lsls	r4, r7, #2
 800ecca:	6928      	ldr	r0, [r5, #16]
 800eccc:	464a      	mov	r2, r9
 800ecce:	4621      	mov	r1, r4
 800ecd0:	47c0      	blx	r8
 800ecd2:	6128      	str	r0, [r5, #16]
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0ca      	beq.n	800ec6e <rcl_wait_set_resize+0x1e2>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	4631      	mov	r1, r6
 800ecdc:	f005 fd28 	bl	8014730 <memset>
 800ece0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ece2:	616f      	str	r7, [r5, #20]
 800ece4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800ece8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800ecec:	e749      	b.n	800eb82 <rcl_wait_set_resize+0xf6>
 800ecee:	009c      	lsls	r4, r3, #2
 800ecf0:	69a8      	ldr	r0, [r5, #24]
 800ecf2:	464a      	mov	r2, r9
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	47c0      	blx	r8
 800ecf8:	61a8      	str	r0, [r5, #24]
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	d0b7      	beq.n	800ec6e <rcl_wait_set_resize+0x1e2>
 800ecfe:	4622      	mov	r2, r4
 800ed00:	4631      	mov	r1, r6
 800ed02:	f005 fd15 	bl	8014730 <memset>
 800ed06:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800ed08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed0a:	61eb      	str	r3, [r5, #28]
 800ed0c:	6a38      	ldr	r0, [r7, #32]
 800ed0e:	61fe      	str	r6, [r7, #28]
 800ed10:	464a      	mov	r2, r9
 800ed12:	4621      	mov	r1, r4
 800ed14:	47c0      	blx	r8
 800ed16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ed18:	6238      	str	r0, [r7, #32]
 800ed1a:	6a1f      	ldr	r7, [r3, #32]
 800ed1c:	2f00      	cmp	r7, #0
 800ed1e:	d054      	beq.n	800edca <rcl_wait_set_resize+0x33e>
 800ed20:	4622      	mov	r2, r4
 800ed22:	4631      	mov	r1, r6
 800ed24:	4638      	mov	r0, r7
 800ed26:	f005 fd03 	bl	8014730 <memset>
 800ed2a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ed2c:	e73f      	b.n	800ebae <rcl_wait_set_resize+0x122>
 800ed2e:	6a28      	ldr	r0, [r5, #32]
 800ed30:	b120      	cbz	r0, 800ed3c <rcl_wait_set_resize+0x2b0>
 800ed32:	4639      	mov	r1, r7
 800ed34:	47c0      	blx	r8
 800ed36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ed3a:	622b      	str	r3, [r5, #32]
 800ed3c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f43f af60 	beq.w	800ec04 <rcl_wait_set_resize+0x178>
 800ed44:	4639      	mov	r1, r7
 800ed46:	47c0      	blx	r8
 800ed48:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800ed50:	e758      	b.n	800ec04 <rcl_wait_set_resize+0x178>
 800ed52:	009c      	lsls	r4, r3, #2
 800ed54:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800ed56:	463a      	mov	r2, r7
 800ed58:	4621      	mov	r1, r4
 800ed5a:	47c8      	blx	r9
 800ed5c:	62a8      	str	r0, [r5, #40]	@ 0x28
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	d085      	beq.n	800ec6e <rcl_wait_set_resize+0x1e2>
 800ed62:	4622      	mov	r2, r4
 800ed64:	4631      	mov	r1, r6
 800ed66:	f005 fce3 	bl	8014730 <memset>
 800ed6a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800ed6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed70:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800ed72:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800ed76:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800ed7a:	463a      	mov	r2, r7
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	47c8      	blx	r9
 800ed80:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ed82:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800ed86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed88:	b36b      	cbz	r3, 800ede6 <rcl_wait_set_resize+0x35a>
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f005 fcce 	bl	8014730 <memset>
 800ed94:	4630      	mov	r0, r6
 800ed96:	b003      	add	sp, #12
 800ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9c:	200b      	movs	r0, #11
 800ed9e:	4770      	bx	lr
 800eda0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800eda4:	e764      	b.n	800ec70 <rcl_wait_set_resize+0x1e4>
 800eda6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800eda8:	68a8      	ldr	r0, [r5, #8]
 800edaa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800edac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edae:	4798      	blx	r3
 800edb0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800edb2:	6928      	ldr	r0, [r5, #16]
 800edb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edb6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800edb8:	f8c5 900c 	str.w	r9, [r5, #12]
 800edbc:	f8c5 9008 	str.w	r9, [r5, #8]
 800edc0:	4790      	blx	r2
 800edc2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800edc6:	200a      	movs	r0, #10
 800edc8:	e752      	b.n	800ec70 <rcl_wait_set_resize+0x1e4>
 800edca:	69a8      	ldr	r0, [r5, #24]
 800edcc:	4649      	mov	r1, r9
 800edce:	47d0      	blx	sl
 800edd0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800edd4:	200a      	movs	r0, #10
 800edd6:	e74b      	b.n	800ec70 <rcl_wait_set_resize+0x1e4>
 800edd8:	6a28      	ldr	r0, [r5, #32]
 800edda:	4639      	mov	r1, r7
 800eddc:	47c0      	blx	r8
 800edde:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800ede2:	200a      	movs	r0, #10
 800ede4:	e744      	b.n	800ec70 <rcl_wait_set_resize+0x1e4>
 800ede6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	4639      	mov	r1, r7
 800edec:	47c0      	blx	r8
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	200a      	movs	r0, #10
 800edf2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800edf6:	e73b      	b.n	800ec70 <rcl_wait_set_resize+0x1e4>

0800edf8 <rcl_wait_set_init>:
 800edf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	4604      	mov	r4, r0
 800ee00:	a810      	add	r0, sp, #64	@ 0x40
 800ee02:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800ee06:	460f      	mov	r7, r1
 800ee08:	4690      	mov	r8, r2
 800ee0a:	4699      	mov	r9, r3
 800ee0c:	f7fa fdfa 	bl	8009a04 <rcutils_allocator_is_valid>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d06b      	beq.n	800eeec <rcl_wait_set_init+0xf4>
 800ee14:	2c00      	cmp	r4, #0
 800ee16:	d069      	beq.n	800eeec <rcl_wait_set_init+0xf4>
 800ee18:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ee1a:	b125      	cbz	r5, 800ee26 <rcl_wait_set_init+0x2e>
 800ee1c:	2564      	movs	r5, #100	@ 0x64
 800ee1e:	4628      	mov	r0, r5
 800ee20:	b004      	add	sp, #16
 800ee22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee26:	f1ba 0f00 	cmp.w	sl, #0
 800ee2a:	d05f      	beq.n	800eeec <rcl_wait_set_init+0xf4>
 800ee2c:	4650      	mov	r0, sl
 800ee2e:	f7fe fb3f 	bl	800d4b0 <rcl_context_is_valid>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d067      	beq.n	800ef06 <rcl_wait_set_init+0x10e>
 800ee36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee38:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ee3a:	205c      	movs	r0, #92	@ 0x5c
 800ee3c:	4798      	blx	r3
 800ee3e:	6320      	str	r0, [r4, #48]	@ 0x30
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d062      	beq.n	800ef0a <rcl_wait_set_init+0x112>
 800ee44:	4629      	mov	r1, r5
 800ee46:	225c      	movs	r2, #92	@ 0x5c
 800ee48:	f005 fc72 	bl	8014730 <memset>
 800ee4c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800ee50:	eb03 0e02 	add.w	lr, r3, r2
 800ee54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee56:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800ee58:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800ee5c:	449e      	add	lr, r3
 800ee5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee62:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800ee66:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800ee6a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800ee6e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800ee72:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800ee76:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800ee7a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800ee7e:	f8da a000 	ldr.w	sl, [sl]
 800ee82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee84:	44c6      	add	lr, r8
 800ee86:	f8dc 3000 	ldr.w	r3, [ip]
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800ee90:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800ee94:	f002 fe6c 	bl	8011b70 <rmw_create_wait_set>
 800ee98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee9a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800ee9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ee9e:	b350      	cbz	r0, 800eef6 <rcl_wait_set_init+0xfe>
 800eea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eea2:	9302      	str	r3, [sp, #8]
 800eea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eea6:	9301      	str	r3, [sp, #4]
 800eea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	4642      	mov	r2, r8
 800eeae:	464b      	mov	r3, r9
 800eeb0:	4639      	mov	r1, r7
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f7ff fdea 	bl	800ea8c <rcl_wait_set_resize>
 800eeb8:	4605      	mov	r5, r0
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d0af      	beq.n	800ee1e <rcl_wait_set_init+0x26>
 800eebe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eec0:	bb2b      	cbnz	r3, 800ef0e <rcl_wait_set_init+0x116>
 800eec2:	2600      	movs	r6, #0
 800eec4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800eec8:	9600      	str	r6, [sp, #0]
 800eeca:	4633      	mov	r3, r6
 800eecc:	4632      	mov	r2, r6
 800eece:	4631      	mov	r1, r6
 800eed0:	4620      	mov	r0, r4
 800eed2:	f7ff fddb 	bl	800ea8c <rcl_wait_set_resize>
 800eed6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d0a0      	beq.n	800ee1e <rcl_wait_set_init+0x26>
 800eedc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800eede:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800eee0:	4798      	blx	r3
 800eee2:	4628      	mov	r0, r5
 800eee4:	6326      	str	r6, [r4, #48]	@ 0x30
 800eee6:	b004      	add	sp, #16
 800eee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeec:	250b      	movs	r5, #11
 800eeee:	4628      	mov	r0, r5
 800eef0:	b004      	add	sp, #16
 800eef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef6:	2501      	movs	r5, #1
 800eef8:	f002 fe44 	bl	8011b84 <rmw_destroy_wait_set>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	bf18      	it	ne
 800ef00:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800ef04:	e7dd      	b.n	800eec2 <rcl_wait_set_init+0xca>
 800ef06:	2565      	movs	r5, #101	@ 0x65
 800ef08:	e789      	b.n	800ee1e <rcl_wait_set_init+0x26>
 800ef0a:	250a      	movs	r5, #10
 800ef0c:	e787      	b.n	800ee1e <rcl_wait_set_init+0x26>
 800ef0e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ef10:	e7f2      	b.n	800eef8 <rcl_wait_set_init+0x100>
 800ef12:	bf00      	nop

0800ef14 <rcl_wait_set_add_guard_condition>:
 800ef14:	b318      	cbz	r0, 800ef5e <rcl_wait_set_add_guard_condition+0x4a>
 800ef16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	b30b      	cbz	r3, 800ef62 <rcl_wait_set_add_guard_condition+0x4e>
 800ef1e:	b319      	cbz	r1, 800ef68 <rcl_wait_set_add_guard_condition+0x54>
 800ef20:	68dd      	ldr	r5, [r3, #12]
 800ef22:	68c0      	ldr	r0, [r0, #12]
 800ef24:	4285      	cmp	r5, r0
 800ef26:	d217      	bcs.n	800ef58 <rcl_wait_set_add_guard_condition+0x44>
 800ef28:	68a0      	ldr	r0, [r4, #8]
 800ef2a:	1c6e      	adds	r6, r5, #1
 800ef2c:	60de      	str	r6, [r3, #12]
 800ef2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ef32:	b102      	cbz	r2, 800ef36 <rcl_wait_set_add_guard_condition+0x22>
 800ef34:	6015      	str	r5, [r2, #0]
 800ef36:	4608      	mov	r0, r1
 800ef38:	f004 fe12 	bl	8013b60 <rcl_guard_condition_get_rmw_handle>
 800ef3c:	b150      	cbz	r0, 800ef54 <rcl_wait_set_add_guard_condition+0x40>
 800ef3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef40:	6842      	ldr	r2, [r0, #4]
 800ef42:	695b      	ldr	r3, [r3, #20]
 800ef44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ef4a:	6913      	ldr	r3, [r2, #16]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	2000      	movs	r0, #0
 800ef50:	6113      	str	r3, [r2, #16]
 800ef52:	bd70      	pop	{r4, r5, r6, pc}
 800ef54:	2001      	movs	r0, #1
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	f240 3086 	movw	r0, #902	@ 0x386
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}
 800ef5e:	200b      	movs	r0, #11
 800ef60:	4770      	bx	lr
 800ef62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	200b      	movs	r0, #11
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}

0800ef6c <rcl_wait_set_add_timer>:
 800ef6c:	b328      	cbz	r0, 800efba <rcl_wait_set_add_timer+0x4e>
 800ef6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4604      	mov	r4, r0
 800ef74:	b31b      	cbz	r3, 800efbe <rcl_wait_set_add_timer+0x52>
 800ef76:	b329      	cbz	r1, 800efc4 <rcl_wait_set_add_timer+0x58>
 800ef78:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ef7a:	6965      	ldr	r5, [r4, #20]
 800ef7c:	42a8      	cmp	r0, r5
 800ef7e:	d219      	bcs.n	800efb4 <rcl_wait_set_add_timer+0x48>
 800ef80:	6925      	ldr	r5, [r4, #16]
 800ef82:	1c46      	adds	r6, r0, #1
 800ef84:	641e      	str	r6, [r3, #64]	@ 0x40
 800ef86:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800ef8a:	b102      	cbz	r2, 800ef8e <rcl_wait_set_add_timer+0x22>
 800ef8c:	6010      	str	r0, [r2, #0]
 800ef8e:	4608      	mov	r0, r1
 800ef90:	f7ff fba6 	bl	800e6e0 <rcl_timer_get_guard_condition>
 800ef94:	b168      	cbz	r0, 800efb2 <rcl_wait_set_add_timer+0x46>
 800ef96:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ef98:	68e3      	ldr	r3, [r4, #12]
 800ef9a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	441d      	add	r5, r3
 800efa0:	f004 fdde 	bl	8013b60 <rcl_guard_condition_get_rmw_handle>
 800efa4:	b180      	cbz	r0, 800efc8 <rcl_wait_set_add_timer+0x5c>
 800efa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800efa8:	6842      	ldr	r2, [r0, #4]
 800efaa:	695b      	ldr	r3, [r3, #20]
 800efac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efb0:	2000      	movs	r0, #0
 800efb2:	bd70      	pop	{r4, r5, r6, pc}
 800efb4:	f240 3086 	movw	r0, #902	@ 0x386
 800efb8:	bd70      	pop	{r4, r5, r6, pc}
 800efba:	200b      	movs	r0, #11
 800efbc:	4770      	bx	lr
 800efbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800efc2:	bd70      	pop	{r4, r5, r6, pc}
 800efc4:	200b      	movs	r0, #11
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	2001      	movs	r0, #1
 800efca:	bd70      	pop	{r4, r5, r6, pc}

0800efcc <rcl_wait_set_add_client>:
 800efcc:	b318      	cbz	r0, 800f016 <rcl_wait_set_add_client+0x4a>
 800efce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	4604      	mov	r4, r0
 800efd4:	b30b      	cbz	r3, 800f01a <rcl_wait_set_add_client+0x4e>
 800efd6:	b319      	cbz	r1, 800f020 <rcl_wait_set_add_client+0x54>
 800efd8:	699d      	ldr	r5, [r3, #24]
 800efda:	69c0      	ldr	r0, [r0, #28]
 800efdc:	4285      	cmp	r5, r0
 800efde:	d217      	bcs.n	800f010 <rcl_wait_set_add_client+0x44>
 800efe0:	69a0      	ldr	r0, [r4, #24]
 800efe2:	1c6e      	adds	r6, r5, #1
 800efe4:	619e      	str	r6, [r3, #24]
 800efe6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800efea:	b102      	cbz	r2, 800efee <rcl_wait_set_add_client+0x22>
 800efec:	6015      	str	r5, [r2, #0]
 800efee:	4608      	mov	r0, r1
 800eff0:	f7fe f9b2 	bl	800d358 <rcl_client_get_rmw_handle>
 800eff4:	b150      	cbz	r0, 800f00c <rcl_wait_set_add_client+0x40>
 800eff6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eff8:	6842      	ldr	r2, [r0, #4]
 800effa:	6a1b      	ldr	r3, [r3, #32]
 800effc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f000:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f002:	69d3      	ldr	r3, [r2, #28]
 800f004:	3301      	adds	r3, #1
 800f006:	2000      	movs	r0, #0
 800f008:	61d3      	str	r3, [r2, #28]
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	2001      	movs	r0, #1
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	f240 3086 	movw	r0, #902	@ 0x386
 800f014:	bd70      	pop	{r4, r5, r6, pc}
 800f016:	200b      	movs	r0, #11
 800f018:	4770      	bx	lr
 800f01a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f01e:	bd70      	pop	{r4, r5, r6, pc}
 800f020:	200b      	movs	r0, #11
 800f022:	bd70      	pop	{r4, r5, r6, pc}

0800f024 <rcl_wait_set_add_service>:
 800f024:	b318      	cbz	r0, 800f06e <rcl_wait_set_add_service+0x4a>
 800f026:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	4604      	mov	r4, r0
 800f02c:	b30b      	cbz	r3, 800f072 <rcl_wait_set_add_service+0x4e>
 800f02e:	b319      	cbz	r1, 800f078 <rcl_wait_set_add_service+0x54>
 800f030:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800f032:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800f034:	4285      	cmp	r5, r0
 800f036:	d217      	bcs.n	800f068 <rcl_wait_set_add_service+0x44>
 800f038:	6a20      	ldr	r0, [r4, #32]
 800f03a:	1c6e      	adds	r6, r5, #1
 800f03c:	625e      	str	r6, [r3, #36]	@ 0x24
 800f03e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f042:	b102      	cbz	r2, 800f046 <rcl_wait_set_add_service+0x22>
 800f044:	6015      	str	r5, [r2, #0]
 800f046:	4608      	mov	r0, r1
 800f048:	f7ff f804 	bl	800e054 <rcl_service_get_rmw_handle>
 800f04c:	b150      	cbz	r0, 800f064 <rcl_wait_set_add_service+0x40>
 800f04e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f050:	6842      	ldr	r2, [r0, #4]
 800f052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f054:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f058:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f05a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800f05c:	3301      	adds	r3, #1
 800f05e:	2000      	movs	r0, #0
 800f060:	6293      	str	r3, [r2, #40]	@ 0x28
 800f062:	bd70      	pop	{r4, r5, r6, pc}
 800f064:	2001      	movs	r0, #1
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	f240 3086 	movw	r0, #902	@ 0x386
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	200b      	movs	r0, #11
 800f070:	4770      	bx	lr
 800f072:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f076:	bd70      	pop	{r4, r5, r6, pc}
 800f078:	200b      	movs	r0, #11
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	0000      	movs	r0, r0
	...

0800f080 <rcl_wait>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	ed2d 8b02 	vpush	{d8}
 800f088:	b08d      	sub	sp, #52	@ 0x34
 800f08a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f08e:	2800      	cmp	r0, #0
 800f090:	f000 8143 	beq.w	800f31a <rcl_wait+0x29a>
 800f094:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f096:	4605      	mov	r5, r0
 800f098:	2e00      	cmp	r6, #0
 800f09a:	f000 8112 	beq.w	800f2c2 <rcl_wait+0x242>
 800f09e:	6843      	ldr	r3, [r0, #4]
 800f0a0:	b983      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0a2:	68eb      	ldr	r3, [r5, #12]
 800f0a4:	b973      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0a6:	696b      	ldr	r3, [r5, #20]
 800f0a8:	b963      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0aa:	69eb      	ldr	r3, [r5, #28]
 800f0ac:	b953      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0ae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800f0b0:	b943      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800f0b4:	b933      	cbnz	r3, 800f0c4 <rcl_wait+0x44>
 800f0b6:	f240 3085 	movw	r0, #901	@ 0x385
 800f0ba:	b00d      	add	sp, #52	@ 0x34
 800f0bc:	ecbd 8b02 	vpop	{d8}
 800f0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c4:	9b04      	ldr	r3, [sp, #16]
 800f0c6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	9b05      	ldr	r3, [sp, #20]
 800f0cc:	f173 0300 	sbcs.w	r3, r3, #0
 800f0d0:	f2c0 80f0 	blt.w	800f2b4 <rcl_wait+0x234>
 800f0d4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800f0d8:	4643      	mov	r3, r8
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	f000 8133 	beq.w	800f346 <rcl_wait+0x2c6>
 800f0e0:	2400      	movs	r4, #0
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800f358 <rcl_wait+0x2d8>
 800f0e8:	46a2      	mov	sl, r4
 800f0ea:	46a3      	mov	fp, r4
 800f0ec:	f240 3921 	movw	r9, #801	@ 0x321
 800f0f0:	4632      	mov	r2, r6
 800f0f2:	e014      	b.n	800f11e <rcl_wait+0x9e>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d1e0      	bne.n	800f0ba <rcl_wait+0x3a>
 800f0f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f0fc:	4542      	cmp	r2, r8
 800f0fe:	eb73 0107 	sbcs.w	r1, r3, r7
 800f102:	da03      	bge.n	800f10c <rcl_wait+0x8c>
 800f104:	4690      	mov	r8, r2
 800f106:	461f      	mov	r7, r3
 800f108:	f04f 0b01 	mov.w	fp, #1
 800f10c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800f10e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f110:	3401      	adds	r4, #1
 800f112:	f14a 0a00 	adc.w	sl, sl, #0
 800f116:	429c      	cmp	r4, r3
 800f118:	f17a 0100 	sbcs.w	r1, sl, #0
 800f11c:	d228      	bcs.n	800f170 <rcl_wait+0xf0>
 800f11e:	6928      	ldr	r0, [r5, #16]
 800f120:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f124:	a908      	add	r1, sp, #32
 800f126:	00a6      	lsls	r6, r4, #2
 800f128:	2800      	cmp	r0, #0
 800f12a:	d0f1      	beq.n	800f110 <rcl_wait+0x90>
 800f12c:	68eb      	ldr	r3, [r5, #12]
 800f12e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800f132:	4423      	add	r3, r4
 800f134:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800f138:	f1be 0f00 	cmp.w	lr, #0
 800f13c:	d006      	beq.n	800f14c <rcl_wait+0xcc>
 800f13e:	6913      	ldr	r3, [r2, #16]
 800f140:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800f144:	3301      	adds	r3, #1
 800f146:	6113      	str	r3, [r2, #16]
 800f148:	692b      	ldr	r3, [r5, #16]
 800f14a:	5998      	ldr	r0, [r3, r6]
 800f14c:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f150:	f7ff fa94 	bl	800e67c <rcl_timer_get_time_until_next_call>
 800f154:	4548      	cmp	r0, r9
 800f156:	d1cd      	bne.n	800f0f4 <rcl_wait+0x74>
 800f158:	692b      	ldr	r3, [r5, #16]
 800f15a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800f15c:	2100      	movs	r1, #0
 800f15e:	5199      	str	r1, [r3, r6]
 800f160:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f162:	3401      	adds	r4, #1
 800f164:	f14a 0a00 	adc.w	sl, sl, #0
 800f168:	429c      	cmp	r4, r3
 800f16a:	f17a 0100 	sbcs.w	r1, sl, #0
 800f16e:	d3d6      	bcc.n	800f11e <rcl_wait+0x9e>
 800f170:	4616      	mov	r6, r2
 800f172:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f176:	4313      	orrs	r3, r2
 800f178:	46d9      	mov	r9, fp
 800f17a:	f040 80a9 	bne.w	800f2d0 <rcl_wait+0x250>
 800f17e:	2300      	movs	r3, #0
 800f180:	2200      	movs	r2, #0
 800f182:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f186:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800f18a:	ab08      	add	r3, sp, #32
 800f18c:	9302      	str	r3, [sp, #8]
 800f18e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800f190:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800f194:	e9cd 3200 	strd	r3, r2, [sp]
 800f198:	f106 0110 	add.w	r1, r6, #16
 800f19c:	f106 031c 	add.w	r3, r6, #28
 800f1a0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800f1a4:	1d30      	adds	r0, r6, #4
 800f1a6:	f002 fb6b 	bl	8011880 <rmw_wait>
 800f1aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f1ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1ae:	4680      	mov	r8, r0
 800f1b0:	b1ca      	cbz	r2, 800f1e6 <rcl_wait+0x166>
 800f1b2:	2400      	movs	r4, #0
 800f1b4:	4627      	mov	r7, r4
 800f1b6:	692a      	ldr	r2, [r5, #16]
 800f1b8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800f1bc:	f10d 011f 	add.w	r1, sp, #31
 800f1c0:	00a6      	lsls	r6, r4, #2
 800f1c2:	b160      	cbz	r0, 800f1de <rcl_wait+0x15e>
 800f1c4:	f88d 701f 	strb.w	r7, [sp, #31]
 800f1c8:	f7ff fa1e 	bl	800e608 <rcl_timer_is_ready>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	f47f af74 	bne.w	800f0ba <rcl_wait+0x3a>
 800f1d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f1d6:	b90b      	cbnz	r3, 800f1dc <rcl_wait+0x15c>
 800f1d8:	692a      	ldr	r2, [r5, #16]
 800f1da:	5193      	str	r3, [r2, r6]
 800f1dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f1de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1e0:	3401      	adds	r4, #1
 800f1e2:	42a2      	cmp	r2, r4
 800f1e4:	d8e7      	bhi.n	800f1b6 <rcl_wait+0x136>
 800f1e6:	f038 0002 	bics.w	r0, r8, #2
 800f1ea:	f040 8090 	bne.w	800f30e <rcl_wait+0x28e>
 800f1ee:	686e      	ldr	r6, [r5, #4]
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	b91e      	cbnz	r6, 800f1fc <rcl_wait+0x17c>
 800f1f4:	e00d      	b.n	800f212 <rcl_wait+0x192>
 800f1f6:	3201      	adds	r2, #1
 800f1f8:	42b2      	cmp	r2, r6
 800f1fa:	d00a      	beq.n	800f212 <rcl_wait+0x192>
 800f1fc:	6899      	ldr	r1, [r3, #8]
 800f1fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f202:	2900      	cmp	r1, #0
 800f204:	d1f7      	bne.n	800f1f6 <rcl_wait+0x176>
 800f206:	682c      	ldr	r4, [r5, #0]
 800f208:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f20c:	3201      	adds	r2, #1
 800f20e:	42b2      	cmp	r2, r6
 800f210:	d1f4      	bne.n	800f1fc <rcl_wait+0x17c>
 800f212:	68ee      	ldr	r6, [r5, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	b91e      	cbnz	r6, 800f220 <rcl_wait+0x1a0>
 800f218:	e00d      	b.n	800f236 <rcl_wait+0x1b6>
 800f21a:	3201      	adds	r2, #1
 800f21c:	42b2      	cmp	r2, r6
 800f21e:	d00a      	beq.n	800f236 <rcl_wait+0x1b6>
 800f220:	6959      	ldr	r1, [r3, #20]
 800f222:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f226:	2900      	cmp	r1, #0
 800f228:	d1f7      	bne.n	800f21a <rcl_wait+0x19a>
 800f22a:	68ac      	ldr	r4, [r5, #8]
 800f22c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f230:	3201      	adds	r2, #1
 800f232:	42b2      	cmp	r2, r6
 800f234:	d1f4      	bne.n	800f220 <rcl_wait+0x1a0>
 800f236:	69ee      	ldr	r6, [r5, #28]
 800f238:	2200      	movs	r2, #0
 800f23a:	b91e      	cbnz	r6, 800f244 <rcl_wait+0x1c4>
 800f23c:	e00d      	b.n	800f25a <rcl_wait+0x1da>
 800f23e:	3201      	adds	r2, #1
 800f240:	42b2      	cmp	r2, r6
 800f242:	d00a      	beq.n	800f25a <rcl_wait+0x1da>
 800f244:	6a19      	ldr	r1, [r3, #32]
 800f246:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f24a:	2900      	cmp	r1, #0
 800f24c:	d1f7      	bne.n	800f23e <rcl_wait+0x1be>
 800f24e:	69ac      	ldr	r4, [r5, #24]
 800f250:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f254:	3201      	adds	r2, #1
 800f256:	42b2      	cmp	r2, r6
 800f258:	d1f4      	bne.n	800f244 <rcl_wait+0x1c4>
 800f25a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800f25c:	2200      	movs	r2, #0
 800f25e:	b91e      	cbnz	r6, 800f268 <rcl_wait+0x1e8>
 800f260:	e00d      	b.n	800f27e <rcl_wait+0x1fe>
 800f262:	3201      	adds	r2, #1
 800f264:	4296      	cmp	r6, r2
 800f266:	d00a      	beq.n	800f27e <rcl_wait+0x1fe>
 800f268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f26a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f26e:	2900      	cmp	r1, #0
 800f270:	d1f7      	bne.n	800f262 <rcl_wait+0x1e2>
 800f272:	6a2c      	ldr	r4, [r5, #32]
 800f274:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f278:	3201      	adds	r2, #1
 800f27a:	4296      	cmp	r6, r2
 800f27c:	d1f4      	bne.n	800f268 <rcl_wait+0x1e8>
 800f27e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800f280:	2200      	movs	r2, #0
 800f282:	b91e      	cbnz	r6, 800f28c <rcl_wait+0x20c>
 800f284:	e00d      	b.n	800f2a2 <rcl_wait+0x222>
 800f286:	3201      	adds	r2, #1
 800f288:	42b2      	cmp	r2, r6
 800f28a:	d00a      	beq.n	800f2a2 <rcl_wait+0x222>
 800f28c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800f28e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f292:	2900      	cmp	r1, #0
 800f294:	d1f7      	bne.n	800f286 <rcl_wait+0x206>
 800f296:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800f298:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800f29c:	3201      	adds	r2, #1
 800f29e:	42b2      	cmp	r2, r6
 800f2a0:	d1f4      	bne.n	800f28c <rcl_wait+0x20c>
 800f2a2:	f1b8 0f02 	cmp.w	r8, #2
 800f2a6:	f47f af08 	bne.w	800f0ba <rcl_wait+0x3a>
 800f2aa:	464b      	mov	r3, r9
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bf08      	it	eq
 800f2b0:	2002      	moveq	r0, #2
 800f2b2:	e702      	b.n	800f0ba <rcl_wait+0x3a>
 800f2b4:	2a00      	cmp	r2, #0
 800f2b6:	d03a      	beq.n	800f32e <rcl_wait+0x2ae>
 800f2b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f2bc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f2c0:	e70e      	b.n	800f0e0 <rcl_wait+0x60>
 800f2c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f2c6:	b00d      	add	sp, #52	@ 0x34
 800f2c8:	ecbd 8b02 	vpop	{d8}
 800f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d0:	9b04      	ldr	r3, [sp, #16]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	9b05      	ldr	r3, [sp, #20]
 800f2d6:	f173 0300 	sbcs.w	r3, r3, #0
 800f2da:	db24      	blt.n	800f326 <rcl_wait+0x2a6>
 800f2dc:	2f00      	cmp	r7, #0
 800f2de:	bfbc      	itt	lt
 800f2e0:	f04f 0800 	movlt.w	r8, #0
 800f2e4:	4647      	movlt	r7, r8
 800f2e6:	a31e      	add	r3, pc, #120	@ (adr r3, 800f360 <rcl_wait+0x2e0>)
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4639      	mov	r1, r7
 800f2f0:	f7f1 f99a 	bl	8000628 <__aeabi_ldivmod>
 800f2f4:	a31a      	add	r3, pc, #104	@ (adr r3, 800f360 <rcl_wait+0x2e0>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f2fe:	4640      	mov	r0, r8
 800f300:	4639      	mov	r1, r7
 800f302:	f7f1 f991 	bl	8000628 <__aeabi_ldivmod>
 800f306:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800f30a:	ab08      	add	r3, sp, #32
 800f30c:	e73e      	b.n	800f18c <rcl_wait+0x10c>
 800f30e:	2001      	movs	r0, #1
 800f310:	b00d      	add	sp, #52	@ 0x34
 800f312:	ecbd 8b02 	vpop	{d8}
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	200b      	movs	r0, #11
 800f31c:	b00d      	add	sp, #52	@ 0x34
 800f31e:	ecbd 8b02 	vpop	{d8}
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f326:	465b      	mov	r3, fp
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1d7      	bne.n	800f2dc <rcl_wait+0x25c>
 800f32c:	e72e      	b.n	800f18c <rcl_wait+0x10c>
 800f32e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f332:	430b      	orrs	r3, r1
 800f334:	bf08      	it	eq
 800f336:	4691      	moveq	r9, r2
 800f338:	f43f af21 	beq.w	800f17e <rcl_wait+0xfe>
 800f33c:	9b04      	ldr	r3, [sp, #16]
 800f33e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f342:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f346:	2b01      	cmp	r3, #1
 800f348:	9b05      	ldr	r3, [sp, #20]
 800f34a:	f173 0300 	sbcs.w	r3, r3, #0
 800f34e:	f04f 0300 	mov.w	r3, #0
 800f352:	4699      	mov	r9, r3
 800f354:	dac2      	bge.n	800f2dc <rcl_wait+0x25c>
 800f356:	e719      	b.n	800f18c <rcl_wait+0x10c>
 800f358:	ffffffff 	.word	0xffffffff
 800f35c:	7fffffff 	.word	0x7fffffff
 800f360:	3b9aca00 	.word	0x3b9aca00
 800f364:	00000000 	.word	0x00000000

0800f368 <rcl_action_take_goal_response>:
 800f368:	2800      	cmp	r0, #0
 800f36a:	d039      	beq.n	800f3e0 <rcl_action_take_goal_response+0x78>
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	4604      	mov	r4, r0
 800f370:	6800      	ldr	r0, [r0, #0]
 800f372:	b380      	cbz	r0, 800f3d6 <rcl_action_take_goal_response+0x6e>
 800f374:	460d      	mov	r5, r1
 800f376:	4616      	mov	r6, r2
 800f378:	f7fe f872 	bl	800d460 <rcl_client_is_valid>
 800f37c:	b330      	cbz	r0, 800f3cc <rcl_action_take_goal_response+0x64>
 800f37e:	6820      	ldr	r0, [r4, #0]
 800f380:	3004      	adds	r0, #4
 800f382:	f7fe f86d 	bl	800d460 <rcl_client_is_valid>
 800f386:	b308      	cbz	r0, 800f3cc <rcl_action_take_goal_response+0x64>
 800f388:	6820      	ldr	r0, [r4, #0]
 800f38a:	3008      	adds	r0, #8
 800f38c:	f7fe f868 	bl	800d460 <rcl_client_is_valid>
 800f390:	b1e0      	cbz	r0, 800f3cc <rcl_action_take_goal_response+0x64>
 800f392:	6820      	ldr	r0, [r4, #0]
 800f394:	300c      	adds	r0, #12
 800f396:	f7fe ffff 	bl	800e398 <rcl_subscription_is_valid>
 800f39a:	b1b8      	cbz	r0, 800f3cc <rcl_action_take_goal_response+0x64>
 800f39c:	6820      	ldr	r0, [r4, #0]
 800f39e:	3010      	adds	r0, #16
 800f3a0:	f7fe fffa 	bl	800e398 <rcl_subscription_is_valid>
 800f3a4:	b190      	cbz	r0, 800f3cc <rcl_action_take_goal_response+0x64>
 800f3a6:	b1cd      	cbz	r5, 800f3dc <rcl_action_take_goal_response+0x74>
 800f3a8:	b1c6      	cbz	r6, 800f3dc <rcl_action_take_goal_response+0x74>
 800f3aa:	6820      	ldr	r0, [r4, #0]
 800f3ac:	4632      	mov	r2, r6
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	f7fe f80e 	bl	800d3d0 <rcl_take_response>
 800f3b4:	b148      	cbz	r0, 800f3ca <rcl_action_take_goal_response+0x62>
 800f3b6:	280a      	cmp	r0, #10
 800f3b8:	d007      	beq.n	800f3ca <rcl_action_take_goal_response+0x62>
 800f3ba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800f3be:	f640 0337 	movw	r3, #2103	@ 0x837
 800f3c2:	4290      	cmp	r0, r2
 800f3c4:	bf0c      	ite	eq
 800f3c6:	4618      	moveq	r0, r3
 800f3c8:	2001      	movne	r0, #1
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	f7fa fb40 	bl	8009a50 <rcutils_reset_error>
 800f3d0:	f640 0036 	movw	r0, #2102	@ 0x836
 800f3d4:	bd70      	pop	{r4, r5, r6, pc}
 800f3d6:	f640 0036 	movw	r0, #2102	@ 0x836
 800f3da:	bd70      	pop	{r4, r5, r6, pc}
 800f3dc:	200b      	movs	r0, #11
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f640 0036 	movw	r0, #2102	@ 0x836
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop

0800f3e8 <rcl_action_send_result_request>:
 800f3e8:	b390      	cbz	r0, 800f450 <rcl_action_send_result_request+0x68>
 800f3ea:	b570      	push	{r4, r5, r6, lr}
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	6800      	ldr	r0, [r0, #0]
 800f3f0:	b348      	cbz	r0, 800f446 <rcl_action_send_result_request+0x5e>
 800f3f2:	460d      	mov	r5, r1
 800f3f4:	4616      	mov	r6, r2
 800f3f6:	f7fe f833 	bl	800d460 <rcl_client_is_valid>
 800f3fa:	b1f8      	cbz	r0, 800f43c <rcl_action_send_result_request+0x54>
 800f3fc:	6820      	ldr	r0, [r4, #0]
 800f3fe:	3004      	adds	r0, #4
 800f400:	f7fe f82e 	bl	800d460 <rcl_client_is_valid>
 800f404:	b1d0      	cbz	r0, 800f43c <rcl_action_send_result_request+0x54>
 800f406:	6820      	ldr	r0, [r4, #0]
 800f408:	3008      	adds	r0, #8
 800f40a:	f7fe f829 	bl	800d460 <rcl_client_is_valid>
 800f40e:	b1a8      	cbz	r0, 800f43c <rcl_action_send_result_request+0x54>
 800f410:	6820      	ldr	r0, [r4, #0]
 800f412:	300c      	adds	r0, #12
 800f414:	f7fe ffc0 	bl	800e398 <rcl_subscription_is_valid>
 800f418:	b180      	cbz	r0, 800f43c <rcl_action_send_result_request+0x54>
 800f41a:	6820      	ldr	r0, [r4, #0]
 800f41c:	3010      	adds	r0, #16
 800f41e:	f7fe ffbb 	bl	800e398 <rcl_subscription_is_valid>
 800f422:	b158      	cbz	r0, 800f43c <rcl_action_send_result_request+0x54>
 800f424:	b195      	cbz	r5, 800f44c <rcl_action_send_result_request+0x64>
 800f426:	b18e      	cbz	r6, 800f44c <rcl_action_send_result_request+0x64>
 800f428:	6820      	ldr	r0, [r4, #0]
 800f42a:	4632      	mov	r2, r6
 800f42c:	4629      	mov	r1, r5
 800f42e:	3008      	adds	r0, #8
 800f430:	f7fd ff98 	bl	800d364 <rcl_send_request>
 800f434:	3800      	subs	r0, #0
 800f436:	bf18      	it	ne
 800f438:	2001      	movne	r0, #1
 800f43a:	bd70      	pop	{r4, r5, r6, pc}
 800f43c:	f7fa fb08 	bl	8009a50 <rcutils_reset_error>
 800f440:	f640 0036 	movw	r0, #2102	@ 0x836
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	f640 0036 	movw	r0, #2102	@ 0x836
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
 800f44c:	200b      	movs	r0, #11
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	f640 0036 	movw	r0, #2102	@ 0x836
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop

0800f458 <rcl_action_take_result_response>:
 800f458:	2800      	cmp	r0, #0
 800f45a:	d03a      	beq.n	800f4d2 <rcl_action_take_result_response+0x7a>
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	4604      	mov	r4, r0
 800f460:	6800      	ldr	r0, [r0, #0]
 800f462:	b388      	cbz	r0, 800f4c8 <rcl_action_take_result_response+0x70>
 800f464:	460d      	mov	r5, r1
 800f466:	4616      	mov	r6, r2
 800f468:	f7fd fffa 	bl	800d460 <rcl_client_is_valid>
 800f46c:	b338      	cbz	r0, 800f4be <rcl_action_take_result_response+0x66>
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	3004      	adds	r0, #4
 800f472:	f7fd fff5 	bl	800d460 <rcl_client_is_valid>
 800f476:	b310      	cbz	r0, 800f4be <rcl_action_take_result_response+0x66>
 800f478:	6820      	ldr	r0, [r4, #0]
 800f47a:	3008      	adds	r0, #8
 800f47c:	f7fd fff0 	bl	800d460 <rcl_client_is_valid>
 800f480:	b1e8      	cbz	r0, 800f4be <rcl_action_take_result_response+0x66>
 800f482:	6820      	ldr	r0, [r4, #0]
 800f484:	300c      	adds	r0, #12
 800f486:	f7fe ff87 	bl	800e398 <rcl_subscription_is_valid>
 800f48a:	b1c0      	cbz	r0, 800f4be <rcl_action_take_result_response+0x66>
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	3010      	adds	r0, #16
 800f490:	f7fe ff82 	bl	800e398 <rcl_subscription_is_valid>
 800f494:	b198      	cbz	r0, 800f4be <rcl_action_take_result_response+0x66>
 800f496:	b1d5      	cbz	r5, 800f4ce <rcl_action_take_result_response+0x76>
 800f498:	b1ce      	cbz	r6, 800f4ce <rcl_action_take_result_response+0x76>
 800f49a:	6820      	ldr	r0, [r4, #0]
 800f49c:	4632      	mov	r2, r6
 800f49e:	4629      	mov	r1, r5
 800f4a0:	3008      	adds	r0, #8
 800f4a2:	f7fd ff95 	bl	800d3d0 <rcl_take_response>
 800f4a6:	b148      	cbz	r0, 800f4bc <rcl_action_take_result_response+0x64>
 800f4a8:	280a      	cmp	r0, #10
 800f4aa:	d007      	beq.n	800f4bc <rcl_action_take_result_response+0x64>
 800f4ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800f4b0:	f640 0337 	movw	r3, #2103	@ 0x837
 800f4b4:	4290      	cmp	r0, r2
 800f4b6:	bf0c      	ite	eq
 800f4b8:	4618      	moveq	r0, r3
 800f4ba:	2001      	movne	r0, #1
 800f4bc:	bd70      	pop	{r4, r5, r6, pc}
 800f4be:	f7fa fac7 	bl	8009a50 <rcutils_reset_error>
 800f4c2:	f640 0036 	movw	r0, #2102	@ 0x836
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	f640 0036 	movw	r0, #2102	@ 0x836
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	200b      	movs	r0, #11
 800f4d0:	bd70      	pop	{r4, r5, r6, pc}
 800f4d2:	f640 0036 	movw	r0, #2102	@ 0x836
 800f4d6:	4770      	bx	lr

0800f4d8 <rcl_action_take_cancel_response>:
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d03a      	beq.n	800f552 <rcl_action_take_cancel_response+0x7a>
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	4604      	mov	r4, r0
 800f4e0:	6800      	ldr	r0, [r0, #0]
 800f4e2:	b388      	cbz	r0, 800f548 <rcl_action_take_cancel_response+0x70>
 800f4e4:	460d      	mov	r5, r1
 800f4e6:	4616      	mov	r6, r2
 800f4e8:	f7fd ffba 	bl	800d460 <rcl_client_is_valid>
 800f4ec:	b338      	cbz	r0, 800f53e <rcl_action_take_cancel_response+0x66>
 800f4ee:	6820      	ldr	r0, [r4, #0]
 800f4f0:	3004      	adds	r0, #4
 800f4f2:	f7fd ffb5 	bl	800d460 <rcl_client_is_valid>
 800f4f6:	b310      	cbz	r0, 800f53e <rcl_action_take_cancel_response+0x66>
 800f4f8:	6820      	ldr	r0, [r4, #0]
 800f4fa:	3008      	adds	r0, #8
 800f4fc:	f7fd ffb0 	bl	800d460 <rcl_client_is_valid>
 800f500:	b1e8      	cbz	r0, 800f53e <rcl_action_take_cancel_response+0x66>
 800f502:	6820      	ldr	r0, [r4, #0]
 800f504:	300c      	adds	r0, #12
 800f506:	f7fe ff47 	bl	800e398 <rcl_subscription_is_valid>
 800f50a:	b1c0      	cbz	r0, 800f53e <rcl_action_take_cancel_response+0x66>
 800f50c:	6820      	ldr	r0, [r4, #0]
 800f50e:	3010      	adds	r0, #16
 800f510:	f7fe ff42 	bl	800e398 <rcl_subscription_is_valid>
 800f514:	b198      	cbz	r0, 800f53e <rcl_action_take_cancel_response+0x66>
 800f516:	b1d5      	cbz	r5, 800f54e <rcl_action_take_cancel_response+0x76>
 800f518:	b1ce      	cbz	r6, 800f54e <rcl_action_take_cancel_response+0x76>
 800f51a:	6820      	ldr	r0, [r4, #0]
 800f51c:	4632      	mov	r2, r6
 800f51e:	4629      	mov	r1, r5
 800f520:	3004      	adds	r0, #4
 800f522:	f7fd ff55 	bl	800d3d0 <rcl_take_response>
 800f526:	b148      	cbz	r0, 800f53c <rcl_action_take_cancel_response+0x64>
 800f528:	280a      	cmp	r0, #10
 800f52a:	d007      	beq.n	800f53c <rcl_action_take_cancel_response+0x64>
 800f52c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800f530:	f640 0337 	movw	r3, #2103	@ 0x837
 800f534:	4290      	cmp	r0, r2
 800f536:	bf0c      	ite	eq
 800f538:	4618      	moveq	r0, r3
 800f53a:	2001      	movne	r0, #1
 800f53c:	bd70      	pop	{r4, r5, r6, pc}
 800f53e:	f7fa fa87 	bl	8009a50 <rcutils_reset_error>
 800f542:	f640 0036 	movw	r0, #2102	@ 0x836
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	f640 0036 	movw	r0, #2102	@ 0x836
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
 800f54e:	200b      	movs	r0, #11
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	f640 0036 	movw	r0, #2102	@ 0x836
 800f556:	4770      	bx	lr

0800f558 <rcl_action_take_feedback>:
 800f558:	2800      	cmp	r0, #0
 800f55a:	d038      	beq.n	800f5ce <rcl_action_take_feedback+0x76>
 800f55c:	b530      	push	{r4, r5, lr}
 800f55e:	4604      	mov	r4, r0
 800f560:	6800      	ldr	r0, [r0, #0]
 800f562:	b091      	sub	sp, #68	@ 0x44
 800f564:	b378      	cbz	r0, 800f5c6 <rcl_action_take_feedback+0x6e>
 800f566:	460d      	mov	r5, r1
 800f568:	f7fd ff7a 	bl	800d460 <rcl_client_is_valid>
 800f56c:	b328      	cbz	r0, 800f5ba <rcl_action_take_feedback+0x62>
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	3004      	adds	r0, #4
 800f572:	f7fd ff75 	bl	800d460 <rcl_client_is_valid>
 800f576:	b300      	cbz	r0, 800f5ba <rcl_action_take_feedback+0x62>
 800f578:	6820      	ldr	r0, [r4, #0]
 800f57a:	3008      	adds	r0, #8
 800f57c:	f7fd ff70 	bl	800d460 <rcl_client_is_valid>
 800f580:	b1d8      	cbz	r0, 800f5ba <rcl_action_take_feedback+0x62>
 800f582:	6820      	ldr	r0, [r4, #0]
 800f584:	300c      	adds	r0, #12
 800f586:	f7fe ff07 	bl	800e398 <rcl_subscription_is_valid>
 800f58a:	b1b0      	cbz	r0, 800f5ba <rcl_action_take_feedback+0x62>
 800f58c:	6820      	ldr	r0, [r4, #0]
 800f58e:	3010      	adds	r0, #16
 800f590:	f7fe ff02 	bl	800e398 <rcl_subscription_is_valid>
 800f594:	b188      	cbz	r0, 800f5ba <rcl_action_take_feedback+0x62>
 800f596:	b1ed      	cbz	r5, 800f5d4 <rcl_action_take_feedback+0x7c>
 800f598:	6820      	ldr	r0, [r4, #0]
 800f59a:	2300      	movs	r3, #0
 800f59c:	466a      	mov	r2, sp
 800f59e:	4629      	mov	r1, r5
 800f5a0:	300c      	adds	r0, #12
 800f5a2:	f7fe fe9b 	bl	800e2dc <rcl_take>
 800f5a6:	b160      	cbz	r0, 800f5c2 <rcl_action_take_feedback+0x6a>
 800f5a8:	f240 1391 	movw	r3, #401	@ 0x191
 800f5ac:	4298      	cmp	r0, r3
 800f5ae:	d014      	beq.n	800f5da <rcl_action_take_feedback+0x82>
 800f5b0:	280a      	cmp	r0, #10
 800f5b2:	bf18      	it	ne
 800f5b4:	2001      	movne	r0, #1
 800f5b6:	b011      	add	sp, #68	@ 0x44
 800f5b8:	bd30      	pop	{r4, r5, pc}
 800f5ba:	f7fa fa49 	bl	8009a50 <rcutils_reset_error>
 800f5be:	f640 0036 	movw	r0, #2102	@ 0x836
 800f5c2:	b011      	add	sp, #68	@ 0x44
 800f5c4:	bd30      	pop	{r4, r5, pc}
 800f5c6:	f640 0036 	movw	r0, #2102	@ 0x836
 800f5ca:	b011      	add	sp, #68	@ 0x44
 800f5cc:	bd30      	pop	{r4, r5, pc}
 800f5ce:	f640 0036 	movw	r0, #2102	@ 0x836
 800f5d2:	4770      	bx	lr
 800f5d4:	200b      	movs	r0, #11
 800f5d6:	b011      	add	sp, #68	@ 0x44
 800f5d8:	bd30      	pop	{r4, r5, pc}
 800f5da:	f640 0037 	movw	r0, #2103	@ 0x837
 800f5de:	e7f0      	b.n	800f5c2 <rcl_action_take_feedback+0x6a>

0800f5e0 <rcl_action_wait_set_add_action_client>:
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d048      	beq.n	800f676 <rcl_action_wait_set_add_action_client+0x96>
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	2900      	cmp	r1, #0
 800f5ea:	d03c      	beq.n	800f666 <rcl_action_wait_set_add_action_client+0x86>
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	6808      	ldr	r0, [r1, #0]
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d038      	beq.n	800f666 <rcl_action_wait_set_add_action_client+0x86>
 800f5f4:	4617      	mov	r7, r2
 800f5f6:	461e      	mov	r6, r3
 800f5f8:	f7fd ff32 	bl	800d460 <rcl_client_is_valid>
 800f5fc:	b3b0      	cbz	r0, 800f66c <rcl_action_wait_set_add_action_client+0x8c>
 800f5fe:	6820      	ldr	r0, [r4, #0]
 800f600:	3004      	adds	r0, #4
 800f602:	f7fd ff2d 	bl	800d460 <rcl_client_is_valid>
 800f606:	b388      	cbz	r0, 800f66c <rcl_action_wait_set_add_action_client+0x8c>
 800f608:	6820      	ldr	r0, [r4, #0]
 800f60a:	3008      	adds	r0, #8
 800f60c:	f7fd ff28 	bl	800d460 <rcl_client_is_valid>
 800f610:	b360      	cbz	r0, 800f66c <rcl_action_wait_set_add_action_client+0x8c>
 800f612:	6820      	ldr	r0, [r4, #0]
 800f614:	300c      	adds	r0, #12
 800f616:	f7fe febf 	bl	800e398 <rcl_subscription_is_valid>
 800f61a:	b338      	cbz	r0, 800f66c <rcl_action_wait_set_add_action_client+0x8c>
 800f61c:	6820      	ldr	r0, [r4, #0]
 800f61e:	3010      	adds	r0, #16
 800f620:	f7fe feba 	bl	800e398 <rcl_subscription_is_valid>
 800f624:	b310      	cbz	r0, 800f66c <rcl_action_wait_set_add_action_client+0x8c>
 800f626:	6821      	ldr	r1, [r4, #0]
 800f628:	4628      	mov	r0, r5
 800f62a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800f62e:	f7ff fccd 	bl	800efcc <rcl_wait_set_add_client>
 800f632:	b9b8      	cbnz	r0, 800f664 <rcl_action_wait_set_add_action_client+0x84>
 800f634:	6821      	ldr	r1, [r4, #0]
 800f636:	4628      	mov	r0, r5
 800f638:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800f63c:	3104      	adds	r1, #4
 800f63e:	f7ff fcc5 	bl	800efcc <rcl_wait_set_add_client>
 800f642:	b978      	cbnz	r0, 800f664 <rcl_action_wait_set_add_action_client+0x84>
 800f644:	6821      	ldr	r1, [r4, #0]
 800f646:	4628      	mov	r0, r5
 800f648:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800f64c:	3108      	adds	r1, #8
 800f64e:	f7ff fcbd 	bl	800efcc <rcl_wait_set_add_client>
 800f652:	b938      	cbnz	r0, 800f664 <rcl_action_wait_set_add_action_client+0x84>
 800f654:	6821      	ldr	r1, [r4, #0]
 800f656:	4628      	mov	r0, r5
 800f658:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800f65c:	310c      	adds	r1, #12
 800f65e:	f7ff f96d 	bl	800e93c <rcl_wait_set_add_subscription>
 800f662:	b158      	cbz	r0, 800f67c <rcl_action_wait_set_add_action_client+0x9c>
 800f664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f666:	f640 0036 	movw	r0, #2102	@ 0x836
 800f66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f66c:	f7fa f9f0 	bl	8009a50 <rcutils_reset_error>
 800f670:	f640 0036 	movw	r0, #2102	@ 0x836
 800f674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f676:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f67a:	4770      	bx	lr
 800f67c:	6821      	ldr	r1, [r4, #0]
 800f67e:	4628      	mov	r0, r5
 800f680:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800f684:	3110      	adds	r1, #16
 800f686:	f7ff f959 	bl	800e93c <rcl_wait_set_add_subscription>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d1ea      	bne.n	800f664 <rcl_action_wait_set_add_action_client+0x84>
 800f68e:	b11f      	cbz	r7, 800f698 <rcl_action_wait_set_add_action_client+0xb8>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800f696:	603b      	str	r3, [r7, #0]
 800f698:	2e00      	cmp	r6, #0
 800f69a:	d0e3      	beq.n	800f664 <rcl_action_wait_set_add_action_client+0x84>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800f6a2:	6033      	str	r3, [r6, #0]
 800f6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6a6:	bf00      	nop

0800f6a8 <rcl_action_client_wait_set_get_entities_ready>:
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	f000 808d 	beq.w	800f7c8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800f6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	d077      	beq.n	800f7a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	6808      	ldr	r0, [r1, #0]
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d073      	beq.n	800f7a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800f6c0:	4616      	mov	r6, r2
 800f6c2:	461f      	mov	r7, r3
 800f6c4:	f7fd fecc 	bl	800d460 <rcl_client_is_valid>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d071      	beq.n	800f7b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f6cc:	6820      	ldr	r0, [r4, #0]
 800f6ce:	3004      	adds	r0, #4
 800f6d0:	f7fd fec6 	bl	800d460 <rcl_client_is_valid>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d06b      	beq.n	800f7b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f6d8:	6820      	ldr	r0, [r4, #0]
 800f6da:	3008      	adds	r0, #8
 800f6dc:	f7fd fec0 	bl	800d460 <rcl_client_is_valid>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d065      	beq.n	800f7b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f6e4:	6820      	ldr	r0, [r4, #0]
 800f6e6:	300c      	adds	r0, #12
 800f6e8:	f7fe fe56 	bl	800e398 <rcl_subscription_is_valid>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d05f      	beq.n	800f7b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f6f0:	6820      	ldr	r0, [r4, #0]
 800f6f2:	3010      	adds	r0, #16
 800f6f4:	f7fe fe50 	bl	800e398 <rcl_subscription_is_valid>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d059      	beq.n	800f7b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800f6fc:	2e00      	cmp	r6, #0
 800f6fe:	d060      	beq.n	800f7c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f700:	2f00      	cmp	r7, #0
 800f702:	d05e      	beq.n	800f7c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f704:	9b06      	ldr	r3, [sp, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d05b      	beq.n	800f7c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f70a:	9b07      	ldr	r3, [sp, #28]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d058      	beq.n	800f7c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f710:	9b08      	ldr	r3, [sp, #32]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d055      	beq.n	800f7c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	686a      	ldr	r2, [r5, #4]
 800f71a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800f71e:	428a      	cmp	r2, r1
 800f720:	d94c      	bls.n	800f7bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f722:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800f726:	4282      	cmp	r2, r0
 800f728:	d948      	bls.n	800f7bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f72a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800f72e:	69ea      	ldr	r2, [r5, #28]
 800f730:	42a2      	cmp	r2, r4
 800f732:	d943      	bls.n	800f7bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f734:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800f738:	4562      	cmp	r2, ip
 800f73a:	d93f      	bls.n	800f7bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f73c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800f740:	4572      	cmp	r2, lr
 800f742:	d93b      	bls.n	800f7bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 800f744:	69aa      	ldr	r2, [r5, #24]
 800f746:	682d      	ldr	r5, [r5, #0]
 800f748:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800f74c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800f750:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800f754:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800f758:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800f75c:	f103 0c0c 	add.w	ip, r3, #12
 800f760:	eba5 050c 	sub.w	r5, r5, ip
 800f764:	fab5 f585 	clz	r5, r5
 800f768:	096d      	lsrs	r5, r5, #5
 800f76a:	7035      	strb	r5, [r6, #0]
 800f76c:	f103 0510 	add.w	r5, r3, #16
 800f770:	1b64      	subs	r4, r4, r5
 800f772:	fab4 f484 	clz	r4, r4
 800f776:	0964      	lsrs	r4, r4, #5
 800f778:	703c      	strb	r4, [r7, #0]
 800f77a:	eba3 0008 	sub.w	r0, r3, r8
 800f77e:	1d1c      	adds	r4, r3, #4
 800f780:	3308      	adds	r3, #8
 800f782:	1ad3      	subs	r3, r2, r3
 800f784:	fab0 f080 	clz	r0, r0
 800f788:	9a06      	ldr	r2, [sp, #24]
 800f78a:	0940      	lsrs	r0, r0, #5
 800f78c:	1b09      	subs	r1, r1, r4
 800f78e:	7010      	strb	r0, [r2, #0]
 800f790:	fab1 f181 	clz	r1, r1
 800f794:	9a07      	ldr	r2, [sp, #28]
 800f796:	0949      	lsrs	r1, r1, #5
 800f798:	7011      	strb	r1, [r2, #0]
 800f79a:	fab3 f383 	clz	r3, r3
 800f79e:	9a08      	ldr	r2, [sp, #32]
 800f7a0:	095b      	lsrs	r3, r3, #5
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	7013      	strb	r3, [r2, #0]
 800f7a6:	e001      	b.n	800f7ac <rcl_action_client_wait_set_get_entities_ready+0x104>
 800f7a8:	f640 0036 	movw	r0, #2102	@ 0x836
 800f7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b0:	f7fa f94e 	bl	8009a50 <rcutils_reset_error>
 800f7b4:	f640 0036 	movw	r0, #2102	@ 0x836
 800f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7bc:	2001      	movs	r0, #1
 800f7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c2:	200b      	movs	r0, #11
 800f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop

0800f7d0 <rcl_action_take_goal_request>:
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d039      	beq.n	800f848 <rcl_action_take_goal_request+0x78>
 800f7d4:	b570      	push	{r4, r5, r6, lr}
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	6800      	ldr	r0, [r0, #0]
 800f7da:	b380      	cbz	r0, 800f83e <rcl_action_take_goal_request+0x6e>
 800f7dc:	460d      	mov	r5, r1
 800f7de:	4616      	mov	r6, r2
 800f7e0:	f7fe fc96 	bl	800e110 <rcl_service_is_valid>
 800f7e4:	b330      	cbz	r0, 800f834 <rcl_action_take_goal_request+0x64>
 800f7e6:	6820      	ldr	r0, [r4, #0]
 800f7e8:	3004      	adds	r0, #4
 800f7ea:	f7fe fc91 	bl	800e110 <rcl_service_is_valid>
 800f7ee:	b308      	cbz	r0, 800f834 <rcl_action_take_goal_request+0x64>
 800f7f0:	6820      	ldr	r0, [r4, #0]
 800f7f2:	3008      	adds	r0, #8
 800f7f4:	f7fe fc8c 	bl	800e110 <rcl_service_is_valid>
 800f7f8:	b1e0      	cbz	r0, 800f834 <rcl_action_take_goal_request+0x64>
 800f7fa:	6820      	ldr	r0, [r4, #0]
 800f7fc:	300c      	adds	r0, #12
 800f7fe:	f7f9 f9b5 	bl	8008b6c <rcl_publisher_is_valid>
 800f802:	b1b8      	cbz	r0, 800f834 <rcl_action_take_goal_request+0x64>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	3010      	adds	r0, #16
 800f808:	f7f9 f9b0 	bl	8008b6c <rcl_publisher_is_valid>
 800f80c:	b190      	cbz	r0, 800f834 <rcl_action_take_goal_request+0x64>
 800f80e:	b1cd      	cbz	r5, 800f844 <rcl_action_take_goal_request+0x74>
 800f810:	b1c6      	cbz	r6, 800f844 <rcl_action_take_goal_request+0x74>
 800f812:	6820      	ldr	r0, [r4, #0]
 800f814:	4632      	mov	r2, r6
 800f816:	4629      	mov	r1, r5
 800f818:	f7fe fc22 	bl	800e060 <rcl_take_request>
 800f81c:	b148      	cbz	r0, 800f832 <rcl_action_take_goal_request+0x62>
 800f81e:	280a      	cmp	r0, #10
 800f820:	d007      	beq.n	800f832 <rcl_action_take_goal_request+0x62>
 800f822:	f240 2259 	movw	r2, #601	@ 0x259
 800f826:	f640 0399 	movw	r3, #2201	@ 0x899
 800f82a:	4290      	cmp	r0, r2
 800f82c:	bf0c      	ite	eq
 800f82e:	4618      	moveq	r0, r3
 800f830:	2001      	movne	r0, #1
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	f7fa f90c 	bl	8009a50 <rcutils_reset_error>
 800f838:	f640 0098 	movw	r0, #2200	@ 0x898
 800f83c:	bd70      	pop	{r4, r5, r6, pc}
 800f83e:	f640 0098 	movw	r0, #2200	@ 0x898
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	200b      	movs	r0, #11
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	f640 0098 	movw	r0, #2200	@ 0x898
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop

0800f850 <rcl_action_send_goal_response>:
 800f850:	b390      	cbz	r0, 800f8b8 <rcl_action_send_goal_response+0x68>
 800f852:	b570      	push	{r4, r5, r6, lr}
 800f854:	4604      	mov	r4, r0
 800f856:	6800      	ldr	r0, [r0, #0]
 800f858:	b348      	cbz	r0, 800f8ae <rcl_action_send_goal_response+0x5e>
 800f85a:	460d      	mov	r5, r1
 800f85c:	4616      	mov	r6, r2
 800f85e:	f7fe fc57 	bl	800e110 <rcl_service_is_valid>
 800f862:	b1f8      	cbz	r0, 800f8a4 <rcl_action_send_goal_response+0x54>
 800f864:	6820      	ldr	r0, [r4, #0]
 800f866:	3004      	adds	r0, #4
 800f868:	f7fe fc52 	bl	800e110 <rcl_service_is_valid>
 800f86c:	b1d0      	cbz	r0, 800f8a4 <rcl_action_send_goal_response+0x54>
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	3008      	adds	r0, #8
 800f872:	f7fe fc4d 	bl	800e110 <rcl_service_is_valid>
 800f876:	b1a8      	cbz	r0, 800f8a4 <rcl_action_send_goal_response+0x54>
 800f878:	6820      	ldr	r0, [r4, #0]
 800f87a:	300c      	adds	r0, #12
 800f87c:	f7f9 f976 	bl	8008b6c <rcl_publisher_is_valid>
 800f880:	b180      	cbz	r0, 800f8a4 <rcl_action_send_goal_response+0x54>
 800f882:	6820      	ldr	r0, [r4, #0]
 800f884:	3010      	adds	r0, #16
 800f886:	f7f9 f971 	bl	8008b6c <rcl_publisher_is_valid>
 800f88a:	b158      	cbz	r0, 800f8a4 <rcl_action_send_goal_response+0x54>
 800f88c:	b195      	cbz	r5, 800f8b4 <rcl_action_send_goal_response+0x64>
 800f88e:	b18e      	cbz	r6, 800f8b4 <rcl_action_send_goal_response+0x64>
 800f890:	6820      	ldr	r0, [r4, #0]
 800f892:	4632      	mov	r2, r6
 800f894:	4629      	mov	r1, r5
 800f896:	f7fe fc23 	bl	800e0e0 <rcl_send_response>
 800f89a:	b110      	cbz	r0, 800f8a2 <rcl_action_send_goal_response+0x52>
 800f89c:	2802      	cmp	r0, #2
 800f89e:	bf18      	it	ne
 800f8a0:	2001      	movne	r0, #1
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
 800f8a4:	f7fa f8d4 	bl	8009a50 <rcutils_reset_error>
 800f8a8:	f640 0098 	movw	r0, #2200	@ 0x898
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	f640 0098 	movw	r0, #2200	@ 0x898
 800f8b2:	bd70      	pop	{r4, r5, r6, pc}
 800f8b4:	200b      	movs	r0, #11
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	f640 0098 	movw	r0, #2200	@ 0x898
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop

0800f8c0 <rcl_action_take_result_request>:
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d03a      	beq.n	800f93a <rcl_action_take_result_request+0x7a>
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	6800      	ldr	r0, [r0, #0]
 800f8ca:	b388      	cbz	r0, 800f930 <rcl_action_take_result_request+0x70>
 800f8cc:	460d      	mov	r5, r1
 800f8ce:	4616      	mov	r6, r2
 800f8d0:	f7fe fc1e 	bl	800e110 <rcl_service_is_valid>
 800f8d4:	b338      	cbz	r0, 800f926 <rcl_action_take_result_request+0x66>
 800f8d6:	6820      	ldr	r0, [r4, #0]
 800f8d8:	3004      	adds	r0, #4
 800f8da:	f7fe fc19 	bl	800e110 <rcl_service_is_valid>
 800f8de:	b310      	cbz	r0, 800f926 <rcl_action_take_result_request+0x66>
 800f8e0:	6820      	ldr	r0, [r4, #0]
 800f8e2:	3008      	adds	r0, #8
 800f8e4:	f7fe fc14 	bl	800e110 <rcl_service_is_valid>
 800f8e8:	b1e8      	cbz	r0, 800f926 <rcl_action_take_result_request+0x66>
 800f8ea:	6820      	ldr	r0, [r4, #0]
 800f8ec:	300c      	adds	r0, #12
 800f8ee:	f7f9 f93d 	bl	8008b6c <rcl_publisher_is_valid>
 800f8f2:	b1c0      	cbz	r0, 800f926 <rcl_action_take_result_request+0x66>
 800f8f4:	6820      	ldr	r0, [r4, #0]
 800f8f6:	3010      	adds	r0, #16
 800f8f8:	f7f9 f938 	bl	8008b6c <rcl_publisher_is_valid>
 800f8fc:	b198      	cbz	r0, 800f926 <rcl_action_take_result_request+0x66>
 800f8fe:	b1d5      	cbz	r5, 800f936 <rcl_action_take_result_request+0x76>
 800f900:	b1ce      	cbz	r6, 800f936 <rcl_action_take_result_request+0x76>
 800f902:	6820      	ldr	r0, [r4, #0]
 800f904:	4632      	mov	r2, r6
 800f906:	4629      	mov	r1, r5
 800f908:	3008      	adds	r0, #8
 800f90a:	f7fe fba9 	bl	800e060 <rcl_take_request>
 800f90e:	b148      	cbz	r0, 800f924 <rcl_action_take_result_request+0x64>
 800f910:	280a      	cmp	r0, #10
 800f912:	d007      	beq.n	800f924 <rcl_action_take_result_request+0x64>
 800f914:	f240 2259 	movw	r2, #601	@ 0x259
 800f918:	f640 0399 	movw	r3, #2201	@ 0x899
 800f91c:	4290      	cmp	r0, r2
 800f91e:	bf0c      	ite	eq
 800f920:	4618      	moveq	r0, r3
 800f922:	2001      	movne	r0, #1
 800f924:	bd70      	pop	{r4, r5, r6, pc}
 800f926:	f7fa f893 	bl	8009a50 <rcutils_reset_error>
 800f92a:	f640 0098 	movw	r0, #2200	@ 0x898
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	f640 0098 	movw	r0, #2200	@ 0x898
 800f934:	bd70      	pop	{r4, r5, r6, pc}
 800f936:	200b      	movs	r0, #11
 800f938:	bd70      	pop	{r4, r5, r6, pc}
 800f93a:	f640 0098 	movw	r0, #2200	@ 0x898
 800f93e:	4770      	bx	lr

0800f940 <rcl_action_take_cancel_request>:
 800f940:	2800      	cmp	r0, #0
 800f942:	d03a      	beq.n	800f9ba <rcl_action_take_cancel_request+0x7a>
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	4604      	mov	r4, r0
 800f948:	6800      	ldr	r0, [r0, #0]
 800f94a:	b388      	cbz	r0, 800f9b0 <rcl_action_take_cancel_request+0x70>
 800f94c:	460d      	mov	r5, r1
 800f94e:	4616      	mov	r6, r2
 800f950:	f7fe fbde 	bl	800e110 <rcl_service_is_valid>
 800f954:	b338      	cbz	r0, 800f9a6 <rcl_action_take_cancel_request+0x66>
 800f956:	6820      	ldr	r0, [r4, #0]
 800f958:	3004      	adds	r0, #4
 800f95a:	f7fe fbd9 	bl	800e110 <rcl_service_is_valid>
 800f95e:	b310      	cbz	r0, 800f9a6 <rcl_action_take_cancel_request+0x66>
 800f960:	6820      	ldr	r0, [r4, #0]
 800f962:	3008      	adds	r0, #8
 800f964:	f7fe fbd4 	bl	800e110 <rcl_service_is_valid>
 800f968:	b1e8      	cbz	r0, 800f9a6 <rcl_action_take_cancel_request+0x66>
 800f96a:	6820      	ldr	r0, [r4, #0]
 800f96c:	300c      	adds	r0, #12
 800f96e:	f7f9 f8fd 	bl	8008b6c <rcl_publisher_is_valid>
 800f972:	b1c0      	cbz	r0, 800f9a6 <rcl_action_take_cancel_request+0x66>
 800f974:	6820      	ldr	r0, [r4, #0]
 800f976:	3010      	adds	r0, #16
 800f978:	f7f9 f8f8 	bl	8008b6c <rcl_publisher_is_valid>
 800f97c:	b198      	cbz	r0, 800f9a6 <rcl_action_take_cancel_request+0x66>
 800f97e:	b1d5      	cbz	r5, 800f9b6 <rcl_action_take_cancel_request+0x76>
 800f980:	b1ce      	cbz	r6, 800f9b6 <rcl_action_take_cancel_request+0x76>
 800f982:	6820      	ldr	r0, [r4, #0]
 800f984:	4632      	mov	r2, r6
 800f986:	4629      	mov	r1, r5
 800f988:	3004      	adds	r0, #4
 800f98a:	f7fe fb69 	bl	800e060 <rcl_take_request>
 800f98e:	b148      	cbz	r0, 800f9a4 <rcl_action_take_cancel_request+0x64>
 800f990:	280a      	cmp	r0, #10
 800f992:	d007      	beq.n	800f9a4 <rcl_action_take_cancel_request+0x64>
 800f994:	f240 2259 	movw	r2, #601	@ 0x259
 800f998:	f640 0399 	movw	r3, #2201	@ 0x899
 800f99c:	4290      	cmp	r0, r2
 800f99e:	bf0c      	ite	eq
 800f9a0:	4618      	moveq	r0, r3
 800f9a2:	2001      	movne	r0, #1
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}
 800f9a6:	f7fa f853 	bl	8009a50 <rcutils_reset_error>
 800f9aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800f9ae:	bd70      	pop	{r4, r5, r6, pc}
 800f9b0:	f640 0098 	movw	r0, #2200	@ 0x898
 800f9b4:	bd70      	pop	{r4, r5, r6, pc}
 800f9b6:	200b      	movs	r0, #11
 800f9b8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ba:	f640 0098 	movw	r0, #2200	@ 0x898
 800f9be:	4770      	bx	lr

0800f9c0 <rcl_action_send_cancel_response>:
 800f9c0:	b398      	cbz	r0, 800fa2a <rcl_action_send_cancel_response+0x6a>
 800f9c2:	b570      	push	{r4, r5, r6, lr}
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	6800      	ldr	r0, [r0, #0]
 800f9c8:	b350      	cbz	r0, 800fa20 <rcl_action_send_cancel_response+0x60>
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	4616      	mov	r6, r2
 800f9ce:	f7fe fb9f 	bl	800e110 <rcl_service_is_valid>
 800f9d2:	b300      	cbz	r0, 800fa16 <rcl_action_send_cancel_response+0x56>
 800f9d4:	6820      	ldr	r0, [r4, #0]
 800f9d6:	3004      	adds	r0, #4
 800f9d8:	f7fe fb9a 	bl	800e110 <rcl_service_is_valid>
 800f9dc:	b1d8      	cbz	r0, 800fa16 <rcl_action_send_cancel_response+0x56>
 800f9de:	6820      	ldr	r0, [r4, #0]
 800f9e0:	3008      	adds	r0, #8
 800f9e2:	f7fe fb95 	bl	800e110 <rcl_service_is_valid>
 800f9e6:	b1b0      	cbz	r0, 800fa16 <rcl_action_send_cancel_response+0x56>
 800f9e8:	6820      	ldr	r0, [r4, #0]
 800f9ea:	300c      	adds	r0, #12
 800f9ec:	f7f9 f8be 	bl	8008b6c <rcl_publisher_is_valid>
 800f9f0:	b188      	cbz	r0, 800fa16 <rcl_action_send_cancel_response+0x56>
 800f9f2:	6820      	ldr	r0, [r4, #0]
 800f9f4:	3010      	adds	r0, #16
 800f9f6:	f7f9 f8b9 	bl	8008b6c <rcl_publisher_is_valid>
 800f9fa:	b160      	cbz	r0, 800fa16 <rcl_action_send_cancel_response+0x56>
 800f9fc:	b19d      	cbz	r5, 800fa26 <rcl_action_send_cancel_response+0x66>
 800f9fe:	b196      	cbz	r6, 800fa26 <rcl_action_send_cancel_response+0x66>
 800fa00:	6820      	ldr	r0, [r4, #0]
 800fa02:	4632      	mov	r2, r6
 800fa04:	4629      	mov	r1, r5
 800fa06:	3004      	adds	r0, #4
 800fa08:	f7fe fb6a 	bl	800e0e0 <rcl_send_response>
 800fa0c:	b110      	cbz	r0, 800fa14 <rcl_action_send_cancel_response+0x54>
 800fa0e:	2802      	cmp	r0, #2
 800fa10:	bf18      	it	ne
 800fa12:	2001      	movne	r0, #1
 800fa14:	bd70      	pop	{r4, r5, r6, pc}
 800fa16:	f7fa f81b 	bl	8009a50 <rcutils_reset_error>
 800fa1a:	f640 0098 	movw	r0, #2200	@ 0x898
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	f640 0098 	movw	r0, #2200	@ 0x898
 800fa24:	bd70      	pop	{r4, r5, r6, pc}
 800fa26:	200b      	movs	r0, #11
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
 800fa2a:	f640 0098 	movw	r0, #2200	@ 0x898
 800fa2e:	4770      	bx	lr

0800fa30 <rcl_action_wait_set_add_action_server>:
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d04d      	beq.n	800fad0 <rcl_action_wait_set_add_action_server+0xa0>
 800fa34:	b570      	push	{r4, r5, r6, lr}
 800fa36:	460c      	mov	r4, r1
 800fa38:	b159      	cbz	r1, 800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	6808      	ldr	r0, [r1, #0]
 800fa3e:	b140      	cbz	r0, 800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa40:	4616      	mov	r6, r2
 800fa42:	f7fe fb65 	bl	800e110 <rcl_service_is_valid>
 800fa46:	b120      	cbz	r0, 800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa48:	6820      	ldr	r0, [r4, #0]
 800fa4a:	3004      	adds	r0, #4
 800fa4c:	f7fe fb60 	bl	800e110 <rcl_service_is_valid>
 800fa50:	b910      	cbnz	r0, 800fa58 <rcl_action_wait_set_add_action_server+0x28>
 800fa52:	f640 0098 	movw	r0, #2200	@ 0x898
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	6820      	ldr	r0, [r4, #0]
 800fa5a:	3008      	adds	r0, #8
 800fa5c:	f7fe fb58 	bl	800e110 <rcl_service_is_valid>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d0f6      	beq.n	800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa64:	6820      	ldr	r0, [r4, #0]
 800fa66:	300c      	adds	r0, #12
 800fa68:	f7f9 f898 	bl	8008b9c <rcl_publisher_is_valid_except_context>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d0f0      	beq.n	800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa70:	6820      	ldr	r0, [r4, #0]
 800fa72:	3010      	adds	r0, #16
 800fa74:	f7f9 f892 	bl	8008b9c <rcl_publisher_is_valid_except_context>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0ea      	beq.n	800fa52 <rcl_action_wait_set_add_action_server+0x22>
 800fa7c:	6821      	ldr	r1, [r4, #0]
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800fa84:	f7ff face 	bl	800f024 <rcl_wait_set_add_service>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d1e4      	bne.n	800fa56 <rcl_action_wait_set_add_action_server+0x26>
 800fa8c:	6821      	ldr	r1, [r4, #0]
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800fa94:	3104      	adds	r1, #4
 800fa96:	f7ff fac5 	bl	800f024 <rcl_wait_set_add_service>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d1db      	bne.n	800fa56 <rcl_action_wait_set_add_action_server+0x26>
 800fa9e:	6821      	ldr	r1, [r4, #0]
 800faa0:	4628      	mov	r0, r5
 800faa2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800faa6:	3108      	adds	r1, #8
 800faa8:	f7ff fabc 	bl	800f024 <rcl_wait_set_add_service>
 800faac:	2800      	cmp	r0, #0
 800faae:	d1d2      	bne.n	800fa56 <rcl_action_wait_set_add_action_server+0x26>
 800fab0:	6821      	ldr	r1, [r4, #0]
 800fab2:	4628      	mov	r0, r5
 800fab4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800fab8:	3114      	adds	r1, #20
 800faba:	f7ff fa57 	bl	800ef6c <rcl_wait_set_add_timer>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d1c9      	bne.n	800fa56 <rcl_action_wait_set_add_action_server+0x26>
 800fac2:	2e00      	cmp	r6, #0
 800fac4:	d0c7      	beq.n	800fa56 <rcl_action_wait_set_add_action_server+0x26>
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800facc:	6033      	str	r3, [r6, #0]
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <rcl_action_server_wait_set_get_entities_ready>:
 800fad8:	2800      	cmp	r0, #0
 800fada:	d05a      	beq.n	800fb92 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	460c      	mov	r4, r1
 800fae0:	b161      	cbz	r1, 800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fae2:	4605      	mov	r5, r0
 800fae4:	6808      	ldr	r0, [r1, #0]
 800fae6:	b148      	cbz	r0, 800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fae8:	4616      	mov	r6, r2
 800faea:	461f      	mov	r7, r3
 800faec:	f7fe fb10 	bl	800e110 <rcl_service_is_valid>
 800faf0:	b120      	cbz	r0, 800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800faf2:	6820      	ldr	r0, [r4, #0]
 800faf4:	3004      	adds	r0, #4
 800faf6:	f7fe fb0b 	bl	800e110 <rcl_service_is_valid>
 800fafa:	b910      	cbnz	r0, 800fb02 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800fafc:	f640 0098 	movw	r0, #2200	@ 0x898
 800fb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb02:	6820      	ldr	r0, [r4, #0]
 800fb04:	3008      	adds	r0, #8
 800fb06:	f7fe fb03 	bl	800e110 <rcl_service_is_valid>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0f6      	beq.n	800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fb0e:	6820      	ldr	r0, [r4, #0]
 800fb10:	300c      	adds	r0, #12
 800fb12:	f7f9 f843 	bl	8008b9c <rcl_publisher_is_valid_except_context>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d0f0      	beq.n	800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fb1a:	6820      	ldr	r0, [r4, #0]
 800fb1c:	3010      	adds	r0, #16
 800fb1e:	f7f9 f83d 	bl	8008b9c <rcl_publisher_is_valid_except_context>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d0ea      	beq.n	800fafc <rcl_action_server_wait_set_get_entities_ready+0x24>
 800fb26:	b3be      	cbz	r6, 800fb98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fb28:	b3b7      	cbz	r7, 800fb98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fb2a:	9b06      	ldr	r3, [sp, #24]
 800fb2c:	b3a3      	cbz	r3, 800fb98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fb2e:	9b07      	ldr	r3, [sp, #28]
 800fb30:	b393      	cbz	r3, 800fb98 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800fb32:	6821      	ldr	r1, [r4, #0]
 800fb34:	692a      	ldr	r2, [r5, #16]
 800fb36:	6a2c      	ldr	r4, [r5, #32]
 800fb38:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800fb3c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800fb40:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800fb44:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800fb48:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800fb4c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800fb50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fb54:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800fb58:	1a64      	subs	r4, r4, r1
 800fb5a:	fab4 f484 	clz	r4, r4
 800fb5e:	0964      	lsrs	r4, r4, #5
 800fb60:	7034      	strb	r4, [r6, #0]
 800fb62:	1d0c      	adds	r4, r1, #4
 800fb64:	1b1b      	subs	r3, r3, r4
 800fb66:	fab3 f383 	clz	r3, r3
 800fb6a:	095b      	lsrs	r3, r3, #5
 800fb6c:	f101 0408 	add.w	r4, r1, #8
 800fb70:	703b      	strb	r3, [r7, #0]
 800fb72:	f101 0314 	add.w	r3, r1, #20
 800fb76:	1b01      	subs	r1, r0, r4
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	fab1 f181 	clz	r1, r1
 800fb7e:	9a06      	ldr	r2, [sp, #24]
 800fb80:	0949      	lsrs	r1, r1, #5
 800fb82:	7011      	strb	r1, [r2, #0]
 800fb84:	fab3 f383 	clz	r3, r3
 800fb88:	9a07      	ldr	r2, [sp, #28]
 800fb8a:	095b      	lsrs	r3, r3, #5
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	7013      	strb	r3, [r2, #0]
 800fb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fb96:	4770      	bx	lr
 800fb98:	200b      	movs	r0, #11
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb9c <_execute_event_handler>:
 800fb9c:	2002      	movs	r0, #2
 800fb9e:	4770      	bx	lr

0800fba0 <_cancel_goal_event_handler>:
 800fba0:	2003      	movs	r0, #3
 800fba2:	4770      	bx	lr

0800fba4 <_succeed_event_handler>:
 800fba4:	2004      	movs	r0, #4
 800fba6:	4770      	bx	lr

0800fba8 <_abort_event_handler>:
 800fba8:	2006      	movs	r0, #6
 800fbaa:	4770      	bx	lr

0800fbac <_canceled_event_handler>:
 800fbac:	2005      	movs	r0, #5
 800fbae:	4770      	bx	lr

0800fbb0 <rcl_action_transition_goal_state>:
 800fbb0:	b2c2      	uxtb	r2, r0
 800fbb2:	2a06      	cmp	r2, #6
 800fbb4:	d80c      	bhi.n	800fbd0 <rcl_action_transition_goal_state+0x20>
 800fbb6:	2904      	cmp	r1, #4
 800fbb8:	d80a      	bhi.n	800fbd0 <rcl_action_transition_goal_state+0x20>
 800fbba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800fbbe:	b410      	push	{r4}
 800fbc0:	1853      	adds	r3, r2, r1
 800fbc2:	4c06      	ldr	r4, [pc, #24]	@ (800fbdc <rcl_action_transition_goal_state+0x2c>)
 800fbc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fbc8:	b123      	cbz	r3, 800fbd4 <rcl_action_transition_goal_state+0x24>
 800fbca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbce:	4718      	bx	r3
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	4770      	bx	lr
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	08015c64 	.word	0x08015c64

0800fbe0 <rcl_action_get_zero_initialized_cancel_response>:
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4c07      	ldr	r4, [pc, #28]	@ (800fc00 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800fbe4:	4686      	mov	lr, r0
 800fbe6:	4684      	mov	ip, r0
 800fbe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	f8cc 3000 	str.w	r3, [ip]
 800fbfa:	4670      	mov	r0, lr
 800fbfc:	bd10      	pop	{r4, pc}
 800fbfe:	bf00      	nop
 800fc00:	08015cf0 	.word	0x08015cf0

0800fc04 <rclc_action_send_result_request>:
 800fc04:	b1d0      	cbz	r0, 800fc3c <rclc_action_send_result_request+0x38>
 800fc06:	b500      	push	{lr}
 800fc08:	4684      	mov	ip, r0
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800fc10:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800fc14:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800fc18:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800fc1c:	f10d 0e08 	add.w	lr, sp, #8
 800fc20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc24:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800fc28:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800fc2c:	a902      	add	r1, sp, #8
 800fc2e:	3010      	adds	r0, #16
 800fc30:	f7ff fbda 	bl	800f3e8 <rcl_action_send_result_request>
 800fc34:	b920      	cbnz	r0, 800fc40 <rclc_action_send_result_request+0x3c>
 800fc36:	b007      	add	sp, #28
 800fc38:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc3c:	200b      	movs	r0, #11
 800fc3e:	4770      	bx	lr
 800fc40:	9001      	str	r0, [sp, #4]
 800fc42:	f7f9 ff05 	bl	8009a50 <rcutils_reset_error>
 800fc46:	9801      	ldr	r0, [sp, #4]
 800fc48:	b007      	add	sp, #28
 800fc4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc4e:	bf00      	nop

0800fc50 <rclc_action_take_goal_handle>:
 800fc50:	b160      	cbz	r0, 800fc6c <rclc_action_take_goal_handle+0x1c>
 800fc52:	6883      	ldr	r3, [r0, #8]
 800fc54:	b143      	cbz	r3, 800fc68 <rclc_action_take_goal_handle+0x18>
 800fc56:	6819      	ldr	r1, [r3, #0]
 800fc58:	6081      	str	r1, [r0, #8]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	721a      	strb	r2, [r3, #8]
 800fc5e:	68c1      	ldr	r1, [r0, #12]
 800fc60:	6019      	str	r1, [r3, #0]
 800fc62:	621a      	str	r2, [r3, #32]
 800fc64:	849a      	strh	r2, [r3, #36]	@ 0x24
 800fc66:	60c3      	str	r3, [r0, #12]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	4770      	bx	lr
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	e7fb      	b.n	800fc68 <rclc_action_take_goal_handle+0x18>

0800fc70 <rclc_action_remove_used_goal_handle>:
 800fc70:	b180      	cbz	r0, 800fc94 <rclc_action_remove_used_goal_handle+0x24>
 800fc72:	b179      	cbz	r1, 800fc94 <rclc_action_remove_used_goal_handle+0x24>
 800fc74:	68c3      	ldr	r3, [r0, #12]
 800fc76:	4299      	cmp	r1, r3
 800fc78:	d00d      	beq.n	800fc96 <rclc_action_remove_used_goal_handle+0x26>
 800fc7a:	b12b      	cbz	r3, 800fc88 <rclc_action_remove_used_goal_handle+0x18>
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	4291      	cmp	r1, r2
 800fc80:	d003      	beq.n	800fc8a <rclc_action_remove_used_goal_handle+0x1a>
 800fc82:	4613      	mov	r3, r2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1f9      	bne.n	800fc7c <rclc_action_remove_used_goal_handle+0xc>
 800fc88:	4770      	bx	lr
 800fc8a:	680a      	ldr	r2, [r1, #0]
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	6883      	ldr	r3, [r0, #8]
 800fc90:	600b      	str	r3, [r1, #0]
 800fc92:	6081      	str	r1, [r0, #8]
 800fc94:	4770      	bx	lr
 800fc96:	680b      	ldr	r3, [r1, #0]
 800fc98:	60c3      	str	r3, [r0, #12]
 800fc9a:	e7f8      	b.n	800fc8e <rclc_action_remove_used_goal_handle+0x1e>

0800fc9c <rclc_action_find_goal_handle_by_uuid>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	b180      	cbz	r0, 800fcc2 <rclc_action_find_goal_handle_by_uuid+0x26>
 800fca0:	460d      	mov	r5, r1
 800fca2:	b181      	cbz	r1, 800fcc6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800fca4:	68c4      	ldr	r4, [r0, #12]
 800fca6:	b914      	cbnz	r4, 800fcae <rclc_action_find_goal_handle_by_uuid+0x12>
 800fca8:	e009      	b.n	800fcbe <rclc_action_find_goal_handle_by_uuid+0x22>
 800fcaa:	6824      	ldr	r4, [r4, #0]
 800fcac:	b13c      	cbz	r4, 800fcbe <rclc_action_find_goal_handle_by_uuid+0x22>
 800fcae:	f104 0009 	add.w	r0, r4, #9
 800fcb2:	2210      	movs	r2, #16
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	f004 fd11 	bl	80146dc <memcmp>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d1f5      	bne.n	800fcaa <rclc_action_find_goal_handle_by_uuid+0xe>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	bd38      	pop	{r3, r4, r5, pc}
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	e7fb      	b.n	800fcbe <rclc_action_find_goal_handle_by_uuid+0x22>
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	e7f9      	b.n	800fcbe <rclc_action_find_goal_handle_by_uuid+0x22>
 800fcca:	bf00      	nop

0800fccc <rclc_action_find_first_handle_by_status>:
 800fccc:	b140      	cbz	r0, 800fce0 <rclc_action_find_first_handle_by_status+0x14>
 800fcce:	68c0      	ldr	r0, [r0, #12]
 800fcd0:	b910      	cbnz	r0, 800fcd8 <rclc_action_find_first_handle_by_status+0xc>
 800fcd2:	e005      	b.n	800fce0 <rclc_action_find_first_handle_by_status+0x14>
 800fcd4:	6800      	ldr	r0, [r0, #0]
 800fcd6:	b118      	cbz	r0, 800fce0 <rclc_action_find_first_handle_by_status+0x14>
 800fcd8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	d1f9      	bne.n	800fcd4 <rclc_action_find_first_handle_by_status+0x8>
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop

0800fce4 <rclc_action_find_first_terminated_handle>:
 800fce4:	b140      	cbz	r0, 800fcf8 <rclc_action_find_first_terminated_handle+0x14>
 800fce6:	68c0      	ldr	r0, [r0, #12]
 800fce8:	b910      	cbnz	r0, 800fcf0 <rclc_action_find_first_terminated_handle+0xc>
 800fcea:	e005      	b.n	800fcf8 <rclc_action_find_first_terminated_handle+0x14>
 800fcec:	6800      	ldr	r0, [r0, #0]
 800fcee:	b118      	cbz	r0, 800fcf8 <rclc_action_find_first_terminated_handle+0x14>
 800fcf0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800fcf4:	2b03      	cmp	r3, #3
 800fcf6:	ddf9      	ble.n	800fcec <rclc_action_find_first_terminated_handle+0x8>
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <rclc_action_find_handle_by_goal_request_sequence_number>:
 800fcfc:	b170      	cbz	r0, 800fd1c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800fcfe:	68c0      	ldr	r0, [r0, #12]
 800fd00:	b160      	cbz	r0, 800fd1c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800fd02:	b410      	push	{r4}
 800fd04:	e001      	b.n	800fd0a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800fd06:	6800      	ldr	r0, [r0, #0]
 800fd08:	b128      	cbz	r0, 800fd16 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800fd0a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	bf08      	it	eq
 800fd12:	4294      	cmpeq	r4, r2
 800fd14:	d1f7      	bne.n	800fd06 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800fd16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop

0800fd20 <rclc_action_find_handle_by_result_request_sequence_number>:
 800fd20:	b170      	cbz	r0, 800fd40 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800fd22:	68c0      	ldr	r0, [r0, #12]
 800fd24:	b160      	cbz	r0, 800fd40 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800fd26:	b410      	push	{r4}
 800fd28:	e001      	b.n	800fd2e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	b128      	cbz	r0, 800fd3a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800fd2e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800fd32:	4299      	cmp	r1, r3
 800fd34:	bf08      	it	eq
 800fd36:	4294      	cmpeq	r4, r2
 800fd38:	d1f7      	bne.n	800fd2a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800fd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop

0800fd44 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800fd44:	b170      	cbz	r0, 800fd64 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800fd46:	68c0      	ldr	r0, [r0, #12]
 800fd48:	b160      	cbz	r0, 800fd64 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800fd4a:	b410      	push	{r4}
 800fd4c:	e001      	b.n	800fd52 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800fd4e:	6800      	ldr	r0, [r0, #0]
 800fd50:	b128      	cbz	r0, 800fd5e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800fd52:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800fd56:	4299      	cmp	r1, r3
 800fd58:	bf08      	it	eq
 800fd5a:	4294      	cmpeq	r4, r2
 800fd5c:	d1f7      	bne.n	800fd4e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800fd5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop

0800fd68 <rclc_action_find_first_handle_with_goal_response>:
 800fd68:	b140      	cbz	r0, 800fd7c <rclc_action_find_first_handle_with_goal_response+0x14>
 800fd6a:	68c0      	ldr	r0, [r0, #12]
 800fd6c:	b910      	cbnz	r0, 800fd74 <rclc_action_find_first_handle_with_goal_response+0xc>
 800fd6e:	e005      	b.n	800fd7c <rclc_action_find_first_handle_with_goal_response+0x14>
 800fd70:	6800      	ldr	r0, [r0, #0]
 800fd72:	b118      	cbz	r0, 800fd7c <rclc_action_find_first_handle_with_goal_response+0x14>
 800fd74:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d0f9      	beq.n	800fd70 <rclc_action_find_first_handle_with_goal_response+0x8>
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop

0800fd80 <rclc_action_find_first_handle_with_result_response>:
 800fd80:	b140      	cbz	r0, 800fd94 <rclc_action_find_first_handle_with_result_response+0x14>
 800fd82:	68c0      	ldr	r0, [r0, #12]
 800fd84:	b910      	cbnz	r0, 800fd8c <rclc_action_find_first_handle_with_result_response+0xc>
 800fd86:	e005      	b.n	800fd94 <rclc_action_find_first_handle_with_result_response+0x14>
 800fd88:	6800      	ldr	r0, [r0, #0]
 800fd8a:	b118      	cbz	r0, 800fd94 <rclc_action_find_first_handle_with_result_response+0x14>
 800fd8c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d0f9      	beq.n	800fd88 <rclc_action_find_first_handle_with_result_response+0x8>
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop

0800fd98 <rclc_action_server_response_goal_request>:
 800fd98:	b198      	cbz	r0, 800fdc2 <rclc_action_server_response_goal_request+0x2a>
 800fd9a:	b510      	push	{r4, lr}
 800fd9c:	6844      	ldr	r4, [r0, #4]
 800fd9e:	b086      	sub	sp, #24
 800fda0:	2200      	movs	r2, #0
 800fda2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800fda6:	460b      	mov	r3, r1
 800fda8:	9205      	str	r2, [sp, #20]
 800fdaa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800fdae:	aa03      	add	r2, sp, #12
 800fdb0:	f104 0010 	add.w	r0, r4, #16
 800fdb4:	f88d 300c 	strb.w	r3, [sp, #12]
 800fdb8:	f7ff fd4a 	bl	800f850 <rcl_action_send_goal_response>
 800fdbc:	b918      	cbnz	r0, 800fdc6 <rclc_action_server_response_goal_request+0x2e>
 800fdbe:	b006      	add	sp, #24
 800fdc0:	bd10      	pop	{r4, pc}
 800fdc2:	200b      	movs	r0, #11
 800fdc4:	4770      	bx	lr
 800fdc6:	9001      	str	r0, [sp, #4]
 800fdc8:	f7f9 fe42 	bl	8009a50 <rcutils_reset_error>
 800fdcc:	9801      	ldr	r0, [sp, #4]
 800fdce:	b006      	add	sp, #24
 800fdd0:	bd10      	pop	{r4, pc}
 800fdd2:	bf00      	nop
 800fdd4:	0000      	movs	r0, r0
	...

0800fdd8 <rclc_action_server_goal_cancel_accept>:
 800fdd8:	b310      	cbz	r0, 800fe20 <rclc_action_server_goal_cancel_accept+0x48>
 800fdda:	b510      	push	{r4, lr}
 800fddc:	b090      	sub	sp, #64	@ 0x40
 800fdde:	4604      	mov	r4, r0
 800fde0:	a806      	add	r0, sp, #24
 800fde2:	f7ff fefd 	bl	800fbe0 <rcl_action_get_zero_initialized_cancel_response>
 800fde6:	2300      	movs	r3, #0
 800fde8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800fdec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800fdf0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800fdf4:	f88d 3018 	strb.w	r3, [sp, #24]
 800fdf8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800fdfc:	f8cd d01c 	str.w	sp, [sp, #28]
 800fe00:	46ec      	mov	ip, sp
 800fe02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe06:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800fe28 <rclc_action_server_goal_cancel_accept+0x50>
 800fe0a:	6860      	ldr	r0, [r4, #4]
 800fe0c:	aa06      	add	r2, sp, #24
 800fe0e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800fe12:	3010      	adds	r0, #16
 800fe14:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fe18:	f7ff fdd2 	bl	800f9c0 <rcl_action_send_cancel_response>
 800fe1c:	b010      	add	sp, #64	@ 0x40
 800fe1e:	bd10      	pop	{r4, pc}
 800fe20:	200b      	movs	r0, #11
 800fe22:	4770      	bx	lr
 800fe24:	f3af 8000 	nop.w
 800fe28:	00000001 	.word	0x00000001
 800fe2c:	00000001 	.word	0x00000001

0800fe30 <rclc_action_server_goal_cancel_reject>:
 800fe30:	b082      	sub	sp, #8
 800fe32:	b530      	push	{r4, r5, lr}
 800fe34:	b08b      	sub	sp, #44	@ 0x2c
 800fe36:	ac0e      	add	r4, sp, #56	@ 0x38
 800fe38:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe3c:	b188      	cbz	r0, 800fe62 <rclc_action_server_goal_cancel_reject+0x32>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	a801      	add	r0, sp, #4
 800fe42:	460d      	mov	r5, r1
 800fe44:	f7ff fecc 	bl	800fbe0 <rcl_action_get_zero_initialized_cancel_response>
 800fe48:	aa01      	add	r2, sp, #4
 800fe4a:	a90e      	add	r1, sp, #56	@ 0x38
 800fe4c:	f104 0010 	add.w	r0, r4, #16
 800fe50:	f88d 5004 	strb.w	r5, [sp, #4]
 800fe54:	f7ff fdb4 	bl	800f9c0 <rcl_action_send_cancel_response>
 800fe58:	b00b      	add	sp, #44	@ 0x2c
 800fe5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe5e:	b002      	add	sp, #8
 800fe60:	4770      	bx	lr
 800fe62:	200b      	movs	r0, #11
 800fe64:	b00b      	add	sp, #44	@ 0x2c
 800fe66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe6a:	b002      	add	sp, #8
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop

0800fe70 <__atomic_load_8>:
 800fe70:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800fe74:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800fe78:	4a15      	ldr	r2, [pc, #84]	@ (800fed0 <__atomic_load_8+0x60>)
 800fe7a:	4b16      	ldr	r3, [pc, #88]	@ (800fed4 <__atomic_load_8+0x64>)
 800fe7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800fe80:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800fe84:	fb02 f101 	mul.w	r1, r2, r1
 800fe88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800fe8c:	fba3 2301 	umull	r2, r3, r3, r1
 800fe90:	091b      	lsrs	r3, r3, #4
 800fe92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800fe96:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800fe9a:	b4d0      	push	{r4, r6, r7}
 800fe9c:	4c0e      	ldr	r4, [pc, #56]	@ (800fed8 <__atomic_load_8+0x68>)
 800fe9e:	1ac9      	subs	r1, r1, r3
 800fea0:	1862      	adds	r2, r4, r1
 800fea2:	f04f 0c01 	mov.w	ip, #1
 800fea6:	e8d2 3f4f 	ldrexb	r3, [r2]
 800feaa:	e8c2 cf46 	strexb	r6, ip, [r2]
 800feae:	2e00      	cmp	r6, #0
 800feb0:	d1f9      	bne.n	800fea6 <__atomic_load_8+0x36>
 800feb2:	f3bf 8f5b 	dmb	ish
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1f4      	bne.n	800fea6 <__atomic_load_8+0x36>
 800febc:	e9d0 6700 	ldrd	r6, r7, [r0]
 800fec0:	f3bf 8f5b 	dmb	ish
 800fec4:	5463      	strb	r3, [r4, r1]
 800fec6:	4630      	mov	r0, r6
 800fec8:	4639      	mov	r1, r7
 800feca:	bcd0      	pop	{r4, r6, r7}
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	27d4eb2d 	.word	0x27d4eb2d
 800fed4:	b21642c9 	.word	0xb21642c9
 800fed8:	2000db88 	.word	0x2000db88

0800fedc <__atomic_store_8>:
 800fedc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800fee0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800fee4:	b570      	push	{r4, r5, r6, lr}
 800fee6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800feea:	4c14      	ldr	r4, [pc, #80]	@ (800ff3c <__atomic_store_8+0x60>)
 800feec:	4d14      	ldr	r5, [pc, #80]	@ (800ff40 <__atomic_store_8+0x64>)
 800feee:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800fef2:	fb04 f101 	mul.w	r1, r4, r1
 800fef6:	4c13      	ldr	r4, [pc, #76]	@ (800ff44 <__atomic_store_8+0x68>)
 800fef8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800fefc:	fba4 4e01 	umull	r4, lr, r4, r1
 800ff00:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800ff04:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800ff08:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800ff0c:	eba1 0e0e 	sub.w	lr, r1, lr
 800ff10:	eb05 0c0e 	add.w	ip, r5, lr
 800ff14:	f04f 0401 	mov.w	r4, #1
 800ff18:	e8dc 1f4f 	ldrexb	r1, [ip]
 800ff1c:	e8cc 4f46 	strexb	r6, r4, [ip]
 800ff20:	2e00      	cmp	r6, #0
 800ff22:	d1f9      	bne.n	800ff18 <__atomic_store_8+0x3c>
 800ff24:	f3bf 8f5b 	dmb	ish
 800ff28:	b2c9      	uxtb	r1, r1
 800ff2a:	2900      	cmp	r1, #0
 800ff2c:	d1f4      	bne.n	800ff18 <__atomic_store_8+0x3c>
 800ff2e:	e9c0 2300 	strd	r2, r3, [r0]
 800ff32:	f3bf 8f5b 	dmb	ish
 800ff36:	f805 100e 	strb.w	r1, [r5, lr]
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	27d4eb2d 	.word	0x27d4eb2d
 800ff40:	2000db88 	.word	0x2000db88
 800ff44:	b21642c9 	.word	0xb21642c9

0800ff48 <__atomic_exchange_8>:
 800ff48:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800ff4c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800ff50:	4916      	ldr	r1, [pc, #88]	@ (800ffac <__atomic_exchange_8+0x64>)
 800ff52:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800ff56:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800ff5a:	fb01 fc0c 	mul.w	ip, r1, ip
 800ff5e:	4914      	ldr	r1, [pc, #80]	@ (800ffb0 <__atomic_exchange_8+0x68>)
 800ff60:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	4605      	mov	r5, r0
 800ff68:	fba1 010c 	umull	r0, r1, r1, ip
 800ff6c:	0909      	lsrs	r1, r1, #4
 800ff6e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800ff72:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800ff76:	4e0f      	ldr	r6, [pc, #60]	@ (800ffb4 <__atomic_exchange_8+0x6c>)
 800ff78:	ebac 0c01 	sub.w	ip, ip, r1
 800ff7c:	eb06 010c 	add.w	r1, r6, ip
 800ff80:	f04f 0e01 	mov.w	lr, #1
 800ff84:	e8d1 4f4f 	ldrexb	r4, [r1]
 800ff88:	e8c1 ef40 	strexb	r0, lr, [r1]
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d1f9      	bne.n	800ff84 <__atomic_exchange_8+0x3c>
 800ff90:	f3bf 8f5b 	dmb	ish
 800ff94:	b2e4      	uxtb	r4, r4
 800ff96:	2c00      	cmp	r4, #0
 800ff98:	d1f4      	bne.n	800ff84 <__atomic_exchange_8+0x3c>
 800ff9a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ff9e:	e9c5 2300 	strd	r2, r3, [r5]
 800ffa2:	f3bf 8f5b 	dmb	ish
 800ffa6:	f806 400c 	strb.w	r4, [r6, ip]
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}
 800ffac:	27d4eb2d 	.word	0x27d4eb2d
 800ffb0:	b21642c9 	.word	0xb21642c9
 800ffb4:	2000db88 	.word	0x2000db88

0800ffb8 <rcutils_get_env>:
 800ffb8:	b168      	cbz	r0, 800ffd6 <rcutils_get_env+0x1e>
 800ffba:	b510      	push	{r4, lr}
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	b129      	cbz	r1, 800ffcc <rcutils_get_env+0x14>
 800ffc0:	f003 fffa 	bl	8013fb8 <getenv>
 800ffc4:	b120      	cbz	r0, 800ffd0 <rcutils_get_env+0x18>
 800ffc6:	6020      	str	r0, [r4, #0]
 800ffc8:	2000      	movs	r0, #0
 800ffca:	bd10      	pop	{r4, pc}
 800ffcc:	4803      	ldr	r0, [pc, #12]	@ (800ffdc <rcutils_get_env+0x24>)
 800ffce:	bd10      	pop	{r4, pc}
 800ffd0:	4b03      	ldr	r3, [pc, #12]	@ (800ffe0 <rcutils_get_env+0x28>)
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	4803      	ldr	r0, [pc, #12]	@ (800ffe4 <rcutils_get_env+0x2c>)
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	08015d30 	.word	0x08015d30
 800ffe0:	08015e54 	.word	0x08015e54
 800ffe4:	08015d14 	.word	0x08015d14

0800ffe8 <rcutils_is_directory>:
 800ffe8:	2000      	movs	r0, #0
 800ffea:	4770      	bx	lr

0800ffec <rcutils_join_path>:
 800ffec:	b082      	sub	sp, #8
 800ffee:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fff2:	2000      	movs	r0, #0
 800fff4:	b002      	add	sp, #8
 800fff6:	4770      	bx	lr

0800fff8 <rcutils_to_native_path>:
 800fff8:	b084      	sub	sp, #16
 800fffa:	a801      	add	r0, sp, #4
 800fffc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010000:	b004      	add	sp, #16
 8010002:	2000      	movs	r0, #0
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop

08010008 <rcutils_format_string_limit>:
 8010008:	b40f      	push	{r0, r1, r2, r3}
 801000a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000c:	b083      	sub	sp, #12
 801000e:	ac08      	add	r4, sp, #32
 8010010:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010016:	b34e      	cbz	r6, 801006c <rcutils_format_string_limit+0x64>
 8010018:	a808      	add	r0, sp, #32
 801001a:	f7f9 fcf3 	bl	8009a04 <rcutils_allocator_is_valid>
 801001e:	b328      	cbz	r0, 801006c <rcutils_format_string_limit+0x64>
 8010020:	2100      	movs	r1, #0
 8010022:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010024:	4632      	mov	r2, r6
 8010026:	4608      	mov	r0, r1
 8010028:	e9cd 3300 	strd	r3, r3, [sp]
 801002c:	f000 f8f4 	bl	8010218 <rcutils_vsnprintf>
 8010030:	1c43      	adds	r3, r0, #1
 8010032:	4605      	mov	r5, r0
 8010034:	d01a      	beq.n	801006c <rcutils_format_string_limit+0x64>
 8010036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801003a:	1c47      	adds	r7, r0, #1
 801003c:	429f      	cmp	r7, r3
 801003e:	bf84      	itt	hi
 8010040:	461f      	movhi	r7, r3
 8010042:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010046:	4638      	mov	r0, r7
 8010048:	9b08      	ldr	r3, [sp, #32]
 801004a:	4798      	blx	r3
 801004c:	4604      	mov	r4, r0
 801004e:	b168      	cbz	r0, 801006c <rcutils_format_string_limit+0x64>
 8010050:	9b01      	ldr	r3, [sp, #4]
 8010052:	4632      	mov	r2, r6
 8010054:	4639      	mov	r1, r7
 8010056:	f000 f8df 	bl	8010218 <rcutils_vsnprintf>
 801005a:	2800      	cmp	r0, #0
 801005c:	db02      	blt.n	8010064 <rcutils_format_string_limit+0x5c>
 801005e:	2300      	movs	r3, #0
 8010060:	5563      	strb	r3, [r4, r5]
 8010062:	e004      	b.n	801006e <rcutils_format_string_limit+0x66>
 8010064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010066:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010068:	4620      	mov	r0, r4
 801006a:	4798      	blx	r3
 801006c:	2400      	movs	r4, #0
 801006e:	4620      	mov	r0, r4
 8010070:	b003      	add	sp, #12
 8010072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010076:	b004      	add	sp, #16
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop

0801007c <rcutils_repl_str>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	ed2d 8b02 	vpush	{d8}
 8010084:	b087      	sub	sp, #28
 8010086:	4680      	mov	r8, r0
 8010088:	4608      	mov	r0, r1
 801008a:	f8cd 8004 	str.w	r8, [sp, #4]
 801008e:	ee08 2a10 	vmov	s16, r2
 8010092:	468a      	mov	sl, r1
 8010094:	4699      	mov	r9, r3
 8010096:	f7f0 f8ad 	bl	80001f4 <strlen>
 801009a:	2600      	movs	r6, #0
 801009c:	4647      	mov	r7, r8
 801009e:	9002      	str	r0, [sp, #8]
 80100a0:	46b3      	mov	fp, r6
 80100a2:	2510      	movs	r5, #16
 80100a4:	46b0      	mov	r8, r6
 80100a6:	e01d      	b.n	80100e4 <rcutils_repl_str+0x68>
 80100a8:	f10b 0b01 	add.w	fp, fp, #1
 80100ac:	455e      	cmp	r6, fp
 80100ae:	d211      	bcs.n	80100d4 <rcutils_repl_str+0x58>
 80100b0:	442e      	add	r6, r5
 80100b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80100b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80100ba:	00b1      	lsls	r1, r6, #2
 80100bc:	4798      	blx	r3
 80100be:	2800      	cmp	r0, #0
 80100c0:	f000 8088 	beq.w	80101d4 <rcutils_repl_str+0x158>
 80100c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100c8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80100cc:	4680      	mov	r8, r0
 80100ce:	bf28      	it	cs
 80100d0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80100d4:	9a01      	ldr	r2, [sp, #4]
 80100d6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80100da:	1aa2      	subs	r2, r4, r2
 80100dc:	f843 2c04 	str.w	r2, [r3, #-4]
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	18e7      	adds	r7, r4, r3
 80100e4:	4651      	mov	r1, sl
 80100e6:	4638      	mov	r0, r7
 80100e8:	f004 fb49 	bl	801477e <strstr>
 80100ec:	4604      	mov	r4, r0
 80100ee:	4640      	mov	r0, r8
 80100f0:	2c00      	cmp	r4, #0
 80100f2:	d1d9      	bne.n	80100a8 <rcutils_repl_str+0x2c>
 80100f4:	46b8      	mov	r8, r7
 80100f6:	4607      	mov	r7, r0
 80100f8:	4640      	mov	r0, r8
 80100fa:	f7f0 f87b 	bl	80001f4 <strlen>
 80100fe:	9b01      	ldr	r3, [sp, #4]
 8010100:	eba8 0303 	sub.w	r3, r8, r3
 8010104:	181c      	adds	r4, r3, r0
 8010106:	9404      	str	r4, [sp, #16]
 8010108:	f1bb 0f00 	cmp.w	fp, #0
 801010c:	d04a      	beq.n	80101a4 <rcutils_repl_str+0x128>
 801010e:	ee18 0a10 	vmov	r0, s16
 8010112:	f7f0 f86f 	bl	80001f4 <strlen>
 8010116:	9b02      	ldr	r3, [sp, #8]
 8010118:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801011c:	1ac3      	subs	r3, r0, r3
 801011e:	fb0b 4303 	mla	r3, fp, r3, r4
 8010122:	461a      	mov	r2, r3
 8010124:	9305      	str	r3, [sp, #20]
 8010126:	4606      	mov	r6, r0
 8010128:	f8d9 3000 	ldr.w	r3, [r9]
 801012c:	1c50      	adds	r0, r2, #1
 801012e:	4798      	blx	r3
 8010130:	9003      	str	r0, [sp, #12]
 8010132:	2800      	cmp	r0, #0
 8010134:	d04f      	beq.n	80101d6 <rcutils_repl_str+0x15a>
 8010136:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	4641      	mov	r1, r8
 801013e:	f004 fbc0 	bl	80148c2 <memcpy>
 8010142:	683d      	ldr	r5, [r7, #0]
 8010144:	9b03      	ldr	r3, [sp, #12]
 8010146:	9701      	str	r7, [sp, #4]
 8010148:	46ba      	mov	sl, r7
 801014a:	441d      	add	r5, r3
 801014c:	9f02      	ldr	r7, [sp, #8]
 801014e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010152:	2401      	movs	r4, #1
 8010154:	46d1      	mov	r9, sl
 8010156:	ee18 aa10 	vmov	sl, s16
 801015a:	e00a      	b.n	8010172 <rcutils_repl_str+0xf6>
 801015c:	f8d9 5000 	ldr.w	r5, [r9]
 8010160:	1aaa      	subs	r2, r5, r2
 8010162:	1885      	adds	r5, r0, r2
 8010164:	f004 fbad 	bl	80148c2 <memcpy>
 8010168:	45a3      	cmp	fp, r4
 801016a:	f104 0201 	add.w	r2, r4, #1
 801016e:	d935      	bls.n	80101dc <rcutils_repl_str+0x160>
 8010170:	4614      	mov	r4, r2
 8010172:	4632      	mov	r2, r6
 8010174:	4651      	mov	r1, sl
 8010176:	4628      	mov	r0, r5
 8010178:	f004 fba3 	bl	80148c2 <memcpy>
 801017c:	f859 2b04 	ldr.w	r2, [r9], #4
 8010180:	45a3      	cmp	fp, r4
 8010182:	443a      	add	r2, r7
 8010184:	eb05 0006 	add.w	r0, r5, r6
 8010188:	eb08 0102 	add.w	r1, r8, r2
 801018c:	d1e6      	bne.n	801015c <rcutils_repl_str+0xe0>
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	1a9a      	subs	r2, r3, r2
 8010192:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010196:	f004 fb94 	bl	80148c2 <memcpy>
 801019a:	9a03      	ldr	r2, [sp, #12]
 801019c:	9905      	ldr	r1, [sp, #20]
 801019e:	2300      	movs	r3, #0
 80101a0:	5453      	strb	r3, [r2, r1]
 80101a2:	e00b      	b.n	80101bc <rcutils_repl_str+0x140>
 80101a4:	4620      	mov	r0, r4
 80101a6:	f8d9 3000 	ldr.w	r3, [r9]
 80101aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80101ae:	3001      	adds	r0, #1
 80101b0:	4798      	blx	r3
 80101b2:	9003      	str	r0, [sp, #12]
 80101b4:	b110      	cbz	r0, 80101bc <rcutils_repl_str+0x140>
 80101b6:	9901      	ldr	r1, [sp, #4]
 80101b8:	f004 fb7b 	bl	80148b2 <strcpy>
 80101bc:	4638      	mov	r0, r7
 80101be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80101c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80101c6:	4798      	blx	r3
 80101c8:	9803      	ldr	r0, [sp, #12]
 80101ca:	b007      	add	sp, #28
 80101cc:	ecbd 8b02 	vpop	{d8}
 80101d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d4:	4647      	mov	r7, r8
 80101d6:	2300      	movs	r3, #0
 80101d8:	9303      	str	r3, [sp, #12]
 80101da:	e7ef      	b.n	80101bc <rcutils_repl_str+0x140>
 80101dc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80101e0:	e7db      	b.n	801019a <rcutils_repl_str+0x11e>
 80101e2:	bf00      	nop

080101e4 <rcutils_snprintf>:
 80101e4:	b40c      	push	{r2, r3}
 80101e6:	b530      	push	{r4, r5, lr}
 80101e8:	b083      	sub	sp, #12
 80101ea:	ab06      	add	r3, sp, #24
 80101ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80101f0:	9301      	str	r3, [sp, #4]
 80101f2:	b152      	cbz	r2, 801020a <rcutils_snprintf+0x26>
 80101f4:	b138      	cbz	r0, 8010206 <rcutils_snprintf+0x22>
 80101f6:	b141      	cbz	r1, 801020a <rcutils_snprintf+0x26>
 80101f8:	f004 fa62 	bl	80146c0 <vsniprintf>
 80101fc:	b003      	add	sp, #12
 80101fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010202:	b002      	add	sp, #8
 8010204:	4770      	bx	lr
 8010206:	2900      	cmp	r1, #0
 8010208:	d0f6      	beq.n	80101f8 <rcutils_snprintf+0x14>
 801020a:	f004 fb25 	bl	8014858 <__errno>
 801020e:	2316      	movs	r3, #22
 8010210:	6003      	str	r3, [r0, #0]
 8010212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010216:	e7f1      	b.n	80101fc <rcutils_snprintf+0x18>

08010218 <rcutils_vsnprintf>:
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	b13a      	cbz	r2, 801022c <rcutils_vsnprintf+0x14>
 801021c:	b120      	cbz	r0, 8010228 <rcutils_vsnprintf+0x10>
 801021e:	b129      	cbz	r1, 801022c <rcutils_vsnprintf+0x14>
 8010220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010224:	f004 ba4c 	b.w	80146c0 <vsniprintf>
 8010228:	2900      	cmp	r1, #0
 801022a:	d0f9      	beq.n	8010220 <rcutils_vsnprintf+0x8>
 801022c:	f004 fb14 	bl	8014858 <__errno>
 8010230:	2316      	movs	r3, #22
 8010232:	6003      	str	r3, [r0, #0]
 8010234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010238:	bd70      	pop	{r4, r5, r6, pc}
 801023a:	bf00      	nop

0801023c <rcutils_strdup>:
 801023c:	b084      	sub	sp, #16
 801023e:	b570      	push	{r4, r5, r6, lr}
 8010240:	b082      	sub	sp, #8
 8010242:	ac07      	add	r4, sp, #28
 8010244:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010248:	4605      	mov	r5, r0
 801024a:	b1b0      	cbz	r0, 801027a <rcutils_strdup+0x3e>
 801024c:	f7ef ffd2 	bl	80001f4 <strlen>
 8010250:	1c42      	adds	r2, r0, #1
 8010252:	9b07      	ldr	r3, [sp, #28]
 8010254:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010256:	9201      	str	r2, [sp, #4]
 8010258:	4606      	mov	r6, r0
 801025a:	4610      	mov	r0, r2
 801025c:	4798      	blx	r3
 801025e:	4604      	mov	r4, r0
 8010260:	b128      	cbz	r0, 801026e <rcutils_strdup+0x32>
 8010262:	9a01      	ldr	r2, [sp, #4]
 8010264:	4629      	mov	r1, r5
 8010266:	f004 fb2c 	bl	80148c2 <memcpy>
 801026a:	2300      	movs	r3, #0
 801026c:	55a3      	strb	r3, [r4, r6]
 801026e:	4620      	mov	r0, r4
 8010270:	b002      	add	sp, #8
 8010272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010276:	b004      	add	sp, #16
 8010278:	4770      	bx	lr
 801027a:	4604      	mov	r4, r0
 801027c:	e7f7      	b.n	801026e <rcutils_strdup+0x32>
 801027e:	bf00      	nop

08010280 <rcutils_strndup>:
 8010280:	b082      	sub	sp, #8
 8010282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010284:	ac06      	add	r4, sp, #24
 8010286:	e884 000c 	stmia.w	r4, {r2, r3}
 801028a:	4605      	mov	r5, r0
 801028c:	b188      	cbz	r0, 80102b2 <rcutils_strndup+0x32>
 801028e:	1c4f      	adds	r7, r1, #1
 8010290:	460e      	mov	r6, r1
 8010292:	4638      	mov	r0, r7
 8010294:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010296:	4790      	blx	r2
 8010298:	4604      	mov	r4, r0
 801029a:	b128      	cbz	r0, 80102a8 <rcutils_strndup+0x28>
 801029c:	463a      	mov	r2, r7
 801029e:	4629      	mov	r1, r5
 80102a0:	f004 fb0f 	bl	80148c2 <memcpy>
 80102a4:	2300      	movs	r3, #0
 80102a6:	55a3      	strb	r3, [r4, r6]
 80102a8:	4620      	mov	r0, r4
 80102aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80102ae:	b002      	add	sp, #8
 80102b0:	4770      	bx	lr
 80102b2:	4604      	mov	r4, r0
 80102b4:	e7f8      	b.n	80102a8 <rcutils_strndup+0x28>
 80102b6:	bf00      	nop

080102b8 <rcutils_get_zero_initialized_string_map>:
 80102b8:	4b01      	ldr	r3, [pc, #4]	@ (80102c0 <rcutils_get_zero_initialized_string_map+0x8>)
 80102ba:	2000      	movs	r0, #0
 80102bc:	6018      	str	r0, [r3, #0]
 80102be:	4770      	bx	lr
 80102c0:	2000dba0 	.word	0x2000dba0

080102c4 <rcutils_string_map_reserve>:
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d05f      	beq.n	8010388 <rcutils_string_map_reserve+0xc4>
 80102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102cc:	460c      	mov	r4, r1
 80102ce:	6801      	ldr	r1, [r0, #0]
 80102d0:	b082      	sub	sp, #8
 80102d2:	4605      	mov	r5, r0
 80102d4:	b129      	cbz	r1, 80102e2 <rcutils_string_map_reserve+0x1e>
 80102d6:	68cb      	ldr	r3, [r1, #12]
 80102d8:	42a3      	cmp	r3, r4
 80102da:	d906      	bls.n	80102ea <rcutils_string_map_reserve+0x26>
 80102dc:	461c      	mov	r4, r3
 80102de:	2900      	cmp	r1, #0
 80102e0:	d1f9      	bne.n	80102d6 <rcutils_string_map_reserve+0x12>
 80102e2:	201f      	movs	r0, #31
 80102e4:	b002      	add	sp, #8
 80102e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ea:	688b      	ldr	r3, [r1, #8]
 80102ec:	42a3      	cmp	r3, r4
 80102ee:	d047      	beq.n	8010380 <rcutils_string_map_reserve+0xbc>
 80102f0:	6a0e      	ldr	r6, [r1, #32]
 80102f2:	2c00      	cmp	r4, #0
 80102f4:	d034      	beq.n	8010360 <rcutils_string_map_reserve+0x9c>
 80102f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80102fa:	d243      	bcs.n	8010384 <rcutils_string_map_reserve+0xc0>
 80102fc:	00a7      	lsls	r7, r4, #2
 80102fe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010302:	6808      	ldr	r0, [r1, #0]
 8010304:	4632      	mov	r2, r6
 8010306:	4639      	mov	r1, r7
 8010308:	47c0      	blx	r8
 801030a:	2800      	cmp	r0, #0
 801030c:	d03a      	beq.n	8010384 <rcutils_string_map_reserve+0xc0>
 801030e:	682b      	ldr	r3, [r5, #0]
 8010310:	4632      	mov	r2, r6
 8010312:	6018      	str	r0, [r3, #0]
 8010314:	4639      	mov	r1, r7
 8010316:	6858      	ldr	r0, [r3, #4]
 8010318:	47c0      	blx	r8
 801031a:	2800      	cmp	r0, #0
 801031c:	d032      	beq.n	8010384 <rcutils_string_map_reserve+0xc0>
 801031e:	682d      	ldr	r5, [r5, #0]
 8010320:	68ab      	ldr	r3, [r5, #8]
 8010322:	6068      	str	r0, [r5, #4]
 8010324:	42a3      	cmp	r3, r4
 8010326:	d226      	bcs.n	8010376 <rcutils_string_map_reserve+0xb2>
 8010328:	682a      	ldr	r2, [r5, #0]
 801032a:	eb00 0c07 	add.w	ip, r0, r7
 801032e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8010332:	45e6      	cmp	lr, ip
 8010334:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8010338:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801033c:	d203      	bcs.n	8010346 <rcutils_string_map_reserve+0x82>
 801033e:	eb02 0c07 	add.w	ip, r2, r7
 8010342:	4566      	cmp	r6, ip
 8010344:	d322      	bcc.n	801038c <rcutils_string_map_reserve+0xc8>
 8010346:	1ae3      	subs	r3, r4, r3
 8010348:	009a      	lsls	r2, r3, #2
 801034a:	4670      	mov	r0, lr
 801034c:	2100      	movs	r1, #0
 801034e:	9201      	str	r2, [sp, #4]
 8010350:	f004 f9ee 	bl	8014730 <memset>
 8010354:	9a01      	ldr	r2, [sp, #4]
 8010356:	2100      	movs	r1, #0
 8010358:	4630      	mov	r0, r6
 801035a:	f004 f9e9 	bl	8014730 <memset>
 801035e:	e00a      	b.n	8010376 <rcutils_string_map_reserve+0xb2>
 8010360:	694f      	ldr	r7, [r1, #20]
 8010362:	6808      	ldr	r0, [r1, #0]
 8010364:	4631      	mov	r1, r6
 8010366:	47b8      	blx	r7
 8010368:	682b      	ldr	r3, [r5, #0]
 801036a:	4631      	mov	r1, r6
 801036c:	6858      	ldr	r0, [r3, #4]
 801036e:	601c      	str	r4, [r3, #0]
 8010370:	47b8      	blx	r7
 8010372:	682d      	ldr	r5, [r5, #0]
 8010374:	606c      	str	r4, [r5, #4]
 8010376:	2000      	movs	r0, #0
 8010378:	60ac      	str	r4, [r5, #8]
 801037a:	b002      	add	sp, #8
 801037c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010380:	2000      	movs	r0, #0
 8010382:	e7af      	b.n	80102e4 <rcutils_string_map_reserve+0x20>
 8010384:	200a      	movs	r0, #10
 8010386:	e7ad      	b.n	80102e4 <rcutils_string_map_reserve+0x20>
 8010388:	200b      	movs	r0, #11
 801038a:	4770      	bx	lr
 801038c:	1f0b      	subs	r3, r1, #4
 801038e:	4418      	add	r0, r3
 8010390:	4413      	add	r3, r2
 8010392:	3a04      	subs	r2, #4
 8010394:	4417      	add	r7, r2
 8010396:	2200      	movs	r2, #0
 8010398:	f843 2f04 	str.w	r2, [r3, #4]!
 801039c:	42bb      	cmp	r3, r7
 801039e:	f840 2f04 	str.w	r2, [r0, #4]!
 80103a2:	d1f9      	bne.n	8010398 <rcutils_string_map_reserve+0xd4>
 80103a4:	e7e7      	b.n	8010376 <rcutils_string_map_reserve+0xb2>
 80103a6:	bf00      	nop

080103a8 <rcutils_string_map_init>:
 80103a8:	b082      	sub	sp, #8
 80103aa:	b570      	push	{r4, r5, r6, lr}
 80103ac:	ac04      	add	r4, sp, #16
 80103ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80103b2:	b380      	cbz	r0, 8010416 <rcutils_string_map_init+0x6e>
 80103b4:	6806      	ldr	r6, [r0, #0]
 80103b6:	4604      	mov	r4, r0
 80103b8:	b12e      	cbz	r6, 80103c6 <rcutils_string_map_init+0x1e>
 80103ba:	251e      	movs	r5, #30
 80103bc:	4628      	mov	r0, r5
 80103be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103c2:	b002      	add	sp, #8
 80103c4:	4770      	bx	lr
 80103c6:	a804      	add	r0, sp, #16
 80103c8:	460d      	mov	r5, r1
 80103ca:	f7f9 fb1b 	bl	8009a04 <rcutils_allocator_is_valid>
 80103ce:	b310      	cbz	r0, 8010416 <rcutils_string_map_init+0x6e>
 80103d0:	9b04      	ldr	r3, [sp, #16]
 80103d2:	9908      	ldr	r1, [sp, #32]
 80103d4:	2024      	movs	r0, #36	@ 0x24
 80103d6:	4798      	blx	r3
 80103d8:	6020      	str	r0, [r4, #0]
 80103da:	b310      	cbz	r0, 8010422 <rcutils_string_map_init+0x7a>
 80103dc:	f10d 0e10 	add.w	lr, sp, #16
 80103e0:	e9c0 6600 	strd	r6, r6, [r0]
 80103e4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80103e8:	f100 0c10 	add.w	ip, r0, #16
 80103ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103f4:	f8de 3000 	ldr.w	r3, [lr]
 80103f8:	f8cc 3000 	str.w	r3, [ip]
 80103fc:	4629      	mov	r1, r5
 80103fe:	4620      	mov	r0, r4
 8010400:	f7ff ff60 	bl	80102c4 <rcutils_string_map_reserve>
 8010404:	4605      	mov	r5, r0
 8010406:	2800      	cmp	r0, #0
 8010408:	d0d8      	beq.n	80103bc <rcutils_string_map_init+0x14>
 801040a:	9b05      	ldr	r3, [sp, #20]
 801040c:	9908      	ldr	r1, [sp, #32]
 801040e:	6820      	ldr	r0, [r4, #0]
 8010410:	4798      	blx	r3
 8010412:	6026      	str	r6, [r4, #0]
 8010414:	e7d2      	b.n	80103bc <rcutils_string_map_init+0x14>
 8010416:	250b      	movs	r5, #11
 8010418:	4628      	mov	r0, r5
 801041a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801041e:	b002      	add	sp, #8
 8010420:	4770      	bx	lr
 8010422:	250a      	movs	r5, #10
 8010424:	e7ca      	b.n	80103bc <rcutils_string_map_init+0x14>
 8010426:	bf00      	nop

08010428 <rcutils_string_map_fini>:
 8010428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042c:	b082      	sub	sp, #8
 801042e:	2800      	cmp	r0, #0
 8010430:	d03a      	beq.n	80104a8 <rcutils_string_map_fini+0x80>
 8010432:	6804      	ldr	r4, [r0, #0]
 8010434:	4606      	mov	r6, r0
 8010436:	2c00      	cmp	r4, #0
 8010438:	d032      	beq.n	80104a0 <rcutils_string_map_fini+0x78>
 801043a:	68a3      	ldr	r3, [r4, #8]
 801043c:	b32b      	cbz	r3, 801048a <rcutils_string_map_fini+0x62>
 801043e:	2500      	movs	r5, #0
 8010440:	6822      	ldr	r2, [r4, #0]
 8010442:	462f      	mov	r7, r5
 8010444:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8010448:	b1e0      	cbz	r0, 8010484 <rcutils_string_map_fini+0x5c>
 801044a:	6a21      	ldr	r1, [r4, #32]
 801044c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8010450:	9101      	str	r1, [sp, #4]
 8010452:	47c0      	blx	r8
 8010454:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010458:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801045c:	9901      	ldr	r1, [sp, #4]
 801045e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010462:	47c0      	blx	r8
 8010464:	68e3      	ldr	r3, [r4, #12]
 8010466:	6862      	ldr	r2, [r4, #4]
 8010468:	3b01      	subs	r3, #1
 801046a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801046e:	60e3      	str	r3, [r4, #12]
 8010470:	6834      	ldr	r4, [r6, #0]
 8010472:	68a3      	ldr	r3, [r4, #8]
 8010474:	3501      	adds	r5, #1
 8010476:	429d      	cmp	r5, r3
 8010478:	d207      	bcs.n	801048a <rcutils_string_map_fini+0x62>
 801047a:	6822      	ldr	r2, [r4, #0]
 801047c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8010480:	2800      	cmp	r0, #0
 8010482:	d1e2      	bne.n	801044a <rcutils_string_map_fini+0x22>
 8010484:	3501      	adds	r5, #1
 8010486:	429d      	cmp	r5, r3
 8010488:	d3dc      	bcc.n	8010444 <rcutils_string_map_fini+0x1c>
 801048a:	2100      	movs	r1, #0
 801048c:	4630      	mov	r0, r6
 801048e:	f7ff ff19 	bl	80102c4 <rcutils_string_map_reserve>
 8010492:	4604      	mov	r4, r0
 8010494:	b920      	cbnz	r0, 80104a0 <rcutils_string_map_fini+0x78>
 8010496:	6830      	ldr	r0, [r6, #0]
 8010498:	6943      	ldr	r3, [r0, #20]
 801049a:	6a01      	ldr	r1, [r0, #32]
 801049c:	4798      	blx	r3
 801049e:	6034      	str	r4, [r6, #0]
 80104a0:	4620      	mov	r0, r4
 80104a2:	b002      	add	sp, #8
 80104a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a8:	240b      	movs	r4, #11
 80104aa:	4620      	mov	r0, r4
 80104ac:	b002      	add	sp, #8
 80104ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b2:	bf00      	nop

080104b4 <rcutils_string_map_getn>:
 80104b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	b300      	cbz	r0, 80104fc <rcutils_string_map_getn+0x48>
 80104ba:	6807      	ldr	r7, [r0, #0]
 80104bc:	b1ff      	cbz	r7, 80104fe <rcutils_string_map_getn+0x4a>
 80104be:	4688      	mov	r8, r1
 80104c0:	b1e1      	cbz	r1, 80104fc <rcutils_string_map_getn+0x48>
 80104c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80104c6:	683e      	ldr	r6, [r7, #0]
 80104c8:	f1ba 0f00 	cmp.w	sl, #0
 80104cc:	d016      	beq.n	80104fc <rcutils_string_map_getn+0x48>
 80104ce:	4691      	mov	r9, r2
 80104d0:	3e04      	subs	r6, #4
 80104d2:	2400      	movs	r4, #0
 80104d4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80104d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80104dc:	4628      	mov	r0, r5
 80104de:	3401      	adds	r4, #1
 80104e0:	b155      	cbz	r5, 80104f8 <rcutils_string_map_getn+0x44>
 80104e2:	f7ef fe87 	bl	80001f4 <strlen>
 80104e6:	4548      	cmp	r0, r9
 80104e8:	4602      	mov	r2, r0
 80104ea:	4629      	mov	r1, r5
 80104ec:	bf38      	it	cc
 80104ee:	464a      	movcc	r2, r9
 80104f0:	4640      	mov	r0, r8
 80104f2:	f004 f932 	bl	801475a <strncmp>
 80104f6:	b128      	cbz	r0, 8010504 <rcutils_string_map_getn+0x50>
 80104f8:	45a2      	cmp	sl, r4
 80104fa:	d1eb      	bne.n	80104d4 <rcutils_string_map_getn+0x20>
 80104fc:	2700      	movs	r7, #0
 80104fe:	4638      	mov	r0, r7
 8010500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f853 700b 	ldr.w	r7, [r3, fp]
 801050a:	4638      	mov	r0, r7
 801050c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010510 <rmw_get_zero_initialized_context>:
 8010510:	b510      	push	{r4, lr}
 8010512:	4604      	mov	r4, r0
 8010514:	3010      	adds	r0, #16
 8010516:	f000 f80b 	bl	8010530 <rmw_get_zero_initialized_init_options>
 801051a:	2300      	movs	r3, #0
 801051c:	2000      	movs	r0, #0
 801051e:	2100      	movs	r1, #0
 8010520:	e9c4 0100 	strd	r0, r1, [r4]
 8010524:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8010528:	60a3      	str	r3, [r4, #8]
 801052a:	4620      	mov	r0, r4
 801052c:	bd10      	pop	{r4, pc}
 801052e:	bf00      	nop

08010530 <rmw_get_zero_initialized_init_options>:
 8010530:	b510      	push	{r4, lr}
 8010532:	2238      	movs	r2, #56	@ 0x38
 8010534:	4604      	mov	r4, r0
 8010536:	2100      	movs	r1, #0
 8010538:	f004 f8fa 	bl	8014730 <memset>
 801053c:	f104 0010 	add.w	r0, r4, #16
 8010540:	f000 f806 	bl	8010550 <rmw_get_default_security_options>
 8010544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010548:	60e3      	str	r3, [r4, #12]
 801054a:	4620      	mov	r0, r4
 801054c:	bd10      	pop	{r4, pc}
 801054e:	bf00      	nop

08010550 <rmw_get_default_security_options>:
 8010550:	2200      	movs	r2, #0
 8010552:	7002      	strb	r2, [r0, #0]
 8010554:	6042      	str	r2, [r0, #4]
 8010556:	4770      	bx	lr

08010558 <rmw_subscription_content_filter_options_fini>:
 8010558:	b1b0      	cbz	r0, 8010588 <rmw_subscription_content_filter_options_fini+0x30>
 801055a:	b538      	push	{r3, r4, r5, lr}
 801055c:	4604      	mov	r4, r0
 801055e:	4608      	mov	r0, r1
 8010560:	460d      	mov	r5, r1
 8010562:	f7f9 fa4f 	bl	8009a04 <rcutils_allocator_is_valid>
 8010566:	b168      	cbz	r0, 8010584 <rmw_subscription_content_filter_options_fini+0x2c>
 8010568:	6820      	ldr	r0, [r4, #0]
 801056a:	b120      	cbz	r0, 8010576 <rmw_subscription_content_filter_options_fini+0x1e>
 801056c:	686b      	ldr	r3, [r5, #4]
 801056e:	6929      	ldr	r1, [r5, #16]
 8010570:	4798      	blx	r3
 8010572:	2300      	movs	r3, #0
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	1d20      	adds	r0, r4, #4
 8010578:	f003 fbca 	bl	8013d10 <rcutils_string_array_fini>
 801057c:	3800      	subs	r0, #0
 801057e:	bf18      	it	ne
 8010580:	2001      	movne	r0, #1
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	200b      	movs	r0, #11
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	200b      	movs	r0, #11
 801058a:	4770      	bx	lr

0801058c <rmw_get_default_subscription_options>:
 801058c:	2200      	movs	r2, #0
 801058e:	e9c0 2200 	strd	r2, r2, [r0]
 8010592:	6082      	str	r2, [r0, #8]
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop

08010598 <rmw_time_equal>:
 8010598:	b4f0      	push	{r4, r5, r6, r7}
 801059a:	b084      	sub	sp, #16
 801059c:	ac04      	add	r4, sp, #16
 801059e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80105a2:	4603      	mov	r3, r0
 80105a4:	4924      	ldr	r1, [pc, #144]	@ (8010638 <rmw_time_equal+0xa0>)
 80105a6:	9e03      	ldr	r6, [sp, #12]
 80105a8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80105ac:	2202      	movs	r2, #2
 80105ae:	4299      	cmp	r1, r3
 80105b0:	41aa      	sbcs	r2, r5
 80105b2:	d330      	bcc.n	8010616 <rmw_time_equal+0x7e>
 80105b4:	4c21      	ldr	r4, [pc, #132]	@ (801063c <rmw_time_equal+0xa4>)
 80105b6:	fba3 3204 	umull	r3, r2, r3, r4
 80105ba:	fb04 2205 	mla	r2, r4, r5, r2
 80105be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80105c2:	43dd      	mvns	r5, r3
 80105c4:	1a8c      	subs	r4, r1, r2
 80105c6:	4285      	cmp	r5, r0
 80105c8:	41b4      	sbcs	r4, r6
 80105ca:	d332      	bcc.n	8010632 <rmw_time_equal+0x9a>
 80105cc:	eb10 0c03 	adds.w	ip, r0, r3
 80105d0:	eb42 0106 	adc.w	r1, r2, r6
 80105d4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80105d8:	4817      	ldr	r0, [pc, #92]	@ (8010638 <rmw_time_equal+0xa0>)
 80105da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80105dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80105de:	2202      	movs	r2, #2
 80105e0:	4298      	cmp	r0, r3
 80105e2:	41b2      	sbcs	r2, r6
 80105e4:	d31c      	bcc.n	8010620 <rmw_time_equal+0x88>
 80105e6:	4c15      	ldr	r4, [pc, #84]	@ (801063c <rmw_time_equal+0xa4>)
 80105e8:	fba3 3204 	umull	r3, r2, r3, r4
 80105ec:	fb04 2206 	mla	r2, r4, r6, r2
 80105f0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80105f4:	43de      	mvns	r6, r3
 80105f6:	1a84      	subs	r4, r0, r2
 80105f8:	42ae      	cmp	r6, r5
 80105fa:	41bc      	sbcs	r4, r7
 80105fc:	d315      	bcc.n	801062a <rmw_time_equal+0x92>
 80105fe:	195b      	adds	r3, r3, r5
 8010600:	eb42 0207 	adc.w	r2, r2, r7
 8010604:	428a      	cmp	r2, r1
 8010606:	bf08      	it	eq
 8010608:	4563      	cmpeq	r3, ip
 801060a:	bf0c      	ite	eq
 801060c:	2001      	moveq	r0, #1
 801060e:	2000      	movne	r0, #0
 8010610:	b004      	add	sp, #16
 8010612:	bcf0      	pop	{r4, r5, r6, r7}
 8010614:	4770      	bx	lr
 8010616:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801061a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801061e:	e7d9      	b.n	80105d4 <rmw_time_equal+0x3c>
 8010620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010624:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010628:	e7ec      	b.n	8010604 <rmw_time_equal+0x6c>
 801062a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801062e:	4602      	mov	r2, r0
 8010630:	e7e8      	b.n	8010604 <rmw_time_equal+0x6c>
 8010632:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010636:	e7cd      	b.n	80105d4 <rmw_time_equal+0x3c>
 8010638:	25c17d04 	.word	0x25c17d04
 801063c:	3b9aca00 	.word	0x3b9aca00

08010640 <rmw_time_total_nsec>:
 8010640:	b470      	push	{r4, r5, r6}
 8010642:	b085      	sub	sp, #20
 8010644:	ac04      	add	r4, sp, #16
 8010646:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801064a:	4603      	mov	r3, r0
 801064c:	4912      	ldr	r1, [pc, #72]	@ (8010698 <rmw_time_total_nsec+0x58>)
 801064e:	9e03      	ldr	r6, [sp, #12]
 8010650:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8010654:	2202      	movs	r2, #2
 8010656:	4299      	cmp	r1, r3
 8010658:	41aa      	sbcs	r2, r5
 801065a:	d311      	bcc.n	8010680 <rmw_time_total_nsec+0x40>
 801065c:	4c0f      	ldr	r4, [pc, #60]	@ (801069c <rmw_time_total_nsec+0x5c>)
 801065e:	fba3 3204 	umull	r3, r2, r3, r4
 8010662:	fb04 2205 	mla	r2, r4, r5, r2
 8010666:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801066a:	43dd      	mvns	r5, r3
 801066c:	1a8c      	subs	r4, r1, r2
 801066e:	4285      	cmp	r5, r0
 8010670:	41b4      	sbcs	r4, r6
 8010672:	d30c      	bcc.n	801068e <rmw_time_total_nsec+0x4e>
 8010674:	1818      	adds	r0, r3, r0
 8010676:	eb42 0106 	adc.w	r1, r2, r6
 801067a:	b005      	add	sp, #20
 801067c:	bc70      	pop	{r4, r5, r6}
 801067e:	4770      	bx	lr
 8010680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010688:	b005      	add	sp, #20
 801068a:	bc70      	pop	{r4, r5, r6}
 801068c:	4770      	bx	lr
 801068e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010692:	b005      	add	sp, #20
 8010694:	bc70      	pop	{r4, r5, r6}
 8010696:	4770      	bx	lr
 8010698:	25c17d04 	.word	0x25c17d04
 801069c:	3b9aca00 	.word	0x3b9aca00

080106a0 <rmw_get_zero_initialized_message_info>:
 80106a0:	b510      	push	{r4, lr}
 80106a2:	2240      	movs	r2, #64	@ 0x40
 80106a4:	4604      	mov	r4, r0
 80106a6:	2100      	movs	r1, #0
 80106a8:	f004 f842 	bl	8014730 <memset>
 80106ac:	4620      	mov	r0, r4
 80106ae:	bd10      	pop	{r4, pc}

080106b0 <rmw_validate_full_topic_name>:
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d057      	beq.n	8010764 <rmw_validate_full_topic_name+0xb4>
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	460d      	mov	r5, r1
 80106ba:	2900      	cmp	r1, #0
 80106bc:	d054      	beq.n	8010768 <rmw_validate_full_topic_name+0xb8>
 80106be:	4616      	mov	r6, r2
 80106c0:	4604      	mov	r4, r0
 80106c2:	f7ef fd97 	bl	80001f4 <strlen>
 80106c6:	b148      	cbz	r0, 80106dc <rmw_validate_full_topic_name+0x2c>
 80106c8:	7823      	ldrb	r3, [r4, #0]
 80106ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80106cc:	d00d      	beq.n	80106ea <rmw_validate_full_topic_name+0x3a>
 80106ce:	2302      	movs	r3, #2
 80106d0:	602b      	str	r3, [r5, #0]
 80106d2:	b13e      	cbz	r6, 80106e4 <rmw_validate_full_topic_name+0x34>
 80106d4:	2000      	movs	r0, #0
 80106d6:	6030      	str	r0, [r6, #0]
 80106d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106dc:	2301      	movs	r3, #1
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	2e00      	cmp	r6, #0
 80106e2:	d1f7      	bne.n	80106d4 <rmw_validate_full_topic_name+0x24>
 80106e4:	2000      	movs	r0, #0
 80106e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ea:	1e43      	subs	r3, r0, #1
 80106ec:	5ce2      	ldrb	r2, [r4, r3]
 80106ee:	2a2f      	cmp	r2, #47	@ 0x2f
 80106f0:	d03c      	beq.n	801076c <rmw_validate_full_topic_name+0xbc>
 80106f2:	1e63      	subs	r3, r4, #1
 80106f4:	eb03 0800 	add.w	r8, r3, r0
 80106f8:	f1c4 0e01 	rsb	lr, r4, #1
 80106fc:	eb0e 0703 	add.w	r7, lr, r3
 8010700:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010704:	f021 0220 	bic.w	r2, r1, #32
 8010708:	3a41      	subs	r2, #65	@ 0x41
 801070a:	2a19      	cmp	r2, #25
 801070c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8010710:	d90b      	bls.n	801072a <rmw_validate_full_topic_name+0x7a>
 8010712:	295f      	cmp	r1, #95	@ 0x5f
 8010714:	d009      	beq.n	801072a <rmw_validate_full_topic_name+0x7a>
 8010716:	f1bc 0f0a 	cmp.w	ip, #10
 801071a:	d906      	bls.n	801072a <rmw_validate_full_topic_name+0x7a>
 801071c:	2304      	movs	r3, #4
 801071e:	602b      	str	r3, [r5, #0]
 8010720:	2e00      	cmp	r6, #0
 8010722:	d0df      	beq.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010724:	6037      	str	r7, [r6, #0]
 8010726:	2000      	movs	r0, #0
 8010728:	e7d6      	b.n	80106d8 <rmw_validate_full_topic_name+0x28>
 801072a:	4543      	cmp	r3, r8
 801072c:	d1e6      	bne.n	80106fc <rmw_validate_full_topic_name+0x4c>
 801072e:	4f1a      	ldr	r7, [pc, #104]	@ (8010798 <rmw_validate_full_topic_name+0xe8>)
 8010730:	2301      	movs	r3, #1
 8010732:	e004      	b.n	801073e <rmw_validate_full_topic_name+0x8e>
 8010734:	4298      	cmp	r0, r3
 8010736:	f104 0401 	add.w	r4, r4, #1
 801073a:	d91c      	bls.n	8010776 <rmw_validate_full_topic_name+0xc6>
 801073c:	4613      	mov	r3, r2
 801073e:	4298      	cmp	r0, r3
 8010740:	f103 0201 	add.w	r2, r3, #1
 8010744:	d0f6      	beq.n	8010734 <rmw_validate_full_topic_name+0x84>
 8010746:	7821      	ldrb	r1, [r4, #0]
 8010748:	292f      	cmp	r1, #47	@ 0x2f
 801074a:	d1f3      	bne.n	8010734 <rmw_validate_full_topic_name+0x84>
 801074c:	7861      	ldrb	r1, [r4, #1]
 801074e:	292f      	cmp	r1, #47	@ 0x2f
 8010750:	d01c      	beq.n	801078c <rmw_validate_full_topic_name+0xdc>
 8010752:	5dc9      	ldrb	r1, [r1, r7]
 8010754:	0749      	lsls	r1, r1, #29
 8010756:	d5ed      	bpl.n	8010734 <rmw_validate_full_topic_name+0x84>
 8010758:	2206      	movs	r2, #6
 801075a:	602a      	str	r2, [r5, #0]
 801075c:	2e00      	cmp	r6, #0
 801075e:	d0c1      	beq.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010760:	6033      	str	r3, [r6, #0]
 8010762:	e7bf      	b.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010764:	200b      	movs	r0, #11
 8010766:	4770      	bx	lr
 8010768:	200b      	movs	r0, #11
 801076a:	e7b5      	b.n	80106d8 <rmw_validate_full_topic_name+0x28>
 801076c:	2203      	movs	r2, #3
 801076e:	602a      	str	r2, [r5, #0]
 8010770:	2e00      	cmp	r6, #0
 8010772:	d1f5      	bne.n	8010760 <rmw_validate_full_topic_name+0xb0>
 8010774:	e7b6      	b.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010776:	28f7      	cmp	r0, #247	@ 0xf7
 8010778:	d802      	bhi.n	8010780 <rmw_validate_full_topic_name+0xd0>
 801077a:	2000      	movs	r0, #0
 801077c:	6028      	str	r0, [r5, #0]
 801077e:	e7ab      	b.n	80106d8 <rmw_validate_full_topic_name+0x28>
 8010780:	2307      	movs	r3, #7
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	2e00      	cmp	r6, #0
 8010786:	d0ad      	beq.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010788:	23f6      	movs	r3, #246	@ 0xf6
 801078a:	e7e9      	b.n	8010760 <rmw_validate_full_topic_name+0xb0>
 801078c:	2205      	movs	r2, #5
 801078e:	602a      	str	r2, [r5, #0]
 8010790:	2e00      	cmp	r6, #0
 8010792:	d1e5      	bne.n	8010760 <rmw_validate_full_topic_name+0xb0>
 8010794:	e7a6      	b.n	80106e4 <rmw_validate_full_topic_name+0x34>
 8010796:	bf00      	nop
 8010798:	0801632c 	.word	0x0801632c

0801079c <rmw_validate_namespace_with_size>:
 801079c:	b340      	cbz	r0, 80107f0 <rmw_validate_namespace_with_size+0x54>
 801079e:	b570      	push	{r4, r5, r6, lr}
 80107a0:	4614      	mov	r4, r2
 80107a2:	b0c2      	sub	sp, #264	@ 0x108
 80107a4:	b332      	cbz	r2, 80107f4 <rmw_validate_namespace_with_size+0x58>
 80107a6:	2901      	cmp	r1, #1
 80107a8:	460d      	mov	r5, r1
 80107aa:	461e      	mov	r6, r3
 80107ac:	d102      	bne.n	80107b4 <rmw_validate_namespace_with_size+0x18>
 80107ae:	7803      	ldrb	r3, [r0, #0]
 80107b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80107b2:	d012      	beq.n	80107da <rmw_validate_namespace_with_size+0x3e>
 80107b4:	aa01      	add	r2, sp, #4
 80107b6:	4669      	mov	r1, sp
 80107b8:	f7ff ff7a 	bl	80106b0 <rmw_validate_full_topic_name>
 80107bc:	b978      	cbnz	r0, 80107de <rmw_validate_namespace_with_size+0x42>
 80107be:	9b00      	ldr	r3, [sp, #0]
 80107c0:	b14b      	cbz	r3, 80107d6 <rmw_validate_namespace_with_size+0x3a>
 80107c2:	2b07      	cmp	r3, #7
 80107c4:	d007      	beq.n	80107d6 <rmw_validate_namespace_with_size+0x3a>
 80107c6:	1e5a      	subs	r2, r3, #1
 80107c8:	2a05      	cmp	r2, #5
 80107ca:	d82b      	bhi.n	8010824 <rmw_validate_namespace_with_size+0x88>
 80107cc:	e8df f002 	tbb	[pc, r2]
 80107d0:	1e212427 	.word	0x1e212427
 80107d4:	141b      	.short	0x141b
 80107d6:	2df5      	cmp	r5, #245	@ 0xf5
 80107d8:	d803      	bhi.n	80107e2 <rmw_validate_namespace_with_size+0x46>
 80107da:	2000      	movs	r0, #0
 80107dc:	6020      	str	r0, [r4, #0]
 80107de:	b042      	add	sp, #264	@ 0x108
 80107e0:	bd70      	pop	{r4, r5, r6, pc}
 80107e2:	2307      	movs	r3, #7
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	d0f9      	beq.n	80107de <rmw_validate_namespace_with_size+0x42>
 80107ea:	23f4      	movs	r3, #244	@ 0xf4
 80107ec:	6033      	str	r3, [r6, #0]
 80107ee:	e7f6      	b.n	80107de <rmw_validate_namespace_with_size+0x42>
 80107f0:	200b      	movs	r0, #11
 80107f2:	4770      	bx	lr
 80107f4:	200b      	movs	r0, #11
 80107f6:	e7f2      	b.n	80107de <rmw_validate_namespace_with_size+0x42>
 80107f8:	2306      	movs	r3, #6
 80107fa:	6023      	str	r3, [r4, #0]
 80107fc:	2e00      	cmp	r6, #0
 80107fe:	d0ee      	beq.n	80107de <rmw_validate_namespace_with_size+0x42>
 8010800:	9b01      	ldr	r3, [sp, #4]
 8010802:	6033      	str	r3, [r6, #0]
 8010804:	e7eb      	b.n	80107de <rmw_validate_namespace_with_size+0x42>
 8010806:	2305      	movs	r3, #5
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	e7f7      	b.n	80107fc <rmw_validate_namespace_with_size+0x60>
 801080c:	2304      	movs	r3, #4
 801080e:	6023      	str	r3, [r4, #0]
 8010810:	e7f4      	b.n	80107fc <rmw_validate_namespace_with_size+0x60>
 8010812:	2303      	movs	r3, #3
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	e7f1      	b.n	80107fc <rmw_validate_namespace_with_size+0x60>
 8010818:	2302      	movs	r3, #2
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	e7ee      	b.n	80107fc <rmw_validate_namespace_with_size+0x60>
 801081e:	2301      	movs	r3, #1
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	e7eb      	b.n	80107fc <rmw_validate_namespace_with_size+0x60>
 8010824:	4a03      	ldr	r2, [pc, #12]	@ (8010834 <rmw_validate_namespace_with_size+0x98>)
 8010826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801082a:	a802      	add	r0, sp, #8
 801082c:	f7ff fcda 	bl	80101e4 <rcutils_snprintf>
 8010830:	2001      	movs	r0, #1
 8010832:	e7d4      	b.n	80107de <rmw_validate_namespace_with_size+0x42>
 8010834:	08015d4c 	.word	0x08015d4c

08010838 <rmw_validate_namespace>:
 8010838:	b168      	cbz	r0, 8010856 <rmw_validate_namespace+0x1e>
 801083a:	b570      	push	{r4, r5, r6, lr}
 801083c:	460d      	mov	r5, r1
 801083e:	4616      	mov	r6, r2
 8010840:	4604      	mov	r4, r0
 8010842:	f7ef fcd7 	bl	80001f4 <strlen>
 8010846:	4633      	mov	r3, r6
 8010848:	4601      	mov	r1, r0
 801084a:	462a      	mov	r2, r5
 801084c:	4620      	mov	r0, r4
 801084e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010852:	f7ff bfa3 	b.w	801079c <rmw_validate_namespace_with_size>
 8010856:	200b      	movs	r0, #11
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop

0801085c <rmw_namespace_validation_result_string>:
 801085c:	2807      	cmp	r0, #7
 801085e:	bf9a      	itte	ls
 8010860:	4b02      	ldrls	r3, [pc, #8]	@ (801086c <rmw_namespace_validation_result_string+0x10>)
 8010862:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010866:	4802      	ldrhi	r0, [pc, #8]	@ (8010870 <rmw_namespace_validation_result_string+0x14>)
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	08015f44 	.word	0x08015f44
 8010870:	08015d9c 	.word	0x08015d9c

08010874 <rmw_validate_node_name>:
 8010874:	2800      	cmp	r0, #0
 8010876:	d03b      	beq.n	80108f0 <rmw_validate_node_name+0x7c>
 8010878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801087c:	460d      	mov	r5, r1
 801087e:	2900      	cmp	r1, #0
 8010880:	d038      	beq.n	80108f4 <rmw_validate_node_name+0x80>
 8010882:	4616      	mov	r6, r2
 8010884:	4604      	mov	r4, r0
 8010886:	f7ef fcb5 	bl	80001f4 <strlen>
 801088a:	b1e0      	cbz	r0, 80108c6 <rmw_validate_node_name+0x52>
 801088c:	1e63      	subs	r3, r4, #1
 801088e:	eb03 0800 	add.w	r8, r3, r0
 8010892:	f1c4 0101 	rsb	r1, r4, #1
 8010896:	18cf      	adds	r7, r1, r3
 8010898:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801089c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80108a0:	f02e 0c20 	bic.w	ip, lr, #32
 80108a4:	2a09      	cmp	r2, #9
 80108a6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80108aa:	d914      	bls.n	80108d6 <rmw_validate_node_name+0x62>
 80108ac:	f1bc 0f19 	cmp.w	ip, #25
 80108b0:	d911      	bls.n	80108d6 <rmw_validate_node_name+0x62>
 80108b2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80108b6:	d00e      	beq.n	80108d6 <rmw_validate_node_name+0x62>
 80108b8:	2302      	movs	r3, #2
 80108ba:	602b      	str	r3, [r5, #0]
 80108bc:	b106      	cbz	r6, 80108c0 <rmw_validate_node_name+0x4c>
 80108be:	6037      	str	r7, [r6, #0]
 80108c0:	2000      	movs	r0, #0
 80108c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c6:	2301      	movs	r3, #1
 80108c8:	602b      	str	r3, [r5, #0]
 80108ca:	2e00      	cmp	r6, #0
 80108cc:	d0f8      	beq.n	80108c0 <rmw_validate_node_name+0x4c>
 80108ce:	2000      	movs	r0, #0
 80108d0:	6030      	str	r0, [r6, #0]
 80108d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d6:	4543      	cmp	r3, r8
 80108d8:	d1dd      	bne.n	8010896 <rmw_validate_node_name+0x22>
 80108da:	7822      	ldrb	r2, [r4, #0]
 80108dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010914 <rmw_validate_node_name+0xa0>)
 80108de:	5cd3      	ldrb	r3, [r2, r3]
 80108e0:	f013 0304 	ands.w	r3, r3, #4
 80108e4:	d110      	bne.n	8010908 <rmw_validate_node_name+0x94>
 80108e6:	28ff      	cmp	r0, #255	@ 0xff
 80108e8:	d806      	bhi.n	80108f8 <rmw_validate_node_name+0x84>
 80108ea:	602b      	str	r3, [r5, #0]
 80108ec:	4618      	mov	r0, r3
 80108ee:	e7e8      	b.n	80108c2 <rmw_validate_node_name+0x4e>
 80108f0:	200b      	movs	r0, #11
 80108f2:	4770      	bx	lr
 80108f4:	200b      	movs	r0, #11
 80108f6:	e7e4      	b.n	80108c2 <rmw_validate_node_name+0x4e>
 80108f8:	2204      	movs	r2, #4
 80108fa:	602a      	str	r2, [r5, #0]
 80108fc:	2e00      	cmp	r6, #0
 80108fe:	d0df      	beq.n	80108c0 <rmw_validate_node_name+0x4c>
 8010900:	22fe      	movs	r2, #254	@ 0xfe
 8010902:	6032      	str	r2, [r6, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	e7dc      	b.n	80108c2 <rmw_validate_node_name+0x4e>
 8010908:	2303      	movs	r3, #3
 801090a:	602b      	str	r3, [r5, #0]
 801090c:	2e00      	cmp	r6, #0
 801090e:	d1de      	bne.n	80108ce <rmw_validate_node_name+0x5a>
 8010910:	e7d6      	b.n	80108c0 <rmw_validate_node_name+0x4c>
 8010912:	bf00      	nop
 8010914:	0801632c 	.word	0x0801632c

08010918 <rmw_node_name_validation_result_string>:
 8010918:	2804      	cmp	r0, #4
 801091a:	bf9a      	itte	ls
 801091c:	4b02      	ldrls	r3, [pc, #8]	@ (8010928 <rmw_node_name_validation_result_string+0x10>)
 801091e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010922:	4802      	ldrhi	r0, [pc, #8]	@ (801092c <rmw_node_name_validation_result_string+0x14>)
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	08016050 	.word	0x08016050
 801092c:	08015f64 	.word	0x08015f64

08010930 <get_memory>:
 8010930:	4603      	mov	r3, r0
 8010932:	6840      	ldr	r0, [r0, #4]
 8010934:	b158      	cbz	r0, 801094e <get_memory+0x1e>
 8010936:	6842      	ldr	r2, [r0, #4]
 8010938:	605a      	str	r2, [r3, #4]
 801093a:	b10a      	cbz	r2, 8010940 <get_memory+0x10>
 801093c:	2100      	movs	r1, #0
 801093e:	6011      	str	r1, [r2, #0]
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	6042      	str	r2, [r0, #4]
 8010944:	b102      	cbz	r2, 8010948 <get_memory+0x18>
 8010946:	6010      	str	r0, [r2, #0]
 8010948:	2200      	movs	r2, #0
 801094a:	6002      	str	r2, [r0, #0]
 801094c:	6018      	str	r0, [r3, #0]
 801094e:	4770      	bx	lr

08010950 <put_memory>:
 8010950:	680b      	ldr	r3, [r1, #0]
 8010952:	b10b      	cbz	r3, 8010958 <put_memory+0x8>
 8010954:	684a      	ldr	r2, [r1, #4]
 8010956:	605a      	str	r2, [r3, #4]
 8010958:	684a      	ldr	r2, [r1, #4]
 801095a:	b102      	cbz	r2, 801095e <put_memory+0xe>
 801095c:	6013      	str	r3, [r2, #0]
 801095e:	6803      	ldr	r3, [r0, #0]
 8010960:	428b      	cmp	r3, r1
 8010962:	6843      	ldr	r3, [r0, #4]
 8010964:	bf08      	it	eq
 8010966:	6002      	streq	r2, [r0, #0]
 8010968:	604b      	str	r3, [r1, #4]
 801096a:	b103      	cbz	r3, 801096e <put_memory+0x1e>
 801096c:	6019      	str	r1, [r3, #0]
 801096e:	2300      	movs	r3, #0
 8010970:	600b      	str	r3, [r1, #0]
 8010972:	6041      	str	r1, [r0, #4]
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop

08010978 <rmw_destroy_client>:
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	b128      	cbz	r0, 8010988 <rmw_destroy_client+0x10>
 801097c:	4604      	mov	r4, r0
 801097e:	6800      	ldr	r0, [r0, #0]
 8010980:	460d      	mov	r5, r1
 8010982:	f7f9 fde7 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8010986:	b910      	cbnz	r0, 801098e <rmw_destroy_client+0x16>
 8010988:	2401      	movs	r4, #1
 801098a:	4620      	mov	r0, r4
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	6863      	ldr	r3, [r4, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d0f9      	beq.n	8010988 <rmw_destroy_client+0x10>
 8010994:	2d00      	cmp	r5, #0
 8010996:	d0f7      	beq.n	8010988 <rmw_destroy_client+0x10>
 8010998:	6828      	ldr	r0, [r5, #0]
 801099a:	f7f9 fddb 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d0f2      	beq.n	8010988 <rmw_destroy_client+0x10>
 80109a2:	686e      	ldr	r6, [r5, #4]
 80109a4:	2e00      	cmp	r6, #0
 80109a6:	d0ef      	beq.n	8010988 <rmw_destroy_client+0x10>
 80109a8:	6864      	ldr	r4, [r4, #4]
 80109aa:	6932      	ldr	r2, [r6, #16]
 80109ac:	6920      	ldr	r0, [r4, #16]
 80109ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109b6:	6819      	ldr	r1, [r3, #0]
 80109b8:	f002 f8e6 	bl	8012b88 <uxr_buffer_cancel_data>
 80109bc:	4602      	mov	r2, r0
 80109be:	6920      	ldr	r0, [r4, #16]
 80109c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109c8:	f7f9 fd44 	bl	800a454 <run_xrce_session>
 80109cc:	6920      	ldr	r0, [r4, #16]
 80109ce:	6932      	ldr	r2, [r6, #16]
 80109d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109d8:	6819      	ldr	r1, [r3, #0]
 80109da:	f7f9 fe39 	bl	800a650 <uxr_buffer_delete_entity>
 80109de:	4602      	mov	r2, r0
 80109e0:	6920      	ldr	r0, [r4, #16]
 80109e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109ea:	f7f9 fd33 	bl	800a454 <run_xrce_session>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	4628      	mov	r0, r5
 80109f2:	bf14      	ite	ne
 80109f4:	2400      	movne	r4, #0
 80109f6:	2402      	moveq	r4, #2
 80109f8:	f7f9 fc14 	bl	800a224 <rmw_uxrce_fini_client_memory>
 80109fc:	e7c5      	b.n	801098a <rmw_destroy_client+0x12>
 80109fe:	bf00      	nop

08010a00 <rmw_get_implementation_identifier>:
 8010a00:	4b01      	ldr	r3, [pc, #4]	@ (8010a08 <rmw_get_implementation_identifier+0x8>)
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	0801607c 	.word	0x0801607c

08010a0c <rmw_init_options_init>:
 8010a0c:	b084      	sub	sp, #16
 8010a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a10:	b083      	sub	sp, #12
 8010a12:	ad09      	add	r5, sp, #36	@ 0x24
 8010a14:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010a18:	b130      	cbz	r0, 8010a28 <rmw_init_options_init+0x1c>
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f7f8 fff1 	bl	8009a04 <rcutils_allocator_is_valid>
 8010a22:	b108      	cbz	r0, 8010a28 <rmw_init_options_init+0x1c>
 8010a24:	68a6      	ldr	r6, [r4, #8]
 8010a26:	b12e      	cbz	r6, 8010a34 <rmw_init_options_init+0x28>
 8010a28:	200b      	movs	r0, #11
 8010a2a:	b003      	add	sp, #12
 8010a2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010a30:	b004      	add	sp, #16
 8010a32:	4770      	bx	lr
 8010a34:	2200      	movs	r2, #0
 8010a36:	2300      	movs	r3, #0
 8010a38:	e9c4 2300 	strd	r2, r3, [r4]
 8010a3c:	4b22      	ldr	r3, [pc, #136]	@ (8010ac8 <rmw_init_options_init+0xbc>)
 8010a3e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8010ad8 <rmw_init_options_init+0xcc>
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	60a3      	str	r3, [r4, #8]
 8010a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a48:	f104 0c20 	add.w	ip, r4, #32
 8010a4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a50:	466f      	mov	r7, sp
 8010a52:	682b      	ldr	r3, [r5, #0]
 8010a54:	f8cc 3000 	str.w	r3, [ip]
 8010a58:	4638      	mov	r0, r7
 8010a5a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010a5e:	60e6      	str	r6, [r4, #12]
 8010a60:	f7ff fd76 	bl	8010550 <rmw_get_default_security_options>
 8010a64:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010a68:	f104 0310 	add.w	r3, r4, #16
 8010a6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a70:	2203      	movs	r2, #3
 8010a72:	4816      	ldr	r0, [pc, #88]	@ (8010acc <rmw_init_options_init+0xc0>)
 8010a74:	4916      	ldr	r1, [pc, #88]	@ (8010ad0 <rmw_init_options_init+0xc4>)
 8010a76:	7626      	strb	r6, [r4, #24]
 8010a78:	f7f9 fb14 	bl	800a0a4 <rmw_uxrce_init_init_options_impl_memory>
 8010a7c:	4813      	ldr	r0, [pc, #76]	@ (8010acc <rmw_init_options_init+0xc0>)
 8010a7e:	f7ff ff57 	bl	8010930 <get_memory>
 8010a82:	b1f0      	cbz	r0, 8010ac2 <rmw_init_options_init+0xb6>
 8010a84:	4a13      	ldr	r2, [pc, #76]	@ (8010ad4 <rmw_init_options_init+0xc8>)
 8010a86:	6883      	ldr	r3, [r0, #8]
 8010a88:	6851      	ldr	r1, [r2, #4]
 8010a8a:	7810      	ldrb	r0, [r2, #0]
 8010a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a8e:	7418      	strb	r0, [r3, #16]
 8010a90:	6159      	str	r1, [r3, #20]
 8010a92:	68d1      	ldr	r1, [r2, #12]
 8010a94:	61d9      	str	r1, [r3, #28]
 8010a96:	6911      	ldr	r1, [r2, #16]
 8010a98:	6219      	str	r1, [r3, #32]
 8010a9a:	6951      	ldr	r1, [r2, #20]
 8010a9c:	6892      	ldr	r2, [r2, #8]
 8010a9e:	619a      	str	r2, [r3, #24]
 8010aa0:	6259      	str	r1, [r3, #36]	@ 0x24
 8010aa2:	f7fb fa31 	bl	800bf08 <uxr_nanos>
 8010aa6:	f003 fb8d 	bl	80141c4 <srand>
 8010aaa:	f003 fbb9 	bl	8014220 <rand>
 8010aae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ab0:	6298      	str	r0, [r3, #40]	@ 0x28
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d0f9      	beq.n	8010aaa <rmw_init_options_init+0x9e>
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	b003      	add	sp, #12
 8010aba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010abe:	b004      	add	sp, #16
 8010ac0:	4770      	bx	lr
 8010ac2:	2001      	movs	r0, #1
 8010ac4:	e7b1      	b.n	8010a2a <rmw_init_options_init+0x1e>
 8010ac6:	bf00      	nop
 8010ac8:	0801607c 	.word	0x0801607c
 8010acc:	2000da84 	.word	0x2000da84
 8010ad0:	20009320 	.word	0x20009320
 8010ad4:	200091ac 	.word	0x200091ac
 8010ad8:	08015ae0 	.word	0x08015ae0

08010adc <rmw_init_options_copy>:
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	b158      	cbz	r0, 8010af8 <rmw_init_options_copy+0x1c>
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	b149      	cbz	r1, 8010af8 <rmw_init_options_copy+0x1c>
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	6880      	ldr	r0, [r0, #8]
 8010ae8:	b120      	cbz	r0, 8010af4 <rmw_init_options_copy+0x18>
 8010aea:	4b1e      	ldr	r3, [pc, #120]	@ (8010b64 <rmw_init_options_copy+0x88>)
 8010aec:	6819      	ldr	r1, [r3, #0]
 8010aee:	f7ef fb77 	bl	80001e0 <strcmp>
 8010af2:	bb90      	cbnz	r0, 8010b5a <rmw_init_options_copy+0x7e>
 8010af4:	68ab      	ldr	r3, [r5, #8]
 8010af6:	b113      	cbz	r3, 8010afe <rmw_init_options_copy+0x22>
 8010af8:	250b      	movs	r5, #11
 8010afa:	4628      	mov	r0, r5
 8010afc:	bd70      	pop	{r4, r5, r6, pc}
 8010afe:	4623      	mov	r3, r4
 8010b00:	462a      	mov	r2, r5
 8010b02:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010b06:	f8d3 c000 	ldr.w	ip, [r3]
 8010b0a:	6858      	ldr	r0, [r3, #4]
 8010b0c:	6899      	ldr	r1, [r3, #8]
 8010b0e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010b12:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010b16:	3310      	adds	r3, #16
 8010b18:	42b3      	cmp	r3, r6
 8010b1a:	f8c2 c000 	str.w	ip, [r2]
 8010b1e:	6050      	str	r0, [r2, #4]
 8010b20:	6091      	str	r1, [r2, #8]
 8010b22:	f102 0210 	add.w	r2, r2, #16
 8010b26:	d1ee      	bne.n	8010b06 <rmw_init_options_copy+0x2a>
 8010b28:	6819      	ldr	r1, [r3, #0]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	480e      	ldr	r0, [pc, #56]	@ (8010b68 <rmw_init_options_copy+0x8c>)
 8010b2e:	6053      	str	r3, [r2, #4]
 8010b30:	6011      	str	r1, [r2, #0]
 8010b32:	f7ff fefd 	bl	8010930 <get_memory>
 8010b36:	b198      	cbz	r0, 8010b60 <rmw_init_options_copy+0x84>
 8010b38:	6883      	ldr	r3, [r0, #8]
 8010b3a:	636b      	str	r3, [r5, #52]	@ 0x34
 8010b3c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010b3e:	f102 0c10 	add.w	ip, r2, #16
 8010b42:	f103 0410 	add.w	r4, r3, #16
 8010b46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b4c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010b50:	2500      	movs	r5, #0
 8010b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010b56:	4628      	mov	r0, r5
 8010b58:	bd70      	pop	{r4, r5, r6, pc}
 8010b5a:	250c      	movs	r5, #12
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
 8010b60:	2501      	movs	r5, #1
 8010b62:	e7ca      	b.n	8010afa <rmw_init_options_copy+0x1e>
 8010b64:	0801607c 	.word	0x0801607c
 8010b68:	2000da84 	.word	0x2000da84

08010b6c <rmw_init_options_fini>:
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d03d      	beq.n	8010bec <rmw_init_options_fini+0x80>
 8010b70:	b510      	push	{r4, lr}
 8010b72:	4604      	mov	r4, r0
 8010b74:	b08e      	sub	sp, #56	@ 0x38
 8010b76:	3020      	adds	r0, #32
 8010b78:	f7f8 ff44 	bl	8009a04 <rcutils_allocator_is_valid>
 8010b7c:	b360      	cbz	r0, 8010bd8 <rmw_init_options_fini+0x6c>
 8010b7e:	68a0      	ldr	r0, [r4, #8]
 8010b80:	b120      	cbz	r0, 8010b8c <rmw_init_options_fini+0x20>
 8010b82:	4b1c      	ldr	r3, [pc, #112]	@ (8010bf4 <rmw_init_options_fini+0x88>)
 8010b84:	6819      	ldr	r1, [r3, #0]
 8010b86:	f7ef fb2b 	bl	80001e0 <strcmp>
 8010b8a:	bb68      	cbnz	r0, 8010be8 <rmw_init_options_fini+0x7c>
 8010b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8010bf8 <rmw_init_options_fini+0x8c>)
 8010b8e:	6819      	ldr	r1, [r3, #0]
 8010b90:	b331      	cbz	r1, 8010be0 <rmw_init_options_fini+0x74>
 8010b92:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010b94:	e001      	b.n	8010b9a <rmw_init_options_fini+0x2e>
 8010b96:	6849      	ldr	r1, [r1, #4]
 8010b98:	b311      	cbz	r1, 8010be0 <rmw_init_options_fini+0x74>
 8010b9a:	688b      	ldr	r3, [r1, #8]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d1fa      	bne.n	8010b96 <rmw_init_options_fini+0x2a>
 8010ba0:	4815      	ldr	r0, [pc, #84]	@ (8010bf8 <rmw_init_options_fini+0x8c>)
 8010ba2:	f7ff fed5 	bl	8010950 <put_memory>
 8010ba6:	4668      	mov	r0, sp
 8010ba8:	f7ff fcc2 	bl	8010530 <rmw_get_zero_initialized_init_options>
 8010bac:	46ee      	mov	lr, sp
 8010bae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bb2:	46a4      	mov	ip, r4
 8010bb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bc8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010bcc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	b00e      	add	sp, #56	@ 0x38
 8010bd6:	bd10      	pop	{r4, pc}
 8010bd8:	230b      	movs	r3, #11
 8010bda:	4618      	mov	r0, r3
 8010bdc:	b00e      	add	sp, #56	@ 0x38
 8010bde:	bd10      	pop	{r4, pc}
 8010be0:	2301      	movs	r3, #1
 8010be2:	4618      	mov	r0, r3
 8010be4:	b00e      	add	sp, #56	@ 0x38
 8010be6:	bd10      	pop	{r4, pc}
 8010be8:	230c      	movs	r3, #12
 8010bea:	e7f2      	b.n	8010bd2 <rmw_init_options_fini+0x66>
 8010bec:	230b      	movs	r3, #11
 8010bee:	4618      	mov	r0, r3
 8010bf0:	4770      	bx	lr
 8010bf2:	bf00      	nop
 8010bf4:	0801607c 	.word	0x0801607c
 8010bf8:	2000da84 	.word	0x2000da84

08010bfc <rmw_init>:
 8010bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c00:	b083      	sub	sp, #12
 8010c02:	2800      	cmp	r0, #0
 8010c04:	f000 80d3 	beq.w	8010dae <rmw_init+0x1b2>
 8010c08:	460e      	mov	r6, r1
 8010c0a:	2900      	cmp	r1, #0
 8010c0c:	f000 80cf 	beq.w	8010dae <rmw_init+0x1b2>
 8010c10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010c12:	4605      	mov	r5, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f000 80ca 	beq.w	8010dae <rmw_init+0x1b2>
 8010c1a:	4b78      	ldr	r3, [pc, #480]	@ (8010dfc <rmw_init+0x200>)
 8010c1c:	6880      	ldr	r0, [r0, #8]
 8010c1e:	681f      	ldr	r7, [r3, #0]
 8010c20:	b128      	cbz	r0, 8010c2e <rmw_init+0x32>
 8010c22:	4639      	mov	r1, r7
 8010c24:	f7ef fadc 	bl	80001e0 <strcmp>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	f040 80ca 	bne.w	8010dc2 <rmw_init+0x1c6>
 8010c2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c32:	4c73      	ldr	r4, [pc, #460]	@ (8010e00 <rmw_init+0x204>)
 8010c34:	4973      	ldr	r1, [pc, #460]	@ (8010e04 <rmw_init+0x208>)
 8010c36:	4874      	ldr	r0, [pc, #464]	@ (8010e08 <rmw_init+0x20c>)
 8010c38:	60b7      	str	r7, [r6, #8]
 8010c3a:	e9c6 2300 	strd	r2, r3, [r6]
 8010c3e:	68eb      	ldr	r3, [r5, #12]
 8010c40:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010c42:	2201      	movs	r2, #1
 8010c44:	f7f9 f9ce 	bl	8009fe4 <rmw_uxrce_init_session_memory>
 8010c48:	4620      	mov	r0, r4
 8010c4a:	4970      	ldr	r1, [pc, #448]	@ (8010e0c <rmw_init+0x210>)
 8010c4c:	2204      	movs	r2, #4
 8010c4e:	f7f9 fa09 	bl	800a064 <rmw_uxrce_init_static_input_buffer_memory>
 8010c52:	f04f 0800 	mov.w	r8, #0
 8010c56:	486c      	ldr	r0, [pc, #432]	@ (8010e08 <rmw_init+0x20c>)
 8010c58:	f884 800d 	strb.w	r8, [r4, #13]
 8010c5c:	f7ff fe68 	bl	8010930 <get_memory>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	f000 80a9 	beq.w	8010db8 <rmw_init+0x1bc>
 8010c66:	6884      	ldr	r4, [r0, #8]
 8010c68:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010c6a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010c6c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010c70:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010c74:	9101      	str	r1, [sp, #4]
 8010c76:	6a00      	ldr	r0, [r0, #32]
 8010c78:	9000      	str	r0, [sp, #0]
 8010c7a:	f104 0910 	add.w	r9, r4, #16
 8010c7e:	4661      	mov	r1, ip
 8010c80:	4648      	mov	r0, r9
 8010c82:	f001 f9b9 	bl	8011ff8 <uxr_set_custom_transport_callbacks>
 8010c86:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010c8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c8e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010c92:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010c96:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010c9a:	495d      	ldr	r1, [pc, #372]	@ (8010e10 <rmw_init+0x214>)
 8010c9c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010ca0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8010ca4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010ca8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010cac:	4859      	ldr	r0, [pc, #356]	@ (8010e14 <rmw_init+0x218>)
 8010cae:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8010cb6:	f7f9 f975 	bl	8009fa4 <rmw_uxrce_init_node_memory>
 8010cba:	4957      	ldr	r1, [pc, #348]	@ (8010e18 <rmw_init+0x21c>)
 8010cbc:	4857      	ldr	r0, [pc, #348]	@ (8010e1c <rmw_init+0x220>)
 8010cbe:	2205      	movs	r2, #5
 8010cc0:	f7f9 f950 	bl	8009f64 <rmw_uxrce_init_subscription_memory>
 8010cc4:	4956      	ldr	r1, [pc, #344]	@ (8010e20 <rmw_init+0x224>)
 8010cc6:	4857      	ldr	r0, [pc, #348]	@ (8010e24 <rmw_init+0x228>)
 8010cc8:	220a      	movs	r2, #10
 8010cca:	f7f9 f92b 	bl	8009f24 <rmw_uxrce_init_publisher_memory>
 8010cce:	4956      	ldr	r1, [pc, #344]	@ (8010e28 <rmw_init+0x22c>)
 8010cd0:	4856      	ldr	r0, [pc, #344]	@ (8010e2c <rmw_init+0x230>)
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	f7f9 f8e6 	bl	8009ea4 <rmw_uxrce_init_service_memory>
 8010cd8:	4955      	ldr	r1, [pc, #340]	@ (8010e30 <rmw_init+0x234>)
 8010cda:	4856      	ldr	r0, [pc, #344]	@ (8010e34 <rmw_init+0x238>)
 8010cdc:	2201      	movs	r2, #1
 8010cde:	f7f9 f901 	bl	8009ee4 <rmw_uxrce_init_client_memory>
 8010ce2:	4955      	ldr	r1, [pc, #340]	@ (8010e38 <rmw_init+0x23c>)
 8010ce4:	4855      	ldr	r0, [pc, #340]	@ (8010e3c <rmw_init+0x240>)
 8010ce6:	220f      	movs	r2, #15
 8010ce8:	f7f9 f99c 	bl	800a024 <rmw_uxrce_init_topic_memory>
 8010cec:	4954      	ldr	r1, [pc, #336]	@ (8010e40 <rmw_init+0x244>)
 8010cee:	4855      	ldr	r0, [pc, #340]	@ (8010e44 <rmw_init+0x248>)
 8010cf0:	2203      	movs	r2, #3
 8010cf2:	f7f9 f9d7 	bl	800a0a4 <rmw_uxrce_init_init_options_impl_memory>
 8010cf6:	4954      	ldr	r1, [pc, #336]	@ (8010e48 <rmw_init+0x24c>)
 8010cf8:	4854      	ldr	r0, [pc, #336]	@ (8010e4c <rmw_init+0x250>)
 8010cfa:	2204      	movs	r2, #4
 8010cfc:	f7f9 f9f2 	bl	800a0e4 <rmw_uxrce_init_wait_set_memory>
 8010d00:	4953      	ldr	r1, [pc, #332]	@ (8010e50 <rmw_init+0x254>)
 8010d02:	4854      	ldr	r0, [pc, #336]	@ (8010e54 <rmw_init+0x258>)
 8010d04:	2204      	movs	r2, #4
 8010d06:	f7f9 fa0d 	bl	800a124 <rmw_uxrce_init_guard_condition_memory>
 8010d0a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010d0c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010d0e:	4642      	mov	r2, r8
 8010d10:	f000 fd9e 	bl	8011850 <rmw_uxrce_transport_init>
 8010d14:	4607      	mov	r7, r0
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d158      	bne.n	8010dcc <rmw_init+0x1d0>
 8010d1a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010d1c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010d20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d22:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010d26:	4628      	mov	r0, r5
 8010d28:	f7f9 ff52 	bl	800abd0 <uxr_init_session>
 8010d2c:	494a      	ldr	r1, [pc, #296]	@ (8010e58 <rmw_init+0x25c>)
 8010d2e:	4622      	mov	r2, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f7f9 ff71 	bl	800ac18 <uxr_set_topic_callback>
 8010d36:	4949      	ldr	r1, [pc, #292]	@ (8010e5c <rmw_init+0x260>)
 8010d38:	463a      	mov	r2, r7
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f7f9 ff68 	bl	800ac10 <uxr_set_status_callback>
 8010d40:	4947      	ldr	r1, [pc, #284]	@ (8010e60 <rmw_init+0x264>)
 8010d42:	463a      	mov	r2, r7
 8010d44:	4628      	mov	r0, r5
 8010d46:	f7f9 ff6b 	bl	800ac20 <uxr_set_request_callback>
 8010d4a:	4946      	ldr	r1, [pc, #280]	@ (8010e64 <rmw_init+0x268>)
 8010d4c:	463a      	mov	r2, r7
 8010d4e:	4628      	mov	r0, r5
 8010d50:	f7f9 ff6a 	bl	800ac28 <uxr_set_reply_callback>
 8010d54:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010d58:	2304      	movs	r3, #4
 8010d5a:	0092      	lsls	r2, r2, #2
 8010d5c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010d60:	4628      	mov	r0, r5
 8010d62:	f7f9 ff9f 	bl	800aca4 <uxr_create_input_reliable_stream>
 8010d66:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010d6a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010d6e:	0092      	lsls	r2, r2, #2
 8010d70:	2304      	movs	r3, #4
 8010d72:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010d76:	4628      	mov	r0, r5
 8010d78:	f7f9 ff6c 	bl	800ac54 <uxr_create_output_reliable_stream>
 8010d7c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010d80:	4628      	mov	r0, r5
 8010d82:	f7f9 ff89 	bl	800ac98 <uxr_create_input_best_effort_stream>
 8010d86:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010d8a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010d8e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010d92:	3114      	adds	r1, #20
 8010d94:	4628      	mov	r0, r5
 8010d96:	f7f9 ff4b 	bl	800ac30 <uxr_create_output_best_effort_stream>
 8010d9a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f7fa fcd6 	bl	800b750 <uxr_create_session>
 8010da4:	b1f8      	cbz	r0, 8010de6 <rmw_init+0x1ea>
 8010da6:	4638      	mov	r0, r7
 8010da8:	b003      	add	sp, #12
 8010daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dae:	270b      	movs	r7, #11
 8010db0:	4638      	mov	r0, r7
 8010db2:	b003      	add	sp, #12
 8010db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010db8:	2701      	movs	r7, #1
 8010dba:	4638      	mov	r0, r7
 8010dbc:	b003      	add	sp, #12
 8010dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dc2:	270c      	movs	r7, #12
 8010dc4:	4638      	mov	r0, r7
 8010dc6:	b003      	add	sp, #12
 8010dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dcc:	4648      	mov	r0, r9
 8010dce:	f001 f955 	bl	801207c <uxr_close_custom_transport>
 8010dd2:	480d      	ldr	r0, [pc, #52]	@ (8010e08 <rmw_init+0x20c>)
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	f7ff fdbb 	bl	8010950 <put_memory>
 8010dda:	4638      	mov	r0, r7
 8010ddc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010de0:	b003      	add	sp, #12
 8010de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010de6:	4648      	mov	r0, r9
 8010de8:	f001 f948 	bl	801207c <uxr_close_custom_transport>
 8010dec:	4806      	ldr	r0, [pc, #24]	@ (8010e08 <rmw_init+0x20c>)
 8010dee:	4621      	mov	r1, r4
 8010df0:	f7ff fdae 	bl	8010950 <put_memory>
 8010df4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010df6:	2701      	movs	r7, #1
 8010df8:	e7d5      	b.n	8010da6 <rmw_init+0x1aa>
 8010dfa:	bf00      	nop
 8010dfc:	0801607c 	.word	0x0801607c
 8010e00:	2000dad4 	.word	0x2000dad4
 8010e04:	20009d80 	.word	0x20009d80
 8010e08:	2000dac4 	.word	0x2000dac4
 8010e0c:	2000b328 	.word	0x2000b328
 8010e10:	200093a4 	.word	0x200093a4
 8010e14:	2000da94 	.word	0x2000da94
 8010e18:	2000d428 	.word	0x2000d428
 8010e1c:	2000dae4 	.word	0x2000dae4
 8010e20:	20009448 	.word	0x20009448
 8010e24:	2000daa4 	.word	0x2000daa4
 8010e28:	20009cb8 	.word	0x20009cb8
 8010e2c:	2000dab4 	.word	0x2000dab4
 8010e30:	200091d8 	.word	0x200091d8
 8010e34:	200091c8 	.word	0x200091c8
 8010e38:	2000d860 	.word	0x2000d860
 8010e3c:	2000daf4 	.word	0x2000daf4
 8010e40:	20009320 	.word	0x20009320
 8010e44:	2000da84 	.word	0x2000da84
 8010e48:	2000da04 	.word	0x2000da04
 8010e4c:	2000db04 	.word	0x2000db04
 8010e50:	200092a0 	.word	0x200092a0
 8010e54:	2000da74 	.word	0x2000da74
 8010e58:	08013d69 	.word	0x08013d69
 8010e5c:	08013d61 	.word	0x08013d61
 8010e60:	08013e01 	.word	0x08013e01
 8010e64:	08013e9d 	.word	0x08013e9d

08010e68 <rmw_context_fini>:
 8010e68:	4b17      	ldr	r3, [pc, #92]	@ (8010ec8 <rmw_context_fini+0x60>)
 8010e6a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	681c      	ldr	r4, [r3, #0]
 8010e70:	4605      	mov	r5, r0
 8010e72:	b334      	cbz	r4, 8010ec2 <rmw_context_fini+0x5a>
 8010e74:	2600      	movs	r6, #0
 8010e76:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010e7a:	6902      	ldr	r2, [r0, #16]
 8010e7c:	428a      	cmp	r2, r1
 8010e7e:	d018      	beq.n	8010eb2 <rmw_context_fini+0x4a>
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	d1f8      	bne.n	8010e76 <rmw_context_fini+0xe>
 8010e84:	b189      	cbz	r1, 8010eaa <rmw_context_fini+0x42>
 8010e86:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010e8a:	789b      	ldrb	r3, [r3, #2]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8010e92:	bf14      	ite	ne
 8010e94:	210a      	movne	r1, #10
 8010e96:	2100      	moveq	r1, #0
 8010e98:	f7fa fc32 	bl	800b700 <uxr_delete_session_retries>
 8010e9c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010e9e:	f7f9 f961 	bl	800a164 <rmw_uxrce_fini_session_memory>
 8010ea2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8010ea4:	3010      	adds	r0, #16
 8010ea6:	f001 f8e9 	bl	801207c <uxr_close_custom_transport>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8010eae:	4630      	mov	r0, r6
 8010eb0:	bd70      	pop	{r4, r5, r6, pc}
 8010eb2:	3018      	adds	r0, #24
 8010eb4:	f000 f90e 	bl	80110d4 <rmw_destroy_node>
 8010eb8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010eba:	4606      	mov	r6, r0
 8010ebc:	2c00      	cmp	r4, #0
 8010ebe:	d1da      	bne.n	8010e76 <rmw_context_fini+0xe>
 8010ec0:	e7e0      	b.n	8010e84 <rmw_context_fini+0x1c>
 8010ec2:	4626      	mov	r6, r4
 8010ec4:	e7de      	b.n	8010e84 <rmw_context_fini+0x1c>
 8010ec6:	bf00      	nop
 8010ec8:	2000da94 	.word	0x2000da94

08010ecc <create_topic>:
 8010ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	b084      	sub	sp, #16
 8010ed4:	4822      	ldr	r0, [pc, #136]	@ (8010f60 <create_topic+0x94>)
 8010ed6:	460f      	mov	r7, r1
 8010ed8:	4616      	mov	r6, r2
 8010eda:	f7ff fd29 	bl	8010930 <get_memory>
 8010ede:	4604      	mov	r4, r0
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d039      	beq.n	8010f58 <create_topic+0x8c>
 8010ee4:	692b      	ldr	r3, [r5, #16]
 8010ee6:	6884      	ldr	r4, [r0, #8]
 8010ee8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8010f68 <create_topic+0x9c>
 8010eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010ef0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8010ef4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010ef8:	1c42      	adds	r2, r0, #1
 8010efa:	2102      	movs	r1, #2
 8010efc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8010f00:	f7f9 fda8 	bl	800aa54 <uxr_object_id>
 8010f04:	223c      	movs	r2, #60	@ 0x3c
 8010f06:	6120      	str	r0, [r4, #16]
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	f7f9 fb08 	bl	800a520 <generate_topic_name>
 8010f10:	b1f0      	cbz	r0, 8010f50 <create_topic+0x84>
 8010f12:	4f14      	ldr	r7, [pc, #80]	@ (8010f64 <create_topic+0x98>)
 8010f14:	4630      	mov	r0, r6
 8010f16:	2264      	movs	r2, #100	@ 0x64
 8010f18:	4639      	mov	r1, r7
 8010f1a:	f7f9 fad1 	bl	800a4c0 <generate_type_name>
 8010f1e:	b1b8      	cbz	r0, 8010f50 <create_topic+0x84>
 8010f20:	6928      	ldr	r0, [r5, #16]
 8010f22:	2306      	movs	r3, #6
 8010f24:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010f28:	f8cd 8000 	str.w	r8, [sp]
 8010f2c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010f30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f34:	6811      	ldr	r1, [r2, #0]
 8010f36:	696b      	ldr	r3, [r5, #20]
 8010f38:	6922      	ldr	r2, [r4, #16]
 8010f3a:	f7f9 fc07 	bl	800a74c <uxr_buffer_create_topic_bin>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	6928      	ldr	r0, [r5, #16]
 8010f42:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010f46:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010f4a:	f7f9 fa83 	bl	800a454 <run_xrce_session>
 8010f4e:	b918      	cbnz	r0, 8010f58 <create_topic+0x8c>
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7f9 f97d 	bl	800a250 <rmw_uxrce_fini_topic_memory>
 8010f56:	2400      	movs	r4, #0
 8010f58:	4620      	mov	r0, r4
 8010f5a:	b004      	add	sp, #16
 8010f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f60:	2000daf4 	.word	0x2000daf4
 8010f64:	2000dbe0 	.word	0x2000dbe0
 8010f68:	2000dba4 	.word	0x2000dba4

08010f6c <destroy_topic>:
 8010f6c:	b538      	push	{r3, r4, r5, lr}
 8010f6e:	6985      	ldr	r5, [r0, #24]
 8010f70:	b1d5      	cbz	r5, 8010fa8 <destroy_topic+0x3c>
 8010f72:	4604      	mov	r4, r0
 8010f74:	6928      	ldr	r0, [r5, #16]
 8010f76:	6922      	ldr	r2, [r4, #16]
 8010f78:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f80:	6819      	ldr	r1, [r3, #0]
 8010f82:	f7f9 fb65 	bl	800a650 <uxr_buffer_delete_entity>
 8010f86:	4602      	mov	r2, r0
 8010f88:	6928      	ldr	r0, [r5, #16]
 8010f8a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f92:	f7f9 fa5f 	bl	800a454 <run_xrce_session>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	4620      	mov	r0, r4
 8010f9a:	bf14      	ite	ne
 8010f9c:	2400      	movne	r4, #0
 8010f9e:	2402      	moveq	r4, #2
 8010fa0:	f7f9 f956 	bl	800a250 <rmw_uxrce_fini_topic_memory>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	bd38      	pop	{r3, r4, r5, pc}
 8010fa8:	2401      	movs	r4, #1
 8010faa:	4620      	mov	r0, r4
 8010fac:	bd38      	pop	{r3, r4, r5, pc}
 8010fae:	bf00      	nop

08010fb0 <create_node>:
 8010fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fb4:	b083      	sub	sp, #12
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d05f      	beq.n	801107a <create_node+0xca>
 8010fba:	4606      	mov	r6, r0
 8010fbc:	4835      	ldr	r0, [pc, #212]	@ (8011094 <create_node+0xe4>)
 8010fbe:	460f      	mov	r7, r1
 8010fc0:	4690      	mov	r8, r2
 8010fc2:	461d      	mov	r5, r3
 8010fc4:	f7ff fcb4 	bl	8010930 <get_memory>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d056      	beq.n	801107a <create_node+0xca>
 8010fcc:	6884      	ldr	r4, [r0, #8]
 8010fce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010fd0:	6123      	str	r3, [r4, #16]
 8010fd2:	f7ff fd15 	bl	8010a00 <rmw_get_implementation_identifier>
 8010fd6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8010fda:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010fde:	f8c4 9020 	str.w	r9, [r4, #32]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f7ef f906 	bl	80001f4 <strlen>
 8010fe8:	1c42      	adds	r2, r0, #1
 8010fea:	2a3c      	cmp	r2, #60	@ 0x3c
 8010fec:	f104 0518 	add.w	r5, r4, #24
 8010ff0:	d840      	bhi.n	8011074 <create_node+0xc4>
 8010ff2:	4648      	mov	r0, r9
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010ffa:	f003 fc62 	bl	80148c2 <memcpy>
 8010ffe:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8011002:	4638      	mov	r0, r7
 8011004:	f7ef f8f6 	bl	80001f4 <strlen>
 8011008:	1c42      	adds	r2, r0, #1
 801100a:	2a3c      	cmp	r2, #60	@ 0x3c
 801100c:	d832      	bhi.n	8011074 <create_node+0xc4>
 801100e:	4639      	mov	r1, r7
 8011010:	4648      	mov	r0, r9
 8011012:	f003 fc56 	bl	80148c2 <memcpy>
 8011016:	6923      	ldr	r3, [r4, #16]
 8011018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801101c:	2101      	movs	r1, #1
 801101e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8011022:	1842      	adds	r2, r0, r1
 8011024:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011028:	f7f9 fd14 	bl	800aa54 <uxr_object_id>
 801102c:	6160      	str	r0, [r4, #20]
 801102e:	783b      	ldrb	r3, [r7, #0]
 8011030:	2b2f      	cmp	r3, #47	@ 0x2f
 8011032:	d127      	bne.n	8011084 <create_node+0xd4>
 8011034:	787b      	ldrb	r3, [r7, #1]
 8011036:	bb2b      	cbnz	r3, 8011084 <create_node+0xd4>
 8011038:	4a17      	ldr	r2, [pc, #92]	@ (8011098 <create_node+0xe8>)
 801103a:	4818      	ldr	r0, [pc, #96]	@ (801109c <create_node+0xec>)
 801103c:	4633      	mov	r3, r6
 801103e:	213c      	movs	r1, #60	@ 0x3c
 8011040:	f003 fa9c 	bl	801457c <sniprintf>
 8011044:	6920      	ldr	r0, [r4, #16]
 8011046:	4915      	ldr	r1, [pc, #84]	@ (801109c <create_node+0xec>)
 8011048:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801104c:	9100      	str	r1, [sp, #0]
 801104e:	2106      	movs	r1, #6
 8011050:	9101      	str	r1, [sp, #4]
 8011052:	6811      	ldr	r1, [r2, #0]
 8011054:	6962      	ldr	r2, [r4, #20]
 8011056:	fa1f f388 	uxth.w	r3, r8
 801105a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801105e:	f7f9 fb43 	bl	800a6e8 <uxr_buffer_create_participant_bin>
 8011062:	4602      	mov	r2, r0
 8011064:	6920      	ldr	r0, [r4, #16]
 8011066:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801106a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801106e:	f7f9 f9f1 	bl	800a454 <run_xrce_session>
 8011072:	b918      	cbnz	r0, 801107c <create_node+0xcc>
 8011074:	4628      	mov	r0, r5
 8011076:	f7f9 f87b 	bl	800a170 <rmw_uxrce_fini_node_memory>
 801107a:	2500      	movs	r5, #0
 801107c:	4628      	mov	r0, r5
 801107e:	b003      	add	sp, #12
 8011080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011084:	4a06      	ldr	r2, [pc, #24]	@ (80110a0 <create_node+0xf0>)
 8011086:	9600      	str	r6, [sp, #0]
 8011088:	463b      	mov	r3, r7
 801108a:	213c      	movs	r1, #60	@ 0x3c
 801108c:	4803      	ldr	r0, [pc, #12]	@ (801109c <create_node+0xec>)
 801108e:	f003 fa75 	bl	801457c <sniprintf>
 8011092:	e7d7      	b.n	8011044 <create_node+0x94>
 8011094:	2000da94 	.word	0x2000da94
 8011098:	08015a90 	.word	0x08015a90
 801109c:	2000dc44 	.word	0x2000dc44
 80110a0:	08015ae8 	.word	0x08015ae8

080110a4 <rmw_create_node>:
 80110a4:	b199      	cbz	r1, 80110ce <rmw_create_node+0x2a>
 80110a6:	780b      	ldrb	r3, [r1, #0]
 80110a8:	468c      	mov	ip, r1
 80110aa:	b183      	cbz	r3, 80110ce <rmw_create_node+0x2a>
 80110ac:	b410      	push	{r4}
 80110ae:	4614      	mov	r4, r2
 80110b0:	b14a      	cbz	r2, 80110c6 <rmw_create_node+0x22>
 80110b2:	7813      	ldrb	r3, [r2, #0]
 80110b4:	b13b      	cbz	r3, 80110c6 <rmw_create_node+0x22>
 80110b6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80110b8:	4603      	mov	r3, r0
 80110ba:	4621      	mov	r1, r4
 80110bc:	4660      	mov	r0, ip
 80110be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c2:	f7ff bf75 	b.w	8010fb0 <create_node>
 80110c6:	2000      	movs	r0, #0
 80110c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	2000      	movs	r0, #0
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop

080110d4 <rmw_destroy_node>:
 80110d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d6:	b328      	cbz	r0, 8011124 <rmw_destroy_node+0x50>
 80110d8:	4607      	mov	r7, r0
 80110da:	6800      	ldr	r0, [r0, #0]
 80110dc:	b120      	cbz	r0, 80110e8 <rmw_destroy_node+0x14>
 80110de:	4b36      	ldr	r3, [pc, #216]	@ (80111b8 <rmw_destroy_node+0xe4>)
 80110e0:	6819      	ldr	r1, [r3, #0]
 80110e2:	f7ef f87d 	bl	80001e0 <strcmp>
 80110e6:	b9e8      	cbnz	r0, 8011124 <rmw_destroy_node+0x50>
 80110e8:	687d      	ldr	r5, [r7, #4]
 80110ea:	b1dd      	cbz	r5, 8011124 <rmw_destroy_node+0x50>
 80110ec:	4b33      	ldr	r3, [pc, #204]	@ (80111bc <rmw_destroy_node+0xe8>)
 80110ee:	681c      	ldr	r4, [r3, #0]
 80110f0:	2c00      	cmp	r4, #0
 80110f2:	d05f      	beq.n	80111b4 <rmw_destroy_node+0xe0>
 80110f4:	2600      	movs	r6, #0
 80110f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80110fa:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80110fe:	429d      	cmp	r5, r3
 8011100:	d013      	beq.n	801112a <rmw_destroy_node+0x56>
 8011102:	2c00      	cmp	r4, #0
 8011104:	d1f7      	bne.n	80110f6 <rmw_destroy_node+0x22>
 8011106:	4b2e      	ldr	r3, [pc, #184]	@ (80111c0 <rmw_destroy_node+0xec>)
 8011108:	681c      	ldr	r4, [r3, #0]
 801110a:	b1c4      	cbz	r4, 801113e <rmw_destroy_node+0x6a>
 801110c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011110:	6a0b      	ldr	r3, [r1, #32]
 8011112:	429d      	cmp	r5, r3
 8011114:	d1f9      	bne.n	801110a <rmw_destroy_node+0x36>
 8011116:	317c      	adds	r1, #124	@ 0x7c
 8011118:	4638      	mov	r0, r7
 801111a:	f000 fae5 	bl	80116e8 <rmw_destroy_subscription>
 801111e:	2801      	cmp	r0, #1
 8011120:	4606      	mov	r6, r0
 8011122:	d1f2      	bne.n	801110a <rmw_destroy_node+0x36>
 8011124:	2601      	movs	r6, #1
 8011126:	4630      	mov	r0, r6
 8011128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112a:	3184      	adds	r1, #132	@ 0x84
 801112c:	4638      	mov	r0, r7
 801112e:	f7f8 fe67 	bl	8009e00 <rmw_destroy_publisher>
 8011132:	2801      	cmp	r0, #1
 8011134:	4606      	mov	r6, r0
 8011136:	d0f5      	beq.n	8011124 <rmw_destroy_node+0x50>
 8011138:	2c00      	cmp	r4, #0
 801113a:	d1dc      	bne.n	80110f6 <rmw_destroy_node+0x22>
 801113c:	e7e3      	b.n	8011106 <rmw_destroy_node+0x32>
 801113e:	4b21      	ldr	r3, [pc, #132]	@ (80111c4 <rmw_destroy_node+0xf0>)
 8011140:	681c      	ldr	r4, [r3, #0]
 8011142:	b16c      	cbz	r4, 8011160 <rmw_destroy_node+0x8c>
 8011144:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011148:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801114a:	429d      	cmp	r5, r3
 801114c:	d1f9      	bne.n	8011142 <rmw_destroy_node+0x6e>
 801114e:	317c      	adds	r1, #124	@ 0x7c
 8011150:	4638      	mov	r0, r7
 8011152:	f000 f993 	bl	801147c <rmw_destroy_service>
 8011156:	2801      	cmp	r0, #1
 8011158:	4606      	mov	r6, r0
 801115a:	d0e3      	beq.n	8011124 <rmw_destroy_node+0x50>
 801115c:	2c00      	cmp	r4, #0
 801115e:	d1f1      	bne.n	8011144 <rmw_destroy_node+0x70>
 8011160:	4b19      	ldr	r3, [pc, #100]	@ (80111c8 <rmw_destroy_node+0xf4>)
 8011162:	681c      	ldr	r4, [r3, #0]
 8011164:	b16c      	cbz	r4, 8011182 <rmw_destroy_node+0xae>
 8011166:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801116a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801116c:	429d      	cmp	r5, r3
 801116e:	d1f9      	bne.n	8011164 <rmw_destroy_node+0x90>
 8011170:	317c      	adds	r1, #124	@ 0x7c
 8011172:	4638      	mov	r0, r7
 8011174:	f7ff fc00 	bl	8010978 <rmw_destroy_client>
 8011178:	2801      	cmp	r0, #1
 801117a:	4606      	mov	r6, r0
 801117c:	d0d2      	beq.n	8011124 <rmw_destroy_node+0x50>
 801117e:	2c00      	cmp	r4, #0
 8011180:	d1f1      	bne.n	8011166 <rmw_destroy_node+0x92>
 8011182:	6928      	ldr	r0, [r5, #16]
 8011184:	696a      	ldr	r2, [r5, #20]
 8011186:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801118a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801118e:	6819      	ldr	r1, [r3, #0]
 8011190:	f7f9 fa5e 	bl	800a650 <uxr_buffer_delete_entity>
 8011194:	4602      	mov	r2, r0
 8011196:	6928      	ldr	r0, [r5, #16]
 8011198:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801119c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80111a0:	f7f9 f958 	bl	800a454 <run_xrce_session>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	bf08      	it	eq
 80111a8:	2602      	moveq	r6, #2
 80111aa:	4638      	mov	r0, r7
 80111ac:	f7f8 ffe0 	bl	800a170 <rmw_uxrce_fini_node_memory>
 80111b0:	4630      	mov	r0, r6
 80111b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b4:	4626      	mov	r6, r4
 80111b6:	e7a6      	b.n	8011106 <rmw_destroy_node+0x32>
 80111b8:	0801607c 	.word	0x0801607c
 80111bc:	2000daa4 	.word	0x2000daa4
 80111c0:	2000dae4 	.word	0x2000dae4
 80111c4:	2000dab4 	.word	0x2000dab4
 80111c8:	200091c8 	.word	0x200091c8

080111cc <rmw_node_get_graph_guard_condition>:
 80111cc:	6843      	ldr	r3, [r0, #4]
 80111ce:	6918      	ldr	r0, [r3, #16]
 80111d0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop

080111d8 <rmw_send_request>:
 80111d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111dc:	4604      	mov	r4, r0
 80111de:	6800      	ldr	r0, [r0, #0]
 80111e0:	b08b      	sub	sp, #44	@ 0x2c
 80111e2:	460e      	mov	r6, r1
 80111e4:	4615      	mov	r5, r2
 80111e6:	b128      	cbz	r0, 80111f4 <rmw_send_request+0x1c>
 80111e8:	4b21      	ldr	r3, [pc, #132]	@ (8011270 <rmw_send_request+0x98>)
 80111ea:	6819      	ldr	r1, [r3, #0]
 80111ec:	f7ee fff8 	bl	80001e0 <strcmp>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d139      	bne.n	8011268 <rmw_send_request+0x90>
 80111f4:	6864      	ldr	r4, [r4, #4]
 80111f6:	6963      	ldr	r3, [r4, #20]
 80111f8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	4798      	blx	r3
 8011200:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8011204:	4630      	mov	r0, r6
 8011206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801120a:	4798      	blx	r3
 801120c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011210:	9000      	str	r0, [sp, #0]
 8011212:	6922      	ldr	r2, [r4, #16]
 8011214:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8011216:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801121a:	ab02      	add	r3, sp, #8
 801121c:	f7fa ff14 	bl	800c048 <uxr_prepare_output_stream>
 8011220:	2700      	movs	r7, #0
 8011222:	6028      	str	r0, [r5, #0]
 8011224:	606f      	str	r7, [r5, #4]
 8011226:	b198      	cbz	r0, 8011250 <rmw_send_request+0x78>
 8011228:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801122c:	a902      	add	r1, sp, #8
 801122e:	4630      	mov	r0, r6
 8011230:	4798      	blx	r3
 8011232:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8011236:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d00c      	beq.n	8011258 <rmw_send_request+0x80>
 801123e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011240:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011244:	f7fa f914 	bl	800b470 <uxr_run_session_until_confirm_delivery>
 8011248:	4638      	mov	r0, r7
 801124a:	b00b      	add	sp, #44	@ 0x2c
 801124c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011250:	2001      	movs	r0, #1
 8011252:	b00b      	add	sp, #44	@ 0x2c
 8011254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011258:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801125c:	f7f9 fd48 	bl	800acf0 <uxr_flash_output_streams>
 8011260:	4638      	mov	r0, r7
 8011262:	b00b      	add	sp, #44	@ 0x2c
 8011264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011268:	200c      	movs	r0, #12
 801126a:	b00b      	add	sp, #44	@ 0x2c
 801126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011270:	0801607c 	.word	0x0801607c

08011274 <rmw_take_request>:
 8011274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011278:	4605      	mov	r5, r0
 801127a:	6800      	ldr	r0, [r0, #0]
 801127c:	b089      	sub	sp, #36	@ 0x24
 801127e:	460c      	mov	r4, r1
 8011280:	4690      	mov	r8, r2
 8011282:	461e      	mov	r6, r3
 8011284:	b128      	cbz	r0, 8011292 <rmw_take_request+0x1e>
 8011286:	4b28      	ldr	r3, [pc, #160]	@ (8011328 <rmw_take_request+0xb4>)
 8011288:	6819      	ldr	r1, [r3, #0]
 801128a:	f7ee ffa9 	bl	80001e0 <strcmp>
 801128e:	2800      	cmp	r0, #0
 8011290:	d146      	bne.n	8011320 <rmw_take_request+0xac>
 8011292:	b10e      	cbz	r6, 8011298 <rmw_take_request+0x24>
 8011294:	2300      	movs	r3, #0
 8011296:	7033      	strb	r3, [r6, #0]
 8011298:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801129c:	f7f9 f85c 	bl	800a358 <rmw_uxrce_clean_expired_static_input_buffer>
 80112a0:	4648      	mov	r0, r9
 80112a2:	f7f9 f831 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 80112a6:	4607      	mov	r7, r0
 80112a8:	b3b0      	cbz	r0, 8011318 <rmw_take_request+0xa4>
 80112aa:	6885      	ldr	r5, [r0, #8]
 80112ac:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80112b0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80112b4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80112b8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80112bc:	7423      	strb	r3, [r4, #16]
 80112be:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80112c2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80112c6:	74e2      	strb	r2, [r4, #19]
 80112c8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80112cc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80112d0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80112d4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80112d8:	61e1      	str	r1, [r4, #28]
 80112da:	6162      	str	r2, [r4, #20]
 80112dc:	61a3      	str	r3, [r4, #24]
 80112de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	4798      	blx	r3
 80112e6:	6844      	ldr	r4, [r0, #4]
 80112e8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80112ec:	f105 0110 	add.w	r1, r5, #16
 80112f0:	4668      	mov	r0, sp
 80112f2:	f7f7 fadd 	bl	80088b0 <ucdr_init_buffer>
 80112f6:	68e3      	ldr	r3, [r4, #12]
 80112f8:	4641      	mov	r1, r8
 80112fa:	4668      	mov	r0, sp
 80112fc:	4798      	blx	r3
 80112fe:	4639      	mov	r1, r7
 8011300:	4604      	mov	r4, r0
 8011302:	480a      	ldr	r0, [pc, #40]	@ (801132c <rmw_take_request+0xb8>)
 8011304:	f7ff fb24 	bl	8010950 <put_memory>
 8011308:	b106      	cbz	r6, 801130c <rmw_take_request+0x98>
 801130a:	7034      	strb	r4, [r6, #0]
 801130c:	f084 0001 	eor.w	r0, r4, #1
 8011310:	b2c0      	uxtb	r0, r0
 8011312:	b009      	add	sp, #36	@ 0x24
 8011314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011318:	2001      	movs	r0, #1
 801131a:	b009      	add	sp, #36	@ 0x24
 801131c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011320:	200c      	movs	r0, #12
 8011322:	b009      	add	sp, #36	@ 0x24
 8011324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011328:	0801607c 	.word	0x0801607c
 801132c:	2000dad4 	.word	0x2000dad4

08011330 <rmw_send_response>:
 8011330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011332:	4605      	mov	r5, r0
 8011334:	6800      	ldr	r0, [r0, #0]
 8011336:	b091      	sub	sp, #68	@ 0x44
 8011338:	460c      	mov	r4, r1
 801133a:	4616      	mov	r6, r2
 801133c:	b128      	cbz	r0, 801134a <rmw_send_response+0x1a>
 801133e:	4b29      	ldr	r3, [pc, #164]	@ (80113e4 <rmw_send_response+0xb4>)
 8011340:	6819      	ldr	r1, [r3, #0]
 8011342:	f7ee ff4d 	bl	80001e0 <strcmp>
 8011346:	2800      	cmp	r0, #0
 8011348:	d141      	bne.n	80113ce <rmw_send_response+0x9e>
 801134a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801134e:	9306      	str	r3, [sp, #24]
 8011350:	4623      	mov	r3, r4
 8011352:	9207      	str	r2, [sp, #28]
 8011354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011358:	686d      	ldr	r5, [r5, #4]
 801135a:	789b      	ldrb	r3, [r3, #2]
 801135c:	68a1      	ldr	r1, [r4, #8]
 801135e:	f88d 2017 	strb.w	r2, [sp, #23]
 8011362:	f88d 3016 	strb.w	r3, [sp, #22]
 8011366:	68e2      	ldr	r2, [r4, #12]
 8011368:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801136c:	6860      	ldr	r0, [r4, #4]
 801136e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011372:	ab02      	add	r3, sp, #8
 8011374:	c307      	stmia	r3!, {r0, r1, r2}
 8011376:	696b      	ldr	r3, [r5, #20]
 8011378:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	4798      	blx	r3
 801137e:	6844      	ldr	r4, [r0, #4]
 8011380:	4630      	mov	r0, r6
 8011382:	6923      	ldr	r3, [r4, #16]
 8011384:	4798      	blx	r3
 8011386:	f100 0318 	add.w	r3, r0, #24
 801138a:	6938      	ldr	r0, [r7, #16]
 801138c:	9300      	str	r3, [sp, #0]
 801138e:	692a      	ldr	r2, [r5, #16]
 8011390:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8011392:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011396:	ab08      	add	r3, sp, #32
 8011398:	f7fa fe56 	bl	800c048 <uxr_prepare_output_stream>
 801139c:	b910      	cbnz	r0, 80113a4 <rmw_send_response+0x74>
 801139e:	2001      	movs	r0, #1
 80113a0:	b011      	add	sp, #68	@ 0x44
 80113a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a4:	a902      	add	r1, sp, #8
 80113a6:	a808      	add	r0, sp, #32
 80113a8:	f7fb ff86 	bl	800d2b8 <uxr_serialize_SampleIdentity>
 80113ac:	68a3      	ldr	r3, [r4, #8]
 80113ae:	a908      	add	r1, sp, #32
 80113b0:	4630      	mov	r0, r6
 80113b2:	4798      	blx	r3
 80113b4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80113b8:	6938      	ldr	r0, [r7, #16]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d00a      	beq.n	80113d4 <rmw_send_response+0xa4>
 80113be:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80113c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113c4:	f7fa f854 	bl	800b470 <uxr_run_session_until_confirm_delivery>
 80113c8:	2000      	movs	r0, #0
 80113ca:	b011      	add	sp, #68	@ 0x44
 80113cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ce:	200c      	movs	r0, #12
 80113d0:	b011      	add	sp, #68	@ 0x44
 80113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113d8:	f7f9 fc8a 	bl	800acf0 <uxr_flash_output_streams>
 80113dc:	2000      	movs	r0, #0
 80113de:	b011      	add	sp, #68	@ 0x44
 80113e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e2:	bf00      	nop
 80113e4:	0801607c 	.word	0x0801607c

080113e8 <rmw_take_response>:
 80113e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ec:	4604      	mov	r4, r0
 80113ee:	6800      	ldr	r0, [r0, #0]
 80113f0:	b088      	sub	sp, #32
 80113f2:	4688      	mov	r8, r1
 80113f4:	4617      	mov	r7, r2
 80113f6:	461d      	mov	r5, r3
 80113f8:	b120      	cbz	r0, 8011404 <rmw_take_response+0x1c>
 80113fa:	4b1e      	ldr	r3, [pc, #120]	@ (8011474 <rmw_take_response+0x8c>)
 80113fc:	6819      	ldr	r1, [r3, #0]
 80113fe:	f7ee feef 	bl	80001e0 <strcmp>
 8011402:	bb78      	cbnz	r0, 8011464 <rmw_take_response+0x7c>
 8011404:	b10d      	cbz	r5, 801140a <rmw_take_response+0x22>
 8011406:	2300      	movs	r3, #0
 8011408:	702b      	strb	r3, [r5, #0]
 801140a:	6864      	ldr	r4, [r4, #4]
 801140c:	f7f8 ffa4 	bl	800a358 <rmw_uxrce_clean_expired_static_input_buffer>
 8011410:	4620      	mov	r0, r4
 8011412:	f7f8 ff79 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011416:	4606      	mov	r6, r0
 8011418:	b340      	cbz	r0, 801146c <rmw_take_response+0x84>
 801141a:	6963      	ldr	r3, [r4, #20]
 801141c:	6884      	ldr	r4, [r0, #8]
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8011424:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8011428:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801142c:	4798      	blx	r3
 801142e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011432:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8011436:	f104 0110 	add.w	r1, r4, #16
 801143a:	4668      	mov	r0, sp
 801143c:	f7f7 fa38 	bl	80088b0 <ucdr_init_buffer>
 8011440:	4639      	mov	r1, r7
 8011442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011446:	4668      	mov	r0, sp
 8011448:	4798      	blx	r3
 801144a:	4631      	mov	r1, r6
 801144c:	4604      	mov	r4, r0
 801144e:	480a      	ldr	r0, [pc, #40]	@ (8011478 <rmw_take_response+0x90>)
 8011450:	f7ff fa7e 	bl	8010950 <put_memory>
 8011454:	b105      	cbz	r5, 8011458 <rmw_take_response+0x70>
 8011456:	702c      	strb	r4, [r5, #0]
 8011458:	f084 0001 	eor.w	r0, r4, #1
 801145c:	b2c0      	uxtb	r0, r0
 801145e:	b008      	add	sp, #32
 8011460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011464:	200c      	movs	r0, #12
 8011466:	b008      	add	sp, #32
 8011468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146c:	2001      	movs	r0, #1
 801146e:	b008      	add	sp, #32
 8011470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011474:	0801607c 	.word	0x0801607c
 8011478:	2000dad4 	.word	0x2000dad4

0801147c <rmw_destroy_service>:
 801147c:	b570      	push	{r4, r5, r6, lr}
 801147e:	b128      	cbz	r0, 801148c <rmw_destroy_service+0x10>
 8011480:	4604      	mov	r4, r0
 8011482:	6800      	ldr	r0, [r0, #0]
 8011484:	460d      	mov	r5, r1
 8011486:	f7f9 f865 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 801148a:	b910      	cbnz	r0, 8011492 <rmw_destroy_service+0x16>
 801148c:	2401      	movs	r4, #1
 801148e:	4620      	mov	r0, r4
 8011490:	bd70      	pop	{r4, r5, r6, pc}
 8011492:	6863      	ldr	r3, [r4, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0f9      	beq.n	801148c <rmw_destroy_service+0x10>
 8011498:	2d00      	cmp	r5, #0
 801149a:	d0f7      	beq.n	801148c <rmw_destroy_service+0x10>
 801149c:	6828      	ldr	r0, [r5, #0]
 801149e:	f7f9 f859 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d0f2      	beq.n	801148c <rmw_destroy_service+0x10>
 80114a6:	686e      	ldr	r6, [r5, #4]
 80114a8:	2e00      	cmp	r6, #0
 80114aa:	d0ef      	beq.n	801148c <rmw_destroy_service+0x10>
 80114ac:	6864      	ldr	r4, [r4, #4]
 80114ae:	6932      	ldr	r2, [r6, #16]
 80114b0:	6920      	ldr	r0, [r4, #16]
 80114b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80114b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114ba:	6819      	ldr	r1, [r3, #0]
 80114bc:	f001 fb64 	bl	8012b88 <uxr_buffer_cancel_data>
 80114c0:	4602      	mov	r2, r0
 80114c2:	6920      	ldr	r0, [r4, #16]
 80114c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80114c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80114cc:	f7f8 ffc2 	bl	800a454 <run_xrce_session>
 80114d0:	6920      	ldr	r0, [r4, #16]
 80114d2:	6932      	ldr	r2, [r6, #16]
 80114d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80114d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114dc:	6819      	ldr	r1, [r3, #0]
 80114de:	f7f9 f8b7 	bl	800a650 <uxr_buffer_delete_entity>
 80114e2:	4602      	mov	r2, r0
 80114e4:	6920      	ldr	r0, [r4, #16]
 80114e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80114ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80114ee:	f7f8 ffb1 	bl	800a454 <run_xrce_session>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	4628      	mov	r0, r5
 80114f6:	bf14      	ite	ne
 80114f8:	2400      	movne	r4, #0
 80114fa:	2402      	moveq	r4, #2
 80114fc:	f7f8 fe7c 	bl	800a1f8 <rmw_uxrce_fini_service_memory>
 8011500:	e7c5      	b.n	801148e <rmw_destroy_service+0x12>
 8011502:	bf00      	nop

08011504 <rmw_create_subscription>:
 8011504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	b08d      	sub	sp, #52	@ 0x34
 801150a:	2800      	cmp	r0, #0
 801150c:	f000 80d1 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 8011510:	460e      	mov	r6, r1
 8011512:	2900      	cmp	r1, #0
 8011514:	f000 80cd 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 8011518:	4604      	mov	r4, r0
 801151a:	6800      	ldr	r0, [r0, #0]
 801151c:	4615      	mov	r5, r2
 801151e:	4698      	mov	r8, r3
 8011520:	f7f9 f818 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 8011524:	2800      	cmp	r0, #0
 8011526:	f000 80c4 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 801152a:	2d00      	cmp	r5, #0
 801152c:	f000 80c1 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 8011530:	782b      	ldrb	r3, [r5, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	f000 80bd 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 8011538:	f1b8 0f00 	cmp.w	r8, #0
 801153c:	f000 80b9 	beq.w	80116b2 <rmw_create_subscription+0x1ae>
 8011540:	485e      	ldr	r0, [pc, #376]	@ (80116bc <rmw_create_subscription+0x1b8>)
 8011542:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011546:	f7ff f9f3 	bl	8010930 <get_memory>
 801154a:	4604      	mov	r4, r0
 801154c:	2800      	cmp	r0, #0
 801154e:	f000 80b1 	beq.w	80116b4 <rmw_create_subscription+0x1b0>
 8011552:	6887      	ldr	r7, [r0, #8]
 8011554:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8011558:	f7ff fa52 	bl	8010a00 <rmw_get_implementation_identifier>
 801155c:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8011560:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011562:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8011566:	4628      	mov	r0, r5
 8011568:	f7ee fe44 	bl	80001f4 <strlen>
 801156c:	3001      	adds	r0, #1
 801156e:	283c      	cmp	r0, #60	@ 0x3c
 8011570:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8011574:	f200 8096 	bhi.w	80116a4 <rmw_create_subscription+0x1a0>
 8011578:	4a51      	ldr	r2, [pc, #324]	@ (80116c0 <rmw_create_subscription+0x1bc>)
 801157a:	462b      	mov	r3, r5
 801157c:	213c      	movs	r1, #60	@ 0x3c
 801157e:	4650      	mov	r0, sl
 8011580:	f002 fffc 	bl	801457c <sniprintf>
 8011584:	4641      	mov	r1, r8
 8011586:	f8c7 9020 	str.w	r9, [r7, #32]
 801158a:	2250      	movs	r2, #80	@ 0x50
 801158c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8011590:	f003 f997 	bl	80148c2 <memcpy>
 8011594:	494b      	ldr	r1, [pc, #300]	@ (80116c4 <rmw_create_subscription+0x1c0>)
 8011596:	4630      	mov	r0, r6
 8011598:	f7f8 ffea 	bl	800a570 <get_message_typesupport_handle>
 801159c:	2800      	cmp	r0, #0
 801159e:	f000 8081 	beq.w	80116a4 <rmw_create_subscription+0x1a0>
 80115a2:	6842      	ldr	r2, [r0, #4]
 80115a4:	61ba      	str	r2, [r7, #24]
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	d07c      	beq.n	80116a4 <rmw_create_subscription+0x1a0>
 80115aa:	4629      	mov	r1, r5
 80115ac:	4643      	mov	r3, r8
 80115ae:	4648      	mov	r0, r9
 80115b0:	f7ff fc8c 	bl	8010ecc <create_topic>
 80115b4:	61f8      	str	r0, [r7, #28]
 80115b6:	2800      	cmp	r0, #0
 80115b8:	d078      	beq.n	80116ac <rmw_create_subscription+0x1a8>
 80115ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80115be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80115c2:	2104      	movs	r1, #4
 80115c4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80115c8:	1c42      	adds	r2, r0, #1
 80115ca:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80115ce:	f7f9 fa41 	bl	800aa54 <uxr_object_id>
 80115d2:	6138      	str	r0, [r7, #16]
 80115d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80115d8:	2506      	movs	r5, #6
 80115da:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80115de:	9500      	str	r5, [sp, #0]
 80115e0:	6819      	ldr	r1, [r3, #0]
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80115e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80115ec:	f7f9 f914 	bl	800a818 <uxr_buffer_create_subscriber_bin>
 80115f0:	4602      	mov	r2, r0
 80115f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80115f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80115fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80115fe:	f7f8 ff29 	bl	800a454 <run_xrce_session>
 8011602:	2800      	cmp	r0, #0
 8011604:	d04e      	beq.n	80116a4 <rmw_create_subscription+0x1a0>
 8011606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801160a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801160e:	4629      	mov	r1, r5
 8011610:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011614:	1c42      	adds	r2, r0, #1
 8011616:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801161a:	f7f9 fa1b 	bl	800aa54 <uxr_object_id>
 801161e:	ae08      	add	r6, sp, #32
 8011620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	6178      	str	r0, [r7, #20]
 8011628:	4641      	mov	r1, r8
 801162a:	4630      	mov	r0, r6
 801162c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011630:	9305      	str	r3, [sp, #20]
 8011632:	f7f8 ff2b 	bl	800a48c <convert_qos_profile>
 8011636:	9503      	str	r5, [sp, #12]
 8011638:	e896 0003 	ldmia.w	r6, {r0, r1}
 801163c:	9b05      	ldr	r3, [sp, #20]
 801163e:	9001      	str	r0, [sp, #4]
 8011640:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801164c:	f8db 1000 	ldr.w	r1, [fp]
 8011650:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011654:	f7f9 f986 	bl	800a964 <uxr_buffer_create_datareader_bin>
 8011658:	4602      	mov	r2, r0
 801165a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801165e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011662:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011666:	f7f8 fef5 	bl	800a454 <run_xrce_session>
 801166a:	b1d8      	cbz	r0, 80116a4 <rmw_create_subscription+0x1a0>
 801166c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8011670:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011674:	2b02      	cmp	r3, #2
 8011676:	bf0c      	ite	eq
 8011678:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801167c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8011680:	9307      	str	r3, [sp, #28]
 8011682:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011686:	2200      	movs	r2, #0
 8011688:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801168c:	ab0a      	add	r3, sp, #40	@ 0x28
 801168e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	697a      	ldr	r2, [r7, #20]
 8011696:	9b07      	ldr	r3, [sp, #28]
 8011698:	6809      	ldr	r1, [r1, #0]
 801169a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801169e:	f001 fa39 	bl	8012b14 <uxr_buffer_request_data>
 80116a2:	e007      	b.n	80116b4 <rmw_create_subscription+0x1b0>
 80116a4:	69f8      	ldr	r0, [r7, #28]
 80116a6:	b108      	cbz	r0, 80116ac <rmw_create_subscription+0x1a8>
 80116a8:	f7f8 fdd2 	bl	800a250 <rmw_uxrce_fini_topic_memory>
 80116ac:	4620      	mov	r0, r4
 80116ae:	f7f8 fd8d 	bl	800a1cc <rmw_uxrce_fini_subscription_memory>
 80116b2:	2400      	movs	r4, #0
 80116b4:	4620      	mov	r0, r4
 80116b6:	b00d      	add	sp, #52	@ 0x34
 80116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116bc:	2000dae4 	.word	0x2000dae4
 80116c0:	08015a90 	.word	0x08015a90
 80116c4:	08015820 	.word	0x08015820

080116c8 <rmw_subscription_get_actual_qos>:
 80116c8:	b150      	cbz	r0, 80116e0 <rmw_subscription_get_actual_qos+0x18>
 80116ca:	b508      	push	{r3, lr}
 80116cc:	460b      	mov	r3, r1
 80116ce:	b149      	cbz	r1, 80116e4 <rmw_subscription_get_actual_qos+0x1c>
 80116d0:	6841      	ldr	r1, [r0, #4]
 80116d2:	2250      	movs	r2, #80	@ 0x50
 80116d4:	3128      	adds	r1, #40	@ 0x28
 80116d6:	4618      	mov	r0, r3
 80116d8:	f003 f8f3 	bl	80148c2 <memcpy>
 80116dc:	2000      	movs	r0, #0
 80116de:	bd08      	pop	{r3, pc}
 80116e0:	200b      	movs	r0, #11
 80116e2:	4770      	bx	lr
 80116e4:	200b      	movs	r0, #11
 80116e6:	bd08      	pop	{r3, pc}

080116e8 <rmw_destroy_subscription>:
 80116e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ea:	b128      	cbz	r0, 80116f8 <rmw_destroy_subscription+0x10>
 80116ec:	4604      	mov	r4, r0
 80116ee:	6800      	ldr	r0, [r0, #0]
 80116f0:	460d      	mov	r5, r1
 80116f2:	f7f8 ff2f 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 80116f6:	b910      	cbnz	r0, 80116fe <rmw_destroy_subscription+0x16>
 80116f8:	2401      	movs	r4, #1
 80116fa:	4620      	mov	r0, r4
 80116fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116fe:	6863      	ldr	r3, [r4, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d0f9      	beq.n	80116f8 <rmw_destroy_subscription+0x10>
 8011704:	2d00      	cmp	r5, #0
 8011706:	d0f7      	beq.n	80116f8 <rmw_destroy_subscription+0x10>
 8011708:	6828      	ldr	r0, [r5, #0]
 801170a:	f7f8 ff23 	bl	800a554 <is_uxrce_rmw_identifier_valid>
 801170e:	2800      	cmp	r0, #0
 8011710:	d0f2      	beq.n	80116f8 <rmw_destroy_subscription+0x10>
 8011712:	686c      	ldr	r4, [r5, #4]
 8011714:	2c00      	cmp	r4, #0
 8011716:	d0ef      	beq.n	80116f8 <rmw_destroy_subscription+0x10>
 8011718:	6a26      	ldr	r6, [r4, #32]
 801171a:	6962      	ldr	r2, [r4, #20]
 801171c:	6930      	ldr	r0, [r6, #16]
 801171e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011722:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011726:	6819      	ldr	r1, [r3, #0]
 8011728:	f001 fa2e 	bl	8012b88 <uxr_buffer_cancel_data>
 801172c:	4602      	mov	r2, r0
 801172e:	6930      	ldr	r0, [r6, #16]
 8011730:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011734:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011738:	f7f8 fe8c 	bl	800a454 <run_xrce_session>
 801173c:	69e0      	ldr	r0, [r4, #28]
 801173e:	f7ff fc15 	bl	8010f6c <destroy_topic>
 8011742:	6a23      	ldr	r3, [r4, #32]
 8011744:	6962      	ldr	r2, [r4, #20]
 8011746:	6918      	ldr	r0, [r3, #16]
 8011748:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801174c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011750:	6819      	ldr	r1, [r3, #0]
 8011752:	f7f8 ff7d 	bl	800a650 <uxr_buffer_delete_entity>
 8011756:	6a23      	ldr	r3, [r4, #32]
 8011758:	6922      	ldr	r2, [r4, #16]
 801175a:	691b      	ldr	r3, [r3, #16]
 801175c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011760:	4604      	mov	r4, r0
 8011762:	6809      	ldr	r1, [r1, #0]
 8011764:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011768:	f7f8 ff72 	bl	800a650 <uxr_buffer_delete_entity>
 801176c:	6937      	ldr	r7, [r6, #16]
 801176e:	4622      	mov	r2, r4
 8011770:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011774:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8011778:	4604      	mov	r4, r0
 801177a:	4638      	mov	r0, r7
 801177c:	f7f8 fe6a 	bl	800a454 <run_xrce_session>
 8011780:	6936      	ldr	r6, [r6, #16]
 8011782:	4622      	mov	r2, r4
 8011784:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011788:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801178c:	4604      	mov	r4, r0
 801178e:	4630      	mov	r0, r6
 8011790:	f7f8 fe60 	bl	800a454 <run_xrce_session>
 8011794:	b12c      	cbz	r4, 80117a2 <rmw_destroy_subscription+0xba>
 8011796:	b120      	cbz	r0, 80117a2 <rmw_destroy_subscription+0xba>
 8011798:	2400      	movs	r4, #0
 801179a:	4628      	mov	r0, r5
 801179c:	f7f8 fd16 	bl	800a1cc <rmw_uxrce_fini_subscription_memory>
 80117a0:	e7ab      	b.n	80116fa <rmw_destroy_subscription+0x12>
 80117a2:	2402      	movs	r4, #2
 80117a4:	e7f9      	b.n	801179a <rmw_destroy_subscription+0xb2>
 80117a6:	bf00      	nop

080117a8 <rmw_take_with_info>:
 80117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117aa:	4604      	mov	r4, r0
 80117ac:	6800      	ldr	r0, [r0, #0]
 80117ae:	b089      	sub	sp, #36	@ 0x24
 80117b0:	460f      	mov	r7, r1
 80117b2:	4615      	mov	r5, r2
 80117b4:	b128      	cbz	r0, 80117c2 <rmw_take_with_info+0x1a>
 80117b6:	4b24      	ldr	r3, [pc, #144]	@ (8011848 <rmw_take_with_info+0xa0>)
 80117b8:	6819      	ldr	r1, [r3, #0]
 80117ba:	f7ee fd11 	bl	80001e0 <strcmp>
 80117be:	2800      	cmp	r0, #0
 80117c0:	d13e      	bne.n	8011840 <rmw_take_with_info+0x98>
 80117c2:	b305      	cbz	r5, 8011806 <rmw_take_with_info+0x5e>
 80117c4:	6864      	ldr	r4, [r4, #4]
 80117c6:	2300      	movs	r3, #0
 80117c8:	702b      	strb	r3, [r5, #0]
 80117ca:	f7f8 fdc5 	bl	800a358 <rmw_uxrce_clean_expired_static_input_buffer>
 80117ce:	4620      	mov	r0, r4
 80117d0:	f7f8 fd9a 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 80117d4:	4606      	mov	r6, r0
 80117d6:	b1f0      	cbz	r0, 8011816 <rmw_take_with_info+0x6e>
 80117d8:	6881      	ldr	r1, [r0, #8]
 80117da:	4668      	mov	r0, sp
 80117dc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80117e0:	3110      	adds	r1, #16
 80117e2:	f7f7 f865 	bl	80088b0 <ucdr_init_buffer>
 80117e6:	69a3      	ldr	r3, [r4, #24]
 80117e8:	4639      	mov	r1, r7
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	4668      	mov	r0, sp
 80117ee:	4798      	blx	r3
 80117f0:	4631      	mov	r1, r6
 80117f2:	4604      	mov	r4, r0
 80117f4:	4815      	ldr	r0, [pc, #84]	@ (801184c <rmw_take_with_info+0xa4>)
 80117f6:	f7ff f8ab 	bl	8010950 <put_memory>
 80117fa:	702c      	strb	r4, [r5, #0]
 80117fc:	f084 0001 	eor.w	r0, r4, #1
 8011800:	b2c0      	uxtb	r0, r0
 8011802:	b009      	add	sp, #36	@ 0x24
 8011804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011806:	6864      	ldr	r4, [r4, #4]
 8011808:	f7f8 fda6 	bl	800a358 <rmw_uxrce_clean_expired_static_input_buffer>
 801180c:	4620      	mov	r0, r4
 801180e:	f7f8 fd7b 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011812:	4605      	mov	r5, r0
 8011814:	b910      	cbnz	r0, 801181c <rmw_take_with_info+0x74>
 8011816:	2001      	movs	r0, #1
 8011818:	b009      	add	sp, #36	@ 0x24
 801181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801181c:	68a9      	ldr	r1, [r5, #8]
 801181e:	4668      	mov	r0, sp
 8011820:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011824:	3110      	adds	r1, #16
 8011826:	f7f7 f843 	bl	80088b0 <ucdr_init_buffer>
 801182a:	69a3      	ldr	r3, [r4, #24]
 801182c:	4639      	mov	r1, r7
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	4668      	mov	r0, sp
 8011832:	4798      	blx	r3
 8011834:	4629      	mov	r1, r5
 8011836:	4604      	mov	r4, r0
 8011838:	4804      	ldr	r0, [pc, #16]	@ (801184c <rmw_take_with_info+0xa4>)
 801183a:	f7ff f889 	bl	8010950 <put_memory>
 801183e:	e7dd      	b.n	80117fc <rmw_take_with_info+0x54>
 8011840:	200c      	movs	r0, #12
 8011842:	b009      	add	sp, #36	@ 0x24
 8011844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011846:	bf00      	nop
 8011848:	0801607c 	.word	0x0801607c
 801184c:	2000dad4 	.word	0x2000dad4

08011850 <rmw_uxrce_transport_init>:
 8011850:	b508      	push	{r3, lr}
 8011852:	b108      	cbz	r0, 8011858 <rmw_uxrce_transport_init+0x8>
 8011854:	f100 0210 	add.w	r2, r0, #16
 8011858:	b139      	cbz	r1, 801186a <rmw_uxrce_transport_init+0x1a>
 801185a:	6949      	ldr	r1, [r1, #20]
 801185c:	4610      	mov	r0, r2
 801185e:	f000 fbd9 	bl	8012014 <uxr_init_custom_transport>
 8011862:	f080 0001 	eor.w	r0, r0, #1
 8011866:	b2c0      	uxtb	r0, r0
 8011868:	bd08      	pop	{r3, pc}
 801186a:	4b04      	ldr	r3, [pc, #16]	@ (801187c <rmw_uxrce_transport_init+0x2c>)
 801186c:	4610      	mov	r0, r2
 801186e:	6859      	ldr	r1, [r3, #4]
 8011870:	f000 fbd0 	bl	8012014 <uxr_init_custom_transport>
 8011874:	f080 0001 	eor.w	r0, r0, #1
 8011878:	b2c0      	uxtb	r0, r0
 801187a:	bd08      	pop	{r3, pc}
 801187c:	200091ac 	.word	0x200091ac

08011880 <rmw_wait>:
 8011880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011884:	b089      	sub	sp, #36	@ 0x24
 8011886:	4605      	mov	r5, r0
 8011888:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801188a:	460e      	mov	r6, r1
 801188c:	4698      	mov	r8, r3
 801188e:	4691      	mov	r9, r2
 8011890:	2a00      	cmp	r2, #0
 8011892:	f000 810a 	beq.w	8011aaa <rmw_wait+0x22a>
 8011896:	b16c      	cbz	r4, 80118b4 <rmw_wait+0x34>
 8011898:	4bae      	ldr	r3, [pc, #696]	@ (8011b54 <rmw_wait+0x2d4>)
 801189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801189c:	af04      	add	r7, sp, #16
 801189e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80118a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80118a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80118aa:	f7fe fe75 	bl	8010598 <rmw_time_equal>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	f000 8127 	beq.w	8011b02 <rmw_wait+0x282>
 80118b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80118b8:	f7f8 fd4e 	bl	800a358 <rmw_uxrce_clean_expired_static_input_buffer>
 80118bc:	4ba6      	ldr	r3, [pc, #664]	@ (8011b58 <rmw_wait+0x2d8>)
 80118be:	681c      	ldr	r4, [r3, #0]
 80118c0:	b14c      	cbz	r4, 80118d6 <rmw_wait+0x56>
 80118c2:	4623      	mov	r3, r4
 80118c4:	2100      	movs	r1, #0
 80118c6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80118ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80118ce:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1f7      	bne.n	80118c6 <rmw_wait+0x46>
 80118d6:	f1b9 0f00 	cmp.w	r9, #0
 80118da:	d011      	beq.n	8011900 <rmw_wait+0x80>
 80118dc:	f8d9 1000 	ldr.w	r1, [r9]
 80118e0:	b171      	cbz	r1, 8011900 <rmw_wait+0x80>
 80118e2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80118e6:	2300      	movs	r3, #0
 80118e8:	2001      	movs	r0, #1
 80118ea:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80118ee:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80118f0:	6912      	ldr	r2, [r2, #16]
 80118f2:	3301      	adds	r3, #1
 80118f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80118f8:	4299      	cmp	r1, r3
 80118fa:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80118fe:	d1f4      	bne.n	80118ea <rmw_wait+0x6a>
 8011900:	f1b8 0f00 	cmp.w	r8, #0
 8011904:	d011      	beq.n	801192a <rmw_wait+0xaa>
 8011906:	f8d8 1000 	ldr.w	r1, [r8]
 801190a:	b171      	cbz	r1, 801192a <rmw_wait+0xaa>
 801190c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8011910:	2300      	movs	r3, #0
 8011912:	2001      	movs	r0, #1
 8011914:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011918:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801191a:	6912      	ldr	r2, [r2, #16]
 801191c:	3301      	adds	r3, #1
 801191e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011922:	4299      	cmp	r1, r3
 8011924:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011928:	d1f4      	bne.n	8011914 <rmw_wait+0x94>
 801192a:	b185      	cbz	r5, 801194e <rmw_wait+0xce>
 801192c:	6829      	ldr	r1, [r5, #0]
 801192e:	b171      	cbz	r1, 801194e <rmw_wait+0xce>
 8011930:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011934:	2300      	movs	r3, #0
 8011936:	2001      	movs	r0, #1
 8011938:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801193c:	6a12      	ldr	r2, [r2, #32]
 801193e:	6912      	ldr	r2, [r2, #16]
 8011940:	3301      	adds	r3, #1
 8011942:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011946:	4299      	cmp	r1, r3
 8011948:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801194c:	d1f4      	bne.n	8011938 <rmw_wait+0xb8>
 801194e:	b34c      	cbz	r4, 80119a4 <rmw_wait+0x124>
 8011950:	4622      	mov	r2, r4
 8011952:	2300      	movs	r3, #0
 8011954:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8011958:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801195c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8011960:	440b      	add	r3, r1
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2a00      	cmp	r2, #0
 8011966:	d1f5      	bne.n	8011954 <rmw_wait+0xd4>
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 8084 	beq.w	8011a76 <rmw_wait+0x1f6>
 801196e:	1c7a      	adds	r2, r7, #1
 8011970:	d00d      	beq.n	801198e <rmw_wait+0x10e>
 8011972:	ee07 7a90 	vmov	s15, r7
 8011976:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801197a:	ee07 3a90 	vmov	s15, r3
 801197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011986:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801198a:	ee17 7a90 	vmov	r7, s15
 801198e:	68a0      	ldr	r0, [r4, #8]
 8011990:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8011994:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8011998:	2b00      	cmp	r3, #0
 801199a:	f040 8090 	bne.w	8011abe <rmw_wait+0x23e>
 801199e:	6864      	ldr	r4, [r4, #4]
 80119a0:	2c00      	cmp	r4, #0
 80119a2:	d1f4      	bne.n	801198e <rmw_wait+0x10e>
 80119a4:	f1b9 0f00 	cmp.w	r9, #0
 80119a8:	f000 80bc 	beq.w	8011b24 <rmw_wait+0x2a4>
 80119ac:	f8d9 7000 	ldr.w	r7, [r9]
 80119b0:	2f00      	cmp	r7, #0
 80119b2:	f000 808e 	beq.w	8011ad2 <rmw_wait+0x252>
 80119b6:	2400      	movs	r4, #0
 80119b8:	4627      	mov	r7, r4
 80119ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80119be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80119c2:	f7f8 fca1 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d05f      	beq.n	8011a8a <rmw_wait+0x20a>
 80119ca:	f8d9 3000 	ldr.w	r3, [r9]
 80119ce:	3401      	adds	r4, #1
 80119d0:	42a3      	cmp	r3, r4
 80119d2:	f04f 0701 	mov.w	r7, #1
 80119d6:	d8f0      	bhi.n	80119ba <rmw_wait+0x13a>
 80119d8:	f1b8 0f00 	cmp.w	r8, #0
 80119dc:	d012      	beq.n	8011a04 <rmw_wait+0x184>
 80119de:	f8d8 3000 	ldr.w	r3, [r8]
 80119e2:	b17b      	cbz	r3, 8011a04 <rmw_wait+0x184>
 80119e4:	2400      	movs	r4, #0
 80119e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80119ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80119ee:	f7f8 fc8b 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d051      	beq.n	8011a9a <rmw_wait+0x21a>
 80119f6:	f8d8 3000 	ldr.w	r3, [r8]
 80119fa:	3401      	adds	r4, #1
 80119fc:	42a3      	cmp	r3, r4
 80119fe:	f04f 0701 	mov.w	r7, #1
 8011a02:	d8f0      	bhi.n	80119e6 <rmw_wait+0x166>
 8011a04:	b1dd      	cbz	r5, 8011a3e <rmw_wait+0x1be>
 8011a06:	682b      	ldr	r3, [r5, #0]
 8011a08:	b1cb      	cbz	r3, 8011a3e <rmw_wait+0x1be>
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	686b      	ldr	r3, [r5, #4]
 8011a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a12:	f7f8 fc79 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a16:	b158      	cbz	r0, 8011a30 <rmw_wait+0x1b0>
 8011a18:	682b      	ldr	r3, [r5, #0]
 8011a1a:	3401      	adds	r4, #1
 8011a1c:	42a3      	cmp	r3, r4
 8011a1e:	d969      	bls.n	8011af4 <rmw_wait+0x274>
 8011a20:	686b      	ldr	r3, [r5, #4]
 8011a22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a26:	2701      	movs	r7, #1
 8011a28:	f7f8 fc6e 	bl	800a308 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d1f3      	bne.n	8011a18 <rmw_wait+0x198>
 8011a30:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011a34:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011a38:	3401      	adds	r4, #1
 8011a3a:	42a3      	cmp	r3, r4
 8011a3c:	d8e6      	bhi.n	8011a0c <rmw_wait+0x18c>
 8011a3e:	b1a6      	cbz	r6, 8011a6a <rmw_wait+0x1ea>
 8011a40:	6834      	ldr	r4, [r6, #0]
 8011a42:	b194      	cbz	r4, 8011a6a <rmw_wait+0x1ea>
 8011a44:	2300      	movs	r3, #0
 8011a46:	461d      	mov	r5, r3
 8011a48:	e004      	b.n	8011a54 <rmw_wait+0x1d4>
 8011a4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	42a3      	cmp	r3, r4
 8011a52:	d00a      	beq.n	8011a6a <rmw_wait+0x1ea>
 8011a54:	6870      	ldr	r0, [r6, #4]
 8011a56:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8011a5a:	7c0a      	ldrb	r2, [r1, #16]
 8011a5c:	2a00      	cmp	r2, #0
 8011a5e:	d0f4      	beq.n	8011a4a <rmw_wait+0x1ca>
 8011a60:	3301      	adds	r3, #1
 8011a62:	42a3      	cmp	r3, r4
 8011a64:	740d      	strb	r5, [r1, #16]
 8011a66:	4617      	mov	r7, r2
 8011a68:	d1f4      	bne.n	8011a54 <rmw_wait+0x1d4>
 8011a6a:	2f00      	cmp	r7, #0
 8011a6c:	d03e      	beq.n	8011aec <rmw_wait+0x26c>
 8011a6e:	2000      	movs	r0, #0
 8011a70:	b009      	add	sp, #36	@ 0x24
 8011a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a76:	68a0      	ldr	r0, [r4, #8]
 8011a78:	2100      	movs	r1, #0
 8011a7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a7e:	f7f9 fcbd 	bl	800b3fc <uxr_run_session_timeout>
 8011a82:	6864      	ldr	r4, [r4, #4]
 8011a84:	2c00      	cmp	r4, #0
 8011a86:	d1f6      	bne.n	8011a76 <rmw_wait+0x1f6>
 8011a88:	e78c      	b.n	80119a4 <rmw_wait+0x124>
 8011a8a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8011a8e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011a92:	3401      	adds	r4, #1
 8011a94:	42a3      	cmp	r3, r4
 8011a96:	d890      	bhi.n	80119ba <rmw_wait+0x13a>
 8011a98:	e79e      	b.n	80119d8 <rmw_wait+0x158>
 8011a9a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8011a9e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011aa2:	3401      	adds	r4, #1
 8011aa4:	429c      	cmp	r4, r3
 8011aa6:	d39e      	bcc.n	80119e6 <rmw_wait+0x166>
 8011aa8:	e7ac      	b.n	8011a04 <rmw_wait+0x184>
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f47f aef3 	bne.w	8011896 <rmw_wait+0x16>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f47f aef0 	bne.w	8011896 <rmw_wait+0x16>
 8011ab6:	2900      	cmp	r1, #0
 8011ab8:	f47f aeed 	bne.w	8011896 <rmw_wait+0x16>
 8011abc:	e7d7      	b.n	8011a6e <rmw_wait+0x1ee>
 8011abe:	4639      	mov	r1, r7
 8011ac0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ac4:	f7f9 fcb4 	bl	800b430 <uxr_run_session_until_data>
 8011ac8:	6864      	ldr	r4, [r4, #4]
 8011aca:	2c00      	cmp	r4, #0
 8011acc:	f47f af5f 	bne.w	801198e <rmw_wait+0x10e>
 8011ad0:	e768      	b.n	80119a4 <rmw_wait+0x124>
 8011ad2:	f1b8 0f00 	cmp.w	r8, #0
 8011ad6:	d032      	beq.n	8011b3e <rmw_wait+0x2be>
 8011ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d181      	bne.n	80119e4 <rmw_wait+0x164>
 8011ae0:	461f      	mov	r7, r3
 8011ae2:	2d00      	cmp	r5, #0
 8011ae4:	d18f      	bne.n	8011a06 <rmw_wait+0x186>
 8011ae6:	462f      	mov	r7, r5
 8011ae8:	2e00      	cmp	r6, #0
 8011aea:	d1a9      	bne.n	8011a40 <rmw_wait+0x1c0>
 8011aec:	2002      	movs	r0, #2
 8011aee:	b009      	add	sp, #36	@ 0x24
 8011af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011af4:	2e00      	cmp	r6, #0
 8011af6:	d0ba      	beq.n	8011a6e <rmw_wait+0x1ee>
 8011af8:	6834      	ldr	r4, [r6, #0]
 8011afa:	2701      	movs	r7, #1
 8011afc:	2c00      	cmp	r4, #0
 8011afe:	d1a1      	bne.n	8011a44 <rmw_wait+0x1c4>
 8011b00:	e7b5      	b.n	8011a6e <rmw_wait+0x1ee>
 8011b02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011b06:	f7fe fd9b 	bl	8010640 <rmw_time_total_nsec>
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	4a13      	ldr	r2, [pc, #76]	@ (8011b5c <rmw_wait+0x2dc>)
 8011b0e:	f7ee fddb 	bl	80006c8 <__aeabi_uldivmod>
 8011b12:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8011b16:	f171 0300 	sbcs.w	r3, r1, #0
 8011b1a:	4607      	mov	r7, r0
 8011b1c:	bfa8      	it	ge
 8011b1e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8011b22:	e6c9      	b.n	80118b8 <rmw_wait+0x38>
 8011b24:	f1b8 0f00 	cmp.w	r8, #0
 8011b28:	d009      	beq.n	8011b3e <rmw_wait+0x2be>
 8011b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b2e:	464f      	mov	r7, r9
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f47f af57 	bne.w	80119e4 <rmw_wait+0x164>
 8011b36:	2d00      	cmp	r5, #0
 8011b38:	f47f af65 	bne.w	8011a06 <rmw_wait+0x186>
 8011b3c:	e7d3      	b.n	8011ae6 <rmw_wait+0x266>
 8011b3e:	b17d      	cbz	r5, 8011b60 <rmw_wait+0x2e0>
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	4647      	mov	r7, r8
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f47f af60 	bne.w	8011a0a <rmw_wait+0x18a>
 8011b4a:	2e00      	cmp	r6, #0
 8011b4c:	f47f af78 	bne.w	8011a40 <rmw_wait+0x1c0>
 8011b50:	e7cc      	b.n	8011aec <rmw_wait+0x26c>
 8011b52:	bf00      	nop
 8011b54:	080156d8 	.word	0x080156d8
 8011b58:	2000dac4 	.word	0x2000dac4
 8011b5c:	000f4240 	.word	0x000f4240
 8011b60:	2e00      	cmp	r6, #0
 8011b62:	d0c3      	beq.n	8011aec <rmw_wait+0x26c>
 8011b64:	6834      	ldr	r4, [r6, #0]
 8011b66:	462f      	mov	r7, r5
 8011b68:	2c00      	cmp	r4, #0
 8011b6a:	f47f af6b 	bne.w	8011a44 <rmw_wait+0x1c4>
 8011b6e:	e7bd      	b.n	8011aec <rmw_wait+0x26c>

08011b70 <rmw_create_wait_set>:
 8011b70:	b508      	push	{r3, lr}
 8011b72:	4803      	ldr	r0, [pc, #12]	@ (8011b80 <rmw_create_wait_set+0x10>)
 8011b74:	f7fe fedc 	bl	8010930 <get_memory>
 8011b78:	b108      	cbz	r0, 8011b7e <rmw_create_wait_set+0xe>
 8011b7a:	6880      	ldr	r0, [r0, #8]
 8011b7c:	3010      	adds	r0, #16
 8011b7e:	bd08      	pop	{r3, pc}
 8011b80:	2000db04 	.word	0x2000db04

08011b84 <rmw_destroy_wait_set>:
 8011b84:	b508      	push	{r3, lr}
 8011b86:	4b08      	ldr	r3, [pc, #32]	@ (8011ba8 <rmw_destroy_wait_set+0x24>)
 8011b88:	6819      	ldr	r1, [r3, #0]
 8011b8a:	b911      	cbnz	r1, 8011b92 <rmw_destroy_wait_set+0xe>
 8011b8c:	e00a      	b.n	8011ba4 <rmw_destroy_wait_set+0x20>
 8011b8e:	6849      	ldr	r1, [r1, #4]
 8011b90:	b141      	cbz	r1, 8011ba4 <rmw_destroy_wait_set+0x20>
 8011b92:	688b      	ldr	r3, [r1, #8]
 8011b94:	3310      	adds	r3, #16
 8011b96:	4298      	cmp	r0, r3
 8011b98:	d1f9      	bne.n	8011b8e <rmw_destroy_wait_set+0xa>
 8011b9a:	4803      	ldr	r0, [pc, #12]	@ (8011ba8 <rmw_destroy_wait_set+0x24>)
 8011b9c:	f7fe fed8 	bl	8010950 <put_memory>
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	bd08      	pop	{r3, pc}
 8011ba4:	2001      	movs	r0, #1
 8011ba6:	bd08      	pop	{r3, pc}
 8011ba8:	2000db04 	.word	0x2000db04

08011bac <rmw_uros_epoch_nanos>:
 8011bac:	4b05      	ldr	r3, [pc, #20]	@ (8011bc4 <rmw_uros_epoch_nanos+0x18>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	b123      	cbz	r3, 8011bbc <rmw_uros_epoch_nanos+0x10>
 8011bb2:	6898      	ldr	r0, [r3, #8]
 8011bb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011bb8:	f7f9 b890 	b.w	800acdc <uxr_epoch_nanos>
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	2000dac4 	.word	0x2000dac4

08011bc8 <ucdr_serialize_endian_array_char>:
 8011bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bcc:	4619      	mov	r1, r3
 8011bce:	461f      	mov	r7, r3
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	4690      	mov	r8, r2
 8011bd4:	f7f6 fe18 	bl	8008808 <ucdr_check_buffer_available_for>
 8011bd8:	b9e0      	cbnz	r0, 8011c14 <ucdr_serialize_endian_array_char+0x4c>
 8011bda:	463e      	mov	r6, r7
 8011bdc:	e009      	b.n	8011bf2 <ucdr_serialize_endian_array_char+0x2a>
 8011bde:	68a8      	ldr	r0, [r5, #8]
 8011be0:	f002 fe6f 	bl	80148c2 <memcpy>
 8011be4:	68ab      	ldr	r3, [r5, #8]
 8011be6:	6928      	ldr	r0, [r5, #16]
 8011be8:	4423      	add	r3, r4
 8011bea:	4420      	add	r0, r4
 8011bec:	1b36      	subs	r6, r6, r4
 8011bee:	60ab      	str	r3, [r5, #8]
 8011bf0:	6128      	str	r0, [r5, #16]
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f7f6 fe8e 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011bfc:	1bb9      	subs	r1, r7, r6
 8011bfe:	4441      	add	r1, r8
 8011c00:	4604      	mov	r4, r0
 8011c02:	4602      	mov	r2, r0
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d1ea      	bne.n	8011bde <ucdr_serialize_endian_array_char+0x16>
 8011c08:	2301      	movs	r3, #1
 8011c0a:	7da8      	ldrb	r0, [r5, #22]
 8011c0c:	756b      	strb	r3, [r5, #21]
 8011c0e:	4058      	eors	r0, r3
 8011c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c14:	463a      	mov	r2, r7
 8011c16:	68a8      	ldr	r0, [r5, #8]
 8011c18:	4641      	mov	r1, r8
 8011c1a:	f002 fe52 	bl	80148c2 <memcpy>
 8011c1e:	68aa      	ldr	r2, [r5, #8]
 8011c20:	692b      	ldr	r3, [r5, #16]
 8011c22:	443a      	add	r2, r7
 8011c24:	443b      	add	r3, r7
 8011c26:	60aa      	str	r2, [r5, #8]
 8011c28:	612b      	str	r3, [r5, #16]
 8011c2a:	e7ed      	b.n	8011c08 <ucdr_serialize_endian_array_char+0x40>

08011c2c <ucdr_deserialize_endian_array_char>:
 8011c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c30:	4619      	mov	r1, r3
 8011c32:	461f      	mov	r7, r3
 8011c34:	4605      	mov	r5, r0
 8011c36:	4690      	mov	r8, r2
 8011c38:	f7f6 fde6 	bl	8008808 <ucdr_check_buffer_available_for>
 8011c3c:	b9e0      	cbnz	r0, 8011c78 <ucdr_deserialize_endian_array_char+0x4c>
 8011c3e:	463e      	mov	r6, r7
 8011c40:	e009      	b.n	8011c56 <ucdr_deserialize_endian_array_char+0x2a>
 8011c42:	68a9      	ldr	r1, [r5, #8]
 8011c44:	f002 fe3d 	bl	80148c2 <memcpy>
 8011c48:	68ab      	ldr	r3, [r5, #8]
 8011c4a:	6928      	ldr	r0, [r5, #16]
 8011c4c:	4423      	add	r3, r4
 8011c4e:	4420      	add	r0, r4
 8011c50:	1b36      	subs	r6, r6, r4
 8011c52:	60ab      	str	r3, [r5, #8]
 8011c54:	6128      	str	r0, [r5, #16]
 8011c56:	2201      	movs	r2, #1
 8011c58:	4631      	mov	r1, r6
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7f6 fe5c 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011c60:	4604      	mov	r4, r0
 8011c62:	1bb8      	subs	r0, r7, r6
 8011c64:	4440      	add	r0, r8
 8011c66:	4622      	mov	r2, r4
 8011c68:	2c00      	cmp	r4, #0
 8011c6a:	d1ea      	bne.n	8011c42 <ucdr_deserialize_endian_array_char+0x16>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	7da8      	ldrb	r0, [r5, #22]
 8011c70:	756b      	strb	r3, [r5, #21]
 8011c72:	4058      	eors	r0, r3
 8011c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c78:	463a      	mov	r2, r7
 8011c7a:	68a9      	ldr	r1, [r5, #8]
 8011c7c:	4640      	mov	r0, r8
 8011c7e:	f002 fe20 	bl	80148c2 <memcpy>
 8011c82:	68aa      	ldr	r2, [r5, #8]
 8011c84:	692b      	ldr	r3, [r5, #16]
 8011c86:	443a      	add	r2, r7
 8011c88:	443b      	add	r3, r7
 8011c8a:	60aa      	str	r2, [r5, #8]
 8011c8c:	612b      	str	r3, [r5, #16]
 8011c8e:	e7ed      	b.n	8011c6c <ucdr_deserialize_endian_array_char+0x40>

08011c90 <ucdr_serialize_array_uint8_t>:
 8011c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c94:	4688      	mov	r8, r1
 8011c96:	4611      	mov	r1, r2
 8011c98:	4617      	mov	r7, r2
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	f7f6 fdb4 	bl	8008808 <ucdr_check_buffer_available_for>
 8011ca0:	b9e0      	cbnz	r0, 8011cdc <ucdr_serialize_array_uint8_t+0x4c>
 8011ca2:	463e      	mov	r6, r7
 8011ca4:	e009      	b.n	8011cba <ucdr_serialize_array_uint8_t+0x2a>
 8011ca6:	68a8      	ldr	r0, [r5, #8]
 8011ca8:	f002 fe0b 	bl	80148c2 <memcpy>
 8011cac:	68aa      	ldr	r2, [r5, #8]
 8011cae:	692b      	ldr	r3, [r5, #16]
 8011cb0:	4422      	add	r2, r4
 8011cb2:	4423      	add	r3, r4
 8011cb4:	1b36      	subs	r6, r6, r4
 8011cb6:	60aa      	str	r2, [r5, #8]
 8011cb8:	612b      	str	r3, [r5, #16]
 8011cba:	4631      	mov	r1, r6
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	f7f6 fe2a 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011cc4:	1bb9      	subs	r1, r7, r6
 8011cc6:	4441      	add	r1, r8
 8011cc8:	4604      	mov	r4, r0
 8011cca:	4602      	mov	r2, r0
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d1ea      	bne.n	8011ca6 <ucdr_serialize_array_uint8_t+0x16>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	7da8      	ldrb	r0, [r5, #22]
 8011cd4:	756b      	strb	r3, [r5, #21]
 8011cd6:	4058      	eors	r0, r3
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	463a      	mov	r2, r7
 8011cde:	68a8      	ldr	r0, [r5, #8]
 8011ce0:	4641      	mov	r1, r8
 8011ce2:	f002 fdee 	bl	80148c2 <memcpy>
 8011ce6:	68aa      	ldr	r2, [r5, #8]
 8011ce8:	692b      	ldr	r3, [r5, #16]
 8011cea:	443a      	add	r2, r7
 8011cec:	443b      	add	r3, r7
 8011cee:	60aa      	str	r2, [r5, #8]
 8011cf0:	612b      	str	r3, [r5, #16]
 8011cf2:	e7ed      	b.n	8011cd0 <ucdr_serialize_array_uint8_t+0x40>

08011cf4 <ucdr_serialize_endian_array_uint8_t>:
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	461f      	mov	r7, r3
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	4690      	mov	r8, r2
 8011d00:	f7f6 fd82 	bl	8008808 <ucdr_check_buffer_available_for>
 8011d04:	b9e0      	cbnz	r0, 8011d40 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011d06:	463e      	mov	r6, r7
 8011d08:	e009      	b.n	8011d1e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011d0a:	68a8      	ldr	r0, [r5, #8]
 8011d0c:	f002 fdd9 	bl	80148c2 <memcpy>
 8011d10:	68ab      	ldr	r3, [r5, #8]
 8011d12:	6928      	ldr	r0, [r5, #16]
 8011d14:	4423      	add	r3, r4
 8011d16:	4420      	add	r0, r4
 8011d18:	1b36      	subs	r6, r6, r4
 8011d1a:	60ab      	str	r3, [r5, #8]
 8011d1c:	6128      	str	r0, [r5, #16]
 8011d1e:	4631      	mov	r1, r6
 8011d20:	2201      	movs	r2, #1
 8011d22:	4628      	mov	r0, r5
 8011d24:	f7f6 fdf8 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011d28:	1bb9      	subs	r1, r7, r6
 8011d2a:	4441      	add	r1, r8
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	4602      	mov	r2, r0
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d1ea      	bne.n	8011d0a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011d34:	2301      	movs	r3, #1
 8011d36:	7da8      	ldrb	r0, [r5, #22]
 8011d38:	756b      	strb	r3, [r5, #21]
 8011d3a:	4058      	eors	r0, r3
 8011d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d40:	463a      	mov	r2, r7
 8011d42:	68a8      	ldr	r0, [r5, #8]
 8011d44:	4641      	mov	r1, r8
 8011d46:	f002 fdbc 	bl	80148c2 <memcpy>
 8011d4a:	68aa      	ldr	r2, [r5, #8]
 8011d4c:	692b      	ldr	r3, [r5, #16]
 8011d4e:	443a      	add	r2, r7
 8011d50:	443b      	add	r3, r7
 8011d52:	60aa      	str	r2, [r5, #8]
 8011d54:	612b      	str	r3, [r5, #16]
 8011d56:	e7ed      	b.n	8011d34 <ucdr_serialize_endian_array_uint8_t+0x40>

08011d58 <ucdr_deserialize_array_uint8_t>:
 8011d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5c:	4688      	mov	r8, r1
 8011d5e:	4611      	mov	r1, r2
 8011d60:	4617      	mov	r7, r2
 8011d62:	4605      	mov	r5, r0
 8011d64:	f7f6 fd50 	bl	8008808 <ucdr_check_buffer_available_for>
 8011d68:	b9e0      	cbnz	r0, 8011da4 <ucdr_deserialize_array_uint8_t+0x4c>
 8011d6a:	463e      	mov	r6, r7
 8011d6c:	e009      	b.n	8011d82 <ucdr_deserialize_array_uint8_t+0x2a>
 8011d6e:	68a9      	ldr	r1, [r5, #8]
 8011d70:	f002 fda7 	bl	80148c2 <memcpy>
 8011d74:	68aa      	ldr	r2, [r5, #8]
 8011d76:	692b      	ldr	r3, [r5, #16]
 8011d78:	4422      	add	r2, r4
 8011d7a:	4423      	add	r3, r4
 8011d7c:	1b36      	subs	r6, r6, r4
 8011d7e:	60aa      	str	r2, [r5, #8]
 8011d80:	612b      	str	r3, [r5, #16]
 8011d82:	2201      	movs	r2, #1
 8011d84:	4631      	mov	r1, r6
 8011d86:	4628      	mov	r0, r5
 8011d88:	f7f6 fdc6 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	1bb8      	subs	r0, r7, r6
 8011d90:	4440      	add	r0, r8
 8011d92:	4622      	mov	r2, r4
 8011d94:	2c00      	cmp	r4, #0
 8011d96:	d1ea      	bne.n	8011d6e <ucdr_deserialize_array_uint8_t+0x16>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	7da8      	ldrb	r0, [r5, #22]
 8011d9c:	756b      	strb	r3, [r5, #21]
 8011d9e:	4058      	eors	r0, r3
 8011da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da4:	463a      	mov	r2, r7
 8011da6:	68a9      	ldr	r1, [r5, #8]
 8011da8:	4640      	mov	r0, r8
 8011daa:	f002 fd8a 	bl	80148c2 <memcpy>
 8011dae:	68aa      	ldr	r2, [r5, #8]
 8011db0:	692b      	ldr	r3, [r5, #16]
 8011db2:	443a      	add	r2, r7
 8011db4:	443b      	add	r3, r7
 8011db6:	60aa      	str	r2, [r5, #8]
 8011db8:	612b      	str	r3, [r5, #16]
 8011dba:	e7ed      	b.n	8011d98 <ucdr_deserialize_array_uint8_t+0x40>

08011dbc <ucdr_deserialize_endian_array_uint8_t>:
 8011dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	461f      	mov	r7, r3
 8011dc4:	4605      	mov	r5, r0
 8011dc6:	4690      	mov	r8, r2
 8011dc8:	f7f6 fd1e 	bl	8008808 <ucdr_check_buffer_available_for>
 8011dcc:	b9e0      	cbnz	r0, 8011e08 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011dce:	463e      	mov	r6, r7
 8011dd0:	e009      	b.n	8011de6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8011dd2:	68a9      	ldr	r1, [r5, #8]
 8011dd4:	f002 fd75 	bl	80148c2 <memcpy>
 8011dd8:	68ab      	ldr	r3, [r5, #8]
 8011dda:	6928      	ldr	r0, [r5, #16]
 8011ddc:	4423      	add	r3, r4
 8011dde:	4420      	add	r0, r4
 8011de0:	1b36      	subs	r6, r6, r4
 8011de2:	60ab      	str	r3, [r5, #8]
 8011de4:	6128      	str	r0, [r5, #16]
 8011de6:	2201      	movs	r2, #1
 8011de8:	4631      	mov	r1, r6
 8011dea:	4628      	mov	r0, r5
 8011dec:	f7f6 fd94 	bl	8008918 <ucdr_check_final_buffer_behavior_array>
 8011df0:	4604      	mov	r4, r0
 8011df2:	1bb8      	subs	r0, r7, r6
 8011df4:	4440      	add	r0, r8
 8011df6:	4622      	mov	r2, r4
 8011df8:	2c00      	cmp	r4, #0
 8011dfa:	d1ea      	bne.n	8011dd2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	7da8      	ldrb	r0, [r5, #22]
 8011e00:	756b      	strb	r3, [r5, #21]
 8011e02:	4058      	eors	r0, r3
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	463a      	mov	r2, r7
 8011e0a:	68a9      	ldr	r1, [r5, #8]
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	f002 fd58 	bl	80148c2 <memcpy>
 8011e12:	68aa      	ldr	r2, [r5, #8]
 8011e14:	692b      	ldr	r3, [r5, #16]
 8011e16:	443a      	add	r2, r7
 8011e18:	443b      	add	r3, r7
 8011e1a:	60aa      	str	r2, [r5, #8]
 8011e1c:	612b      	str	r3, [r5, #16]
 8011e1e:	e7ed      	b.n	8011dfc <ucdr_deserialize_endian_array_uint8_t+0x40>

08011e20 <ucdr_serialize_sequence_char>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	4615      	mov	r5, r2
 8011e24:	460e      	mov	r6, r1
 8011e26:	7d01      	ldrb	r1, [r0, #20]
 8011e28:	4604      	mov	r4, r0
 8011e2a:	f7f5 fead 	bl	8007b88 <ucdr_serialize_endian_uint32_t>
 8011e2e:	b90d      	cbnz	r5, 8011e34 <ucdr_serialize_sequence_char+0x14>
 8011e30:	2001      	movs	r0, #1
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	7d21      	ldrb	r1, [r4, #20]
 8011e36:	462b      	mov	r3, r5
 8011e38:	4632      	mov	r2, r6
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e40:	f7ff bec2 	b.w	8011bc8 <ucdr_serialize_endian_array_char>

08011e44 <ucdr_deserialize_sequence_char>:
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	461d      	mov	r5, r3
 8011e4a:	4616      	mov	r6, r2
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	461a      	mov	r2, r3
 8011e50:	7d01      	ldrb	r1, [r0, #20]
 8011e52:	4604      	mov	r4, r0
 8011e54:	f7f5 ffc0 	bl	8007dd8 <ucdr_deserialize_endian_uint32_t>
 8011e58:	682b      	ldr	r3, [r5, #0]
 8011e5a:	429e      	cmp	r6, r3
 8011e5c:	bf3c      	itt	cc
 8011e5e:	2201      	movcc	r2, #1
 8011e60:	75a2      	strbcc	r2, [r4, #22]
 8011e62:	b913      	cbnz	r3, 8011e6a <ucdr_deserialize_sequence_char+0x26>
 8011e64:	2001      	movs	r0, #1
 8011e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e6a:	7d21      	ldrb	r1, [r4, #20]
 8011e6c:	463a      	mov	r2, r7
 8011e6e:	4620      	mov	r0, r4
 8011e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e74:	f7ff beda 	b.w	8011c2c <ucdr_deserialize_endian_array_char>

08011e78 <ucdr_serialize_sequence_uint8_t>:
 8011e78:	b570      	push	{r4, r5, r6, lr}
 8011e7a:	4615      	mov	r5, r2
 8011e7c:	460e      	mov	r6, r1
 8011e7e:	7d01      	ldrb	r1, [r0, #20]
 8011e80:	4604      	mov	r4, r0
 8011e82:	f7f5 fe81 	bl	8007b88 <ucdr_serialize_endian_uint32_t>
 8011e86:	b90d      	cbnz	r5, 8011e8c <ucdr_serialize_sequence_uint8_t+0x14>
 8011e88:	2001      	movs	r0, #1
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	7d21      	ldrb	r1, [r4, #20]
 8011e8e:	462b      	mov	r3, r5
 8011e90:	4632      	mov	r2, r6
 8011e92:	4620      	mov	r0, r4
 8011e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e98:	f7ff bf2c 	b.w	8011cf4 <ucdr_serialize_endian_array_uint8_t>

08011e9c <ucdr_deserialize_sequence_uint8_t>:
 8011e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea0:	461d      	mov	r5, r3
 8011ea2:	4616      	mov	r6, r2
 8011ea4:	460f      	mov	r7, r1
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	7d01      	ldrb	r1, [r0, #20]
 8011eaa:	4604      	mov	r4, r0
 8011eac:	f7f5 ff94 	bl	8007dd8 <ucdr_deserialize_endian_uint32_t>
 8011eb0:	682b      	ldr	r3, [r5, #0]
 8011eb2:	429e      	cmp	r6, r3
 8011eb4:	bf3c      	itt	cc
 8011eb6:	2201      	movcc	r2, #1
 8011eb8:	75a2      	strbcc	r2, [r4, #22]
 8011eba:	b913      	cbnz	r3, 8011ec2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec2:	7d21      	ldrb	r1, [r4, #20]
 8011ec4:	463a      	mov	r2, r7
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	f7ff bf76 	b.w	8011dbc <ucdr_deserialize_endian_array_uint8_t>

08011ed0 <ucdr_serialize_string>:
 8011ed0:	b510      	push	{r4, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	4608      	mov	r0, r1
 8011ed8:	9101      	str	r1, [sp, #4]
 8011eda:	f7ee f98b 	bl	80001f4 <strlen>
 8011ede:	9901      	ldr	r1, [sp, #4]
 8011ee0:	1c42      	adds	r2, r0, #1
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	b002      	add	sp, #8
 8011ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011eea:	f7ff bf99 	b.w	8011e20 <ucdr_serialize_sequence_char>
 8011eee:	bf00      	nop

08011ef0 <ucdr_deserialize_string>:
 8011ef0:	b500      	push	{lr}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	ab01      	add	r3, sp, #4
 8011ef6:	f7ff ffa5 	bl	8011e44 <ucdr_deserialize_sequence_char>
 8011efa:	b003      	add	sp, #12
 8011efc:	f85d fb04 	ldr.w	pc, [sp], #4

08011f00 <get_custom_error>:
 8011f00:	4b01      	ldr	r3, [pc, #4]	@ (8011f08 <get_custom_error+0x8>)
 8011f02:	7818      	ldrb	r0, [r3, #0]
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	2000dc80 	.word	0x2000dc80

08011f0c <recv_custom_msg>:
 8011f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f10:	4693      	mov	fp, r2
 8011f12:	b089      	sub	sp, #36	@ 0x24
 8011f14:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011f18:	9305      	str	r3, [sp, #20]
 8011f1a:	468a      	mov	sl, r1
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	4604      	mov	r4, r0
 8011f20:	f88d 101e 	strb.w	r1, [sp, #30]
 8011f24:	b322      	cbz	r2, 8011f70 <recv_custom_msg+0x64>
 8011f26:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8011f2a:	f10d 081f 	add.w	r8, sp, #31
 8011f2e:	af05      	add	r7, sp, #20
 8011f30:	f10d 061e 	add.w	r6, sp, #30
 8011f34:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011f38:	e002      	b.n	8011f40 <recv_custom_msg+0x34>
 8011f3a:	9b05      	ldr	r3, [sp, #20]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	dd0f      	ble.n	8011f60 <recv_custom_msg+0x54>
 8011f40:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8011f44:	4623      	mov	r3, r4
 8011f46:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011f4a:	e9cd 5600 	strd	r5, r6, [sp]
 8011f4e:	4622      	mov	r2, r4
 8011f50:	4648      	mov	r0, r9
 8011f52:	f001 f92d 	bl	80131b0 <uxr_read_framed_msg>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d0ef      	beq.n	8011f3a <recv_custom_msg+0x2e>
 8011f5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011f5e:	b1b3      	cbz	r3, 8011f8e <recv_custom_msg+0x82>
 8011f60:	4b0f      	ldr	r3, [pc, #60]	@ (8011fa0 <recv_custom_msg+0x94>)
 8011f62:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011f66:	701a      	strb	r2, [r3, #0]
 8011f68:	2000      	movs	r0, #0
 8011f6a:	b009      	add	sp, #36	@ 0x24
 8011f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f70:	f10d 021f 	add.w	r2, sp, #31
 8011f74:	9200      	str	r2, [sp, #0]
 8011f76:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f7e:	4601      	mov	r1, r0
 8011f80:	47a8      	blx	r5
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d0ec      	beq.n	8011f60 <recv_custom_msg+0x54>
 8011f86:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1e8      	bne.n	8011f60 <recv_custom_msg+0x54>
 8011f8e:	f8cb 0000 	str.w	r0, [fp]
 8011f92:	2001      	movs	r0, #1
 8011f94:	f8ca 4000 	str.w	r4, [sl]
 8011f98:	b009      	add	sp, #36	@ 0x24
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	bf00      	nop
 8011fa0:	2000dc80 	.word	0x2000dc80

08011fa4 <send_custom_msg>:
 8011fa4:	b530      	push	{r4, r5, lr}
 8011fa6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8011faa:	b087      	sub	sp, #28
 8011fac:	4615      	mov	r5, r2
 8011fae:	b974      	cbnz	r4, 8011fce <send_custom_msg+0x2a>
 8011fb0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8011fb4:	f10d 0317 	add.w	r3, sp, #23
 8011fb8:	47a0      	blx	r4
 8011fba:	b108      	cbz	r0, 8011fc0 <send_custom_msg+0x1c>
 8011fbc:	42a8      	cmp	r0, r5
 8011fbe:	d015      	beq.n	8011fec <send_custom_msg+0x48>
 8011fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ff4 <send_custom_msg+0x50>)
 8011fc2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011fc6:	701a      	strb	r2, [r3, #0]
 8011fc8:	2000      	movs	r0, #0
 8011fca:	b007      	add	sp, #28
 8011fcc:	bd30      	pop	{r4, r5, pc}
 8011fce:	460b      	mov	r3, r1
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f10d 0117 	add.w	r1, sp, #23
 8011fd6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011fda:	4602      	mov	r2, r0
 8011fdc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011fe0:	9500      	str	r5, [sp, #0]
 8011fe2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8011fe6:	f000 feeb 	bl	8012dc0 <uxr_write_framed_msg>
 8011fea:	e7e6      	b.n	8011fba <send_custom_msg+0x16>
 8011fec:	2001      	movs	r0, #1
 8011fee:	b007      	add	sp, #28
 8011ff0:	bd30      	pop	{r4, r5, pc}
 8011ff2:	bf00      	nop
 8011ff4:	2000dc80 	.word	0x2000dc80

08011ff8 <uxr_set_custom_transport_callbacks>:
 8011ff8:	b410      	push	{r4}
 8011ffa:	9c01      	ldr	r4, [sp, #4]
 8011ffc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8012000:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8012004:	9b02      	ldr	r3, [sp, #8]
 8012006:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801200a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801200e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8012012:	4770      	bx	lr

08012014 <uxr_init_custom_transport>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801201a:	b303      	cbz	r3, 801205e <uxr_init_custom_transport+0x4a>
 801201c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8012020:	4604      	mov	r4, r0
 8012022:	b1e2      	cbz	r2, 801205e <uxr_init_custom_transport+0x4a>
 8012024:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8012028:	b1ca      	cbz	r2, 801205e <uxr_init_custom_transport+0x4a>
 801202a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801202e:	b1b2      	cbz	r2, 801205e <uxr_init_custom_transport+0x4a>
 8012030:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012034:	4798      	blx	r3
 8012036:	4605      	mov	r5, r0
 8012038:	b188      	cbz	r0, 801205e <uxr_init_custom_transport+0x4a>
 801203a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801203e:	b98b      	cbnz	r3, 8012064 <uxr_init_custom_transport+0x50>
 8012040:	490b      	ldr	r1, [pc, #44]	@ (8012070 <uxr_init_custom_transport+0x5c>)
 8012042:	4b0c      	ldr	r3, [pc, #48]	@ (8012074 <uxr_init_custom_transport+0x60>)
 8012044:	4a0c      	ldr	r2, [pc, #48]	@ (8012078 <uxr_init_custom_transport+0x64>)
 8012046:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801204a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801204e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012052:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012056:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801205a:	4628      	mov	r0, r5
 801205c:	bd38      	pop	{r3, r4, r5, pc}
 801205e:	2500      	movs	r5, #0
 8012060:	4628      	mov	r0, r5
 8012062:	bd38      	pop	{r3, r4, r5, pc}
 8012064:	2100      	movs	r1, #0
 8012066:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801206a:	f000 fea3 	bl	8012db4 <uxr_init_framing_io>
 801206e:	e7e7      	b.n	8012040 <uxr_init_custom_transport+0x2c>
 8012070:	08011fa5 	.word	0x08011fa5
 8012074:	08011f0d 	.word	0x08011f0d
 8012078:	08011f01 	.word	0x08011f01

0801207c <uxr_close_custom_transport>:
 801207c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8012080:	4718      	bx	r3
 8012082:	bf00      	nop

08012084 <uxr_init_input_best_effort_stream>:
 8012084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012088:	8003      	strh	r3, [r0, #0]
 801208a:	4770      	bx	lr

0801208c <uxr_reset_input_best_effort_stream>:
 801208c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012090:	8003      	strh	r3, [r0, #0]
 8012092:	4770      	bx	lr

08012094 <uxr_receive_best_effort_message>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4604      	mov	r4, r0
 8012098:	8800      	ldrh	r0, [r0, #0]
 801209a:	460d      	mov	r5, r1
 801209c:	f000 fe72 	bl	8012d84 <uxr_seq_num_cmp>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80120a8:	bfb8      	it	lt
 80120aa:	8025      	strhlt	r5, [r4, #0]
 80120ac:	bd38      	pop	{r3, r4, r5, pc}
 80120ae:	bf00      	nop

080120b0 <on_full_input_buffer>:
 80120b0:	b570      	push	{r4, r5, r6, lr}
 80120b2:	4605      	mov	r5, r0
 80120b4:	460c      	mov	r4, r1
 80120b6:	682b      	ldr	r3, [r5, #0]
 80120b8:	6809      	ldr	r1, [r1, #0]
 80120ba:	8920      	ldrh	r0, [r4, #8]
 80120bc:	6862      	ldr	r2, [r4, #4]
 80120be:	fbb2 f2f0 	udiv	r2, r2, r0
 80120c2:	eba3 0c01 	sub.w	ip, r3, r1
 80120c6:	fbbc fcf2 	udiv	ip, ip, r2
 80120ca:	f10c 0c01 	add.w	ip, ip, #1
 80120ce:	fa1f f38c 	uxth.w	r3, ip
 80120d2:	fbb3 f6f0 	udiv	r6, r3, r0
 80120d6:	fb00 3316 	mls	r3, r0, r6, r3
 80120da:	b29b      	uxth	r3, r3
 80120dc:	fb02 f303 	mul.w	r3, r2, r3
 80120e0:	1d18      	adds	r0, r3, #4
 80120e2:	4408      	add	r0, r1
 80120e4:	7d26      	ldrb	r6, [r4, #20]
 80120e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80120ea:	b116      	cbz	r6, 80120f2 <on_full_input_buffer+0x42>
 80120ec:	2600      	movs	r6, #0
 80120ee:	f840 6c04 	str.w	r6, [r0, #-4]
 80120f2:	2a03      	cmp	r2, #3
 80120f4:	d801      	bhi.n	80120fa <on_full_input_buffer+0x4a>
 80120f6:	2001      	movs	r0, #1
 80120f8:	bd70      	pop	{r4, r5, r6, pc}
 80120fa:	3308      	adds	r3, #8
 80120fc:	4419      	add	r1, r3
 80120fe:	4628      	mov	r0, r5
 8012100:	692b      	ldr	r3, [r5, #16]
 8012102:	3a04      	subs	r2, #4
 8012104:	f7f6 fbcc 	bl	80088a0 <ucdr_init_buffer_origin>
 8012108:	4628      	mov	r0, r5
 801210a:	4903      	ldr	r1, [pc, #12]	@ (8012118 <on_full_input_buffer+0x68>)
 801210c:	4622      	mov	r2, r4
 801210e:	f7f6 fba3 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012112:	2000      	movs	r0, #0
 8012114:	bd70      	pop	{r4, r5, r6, pc}
 8012116:	bf00      	nop
 8012118:	080120b1 	.word	0x080120b1

0801211c <uxr_init_input_reliable_stream>:
 801211c:	b500      	push	{lr}
 801211e:	e9c0 1200 	strd	r1, r2, [r0]
 8012122:	f04f 0e00 	mov.w	lr, #0
 8012126:	9a01      	ldr	r2, [sp, #4]
 8012128:	8103      	strh	r3, [r0, #8]
 801212a:	6102      	str	r2, [r0, #16]
 801212c:	f880 e014 	strb.w	lr, [r0, #20]
 8012130:	b1d3      	cbz	r3, 8012168 <uxr_init_input_reliable_stream+0x4c>
 8012132:	f8c1 e000 	str.w	lr, [r1]
 8012136:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801213a:	f1bc 0f01 	cmp.w	ip, #1
 801213e:	d913      	bls.n	8012168 <uxr_init_input_reliable_stream+0x4c>
 8012140:	2301      	movs	r3, #1
 8012142:	fbb3 f1fc 	udiv	r1, r3, ip
 8012146:	fb0c 3111 	mls	r1, ip, r1, r3
 801214a:	b289      	uxth	r1, r1
 801214c:	6842      	ldr	r2, [r0, #4]
 801214e:	fbb2 f2fc 	udiv	r2, r2, ip
 8012152:	fb01 f202 	mul.w	r2, r1, r2
 8012156:	6801      	ldr	r1, [r0, #0]
 8012158:	f841 e002 	str.w	lr, [r1, r2]
 801215c:	3301      	adds	r3, #1
 801215e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012162:	b29b      	uxth	r3, r3
 8012164:	459c      	cmp	ip, r3
 8012166:	d8ec      	bhi.n	8012142 <uxr_init_input_reliable_stream+0x26>
 8012168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801216c:	60c3      	str	r3, [r0, #12]
 801216e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012172:	bf00      	nop

08012174 <uxr_reset_input_reliable_stream>:
 8012174:	8901      	ldrh	r1, [r0, #8]
 8012176:	b1e9      	cbz	r1, 80121b4 <uxr_reset_input_reliable_stream+0x40>
 8012178:	f04f 0c00 	mov.w	ip, #0
 801217c:	b500      	push	{lr}
 801217e:	4663      	mov	r3, ip
 8012180:	46e6      	mov	lr, ip
 8012182:	fbb3 f2f1 	udiv	r2, r3, r1
 8012186:	fb01 3312 	mls	r3, r1, r2, r3
 801218a:	b29b      	uxth	r3, r3
 801218c:	6842      	ldr	r2, [r0, #4]
 801218e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012192:	fb02 f303 	mul.w	r3, r2, r3
 8012196:	6802      	ldr	r2, [r0, #0]
 8012198:	f842 e003 	str.w	lr, [r2, r3]
 801219c:	f10c 0c01 	add.w	ip, ip, #1
 80121a0:	8901      	ldrh	r1, [r0, #8]
 80121a2:	fa1f f38c 	uxth.w	r3, ip
 80121a6:	4299      	cmp	r1, r3
 80121a8:	d8eb      	bhi.n	8012182 <uxr_reset_input_reliable_stream+0xe>
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121ae:	60c3      	str	r3, [r0, #12]
 80121b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80121b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121b8:	60c3      	str	r3, [r0, #12]
 80121ba:	4770      	bx	lr

080121bc <uxr_receive_reliable_message>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	4604      	mov	r4, r0
 80121c2:	460d      	mov	r5, r1
 80121c4:	8901      	ldrh	r1, [r0, #8]
 80121c6:	8980      	ldrh	r0, [r0, #12]
 80121c8:	4690      	mov	r8, r2
 80121ca:	461f      	mov	r7, r3
 80121cc:	f000 fdd2 	bl	8012d74 <uxr_seq_num_add>
 80121d0:	4629      	mov	r1, r5
 80121d2:	4606      	mov	r6, r0
 80121d4:	89a0      	ldrh	r0, [r4, #12]
 80121d6:	f000 fdd5 	bl	8012d84 <uxr_seq_num_cmp>
 80121da:	2800      	cmp	r0, #0
 80121dc:	db0a      	blt.n	80121f4 <uxr_receive_reliable_message+0x38>
 80121de:	2600      	movs	r6, #0
 80121e0:	89e0      	ldrh	r0, [r4, #14]
 80121e2:	4629      	mov	r1, r5
 80121e4:	f000 fdce 	bl	8012d84 <uxr_seq_num_cmp>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	da00      	bge.n	80121ee <uxr_receive_reliable_message+0x32>
 80121ec:	81e5      	strh	r5, [r4, #14]
 80121ee:	4630      	mov	r0, r6
 80121f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121f4:	4630      	mov	r0, r6
 80121f6:	4629      	mov	r1, r5
 80121f8:	f000 fdc4 	bl	8012d84 <uxr_seq_num_cmp>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	dbee      	blt.n	80121de <uxr_receive_reliable_message+0x22>
 8012200:	6923      	ldr	r3, [r4, #16]
 8012202:	4640      	mov	r0, r8
 8012204:	4798      	blx	r3
 8012206:	2101      	movs	r1, #1
 8012208:	4681      	mov	r9, r0
 801220a:	89a0      	ldrh	r0, [r4, #12]
 801220c:	f000 fdb2 	bl	8012d74 <uxr_seq_num_add>
 8012210:	f1b9 0f00 	cmp.w	r9, #0
 8012214:	d101      	bne.n	801221a <uxr_receive_reliable_message+0x5e>
 8012216:	4285      	cmp	r5, r0
 8012218:	d047      	beq.n	80122aa <uxr_receive_reliable_message+0xee>
 801221a:	8922      	ldrh	r2, [r4, #8]
 801221c:	fbb5 f0f2 	udiv	r0, r5, r2
 8012220:	fb02 5010 	mls	r0, r2, r0, r5
 8012224:	b280      	uxth	r0, r0
 8012226:	6863      	ldr	r3, [r4, #4]
 8012228:	fbb3 f3f2 	udiv	r3, r3, r2
 801222c:	fb00 f303 	mul.w	r3, r0, r3
 8012230:	6820      	ldr	r0, [r4, #0]
 8012232:	3304      	adds	r3, #4
 8012234:	4418      	add	r0, r3
 8012236:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d1cf      	bne.n	80121de <uxr_receive_reliable_message+0x22>
 801223e:	4641      	mov	r1, r8
 8012240:	463a      	mov	r2, r7
 8012242:	f002 fb3e 	bl	80148c2 <memcpy>
 8012246:	8921      	ldrh	r1, [r4, #8]
 8012248:	fbb5 f2f1 	udiv	r2, r5, r1
 801224c:	fb01 5212 	mls	r2, r1, r2, r5
 8012250:	b292      	uxth	r2, r2
 8012252:	6863      	ldr	r3, [r4, #4]
 8012254:	fbb3 f3f1 	udiv	r3, r3, r1
 8012258:	fb02 f303 	mul.w	r3, r2, r3
 801225c:	6822      	ldr	r2, [r4, #0]
 801225e:	50d7      	str	r7, [r2, r3]
 8012260:	9a08      	ldr	r2, [sp, #32]
 8012262:	2301      	movs	r3, #1
 8012264:	7013      	strb	r3, [r2, #0]
 8012266:	f1b9 0f00 	cmp.w	r9, #0
 801226a:	d0b8      	beq.n	80121de <uxr_receive_reliable_message+0x22>
 801226c:	89a6      	ldrh	r6, [r4, #12]
 801226e:	4630      	mov	r0, r6
 8012270:	2101      	movs	r1, #1
 8012272:	f000 fd7f 	bl	8012d74 <uxr_seq_num_add>
 8012276:	8922      	ldrh	r2, [r4, #8]
 8012278:	6863      	ldr	r3, [r4, #4]
 801227a:	fbb3 f3f2 	udiv	r3, r3, r2
 801227e:	4606      	mov	r6, r0
 8012280:	fbb0 f0f2 	udiv	r0, r0, r2
 8012284:	fb02 6010 	mls	r0, r2, r0, r6
 8012288:	b280      	uxth	r0, r0
 801228a:	fb00 f303 	mul.w	r3, r0, r3
 801228e:	6820      	ldr	r0, [r4, #0]
 8012290:	3304      	adds	r3, #4
 8012292:	4418      	add	r0, r3
 8012294:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d0a0      	beq.n	80121de <uxr_receive_reliable_message+0x22>
 801229c:	6923      	ldr	r3, [r4, #16]
 801229e:	4798      	blx	r3
 80122a0:	2802      	cmp	r0, #2
 80122a2:	d008      	beq.n	80122b6 <uxr_receive_reliable_message+0xfa>
 80122a4:	2801      	cmp	r0, #1
 80122a6:	d0e2      	beq.n	801226e <uxr_receive_reliable_message+0xb2>
 80122a8:	e799      	b.n	80121de <uxr_receive_reliable_message+0x22>
 80122aa:	9b08      	ldr	r3, [sp, #32]
 80122ac:	81a5      	strh	r5, [r4, #12]
 80122ae:	2601      	movs	r6, #1
 80122b0:	f883 9000 	strb.w	r9, [r3]
 80122b4:	e794      	b.n	80121e0 <uxr_receive_reliable_message+0x24>
 80122b6:	2601      	movs	r6, #1
 80122b8:	e792      	b.n	80121e0 <uxr_receive_reliable_message+0x24>
 80122ba:	bf00      	nop

080122bc <uxr_next_input_reliable_buffer_available>:
 80122bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122c0:	4604      	mov	r4, r0
 80122c2:	460f      	mov	r7, r1
 80122c4:	8980      	ldrh	r0, [r0, #12]
 80122c6:	2101      	movs	r1, #1
 80122c8:	4690      	mov	r8, r2
 80122ca:	f000 fd53 	bl	8012d74 <uxr_seq_num_add>
 80122ce:	8922      	ldrh	r2, [r4, #8]
 80122d0:	fbb0 f6f2 	udiv	r6, r0, r2
 80122d4:	fb02 0616 	mls	r6, r2, r6, r0
 80122d8:	b2b6      	uxth	r6, r6
 80122da:	6863      	ldr	r3, [r4, #4]
 80122dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80122e0:	fb06 f303 	mul.w	r3, r6, r3
 80122e4:	6826      	ldr	r6, [r4, #0]
 80122e6:	3304      	adds	r3, #4
 80122e8:	441e      	add	r6, r3
 80122ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80122ee:	f1b9 0f00 	cmp.w	r9, #0
 80122f2:	d023      	beq.n	801233c <uxr_next_input_reliable_buffer_available+0x80>
 80122f4:	6923      	ldr	r3, [r4, #16]
 80122f6:	4605      	mov	r5, r0
 80122f8:	4630      	mov	r0, r6
 80122fa:	4798      	blx	r3
 80122fc:	4682      	mov	sl, r0
 80122fe:	b300      	cbz	r0, 8012342 <uxr_next_input_reliable_buffer_available+0x86>
 8012300:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012304:	2101      	movs	r1, #1
 8012306:	4650      	mov	r0, sl
 8012308:	f000 fd34 	bl	8012d74 <uxr_seq_num_add>
 801230c:	8921      	ldrh	r1, [r4, #8]
 801230e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012312:	4682      	mov	sl, r0
 8012314:	fb01 0212 	mls	r2, r1, r2, r0
 8012318:	e9d4 0300 	ldrd	r0, r3, [r4]
 801231c:	b292      	uxth	r2, r2
 801231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012322:	fb02 f303 	mul.w	r3, r2, r3
 8012326:	3304      	adds	r3, #4
 8012328:	4418      	add	r0, r3
 801232a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801232e:	b12b      	cbz	r3, 801233c <uxr_next_input_reliable_buffer_available+0x80>
 8012330:	6923      	ldr	r3, [r4, #16]
 8012332:	4798      	blx	r3
 8012334:	2802      	cmp	r0, #2
 8012336:	d01b      	beq.n	8012370 <uxr_next_input_reliable_buffer_available+0xb4>
 8012338:	2801      	cmp	r0, #1
 801233a:	d0e3      	beq.n	8012304 <uxr_next_input_reliable_buffer_available+0x48>
 801233c:	2000      	movs	r0, #0
 801233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012342:	464a      	mov	r2, r9
 8012344:	4631      	mov	r1, r6
 8012346:	4638      	mov	r0, r7
 8012348:	f7f6 fab2 	bl	80088b0 <ucdr_init_buffer>
 801234c:	8921      	ldrh	r1, [r4, #8]
 801234e:	fbb5 f2f1 	udiv	r2, r5, r1
 8012352:	fb01 5212 	mls	r2, r1, r2, r5
 8012356:	b292      	uxth	r2, r2
 8012358:	6863      	ldr	r3, [r4, #4]
 801235a:	fbb3 f3f1 	udiv	r3, r3, r1
 801235e:	fb02 f303 	mul.w	r3, r2, r3
 8012362:	6822      	ldr	r2, [r4, #0]
 8012364:	f842 a003 	str.w	sl, [r2, r3]
 8012368:	2001      	movs	r0, #1
 801236a:	81a5      	strh	r5, [r4, #12]
 801236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012370:	8920      	ldrh	r0, [r4, #8]
 8012372:	fbb5 f3f0 	udiv	r3, r5, r0
 8012376:	fb00 5513 	mls	r5, r0, r3, r5
 801237a:	b2ad      	uxth	r5, r5
 801237c:	6863      	ldr	r3, [r4, #4]
 801237e:	fbb3 f3f0 	udiv	r3, r3, r0
 8012382:	fb03 f505 	mul.w	r5, r3, r5
 8012386:	6823      	ldr	r3, [r4, #0]
 8012388:	2000      	movs	r0, #0
 801238a:	5158      	str	r0, [r3, r5]
 801238c:	eb06 0108 	add.w	r1, r6, r8
 8012390:	eba9 0208 	sub.w	r2, r9, r8
 8012394:	4638      	mov	r0, r7
 8012396:	f7f6 fa8b 	bl	80088b0 <ucdr_init_buffer>
 801239a:	4638      	mov	r0, r7
 801239c:	4903      	ldr	r1, [pc, #12]	@ (80123ac <uxr_next_input_reliable_buffer_available+0xf0>)
 801239e:	4622      	mov	r2, r4
 80123a0:	f7f6 fa5a 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 80123a4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80123a8:	2001      	movs	r0, #1
 80123aa:	e7c8      	b.n	801233e <uxr_next_input_reliable_buffer_available+0x82>
 80123ac:	080120b1 	.word	0x080120b1

080123b0 <uxr_process_heartbeat>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4611      	mov	r1, r2
 80123b4:	4604      	mov	r4, r0
 80123b6:	89c0      	ldrh	r0, [r0, #14]
 80123b8:	4615      	mov	r5, r2
 80123ba:	f000 fce3 	bl	8012d84 <uxr_seq_num_cmp>
 80123be:	2800      	cmp	r0, #0
 80123c0:	bfb8      	it	lt
 80123c2:	81e5      	strhlt	r5, [r4, #14]
 80123c4:	bd38      	pop	{r3, r4, r5, pc}
 80123c6:	bf00      	nop

080123c8 <uxr_compute_acknack>:
 80123c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123cc:	8903      	ldrh	r3, [r0, #8]
 80123ce:	8985      	ldrh	r5, [r0, #12]
 80123d0:	4604      	mov	r4, r0
 80123d2:	460e      	mov	r6, r1
 80123d4:	b1d3      	cbz	r3, 801240c <uxr_compute_acknack+0x44>
 80123d6:	4628      	mov	r0, r5
 80123d8:	2701      	movs	r7, #1
 80123da:	e003      	b.n	80123e4 <uxr_compute_acknack+0x1c>
 80123dc:	4567      	cmp	r7, ip
 80123de:	d215      	bcs.n	801240c <uxr_compute_acknack+0x44>
 80123e0:	89a0      	ldrh	r0, [r4, #12]
 80123e2:	3701      	adds	r7, #1
 80123e4:	b2b9      	uxth	r1, r7
 80123e6:	f000 fcc5 	bl	8012d74 <uxr_seq_num_add>
 80123ea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80123ee:	fbb0 f3fc 	udiv	r3, r0, ip
 80123f2:	fb0c 0313 	mls	r3, ip, r3, r0
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80123fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8012400:	fb02 f303 	mul.w	r3, r2, r3
 8012404:	58cb      	ldr	r3, [r1, r3]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1e8      	bne.n	80123dc <uxr_compute_acknack+0x14>
 801240a:	4605      	mov	r5, r0
 801240c:	8035      	strh	r5, [r6, #0]
 801240e:	2101      	movs	r1, #1
 8012410:	4628      	mov	r0, r5
 8012412:	89e7      	ldrh	r7, [r4, #14]
 8012414:	f000 fcb2 	bl	8012d7c <uxr_seq_num_sub>
 8012418:	4601      	mov	r1, r0
 801241a:	4638      	mov	r0, r7
 801241c:	f000 fcae 	bl	8012d7c <uxr_seq_num_sub>
 8012420:	4605      	mov	r5, r0
 8012422:	b318      	cbz	r0, 801246c <uxr_compute_acknack+0xa4>
 8012424:	f04f 0900 	mov.w	r9, #0
 8012428:	464f      	mov	r7, r9
 801242a:	f04f 0801 	mov.w	r8, #1
 801242e:	fa1f f189 	uxth.w	r1, r9
 8012432:	8830      	ldrh	r0, [r6, #0]
 8012434:	f000 fc9e 	bl	8012d74 <uxr_seq_num_add>
 8012438:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801243c:	fbb0 f3fc 	udiv	r3, r0, ip
 8012440:	e9d4 1200 	ldrd	r1, r2, [r4]
 8012444:	fb03 001c 	mls	r0, r3, ip, r0
 8012448:	b283      	uxth	r3, r0
 801244a:	fbb2 f2fc 	udiv	r2, r2, ip
 801244e:	fb02 f303 	mul.w	r3, r2, r3
 8012452:	fa08 f209 	lsl.w	r2, r8, r9
 8012456:	58cb      	ldr	r3, [r1, r3]
 8012458:	f109 0901 	add.w	r9, r9, #1
 801245c:	b90b      	cbnz	r3, 8012462 <uxr_compute_acknack+0x9a>
 801245e:	4317      	orrs	r7, r2
 8012460:	b2bf      	uxth	r7, r7
 8012462:	454d      	cmp	r5, r9
 8012464:	d1e3      	bne.n	801242e <uxr_compute_acknack+0x66>
 8012466:	4638      	mov	r0, r7
 8012468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801246c:	4607      	mov	r7, r0
 801246e:	4638      	mov	r0, r7
 8012470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012474 <uxr_init_output_best_effort_stream>:
 8012474:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8012478:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801247c:	6001      	str	r1, [r0, #0]
 801247e:	7303      	strb	r3, [r0, #12]
 8012480:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <uxr_reset_output_best_effort_stream>:
 8012488:	7b02      	ldrb	r2, [r0, #12]
 801248a:	6042      	str	r2, [r0, #4]
 801248c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012490:	81c3      	strh	r3, [r0, #14]
 8012492:	4770      	bx	lr

08012494 <uxr_prepare_best_effort_buffer_to_write>:
 8012494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012496:	4604      	mov	r4, r0
 8012498:	b083      	sub	sp, #12
 801249a:	6840      	ldr	r0, [r0, #4]
 801249c:	460d      	mov	r5, r1
 801249e:	4616      	mov	r6, r2
 80124a0:	f7f9 fd12 	bl	800bec8 <uxr_submessage_padding>
 80124a4:	6863      	ldr	r3, [r4, #4]
 80124a6:	4418      	add	r0, r3
 80124a8:	68a3      	ldr	r3, [r4, #8]
 80124aa:	1942      	adds	r2, r0, r5
 80124ac:	4293      	cmp	r3, r2
 80124ae:	bf2c      	ite	cs
 80124b0:	2701      	movcs	r7, #1
 80124b2:	2700      	movcc	r7, #0
 80124b4:	d202      	bcs.n	80124bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80124b6:	4638      	mov	r0, r7
 80124b8:	b003      	add	sp, #12
 80124ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124bc:	9000      	str	r0, [sp, #0]
 80124be:	6821      	ldr	r1, [r4, #0]
 80124c0:	4630      	mov	r0, r6
 80124c2:	2300      	movs	r3, #0
 80124c4:	f7f6 f9e2 	bl	800888c <ucdr_init_buffer_origin_offset>
 80124c8:	6861      	ldr	r1, [r4, #4]
 80124ca:	4638      	mov	r0, r7
 80124cc:	4429      	add	r1, r5
 80124ce:	6061      	str	r1, [r4, #4]
 80124d0:	b003      	add	sp, #12
 80124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124d4 <uxr_prepare_best_effort_buffer_to_send>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	4604      	mov	r4, r0
 80124da:	461d      	mov	r5, r3
 80124dc:	6840      	ldr	r0, [r0, #4]
 80124de:	7b23      	ldrb	r3, [r4, #12]
 80124e0:	4298      	cmp	r0, r3
 80124e2:	bf8c      	ite	hi
 80124e4:	2601      	movhi	r6, #1
 80124e6:	2600      	movls	r6, #0
 80124e8:	d802      	bhi.n	80124f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80124ea:	4630      	mov	r0, r6
 80124ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f0:	4688      	mov	r8, r1
 80124f2:	89e0      	ldrh	r0, [r4, #14]
 80124f4:	2101      	movs	r1, #1
 80124f6:	4617      	mov	r7, r2
 80124f8:	f000 fc3c 	bl	8012d74 <uxr_seq_num_add>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	81e0      	strh	r0, [r4, #14]
 8012500:	8028      	strh	r0, [r5, #0]
 8012502:	f8c8 3000 	str.w	r3, [r8]
 8012506:	6863      	ldr	r3, [r4, #4]
 8012508:	603b      	str	r3, [r7, #0]
 801250a:	7b23      	ldrb	r3, [r4, #12]
 801250c:	6063      	str	r3, [r4, #4]
 801250e:	4630      	mov	r0, r6
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012514 <on_full_output_buffer>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	6802      	ldr	r2, [r0, #0]
 8012518:	460c      	mov	r4, r1
 801251a:	6809      	ldr	r1, [r1, #0]
 801251c:	8923      	ldrh	r3, [r4, #8]
 801251e:	eba2 0c01 	sub.w	ip, r2, r1
 8012522:	6862      	ldr	r2, [r4, #4]
 8012524:	fbb2 f2f3 	udiv	r2, r2, r3
 8012528:	fbbc fcf2 	udiv	ip, ip, r2
 801252c:	f10c 0c01 	add.w	ip, ip, #1
 8012530:	fa1f fc8c 	uxth.w	ip, ip
 8012534:	fbbc fef3 	udiv	lr, ip, r3
 8012538:	fb03 c31e 	mls	r3, r3, lr, ip
 801253c:	b29b      	uxth	r3, r3
 801253e:	fb02 f303 	mul.w	r3, r2, r3
 8012542:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8012546:	58ca      	ldr	r2, [r1, r3]
 8012548:	4463      	add	r3, ip
 801254a:	eba2 020c 	sub.w	r2, r2, ip
 801254e:	3308      	adds	r3, #8
 8012550:	4605      	mov	r5, r0
 8012552:	4419      	add	r1, r3
 8012554:	3a04      	subs	r2, #4
 8012556:	6903      	ldr	r3, [r0, #16]
 8012558:	f7f6 f9a2 	bl	80088a0 <ucdr_init_buffer_origin>
 801255c:	4628      	mov	r0, r5
 801255e:	4903      	ldr	r1, [pc, #12]	@ (801256c <on_full_output_buffer+0x58>)
 8012560:	4622      	mov	r2, r4
 8012562:	f7f6 f979 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012566:	2000      	movs	r0, #0
 8012568:	bd38      	pop	{r3, r4, r5, pc}
 801256a:	bf00      	nop
 801256c:	08012515 	.word	0x08012515

08012570 <uxr_init_output_reliable_stream>:
 8012570:	b410      	push	{r4}
 8012572:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012576:	8103      	strh	r3, [r0, #8]
 8012578:	e9c0 1200 	strd	r1, r2, [r0]
 801257c:	f880 c00c 	strb.w	ip, [r0, #12]
 8012580:	b1d3      	cbz	r3, 80125b8 <uxr_init_output_reliable_stream+0x48>
 8012582:	f8c1 c000 	str.w	ip, [r1]
 8012586:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801258a:	f1bc 0f01 	cmp.w	ip, #1
 801258e:	d913      	bls.n	80125b8 <uxr_init_output_reliable_stream+0x48>
 8012590:	2301      	movs	r3, #1
 8012592:	fbb3 f1fc 	udiv	r1, r3, ip
 8012596:	fb0c 3111 	mls	r1, ip, r1, r3
 801259a:	b289      	uxth	r1, r1
 801259c:	6842      	ldr	r2, [r0, #4]
 801259e:	6804      	ldr	r4, [r0, #0]
 80125a0:	fbb2 f2fc 	udiv	r2, r2, ip
 80125a4:	fb01 f202 	mul.w	r2, r1, r2
 80125a8:	7b01      	ldrb	r1, [r0, #12]
 80125aa:	50a1      	str	r1, [r4, r2]
 80125ac:	3301      	adds	r3, #1
 80125ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	459c      	cmp	ip, r3
 80125b6:	d8ec      	bhi.n	8012592 <uxr_init_output_reliable_stream+0x22>
 80125b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80125bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80125c0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80125c4:	4905      	ldr	r1, [pc, #20]	@ (80125dc <uxr_init_output_reliable_stream+0x6c>)
 80125c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ca:	f8c0 100e 	str.w	r1, [r0, #14]
 80125ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125d2:	2300      	movs	r3, #0
 80125d4:	8242      	strh	r2, [r0, #18]
 80125d6:	8403      	strh	r3, [r0, #32]
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop
 80125dc:	ffff0000 	.word	0xffff0000

080125e0 <uxr_reset_output_reliable_stream>:
 80125e0:	8901      	ldrh	r1, [r0, #8]
 80125e2:	b1b1      	cbz	r1, 8012612 <uxr_reset_output_reliable_stream+0x32>
 80125e4:	f04f 0c00 	mov.w	ip, #0
 80125e8:	4663      	mov	r3, ip
 80125ea:	fbb3 f2f1 	udiv	r2, r3, r1
 80125ee:	fb01 3312 	mls	r3, r1, r2, r3
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	6842      	ldr	r2, [r0, #4]
 80125f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80125fa:	6801      	ldr	r1, [r0, #0]
 80125fc:	fb02 f303 	mul.w	r3, r2, r3
 8012600:	7b02      	ldrb	r2, [r0, #12]
 8012602:	50ca      	str	r2, [r1, r3]
 8012604:	f10c 0c01 	add.w	ip, ip, #1
 8012608:	8901      	ldrh	r1, [r0, #8]
 801260a:	fa1f f38c 	uxth.w	r3, ip
 801260e:	4299      	cmp	r1, r3
 8012610:	d8eb      	bhi.n	80125ea <uxr_reset_output_reliable_stream+0xa>
 8012612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012616:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801261a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801261e:	4904      	ldr	r1, [pc, #16]	@ (8012630 <uxr_reset_output_reliable_stream+0x50>)
 8012620:	f8c0 100e 	str.w	r1, [r0, #14]
 8012624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012628:	2300      	movs	r3, #0
 801262a:	8242      	strh	r2, [r0, #18]
 801262c:	8403      	strh	r3, [r0, #32]
 801262e:	4770      	bx	lr
 8012630:	ffff0000 	.word	0xffff0000

08012634 <uxr_prepare_reliable_buffer_to_write>:
 8012634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012638:	4604      	mov	r4, r0
 801263a:	b091      	sub	sp, #68	@ 0x44
 801263c:	8900      	ldrh	r0, [r0, #8]
 801263e:	89e6      	ldrh	r6, [r4, #14]
 8012640:	6823      	ldr	r3, [r4, #0]
 8012642:	9204      	str	r2, [sp, #16]
 8012644:	fbb6 f2f0 	udiv	r2, r6, r0
 8012648:	fb00 6212 	mls	r2, r0, r2, r6
 801264c:	b292      	uxth	r2, r2
 801264e:	6865      	ldr	r5, [r4, #4]
 8012650:	fbb5 f5f0 	udiv	r5, r5, r0
 8012654:	fb05 3202 	mla	r2, r5, r2, r3
 8012658:	3204      	adds	r2, #4
 801265a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801265e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8012662:	9203      	str	r2, [sp, #12]
 8012664:	468b      	mov	fp, r1
 8012666:	1f2f      	subs	r7, r5, #4
 8012668:	2800      	cmp	r0, #0
 801266a:	f000 814c 	beq.w	8012906 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801266e:	f04f 0c00 	mov.w	ip, #0
 8012672:	46e2      	mov	sl, ip
 8012674:	4661      	mov	r1, ip
 8012676:	fbb1 f2f0 	udiv	r2, r1, r0
 801267a:	fb00 1212 	mls	r2, r0, r2, r1
 801267e:	b292      	uxth	r2, r2
 8012680:	fb05 f202 	mul.w	r2, r5, r2
 8012684:	f10c 0c01 	add.w	ip, ip, #1
 8012688:	589a      	ldr	r2, [r3, r2]
 801268a:	454a      	cmp	r2, r9
 801268c:	bf08      	it	eq
 801268e:	f10a 0a01 	addeq.w	sl, sl, #1
 8012692:	fa1f f18c 	uxth.w	r1, ip
 8012696:	bf08      	it	eq
 8012698:	fa1f fa8a 	uxtheq.w	sl, sl
 801269c:	4281      	cmp	r1, r0
 801269e:	d3ea      	bcc.n	8012676 <uxr_prepare_reliable_buffer_to_write+0x42>
 80126a0:	4640      	mov	r0, r8
 80126a2:	2104      	movs	r1, #4
 80126a4:	f8cd a014 	str.w	sl, [sp, #20]
 80126a8:	f7f6 f906 	bl	80088b8 <ucdr_alignment>
 80126ac:	4480      	add	r8, r0
 80126ae:	eb08 020b 	add.w	r2, r8, fp
 80126b2:	42ba      	cmp	r2, r7
 80126b4:	f240 80cd 	bls.w	8012852 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80126b8:	7b22      	ldrb	r2, [r4, #12]
 80126ba:	445a      	add	r2, fp
 80126bc:	42ba      	cmp	r2, r7
 80126be:	f240 80b5 	bls.w	801282c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80126c2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80126c6:	33fc      	adds	r3, #252	@ 0xfc
 80126c8:	b2ba      	uxth	r2, r7
 80126ca:	4413      	add	r3, r2
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	fb0a f903 	mul.w	r9, sl, r3
 80126d2:	45d9      	cmp	r9, fp
 80126d4:	9305      	str	r3, [sp, #20]
 80126d6:	9306      	str	r3, [sp, #24]
 80126d8:	f0c0 80b7 	bcc.w	801284a <uxr_prepare_reliable_buffer_to_write+0x216>
 80126dc:	f108 0304 	add.w	r3, r8, #4
 80126e0:	42bb      	cmp	r3, r7
 80126e2:	f080 80db 	bcs.w	801289c <uxr_prepare_reliable_buffer_to_write+0x268>
 80126e6:	f1a2 0904 	sub.w	r9, r2, #4
 80126ea:	eba9 0908 	sub.w	r9, r9, r8
 80126ee:	9b05      	ldr	r3, [sp, #20]
 80126f0:	fa1f f989 	uxth.w	r9, r9
 80126f4:	ebab 0b09 	sub.w	fp, fp, r9
 80126f8:	fbbb f2f3 	udiv	r2, fp, r3
 80126fc:	fb03 b312 	mls	r3, r3, r2, fp
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 80c8 	beq.w	8012896 <uxr_prepare_reliable_buffer_to_write+0x262>
 8012706:	3201      	adds	r2, #1
 8012708:	b292      	uxth	r2, r2
 801270a:	9306      	str	r3, [sp, #24]
 801270c:	4552      	cmp	r2, sl
 801270e:	f200 809c 	bhi.w	801284a <uxr_prepare_reliable_buffer_to_write+0x216>
 8012712:	f10d 0b20 	add.w	fp, sp, #32
 8012716:	2a00      	cmp	r2, #0
 8012718:	d042      	beq.n	80127a0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801271a:	f8cd 801c 	str.w	r8, [sp, #28]
 801271e:	f04f 0a00 	mov.w	sl, #0
 8012722:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012726:	9505      	str	r5, [sp, #20]
 8012728:	f10d 0b20 	add.w	fp, sp, #32
 801272c:	4615      	mov	r5, r2
 801272e:	e000      	b.n	8012732 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8012730:	46c1      	mov	r9, r8
 8012732:	8920      	ldrh	r0, [r4, #8]
 8012734:	fbb6 f2f0 	udiv	r2, r6, r0
 8012738:	fb00 6112 	mls	r1, r0, r2, r6
 801273c:	b28a      	uxth	r2, r1
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	fbb3 f1f0 	udiv	r1, r3, r0
 8012744:	6823      	ldr	r3, [r4, #0]
 8012746:	fb02 f101 	mul.w	r1, r2, r1
 801274a:	3104      	adds	r1, #4
 801274c:	4419      	add	r1, r3
 801274e:	4658      	mov	r0, fp
 8012750:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012754:	9200      	str	r2, [sp, #0]
 8012756:	2300      	movs	r3, #0
 8012758:	463a      	mov	r2, r7
 801275a:	f7f6 f897 	bl	800888c <ucdr_init_buffer_origin_offset>
 801275e:	464a      	mov	r2, r9
 8012760:	2300      	movs	r3, #0
 8012762:	210d      	movs	r1, #13
 8012764:	4658      	mov	r0, fp
 8012766:	f7f9 fb6f 	bl	800be48 <uxr_buffer_submessage_header>
 801276a:	8921      	ldrh	r1, [r4, #8]
 801276c:	fbb6 f2f1 	udiv	r2, r6, r1
 8012770:	fb01 6212 	mls	r2, r1, r2, r6
 8012774:	b292      	uxth	r2, r2
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	fbb3 f3f1 	udiv	r3, r3, r1
 801277c:	fb02 f303 	mul.w	r3, r2, r3
 8012780:	6822      	ldr	r2, [r4, #0]
 8012782:	4630      	mov	r0, r6
 8012784:	50d7      	str	r7, [r2, r3]
 8012786:	2101      	movs	r1, #1
 8012788:	f000 faf4 	bl	8012d74 <uxr_seq_num_add>
 801278c:	f10a 0a01 	add.w	sl, sl, #1
 8012790:	fa1f f38a 	uxth.w	r3, sl
 8012794:	429d      	cmp	r5, r3
 8012796:	4606      	mov	r6, r0
 8012798:	d8ca      	bhi.n	8012730 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801279a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801279e:	9d05      	ldr	r5, [sp, #20]
 80127a0:	8920      	ldrh	r0, [r4, #8]
 80127a2:	fbb6 f3f0 	udiv	r3, r6, r0
 80127a6:	fb00 6313 	mls	r3, r0, r3, r6
 80127aa:	b299      	uxth	r1, r3
 80127ac:	6863      	ldr	r3, [r4, #4]
 80127ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80127b2:	fb01 f303 	mul.w	r3, r1, r3
 80127b6:	6821      	ldr	r1, [r4, #0]
 80127b8:	3304      	adds	r3, #4
 80127ba:	4419      	add	r1, r3
 80127bc:	463a      	mov	r2, r7
 80127be:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80127c2:	9000      	str	r0, [sp, #0]
 80127c4:	2300      	movs	r3, #0
 80127c6:	4658      	mov	r0, fp
 80127c8:	f7f6 f860 	bl	800888c <ucdr_init_buffer_origin_offset>
 80127cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80127d0:	4658      	mov	r0, fp
 80127d2:	fa1f f289 	uxth.w	r2, r9
 80127d6:	2302      	movs	r3, #2
 80127d8:	210d      	movs	r1, #13
 80127da:	f7f9 fb35 	bl	800be48 <uxr_buffer_submessage_header>
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	8927      	ldrh	r7, [r4, #8]
 80127e2:	7b20      	ldrb	r0, [r4, #12]
 80127e4:	f108 0104 	add.w	r1, r8, #4
 80127e8:	440b      	add	r3, r1
 80127ea:	4619      	mov	r1, r3
 80127ec:	fbb6 f3f7 	udiv	r3, r6, r7
 80127f0:	fb07 6313 	mls	r3, r7, r3, r6
 80127f4:	f1a5 0208 	sub.w	r2, r5, #8
 80127f8:	b29d      	uxth	r5, r3
 80127fa:	3004      	adds	r0, #4
 80127fc:	6863      	ldr	r3, [r4, #4]
 80127fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8012802:	fb05 f303 	mul.w	r3, r5, r3
 8012806:	6825      	ldr	r5, [r4, #0]
 8012808:	4448      	add	r0, r9
 801280a:	50e8      	str	r0, [r5, r3]
 801280c:	9d04      	ldr	r5, [sp, #16]
 801280e:	eba2 0208 	sub.w	r2, r2, r8
 8012812:	4628      	mov	r0, r5
 8012814:	f7f6 f84c 	bl	80088b0 <ucdr_init_buffer>
 8012818:	4628      	mov	r0, r5
 801281a:	493c      	ldr	r1, [pc, #240]	@ (801290c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801281c:	4622      	mov	r2, r4
 801281e:	f7f6 f81b 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012822:	2001      	movs	r0, #1
 8012824:	81e6      	strh	r6, [r4, #14]
 8012826:	b011      	add	sp, #68	@ 0x44
 8012828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282c:	2101      	movs	r1, #1
 801282e:	89e0      	ldrh	r0, [r4, #14]
 8012830:	f000 faa0 	bl	8012d74 <uxr_seq_num_add>
 8012834:	8921      	ldrh	r1, [r4, #8]
 8012836:	4605      	mov	r5, r0
 8012838:	8a60      	ldrh	r0, [r4, #18]
 801283a:	f000 fa9b 	bl	8012d74 <uxr_seq_num_add>
 801283e:	4601      	mov	r1, r0
 8012840:	4628      	mov	r0, r5
 8012842:	f000 fa9f 	bl	8012d84 <uxr_seq_num_cmp>
 8012846:	2800      	cmp	r0, #0
 8012848:	dd42      	ble.n	80128d0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801284a:	2000      	movs	r0, #0
 801284c:	b011      	add	sp, #68	@ 0x44
 801284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012852:	8921      	ldrh	r1, [r4, #8]
 8012854:	8a60      	ldrh	r0, [r4, #18]
 8012856:	9205      	str	r2, [sp, #20]
 8012858:	f000 fa8c 	bl	8012d74 <uxr_seq_num_add>
 801285c:	4601      	mov	r1, r0
 801285e:	4630      	mov	r0, r6
 8012860:	f000 fa90 	bl	8012d84 <uxr_seq_num_cmp>
 8012864:	2800      	cmp	r0, #0
 8012866:	9a05      	ldr	r2, [sp, #20]
 8012868:	dcef      	bgt.n	801284a <uxr_prepare_reliable_buffer_to_write+0x216>
 801286a:	8927      	ldrh	r7, [r4, #8]
 801286c:	fbb6 f3f7 	udiv	r3, r6, r7
 8012870:	fb07 6313 	mls	r3, r7, r3, r6
 8012874:	b29d      	uxth	r5, r3
 8012876:	6863      	ldr	r3, [r4, #4]
 8012878:	6824      	ldr	r4, [r4, #0]
 801287a:	fbb3 f3f7 	udiv	r3, r3, r7
 801287e:	fb05 f303 	mul.w	r3, r5, r3
 8012882:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8012886:	50e2      	str	r2, [r4, r3]
 8012888:	2300      	movs	r3, #0
 801288a:	f8cd 8000 	str.w	r8, [sp]
 801288e:	f7f5 fffd 	bl	800888c <ucdr_init_buffer_origin_offset>
 8012892:	2001      	movs	r0, #1
 8012894:	e7da      	b.n	801284c <uxr_prepare_reliable_buffer_to_write+0x218>
 8012896:	b293      	uxth	r3, r2
 8012898:	461a      	mov	r2, r3
 801289a:	e737      	b.n	801270c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801289c:	4630      	mov	r0, r6
 801289e:	2101      	movs	r1, #1
 80128a0:	9207      	str	r2, [sp, #28]
 80128a2:	f000 fa67 	bl	8012d74 <uxr_seq_num_add>
 80128a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80128aa:	fbb0 f1fc 	udiv	r1, r0, ip
 80128ae:	fb0c 0111 	mls	r1, ip, r1, r0
 80128b2:	4606      	mov	r6, r0
 80128b4:	b288      	uxth	r0, r1
 80128b6:	6863      	ldr	r3, [r4, #4]
 80128b8:	fbb3 f1fc 	udiv	r1, r3, ip
 80128bc:	6823      	ldr	r3, [r4, #0]
 80128be:	9a07      	ldr	r2, [sp, #28]
 80128c0:	fb00 f101 	mul.w	r1, r0, r1
 80128c4:	3104      	adds	r1, #4
 80128c6:	440b      	add	r3, r1
 80128c8:	9303      	str	r3, [sp, #12]
 80128ca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80128ce:	e70a      	b.n	80126e6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80128d0:	8921      	ldrh	r1, [r4, #8]
 80128d2:	fbb5 f3f1 	udiv	r3, r5, r1
 80128d6:	fb01 5313 	mls	r3, r1, r3, r5
 80128da:	b29a      	uxth	r2, r3
 80128dc:	6863      	ldr	r3, [r4, #4]
 80128de:	fbb3 f3f1 	udiv	r3, r3, r1
 80128e2:	6821      	ldr	r1, [r4, #0]
 80128e4:	9804      	ldr	r0, [sp, #16]
 80128e6:	fb02 f303 	mul.w	r3, r2, r3
 80128ea:	3304      	adds	r3, #4
 80128ec:	7b22      	ldrb	r2, [r4, #12]
 80128ee:	4419      	add	r1, r3
 80128f0:	445a      	add	r2, fp
 80128f2:	f841 2c04 	str.w	r2, [r1, #-4]
 80128f6:	7b23      	ldrb	r3, [r4, #12]
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	2300      	movs	r3, #0
 80128fc:	f7f5 ffc6 	bl	800888c <ucdr_init_buffer_origin_offset>
 8012900:	81e5      	strh	r5, [r4, #14]
 8012902:	2001      	movs	r0, #1
 8012904:	e7a2      	b.n	801284c <uxr_prepare_reliable_buffer_to_write+0x218>
 8012906:	4682      	mov	sl, r0
 8012908:	e6ca      	b.n	80126a0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801290a:	bf00      	nop
 801290c:	08012515 	.word	0x08012515

08012910 <uxr_prepare_next_reliable_buffer_to_send>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	4604      	mov	r4, r0
 8012914:	460f      	mov	r7, r1
 8012916:	8a00      	ldrh	r0, [r0, #16]
 8012918:	2101      	movs	r1, #1
 801291a:	4616      	mov	r6, r2
 801291c:	461d      	mov	r5, r3
 801291e:	f000 fa29 	bl	8012d74 <uxr_seq_num_add>
 8012922:	8028      	strh	r0, [r5, #0]
 8012924:	8922      	ldrh	r2, [r4, #8]
 8012926:	fbb0 f3f2 	udiv	r3, r0, r2
 801292a:	fb02 0c13 	mls	ip, r2, r3, r0
 801292e:	fa1f fc8c 	uxth.w	ip, ip
 8012932:	6863      	ldr	r3, [r4, #4]
 8012934:	fbb3 f3f2 	udiv	r3, r3, r2
 8012938:	fb0c fc03 	mul.w	ip, ip, r3
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	89e1      	ldrh	r1, [r4, #14]
 8012940:	f10c 0c04 	add.w	ip, ip, #4
 8012944:	4463      	add	r3, ip
 8012946:	603b      	str	r3, [r7, #0]
 8012948:	6823      	ldr	r3, [r4, #0]
 801294a:	449c      	add	ip, r3
 801294c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8012950:	6033      	str	r3, [r6, #0]
 8012952:	f000 fa17 	bl	8012d84 <uxr_seq_num_cmp>
 8012956:	2800      	cmp	r0, #0
 8012958:	dd01      	ble.n	801295e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801295a:	2000      	movs	r0, #0
 801295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801295e:	7b23      	ldrb	r3, [r4, #12]
 8012960:	6832      	ldr	r2, [r6, #0]
 8012962:	429a      	cmp	r2, r3
 8012964:	d9f9      	bls.n	801295a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012966:	8a61      	ldrh	r1, [r4, #18]
 8012968:	8a20      	ldrh	r0, [r4, #16]
 801296a:	f000 fa07 	bl	8012d7c <uxr_seq_num_sub>
 801296e:	8923      	ldrh	r3, [r4, #8]
 8012970:	4283      	cmp	r3, r0
 8012972:	d0f2      	beq.n	801295a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012974:	8828      	ldrh	r0, [r5, #0]
 8012976:	89e3      	ldrh	r3, [r4, #14]
 8012978:	8220      	strh	r0, [r4, #16]
 801297a:	4298      	cmp	r0, r3
 801297c:	d001      	beq.n	8012982 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801297e:	2001      	movs	r0, #1
 8012980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012982:	2101      	movs	r1, #1
 8012984:	f000 f9f6 	bl	8012d74 <uxr_seq_num_add>
 8012988:	81e0      	strh	r0, [r4, #14]
 801298a:	2001      	movs	r0, #1
 801298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298e:	bf00      	nop

08012990 <uxr_update_output_stream_heartbeat_timestamp>:
 8012990:	b570      	push	{r4, r5, r6, lr}
 8012992:	8a01      	ldrh	r1, [r0, #16]
 8012994:	4604      	mov	r4, r0
 8012996:	8a40      	ldrh	r0, [r0, #18]
 8012998:	4615      	mov	r5, r2
 801299a:	461e      	mov	r6, r3
 801299c:	f000 f9f2 	bl	8012d84 <uxr_seq_num_cmp>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	db07      	blt.n	80129b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80129a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80129a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80129ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80129b0:	2000      	movs	r0, #0
 80129b2:	bd70      	pop	{r4, r5, r6, pc}
 80129b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80129b8:	b940      	cbnz	r0, 80129cc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80129ba:	2301      	movs	r3, #1
 80129bc:	f884 3020 	strb.w	r3, [r4, #32]
 80129c0:	3564      	adds	r5, #100	@ 0x64
 80129c2:	f146 0600 	adc.w	r6, r6, #0
 80129c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80129ca:	bd70      	pop	{r4, r5, r6, pc}
 80129cc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80129d0:	4295      	cmp	r5, r2
 80129d2:	eb76 0303 	sbcs.w	r3, r6, r3
 80129d6:	bfa5      	ittet	ge
 80129d8:	3001      	addge	r0, #1
 80129da:	f884 0020 	strbge.w	r0, [r4, #32]
 80129de:	2000      	movlt	r0, #0
 80129e0:	2001      	movge	r0, #1
 80129e2:	e7ed      	b.n	80129c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080129e4 <uxr_begin_output_nack_buffer_it>:
 80129e4:	8a40      	ldrh	r0, [r0, #18]
 80129e6:	4770      	bx	lr

080129e8 <uxr_next_reliable_nack_buffer_to_send>:
 80129e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80129f0:	b082      	sub	sp, #8
 80129f2:	f1b8 0f00 	cmp.w	r8, #0
 80129f6:	d011      	beq.n	8012a1c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80129f8:	4604      	mov	r4, r0
 80129fa:	8818      	ldrh	r0, [r3, #0]
 80129fc:	460e      	mov	r6, r1
 80129fe:	4617      	mov	r7, r2
 8012a00:	461d      	mov	r5, r3
 8012a02:	2101      	movs	r1, #1
 8012a04:	f000 f9b6 	bl	8012d74 <uxr_seq_num_add>
 8012a08:	8028      	strh	r0, [r5, #0]
 8012a0a:	8a21      	ldrh	r1, [r4, #16]
 8012a0c:	f000 f9ba 	bl	8012d84 <uxr_seq_num_cmp>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	dd07      	ble.n	8012a24 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8012a14:	f04f 0800 	mov.w	r8, #0
 8012a18:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8012a1c:	4640      	mov	r0, r8
 8012a1e:	b002      	add	sp, #8
 8012a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a24:	8921      	ldrh	r1, [r4, #8]
 8012a26:	8828      	ldrh	r0, [r5, #0]
 8012a28:	6823      	ldr	r3, [r4, #0]
 8012a2a:	fbb0 f2f1 	udiv	r2, r0, r1
 8012a2e:	fb01 0c12 	mls	ip, r1, r2, r0
 8012a32:	fa1f f28c 	uxth.w	r2, ip
 8012a36:	9301      	str	r3, [sp, #4]
 8012a38:	6863      	ldr	r3, [r4, #4]
 8012a3a:	fbb3 fcf1 	udiv	ip, r3, r1
 8012a3e:	9b01      	ldr	r3, [sp, #4]
 8012a40:	fb02 fc0c 	mul.w	ip, r2, ip
 8012a44:	f10c 0c04 	add.w	ip, ip, #4
 8012a48:	4463      	add	r3, ip
 8012a4a:	6033      	str	r3, [r6, #0]
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	4463      	add	r3, ip
 8012a50:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012a54:	603b      	str	r3, [r7, #0]
 8012a56:	7b22      	ldrb	r2, [r4, #12]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d0d2      	beq.n	8012a02 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8012a5c:	4640      	mov	r0, r8
 8012a5e:	b002      	add	sp, #8
 8012a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a64 <uxr_process_acknack>:
 8012a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a66:	4604      	mov	r4, r0
 8012a68:	460e      	mov	r6, r1
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	2101      	movs	r1, #1
 8012a6e:	f000 f985 	bl	8012d7c <uxr_seq_num_sub>
 8012a72:	8a61      	ldrh	r1, [r4, #18]
 8012a74:	f000 f982 	bl	8012d7c <uxr_seq_num_sub>
 8012a78:	b1c0      	cbz	r0, 8012aac <uxr_process_acknack+0x48>
 8012a7a:	4605      	mov	r5, r0
 8012a7c:	2700      	movs	r7, #0
 8012a7e:	2101      	movs	r1, #1
 8012a80:	8a60      	ldrh	r0, [r4, #18]
 8012a82:	f000 f977 	bl	8012d74 <uxr_seq_num_add>
 8012a86:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012a8a:	fbb0 f1fc 	udiv	r1, r0, ip
 8012a8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a92:	fb0c 0111 	mls	r1, ip, r1, r0
 8012a96:	b289      	uxth	r1, r1
 8012a98:	3701      	adds	r7, #1
 8012a9a:	fbb3 f3fc 	udiv	r3, r3, ip
 8012a9e:	fb01 f303 	mul.w	r3, r1, r3
 8012aa2:	42bd      	cmp	r5, r7
 8012aa4:	7b21      	ldrb	r1, [r4, #12]
 8012aa6:	8260      	strh	r0, [r4, #18]
 8012aa8:	50d1      	str	r1, [r2, r3]
 8012aaa:	d1e8      	bne.n	8012a7e <uxr_process_acknack+0x1a>
 8012aac:	3e00      	subs	r6, #0
 8012aae:	f04f 0300 	mov.w	r3, #0
 8012ab2:	bf18      	it	ne
 8012ab4:	2601      	movne	r6, #1
 8012ab6:	f884 3020 	strb.w	r3, [r4, #32]
 8012aba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8012abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ac0 <uxr_is_output_up_to_date>:
 8012ac0:	8a01      	ldrh	r1, [r0, #16]
 8012ac2:	8a40      	ldrh	r0, [r0, #18]
 8012ac4:	b508      	push	{r3, lr}
 8012ac6:	f000 f95d 	bl	8012d84 <uxr_seq_num_cmp>
 8012aca:	fab0 f080 	clz	r0, r0
 8012ace:	0940      	lsrs	r0, r0, #5
 8012ad0:	bd08      	pop	{r3, pc}
 8012ad2:	bf00      	nop

08012ad4 <get_available_free_slots>:
 8012ad4:	8902      	ldrh	r2, [r0, #8]
 8012ad6:	b1da      	cbz	r2, 8012b10 <get_available_free_slots+0x3c>
 8012ad8:	b530      	push	{r4, r5, lr}
 8012ada:	2100      	movs	r1, #0
 8012adc:	6843      	ldr	r3, [r0, #4]
 8012ade:	6805      	ldr	r5, [r0, #0]
 8012ae0:	7b04      	ldrb	r4, [r0, #12]
 8012ae2:	fbb3 fef2 	udiv	lr, r3, r2
 8012ae6:	4608      	mov	r0, r1
 8012ae8:	460b      	mov	r3, r1
 8012aea:	fbb3 fcf2 	udiv	ip, r3, r2
 8012aee:	fb02 331c 	mls	r3, r2, ip, r3
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	fb0e f303 	mul.w	r3, lr, r3
 8012af8:	3101      	adds	r1, #1
 8012afa:	f855 c003 	ldr.w	ip, [r5, r3]
 8012afe:	4564      	cmp	r4, ip
 8012b00:	bf08      	it	eq
 8012b02:	3001      	addeq	r0, #1
 8012b04:	b28b      	uxth	r3, r1
 8012b06:	bf08      	it	eq
 8012b08:	b280      	uxtheq	r0, r0
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d3ed      	bcc.n	8012aea <get_available_free_slots+0x16>
 8012b0e:	bd30      	pop	{r4, r5, pc}
 8012b10:	4610      	mov	r0, r2
 8012b12:	4770      	bx	lr

08012b14 <uxr_buffer_request_data>:
 8012b14:	b530      	push	{r4, r5, lr}
 8012b16:	b095      	sub	sp, #84	@ 0x54
 8012b18:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012b1c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	2d00      	cmp	r5, #0
 8012b24:	bf14      	ite	ne
 8012b26:	2101      	movne	r1, #1
 8012b28:	4611      	moveq	r1, r2
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012b30:	f88d 201d 	strb.w	r2, [sp, #29]
 8012b34:	f88d 201e 	strb.w	r2, [sp, #30]
 8012b38:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8012b3c:	d021      	beq.n	8012b82 <uxr_buffer_request_data+0x6e>
 8012b3e:	682a      	ldr	r2, [r5, #0]
 8012b40:	686b      	ldr	r3, [r5, #4]
 8012b42:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8012b46:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012b4a:	2210      	movs	r2, #16
 8012b4c:	2308      	movs	r3, #8
 8012b4e:	2100      	movs	r1, #0
 8012b50:	e9cd 3100 	strd	r3, r1, [sp]
 8012b54:	4620      	mov	r0, r4
 8012b56:	9905      	ldr	r1, [sp, #20]
 8012b58:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b5a:	f7f8 fed7 	bl	800b90c <uxr_prepare_stream_to_write_submessage>
 8012b5e:	b918      	cbnz	r0, 8012b68 <uxr_buffer_request_data+0x54>
 8012b60:	4604      	mov	r4, r0
 8012b62:	4620      	mov	r0, r4
 8012b64:	b015      	add	sp, #84	@ 0x54
 8012b66:	bd30      	pop	{r4, r5, pc}
 8012b68:	9904      	ldr	r1, [sp, #16]
 8012b6a:	aa06      	add	r2, sp, #24
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f7f9 f803 	bl	800bb78 <uxr_init_base_object_request>
 8012b72:	a906      	add	r1, sp, #24
 8012b74:	4604      	mov	r4, r0
 8012b76:	a80c      	add	r0, sp, #48	@ 0x30
 8012b78:	f7fa fafe 	bl	800d178 <uxr_serialize_READ_DATA_Payload>
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	b015      	add	sp, #84	@ 0x54
 8012b80:	bd30      	pop	{r4, r5, pc}
 8012b82:	2208      	movs	r2, #8
 8012b84:	e7e2      	b.n	8012b4c <uxr_buffer_request_data+0x38>
 8012b86:	bf00      	nop

08012b88 <uxr_buffer_cancel_data>:
 8012b88:	b510      	push	{r4, lr}
 8012b8a:	b094      	sub	sp, #80	@ 0x50
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	9202      	str	r2, [sp, #8]
 8012b90:	9205      	str	r2, [sp, #20]
 8012b92:	9301      	str	r3, [sp, #4]
 8012b94:	2201      	movs	r2, #1
 8012b96:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012b9a:	f88d 301e 	strb.w	r3, [sp, #30]
 8012b9e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8012ba2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012ba6:	2308      	movs	r3, #8
 8012ba8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	2210      	movs	r2, #16
 8012bb0:	ab0c      	add	r3, sp, #48	@ 0x30
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	9103      	str	r1, [sp, #12]
 8012bb6:	f7f8 fea9 	bl	800b90c <uxr_prepare_stream_to_write_submessage>
 8012bba:	b918      	cbnz	r0, 8012bc4 <uxr_buffer_cancel_data+0x3c>
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	b014      	add	sp, #80	@ 0x50
 8012bc2:	bd10      	pop	{r4, pc}
 8012bc4:	9905      	ldr	r1, [sp, #20]
 8012bc6:	aa06      	add	r2, sp, #24
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f7f8 ffd5 	bl	800bb78 <uxr_init_base_object_request>
 8012bce:	a906      	add	r1, sp, #24
 8012bd0:	4604      	mov	r4, r0
 8012bd2:	a80c      	add	r0, sp, #48	@ 0x30
 8012bd4:	f7fa fad0 	bl	800d178 <uxr_serialize_READ_DATA_Payload>
 8012bd8:	4620      	mov	r0, r4
 8012bda:	b014      	add	sp, #80	@ 0x50
 8012bdc:	bd10      	pop	{r4, pc}
 8012bde:	bf00      	nop

08012be0 <read_submessage_format>:
 8012be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012be4:	b095      	sub	sp, #84	@ 0x54
 8012be6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8012bea:	b113      	cbz	r3, 8012bf2 <read_submessage_format+0x12>
 8012bec:	b015      	add	sp, #84	@ 0x54
 8012bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4615      	mov	r5, r2
 8012bf6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012bfa:	4607      	mov	r7, r0
 8012bfc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012bfe:	9004      	str	r0, [sp, #16]
 8012c00:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012c02:	9005      	str	r0, [sp, #20]
 8012c04:	1a52      	subs	r2, r2, r1
 8012c06:	a80c      	add	r0, sp, #48	@ 0x30
 8012c08:	4699      	mov	r9, r3
 8012c0a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8012c0e:	f7f5 fe4f 	bl	80088b0 <ucdr_init_buffer>
 8012c12:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012c16:	a80c      	add	r0, sp, #48	@ 0x30
 8012c18:	f7f5 fe1e 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012c1c:	69e2      	ldr	r2, [r4, #28]
 8012c1e:	b19a      	cbz	r2, 8012c48 <read_submessage_format+0x68>
 8012c20:	f1b8 0f07 	cmp.w	r8, #7
 8012c24:	f882 9014 	strb.w	r9, [r2, #20]
 8012c28:	d040      	beq.n	8012cac <read_submessage_format+0xcc>
 8012c2a:	f1b8 0f08 	cmp.w	r8, #8
 8012c2e:	d02e      	beq.n	8012c8e <read_submessage_format+0xae>
 8012c30:	f1b8 0f06 	cmp.w	r8, #6
 8012c34:	d011      	beq.n	8012c5a <read_submessage_format+0x7a>
 8012c36:	2301      	movs	r3, #1
 8012c38:	7513      	strb	r3, [r2, #20]
 8012c3a:	4629      	mov	r1, r5
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f7f5 fe87 	bl	8008950 <ucdr_advance_buffer>
 8012c42:	b015      	add	sp, #84	@ 0x54
 8012c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c48:	f1b8 0f07 	cmp.w	r8, #7
 8012c4c:	d02e      	beq.n	8012cac <read_submessage_format+0xcc>
 8012c4e:	f1b8 0f08 	cmp.w	r8, #8
 8012c52:	d01c      	beq.n	8012c8e <read_submessage_format+0xae>
 8012c54:	f1b8 0f06 	cmp.w	r8, #6
 8012c58:	d1ef      	bne.n	8012c3a <read_submessage_format+0x5a>
 8012c5a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8012c5e:	f1b8 0f00 	cmp.w	r8, #0
 8012c62:	d011      	beq.n	8012c88 <read_submessage_format+0xa8>
 8012c64:	ab0c      	add	r3, sp, #48	@ 0x30
 8012c66:	e9cd 3500 	strd	r3, r5, [sp]
 8012c6a:	2306      	movs	r3, #6
 8012c6c:	f88d 3016 	strb.w	r3, [sp, #22]
 8012c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012c74:	9302      	str	r3, [sp, #8]
 8012c76:	4632      	mov	r2, r6
 8012c78:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012c7c:	4638      	mov	r0, r7
 8012c7e:	47c0      	blx	r8
 8012c80:	2301      	movs	r3, #1
 8012c82:	69e2      	ldr	r2, [r4, #28]
 8012c84:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012c88:	2a00      	cmp	r2, #0
 8012c8a:	d1d4      	bne.n	8012c36 <read_submessage_format+0x56>
 8012c8c:	e7d5      	b.n	8012c3a <read_submessage_format+0x5a>
 8012c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0f8      	beq.n	8012c88 <read_submessage_format+0xa8>
 8012c96:	a906      	add	r1, sp, #24
 8012c98:	a80c      	add	r0, sp, #48	@ 0x30
 8012c9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012c9e:	f7fa fb31 	bl	800d304 <uxr_deserialize_SampleIdentity>
 8012ca2:	b9a0      	cbnz	r0, 8012cce <read_submessage_format+0xee>
 8012ca4:	69e2      	ldr	r2, [r4, #28]
 8012ca6:	2a00      	cmp	r2, #0
 8012ca8:	d1c5      	bne.n	8012c36 <read_submessage_format+0x56>
 8012caa:	e7c6      	b.n	8012c3a <read_submessage_format+0x5a>
 8012cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012cb0:	b13b      	cbz	r3, 8012cc2 <read_submessage_format+0xe2>
 8012cb2:	a906      	add	r1, sp, #24
 8012cb4:	a80c      	add	r0, sp, #48	@ 0x30
 8012cb6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012cba:	f7f9 fff7 	bl	800ccac <uxr_deserialize_BaseObjectRequest>
 8012cbe:	bb60      	cbnz	r0, 8012d1a <read_submessage_format+0x13a>
 8012cc0:	69e2      	ldr	r2, [r4, #28]
 8012cc2:	68a3      	ldr	r3, [r4, #8]
 8012cc4:	442b      	add	r3, r5
 8012cc6:	60a3      	str	r3, [r4, #8]
 8012cc8:	2a00      	cmp	r2, #0
 8012cca:	d1b4      	bne.n	8012c36 <read_submessage_format+0x56>
 8012ccc:	e7b5      	b.n	8012c3a <read_submessage_format+0x5a>
 8012cce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012cd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012cd4:	1a52      	subs	r2, r2, r1
 8012cd6:	eba8 0803 	sub.w	r8, r8, r3
 8012cda:	a80c      	add	r0, sp, #48	@ 0x30
 8012cdc:	f7f5 fde8 	bl	80088b0 <ucdr_init_buffer>
 8012ce0:	44a8      	add	r8, r5
 8012ce2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012ce6:	a80c      	add	r0, sp, #48	@ 0x30
 8012ce8:	f7f5 fdb6 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012cec:	fa1f f888 	uxth.w	r8, r8
 8012cf0:	ab0c      	add	r3, sp, #48	@ 0x30
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	f8cd 8004 	str.w	r8, [sp, #4]
 8012cf8:	2108      	movs	r1, #8
 8012cfa:	f88d 1016 	strb.w	r1, [sp, #22]
 8012cfe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012d02:	9102      	str	r1, [sp, #8]
 8012d04:	ab06      	add	r3, sp, #24
 8012d06:	4632      	mov	r2, r6
 8012d08:	9905      	ldr	r1, [sp, #20]
 8012d0a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8012d0e:	4638      	mov	r0, r7
 8012d10:	47b0      	blx	r6
 8012d12:	2301      	movs	r3, #1
 8012d14:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012d18:	e7c4      	b.n	8012ca4 <read_submessage_format+0xc4>
 8012d1a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012d1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012d20:	1a52      	subs	r2, r2, r1
 8012d22:	a80c      	add	r0, sp, #48	@ 0x30
 8012d24:	eba8 0803 	sub.w	r8, r8, r3
 8012d28:	f7f5 fdc2 	bl	80088b0 <ucdr_init_buffer>
 8012d2c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012d30:	a80c      	add	r0, sp, #48	@ 0x30
 8012d32:	f7f5 fd91 	bl	8008858 <ucdr_set_on_full_buffer_callback>
 8012d36:	ab0c      	add	r3, sp, #48	@ 0x30
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012d3e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012d42:	44a8      	add	r8, r5
 8012d44:	fa1f f888 	uxth.w	r8, r8
 8012d48:	f8cd 8004 	str.w	r8, [sp, #4]
 8012d4c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012d50:	2107      	movs	r1, #7
 8012d52:	f88d 1016 	strb.w	r1, [sp, #22]
 8012d56:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8012d5a:	9102      	str	r1, [sp, #8]
 8012d5c:	4632      	mov	r2, r6
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8012d64:	9905      	ldr	r1, [sp, #20]
 8012d66:	4638      	mov	r0, r7
 8012d68:	47b0      	blx	r6
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012d70:	e7a6      	b.n	8012cc0 <read_submessage_format+0xe0>
 8012d72:	bf00      	nop

08012d74 <uxr_seq_num_add>:
 8012d74:	4408      	add	r0, r1
 8012d76:	b280      	uxth	r0, r0
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop

08012d7c <uxr_seq_num_sub>:
 8012d7c:	1a40      	subs	r0, r0, r1
 8012d7e:	b280      	uxth	r0, r0
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop

08012d84 <uxr_seq_num_cmp>:
 8012d84:	4288      	cmp	r0, r1
 8012d86:	d011      	beq.n	8012dac <uxr_seq_num_cmp+0x28>
 8012d88:	d309      	bcc.n	8012d9e <uxr_seq_num_cmp+0x1a>
 8012d8a:	4288      	cmp	r0, r1
 8012d8c:	d910      	bls.n	8012db0 <uxr_seq_num_cmp+0x2c>
 8012d8e:	1a40      	subs	r0, r0, r1
 8012d90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8012d94:	bfd4      	ite	le
 8012d96:	2001      	movle	r0, #1
 8012d98:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8012d9c:	4770      	bx	lr
 8012d9e:	1a0b      	subs	r3, r1, r0
 8012da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012da4:	daf1      	bge.n	8012d8a <uxr_seq_num_cmp+0x6>
 8012da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012daa:	4770      	bx	lr
 8012dac:	2000      	movs	r0, #0
 8012dae:	4770      	bx	lr
 8012db0:	2001      	movs	r0, #1
 8012db2:	4770      	bx	lr

08012db4 <uxr_init_framing_io>:
 8012db4:	2300      	movs	r3, #0
 8012db6:	7041      	strb	r1, [r0, #1]
 8012db8:	7003      	strb	r3, [r0, #0]
 8012dba:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop

08012dc0 <uxr_write_framed_msg>:
 8012dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	4617      	mov	r7, r2
 8012dc6:	7842      	ldrb	r2, [r0, #1]
 8012dc8:	b083      	sub	sp, #12
 8012dca:	460e      	mov	r6, r1
 8012dcc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8012dd0:	469a      	mov	sl, r3
 8012dd2:	2901      	cmp	r1, #1
 8012dd4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8012dd8:	4604      	mov	r4, r0
 8012dda:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8012dde:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012de2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8012de6:	f240 8137 	bls.w	8013058 <uxr_write_framed_msg+0x298>
 8012dea:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012dee:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012df2:	2901      	cmp	r1, #1
 8012df4:	f04f 0202 	mov.w	r2, #2
 8012df8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012dfc:	f240 808f 	bls.w	8012f1e <uxr_write_framed_msg+0x15e>
 8012e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e02:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8012e06:	b2dd      	uxtb	r5, r3
 8012e08:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012e0c:	2203      	movs	r2, #3
 8012e0e:	2901      	cmp	r1, #1
 8012e10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012e14:	f240 809a 	bls.w	8012f4c <uxr_write_framed_msg+0x18c>
 8012e18:	18a1      	adds	r1, r4, r2
 8012e1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e1c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012e20:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012e24:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012e28:	3201      	adds	r2, #1
 8012e2a:	2801      	cmp	r0, #1
 8012e2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012e30:	f240 80a0 	bls.w	8012f74 <uxr_write_framed_msg+0x1b4>
 8012e34:	18a0      	adds	r0, r4, r2
 8012e36:	3201      	adds	r2, #1
 8012e38:	b2d2      	uxtb	r2, r2
 8012e3a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012e3e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	f000 80a9 	beq.w	8012f9a <uxr_write_framed_msg+0x1da>
 8012e48:	f04f 0900 	mov.w	r9, #0
 8012e4c:	46c8      	mov	r8, r9
 8012e4e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012e52:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012e56:	2901      	cmp	r1, #1
 8012e58:	f240 80c3 	bls.w	8012fe2 <uxr_write_framed_msg+0x222>
 8012e5c:	2a29      	cmp	r2, #41	@ 0x29
 8012e5e:	f200 809f 	bhi.w	8012fa0 <uxr_write_framed_msg+0x1e0>
 8012e62:	18a1      	adds	r1, r4, r2
 8012e64:	3201      	adds	r2, #1
 8012e66:	b2d2      	uxtb	r2, r2
 8012e68:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012e6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012e70:	ea89 0303 	eor.w	r3, r9, r3
 8012e74:	498c      	ldr	r1, [pc, #560]	@ (80130a8 <uxr_write_framed_msg+0x2e8>)
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	f108 0801 	add.w	r8, r8, #1
 8012e7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012e80:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e86:	4543      	cmp	r3, r8
 8012e88:	d8e1      	bhi.n	8012e4e <uxr_write_framed_msg+0x8e>
 8012e8a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012e8e:	fa5f f889 	uxtb.w	r8, r9
 8012e92:	9301      	str	r3, [sp, #4]
 8012e94:	f04f 0900 	mov.w	r9, #0
 8012e98:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012e9c:	fa5f f18a 	uxtb.w	r1, sl
 8012ea0:	2901      	cmp	r1, #1
 8012ea2:	d921      	bls.n	8012ee8 <uxr_write_framed_msg+0x128>
 8012ea4:	2a29      	cmp	r2, #41	@ 0x29
 8012ea6:	f240 80af 	bls.w	8013008 <uxr_write_framed_msg+0x248>
 8012eaa:	2500      	movs	r5, #0
 8012eac:	e000      	b.n	8012eb0 <uxr_write_framed_msg+0xf0>
 8012eae:	b160      	cbz	r0, 8012eca <uxr_write_framed_msg+0x10a>
 8012eb0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012eb4:	1b52      	subs	r2, r2, r5
 8012eb6:	465b      	mov	r3, fp
 8012eb8:	4421      	add	r1, r4
 8012eba:	4638      	mov	r0, r7
 8012ebc:	47b0      	blx	r6
 8012ebe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012ec2:	4405      	add	r5, r0
 8012ec4:	4295      	cmp	r5, r2
 8012ec6:	d3f2      	bcc.n	8012eae <uxr_write_framed_msg+0xee>
 8012ec8:	d003      	beq.n	8012ed2 <uxr_write_framed_msg+0x112>
 8012eca:	2000      	movs	r0, #0
 8012ecc:	b003      	add	sp, #12
 8012ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed2:	fa5f f18a 	uxtb.w	r1, sl
 8012ed6:	f04f 0300 	mov.w	r3, #0
 8012eda:	2901      	cmp	r1, #1
 8012edc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012ee0:	f04f 0200 	mov.w	r2, #0
 8012ee4:	f200 8090 	bhi.w	8013008 <uxr_write_framed_msg+0x248>
 8012ee8:	1c51      	adds	r1, r2, #1
 8012eea:	b2c9      	uxtb	r1, r1
 8012eec:	2929      	cmp	r1, #41	@ 0x29
 8012eee:	d8dc      	bhi.n	8012eaa <uxr_write_framed_msg+0xea>
 8012ef0:	18a5      	adds	r5, r4, r2
 8012ef2:	4421      	add	r1, r4
 8012ef4:	3202      	adds	r2, #2
 8012ef6:	f088 0820 	eor.w	r8, r8, #32
 8012efa:	4648      	mov	r0, r9
 8012efc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8012f00:	b2d2      	uxtb	r2, r2
 8012f02:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8012f06:	f04f 0901 	mov.w	r9, #1
 8012f0a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012f0e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012f12:	2800      	cmp	r0, #0
 8012f14:	f040 8085 	bne.w	8013022 <uxr_write_framed_msg+0x262>
 8012f18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012f1c:	e7bc      	b.n	8012e98 <uxr_write_framed_msg+0xd8>
 8012f1e:	4611      	mov	r1, r2
 8012f20:	f04f 0c03 	mov.w	ip, #3
 8012f24:	2204      	movs	r2, #4
 8012f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f28:	4421      	add	r1, r4
 8012f2a:	b2dd      	uxtb	r5, r3
 8012f2c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8012f30:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012f34:	44a4      	add	ip, r4
 8012f36:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012f3a:	f080 0020 	eor.w	r0, r0, #32
 8012f3e:	2901      	cmp	r1, #1
 8012f40:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012f44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012f48:	f63f af66 	bhi.w	8012e18 <uxr_write_framed_msg+0x58>
 8012f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012f4e:	18a0      	adds	r0, r4, r2
 8012f50:	f085 0520 	eor.w	r5, r5, #32
 8012f54:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012f58:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012f5c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012f60:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012f64:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012f68:	3202      	adds	r2, #2
 8012f6a:	2801      	cmp	r0, #1
 8012f6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012f70:	f63f af60 	bhi.w	8012e34 <uxr_write_framed_msg+0x74>
 8012f74:	1c50      	adds	r0, r2, #1
 8012f76:	18a5      	adds	r5, r4, r2
 8012f78:	fa54 f080 	uxtab	r0, r4, r0
 8012f7c:	3202      	adds	r2, #2
 8012f7e:	f081 0120 	eor.w	r1, r1, #32
 8012f82:	b2d2      	uxtb	r2, r2
 8012f84:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012f88:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012f8c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012f90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f47f af57 	bne.w	8012e48 <uxr_write_framed_msg+0x88>
 8012f9a:	9301      	str	r3, [sp, #4]
 8012f9c:	4698      	mov	r8, r3
 8012f9e:	e779      	b.n	8012e94 <uxr_write_framed_msg+0xd4>
 8012fa0:	2500      	movs	r5, #0
 8012fa2:	e001      	b.n	8012fa8 <uxr_write_framed_msg+0x1e8>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	d090      	beq.n	8012eca <uxr_write_framed_msg+0x10a>
 8012fa8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012fac:	1b52      	subs	r2, r2, r5
 8012fae:	465b      	mov	r3, fp
 8012fb0:	4421      	add	r1, r4
 8012fb2:	4638      	mov	r0, r7
 8012fb4:	47b0      	blx	r6
 8012fb6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012fba:	4405      	add	r5, r0
 8012fbc:	4295      	cmp	r5, r2
 8012fbe:	d3f1      	bcc.n	8012fa4 <uxr_write_framed_msg+0x1e4>
 8012fc0:	d183      	bne.n	8012eca <uxr_write_framed_msg+0x10a>
 8012fc2:	f04f 0300 	mov.w	r3, #0
 8012fc6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012fcc:	4543      	cmp	r3, r8
 8012fce:	d964      	bls.n	801309a <uxr_write_framed_msg+0x2da>
 8012fd0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012fd4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012fd8:	2901      	cmp	r1, #1
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	f63f af3d 	bhi.w	8012e5c <uxr_write_framed_msg+0x9c>
 8012fe2:	1c51      	adds	r1, r2, #1
 8012fe4:	b2c9      	uxtb	r1, r1
 8012fe6:	2929      	cmp	r1, #41	@ 0x29
 8012fe8:	d8da      	bhi.n	8012fa0 <uxr_write_framed_msg+0x1e0>
 8012fea:	18a0      	adds	r0, r4, r2
 8012fec:	4421      	add	r1, r4
 8012fee:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012ff2:	3202      	adds	r2, #2
 8012ff4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012ff8:	b2d2      	uxtb	r2, r2
 8012ffa:	f083 0020 	eor.w	r0, r3, #32
 8012ffe:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013002:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013006:	e733      	b.n	8012e70 <uxr_write_framed_msg+0xb0>
 8013008:	18a1      	adds	r1, r4, r2
 801300a:	3201      	adds	r2, #1
 801300c:	4648      	mov	r0, r9
 801300e:	b2d2      	uxtb	r2, r2
 8013010:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8013014:	f04f 0901 	mov.w	r9, #1
 8013018:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801301c:	2800      	cmp	r0, #0
 801301e:	f43f af7b 	beq.w	8012f18 <uxr_write_framed_msg+0x158>
 8013022:	2500      	movs	r5, #0
 8013024:	e002      	b.n	801302c <uxr_write_framed_msg+0x26c>
 8013026:	2800      	cmp	r0, #0
 8013028:	f43f af4f 	beq.w	8012eca <uxr_write_framed_msg+0x10a>
 801302c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013030:	1b52      	subs	r2, r2, r5
 8013032:	465b      	mov	r3, fp
 8013034:	4421      	add	r1, r4
 8013036:	4638      	mov	r0, r7
 8013038:	47b0      	blx	r6
 801303a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801303e:	4405      	add	r5, r0
 8013040:	4295      	cmp	r5, r2
 8013042:	d3f0      	bcc.n	8013026 <uxr_write_framed_msg+0x266>
 8013044:	f47f af41 	bne.w	8012eca <uxr_write_framed_msg+0x10a>
 8013048:	2300      	movs	r3, #0
 801304a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801304e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013050:	b298      	uxth	r0, r3
 8013052:	b003      	add	sp, #12
 8013054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013058:	217d      	movs	r1, #125	@ 0x7d
 801305a:	f082 0220 	eor.w	r2, r2, #32
 801305e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013062:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013066:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801306a:	2901      	cmp	r1, #1
 801306c:	f04f 0203 	mov.w	r2, #3
 8013070:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013074:	d804      	bhi.n	8013080 <uxr_write_framed_msg+0x2c0>
 8013076:	4611      	mov	r1, r2
 8013078:	f04f 0c04 	mov.w	ip, #4
 801307c:	2205      	movs	r2, #5
 801307e:	e752      	b.n	8012f26 <uxr_write_framed_msg+0x166>
 8013080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013082:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8013086:	b2dd      	uxtb	r5, r3
 8013088:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801308c:	2204      	movs	r2, #4
 801308e:	2901      	cmp	r1, #1
 8013090:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013094:	f63f aec0 	bhi.w	8012e18 <uxr_write_framed_msg+0x58>
 8013098:	e758      	b.n	8012f4c <uxr_write_framed_msg+0x18c>
 801309a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801309e:	fa5f f889 	uxtb.w	r8, r9
 80130a2:	9301      	str	r3, [sp, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	e6f5      	b.n	8012e94 <uxr_write_framed_msg+0xd4>
 80130a8:	08016080 	.word	0x08016080

080130ac <uxr_framing_read_transport>:
 80130ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b0:	4604      	mov	r4, r0
 80130b2:	b083      	sub	sp, #12
 80130b4:	461f      	mov	r7, r3
 80130b6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80130ba:	4689      	mov	r9, r1
 80130bc:	4692      	mov	sl, r2
 80130be:	f7f8 ff09 	bl	800bed4 <uxr_millis>
 80130c2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80130c6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80130ca:	42b3      	cmp	r3, r6
 80130cc:	4680      	mov	r8, r0
 80130ce:	d061      	beq.n	8013194 <uxr_framing_read_transport+0xe8>
 80130d0:	d81c      	bhi.n	801310c <uxr_framing_read_transport+0x60>
 80130d2:	1e75      	subs	r5, r6, #1
 80130d4:	1aed      	subs	r5, r5, r3
 80130d6:	b2ed      	uxtb	r5, r5
 80130d8:	2600      	movs	r6, #0
 80130da:	455d      	cmp	r5, fp
 80130dc:	d81f      	bhi.n	801311e <uxr_framing_read_transport+0x72>
 80130de:	19ab      	adds	r3, r5, r6
 80130e0:	455b      	cmp	r3, fp
 80130e2:	bf84      	itt	hi
 80130e4:	ebab 0605 	subhi.w	r6, fp, r5
 80130e8:	b2f6      	uxtbhi	r6, r6
 80130ea:	b9ed      	cbnz	r5, 8013128 <uxr_framing_read_transport+0x7c>
 80130ec:	f04f 0b00 	mov.w	fp, #0
 80130f0:	f7f8 fef0 	bl	800bed4 <uxr_millis>
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	eba0 0808 	sub.w	r8, r0, r8
 80130fa:	eba3 0308 	sub.w	r3, r3, r8
 80130fe:	4658      	mov	r0, fp
 8013100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013104:	603b      	str	r3, [r7, #0]
 8013106:	b003      	add	sp, #12
 8013108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310c:	2e00      	cmp	r6, #0
 801310e:	d049      	beq.n	80131a4 <uxr_framing_read_transport+0xf8>
 8013110:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8013114:	b2ed      	uxtb	r5, r5
 8013116:	3e01      	subs	r6, #1
 8013118:	455d      	cmp	r5, fp
 801311a:	b2f6      	uxtb	r6, r6
 801311c:	d9df      	bls.n	80130de <uxr_framing_read_transport+0x32>
 801311e:	fa5f f58b 	uxtb.w	r5, fp
 8013122:	2600      	movs	r6, #0
 8013124:	2d00      	cmp	r5, #0
 8013126:	d0e1      	beq.n	80130ec <uxr_framing_read_transport+0x40>
 8013128:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801312c:	3102      	adds	r1, #2
 801312e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	4421      	add	r1, r4
 8013136:	462a      	mov	r2, r5
 8013138:	4650      	mov	r0, sl
 801313a:	47c8      	blx	r9
 801313c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013140:	4a1a      	ldr	r2, [pc, #104]	@ (80131ac <uxr_framing_read_transport+0x100>)
 8013142:	4403      	add	r3, r0
 8013144:	0859      	lsrs	r1, r3, #1
 8013146:	fba2 2101 	umull	r2, r1, r2, r1
 801314a:	0889      	lsrs	r1, r1, #2
 801314c:	222a      	movs	r2, #42	@ 0x2a
 801314e:	fb02 3111 	mls	r1, r2, r1, r3
 8013152:	4683      	mov	fp, r0
 8013154:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8013158:	2800      	cmp	r0, #0
 801315a:	d0c7      	beq.n	80130ec <uxr_framing_read_transport+0x40>
 801315c:	42a8      	cmp	r0, r5
 801315e:	d1c7      	bne.n	80130f0 <uxr_framing_read_transport+0x44>
 8013160:	2e00      	cmp	r6, #0
 8013162:	d0c5      	beq.n	80130f0 <uxr_framing_read_transport+0x44>
 8013164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	3102      	adds	r1, #2
 801316a:	4632      	mov	r2, r6
 801316c:	4421      	add	r1, r4
 801316e:	2300      	movs	r3, #0
 8013170:	4650      	mov	r0, sl
 8013172:	47c8      	blx	r9
 8013174:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013178:	4a0c      	ldr	r2, [pc, #48]	@ (80131ac <uxr_framing_read_transport+0x100>)
 801317a:	180b      	adds	r3, r1, r0
 801317c:	0859      	lsrs	r1, r3, #1
 801317e:	fba2 1201 	umull	r1, r2, r2, r1
 8013182:	0892      	lsrs	r2, r2, #2
 8013184:	212a      	movs	r1, #42	@ 0x2a
 8013186:	fb01 3312 	mls	r3, r1, r2, r3
 801318a:	eb00 0b05 	add.w	fp, r0, r5
 801318e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013192:	e7ad      	b.n	80130f0 <uxr_framing_read_transport+0x44>
 8013194:	2600      	movs	r6, #0
 8013196:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801319a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801319c:	d9bf      	bls.n	801311e <uxr_framing_read_transport+0x72>
 801319e:	2102      	movs	r1, #2
 80131a0:	2529      	movs	r5, #41	@ 0x29
 80131a2:	e7c4      	b.n	801312e <uxr_framing_read_transport+0x82>
 80131a4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80131a8:	b2ed      	uxtb	r5, r5
 80131aa:	e796      	b.n	80130da <uxr_framing_read_transport+0x2e>
 80131ac:	30c30c31 	.word	0x30c30c31

080131b0 <uxr_read_framed_msg>:
 80131b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b4:	461e      	mov	r6, r3
 80131b6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80131ba:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80131be:	429d      	cmp	r5, r3
 80131c0:	b083      	sub	sp, #12
 80131c2:	4604      	mov	r4, r0
 80131c4:	4688      	mov	r8, r1
 80131c6:	4691      	mov	r9, r2
 80131c8:	f000 8188 	beq.w	80134dc <uxr_read_framed_msg+0x32c>
 80131cc:	7823      	ldrb	r3, [r4, #0]
 80131ce:	4dc1      	ldr	r5, [pc, #772]	@ (80134d4 <uxr_read_framed_msg+0x324>)
 80131d0:	4fc1      	ldr	r7, [pc, #772]	@ (80134d8 <uxr_read_framed_msg+0x328>)
 80131d2:	2b07      	cmp	r3, #7
 80131d4:	d8fd      	bhi.n	80131d2 <uxr_read_framed_msg+0x22>
 80131d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80131da:	0115      	.short	0x0115
 80131dc:	00d600f6 	.word	0x00d600f6
 80131e0:	009000b9 	.word	0x009000b9
 80131e4:	0030004d 	.word	0x0030004d
 80131e8:	0008      	.short	0x0008
 80131ea:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80131ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80131f2:	4299      	cmp	r1, r3
 80131f4:	f000 814a 	beq.w	801348c <uxr_read_framed_msg+0x2dc>
 80131f8:	18e2      	adds	r2, r4, r3
 80131fa:	7892      	ldrb	r2, [r2, #2]
 80131fc:	2a7d      	cmp	r2, #125	@ 0x7d
 80131fe:	f000 8199 	beq.w	8013534 <uxr_read_framed_msg+0x384>
 8013202:	3301      	adds	r3, #1
 8013204:	0858      	lsrs	r0, r3, #1
 8013206:	fba5 1000 	umull	r1, r0, r5, r0
 801320a:	0880      	lsrs	r0, r0, #2
 801320c:	212a      	movs	r1, #42	@ 0x2a
 801320e:	fb01 3310 	mls	r3, r1, r0, r3
 8013212:	2a7e      	cmp	r2, #126	@ 0x7e
 8013214:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013218:	f000 8252 	beq.w	80136c0 <uxr_read_framed_msg+0x510>
 801321c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801321e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013220:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013224:	b29b      	uxth	r3, r3
 8013226:	2200      	movs	r2, #0
 8013228:	4299      	cmp	r1, r3
 801322a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801322c:	7022      	strb	r2, [r4, #0]
 801322e:	f000 8179 	beq.w	8013524 <uxr_read_framed_msg+0x374>
 8013232:	2000      	movs	r0, #0
 8013234:	b003      	add	sp, #12
 8013236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801323e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013242:	4299      	cmp	r1, r3
 8013244:	f000 8131 	beq.w	80134aa <uxr_read_framed_msg+0x2fa>
 8013248:	18e2      	adds	r2, r4, r3
 801324a:	7890      	ldrb	r0, [r2, #2]
 801324c:	287d      	cmp	r0, #125	@ 0x7d
 801324e:	f000 8190 	beq.w	8013572 <uxr_read_framed_msg+0x3c2>
 8013252:	3301      	adds	r3, #1
 8013254:	085a      	lsrs	r2, r3, #1
 8013256:	fba5 1202 	umull	r1, r2, r5, r2
 801325a:	0892      	lsrs	r2, r2, #2
 801325c:	212a      	movs	r1, #42	@ 0x2a
 801325e:	fb01 3312 	mls	r3, r1, r2, r3
 8013262:	287e      	cmp	r0, #126	@ 0x7e
 8013264:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013268:	f000 821a 	beq.w	80136a0 <uxr_read_framed_msg+0x4f0>
 801326c:	2307      	movs	r3, #7
 801326e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8013270:	7023      	strb	r3, [r4, #0]
 8013272:	e7ae      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 8013274:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013276:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801327a:	459e      	cmp	lr, r3
 801327c:	d938      	bls.n	80132f0 <uxr_read_framed_msg+0x140>
 801327e:	ee07 8a90 	vmov	s15, r8
 8013282:	212a      	movs	r1, #42	@ 0x2a
 8013284:	e020      	b.n	80132c8 <uxr_read_framed_msg+0x118>
 8013286:	f89b c002 	ldrb.w	ip, [fp, #2]
 801328a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801328e:	f000 80d4 	beq.w	801343a <uxr_read_framed_msg+0x28a>
 8013292:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013296:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801329a:	f000 8219 	beq.w	80136d0 <uxr_read_framed_msg+0x520>
 801329e:	f806 c003 	strb.w	ip, [r6, r3]
 80132a2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80132a6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80132a8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80132ac:	ea8a 000c 	eor.w	r0, sl, ip
 80132b0:	b2c0      	uxtb	r0, r0
 80132b2:	3301      	adds	r3, #1
 80132b4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80132be:	4573      	cmp	r3, lr
 80132c0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80132c2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80132c4:	f080 8120 	bcs.w	8013508 <uxr_read_framed_msg+0x358>
 80132c8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80132cc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80132d0:	f100 0c01 	add.w	ip, r0, #1
 80132d4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80132d8:	fba5 8202 	umull	r8, r2, r5, r2
 80132dc:	0892      	lsrs	r2, r2, #2
 80132de:	4582      	cmp	sl, r0
 80132e0:	eb04 0b00 	add.w	fp, r4, r0
 80132e4:	fb01 c212 	mls	r2, r1, r2, ip
 80132e8:	d1cd      	bne.n	8013286 <uxr_read_framed_msg+0xd6>
 80132ea:	ee17 8a90 	vmov	r8, s15
 80132ee:	459e      	cmp	lr, r3
 80132f0:	f040 8111 	bne.w	8013516 <uxr_read_framed_msg+0x366>
 80132f4:	2306      	movs	r3, #6
 80132f6:	7023      	strb	r3, [r4, #0]
 80132f8:	e76b      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 80132fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80132fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013302:	4298      	cmp	r0, r3
 8013304:	f000 80c2 	beq.w	801348c <uxr_read_framed_msg+0x2dc>
 8013308:	18e2      	adds	r2, r4, r3
 801330a:	7891      	ldrb	r1, [r2, #2]
 801330c:	297d      	cmp	r1, #125	@ 0x7d
 801330e:	f000 814c 	beq.w	80135aa <uxr_read_framed_msg+0x3fa>
 8013312:	3301      	adds	r3, #1
 8013314:	085a      	lsrs	r2, r3, #1
 8013316:	fba5 0202 	umull	r0, r2, r5, r2
 801331a:	0892      	lsrs	r2, r2, #2
 801331c:	202a      	movs	r0, #42	@ 0x2a
 801331e:	fb00 3312 	mls	r3, r0, r2, r3
 8013322:	297e      	cmp	r1, #126	@ 0x7e
 8013324:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013328:	f000 81ca 	beq.w	80136c0 <uxr_read_framed_msg+0x510>
 801332c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801332e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013334:	b29b      	uxth	r3, r3
 8013336:	2000      	movs	r0, #0
 8013338:	428b      	cmp	r3, r1
 801333a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801333c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801333e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013340:	f240 80df 	bls.w	8013502 <uxr_read_framed_msg+0x352>
 8013344:	7020      	strb	r0, [r4, #0]
 8013346:	b003      	add	sp, #12
 8013348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013350:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013354:	4299      	cmp	r1, r3
 8013356:	f000 80a8 	beq.w	80134aa <uxr_read_framed_msg+0x2fa>
 801335a:	18e2      	adds	r2, r4, r3
 801335c:	7890      	ldrb	r0, [r2, #2]
 801335e:	287d      	cmp	r0, #125	@ 0x7d
 8013360:	f000 8164 	beq.w	801362c <uxr_read_framed_msg+0x47c>
 8013364:	3301      	adds	r3, #1
 8013366:	085a      	lsrs	r2, r3, #1
 8013368:	fba5 1202 	umull	r1, r2, r5, r2
 801336c:	0892      	lsrs	r2, r2, #2
 801336e:	212a      	movs	r1, #42	@ 0x2a
 8013370:	fb01 3312 	mls	r3, r1, r2, r3
 8013374:	287e      	cmp	r0, #126	@ 0x7e
 8013376:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801337a:	f000 8191 	beq.w	80136a0 <uxr_read_framed_msg+0x4f0>
 801337e:	2304      	movs	r3, #4
 8013380:	8620      	strh	r0, [r4, #48]	@ 0x30
 8013382:	7023      	strb	r3, [r4, #0]
 8013384:	e725      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 8013386:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801338a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801338e:	4290      	cmp	r0, r2
 8013390:	f000 80b3 	beq.w	80134fa <uxr_read_framed_msg+0x34a>
 8013394:	18a3      	adds	r3, r4, r2
 8013396:	7899      	ldrb	r1, [r3, #2]
 8013398:	297d      	cmp	r1, #125	@ 0x7d
 801339a:	f000 8164 	beq.w	8013666 <uxr_read_framed_msg+0x4b6>
 801339e:	3201      	adds	r2, #1
 80133a0:	0850      	lsrs	r0, r2, #1
 80133a2:	fba5 3000 	umull	r3, r0, r5, r0
 80133a6:	0880      	lsrs	r0, r0, #2
 80133a8:	232a      	movs	r3, #42	@ 0x2a
 80133aa:	fb03 2210 	mls	r2, r3, r0, r2
 80133ae:	297e      	cmp	r1, #126	@ 0x7e
 80133b0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80133b4:	f000 8188 	beq.w	80136c8 <uxr_read_framed_msg+0x518>
 80133b8:	7863      	ldrb	r3, [r4, #1]
 80133ba:	428b      	cmp	r3, r1
 80133bc:	bf0c      	ite	eq
 80133be:	2303      	moveq	r3, #3
 80133c0:	2300      	movne	r3, #0
 80133c2:	7023      	strb	r3, [r4, #0]
 80133c4:	e705      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 80133c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80133ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80133ce:	2200      	movs	r2, #0
 80133d0:	4299      	cmp	r1, r3
 80133d2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80133d6:	d06c      	beq.n	80134b2 <uxr_read_framed_msg+0x302>
 80133d8:	18e2      	adds	r2, r4, r3
 80133da:	7890      	ldrb	r0, [r2, #2]
 80133dc:	287d      	cmp	r0, #125	@ 0x7d
 80133de:	f000 8101 	beq.w	80135e4 <uxr_read_framed_msg+0x434>
 80133e2:	3301      	adds	r3, #1
 80133e4:	085a      	lsrs	r2, r3, #1
 80133e6:	fba5 1202 	umull	r1, r2, r5, r2
 80133ea:	0892      	lsrs	r2, r2, #2
 80133ec:	212a      	movs	r1, #42	@ 0x2a
 80133ee:	fb01 3312 	mls	r3, r1, r2, r3
 80133f2:	287e      	cmp	r0, #126	@ 0x7e
 80133f4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80133f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80133fc:	d059      	beq.n	80134b2 <uxr_read_framed_msg+0x302>
 80133fe:	2302      	movs	r3, #2
 8013400:	7023      	strb	r3, [r4, #0]
 8013402:	e6e6      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 8013404:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013408:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801340c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013410:	1c51      	adds	r1, r2, #1
 8013412:	084b      	lsrs	r3, r1, #1
 8013414:	fba5 c303 	umull	ip, r3, r5, r3
 8013418:	089b      	lsrs	r3, r3, #2
 801341a:	fb0e 1313 	mls	r3, lr, r3, r1
 801341e:	4592      	cmp	sl, r2
 8013420:	eb04 0002 	add.w	r0, r4, r2
 8013424:	b2da      	uxtb	r2, r3
 8013426:	f43f af04 	beq.w	8013232 <uxr_read_framed_msg+0x82>
 801342a:	7883      	ldrb	r3, [r0, #2]
 801342c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013430:	2b7e      	cmp	r3, #126	@ 0x7e
 8013432:	d1ed      	bne.n	8013410 <uxr_read_framed_msg+0x260>
 8013434:	2301      	movs	r3, #1
 8013436:	7023      	strb	r3, [r4, #0]
 8013438:	e6cb      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 801343a:	f100 0c01 	add.w	ip, r0, #1
 801343e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013442:	fba5 8202 	umull	r8, r2, r5, r2
 8013446:	0892      	lsrs	r2, r2, #2
 8013448:	fb01 c212 	mls	r2, r1, r2, ip
 801344c:	eb04 0c02 	add.w	ip, r4, r2
 8013450:	b2d2      	uxtb	r2, r2
 8013452:	4592      	cmp	sl, r2
 8013454:	f100 0002 	add.w	r0, r0, #2
 8013458:	f43f af47 	beq.w	80132ea <uxr_read_framed_msg+0x13a>
 801345c:	0842      	lsrs	r2, r0, #1
 801345e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8013462:	fba5 8202 	umull	r8, r2, r5, r2
 8013466:	0892      	lsrs	r2, r2, #2
 8013468:	fb01 0012 	mls	r0, r1, r2, r0
 801346c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8013470:	f08a 0c20 	eor.w	ip, sl, #32
 8013474:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8013478:	f47f af11 	bne.w	801329e <uxr_read_framed_msg+0xee>
 801347c:	459e      	cmp	lr, r3
 801347e:	ee17 8a90 	vmov	r8, s15
 8013482:	f43f af37 	beq.w	80132f4 <uxr_read_framed_msg+0x144>
 8013486:	2301      	movs	r3, #1
 8013488:	7023      	strb	r3, [r4, #0]
 801348a:	e6a2      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 801348c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	2301      	movs	r3, #1
 8013492:	9301      	str	r3, [sp, #4]
 8013494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013496:	464a      	mov	r2, r9
 8013498:	4641      	mov	r1, r8
 801349a:	4620      	mov	r0, r4
 801349c:	f7ff fe06 	bl	80130ac <uxr_framing_read_transport>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	f43f aec6 	beq.w	8013232 <uxr_read_framed_msg+0x82>
 80134a6:	7823      	ldrb	r3, [r4, #0]
 80134a8:	e693      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 80134aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	2302      	movs	r3, #2
 80134b0:	e7ef      	b.n	8013492 <uxr_read_framed_msg+0x2e2>
 80134b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	2304      	movs	r3, #4
 80134b8:	9301      	str	r3, [sp, #4]
 80134ba:	464a      	mov	r2, r9
 80134bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134be:	4641      	mov	r1, r8
 80134c0:	4620      	mov	r0, r4
 80134c2:	f7ff fdf3 	bl	80130ac <uxr_framing_read_transport>
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d1ed      	bne.n	80134a6 <uxr_read_framed_msg+0x2f6>
 80134ca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80134ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80134d0:	d0e9      	beq.n	80134a6 <uxr_read_framed_msg+0x2f6>
 80134d2:	e6ae      	b.n	8013232 <uxr_read_framed_msg+0x82>
 80134d4:	30c30c31 	.word	0x30c30c31
 80134d8:	08016080 	.word	0x08016080
 80134dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	2305      	movs	r3, #5
 80134e2:	9301      	str	r3, [sp, #4]
 80134e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134e6:	f7ff fde1 	bl	80130ac <uxr_framing_read_transport>
 80134ea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80134ee:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80134f2:	429a      	cmp	r2, r3
 80134f4:	f43f ae9d 	beq.w	8013232 <uxr_read_framed_msg+0x82>
 80134f8:	e668      	b.n	80131cc <uxr_read_framed_msg+0x1c>
 80134fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134fc:	9300      	str	r3, [sp, #0]
 80134fe:	2303      	movs	r3, #3
 8013500:	e7c7      	b.n	8013492 <uxr_read_framed_msg+0x2e2>
 8013502:	2305      	movs	r3, #5
 8013504:	7023      	strb	r3, [r4, #0]
 8013506:	e664      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 8013508:	ee17 8a90 	vmov	r8, s15
 801350c:	f43f aef2 	beq.w	80132f4 <uxr_read_framed_msg+0x144>
 8013510:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013514:	d08e      	beq.n	8013434 <uxr_read_framed_msg+0x284>
 8013516:	ebae 0303 	sub.w	r3, lr, r3
 801351a:	3302      	adds	r3, #2
 801351c:	9301      	str	r3, [sp, #4]
 801351e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	e7b7      	b.n	8013494 <uxr_read_framed_msg+0x2e4>
 8013524:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013526:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801352a:	7013      	strb	r3, [r2, #0]
 801352c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801352e:	b003      	add	sp, #12
 8013530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013534:	f103 0c01 	add.w	ip, r3, #1
 8013538:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801353c:	fba5 0202 	umull	r0, r2, r5, r2
 8013540:	0892      	lsrs	r2, r2, #2
 8013542:	202a      	movs	r0, #42	@ 0x2a
 8013544:	fb00 c212 	mls	r2, r0, r2, ip
 8013548:	fa5f fc82 	uxtb.w	ip, r2
 801354c:	4561      	cmp	r1, ip
 801354e:	d09d      	beq.n	801348c <uxr_read_framed_msg+0x2dc>
 8013550:	3302      	adds	r3, #2
 8013552:	4422      	add	r2, r4
 8013554:	0859      	lsrs	r1, r3, #1
 8013556:	7892      	ldrb	r2, [r2, #2]
 8013558:	fba5 c101 	umull	ip, r1, r5, r1
 801355c:	0889      	lsrs	r1, r1, #2
 801355e:	fb00 3311 	mls	r3, r0, r1, r3
 8013562:	2a7e      	cmp	r2, #126	@ 0x7e
 8013564:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013568:	f000 80aa 	beq.w	80136c0 <uxr_read_framed_msg+0x510>
 801356c:	f082 0220 	eor.w	r2, r2, #32
 8013570:	e654      	b.n	801321c <uxr_read_framed_msg+0x6c>
 8013572:	1c58      	adds	r0, r3, #1
 8013574:	0842      	lsrs	r2, r0, #1
 8013576:	fba5 c202 	umull	ip, r2, r5, r2
 801357a:	0892      	lsrs	r2, r2, #2
 801357c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013580:	fb0c 0212 	mls	r2, ip, r2, r0
 8013584:	b2d0      	uxtb	r0, r2
 8013586:	4281      	cmp	r1, r0
 8013588:	d08f      	beq.n	80134aa <uxr_read_framed_msg+0x2fa>
 801358a:	4422      	add	r2, r4
 801358c:	3302      	adds	r3, #2
 801358e:	7890      	ldrb	r0, [r2, #2]
 8013590:	085a      	lsrs	r2, r3, #1
 8013592:	fba5 1202 	umull	r1, r2, r5, r2
 8013596:	0892      	lsrs	r2, r2, #2
 8013598:	fb0c 3312 	mls	r3, ip, r2, r3
 801359c:	287e      	cmp	r0, #126	@ 0x7e
 801359e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80135a2:	d07d      	beq.n	80136a0 <uxr_read_framed_msg+0x4f0>
 80135a4:	f080 0020 	eor.w	r0, r0, #32
 80135a8:	e660      	b.n	801326c <uxr_read_framed_msg+0xbc>
 80135aa:	1c59      	adds	r1, r3, #1
 80135ac:	084a      	lsrs	r2, r1, #1
 80135ae:	fba5 c202 	umull	ip, r2, r5, r2
 80135b2:	0892      	lsrs	r2, r2, #2
 80135b4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80135b8:	fb0c 1212 	mls	r2, ip, r2, r1
 80135bc:	b2d1      	uxtb	r1, r2
 80135be:	4288      	cmp	r0, r1
 80135c0:	f43f af64 	beq.w	801348c <uxr_read_framed_msg+0x2dc>
 80135c4:	4422      	add	r2, r4
 80135c6:	3302      	adds	r3, #2
 80135c8:	7891      	ldrb	r1, [r2, #2]
 80135ca:	085a      	lsrs	r2, r3, #1
 80135cc:	fba5 0202 	umull	r0, r2, r5, r2
 80135d0:	0892      	lsrs	r2, r2, #2
 80135d2:	fb0c 3312 	mls	r3, ip, r2, r3
 80135d6:	297e      	cmp	r1, #126	@ 0x7e
 80135d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80135dc:	d070      	beq.n	80136c0 <uxr_read_framed_msg+0x510>
 80135de:	f081 0120 	eor.w	r1, r1, #32
 80135e2:	e6a3      	b.n	801332c <uxr_read_framed_msg+0x17c>
 80135e4:	f103 0c01 	add.w	ip, r3, #1
 80135e8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80135ec:	fba5 0202 	umull	r0, r2, r5, r2
 80135f0:	0892      	lsrs	r2, r2, #2
 80135f2:	202a      	movs	r0, #42	@ 0x2a
 80135f4:	fb00 c212 	mls	r2, r0, r2, ip
 80135f8:	fa5f fc82 	uxtb.w	ip, r2
 80135fc:	4561      	cmp	r1, ip
 80135fe:	f43f af58 	beq.w	80134b2 <uxr_read_framed_msg+0x302>
 8013602:	4422      	add	r2, r4
 8013604:	3302      	adds	r3, #2
 8013606:	7891      	ldrb	r1, [r2, #2]
 8013608:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801360c:	085a      	lsrs	r2, r3, #1
 801360e:	fba5 c202 	umull	ip, r2, r5, r2
 8013612:	0892      	lsrs	r2, r2, #2
 8013614:	fb00 3312 	mls	r3, r0, r2, r3
 8013618:	297e      	cmp	r1, #126	@ 0x7e
 801361a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801361e:	f43f af48 	beq.w	80134b2 <uxr_read_framed_msg+0x302>
 8013622:	f081 0120 	eor.w	r1, r1, #32
 8013626:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801362a:	e6e8      	b.n	80133fe <uxr_read_framed_msg+0x24e>
 801362c:	1c58      	adds	r0, r3, #1
 801362e:	0842      	lsrs	r2, r0, #1
 8013630:	fba5 c202 	umull	ip, r2, r5, r2
 8013634:	0892      	lsrs	r2, r2, #2
 8013636:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801363a:	fb0c 0212 	mls	r2, ip, r2, r0
 801363e:	b2d0      	uxtb	r0, r2
 8013640:	4281      	cmp	r1, r0
 8013642:	f43f af32 	beq.w	80134aa <uxr_read_framed_msg+0x2fa>
 8013646:	4422      	add	r2, r4
 8013648:	3302      	adds	r3, #2
 801364a:	7890      	ldrb	r0, [r2, #2]
 801364c:	085a      	lsrs	r2, r3, #1
 801364e:	fba5 1202 	umull	r1, r2, r5, r2
 8013652:	0892      	lsrs	r2, r2, #2
 8013654:	fb0c 3312 	mls	r3, ip, r2, r3
 8013658:	287e      	cmp	r0, #126	@ 0x7e
 801365a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801365e:	d01f      	beq.n	80136a0 <uxr_read_framed_msg+0x4f0>
 8013660:	f080 0020 	eor.w	r0, r0, #32
 8013664:	e68b      	b.n	801337e <uxr_read_framed_msg+0x1ce>
 8013666:	1c51      	adds	r1, r2, #1
 8013668:	084b      	lsrs	r3, r1, #1
 801366a:	fba5 c303 	umull	ip, r3, r5, r3
 801366e:	089b      	lsrs	r3, r3, #2
 8013670:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8013674:	fb0c 1313 	mls	r3, ip, r3, r1
 8013678:	b2d9      	uxtb	r1, r3
 801367a:	4288      	cmp	r0, r1
 801367c:	f43f af3d 	beq.w	80134fa <uxr_read_framed_msg+0x34a>
 8013680:	3202      	adds	r2, #2
 8013682:	4423      	add	r3, r4
 8013684:	0850      	lsrs	r0, r2, #1
 8013686:	789b      	ldrb	r3, [r3, #2]
 8013688:	fba5 1000 	umull	r1, r0, r5, r0
 801368c:	0880      	lsrs	r0, r0, #2
 801368e:	fb0c 2210 	mls	r2, ip, r0, r2
 8013692:	2b7e      	cmp	r3, #126	@ 0x7e
 8013694:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013698:	d016      	beq.n	80136c8 <uxr_read_framed_msg+0x518>
 801369a:	f083 0120 	eor.w	r1, r3, #32
 801369e:	e68b      	b.n	80133b8 <uxr_read_framed_msg+0x208>
 80136a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136a2:	9300      	str	r3, [sp, #0]
 80136a4:	2302      	movs	r3, #2
 80136a6:	9301      	str	r3, [sp, #4]
 80136a8:	464a      	mov	r2, r9
 80136aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136ac:	4641      	mov	r1, r8
 80136ae:	4620      	mov	r0, r4
 80136b0:	f7ff fcfc 	bl	80130ac <uxr_framing_read_transport>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	f47f aef6 	bne.w	80134a6 <uxr_read_framed_msg+0x2f6>
 80136ba:	2301      	movs	r3, #1
 80136bc:	7023      	strb	r3, [r4, #0]
 80136be:	e588      	b.n	80131d2 <uxr_read_framed_msg+0x22>
 80136c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	2301      	movs	r3, #1
 80136c6:	e7ee      	b.n	80136a6 <uxr_read_framed_msg+0x4f6>
 80136c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	2303      	movs	r3, #3
 80136ce:	e7ea      	b.n	80136a6 <uxr_read_framed_msg+0x4f6>
 80136d0:	ee17 8a90 	vmov	r8, s15
 80136d4:	e6ae      	b.n	8013434 <uxr_read_framed_msg+0x284>
 80136d6:	bf00      	nop

080136d8 <rcl_get_default_domain_id>:
 80136d8:	b530      	push	{r4, r5, lr}
 80136da:	b083      	sub	sp, #12
 80136dc:	2300      	movs	r3, #0
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	b1d0      	cbz	r0, 8013718 <rcl_get_default_domain_id+0x40>
 80136e2:	4604      	mov	r4, r0
 80136e4:	4669      	mov	r1, sp
 80136e6:	4815      	ldr	r0, [pc, #84]	@ (801373c <rcl_get_default_domain_id+0x64>)
 80136e8:	f7fc fc66 	bl	800ffb8 <rcutils_get_env>
 80136ec:	4602      	mov	r2, r0
 80136ee:	b110      	cbz	r0, 80136f6 <rcl_get_default_domain_id+0x1e>
 80136f0:	2001      	movs	r0, #1
 80136f2:	b003      	add	sp, #12
 80136f4:	bd30      	pop	{r4, r5, pc}
 80136f6:	9b00      	ldr	r3, [sp, #0]
 80136f8:	b18b      	cbz	r3, 801371e <rcl_get_default_domain_id+0x46>
 80136fa:	7818      	ldrb	r0, [r3, #0]
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d0f8      	beq.n	80136f2 <rcl_get_default_domain_id+0x1a>
 8013700:	a901      	add	r1, sp, #4
 8013702:	4618      	mov	r0, r3
 8013704:	9201      	str	r2, [sp, #4]
 8013706:	f000 fe6d 	bl	80143e4 <strtoul>
 801370a:	4605      	mov	r5, r0
 801370c:	b150      	cbz	r0, 8013724 <rcl_get_default_domain_id+0x4c>
 801370e:	1c43      	adds	r3, r0, #1
 8013710:	d00d      	beq.n	801372e <rcl_get_default_domain_id+0x56>
 8013712:	6025      	str	r5, [r4, #0]
 8013714:	2000      	movs	r0, #0
 8013716:	e7ec      	b.n	80136f2 <rcl_get_default_domain_id+0x1a>
 8013718:	200b      	movs	r0, #11
 801371a:	b003      	add	sp, #12
 801371c:	bd30      	pop	{r4, r5, pc}
 801371e:	4618      	mov	r0, r3
 8013720:	b003      	add	sp, #12
 8013722:	bd30      	pop	{r4, r5, pc}
 8013724:	9b01      	ldr	r3, [sp, #4]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d0f2      	beq.n	8013712 <rcl_get_default_domain_id+0x3a>
 801372c:	e7e0      	b.n	80136f0 <rcl_get_default_domain_id+0x18>
 801372e:	f001 f893 	bl	8014858 <__errno>
 8013732:	6803      	ldr	r3, [r0, #0]
 8013734:	2b22      	cmp	r3, #34	@ 0x22
 8013736:	d1ec      	bne.n	8013712 <rcl_get_default_domain_id+0x3a>
 8013738:	e7da      	b.n	80136f0 <rcl_get_default_domain_id+0x18>
 801373a:	bf00      	nop
 801373c:	08016280 	.word	0x08016280

08013740 <rcl_expand_topic_name>:
 8013740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013744:	b08b      	sub	sp, #44	@ 0x2c
 8013746:	9306      	str	r3, [sp, #24]
 8013748:	2800      	cmp	r0, #0
 801374a:	f000 80ad 	beq.w	80138a8 <rcl_expand_topic_name+0x168>
 801374e:	460e      	mov	r6, r1
 8013750:	2900      	cmp	r1, #0
 8013752:	f000 80a9 	beq.w	80138a8 <rcl_expand_topic_name+0x168>
 8013756:	4617      	mov	r7, r2
 8013758:	2a00      	cmp	r2, #0
 801375a:	f000 80a5 	beq.w	80138a8 <rcl_expand_topic_name+0x168>
 801375e:	2b00      	cmp	r3, #0
 8013760:	f000 80a2 	beq.w	80138a8 <rcl_expand_topic_name+0x168>
 8013764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013766:	2b00      	cmp	r3, #0
 8013768:	f000 809e 	beq.w	80138a8 <rcl_expand_topic_name+0x168>
 801376c:	2200      	movs	r2, #0
 801376e:	a909      	add	r1, sp, #36	@ 0x24
 8013770:	4680      	mov	r8, r0
 8013772:	f000 f9fb 	bl	8013b6c <rcl_validate_topic_name>
 8013776:	4604      	mov	r4, r0
 8013778:	2800      	cmp	r0, #0
 801377a:	f040 8096 	bne.w	80138aa <rcl_expand_topic_name+0x16a>
 801377e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013780:	2b00      	cmp	r3, #0
 8013782:	f040 809a 	bne.w	80138ba <rcl_expand_topic_name+0x17a>
 8013786:	4602      	mov	r2, r0
 8013788:	a909      	add	r1, sp, #36	@ 0x24
 801378a:	4630      	mov	r0, r6
 801378c:	f7fd f872 	bl	8010874 <rmw_validate_node_name>
 8013790:	2800      	cmp	r0, #0
 8013792:	f040 808e 	bne.w	80138b2 <rcl_expand_topic_name+0x172>
 8013796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013798:	2a00      	cmp	r2, #0
 801379a:	f040 8093 	bne.w	80138c4 <rcl_expand_topic_name+0x184>
 801379e:	a909      	add	r1, sp, #36	@ 0x24
 80137a0:	4638      	mov	r0, r7
 80137a2:	f7fd f849 	bl	8010838 <rmw_validate_namespace>
 80137a6:	2800      	cmp	r0, #0
 80137a8:	f040 8083 	bne.w	80138b2 <rcl_expand_topic_name+0x172>
 80137ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80137ae:	2c00      	cmp	r4, #0
 80137b0:	f040 80ed 	bne.w	801398e <rcl_expand_topic_name+0x24e>
 80137b4:	217b      	movs	r1, #123	@ 0x7b
 80137b6:	4640      	mov	r0, r8
 80137b8:	f000 ffc2 	bl	8014740 <strchr>
 80137bc:	f898 3000 	ldrb.w	r3, [r8]
 80137c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80137c2:	4605      	mov	r5, r0
 80137c4:	f000 809e 	beq.w	8013904 <rcl_expand_topic_name+0x1c4>
 80137c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80137ca:	f040 80a2 	bne.w	8013912 <rcl_expand_topic_name+0x1d2>
 80137ce:	4638      	mov	r0, r7
 80137d0:	f7ec fd10 	bl	80001f4 <strlen>
 80137d4:	4a82      	ldr	r2, [pc, #520]	@ (80139e0 <rcl_expand_topic_name+0x2a0>)
 80137d6:	4b83      	ldr	r3, [pc, #524]	@ (80139e4 <rcl_expand_topic_name+0x2a4>)
 80137d8:	2801      	cmp	r0, #1
 80137da:	bf18      	it	ne
 80137dc:	4613      	movne	r3, r2
 80137de:	9302      	str	r3, [sp, #8]
 80137e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80137e8:	f108 0301 	add.w	r3, r8, #1
 80137ec:	9305      	str	r3, [sp, #20]
 80137ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80137f2:	9301      	str	r3, [sp, #4]
 80137f4:	ab14      	add	r3, sp, #80	@ 0x50
 80137f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137f8:	f7fc fc06 	bl	8010008 <rcutils_format_string_limit>
 80137fc:	4682      	mov	sl, r0
 80137fe:	2800      	cmp	r0, #0
 8013800:	f000 80c7 	beq.w	8013992 <rcl_expand_topic_name+0x252>
 8013804:	2d00      	cmp	r5, #0
 8013806:	f000 80a2 	beq.w	801394e <rcl_expand_topic_name+0x20e>
 801380a:	217b      	movs	r1, #123	@ 0x7b
 801380c:	f000 ff98 	bl	8014740 <strchr>
 8013810:	46d1      	mov	r9, sl
 8013812:	4605      	mov	r5, r0
 8013814:	9407      	str	r4, [sp, #28]
 8013816:	46d3      	mov	fp, sl
 8013818:	464c      	mov	r4, r9
 801381a:	2d00      	cmp	r5, #0
 801381c:	f000 80be 	beq.w	801399c <rcl_expand_topic_name+0x25c>
 8013820:	217d      	movs	r1, #125	@ 0x7d
 8013822:	4620      	mov	r0, r4
 8013824:	f000 ff8c 	bl	8014740 <strchr>
 8013828:	eba0 0905 	sub.w	r9, r0, r5
 801382c:	f109 0a01 	add.w	sl, r9, #1
 8013830:	486d      	ldr	r0, [pc, #436]	@ (80139e8 <rcl_expand_topic_name+0x2a8>)
 8013832:	4652      	mov	r2, sl
 8013834:	4629      	mov	r1, r5
 8013836:	f000 ff90 	bl	801475a <strncmp>
 801383a:	2800      	cmp	r0, #0
 801383c:	d067      	beq.n	801390e <rcl_expand_topic_name+0x1ce>
 801383e:	486b      	ldr	r0, [pc, #428]	@ (80139ec <rcl_expand_topic_name+0x2ac>)
 8013840:	4652      	mov	r2, sl
 8013842:	4629      	mov	r1, r5
 8013844:	f000 ff89 	bl	801475a <strncmp>
 8013848:	b130      	cbz	r0, 8013858 <rcl_expand_topic_name+0x118>
 801384a:	4869      	ldr	r0, [pc, #420]	@ (80139f0 <rcl_expand_topic_name+0x2b0>)
 801384c:	4652      	mov	r2, sl
 801384e:	4629      	mov	r1, r5
 8013850:	f000 ff83 	bl	801475a <strncmp>
 8013854:	2800      	cmp	r0, #0
 8013856:	d137      	bne.n	80138c8 <rcl_expand_topic_name+0x188>
 8013858:	46b9      	mov	r9, r7
 801385a:	ab16      	add	r3, sp, #88	@ 0x58
 801385c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013860:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013864:	ab14      	add	r3, sp, #80	@ 0x50
 8013866:	4628      	mov	r0, r5
 8013868:	cb0c      	ldmia	r3, {r2, r3}
 801386a:	4651      	mov	r1, sl
 801386c:	f7fc fd08 	bl	8010280 <rcutils_strndup>
 8013870:	4605      	mov	r5, r0
 8013872:	2800      	cmp	r0, #0
 8013874:	f000 809c 	beq.w	80139b0 <rcl_expand_topic_name+0x270>
 8013878:	464a      	mov	r2, r9
 801387a:	4620      	mov	r0, r4
 801387c:	ab14      	add	r3, sp, #80	@ 0x50
 801387e:	4629      	mov	r1, r5
 8013880:	f7fc fbfc 	bl	801007c <rcutils_repl_str>
 8013884:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013886:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013888:	4604      	mov	r4, r0
 801388a:	4628      	mov	r0, r5
 801388c:	4798      	blx	r3
 801388e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013890:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013892:	4658      	mov	r0, fp
 8013894:	4798      	blx	r3
 8013896:	2c00      	cmp	r4, #0
 8013898:	d07b      	beq.n	8013992 <rcl_expand_topic_name+0x252>
 801389a:	217b      	movs	r1, #123	@ 0x7b
 801389c:	4620      	mov	r0, r4
 801389e:	f000 ff4f 	bl	8014740 <strchr>
 80138a2:	46a3      	mov	fp, r4
 80138a4:	4605      	mov	r5, r0
 80138a6:	e7b8      	b.n	801381a <rcl_expand_topic_name+0xda>
 80138a8:	240b      	movs	r4, #11
 80138aa:	4620      	mov	r0, r4
 80138ac:	b00b      	add	sp, #44	@ 0x2c
 80138ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b2:	f7f9 fddf 	bl	800d474 <rcl_convert_rmw_ret_to_rcl_ret>
 80138b6:	4604      	mov	r4, r0
 80138b8:	e7f7      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 80138ba:	2467      	movs	r4, #103	@ 0x67
 80138bc:	4620      	mov	r0, r4
 80138be:	b00b      	add	sp, #44	@ 0x2c
 80138c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c4:	24c9      	movs	r4, #201	@ 0xc9
 80138c6:	e7f0      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 80138c8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80138cc:	9806      	ldr	r0, [sp, #24]
 80138ce:	1c69      	adds	r1, r5, #1
 80138d0:	f7fc fdf0 	bl	80104b4 <rcutils_string_map_getn>
 80138d4:	4681      	mov	r9, r0
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d1bf      	bne.n	801385a <rcl_expand_topic_name+0x11a>
 80138da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138dc:	aa16      	add	r2, sp, #88	@ 0x58
 80138de:	6018      	str	r0, [r3, #0]
 80138e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80138e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80138e6:	ab14      	add	r3, sp, #80	@ 0x50
 80138e8:	cb0c      	ldmia	r3, {r2, r3}
 80138ea:	4651      	mov	r1, sl
 80138ec:	4628      	mov	r0, r5
 80138ee:	f7fc fcc7 	bl	8010280 <rcutils_strndup>
 80138f2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80138f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80138f6:	4798      	blx	r3
 80138f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80138fa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80138fc:	4658      	mov	r0, fp
 80138fe:	2469      	movs	r4, #105	@ 0x69
 8013900:	4798      	blx	r3
 8013902:	e7d2      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 8013904:	2800      	cmp	r0, #0
 8013906:	d05b      	beq.n	80139c0 <rcl_expand_topic_name+0x280>
 8013908:	46c1      	mov	r9, r8
 801390a:	46a2      	mov	sl, r4
 801390c:	e782      	b.n	8013814 <rcl_expand_topic_name+0xd4>
 801390e:	46b1      	mov	r9, r6
 8013910:	e7a3      	b.n	801385a <rcl_expand_topic_name+0x11a>
 8013912:	2800      	cmp	r0, #0
 8013914:	d1f8      	bne.n	8013908 <rcl_expand_topic_name+0x1c8>
 8013916:	4638      	mov	r0, r7
 8013918:	f7ec fc6c 	bl	80001f4 <strlen>
 801391c:	4a35      	ldr	r2, [pc, #212]	@ (80139f4 <rcl_expand_topic_name+0x2b4>)
 801391e:	4b36      	ldr	r3, [pc, #216]	@ (80139f8 <rcl_expand_topic_name+0x2b8>)
 8013920:	f8cd 8010 	str.w	r8, [sp, #16]
 8013924:	2801      	cmp	r0, #1
 8013926:	bf18      	it	ne
 8013928:	4613      	movne	r3, r2
 801392a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801392e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013932:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013934:	9703      	str	r7, [sp, #12]
 8013936:	9200      	str	r2, [sp, #0]
 8013938:	ab14      	add	r3, sp, #80	@ 0x50
 801393a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801393c:	f7fc fb64 	bl	8010008 <rcutils_format_string_limit>
 8013940:	4682      	mov	sl, r0
 8013942:	4653      	mov	r3, sl
 8013944:	b32b      	cbz	r3, 8013992 <rcl_expand_topic_name+0x252>
 8013946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013948:	f8c3 a000 	str.w	sl, [r3]
 801394c:	e7ad      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 801394e:	f89a 3000 	ldrb.w	r3, [sl]
 8013952:	2b2f      	cmp	r3, #47	@ 0x2f
 8013954:	d0f7      	beq.n	8013946 <rcl_expand_topic_name+0x206>
 8013956:	4638      	mov	r0, r7
 8013958:	f7ec fc4c 	bl	80001f4 <strlen>
 801395c:	4a25      	ldr	r2, [pc, #148]	@ (80139f4 <rcl_expand_topic_name+0x2b4>)
 801395e:	4b26      	ldr	r3, [pc, #152]	@ (80139f8 <rcl_expand_topic_name+0x2b8>)
 8013960:	f8cd a010 	str.w	sl, [sp, #16]
 8013964:	2801      	cmp	r0, #1
 8013966:	bf18      	it	ne
 8013968:	4613      	movne	r3, r2
 801396a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801396e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013972:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013974:	9703      	str	r7, [sp, #12]
 8013976:	9200      	str	r2, [sp, #0]
 8013978:	ab14      	add	r3, sp, #80	@ 0x50
 801397a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801397c:	f7fc fb44 	bl	8010008 <rcutils_format_string_limit>
 8013980:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013982:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013984:	4605      	mov	r5, r0
 8013986:	4650      	mov	r0, sl
 8013988:	4798      	blx	r3
 801398a:	46aa      	mov	sl, r5
 801398c:	e7d9      	b.n	8013942 <rcl_expand_topic_name+0x202>
 801398e:	24ca      	movs	r4, #202	@ 0xca
 8013990:	e78b      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 8013992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013994:	2300      	movs	r3, #0
 8013996:	6013      	str	r3, [r2, #0]
 8013998:	240a      	movs	r4, #10
 801399a:	e786      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 801399c:	465b      	mov	r3, fp
 801399e:	9c07      	ldr	r4, [sp, #28]
 80139a0:	46da      	mov	sl, fp
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1d3      	bne.n	801394e <rcl_expand_topic_name+0x20e>
 80139a6:	f898 3000 	ldrb.w	r3, [r8]
 80139aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80139ac:	d0cb      	beq.n	8013946 <rcl_expand_topic_name+0x206>
 80139ae:	e7b2      	b.n	8013916 <rcl_expand_topic_name+0x1d6>
 80139b0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80139b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139b6:	6015      	str	r5, [r2, #0]
 80139b8:	4658      	mov	r0, fp
 80139ba:	4798      	blx	r3
 80139bc:	240a      	movs	r4, #10
 80139be:	e774      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 80139c0:	ab17      	add	r3, sp, #92	@ 0x5c
 80139c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80139c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80139ca:	ab14      	add	r3, sp, #80	@ 0x50
 80139cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80139ce:	4640      	mov	r0, r8
 80139d0:	f7fc fc34 	bl	801023c <rcutils_strdup>
 80139d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139d6:	2800      	cmp	r0, #0
 80139d8:	6018      	str	r0, [r3, #0]
 80139da:	bf08      	it	eq
 80139dc:	240a      	moveq	r4, #10
 80139de:	e764      	b.n	80138aa <rcl_expand_topic_name+0x16a>
 80139e0:	08016290 	.word	0x08016290
 80139e4:	08015a8c 	.word	0x08015a8c
 80139e8:	08016298 	.word	0x08016298
 80139ec:	080162a0 	.word	0x080162a0
 80139f0:	080162a8 	.word	0x080162a8
 80139f4:	08015ae8 	.word	0x08015ae8
 80139f8:	08015a9c 	.word	0x08015a9c

080139fc <rcl_get_default_topic_name_substitutions>:
 80139fc:	2800      	cmp	r0, #0
 80139fe:	bf0c      	ite	eq
 8013a00:	200b      	moveq	r0, #11
 8013a02:	2000      	movne	r0, #0
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop

08013a08 <rcl_get_zero_initialized_guard_condition>:
 8013a08:	4a03      	ldr	r2, [pc, #12]	@ (8013a18 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a10:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a14:	4618      	mov	r0, r3
 8013a16:	4770      	bx	lr
 8013a18:	080162b4 	.word	0x080162b4

08013a1c <rcl_guard_condition_init_from_rmw>:
 8013a1c:	b082      	sub	sp, #8
 8013a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a22:	b086      	sub	sp, #24
 8013a24:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013a28:	4604      	mov	r4, r0
 8013a2a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013a2e:	460e      	mov	r6, r1
 8013a30:	4617      	mov	r7, r2
 8013a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a36:	f10d 0e04 	add.w	lr, sp, #4
 8013a3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a3e:	f8dc 3000 	ldr.w	r3, [ip]
 8013a42:	f8ce 3000 	str.w	r3, [lr]
 8013a46:	a801      	add	r0, sp, #4
 8013a48:	f7f5 ffdc 	bl	8009a04 <rcutils_allocator_is_valid>
 8013a4c:	b350      	cbz	r0, 8013aa4 <rcl_guard_condition_init_from_rmw+0x88>
 8013a4e:	b34c      	cbz	r4, 8013aa4 <rcl_guard_condition_init_from_rmw+0x88>
 8013a50:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013a54:	f1b8 0f00 	cmp.w	r8, #0
 8013a58:	d11e      	bne.n	8013a98 <rcl_guard_condition_init_from_rmw+0x7c>
 8013a5a:	b31f      	cbz	r7, 8013aa4 <rcl_guard_condition_init_from_rmw+0x88>
 8013a5c:	4638      	mov	r0, r7
 8013a5e:	f7f9 fd27 	bl	800d4b0 <rcl_context_is_valid>
 8013a62:	b328      	cbz	r0, 8013ab0 <rcl_guard_condition_init_from_rmw+0x94>
 8013a64:	9b01      	ldr	r3, [sp, #4]
 8013a66:	9905      	ldr	r1, [sp, #20]
 8013a68:	201c      	movs	r0, #28
 8013a6a:	4798      	blx	r3
 8013a6c:	4605      	mov	r5, r0
 8013a6e:	6060      	str	r0, [r4, #4]
 8013a70:	b358      	cbz	r0, 8013aca <rcl_guard_condition_init_from_rmw+0xae>
 8013a72:	b1fe      	cbz	r6, 8013ab4 <rcl_guard_condition_init_from_rmw+0x98>
 8013a74:	6006      	str	r6, [r0, #0]
 8013a76:	f880 8004 	strb.w	r8, [r0, #4]
 8013a7a:	ac01      	add	r4, sp, #4
 8013a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a7e:	f105 0c08 	add.w	ip, r5, #8
 8013a82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	f8cc 3000 	str.w	r3, [ip]
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	b006      	add	sp, #24
 8013a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a94:	b002      	add	sp, #8
 8013a96:	4770      	bx	lr
 8013a98:	2064      	movs	r0, #100	@ 0x64
 8013a9a:	b006      	add	sp, #24
 8013a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa0:	b002      	add	sp, #8
 8013aa2:	4770      	bx	lr
 8013aa4:	200b      	movs	r0, #11
 8013aa6:	b006      	add	sp, #24
 8013aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	b002      	add	sp, #8
 8013aae:	4770      	bx	lr
 8013ab0:	2065      	movs	r0, #101	@ 0x65
 8013ab2:	e7f2      	b.n	8013a9a <rcl_guard_condition_init_from_rmw+0x7e>
 8013ab4:	6838      	ldr	r0, [r7, #0]
 8013ab6:	3028      	adds	r0, #40	@ 0x28
 8013ab8:	f000 fa3a 	bl	8013f30 <rmw_create_guard_condition>
 8013abc:	6028      	str	r0, [r5, #0]
 8013abe:	6865      	ldr	r5, [r4, #4]
 8013ac0:	682e      	ldr	r6, [r5, #0]
 8013ac2:	b126      	cbz	r6, 8013ace <rcl_guard_condition_init_from_rmw+0xb2>
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	712b      	strb	r3, [r5, #4]
 8013ac8:	e7d7      	b.n	8013a7a <rcl_guard_condition_init_from_rmw+0x5e>
 8013aca:	200a      	movs	r0, #10
 8013acc:	e7e5      	b.n	8013a9a <rcl_guard_condition_init_from_rmw+0x7e>
 8013ace:	4628      	mov	r0, r5
 8013ad0:	9b02      	ldr	r3, [sp, #8]
 8013ad2:	9905      	ldr	r1, [sp, #20]
 8013ad4:	4798      	blx	r3
 8013ad6:	6066      	str	r6, [r4, #4]
 8013ad8:	2001      	movs	r0, #1
 8013ada:	e7de      	b.n	8013a9a <rcl_guard_condition_init_from_rmw+0x7e>

08013adc <rcl_guard_condition_fini>:
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	b1f0      	cbz	r0, 8013b20 <rcl_guard_condition_fini+0x44>
 8013ae2:	6843      	ldr	r3, [r0, #4]
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	b163      	cbz	r3, 8013b02 <rcl_guard_condition_fini+0x26>
 8013ae8:	6818      	ldr	r0, [r3, #0]
 8013aea:	68de      	ldr	r6, [r3, #12]
 8013aec:	6999      	ldr	r1, [r3, #24]
 8013aee:	b160      	cbz	r0, 8013b0a <rcl_guard_condition_fini+0x2e>
 8013af0:	791d      	ldrb	r5, [r3, #4]
 8013af2:	b965      	cbnz	r5, 8013b0e <rcl_guard_condition_fini+0x32>
 8013af4:	4618      	mov	r0, r3
 8013af6:	47b0      	blx	r6
 8013af8:	2300      	movs	r3, #0
 8013afa:	4628      	mov	r0, r5
 8013afc:	6063      	str	r3, [r4, #4]
 8013afe:	b002      	add	sp, #8
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	461d      	mov	r5, r3
 8013b04:	4628      	mov	r0, r5
 8013b06:	b002      	add	sp, #8
 8013b08:	bd70      	pop	{r4, r5, r6, pc}
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	e7f2      	b.n	8013af4 <rcl_guard_condition_fini+0x18>
 8013b0e:	9101      	str	r1, [sp, #4]
 8013b10:	f000 fa22 	bl	8013f58 <rmw_destroy_guard_condition>
 8013b14:	1e05      	subs	r5, r0, #0
 8013b16:	6863      	ldr	r3, [r4, #4]
 8013b18:	9901      	ldr	r1, [sp, #4]
 8013b1a:	bf18      	it	ne
 8013b1c:	2501      	movne	r5, #1
 8013b1e:	e7e9      	b.n	8013af4 <rcl_guard_condition_fini+0x18>
 8013b20:	250b      	movs	r5, #11
 8013b22:	4628      	mov	r0, r5
 8013b24:	b002      	add	sp, #8
 8013b26:	bd70      	pop	{r4, r5, r6, pc}

08013b28 <rcl_guard_condition_get_default_options>:
 8013b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b2a:	b087      	sub	sp, #28
 8013b2c:	4606      	mov	r6, r0
 8013b2e:	4668      	mov	r0, sp
 8013b30:	f7f5 ff5a 	bl	80099e8 <rcutils_get_default_allocator>
 8013b34:	4b09      	ldr	r3, [pc, #36]	@ (8013b5c <rcl_guard_condition_get_default_options+0x34>)
 8013b36:	46ee      	mov	lr, sp
 8013b38:	469c      	mov	ip, r3
 8013b3a:	461d      	mov	r5, r3
 8013b3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b46:	4634      	mov	r4, r6
 8013b48:	f8de 7000 	ldr.w	r7, [lr]
 8013b4c:	f8cc 7000 	str.w	r7, [ip]
 8013b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b52:	4630      	mov	r0, r6
 8013b54:	6027      	str	r7, [r4, #0]
 8013b56:	b007      	add	sp, #28
 8013b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	2000dc84 	.word	0x2000dc84

08013b60 <rcl_guard_condition_get_rmw_handle>:
 8013b60:	b110      	cbz	r0, 8013b68 <rcl_guard_condition_get_rmw_handle+0x8>
 8013b62:	6840      	ldr	r0, [r0, #4]
 8013b64:	b100      	cbz	r0, 8013b68 <rcl_guard_condition_get_rmw_handle+0x8>
 8013b66:	6800      	ldr	r0, [r0, #0]
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop

08013b6c <rcl_validate_topic_name>:
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	d07a      	beq.n	8013c66 <rcl_validate_topic_name+0xfa>
 8013b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b74:	460e      	mov	r6, r1
 8013b76:	2900      	cmp	r1, #0
 8013b78:	d07c      	beq.n	8013c74 <rcl_validate_topic_name+0x108>
 8013b7a:	4617      	mov	r7, r2
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	f7ec fb39 	bl	80001f4 <strlen>
 8013b82:	b1b0      	cbz	r0, 8013bb2 <rcl_validate_topic_name+0x46>
 8013b84:	f895 9000 	ldrb.w	r9, [r5]
 8013b88:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8013d0c <rcl_validate_topic_name+0x1a0>
 8013b8c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013b90:	f013 0304 	ands.w	r3, r3, #4
 8013b94:	d169      	bne.n	8013c6a <rcl_validate_topic_name+0xfe>
 8013b96:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8013b9a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013b9e:	2a2f      	cmp	r2, #47	@ 0x2f
 8013ba0:	d10e      	bne.n	8013bc0 <rcl_validate_topic_name+0x54>
 8013ba2:	2202      	movs	r2, #2
 8013ba4:	6032      	str	r2, [r6, #0]
 8013ba6:	b36f      	cbz	r7, 8013c04 <rcl_validate_topic_name+0x98>
 8013ba8:	f8c7 8000 	str.w	r8, [r7]
 8013bac:	4618      	mov	r0, r3
 8013bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	6033      	str	r3, [r6, #0]
 8013bb6:	b32f      	cbz	r7, 8013c04 <rcl_validate_topic_name+0x98>
 8013bb8:	2000      	movs	r0, #0
 8013bba:	6038      	str	r0, [r7, #0]
 8013bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8013bc4:	461c      	mov	r4, r3
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013bcc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013bd0:	f1be 0f09 	cmp.w	lr, #9
 8013bd4:	d919      	bls.n	8013c0a <rcl_validate_topic_name+0x9e>
 8013bd6:	f022 0e20 	bic.w	lr, r2, #32
 8013bda:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8013bde:	f1be 0f19 	cmp.w	lr, #25
 8013be2:	d912      	bls.n	8013c0a <rcl_validate_topic_name+0x9e>
 8013be4:	2a5f      	cmp	r2, #95	@ 0x5f
 8013be6:	d019      	beq.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013be8:	2a2f      	cmp	r2, #47	@ 0x2f
 8013bea:	d051      	beq.n	8013c90 <rcl_validate_topic_name+0x124>
 8013bec:	2a7e      	cmp	r2, #126	@ 0x7e
 8013bee:	d048      	beq.n	8013c82 <rcl_validate_topic_name+0x116>
 8013bf0:	2a7b      	cmp	r2, #123	@ 0x7b
 8013bf2:	d054      	beq.n	8013c9e <rcl_validate_topic_name+0x132>
 8013bf4:	2a7d      	cmp	r2, #125	@ 0x7d
 8013bf6:	d161      	bne.n	8013cbc <rcl_validate_topic_name+0x150>
 8013bf8:	2c00      	cmp	r4, #0
 8013bfa:	d155      	bne.n	8013ca8 <rcl_validate_topic_name+0x13c>
 8013bfc:	2305      	movs	r3, #5
 8013bfe:	6033      	str	r3, [r6, #0]
 8013c00:	b107      	cbz	r7, 8013c04 <rcl_validate_topic_name+0x98>
 8013c02:	6039      	str	r1, [r7, #0]
 8013c04:	2000      	movs	r0, #0
 8013c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013c0e:	0752      	lsls	r2, r2, #29
 8013c10:	d504      	bpl.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013c12:	b11c      	cbz	r4, 8013c1c <rcl_validate_topic_name+0xb0>
 8013c14:	b111      	cbz	r1, 8013c1c <rcl_validate_topic_name+0xb0>
 8013c16:	1e4a      	subs	r2, r1, #1
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d02d      	beq.n	8013c78 <rcl_validate_topic_name+0x10c>
 8013c1c:	3101      	adds	r1, #1
 8013c1e:	4288      	cmp	r0, r1
 8013c20:	d1d2      	bne.n	8013bc8 <rcl_validate_topic_name+0x5c>
 8013c22:	2c00      	cmp	r4, #0
 8013c24:	d145      	bne.n	8013cb2 <rcl_validate_topic_name+0x146>
 8013c26:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8013c2a:	d04f      	beq.n	8013ccc <rcl_validate_topic_name+0x160>
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	2301      	movs	r3, #1
 8013c30:	e006      	b.n	8013c40 <rcl_validate_topic_name+0xd4>
 8013c32:	428b      	cmp	r3, r1
 8013c34:	f105 0501 	add.w	r5, r5, #1
 8013c38:	f103 0201 	add.w	r2, r3, #1
 8013c3c:	d236      	bcs.n	8013cac <rcl_validate_topic_name+0x140>
 8013c3e:	4613      	mov	r3, r2
 8013c40:	4580      	cmp	r8, r0
 8013c42:	f100 0001 	add.w	r0, r0, #1
 8013c46:	d0f4      	beq.n	8013c32 <rcl_validate_topic_name+0xc6>
 8013c48:	782a      	ldrb	r2, [r5, #0]
 8013c4a:	2a2f      	cmp	r2, #47	@ 0x2f
 8013c4c:	d1f1      	bne.n	8013c32 <rcl_validate_topic_name+0xc6>
 8013c4e:	786a      	ldrb	r2, [r5, #1]
 8013c50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013c54:	0754      	lsls	r4, r2, #29
 8013c56:	d5ec      	bpl.n	8013c32 <rcl_validate_topic_name+0xc6>
 8013c58:	2204      	movs	r2, #4
 8013c5a:	6032      	str	r2, [r6, #0]
 8013c5c:	2f00      	cmp	r7, #0
 8013c5e:	d0d1      	beq.n	8013c04 <rcl_validate_topic_name+0x98>
 8013c60:	603b      	str	r3, [r7, #0]
 8013c62:	2000      	movs	r0, #0
 8013c64:	e7aa      	b.n	8013bbc <rcl_validate_topic_name+0x50>
 8013c66:	200b      	movs	r0, #11
 8013c68:	4770      	bx	lr
 8013c6a:	2304      	movs	r3, #4
 8013c6c:	6033      	str	r3, [r6, #0]
 8013c6e:	2f00      	cmp	r7, #0
 8013c70:	d1a2      	bne.n	8013bb8 <rcl_validate_topic_name+0x4c>
 8013c72:	e7c7      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013c74:	200b      	movs	r0, #11
 8013c76:	e7a1      	b.n	8013bbc <rcl_validate_topic_name+0x50>
 8013c78:	2309      	movs	r3, #9
 8013c7a:	6033      	str	r3, [r6, #0]
 8013c7c:	2f00      	cmp	r7, #0
 8013c7e:	d1c0      	bne.n	8013c02 <rcl_validate_topic_name+0x96>
 8013c80:	e7c0      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013c82:	2900      	cmp	r1, #0
 8013c84:	d0ca      	beq.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013c86:	2306      	movs	r3, #6
 8013c88:	6033      	str	r3, [r6, #0]
 8013c8a:	2f00      	cmp	r7, #0
 8013c8c:	d1b9      	bne.n	8013c02 <rcl_validate_topic_name+0x96>
 8013c8e:	e7b9      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013c90:	2c00      	cmp	r4, #0
 8013c92:	d0c3      	beq.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013c94:	2308      	movs	r3, #8
 8013c96:	6033      	str	r3, [r6, #0]
 8013c98:	2f00      	cmp	r7, #0
 8013c9a:	d1b2      	bne.n	8013c02 <rcl_validate_topic_name+0x96>
 8013c9c:	e7b2      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013c9e:	2c00      	cmp	r4, #0
 8013ca0:	d1f8      	bne.n	8013c94 <rcl_validate_topic_name+0x128>
 8013ca2:	460b      	mov	r3, r1
 8013ca4:	2401      	movs	r4, #1
 8013ca6:	e7b9      	b.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013ca8:	2400      	movs	r4, #0
 8013caa:	e7b7      	b.n	8013c1c <rcl_validate_topic_name+0xb0>
 8013cac:	2000      	movs	r0, #0
 8013cae:	6030      	str	r0, [r6, #0]
 8013cb0:	e784      	b.n	8013bbc <rcl_validate_topic_name+0x50>
 8013cb2:	2205      	movs	r2, #5
 8013cb4:	6032      	str	r2, [r6, #0]
 8013cb6:	2f00      	cmp	r7, #0
 8013cb8:	d1d2      	bne.n	8013c60 <rcl_validate_topic_name+0xf4>
 8013cba:	e7a3      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013cbc:	2c00      	cmp	r4, #0
 8013cbe:	bf14      	ite	ne
 8013cc0:	2308      	movne	r3, #8
 8013cc2:	2303      	moveq	r3, #3
 8013cc4:	6033      	str	r3, [r6, #0]
 8013cc6:	2f00      	cmp	r7, #0
 8013cc8:	d19b      	bne.n	8013c02 <rcl_validate_topic_name+0x96>
 8013cca:	e79b      	b.n	8013c04 <rcl_validate_topic_name+0x98>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e00a      	b.n	8013ce6 <rcl_validate_topic_name+0x17a>
 8013cd0:	2c01      	cmp	r4, #1
 8013cd2:	d013      	beq.n	8013cfc <rcl_validate_topic_name+0x190>
 8013cd4:	4299      	cmp	r1, r3
 8013cd6:	f104 0401 	add.w	r4, r4, #1
 8013cda:	f105 0501 	add.w	r5, r5, #1
 8013cde:	f103 0201 	add.w	r2, r3, #1
 8013ce2:	d9e3      	bls.n	8013cac <rcl_validate_topic_name+0x140>
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	45a0      	cmp	r8, r4
 8013ce8:	d0f4      	beq.n	8013cd4 <rcl_validate_topic_name+0x168>
 8013cea:	782a      	ldrb	r2, [r5, #0]
 8013cec:	2a2f      	cmp	r2, #47	@ 0x2f
 8013cee:	d1ef      	bne.n	8013cd0 <rcl_validate_topic_name+0x164>
 8013cf0:	786a      	ldrb	r2, [r5, #1]
 8013cf2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013cf6:	0752      	lsls	r2, r2, #29
 8013cf8:	d5ec      	bpl.n	8013cd4 <rcl_validate_topic_name+0x168>
 8013cfa:	e7ad      	b.n	8013c58 <rcl_validate_topic_name+0xec>
 8013cfc:	2307      	movs	r3, #7
 8013cfe:	6033      	str	r3, [r6, #0]
 8013d00:	2f00      	cmp	r7, #0
 8013d02:	f43f af7f 	beq.w	8013c04 <rcl_validate_topic_name+0x98>
 8013d06:	603c      	str	r4, [r7, #0]
 8013d08:	2000      	movs	r0, #0
 8013d0a:	e757      	b.n	8013bbc <rcl_validate_topic_name+0x50>
 8013d0c:	0801632c 	.word	0x0801632c

08013d10 <rcutils_string_array_fini>:
 8013d10:	b320      	cbz	r0, 8013d5c <rcutils_string_array_fini+0x4c>
 8013d12:	b570      	push	{r4, r5, r6, lr}
 8013d14:	4604      	mov	r4, r0
 8013d16:	6840      	ldr	r0, [r0, #4]
 8013d18:	b1d8      	cbz	r0, 8013d52 <rcutils_string_array_fini+0x42>
 8013d1a:	f104 0008 	add.w	r0, r4, #8
 8013d1e:	f7f5 fe71 	bl	8009a04 <rcutils_allocator_is_valid>
 8013d22:	b1b8      	cbz	r0, 8013d54 <rcutils_string_array_fini+0x44>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	b1bb      	cbz	r3, 8013d58 <rcutils_string_array_fini+0x48>
 8013d28:	2500      	movs	r5, #0
 8013d2a:	6860      	ldr	r0, [r4, #4]
 8013d2c:	462e      	mov	r6, r5
 8013d2e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8013d32:	68e3      	ldr	r3, [r4, #12]
 8013d34:	69a1      	ldr	r1, [r4, #24]
 8013d36:	4798      	blx	r3
 8013d38:	e9d4 3000 	ldrd	r3, r0, [r4]
 8013d3c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8013d40:	3501      	adds	r5, #1
 8013d42:	429d      	cmp	r5, r3
 8013d44:	d3f3      	bcc.n	8013d2e <rcutils_string_array_fini+0x1e>
 8013d46:	68e3      	ldr	r3, [r4, #12]
 8013d48:	69a1      	ldr	r1, [r4, #24]
 8013d4a:	4798      	blx	r3
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e9c4 0000 	strd	r0, r0, [r4]
 8013d52:	bd70      	pop	{r4, r5, r6, pc}
 8013d54:	200b      	movs	r0, #11
 8013d56:	bd70      	pop	{r4, r5, r6, pc}
 8013d58:	6860      	ldr	r0, [r4, #4]
 8013d5a:	e7f4      	b.n	8013d46 <rcutils_string_array_fini+0x36>
 8013d5c:	200b      	movs	r0, #11
 8013d5e:	4770      	bx	lr

08013d60 <on_status>:
 8013d60:	b082      	sub	sp, #8
 8013d62:	b002      	add	sp, #8
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop

08013d68 <on_topic>:
 8013d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6c:	4a22      	ldr	r2, [pc, #136]	@ (8013df8 <on_topic+0x90>)
 8013d6e:	b094      	sub	sp, #80	@ 0x50
 8013d70:	6812      	ldr	r2, [r2, #0]
 8013d72:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8013d74:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013d78:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013d7c:	b3c2      	cbz	r2, 8013df0 <on_topic+0x88>
 8013d7e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8013d82:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8013d86:	e001      	b.n	8013d8c <on_topic+0x24>
 8013d88:	6852      	ldr	r2, [r2, #4]
 8013d8a:	b38a      	cbz	r2, 8013df0 <on_topic+0x88>
 8013d8c:	6894      	ldr	r4, [r2, #8]
 8013d8e:	8aa3      	ldrh	r3, [r4, #20]
 8013d90:	428b      	cmp	r3, r1
 8013d92:	d1f9      	bne.n	8013d88 <on_topic+0x20>
 8013d94:	7da3      	ldrb	r3, [r4, #22]
 8013d96:	4283      	cmp	r3, r0
 8013d98:	d1f6      	bne.n	8013d88 <on_topic+0x20>
 8013d9a:	2248      	movs	r2, #72	@ 0x48
 8013d9c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013da0:	4668      	mov	r0, sp
 8013da2:	f000 fd8e 	bl	80148c2 <memcpy>
 8013da6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8013daa:	cb0c      	ldmia	r3, {r2, r3}
 8013dac:	4620      	mov	r0, r4
 8013dae:	f7f6 fa5b 	bl	800a268 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013db2:	4607      	mov	r7, r0
 8013db4:	b1e0      	cbz	r0, 8013df0 <on_topic+0x88>
 8013db6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013dba:	4632      	mov	r2, r6
 8013dbc:	4628      	mov	r0, r5
 8013dbe:	f108 0110 	add.w	r1, r8, #16
 8013dc2:	f7fd ffc9 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8013dc6:	b930      	cbnz	r0, 8013dd6 <on_topic+0x6e>
 8013dc8:	480c      	ldr	r0, [pc, #48]	@ (8013dfc <on_topic+0x94>)
 8013dca:	4639      	mov	r1, r7
 8013dcc:	b014      	add	sp, #80	@ 0x50
 8013dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd2:	f7fc bdbd 	b.w	8010950 <put_memory>
 8013dd6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8013dda:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8013dde:	f7fd fee5 	bl	8011bac <rmw_uros_epoch_nanos>
 8013de2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8013de6:	2305      	movs	r3, #5
 8013de8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013dec:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8013df0:	b014      	add	sp, #80	@ 0x50
 8013df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df6:	bf00      	nop
 8013df8:	2000dae4 	.word	0x2000dae4
 8013dfc:	2000dad4 	.word	0x2000dad4

08013e00 <on_request>:
 8013e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e04:	4823      	ldr	r0, [pc, #140]	@ (8013e94 <on_request+0x94>)
 8013e06:	b094      	sub	sp, #80	@ 0x50
 8013e08:	6800      	ldr	r0, [r0, #0]
 8013e0a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013e0c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013e10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d03b      	beq.n	8013e8e <on_request+0x8e>
 8013e16:	461d      	mov	r5, r3
 8013e18:	e001      	b.n	8013e1e <on_request+0x1e>
 8013e1a:	6840      	ldr	r0, [r0, #4]
 8013e1c:	b3b8      	cbz	r0, 8013e8e <on_request+0x8e>
 8013e1e:	6884      	ldr	r4, [r0, #8]
 8013e20:	8b21      	ldrh	r1, [r4, #24]
 8013e22:	4291      	cmp	r1, r2
 8013e24:	d1f9      	bne.n	8013e1a <on_request+0x1a>
 8013e26:	2248      	movs	r2, #72	@ 0x48
 8013e28:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013e2c:	4668      	mov	r0, sp
 8013e2e:	f000 fd48 	bl	80148c2 <memcpy>
 8013e32:	f104 0320 	add.w	r3, r4, #32
 8013e36:	cb0c      	ldmia	r3, {r2, r3}
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f7f6 fa15 	bl	800a268 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013e3e:	4680      	mov	r8, r0
 8013e40:	b328      	cbz	r0, 8013e8e <on_request+0x8e>
 8013e42:	4638      	mov	r0, r7
 8013e44:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013e48:	4632      	mov	r2, r6
 8013e4a:	f107 0110 	add.w	r1, r7, #16
 8013e4e:	f7fd ff83 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8013e52:	b930      	cbnz	r0, 8013e62 <on_request+0x62>
 8013e54:	4810      	ldr	r0, [pc, #64]	@ (8013e98 <on_request+0x98>)
 8013e56:	4641      	mov	r1, r8
 8013e58:	b014      	add	sp, #80	@ 0x50
 8013e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5e:	f7fc bd77 	b.w	8010950 <put_memory>
 8013e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e64:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013e68:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013e6c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013e70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013e78:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e7c:	f7fd fe96 	bl	8011bac <rmw_uros_epoch_nanos>
 8013e80:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013e84:	2303      	movs	r3, #3
 8013e86:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013e8a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013e8e:	b014      	add	sp, #80	@ 0x50
 8013e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e94:	2000dab4 	.word	0x2000dab4
 8013e98:	2000dad4 	.word	0x2000dad4

08013e9c <on_reply>:
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	4821      	ldr	r0, [pc, #132]	@ (8013f28 <on_reply+0x8c>)
 8013ea2:	b094      	sub	sp, #80	@ 0x50
 8013ea4:	6800      	ldr	r0, [r0, #0]
 8013ea6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013ea8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013eac:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013eae:	b3b8      	cbz	r0, 8013f20 <on_reply+0x84>
 8013eb0:	461d      	mov	r5, r3
 8013eb2:	e001      	b.n	8013eb8 <on_reply+0x1c>
 8013eb4:	6840      	ldr	r0, [r0, #4]
 8013eb6:	b398      	cbz	r0, 8013f20 <on_reply+0x84>
 8013eb8:	6884      	ldr	r4, [r0, #8]
 8013eba:	8b21      	ldrh	r1, [r4, #24]
 8013ebc:	4291      	cmp	r1, r2
 8013ebe:	d1f9      	bne.n	8013eb4 <on_reply+0x18>
 8013ec0:	2248      	movs	r2, #72	@ 0x48
 8013ec2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013ec6:	4668      	mov	r0, sp
 8013ec8:	f000 fcfb 	bl	80148c2 <memcpy>
 8013ecc:	f104 0320 	add.w	r3, r4, #32
 8013ed0:	cb0c      	ldmia	r3, {r2, r3}
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7f6 f9c8 	bl	800a268 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013ed8:	4680      	mov	r8, r0
 8013eda:	b308      	cbz	r0, 8013f20 <on_reply+0x84>
 8013edc:	4638      	mov	r0, r7
 8013ede:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013ee2:	4632      	mov	r2, r6
 8013ee4:	f107 0110 	add.w	r1, r7, #16
 8013ee8:	f7fd ff36 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8013eec:	b930      	cbnz	r0, 8013efc <on_reply+0x60>
 8013eee:	480f      	ldr	r0, [pc, #60]	@ (8013f2c <on_reply+0x90>)
 8013ef0:	4641      	mov	r1, r8
 8013ef2:	b014      	add	sp, #80	@ 0x50
 8013ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef8:	f7fc bd2a 	b.w	8010950 <put_memory>
 8013efc:	2200      	movs	r2, #0
 8013efe:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8013f02:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013f06:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013f0a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8013f0e:	f7fd fe4d 	bl	8011bac <rmw_uros_epoch_nanos>
 8013f12:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013f16:	2304      	movs	r3, #4
 8013f18:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013f1c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013f20:	b014      	add	sp, #80	@ 0x50
 8013f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f26:	bf00      	nop
 8013f28:	200091c8 	.word	0x200091c8
 8013f2c:	2000dad4 	.word	0x2000dad4

08013f30 <rmw_create_guard_condition>:
 8013f30:	b538      	push	{r3, r4, r5, lr}
 8013f32:	4605      	mov	r5, r0
 8013f34:	4807      	ldr	r0, [pc, #28]	@ (8013f54 <rmw_create_guard_condition+0x24>)
 8013f36:	f7fc fcfb 	bl	8010930 <get_memory>
 8013f3a:	b148      	cbz	r0, 8013f50 <rmw_create_guard_condition+0x20>
 8013f3c:	6884      	ldr	r4, [r0, #8]
 8013f3e:	2300      	movs	r3, #0
 8013f40:	7423      	strb	r3, [r4, #16]
 8013f42:	61e5      	str	r5, [r4, #28]
 8013f44:	f7fc fd5c 	bl	8010a00 <rmw_get_implementation_identifier>
 8013f48:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013f4c:	f104 0014 	add.w	r0, r4, #20
 8013f50:	bd38      	pop	{r3, r4, r5, pc}
 8013f52:	bf00      	nop
 8013f54:	2000da74 	.word	0x2000da74

08013f58 <rmw_destroy_guard_condition>:
 8013f58:	b508      	push	{r3, lr}
 8013f5a:	4b08      	ldr	r3, [pc, #32]	@ (8013f7c <rmw_destroy_guard_condition+0x24>)
 8013f5c:	6819      	ldr	r1, [r3, #0]
 8013f5e:	b911      	cbnz	r1, 8013f66 <rmw_destroy_guard_condition+0xe>
 8013f60:	e00a      	b.n	8013f78 <rmw_destroy_guard_condition+0x20>
 8013f62:	6849      	ldr	r1, [r1, #4]
 8013f64:	b141      	cbz	r1, 8013f78 <rmw_destroy_guard_condition+0x20>
 8013f66:	688b      	ldr	r3, [r1, #8]
 8013f68:	3314      	adds	r3, #20
 8013f6a:	4298      	cmp	r0, r3
 8013f6c:	d1f9      	bne.n	8013f62 <rmw_destroy_guard_condition+0xa>
 8013f6e:	4803      	ldr	r0, [pc, #12]	@ (8013f7c <rmw_destroy_guard_condition+0x24>)
 8013f70:	f7fc fcee 	bl	8010950 <put_memory>
 8013f74:	2000      	movs	r0, #0
 8013f76:	bd08      	pop	{r3, pc}
 8013f78:	2001      	movs	r0, #1
 8013f7a:	bd08      	pop	{r3, pc}
 8013f7c:	2000da74 	.word	0x2000da74

08013f80 <calloc>:
 8013f80:	4b02      	ldr	r3, [pc, #8]	@ (8013f8c <calloc+0xc>)
 8013f82:	460a      	mov	r2, r1
 8013f84:	4601      	mov	r1, r0
 8013f86:	6818      	ldr	r0, [r3, #0]
 8013f88:	f000 b802 	b.w	8013f90 <_calloc_r>
 8013f8c:	200001e4 	.word	0x200001e4

08013f90 <_calloc_r>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	fba1 5402 	umull	r5, r4, r1, r2
 8013f96:	b93c      	cbnz	r4, 8013fa8 <_calloc_r+0x18>
 8013f98:	4629      	mov	r1, r5
 8013f9a:	f000 f887 	bl	80140ac <_malloc_r>
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	b928      	cbnz	r0, 8013fae <_calloc_r+0x1e>
 8013fa2:	2600      	movs	r6, #0
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	bd70      	pop	{r4, r5, r6, pc}
 8013fa8:	220c      	movs	r2, #12
 8013faa:	6002      	str	r2, [r0, #0]
 8013fac:	e7f9      	b.n	8013fa2 <_calloc_r+0x12>
 8013fae:	462a      	mov	r2, r5
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	f000 fbbd 	bl	8014730 <memset>
 8013fb6:	e7f5      	b.n	8013fa4 <_calloc_r+0x14>

08013fb8 <getenv>:
 8013fb8:	b507      	push	{r0, r1, r2, lr}
 8013fba:	4b04      	ldr	r3, [pc, #16]	@ (8013fcc <getenv+0x14>)
 8013fbc:	4601      	mov	r1, r0
 8013fbe:	aa01      	add	r2, sp, #4
 8013fc0:	6818      	ldr	r0, [r3, #0]
 8013fc2:	f000 f805 	bl	8013fd0 <_findenv_r>
 8013fc6:	b003      	add	sp, #12
 8013fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fcc:	200001e4 	.word	0x200001e4

08013fd0 <_findenv_r>:
 8013fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014044 <_findenv_r+0x74>
 8013fd8:	4606      	mov	r6, r0
 8013fda:	4689      	mov	r9, r1
 8013fdc:	4617      	mov	r7, r2
 8013fde:	f000 fc9d 	bl	801491c <__env_lock>
 8013fe2:	f8da 4000 	ldr.w	r4, [sl]
 8013fe6:	b134      	cbz	r4, 8013ff6 <_findenv_r+0x26>
 8013fe8:	464b      	mov	r3, r9
 8013fea:	4698      	mov	r8, r3
 8013fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ff0:	b13a      	cbz	r2, 8014002 <_findenv_r+0x32>
 8013ff2:	2a3d      	cmp	r2, #61	@ 0x3d
 8013ff4:	d1f9      	bne.n	8013fea <_findenv_r+0x1a>
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f000 fc96 	bl	8014928 <__env_unlock>
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014002:	eba8 0809 	sub.w	r8, r8, r9
 8014006:	46a3      	mov	fp, r4
 8014008:	f854 0b04 	ldr.w	r0, [r4], #4
 801400c:	2800      	cmp	r0, #0
 801400e:	d0f2      	beq.n	8013ff6 <_findenv_r+0x26>
 8014010:	4642      	mov	r2, r8
 8014012:	4649      	mov	r1, r9
 8014014:	f000 fba1 	bl	801475a <strncmp>
 8014018:	2800      	cmp	r0, #0
 801401a:	d1f4      	bne.n	8014006 <_findenv_r+0x36>
 801401c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014020:	eb03 0508 	add.w	r5, r3, r8
 8014024:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014028:	2b3d      	cmp	r3, #61	@ 0x3d
 801402a:	d1ec      	bne.n	8014006 <_findenv_r+0x36>
 801402c:	f8da 3000 	ldr.w	r3, [sl]
 8014030:	ebab 0303 	sub.w	r3, fp, r3
 8014034:	109b      	asrs	r3, r3, #2
 8014036:	4630      	mov	r0, r6
 8014038:	603b      	str	r3, [r7, #0]
 801403a:	f000 fc75 	bl	8014928 <__env_unlock>
 801403e:	1c68      	adds	r0, r5, #1
 8014040:	e7dd      	b.n	8013ffe <_findenv_r+0x2e>
 8014042:	bf00      	nop
 8014044:	20000000 	.word	0x20000000

08014048 <malloc>:
 8014048:	4b02      	ldr	r3, [pc, #8]	@ (8014054 <malloc+0xc>)
 801404a:	4601      	mov	r1, r0
 801404c:	6818      	ldr	r0, [r3, #0]
 801404e:	f000 b82d 	b.w	80140ac <_malloc_r>
 8014052:	bf00      	nop
 8014054:	200001e4 	.word	0x200001e4

08014058 <free>:
 8014058:	4b02      	ldr	r3, [pc, #8]	@ (8014064 <free+0xc>)
 801405a:	4601      	mov	r1, r0
 801405c:	6818      	ldr	r0, [r3, #0]
 801405e:	f000 bc69 	b.w	8014934 <_free_r>
 8014062:	bf00      	nop
 8014064:	200001e4 	.word	0x200001e4

08014068 <sbrk_aligned>:
 8014068:	b570      	push	{r4, r5, r6, lr}
 801406a:	4e0f      	ldr	r6, [pc, #60]	@ (80140a8 <sbrk_aligned+0x40>)
 801406c:	460c      	mov	r4, r1
 801406e:	6831      	ldr	r1, [r6, #0]
 8014070:	4605      	mov	r5, r0
 8014072:	b911      	cbnz	r1, 801407a <sbrk_aligned+0x12>
 8014074:	f000 fbce 	bl	8014814 <_sbrk_r>
 8014078:	6030      	str	r0, [r6, #0]
 801407a:	4621      	mov	r1, r4
 801407c:	4628      	mov	r0, r5
 801407e:	f000 fbc9 	bl	8014814 <_sbrk_r>
 8014082:	1c43      	adds	r3, r0, #1
 8014084:	d103      	bne.n	801408e <sbrk_aligned+0x26>
 8014086:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801408a:	4620      	mov	r0, r4
 801408c:	bd70      	pop	{r4, r5, r6, pc}
 801408e:	1cc4      	adds	r4, r0, #3
 8014090:	f024 0403 	bic.w	r4, r4, #3
 8014094:	42a0      	cmp	r0, r4
 8014096:	d0f8      	beq.n	801408a <sbrk_aligned+0x22>
 8014098:	1a21      	subs	r1, r4, r0
 801409a:	4628      	mov	r0, r5
 801409c:	f000 fbba 	bl	8014814 <_sbrk_r>
 80140a0:	3001      	adds	r0, #1
 80140a2:	d1f2      	bne.n	801408a <sbrk_aligned+0x22>
 80140a4:	e7ef      	b.n	8014086 <sbrk_aligned+0x1e>
 80140a6:	bf00      	nop
 80140a8:	2000dc98 	.word	0x2000dc98

080140ac <_malloc_r>:
 80140ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140b0:	1ccd      	adds	r5, r1, #3
 80140b2:	f025 0503 	bic.w	r5, r5, #3
 80140b6:	3508      	adds	r5, #8
 80140b8:	2d0c      	cmp	r5, #12
 80140ba:	bf38      	it	cc
 80140bc:	250c      	movcc	r5, #12
 80140be:	2d00      	cmp	r5, #0
 80140c0:	4606      	mov	r6, r0
 80140c2:	db01      	blt.n	80140c8 <_malloc_r+0x1c>
 80140c4:	42a9      	cmp	r1, r5
 80140c6:	d904      	bls.n	80140d2 <_malloc_r+0x26>
 80140c8:	230c      	movs	r3, #12
 80140ca:	6033      	str	r3, [r6, #0]
 80140cc:	2000      	movs	r0, #0
 80140ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80141a8 <_malloc_r+0xfc>
 80140d6:	f000 f869 	bl	80141ac <__malloc_lock>
 80140da:	f8d8 3000 	ldr.w	r3, [r8]
 80140de:	461c      	mov	r4, r3
 80140e0:	bb44      	cbnz	r4, 8014134 <_malloc_r+0x88>
 80140e2:	4629      	mov	r1, r5
 80140e4:	4630      	mov	r0, r6
 80140e6:	f7ff ffbf 	bl	8014068 <sbrk_aligned>
 80140ea:	1c43      	adds	r3, r0, #1
 80140ec:	4604      	mov	r4, r0
 80140ee:	d158      	bne.n	80141a2 <_malloc_r+0xf6>
 80140f0:	f8d8 4000 	ldr.w	r4, [r8]
 80140f4:	4627      	mov	r7, r4
 80140f6:	2f00      	cmp	r7, #0
 80140f8:	d143      	bne.n	8014182 <_malloc_r+0xd6>
 80140fa:	2c00      	cmp	r4, #0
 80140fc:	d04b      	beq.n	8014196 <_malloc_r+0xea>
 80140fe:	6823      	ldr	r3, [r4, #0]
 8014100:	4639      	mov	r1, r7
 8014102:	4630      	mov	r0, r6
 8014104:	eb04 0903 	add.w	r9, r4, r3
 8014108:	f000 fb84 	bl	8014814 <_sbrk_r>
 801410c:	4581      	cmp	r9, r0
 801410e:	d142      	bne.n	8014196 <_malloc_r+0xea>
 8014110:	6821      	ldr	r1, [r4, #0]
 8014112:	1a6d      	subs	r5, r5, r1
 8014114:	4629      	mov	r1, r5
 8014116:	4630      	mov	r0, r6
 8014118:	f7ff ffa6 	bl	8014068 <sbrk_aligned>
 801411c:	3001      	adds	r0, #1
 801411e:	d03a      	beq.n	8014196 <_malloc_r+0xea>
 8014120:	6823      	ldr	r3, [r4, #0]
 8014122:	442b      	add	r3, r5
 8014124:	6023      	str	r3, [r4, #0]
 8014126:	f8d8 3000 	ldr.w	r3, [r8]
 801412a:	685a      	ldr	r2, [r3, #4]
 801412c:	bb62      	cbnz	r2, 8014188 <_malloc_r+0xdc>
 801412e:	f8c8 7000 	str.w	r7, [r8]
 8014132:	e00f      	b.n	8014154 <_malloc_r+0xa8>
 8014134:	6822      	ldr	r2, [r4, #0]
 8014136:	1b52      	subs	r2, r2, r5
 8014138:	d420      	bmi.n	801417c <_malloc_r+0xd0>
 801413a:	2a0b      	cmp	r2, #11
 801413c:	d917      	bls.n	801416e <_malloc_r+0xc2>
 801413e:	1961      	adds	r1, r4, r5
 8014140:	42a3      	cmp	r3, r4
 8014142:	6025      	str	r5, [r4, #0]
 8014144:	bf18      	it	ne
 8014146:	6059      	strne	r1, [r3, #4]
 8014148:	6863      	ldr	r3, [r4, #4]
 801414a:	bf08      	it	eq
 801414c:	f8c8 1000 	streq.w	r1, [r8]
 8014150:	5162      	str	r2, [r4, r5]
 8014152:	604b      	str	r3, [r1, #4]
 8014154:	4630      	mov	r0, r6
 8014156:	f000 f82f 	bl	80141b8 <__malloc_unlock>
 801415a:	f104 000b 	add.w	r0, r4, #11
 801415e:	1d23      	adds	r3, r4, #4
 8014160:	f020 0007 	bic.w	r0, r0, #7
 8014164:	1ac2      	subs	r2, r0, r3
 8014166:	bf1c      	itt	ne
 8014168:	1a1b      	subne	r3, r3, r0
 801416a:	50a3      	strne	r3, [r4, r2]
 801416c:	e7af      	b.n	80140ce <_malloc_r+0x22>
 801416e:	6862      	ldr	r2, [r4, #4]
 8014170:	42a3      	cmp	r3, r4
 8014172:	bf0c      	ite	eq
 8014174:	f8c8 2000 	streq.w	r2, [r8]
 8014178:	605a      	strne	r2, [r3, #4]
 801417a:	e7eb      	b.n	8014154 <_malloc_r+0xa8>
 801417c:	4623      	mov	r3, r4
 801417e:	6864      	ldr	r4, [r4, #4]
 8014180:	e7ae      	b.n	80140e0 <_malloc_r+0x34>
 8014182:	463c      	mov	r4, r7
 8014184:	687f      	ldr	r7, [r7, #4]
 8014186:	e7b6      	b.n	80140f6 <_malloc_r+0x4a>
 8014188:	461a      	mov	r2, r3
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	42a3      	cmp	r3, r4
 801418e:	d1fb      	bne.n	8014188 <_malloc_r+0xdc>
 8014190:	2300      	movs	r3, #0
 8014192:	6053      	str	r3, [r2, #4]
 8014194:	e7de      	b.n	8014154 <_malloc_r+0xa8>
 8014196:	230c      	movs	r3, #12
 8014198:	6033      	str	r3, [r6, #0]
 801419a:	4630      	mov	r0, r6
 801419c:	f000 f80c 	bl	80141b8 <__malloc_unlock>
 80141a0:	e794      	b.n	80140cc <_malloc_r+0x20>
 80141a2:	6005      	str	r5, [r0, #0]
 80141a4:	e7d6      	b.n	8014154 <_malloc_r+0xa8>
 80141a6:	bf00      	nop
 80141a8:	2000dc9c 	.word	0x2000dc9c

080141ac <__malloc_lock>:
 80141ac:	4801      	ldr	r0, [pc, #4]	@ (80141b4 <__malloc_lock+0x8>)
 80141ae:	f000 bb7e 	b.w	80148ae <__retarget_lock_acquire_recursive>
 80141b2:	bf00      	nop
 80141b4:	2000dde1 	.word	0x2000dde1

080141b8 <__malloc_unlock>:
 80141b8:	4801      	ldr	r0, [pc, #4]	@ (80141c0 <__malloc_unlock+0x8>)
 80141ba:	f000 bb79 	b.w	80148b0 <__retarget_lock_release_recursive>
 80141be:	bf00      	nop
 80141c0:	2000dde1 	.word	0x2000dde1

080141c4 <srand>:
 80141c4:	b538      	push	{r3, r4, r5, lr}
 80141c6:	4b10      	ldr	r3, [pc, #64]	@ (8014208 <srand+0x44>)
 80141c8:	681d      	ldr	r5, [r3, #0]
 80141ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80141cc:	4604      	mov	r4, r0
 80141ce:	b9b3      	cbnz	r3, 80141fe <srand+0x3a>
 80141d0:	2018      	movs	r0, #24
 80141d2:	f7ff ff39 	bl	8014048 <malloc>
 80141d6:	4602      	mov	r2, r0
 80141d8:	6328      	str	r0, [r5, #48]	@ 0x30
 80141da:	b920      	cbnz	r0, 80141e6 <srand+0x22>
 80141dc:	4b0b      	ldr	r3, [pc, #44]	@ (801420c <srand+0x48>)
 80141de:	480c      	ldr	r0, [pc, #48]	@ (8014210 <srand+0x4c>)
 80141e0:	2146      	movs	r1, #70	@ 0x46
 80141e2:	f000 fb7d 	bl	80148e0 <__assert_func>
 80141e6:	490b      	ldr	r1, [pc, #44]	@ (8014214 <srand+0x50>)
 80141e8:	4b0b      	ldr	r3, [pc, #44]	@ (8014218 <srand+0x54>)
 80141ea:	e9c0 1300 	strd	r1, r3, [r0]
 80141ee:	4b0b      	ldr	r3, [pc, #44]	@ (801421c <srand+0x58>)
 80141f0:	6083      	str	r3, [r0, #8]
 80141f2:	230b      	movs	r3, #11
 80141f4:	8183      	strh	r3, [r0, #12]
 80141f6:	2100      	movs	r1, #0
 80141f8:	2001      	movs	r0, #1
 80141fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80141fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014200:	2200      	movs	r2, #0
 8014202:	611c      	str	r4, [r3, #16]
 8014204:	615a      	str	r2, [r3, #20]
 8014206:	bd38      	pop	{r3, r4, r5, pc}
 8014208:	200001e4 	.word	0x200001e4
 801420c:	080162bc 	.word	0x080162bc
 8014210:	080162d3 	.word	0x080162d3
 8014214:	abcd330e 	.word	0xabcd330e
 8014218:	e66d1234 	.word	0xe66d1234
 801421c:	0005deec 	.word	0x0005deec

08014220 <rand>:
 8014220:	4b16      	ldr	r3, [pc, #88]	@ (801427c <rand+0x5c>)
 8014222:	b510      	push	{r4, lr}
 8014224:	681c      	ldr	r4, [r3, #0]
 8014226:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014228:	b9b3      	cbnz	r3, 8014258 <rand+0x38>
 801422a:	2018      	movs	r0, #24
 801422c:	f7ff ff0c 	bl	8014048 <malloc>
 8014230:	4602      	mov	r2, r0
 8014232:	6320      	str	r0, [r4, #48]	@ 0x30
 8014234:	b920      	cbnz	r0, 8014240 <rand+0x20>
 8014236:	4b12      	ldr	r3, [pc, #72]	@ (8014280 <rand+0x60>)
 8014238:	4812      	ldr	r0, [pc, #72]	@ (8014284 <rand+0x64>)
 801423a:	2152      	movs	r1, #82	@ 0x52
 801423c:	f000 fb50 	bl	80148e0 <__assert_func>
 8014240:	4911      	ldr	r1, [pc, #68]	@ (8014288 <rand+0x68>)
 8014242:	4b12      	ldr	r3, [pc, #72]	@ (801428c <rand+0x6c>)
 8014244:	e9c0 1300 	strd	r1, r3, [r0]
 8014248:	4b11      	ldr	r3, [pc, #68]	@ (8014290 <rand+0x70>)
 801424a:	6083      	str	r3, [r0, #8]
 801424c:	230b      	movs	r3, #11
 801424e:	8183      	strh	r3, [r0, #12]
 8014250:	2100      	movs	r1, #0
 8014252:	2001      	movs	r0, #1
 8014254:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014258:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801425a:	480e      	ldr	r0, [pc, #56]	@ (8014294 <rand+0x74>)
 801425c:	690b      	ldr	r3, [r1, #16]
 801425e:	694c      	ldr	r4, [r1, #20]
 8014260:	4a0d      	ldr	r2, [pc, #52]	@ (8014298 <rand+0x78>)
 8014262:	4358      	muls	r0, r3
 8014264:	fb02 0004 	mla	r0, r2, r4, r0
 8014268:	fba3 3202 	umull	r3, r2, r3, r2
 801426c:	3301      	adds	r3, #1
 801426e:	eb40 0002 	adc.w	r0, r0, r2
 8014272:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014276:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801427a:	bd10      	pop	{r4, pc}
 801427c:	200001e4 	.word	0x200001e4
 8014280:	080162bc 	.word	0x080162bc
 8014284:	080162d3 	.word	0x080162d3
 8014288:	abcd330e 	.word	0xabcd330e
 801428c:	e66d1234 	.word	0xe66d1234
 8014290:	0005deec 	.word	0x0005deec
 8014294:	5851f42d 	.word	0x5851f42d
 8014298:	4c957f2d 	.word	0x4c957f2d

0801429c <realloc>:
 801429c:	4b02      	ldr	r3, [pc, #8]	@ (80142a8 <realloc+0xc>)
 801429e:	460a      	mov	r2, r1
 80142a0:	4601      	mov	r1, r0
 80142a2:	6818      	ldr	r0, [r3, #0]
 80142a4:	f000 b802 	b.w	80142ac <_realloc_r>
 80142a8:	200001e4 	.word	0x200001e4

080142ac <_realloc_r>:
 80142ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b0:	4680      	mov	r8, r0
 80142b2:	4615      	mov	r5, r2
 80142b4:	460c      	mov	r4, r1
 80142b6:	b921      	cbnz	r1, 80142c2 <_realloc_r+0x16>
 80142b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	4611      	mov	r1, r2
 80142be:	f7ff bef5 	b.w	80140ac <_malloc_r>
 80142c2:	b92a      	cbnz	r2, 80142d0 <_realloc_r+0x24>
 80142c4:	f000 fb36 	bl	8014934 <_free_r>
 80142c8:	2400      	movs	r4, #0
 80142ca:	4620      	mov	r0, r4
 80142cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d0:	f000 fb7a 	bl	80149c8 <_malloc_usable_size_r>
 80142d4:	4285      	cmp	r5, r0
 80142d6:	4606      	mov	r6, r0
 80142d8:	d802      	bhi.n	80142e0 <_realloc_r+0x34>
 80142da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80142de:	d8f4      	bhi.n	80142ca <_realloc_r+0x1e>
 80142e0:	4629      	mov	r1, r5
 80142e2:	4640      	mov	r0, r8
 80142e4:	f7ff fee2 	bl	80140ac <_malloc_r>
 80142e8:	4607      	mov	r7, r0
 80142ea:	2800      	cmp	r0, #0
 80142ec:	d0ec      	beq.n	80142c8 <_realloc_r+0x1c>
 80142ee:	42b5      	cmp	r5, r6
 80142f0:	462a      	mov	r2, r5
 80142f2:	4621      	mov	r1, r4
 80142f4:	bf28      	it	cs
 80142f6:	4632      	movcs	r2, r6
 80142f8:	f000 fae3 	bl	80148c2 <memcpy>
 80142fc:	4621      	mov	r1, r4
 80142fe:	4640      	mov	r0, r8
 8014300:	f000 fb18 	bl	8014934 <_free_r>
 8014304:	463c      	mov	r4, r7
 8014306:	e7e0      	b.n	80142ca <_realloc_r+0x1e>

08014308 <_strtoul_l.constprop.0>:
 8014308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801430c:	4e34      	ldr	r6, [pc, #208]	@ (80143e0 <_strtoul_l.constprop.0+0xd8>)
 801430e:	4686      	mov	lr, r0
 8014310:	460d      	mov	r5, r1
 8014312:	4628      	mov	r0, r5
 8014314:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014318:	5d37      	ldrb	r7, [r6, r4]
 801431a:	f017 0708 	ands.w	r7, r7, #8
 801431e:	d1f8      	bne.n	8014312 <_strtoul_l.constprop.0+0xa>
 8014320:	2c2d      	cmp	r4, #45	@ 0x2d
 8014322:	d12f      	bne.n	8014384 <_strtoul_l.constprop.0+0x7c>
 8014324:	782c      	ldrb	r4, [r5, #0]
 8014326:	2701      	movs	r7, #1
 8014328:	1c85      	adds	r5, r0, #2
 801432a:	f033 0010 	bics.w	r0, r3, #16
 801432e:	d109      	bne.n	8014344 <_strtoul_l.constprop.0+0x3c>
 8014330:	2c30      	cmp	r4, #48	@ 0x30
 8014332:	d12c      	bne.n	801438e <_strtoul_l.constprop.0+0x86>
 8014334:	7828      	ldrb	r0, [r5, #0]
 8014336:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801433a:	2858      	cmp	r0, #88	@ 0x58
 801433c:	d127      	bne.n	801438e <_strtoul_l.constprop.0+0x86>
 801433e:	786c      	ldrb	r4, [r5, #1]
 8014340:	2310      	movs	r3, #16
 8014342:	3502      	adds	r5, #2
 8014344:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014348:	2600      	movs	r6, #0
 801434a:	fbb8 f8f3 	udiv	r8, r8, r3
 801434e:	fb03 f908 	mul.w	r9, r3, r8
 8014352:	ea6f 0909 	mvn.w	r9, r9
 8014356:	4630      	mov	r0, r6
 8014358:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801435c:	f1bc 0f09 	cmp.w	ip, #9
 8014360:	d81c      	bhi.n	801439c <_strtoul_l.constprop.0+0x94>
 8014362:	4664      	mov	r4, ip
 8014364:	42a3      	cmp	r3, r4
 8014366:	dd2a      	ble.n	80143be <_strtoul_l.constprop.0+0xb6>
 8014368:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801436c:	d007      	beq.n	801437e <_strtoul_l.constprop.0+0x76>
 801436e:	4580      	cmp	r8, r0
 8014370:	d322      	bcc.n	80143b8 <_strtoul_l.constprop.0+0xb0>
 8014372:	d101      	bne.n	8014378 <_strtoul_l.constprop.0+0x70>
 8014374:	45a1      	cmp	r9, r4
 8014376:	db1f      	blt.n	80143b8 <_strtoul_l.constprop.0+0xb0>
 8014378:	fb00 4003 	mla	r0, r0, r3, r4
 801437c:	2601      	movs	r6, #1
 801437e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014382:	e7e9      	b.n	8014358 <_strtoul_l.constprop.0+0x50>
 8014384:	2c2b      	cmp	r4, #43	@ 0x2b
 8014386:	bf04      	itt	eq
 8014388:	782c      	ldrbeq	r4, [r5, #0]
 801438a:	1c85      	addeq	r5, r0, #2
 801438c:	e7cd      	b.n	801432a <_strtoul_l.constprop.0+0x22>
 801438e:	2b00      	cmp	r3, #0
 8014390:	d1d8      	bne.n	8014344 <_strtoul_l.constprop.0+0x3c>
 8014392:	2c30      	cmp	r4, #48	@ 0x30
 8014394:	bf0c      	ite	eq
 8014396:	2308      	moveq	r3, #8
 8014398:	230a      	movne	r3, #10
 801439a:	e7d3      	b.n	8014344 <_strtoul_l.constprop.0+0x3c>
 801439c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80143a0:	f1bc 0f19 	cmp.w	ip, #25
 80143a4:	d801      	bhi.n	80143aa <_strtoul_l.constprop.0+0xa2>
 80143a6:	3c37      	subs	r4, #55	@ 0x37
 80143a8:	e7dc      	b.n	8014364 <_strtoul_l.constprop.0+0x5c>
 80143aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80143ae:	f1bc 0f19 	cmp.w	ip, #25
 80143b2:	d804      	bhi.n	80143be <_strtoul_l.constprop.0+0xb6>
 80143b4:	3c57      	subs	r4, #87	@ 0x57
 80143b6:	e7d5      	b.n	8014364 <_strtoul_l.constprop.0+0x5c>
 80143b8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80143bc:	e7df      	b.n	801437e <_strtoul_l.constprop.0+0x76>
 80143be:	1c73      	adds	r3, r6, #1
 80143c0:	d106      	bne.n	80143d0 <_strtoul_l.constprop.0+0xc8>
 80143c2:	2322      	movs	r3, #34	@ 0x22
 80143c4:	f8ce 3000 	str.w	r3, [lr]
 80143c8:	4630      	mov	r0, r6
 80143ca:	b932      	cbnz	r2, 80143da <_strtoul_l.constprop.0+0xd2>
 80143cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143d0:	b107      	cbz	r7, 80143d4 <_strtoul_l.constprop.0+0xcc>
 80143d2:	4240      	negs	r0, r0
 80143d4:	2a00      	cmp	r2, #0
 80143d6:	d0f9      	beq.n	80143cc <_strtoul_l.constprop.0+0xc4>
 80143d8:	b106      	cbz	r6, 80143dc <_strtoul_l.constprop.0+0xd4>
 80143da:	1e69      	subs	r1, r5, #1
 80143dc:	6011      	str	r1, [r2, #0]
 80143de:	e7f5      	b.n	80143cc <_strtoul_l.constprop.0+0xc4>
 80143e0:	0801632c 	.word	0x0801632c

080143e4 <strtoul>:
 80143e4:	4613      	mov	r3, r2
 80143e6:	460a      	mov	r2, r1
 80143e8:	4601      	mov	r1, r0
 80143ea:	4802      	ldr	r0, [pc, #8]	@ (80143f4 <strtoul+0x10>)
 80143ec:	6800      	ldr	r0, [r0, #0]
 80143ee:	f7ff bf8b 	b.w	8014308 <_strtoul_l.constprop.0>
 80143f2:	bf00      	nop
 80143f4:	200001e4 	.word	0x200001e4

080143f8 <std>:
 80143f8:	2300      	movs	r3, #0
 80143fa:	b510      	push	{r4, lr}
 80143fc:	4604      	mov	r4, r0
 80143fe:	e9c0 3300 	strd	r3, r3, [r0]
 8014402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014406:	6083      	str	r3, [r0, #8]
 8014408:	8181      	strh	r1, [r0, #12]
 801440a:	6643      	str	r3, [r0, #100]	@ 0x64
 801440c:	81c2      	strh	r2, [r0, #14]
 801440e:	6183      	str	r3, [r0, #24]
 8014410:	4619      	mov	r1, r3
 8014412:	2208      	movs	r2, #8
 8014414:	305c      	adds	r0, #92	@ 0x5c
 8014416:	f000 f98b 	bl	8014730 <memset>
 801441a:	4b0d      	ldr	r3, [pc, #52]	@ (8014450 <std+0x58>)
 801441c:	6263      	str	r3, [r4, #36]	@ 0x24
 801441e:	4b0d      	ldr	r3, [pc, #52]	@ (8014454 <std+0x5c>)
 8014420:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014422:	4b0d      	ldr	r3, [pc, #52]	@ (8014458 <std+0x60>)
 8014424:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014426:	4b0d      	ldr	r3, [pc, #52]	@ (801445c <std+0x64>)
 8014428:	6323      	str	r3, [r4, #48]	@ 0x30
 801442a:	4b0d      	ldr	r3, [pc, #52]	@ (8014460 <std+0x68>)
 801442c:	6224      	str	r4, [r4, #32]
 801442e:	429c      	cmp	r4, r3
 8014430:	d006      	beq.n	8014440 <std+0x48>
 8014432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014436:	4294      	cmp	r4, r2
 8014438:	d002      	beq.n	8014440 <std+0x48>
 801443a:	33d0      	adds	r3, #208	@ 0xd0
 801443c:	429c      	cmp	r4, r3
 801443e:	d105      	bne.n	801444c <std+0x54>
 8014440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014448:	f000 ba30 	b.w	80148ac <__retarget_lock_init_recursive>
 801444c:	bd10      	pop	{r4, pc}
 801444e:	bf00      	nop
 8014450:	080145e5 	.word	0x080145e5
 8014454:	08014607 	.word	0x08014607
 8014458:	0801463f 	.word	0x0801463f
 801445c:	08014663 	.word	0x08014663
 8014460:	2000dca0 	.word	0x2000dca0

08014464 <stdio_exit_handler>:
 8014464:	4a02      	ldr	r2, [pc, #8]	@ (8014470 <stdio_exit_handler+0xc>)
 8014466:	4903      	ldr	r1, [pc, #12]	@ (8014474 <stdio_exit_handler+0x10>)
 8014468:	4803      	ldr	r0, [pc, #12]	@ (8014478 <stdio_exit_handler+0x14>)
 801446a:	f000 b869 	b.w	8014540 <_fwalk_sglue>
 801446e:	bf00      	nop
 8014470:	200001d8 	.word	0x200001d8
 8014474:	080150ad 	.word	0x080150ad
 8014478:	200001e8 	.word	0x200001e8

0801447c <cleanup_stdio>:
 801447c:	6841      	ldr	r1, [r0, #4]
 801447e:	4b0c      	ldr	r3, [pc, #48]	@ (80144b0 <cleanup_stdio+0x34>)
 8014480:	4299      	cmp	r1, r3
 8014482:	b510      	push	{r4, lr}
 8014484:	4604      	mov	r4, r0
 8014486:	d001      	beq.n	801448c <cleanup_stdio+0x10>
 8014488:	f000 fe10 	bl	80150ac <_fflush_r>
 801448c:	68a1      	ldr	r1, [r4, #8]
 801448e:	4b09      	ldr	r3, [pc, #36]	@ (80144b4 <cleanup_stdio+0x38>)
 8014490:	4299      	cmp	r1, r3
 8014492:	d002      	beq.n	801449a <cleanup_stdio+0x1e>
 8014494:	4620      	mov	r0, r4
 8014496:	f000 fe09 	bl	80150ac <_fflush_r>
 801449a:	68e1      	ldr	r1, [r4, #12]
 801449c:	4b06      	ldr	r3, [pc, #24]	@ (80144b8 <cleanup_stdio+0x3c>)
 801449e:	4299      	cmp	r1, r3
 80144a0:	d004      	beq.n	80144ac <cleanup_stdio+0x30>
 80144a2:	4620      	mov	r0, r4
 80144a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144a8:	f000 be00 	b.w	80150ac <_fflush_r>
 80144ac:	bd10      	pop	{r4, pc}
 80144ae:	bf00      	nop
 80144b0:	2000dca0 	.word	0x2000dca0
 80144b4:	2000dd08 	.word	0x2000dd08
 80144b8:	2000dd70 	.word	0x2000dd70

080144bc <global_stdio_init.part.0>:
 80144bc:	b510      	push	{r4, lr}
 80144be:	4b0b      	ldr	r3, [pc, #44]	@ (80144ec <global_stdio_init.part.0+0x30>)
 80144c0:	4c0b      	ldr	r4, [pc, #44]	@ (80144f0 <global_stdio_init.part.0+0x34>)
 80144c2:	4a0c      	ldr	r2, [pc, #48]	@ (80144f4 <global_stdio_init.part.0+0x38>)
 80144c4:	601a      	str	r2, [r3, #0]
 80144c6:	4620      	mov	r0, r4
 80144c8:	2200      	movs	r2, #0
 80144ca:	2104      	movs	r1, #4
 80144cc:	f7ff ff94 	bl	80143f8 <std>
 80144d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80144d4:	2201      	movs	r2, #1
 80144d6:	2109      	movs	r1, #9
 80144d8:	f7ff ff8e 	bl	80143f8 <std>
 80144dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80144e0:	2202      	movs	r2, #2
 80144e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144e6:	2112      	movs	r1, #18
 80144e8:	f7ff bf86 	b.w	80143f8 <std>
 80144ec:	2000ddd8 	.word	0x2000ddd8
 80144f0:	2000dca0 	.word	0x2000dca0
 80144f4:	08014465 	.word	0x08014465

080144f8 <__sfp_lock_acquire>:
 80144f8:	4801      	ldr	r0, [pc, #4]	@ (8014500 <__sfp_lock_acquire+0x8>)
 80144fa:	f000 b9d8 	b.w	80148ae <__retarget_lock_acquire_recursive>
 80144fe:	bf00      	nop
 8014500:	2000dde2 	.word	0x2000dde2

08014504 <__sfp_lock_release>:
 8014504:	4801      	ldr	r0, [pc, #4]	@ (801450c <__sfp_lock_release+0x8>)
 8014506:	f000 b9d3 	b.w	80148b0 <__retarget_lock_release_recursive>
 801450a:	bf00      	nop
 801450c:	2000dde2 	.word	0x2000dde2

08014510 <__sinit>:
 8014510:	b510      	push	{r4, lr}
 8014512:	4604      	mov	r4, r0
 8014514:	f7ff fff0 	bl	80144f8 <__sfp_lock_acquire>
 8014518:	6a23      	ldr	r3, [r4, #32]
 801451a:	b11b      	cbz	r3, 8014524 <__sinit+0x14>
 801451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014520:	f7ff bff0 	b.w	8014504 <__sfp_lock_release>
 8014524:	4b04      	ldr	r3, [pc, #16]	@ (8014538 <__sinit+0x28>)
 8014526:	6223      	str	r3, [r4, #32]
 8014528:	4b04      	ldr	r3, [pc, #16]	@ (801453c <__sinit+0x2c>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d1f5      	bne.n	801451c <__sinit+0xc>
 8014530:	f7ff ffc4 	bl	80144bc <global_stdio_init.part.0>
 8014534:	e7f2      	b.n	801451c <__sinit+0xc>
 8014536:	bf00      	nop
 8014538:	0801447d 	.word	0x0801447d
 801453c:	2000ddd8 	.word	0x2000ddd8

08014540 <_fwalk_sglue>:
 8014540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014544:	4607      	mov	r7, r0
 8014546:	4688      	mov	r8, r1
 8014548:	4614      	mov	r4, r2
 801454a:	2600      	movs	r6, #0
 801454c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014550:	f1b9 0901 	subs.w	r9, r9, #1
 8014554:	d505      	bpl.n	8014562 <_fwalk_sglue+0x22>
 8014556:	6824      	ldr	r4, [r4, #0]
 8014558:	2c00      	cmp	r4, #0
 801455a:	d1f7      	bne.n	801454c <_fwalk_sglue+0xc>
 801455c:	4630      	mov	r0, r6
 801455e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014562:	89ab      	ldrh	r3, [r5, #12]
 8014564:	2b01      	cmp	r3, #1
 8014566:	d907      	bls.n	8014578 <_fwalk_sglue+0x38>
 8014568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801456c:	3301      	adds	r3, #1
 801456e:	d003      	beq.n	8014578 <_fwalk_sglue+0x38>
 8014570:	4629      	mov	r1, r5
 8014572:	4638      	mov	r0, r7
 8014574:	47c0      	blx	r8
 8014576:	4306      	orrs	r6, r0
 8014578:	3568      	adds	r5, #104	@ 0x68
 801457a:	e7e9      	b.n	8014550 <_fwalk_sglue+0x10>

0801457c <sniprintf>:
 801457c:	b40c      	push	{r2, r3}
 801457e:	b530      	push	{r4, r5, lr}
 8014580:	4b17      	ldr	r3, [pc, #92]	@ (80145e0 <sniprintf+0x64>)
 8014582:	1e0c      	subs	r4, r1, #0
 8014584:	681d      	ldr	r5, [r3, #0]
 8014586:	b09d      	sub	sp, #116	@ 0x74
 8014588:	da08      	bge.n	801459c <sniprintf+0x20>
 801458a:	238b      	movs	r3, #139	@ 0x8b
 801458c:	602b      	str	r3, [r5, #0]
 801458e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014592:	b01d      	add	sp, #116	@ 0x74
 8014594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014598:	b002      	add	sp, #8
 801459a:	4770      	bx	lr
 801459c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80145a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80145a4:	bf14      	ite	ne
 80145a6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80145aa:	4623      	moveq	r3, r4
 80145ac:	9304      	str	r3, [sp, #16]
 80145ae:	9307      	str	r3, [sp, #28]
 80145b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80145b4:	9002      	str	r0, [sp, #8]
 80145b6:	9006      	str	r0, [sp, #24]
 80145b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80145bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80145be:	ab21      	add	r3, sp, #132	@ 0x84
 80145c0:	a902      	add	r1, sp, #8
 80145c2:	4628      	mov	r0, r5
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	f000 fa63 	bl	8014a90 <_svfiprintf_r>
 80145ca:	1c43      	adds	r3, r0, #1
 80145cc:	bfbc      	itt	lt
 80145ce:	238b      	movlt	r3, #139	@ 0x8b
 80145d0:	602b      	strlt	r3, [r5, #0]
 80145d2:	2c00      	cmp	r4, #0
 80145d4:	d0dd      	beq.n	8014592 <sniprintf+0x16>
 80145d6:	9b02      	ldr	r3, [sp, #8]
 80145d8:	2200      	movs	r2, #0
 80145da:	701a      	strb	r2, [r3, #0]
 80145dc:	e7d9      	b.n	8014592 <sniprintf+0x16>
 80145de:	bf00      	nop
 80145e0:	200001e4 	.word	0x200001e4

080145e4 <__sread>:
 80145e4:	b510      	push	{r4, lr}
 80145e6:	460c      	mov	r4, r1
 80145e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145ec:	f000 f900 	bl	80147f0 <_read_r>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	bfab      	itete	ge
 80145f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80145f6:	89a3      	ldrhlt	r3, [r4, #12]
 80145f8:	181b      	addge	r3, r3, r0
 80145fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80145fe:	bfac      	ite	ge
 8014600:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014602:	81a3      	strhlt	r3, [r4, #12]
 8014604:	bd10      	pop	{r4, pc}

08014606 <__swrite>:
 8014606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801460a:	461f      	mov	r7, r3
 801460c:	898b      	ldrh	r3, [r1, #12]
 801460e:	05db      	lsls	r3, r3, #23
 8014610:	4605      	mov	r5, r0
 8014612:	460c      	mov	r4, r1
 8014614:	4616      	mov	r6, r2
 8014616:	d505      	bpl.n	8014624 <__swrite+0x1e>
 8014618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801461c:	2302      	movs	r3, #2
 801461e:	2200      	movs	r2, #0
 8014620:	f000 f8d4 	bl	80147cc <_lseek_r>
 8014624:	89a3      	ldrh	r3, [r4, #12]
 8014626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801462a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801462e:	81a3      	strh	r3, [r4, #12]
 8014630:	4632      	mov	r2, r6
 8014632:	463b      	mov	r3, r7
 8014634:	4628      	mov	r0, r5
 8014636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801463a:	f000 b8fb 	b.w	8014834 <_write_r>

0801463e <__sseek>:
 801463e:	b510      	push	{r4, lr}
 8014640:	460c      	mov	r4, r1
 8014642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014646:	f000 f8c1 	bl	80147cc <_lseek_r>
 801464a:	1c43      	adds	r3, r0, #1
 801464c:	89a3      	ldrh	r3, [r4, #12]
 801464e:	bf15      	itete	ne
 8014650:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801465a:	81a3      	strheq	r3, [r4, #12]
 801465c:	bf18      	it	ne
 801465e:	81a3      	strhne	r3, [r4, #12]
 8014660:	bd10      	pop	{r4, pc}

08014662 <__sclose>:
 8014662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014666:	f000 b8a1 	b.w	80147ac <_close_r>

0801466a <_vsniprintf_r>:
 801466a:	b530      	push	{r4, r5, lr}
 801466c:	4614      	mov	r4, r2
 801466e:	2c00      	cmp	r4, #0
 8014670:	b09b      	sub	sp, #108	@ 0x6c
 8014672:	4605      	mov	r5, r0
 8014674:	461a      	mov	r2, r3
 8014676:	da05      	bge.n	8014684 <_vsniprintf_r+0x1a>
 8014678:	238b      	movs	r3, #139	@ 0x8b
 801467a:	6003      	str	r3, [r0, #0]
 801467c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014680:	b01b      	add	sp, #108	@ 0x6c
 8014682:	bd30      	pop	{r4, r5, pc}
 8014684:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014688:	f8ad 300c 	strh.w	r3, [sp, #12]
 801468c:	bf14      	ite	ne
 801468e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014692:	4623      	moveq	r3, r4
 8014694:	9302      	str	r3, [sp, #8]
 8014696:	9305      	str	r3, [sp, #20]
 8014698:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801469c:	9100      	str	r1, [sp, #0]
 801469e:	9104      	str	r1, [sp, #16]
 80146a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80146a4:	4669      	mov	r1, sp
 80146a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80146a8:	f000 f9f2 	bl	8014a90 <_svfiprintf_r>
 80146ac:	1c43      	adds	r3, r0, #1
 80146ae:	bfbc      	itt	lt
 80146b0:	238b      	movlt	r3, #139	@ 0x8b
 80146b2:	602b      	strlt	r3, [r5, #0]
 80146b4:	2c00      	cmp	r4, #0
 80146b6:	d0e3      	beq.n	8014680 <_vsniprintf_r+0x16>
 80146b8:	9b00      	ldr	r3, [sp, #0]
 80146ba:	2200      	movs	r2, #0
 80146bc:	701a      	strb	r2, [r3, #0]
 80146be:	e7df      	b.n	8014680 <_vsniprintf_r+0x16>

080146c0 <vsniprintf>:
 80146c0:	b507      	push	{r0, r1, r2, lr}
 80146c2:	9300      	str	r3, [sp, #0]
 80146c4:	4613      	mov	r3, r2
 80146c6:	460a      	mov	r2, r1
 80146c8:	4601      	mov	r1, r0
 80146ca:	4803      	ldr	r0, [pc, #12]	@ (80146d8 <vsniprintf+0x18>)
 80146cc:	6800      	ldr	r0, [r0, #0]
 80146ce:	f7ff ffcc 	bl	801466a <_vsniprintf_r>
 80146d2:	b003      	add	sp, #12
 80146d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80146d8:	200001e4 	.word	0x200001e4

080146dc <memcmp>:
 80146dc:	b510      	push	{r4, lr}
 80146de:	3901      	subs	r1, #1
 80146e0:	4402      	add	r2, r0
 80146e2:	4290      	cmp	r0, r2
 80146e4:	d101      	bne.n	80146ea <memcmp+0xe>
 80146e6:	2000      	movs	r0, #0
 80146e8:	e005      	b.n	80146f6 <memcmp+0x1a>
 80146ea:	7803      	ldrb	r3, [r0, #0]
 80146ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80146f0:	42a3      	cmp	r3, r4
 80146f2:	d001      	beq.n	80146f8 <memcmp+0x1c>
 80146f4:	1b18      	subs	r0, r3, r4
 80146f6:	bd10      	pop	{r4, pc}
 80146f8:	3001      	adds	r0, #1
 80146fa:	e7f2      	b.n	80146e2 <memcmp+0x6>

080146fc <memmove>:
 80146fc:	4288      	cmp	r0, r1
 80146fe:	b510      	push	{r4, lr}
 8014700:	eb01 0402 	add.w	r4, r1, r2
 8014704:	d902      	bls.n	801470c <memmove+0x10>
 8014706:	4284      	cmp	r4, r0
 8014708:	4623      	mov	r3, r4
 801470a:	d807      	bhi.n	801471c <memmove+0x20>
 801470c:	1e43      	subs	r3, r0, #1
 801470e:	42a1      	cmp	r1, r4
 8014710:	d008      	beq.n	8014724 <memmove+0x28>
 8014712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014716:	f803 2f01 	strb.w	r2, [r3, #1]!
 801471a:	e7f8      	b.n	801470e <memmove+0x12>
 801471c:	4402      	add	r2, r0
 801471e:	4601      	mov	r1, r0
 8014720:	428a      	cmp	r2, r1
 8014722:	d100      	bne.n	8014726 <memmove+0x2a>
 8014724:	bd10      	pop	{r4, pc}
 8014726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801472a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801472e:	e7f7      	b.n	8014720 <memmove+0x24>

08014730 <memset>:
 8014730:	4402      	add	r2, r0
 8014732:	4603      	mov	r3, r0
 8014734:	4293      	cmp	r3, r2
 8014736:	d100      	bne.n	801473a <memset+0xa>
 8014738:	4770      	bx	lr
 801473a:	f803 1b01 	strb.w	r1, [r3], #1
 801473e:	e7f9      	b.n	8014734 <memset+0x4>

08014740 <strchr>:
 8014740:	b2c9      	uxtb	r1, r1
 8014742:	4603      	mov	r3, r0
 8014744:	4618      	mov	r0, r3
 8014746:	f813 2b01 	ldrb.w	r2, [r3], #1
 801474a:	b112      	cbz	r2, 8014752 <strchr+0x12>
 801474c:	428a      	cmp	r2, r1
 801474e:	d1f9      	bne.n	8014744 <strchr+0x4>
 8014750:	4770      	bx	lr
 8014752:	2900      	cmp	r1, #0
 8014754:	bf18      	it	ne
 8014756:	2000      	movne	r0, #0
 8014758:	4770      	bx	lr

0801475a <strncmp>:
 801475a:	b510      	push	{r4, lr}
 801475c:	b16a      	cbz	r2, 801477a <strncmp+0x20>
 801475e:	3901      	subs	r1, #1
 8014760:	1884      	adds	r4, r0, r2
 8014762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801476a:	429a      	cmp	r2, r3
 801476c:	d103      	bne.n	8014776 <strncmp+0x1c>
 801476e:	42a0      	cmp	r0, r4
 8014770:	d001      	beq.n	8014776 <strncmp+0x1c>
 8014772:	2a00      	cmp	r2, #0
 8014774:	d1f5      	bne.n	8014762 <strncmp+0x8>
 8014776:	1ad0      	subs	r0, r2, r3
 8014778:	bd10      	pop	{r4, pc}
 801477a:	4610      	mov	r0, r2
 801477c:	e7fc      	b.n	8014778 <strncmp+0x1e>

0801477e <strstr>:
 801477e:	780a      	ldrb	r2, [r1, #0]
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	b96a      	cbnz	r2, 80147a0 <strstr+0x22>
 8014784:	bd70      	pop	{r4, r5, r6, pc}
 8014786:	429a      	cmp	r2, r3
 8014788:	d109      	bne.n	801479e <strstr+0x20>
 801478a:	460c      	mov	r4, r1
 801478c:	4605      	mov	r5, r0
 801478e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014792:	2b00      	cmp	r3, #0
 8014794:	d0f6      	beq.n	8014784 <strstr+0x6>
 8014796:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801479a:	429e      	cmp	r6, r3
 801479c:	d0f7      	beq.n	801478e <strstr+0x10>
 801479e:	3001      	adds	r0, #1
 80147a0:	7803      	ldrb	r3, [r0, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d1ef      	bne.n	8014786 <strstr+0x8>
 80147a6:	4618      	mov	r0, r3
 80147a8:	e7ec      	b.n	8014784 <strstr+0x6>
	...

080147ac <_close_r>:
 80147ac:	b538      	push	{r3, r4, r5, lr}
 80147ae:	4d06      	ldr	r5, [pc, #24]	@ (80147c8 <_close_r+0x1c>)
 80147b0:	2300      	movs	r3, #0
 80147b2:	4604      	mov	r4, r0
 80147b4:	4608      	mov	r0, r1
 80147b6:	602b      	str	r3, [r5, #0]
 80147b8:	f7ed f87c 	bl	80018b4 <_close>
 80147bc:	1c43      	adds	r3, r0, #1
 80147be:	d102      	bne.n	80147c6 <_close_r+0x1a>
 80147c0:	682b      	ldr	r3, [r5, #0]
 80147c2:	b103      	cbz	r3, 80147c6 <_close_r+0x1a>
 80147c4:	6023      	str	r3, [r4, #0]
 80147c6:	bd38      	pop	{r3, r4, r5, pc}
 80147c8:	2000dddc 	.word	0x2000dddc

080147cc <_lseek_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d07      	ldr	r5, [pc, #28]	@ (80147ec <_lseek_r+0x20>)
 80147d0:	4604      	mov	r4, r0
 80147d2:	4608      	mov	r0, r1
 80147d4:	4611      	mov	r1, r2
 80147d6:	2200      	movs	r2, #0
 80147d8:	602a      	str	r2, [r5, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	f7ed f891 	bl	8001902 <_lseek>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d102      	bne.n	80147ea <_lseek_r+0x1e>
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	b103      	cbz	r3, 80147ea <_lseek_r+0x1e>
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	2000dddc 	.word	0x2000dddc

080147f0 <_read_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d07      	ldr	r5, [pc, #28]	@ (8014810 <_read_r+0x20>)
 80147f4:	4604      	mov	r4, r0
 80147f6:	4608      	mov	r0, r1
 80147f8:	4611      	mov	r1, r2
 80147fa:	2200      	movs	r2, #0
 80147fc:	602a      	str	r2, [r5, #0]
 80147fe:	461a      	mov	r2, r3
 8014800:	f7ed f81f 	bl	8001842 <_read>
 8014804:	1c43      	adds	r3, r0, #1
 8014806:	d102      	bne.n	801480e <_read_r+0x1e>
 8014808:	682b      	ldr	r3, [r5, #0]
 801480a:	b103      	cbz	r3, 801480e <_read_r+0x1e>
 801480c:	6023      	str	r3, [r4, #0]
 801480e:	bd38      	pop	{r3, r4, r5, pc}
 8014810:	2000dddc 	.word	0x2000dddc

08014814 <_sbrk_r>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	4d06      	ldr	r5, [pc, #24]	@ (8014830 <_sbrk_r+0x1c>)
 8014818:	2300      	movs	r3, #0
 801481a:	4604      	mov	r4, r0
 801481c:	4608      	mov	r0, r1
 801481e:	602b      	str	r3, [r5, #0]
 8014820:	f7ed f87c 	bl	800191c <_sbrk>
 8014824:	1c43      	adds	r3, r0, #1
 8014826:	d102      	bne.n	801482e <_sbrk_r+0x1a>
 8014828:	682b      	ldr	r3, [r5, #0]
 801482a:	b103      	cbz	r3, 801482e <_sbrk_r+0x1a>
 801482c:	6023      	str	r3, [r4, #0]
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	2000dddc 	.word	0x2000dddc

08014834 <_write_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	4d07      	ldr	r5, [pc, #28]	@ (8014854 <_write_r+0x20>)
 8014838:	4604      	mov	r4, r0
 801483a:	4608      	mov	r0, r1
 801483c:	4611      	mov	r1, r2
 801483e:	2200      	movs	r2, #0
 8014840:	602a      	str	r2, [r5, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	f7ed f81a 	bl	800187c <_write>
 8014848:	1c43      	adds	r3, r0, #1
 801484a:	d102      	bne.n	8014852 <_write_r+0x1e>
 801484c:	682b      	ldr	r3, [r5, #0]
 801484e:	b103      	cbz	r3, 8014852 <_write_r+0x1e>
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	2000dddc 	.word	0x2000dddc

08014858 <__errno>:
 8014858:	4b01      	ldr	r3, [pc, #4]	@ (8014860 <__errno+0x8>)
 801485a:	6818      	ldr	r0, [r3, #0]
 801485c:	4770      	bx	lr
 801485e:	bf00      	nop
 8014860:	200001e4 	.word	0x200001e4

08014864 <__libc_init_array>:
 8014864:	b570      	push	{r4, r5, r6, lr}
 8014866:	4d0d      	ldr	r5, [pc, #52]	@ (801489c <__libc_init_array+0x38>)
 8014868:	4c0d      	ldr	r4, [pc, #52]	@ (80148a0 <__libc_init_array+0x3c>)
 801486a:	1b64      	subs	r4, r4, r5
 801486c:	10a4      	asrs	r4, r4, #2
 801486e:	2600      	movs	r6, #0
 8014870:	42a6      	cmp	r6, r4
 8014872:	d109      	bne.n	8014888 <__libc_init_array+0x24>
 8014874:	4d0b      	ldr	r5, [pc, #44]	@ (80148a4 <__libc_init_array+0x40>)
 8014876:	4c0c      	ldr	r4, [pc, #48]	@ (80148a8 <__libc_init_array+0x44>)
 8014878:	f000 fef6 	bl	8015668 <_init>
 801487c:	1b64      	subs	r4, r4, r5
 801487e:	10a4      	asrs	r4, r4, #2
 8014880:	2600      	movs	r6, #0
 8014882:	42a6      	cmp	r6, r4
 8014884:	d105      	bne.n	8014892 <__libc_init_array+0x2e>
 8014886:	bd70      	pop	{r4, r5, r6, pc}
 8014888:	f855 3b04 	ldr.w	r3, [r5], #4
 801488c:	4798      	blx	r3
 801488e:	3601      	adds	r6, #1
 8014890:	e7ee      	b.n	8014870 <__libc_init_array+0xc>
 8014892:	f855 3b04 	ldr.w	r3, [r5], #4
 8014896:	4798      	blx	r3
 8014898:	3601      	adds	r6, #1
 801489a:	e7f2      	b.n	8014882 <__libc_init_array+0x1e>
 801489c:	080164a4 	.word	0x080164a4
 80148a0:	080164a4 	.word	0x080164a4
 80148a4:	080164a4 	.word	0x080164a4
 80148a8:	080164ac 	.word	0x080164ac

080148ac <__retarget_lock_init_recursive>:
 80148ac:	4770      	bx	lr

080148ae <__retarget_lock_acquire_recursive>:
 80148ae:	4770      	bx	lr

080148b0 <__retarget_lock_release_recursive>:
 80148b0:	4770      	bx	lr

080148b2 <strcpy>:
 80148b2:	4603      	mov	r3, r0
 80148b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148b8:	f803 2b01 	strb.w	r2, [r3], #1
 80148bc:	2a00      	cmp	r2, #0
 80148be:	d1f9      	bne.n	80148b4 <strcpy+0x2>
 80148c0:	4770      	bx	lr

080148c2 <memcpy>:
 80148c2:	440a      	add	r2, r1
 80148c4:	4291      	cmp	r1, r2
 80148c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80148ca:	d100      	bne.n	80148ce <memcpy+0xc>
 80148cc:	4770      	bx	lr
 80148ce:	b510      	push	{r4, lr}
 80148d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148d8:	4291      	cmp	r1, r2
 80148da:	d1f9      	bne.n	80148d0 <memcpy+0xe>
 80148dc:	bd10      	pop	{r4, pc}
	...

080148e0 <__assert_func>:
 80148e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148e2:	4614      	mov	r4, r2
 80148e4:	461a      	mov	r2, r3
 80148e6:	4b09      	ldr	r3, [pc, #36]	@ (801490c <__assert_func+0x2c>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4605      	mov	r5, r0
 80148ec:	68d8      	ldr	r0, [r3, #12]
 80148ee:	b954      	cbnz	r4, 8014906 <__assert_func+0x26>
 80148f0:	4b07      	ldr	r3, [pc, #28]	@ (8014910 <__assert_func+0x30>)
 80148f2:	461c      	mov	r4, r3
 80148f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148f8:	9100      	str	r1, [sp, #0]
 80148fa:	462b      	mov	r3, r5
 80148fc:	4905      	ldr	r1, [pc, #20]	@ (8014914 <__assert_func+0x34>)
 80148fe:	f000 fbfd 	bl	80150fc <fiprintf>
 8014902:	f000 fc0d 	bl	8015120 <abort>
 8014906:	4b04      	ldr	r3, [pc, #16]	@ (8014918 <__assert_func+0x38>)
 8014908:	e7f4      	b.n	80148f4 <__assert_func+0x14>
 801490a:	bf00      	nop
 801490c:	200001e4 	.word	0x200001e4
 8014910:	08016467 	.word	0x08016467
 8014914:	08016439 	.word	0x08016439
 8014918:	0801642c 	.word	0x0801642c

0801491c <__env_lock>:
 801491c:	4801      	ldr	r0, [pc, #4]	@ (8014924 <__env_lock+0x8>)
 801491e:	f7ff bfc6 	b.w	80148ae <__retarget_lock_acquire_recursive>
 8014922:	bf00      	nop
 8014924:	2000dde0 	.word	0x2000dde0

08014928 <__env_unlock>:
 8014928:	4801      	ldr	r0, [pc, #4]	@ (8014930 <__env_unlock+0x8>)
 801492a:	f7ff bfc1 	b.w	80148b0 <__retarget_lock_release_recursive>
 801492e:	bf00      	nop
 8014930:	2000dde0 	.word	0x2000dde0

08014934 <_free_r>:
 8014934:	b538      	push	{r3, r4, r5, lr}
 8014936:	4605      	mov	r5, r0
 8014938:	2900      	cmp	r1, #0
 801493a:	d041      	beq.n	80149c0 <_free_r+0x8c>
 801493c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014940:	1f0c      	subs	r4, r1, #4
 8014942:	2b00      	cmp	r3, #0
 8014944:	bfb8      	it	lt
 8014946:	18e4      	addlt	r4, r4, r3
 8014948:	f7ff fc30 	bl	80141ac <__malloc_lock>
 801494c:	4a1d      	ldr	r2, [pc, #116]	@ (80149c4 <_free_r+0x90>)
 801494e:	6813      	ldr	r3, [r2, #0]
 8014950:	b933      	cbnz	r3, 8014960 <_free_r+0x2c>
 8014952:	6063      	str	r3, [r4, #4]
 8014954:	6014      	str	r4, [r2, #0]
 8014956:	4628      	mov	r0, r5
 8014958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801495c:	f7ff bc2c 	b.w	80141b8 <__malloc_unlock>
 8014960:	42a3      	cmp	r3, r4
 8014962:	d908      	bls.n	8014976 <_free_r+0x42>
 8014964:	6820      	ldr	r0, [r4, #0]
 8014966:	1821      	adds	r1, r4, r0
 8014968:	428b      	cmp	r3, r1
 801496a:	bf01      	itttt	eq
 801496c:	6819      	ldreq	r1, [r3, #0]
 801496e:	685b      	ldreq	r3, [r3, #4]
 8014970:	1809      	addeq	r1, r1, r0
 8014972:	6021      	streq	r1, [r4, #0]
 8014974:	e7ed      	b.n	8014952 <_free_r+0x1e>
 8014976:	461a      	mov	r2, r3
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	b10b      	cbz	r3, 8014980 <_free_r+0x4c>
 801497c:	42a3      	cmp	r3, r4
 801497e:	d9fa      	bls.n	8014976 <_free_r+0x42>
 8014980:	6811      	ldr	r1, [r2, #0]
 8014982:	1850      	adds	r0, r2, r1
 8014984:	42a0      	cmp	r0, r4
 8014986:	d10b      	bne.n	80149a0 <_free_r+0x6c>
 8014988:	6820      	ldr	r0, [r4, #0]
 801498a:	4401      	add	r1, r0
 801498c:	1850      	adds	r0, r2, r1
 801498e:	4283      	cmp	r3, r0
 8014990:	6011      	str	r1, [r2, #0]
 8014992:	d1e0      	bne.n	8014956 <_free_r+0x22>
 8014994:	6818      	ldr	r0, [r3, #0]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	6053      	str	r3, [r2, #4]
 801499a:	4408      	add	r0, r1
 801499c:	6010      	str	r0, [r2, #0]
 801499e:	e7da      	b.n	8014956 <_free_r+0x22>
 80149a0:	d902      	bls.n	80149a8 <_free_r+0x74>
 80149a2:	230c      	movs	r3, #12
 80149a4:	602b      	str	r3, [r5, #0]
 80149a6:	e7d6      	b.n	8014956 <_free_r+0x22>
 80149a8:	6820      	ldr	r0, [r4, #0]
 80149aa:	1821      	adds	r1, r4, r0
 80149ac:	428b      	cmp	r3, r1
 80149ae:	bf04      	itt	eq
 80149b0:	6819      	ldreq	r1, [r3, #0]
 80149b2:	685b      	ldreq	r3, [r3, #4]
 80149b4:	6063      	str	r3, [r4, #4]
 80149b6:	bf04      	itt	eq
 80149b8:	1809      	addeq	r1, r1, r0
 80149ba:	6021      	streq	r1, [r4, #0]
 80149bc:	6054      	str	r4, [r2, #4]
 80149be:	e7ca      	b.n	8014956 <_free_r+0x22>
 80149c0:	bd38      	pop	{r3, r4, r5, pc}
 80149c2:	bf00      	nop
 80149c4:	2000dc9c 	.word	0x2000dc9c

080149c8 <_malloc_usable_size_r>:
 80149c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149cc:	1f18      	subs	r0, r3, #4
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	bfbc      	itt	lt
 80149d2:	580b      	ldrlt	r3, [r1, r0]
 80149d4:	18c0      	addlt	r0, r0, r3
 80149d6:	4770      	bx	lr

080149d8 <__ssputs_r>:
 80149d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149dc:	688e      	ldr	r6, [r1, #8]
 80149de:	461f      	mov	r7, r3
 80149e0:	42be      	cmp	r6, r7
 80149e2:	680b      	ldr	r3, [r1, #0]
 80149e4:	4682      	mov	sl, r0
 80149e6:	460c      	mov	r4, r1
 80149e8:	4690      	mov	r8, r2
 80149ea:	d82d      	bhi.n	8014a48 <__ssputs_r+0x70>
 80149ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80149f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80149f4:	d026      	beq.n	8014a44 <__ssputs_r+0x6c>
 80149f6:	6965      	ldr	r5, [r4, #20]
 80149f8:	6909      	ldr	r1, [r1, #16]
 80149fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149fe:	eba3 0901 	sub.w	r9, r3, r1
 8014a02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a06:	1c7b      	adds	r3, r7, #1
 8014a08:	444b      	add	r3, r9
 8014a0a:	106d      	asrs	r5, r5, #1
 8014a0c:	429d      	cmp	r5, r3
 8014a0e:	bf38      	it	cc
 8014a10:	461d      	movcc	r5, r3
 8014a12:	0553      	lsls	r3, r2, #21
 8014a14:	d527      	bpl.n	8014a66 <__ssputs_r+0x8e>
 8014a16:	4629      	mov	r1, r5
 8014a18:	f7ff fb48 	bl	80140ac <_malloc_r>
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	b360      	cbz	r0, 8014a7a <__ssputs_r+0xa2>
 8014a20:	6921      	ldr	r1, [r4, #16]
 8014a22:	464a      	mov	r2, r9
 8014a24:	f7ff ff4d 	bl	80148c2 <memcpy>
 8014a28:	89a3      	ldrh	r3, [r4, #12]
 8014a2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a32:	81a3      	strh	r3, [r4, #12]
 8014a34:	6126      	str	r6, [r4, #16]
 8014a36:	6165      	str	r5, [r4, #20]
 8014a38:	444e      	add	r6, r9
 8014a3a:	eba5 0509 	sub.w	r5, r5, r9
 8014a3e:	6026      	str	r6, [r4, #0]
 8014a40:	60a5      	str	r5, [r4, #8]
 8014a42:	463e      	mov	r6, r7
 8014a44:	42be      	cmp	r6, r7
 8014a46:	d900      	bls.n	8014a4a <__ssputs_r+0x72>
 8014a48:	463e      	mov	r6, r7
 8014a4a:	6820      	ldr	r0, [r4, #0]
 8014a4c:	4632      	mov	r2, r6
 8014a4e:	4641      	mov	r1, r8
 8014a50:	f7ff fe54 	bl	80146fc <memmove>
 8014a54:	68a3      	ldr	r3, [r4, #8]
 8014a56:	1b9b      	subs	r3, r3, r6
 8014a58:	60a3      	str	r3, [r4, #8]
 8014a5a:	6823      	ldr	r3, [r4, #0]
 8014a5c:	4433      	add	r3, r6
 8014a5e:	6023      	str	r3, [r4, #0]
 8014a60:	2000      	movs	r0, #0
 8014a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a66:	462a      	mov	r2, r5
 8014a68:	f7ff fc20 	bl	80142ac <_realloc_r>
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d1e0      	bne.n	8014a34 <__ssputs_r+0x5c>
 8014a72:	6921      	ldr	r1, [r4, #16]
 8014a74:	4650      	mov	r0, sl
 8014a76:	f7ff ff5d 	bl	8014934 <_free_r>
 8014a7a:	230c      	movs	r3, #12
 8014a7c:	f8ca 3000 	str.w	r3, [sl]
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a86:	81a3      	strh	r3, [r4, #12]
 8014a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a8c:	e7e9      	b.n	8014a62 <__ssputs_r+0x8a>
	...

08014a90 <_svfiprintf_r>:
 8014a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a94:	4698      	mov	r8, r3
 8014a96:	898b      	ldrh	r3, [r1, #12]
 8014a98:	061b      	lsls	r3, r3, #24
 8014a9a:	b09d      	sub	sp, #116	@ 0x74
 8014a9c:	4607      	mov	r7, r0
 8014a9e:	460d      	mov	r5, r1
 8014aa0:	4614      	mov	r4, r2
 8014aa2:	d510      	bpl.n	8014ac6 <_svfiprintf_r+0x36>
 8014aa4:	690b      	ldr	r3, [r1, #16]
 8014aa6:	b973      	cbnz	r3, 8014ac6 <_svfiprintf_r+0x36>
 8014aa8:	2140      	movs	r1, #64	@ 0x40
 8014aaa:	f7ff faff 	bl	80140ac <_malloc_r>
 8014aae:	6028      	str	r0, [r5, #0]
 8014ab0:	6128      	str	r0, [r5, #16]
 8014ab2:	b930      	cbnz	r0, 8014ac2 <_svfiprintf_r+0x32>
 8014ab4:	230c      	movs	r3, #12
 8014ab6:	603b      	str	r3, [r7, #0]
 8014ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014abc:	b01d      	add	sp, #116	@ 0x74
 8014abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac2:	2340      	movs	r3, #64	@ 0x40
 8014ac4:	616b      	str	r3, [r5, #20]
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aca:	2320      	movs	r3, #32
 8014acc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ad4:	2330      	movs	r3, #48	@ 0x30
 8014ad6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014c74 <_svfiprintf_r+0x1e4>
 8014ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014ade:	f04f 0901 	mov.w	r9, #1
 8014ae2:	4623      	mov	r3, r4
 8014ae4:	469a      	mov	sl, r3
 8014ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aea:	b10a      	cbz	r2, 8014af0 <_svfiprintf_r+0x60>
 8014aec:	2a25      	cmp	r2, #37	@ 0x25
 8014aee:	d1f9      	bne.n	8014ae4 <_svfiprintf_r+0x54>
 8014af0:	ebba 0b04 	subs.w	fp, sl, r4
 8014af4:	d00b      	beq.n	8014b0e <_svfiprintf_r+0x7e>
 8014af6:	465b      	mov	r3, fp
 8014af8:	4622      	mov	r2, r4
 8014afa:	4629      	mov	r1, r5
 8014afc:	4638      	mov	r0, r7
 8014afe:	f7ff ff6b 	bl	80149d8 <__ssputs_r>
 8014b02:	3001      	adds	r0, #1
 8014b04:	f000 80a7 	beq.w	8014c56 <_svfiprintf_r+0x1c6>
 8014b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b0a:	445a      	add	r2, fp
 8014b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 809f 	beq.w	8014c56 <_svfiprintf_r+0x1c6>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b22:	f10a 0a01 	add.w	sl, sl, #1
 8014b26:	9304      	str	r3, [sp, #16]
 8014b28:	9307      	str	r3, [sp, #28]
 8014b2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b30:	4654      	mov	r4, sl
 8014b32:	2205      	movs	r2, #5
 8014b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b38:	484e      	ldr	r0, [pc, #312]	@ (8014c74 <_svfiprintf_r+0x1e4>)
 8014b3a:	f7eb fb69 	bl	8000210 <memchr>
 8014b3e:	9a04      	ldr	r2, [sp, #16]
 8014b40:	b9d8      	cbnz	r0, 8014b7a <_svfiprintf_r+0xea>
 8014b42:	06d0      	lsls	r0, r2, #27
 8014b44:	bf44      	itt	mi
 8014b46:	2320      	movmi	r3, #32
 8014b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b4c:	0711      	lsls	r1, r2, #28
 8014b4e:	bf44      	itt	mi
 8014b50:	232b      	movmi	r3, #43	@ 0x2b
 8014b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b56:	f89a 3000 	ldrb.w	r3, [sl]
 8014b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b5c:	d015      	beq.n	8014b8a <_svfiprintf_r+0xfa>
 8014b5e:	9a07      	ldr	r2, [sp, #28]
 8014b60:	4654      	mov	r4, sl
 8014b62:	2000      	movs	r0, #0
 8014b64:	f04f 0c0a 	mov.w	ip, #10
 8014b68:	4621      	mov	r1, r4
 8014b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b6e:	3b30      	subs	r3, #48	@ 0x30
 8014b70:	2b09      	cmp	r3, #9
 8014b72:	d94b      	bls.n	8014c0c <_svfiprintf_r+0x17c>
 8014b74:	b1b0      	cbz	r0, 8014ba4 <_svfiprintf_r+0x114>
 8014b76:	9207      	str	r2, [sp, #28]
 8014b78:	e014      	b.n	8014ba4 <_svfiprintf_r+0x114>
 8014b7a:	eba0 0308 	sub.w	r3, r0, r8
 8014b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8014b82:	4313      	orrs	r3, r2
 8014b84:	9304      	str	r3, [sp, #16]
 8014b86:	46a2      	mov	sl, r4
 8014b88:	e7d2      	b.n	8014b30 <_svfiprintf_r+0xa0>
 8014b8a:	9b03      	ldr	r3, [sp, #12]
 8014b8c:	1d19      	adds	r1, r3, #4
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	9103      	str	r1, [sp, #12]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	bfbb      	ittet	lt
 8014b96:	425b      	neglt	r3, r3
 8014b98:	f042 0202 	orrlt.w	r2, r2, #2
 8014b9c:	9307      	strge	r3, [sp, #28]
 8014b9e:	9307      	strlt	r3, [sp, #28]
 8014ba0:	bfb8      	it	lt
 8014ba2:	9204      	strlt	r2, [sp, #16]
 8014ba4:	7823      	ldrb	r3, [r4, #0]
 8014ba6:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ba8:	d10a      	bne.n	8014bc0 <_svfiprintf_r+0x130>
 8014baa:	7863      	ldrb	r3, [r4, #1]
 8014bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bae:	d132      	bne.n	8014c16 <_svfiprintf_r+0x186>
 8014bb0:	9b03      	ldr	r3, [sp, #12]
 8014bb2:	1d1a      	adds	r2, r3, #4
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	9203      	str	r2, [sp, #12]
 8014bb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bbc:	3402      	adds	r4, #2
 8014bbe:	9305      	str	r3, [sp, #20]
 8014bc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014c84 <_svfiprintf_r+0x1f4>
 8014bc4:	7821      	ldrb	r1, [r4, #0]
 8014bc6:	2203      	movs	r2, #3
 8014bc8:	4650      	mov	r0, sl
 8014bca:	f7eb fb21 	bl	8000210 <memchr>
 8014bce:	b138      	cbz	r0, 8014be0 <_svfiprintf_r+0x150>
 8014bd0:	9b04      	ldr	r3, [sp, #16]
 8014bd2:	eba0 000a 	sub.w	r0, r0, sl
 8014bd6:	2240      	movs	r2, #64	@ 0x40
 8014bd8:	4082      	lsls	r2, r0
 8014bda:	4313      	orrs	r3, r2
 8014bdc:	3401      	adds	r4, #1
 8014bde:	9304      	str	r3, [sp, #16]
 8014be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014be4:	4824      	ldr	r0, [pc, #144]	@ (8014c78 <_svfiprintf_r+0x1e8>)
 8014be6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014bea:	2206      	movs	r2, #6
 8014bec:	f7eb fb10 	bl	8000210 <memchr>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d036      	beq.n	8014c62 <_svfiprintf_r+0x1d2>
 8014bf4:	4b21      	ldr	r3, [pc, #132]	@ (8014c7c <_svfiprintf_r+0x1ec>)
 8014bf6:	bb1b      	cbnz	r3, 8014c40 <_svfiprintf_r+0x1b0>
 8014bf8:	9b03      	ldr	r3, [sp, #12]
 8014bfa:	3307      	adds	r3, #7
 8014bfc:	f023 0307 	bic.w	r3, r3, #7
 8014c00:	3308      	adds	r3, #8
 8014c02:	9303      	str	r3, [sp, #12]
 8014c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c06:	4433      	add	r3, r6
 8014c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c0a:	e76a      	b.n	8014ae2 <_svfiprintf_r+0x52>
 8014c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c10:	460c      	mov	r4, r1
 8014c12:	2001      	movs	r0, #1
 8014c14:	e7a8      	b.n	8014b68 <_svfiprintf_r+0xd8>
 8014c16:	2300      	movs	r3, #0
 8014c18:	3401      	adds	r4, #1
 8014c1a:	9305      	str	r3, [sp, #20]
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	f04f 0c0a 	mov.w	ip, #10
 8014c22:	4620      	mov	r0, r4
 8014c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c28:	3a30      	subs	r2, #48	@ 0x30
 8014c2a:	2a09      	cmp	r2, #9
 8014c2c:	d903      	bls.n	8014c36 <_svfiprintf_r+0x1a6>
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d0c6      	beq.n	8014bc0 <_svfiprintf_r+0x130>
 8014c32:	9105      	str	r1, [sp, #20]
 8014c34:	e7c4      	b.n	8014bc0 <_svfiprintf_r+0x130>
 8014c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e7f0      	b.n	8014c22 <_svfiprintf_r+0x192>
 8014c40:	ab03      	add	r3, sp, #12
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	462a      	mov	r2, r5
 8014c46:	4b0e      	ldr	r3, [pc, #56]	@ (8014c80 <_svfiprintf_r+0x1f0>)
 8014c48:	a904      	add	r1, sp, #16
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	f3af 8000 	nop.w
 8014c50:	1c42      	adds	r2, r0, #1
 8014c52:	4606      	mov	r6, r0
 8014c54:	d1d6      	bne.n	8014c04 <_svfiprintf_r+0x174>
 8014c56:	89ab      	ldrh	r3, [r5, #12]
 8014c58:	065b      	lsls	r3, r3, #25
 8014c5a:	f53f af2d 	bmi.w	8014ab8 <_svfiprintf_r+0x28>
 8014c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c60:	e72c      	b.n	8014abc <_svfiprintf_r+0x2c>
 8014c62:	ab03      	add	r3, sp, #12
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	462a      	mov	r2, r5
 8014c68:	4b05      	ldr	r3, [pc, #20]	@ (8014c80 <_svfiprintf_r+0x1f0>)
 8014c6a:	a904      	add	r1, sp, #16
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f000 f879 	bl	8014d64 <_printf_i>
 8014c72:	e7ed      	b.n	8014c50 <_svfiprintf_r+0x1c0>
 8014c74:	08016468 	.word	0x08016468
 8014c78:	08016472 	.word	0x08016472
 8014c7c:	00000000 	.word	0x00000000
 8014c80:	080149d9 	.word	0x080149d9
 8014c84:	0801646e 	.word	0x0801646e

08014c88 <_printf_common>:
 8014c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c8c:	4616      	mov	r6, r2
 8014c8e:	4698      	mov	r8, r3
 8014c90:	688a      	ldr	r2, [r1, #8]
 8014c92:	690b      	ldr	r3, [r1, #16]
 8014c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	bfb8      	it	lt
 8014c9c:	4613      	movlt	r3, r2
 8014c9e:	6033      	str	r3, [r6, #0]
 8014ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014ca4:	4607      	mov	r7, r0
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	b10a      	cbz	r2, 8014cae <_printf_common+0x26>
 8014caa:	3301      	adds	r3, #1
 8014cac:	6033      	str	r3, [r6, #0]
 8014cae:	6823      	ldr	r3, [r4, #0]
 8014cb0:	0699      	lsls	r1, r3, #26
 8014cb2:	bf42      	ittt	mi
 8014cb4:	6833      	ldrmi	r3, [r6, #0]
 8014cb6:	3302      	addmi	r3, #2
 8014cb8:	6033      	strmi	r3, [r6, #0]
 8014cba:	6825      	ldr	r5, [r4, #0]
 8014cbc:	f015 0506 	ands.w	r5, r5, #6
 8014cc0:	d106      	bne.n	8014cd0 <_printf_common+0x48>
 8014cc2:	f104 0a19 	add.w	sl, r4, #25
 8014cc6:	68e3      	ldr	r3, [r4, #12]
 8014cc8:	6832      	ldr	r2, [r6, #0]
 8014cca:	1a9b      	subs	r3, r3, r2
 8014ccc:	42ab      	cmp	r3, r5
 8014cce:	dc26      	bgt.n	8014d1e <_printf_common+0x96>
 8014cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014cd4:	6822      	ldr	r2, [r4, #0]
 8014cd6:	3b00      	subs	r3, #0
 8014cd8:	bf18      	it	ne
 8014cda:	2301      	movne	r3, #1
 8014cdc:	0692      	lsls	r2, r2, #26
 8014cde:	d42b      	bmi.n	8014d38 <_printf_common+0xb0>
 8014ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014ce4:	4641      	mov	r1, r8
 8014ce6:	4638      	mov	r0, r7
 8014ce8:	47c8      	blx	r9
 8014cea:	3001      	adds	r0, #1
 8014cec:	d01e      	beq.n	8014d2c <_printf_common+0xa4>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	6922      	ldr	r2, [r4, #16]
 8014cf2:	f003 0306 	and.w	r3, r3, #6
 8014cf6:	2b04      	cmp	r3, #4
 8014cf8:	bf02      	ittt	eq
 8014cfa:	68e5      	ldreq	r5, [r4, #12]
 8014cfc:	6833      	ldreq	r3, [r6, #0]
 8014cfe:	1aed      	subeq	r5, r5, r3
 8014d00:	68a3      	ldr	r3, [r4, #8]
 8014d02:	bf0c      	ite	eq
 8014d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014d08:	2500      	movne	r5, #0
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	bfc4      	itt	gt
 8014d0e:	1a9b      	subgt	r3, r3, r2
 8014d10:	18ed      	addgt	r5, r5, r3
 8014d12:	2600      	movs	r6, #0
 8014d14:	341a      	adds	r4, #26
 8014d16:	42b5      	cmp	r5, r6
 8014d18:	d11a      	bne.n	8014d50 <_printf_common+0xc8>
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	e008      	b.n	8014d30 <_printf_common+0xa8>
 8014d1e:	2301      	movs	r3, #1
 8014d20:	4652      	mov	r2, sl
 8014d22:	4641      	mov	r1, r8
 8014d24:	4638      	mov	r0, r7
 8014d26:	47c8      	blx	r9
 8014d28:	3001      	adds	r0, #1
 8014d2a:	d103      	bne.n	8014d34 <_printf_common+0xac>
 8014d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d34:	3501      	adds	r5, #1
 8014d36:	e7c6      	b.n	8014cc6 <_printf_common+0x3e>
 8014d38:	18e1      	adds	r1, r4, r3
 8014d3a:	1c5a      	adds	r2, r3, #1
 8014d3c:	2030      	movs	r0, #48	@ 0x30
 8014d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014d42:	4422      	add	r2, r4
 8014d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014d4c:	3302      	adds	r3, #2
 8014d4e:	e7c7      	b.n	8014ce0 <_printf_common+0x58>
 8014d50:	2301      	movs	r3, #1
 8014d52:	4622      	mov	r2, r4
 8014d54:	4641      	mov	r1, r8
 8014d56:	4638      	mov	r0, r7
 8014d58:	47c8      	blx	r9
 8014d5a:	3001      	adds	r0, #1
 8014d5c:	d0e6      	beq.n	8014d2c <_printf_common+0xa4>
 8014d5e:	3601      	adds	r6, #1
 8014d60:	e7d9      	b.n	8014d16 <_printf_common+0x8e>
	...

08014d64 <_printf_i>:
 8014d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d68:	7e0f      	ldrb	r7, [r1, #24]
 8014d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014d6c:	2f78      	cmp	r7, #120	@ 0x78
 8014d6e:	4691      	mov	r9, r2
 8014d70:	4680      	mov	r8, r0
 8014d72:	460c      	mov	r4, r1
 8014d74:	469a      	mov	sl, r3
 8014d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014d7a:	d807      	bhi.n	8014d8c <_printf_i+0x28>
 8014d7c:	2f62      	cmp	r7, #98	@ 0x62
 8014d7e:	d80a      	bhi.n	8014d96 <_printf_i+0x32>
 8014d80:	2f00      	cmp	r7, #0
 8014d82:	f000 80d2 	beq.w	8014f2a <_printf_i+0x1c6>
 8014d86:	2f58      	cmp	r7, #88	@ 0x58
 8014d88:	f000 80b9 	beq.w	8014efe <_printf_i+0x19a>
 8014d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014d94:	e03a      	b.n	8014e0c <_printf_i+0xa8>
 8014d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014d9a:	2b15      	cmp	r3, #21
 8014d9c:	d8f6      	bhi.n	8014d8c <_printf_i+0x28>
 8014d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8014da4 <_printf_i+0x40>)
 8014da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014da4:	08014dfd 	.word	0x08014dfd
 8014da8:	08014e11 	.word	0x08014e11
 8014dac:	08014d8d 	.word	0x08014d8d
 8014db0:	08014d8d 	.word	0x08014d8d
 8014db4:	08014d8d 	.word	0x08014d8d
 8014db8:	08014d8d 	.word	0x08014d8d
 8014dbc:	08014e11 	.word	0x08014e11
 8014dc0:	08014d8d 	.word	0x08014d8d
 8014dc4:	08014d8d 	.word	0x08014d8d
 8014dc8:	08014d8d 	.word	0x08014d8d
 8014dcc:	08014d8d 	.word	0x08014d8d
 8014dd0:	08014f11 	.word	0x08014f11
 8014dd4:	08014e3b 	.word	0x08014e3b
 8014dd8:	08014ecb 	.word	0x08014ecb
 8014ddc:	08014d8d 	.word	0x08014d8d
 8014de0:	08014d8d 	.word	0x08014d8d
 8014de4:	08014f33 	.word	0x08014f33
 8014de8:	08014d8d 	.word	0x08014d8d
 8014dec:	08014e3b 	.word	0x08014e3b
 8014df0:	08014d8d 	.word	0x08014d8d
 8014df4:	08014d8d 	.word	0x08014d8d
 8014df8:	08014ed3 	.word	0x08014ed3
 8014dfc:	6833      	ldr	r3, [r6, #0]
 8014dfe:	1d1a      	adds	r2, r3, #4
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	6032      	str	r2, [r6, #0]
 8014e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	e09d      	b.n	8014f4c <_printf_i+0x1e8>
 8014e10:	6833      	ldr	r3, [r6, #0]
 8014e12:	6820      	ldr	r0, [r4, #0]
 8014e14:	1d19      	adds	r1, r3, #4
 8014e16:	6031      	str	r1, [r6, #0]
 8014e18:	0606      	lsls	r6, r0, #24
 8014e1a:	d501      	bpl.n	8014e20 <_printf_i+0xbc>
 8014e1c:	681d      	ldr	r5, [r3, #0]
 8014e1e:	e003      	b.n	8014e28 <_printf_i+0xc4>
 8014e20:	0645      	lsls	r5, r0, #25
 8014e22:	d5fb      	bpl.n	8014e1c <_printf_i+0xb8>
 8014e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014e28:	2d00      	cmp	r5, #0
 8014e2a:	da03      	bge.n	8014e34 <_printf_i+0xd0>
 8014e2c:	232d      	movs	r3, #45	@ 0x2d
 8014e2e:	426d      	negs	r5, r5
 8014e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e34:	4859      	ldr	r0, [pc, #356]	@ (8014f9c <_printf_i+0x238>)
 8014e36:	230a      	movs	r3, #10
 8014e38:	e011      	b.n	8014e5e <_printf_i+0xfa>
 8014e3a:	6821      	ldr	r1, [r4, #0]
 8014e3c:	6833      	ldr	r3, [r6, #0]
 8014e3e:	0608      	lsls	r0, r1, #24
 8014e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8014e44:	d402      	bmi.n	8014e4c <_printf_i+0xe8>
 8014e46:	0649      	lsls	r1, r1, #25
 8014e48:	bf48      	it	mi
 8014e4a:	b2ad      	uxthmi	r5, r5
 8014e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8014e4e:	4853      	ldr	r0, [pc, #332]	@ (8014f9c <_printf_i+0x238>)
 8014e50:	6033      	str	r3, [r6, #0]
 8014e52:	bf14      	ite	ne
 8014e54:	230a      	movne	r3, #10
 8014e56:	2308      	moveq	r3, #8
 8014e58:	2100      	movs	r1, #0
 8014e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014e5e:	6866      	ldr	r6, [r4, #4]
 8014e60:	60a6      	str	r6, [r4, #8]
 8014e62:	2e00      	cmp	r6, #0
 8014e64:	bfa2      	ittt	ge
 8014e66:	6821      	ldrge	r1, [r4, #0]
 8014e68:	f021 0104 	bicge.w	r1, r1, #4
 8014e6c:	6021      	strge	r1, [r4, #0]
 8014e6e:	b90d      	cbnz	r5, 8014e74 <_printf_i+0x110>
 8014e70:	2e00      	cmp	r6, #0
 8014e72:	d04b      	beq.n	8014f0c <_printf_i+0x1a8>
 8014e74:	4616      	mov	r6, r2
 8014e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8014e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8014e7e:	5dc7      	ldrb	r7, [r0, r7]
 8014e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014e84:	462f      	mov	r7, r5
 8014e86:	42bb      	cmp	r3, r7
 8014e88:	460d      	mov	r5, r1
 8014e8a:	d9f4      	bls.n	8014e76 <_printf_i+0x112>
 8014e8c:	2b08      	cmp	r3, #8
 8014e8e:	d10b      	bne.n	8014ea8 <_printf_i+0x144>
 8014e90:	6823      	ldr	r3, [r4, #0]
 8014e92:	07df      	lsls	r7, r3, #31
 8014e94:	d508      	bpl.n	8014ea8 <_printf_i+0x144>
 8014e96:	6923      	ldr	r3, [r4, #16]
 8014e98:	6861      	ldr	r1, [r4, #4]
 8014e9a:	4299      	cmp	r1, r3
 8014e9c:	bfde      	ittt	le
 8014e9e:	2330      	movle	r3, #48	@ 0x30
 8014ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014ea4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014ea8:	1b92      	subs	r2, r2, r6
 8014eaa:	6122      	str	r2, [r4, #16]
 8014eac:	f8cd a000 	str.w	sl, [sp]
 8014eb0:	464b      	mov	r3, r9
 8014eb2:	aa03      	add	r2, sp, #12
 8014eb4:	4621      	mov	r1, r4
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	f7ff fee6 	bl	8014c88 <_printf_common>
 8014ebc:	3001      	adds	r0, #1
 8014ebe:	d14a      	bne.n	8014f56 <_printf_i+0x1f2>
 8014ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ec4:	b004      	add	sp, #16
 8014ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	f043 0320 	orr.w	r3, r3, #32
 8014ed0:	6023      	str	r3, [r4, #0]
 8014ed2:	4833      	ldr	r0, [pc, #204]	@ (8014fa0 <_printf_i+0x23c>)
 8014ed4:	2778      	movs	r7, #120	@ 0x78
 8014ed6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	6831      	ldr	r1, [r6, #0]
 8014ede:	061f      	lsls	r7, r3, #24
 8014ee0:	f851 5b04 	ldr.w	r5, [r1], #4
 8014ee4:	d402      	bmi.n	8014eec <_printf_i+0x188>
 8014ee6:	065f      	lsls	r7, r3, #25
 8014ee8:	bf48      	it	mi
 8014eea:	b2ad      	uxthmi	r5, r5
 8014eec:	6031      	str	r1, [r6, #0]
 8014eee:	07d9      	lsls	r1, r3, #31
 8014ef0:	bf44      	itt	mi
 8014ef2:	f043 0320 	orrmi.w	r3, r3, #32
 8014ef6:	6023      	strmi	r3, [r4, #0]
 8014ef8:	b11d      	cbz	r5, 8014f02 <_printf_i+0x19e>
 8014efa:	2310      	movs	r3, #16
 8014efc:	e7ac      	b.n	8014e58 <_printf_i+0xf4>
 8014efe:	4827      	ldr	r0, [pc, #156]	@ (8014f9c <_printf_i+0x238>)
 8014f00:	e7e9      	b.n	8014ed6 <_printf_i+0x172>
 8014f02:	6823      	ldr	r3, [r4, #0]
 8014f04:	f023 0320 	bic.w	r3, r3, #32
 8014f08:	6023      	str	r3, [r4, #0]
 8014f0a:	e7f6      	b.n	8014efa <_printf_i+0x196>
 8014f0c:	4616      	mov	r6, r2
 8014f0e:	e7bd      	b.n	8014e8c <_printf_i+0x128>
 8014f10:	6833      	ldr	r3, [r6, #0]
 8014f12:	6825      	ldr	r5, [r4, #0]
 8014f14:	6961      	ldr	r1, [r4, #20]
 8014f16:	1d18      	adds	r0, r3, #4
 8014f18:	6030      	str	r0, [r6, #0]
 8014f1a:	062e      	lsls	r6, r5, #24
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	d501      	bpl.n	8014f24 <_printf_i+0x1c0>
 8014f20:	6019      	str	r1, [r3, #0]
 8014f22:	e002      	b.n	8014f2a <_printf_i+0x1c6>
 8014f24:	0668      	lsls	r0, r5, #25
 8014f26:	d5fb      	bpl.n	8014f20 <_printf_i+0x1bc>
 8014f28:	8019      	strh	r1, [r3, #0]
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	6123      	str	r3, [r4, #16]
 8014f2e:	4616      	mov	r6, r2
 8014f30:	e7bc      	b.n	8014eac <_printf_i+0x148>
 8014f32:	6833      	ldr	r3, [r6, #0]
 8014f34:	1d1a      	adds	r2, r3, #4
 8014f36:	6032      	str	r2, [r6, #0]
 8014f38:	681e      	ldr	r6, [r3, #0]
 8014f3a:	6862      	ldr	r2, [r4, #4]
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	4630      	mov	r0, r6
 8014f40:	f7eb f966 	bl	8000210 <memchr>
 8014f44:	b108      	cbz	r0, 8014f4a <_printf_i+0x1e6>
 8014f46:	1b80      	subs	r0, r0, r6
 8014f48:	6060      	str	r0, [r4, #4]
 8014f4a:	6863      	ldr	r3, [r4, #4]
 8014f4c:	6123      	str	r3, [r4, #16]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f54:	e7aa      	b.n	8014eac <_printf_i+0x148>
 8014f56:	6923      	ldr	r3, [r4, #16]
 8014f58:	4632      	mov	r2, r6
 8014f5a:	4649      	mov	r1, r9
 8014f5c:	4640      	mov	r0, r8
 8014f5e:	47d0      	blx	sl
 8014f60:	3001      	adds	r0, #1
 8014f62:	d0ad      	beq.n	8014ec0 <_printf_i+0x15c>
 8014f64:	6823      	ldr	r3, [r4, #0]
 8014f66:	079b      	lsls	r3, r3, #30
 8014f68:	d413      	bmi.n	8014f92 <_printf_i+0x22e>
 8014f6a:	68e0      	ldr	r0, [r4, #12]
 8014f6c:	9b03      	ldr	r3, [sp, #12]
 8014f6e:	4298      	cmp	r0, r3
 8014f70:	bfb8      	it	lt
 8014f72:	4618      	movlt	r0, r3
 8014f74:	e7a6      	b.n	8014ec4 <_printf_i+0x160>
 8014f76:	2301      	movs	r3, #1
 8014f78:	4632      	mov	r2, r6
 8014f7a:	4649      	mov	r1, r9
 8014f7c:	4640      	mov	r0, r8
 8014f7e:	47d0      	blx	sl
 8014f80:	3001      	adds	r0, #1
 8014f82:	d09d      	beq.n	8014ec0 <_printf_i+0x15c>
 8014f84:	3501      	adds	r5, #1
 8014f86:	68e3      	ldr	r3, [r4, #12]
 8014f88:	9903      	ldr	r1, [sp, #12]
 8014f8a:	1a5b      	subs	r3, r3, r1
 8014f8c:	42ab      	cmp	r3, r5
 8014f8e:	dcf2      	bgt.n	8014f76 <_printf_i+0x212>
 8014f90:	e7eb      	b.n	8014f6a <_printf_i+0x206>
 8014f92:	2500      	movs	r5, #0
 8014f94:	f104 0619 	add.w	r6, r4, #25
 8014f98:	e7f5      	b.n	8014f86 <_printf_i+0x222>
 8014f9a:	bf00      	nop
 8014f9c:	08016479 	.word	0x08016479
 8014fa0:	0801648a 	.word	0x0801648a

08014fa4 <__sflush_r>:
 8014fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fac:	0716      	lsls	r6, r2, #28
 8014fae:	4605      	mov	r5, r0
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	d454      	bmi.n	801505e <__sflush_r+0xba>
 8014fb4:	684b      	ldr	r3, [r1, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dc02      	bgt.n	8014fc0 <__sflush_r+0x1c>
 8014fba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	dd48      	ble.n	8015052 <__sflush_r+0xae>
 8014fc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014fc2:	2e00      	cmp	r6, #0
 8014fc4:	d045      	beq.n	8015052 <__sflush_r+0xae>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014fcc:	682f      	ldr	r7, [r5, #0]
 8014fce:	6a21      	ldr	r1, [r4, #32]
 8014fd0:	602b      	str	r3, [r5, #0]
 8014fd2:	d030      	beq.n	8015036 <__sflush_r+0x92>
 8014fd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014fd6:	89a3      	ldrh	r3, [r4, #12]
 8014fd8:	0759      	lsls	r1, r3, #29
 8014fda:	d505      	bpl.n	8014fe8 <__sflush_r+0x44>
 8014fdc:	6863      	ldr	r3, [r4, #4]
 8014fde:	1ad2      	subs	r2, r2, r3
 8014fe0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014fe2:	b10b      	cbz	r3, 8014fe8 <__sflush_r+0x44>
 8014fe4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014fe6:	1ad2      	subs	r2, r2, r3
 8014fe8:	2300      	movs	r3, #0
 8014fea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014fec:	6a21      	ldr	r1, [r4, #32]
 8014fee:	4628      	mov	r0, r5
 8014ff0:	47b0      	blx	r6
 8014ff2:	1c43      	adds	r3, r0, #1
 8014ff4:	89a3      	ldrh	r3, [r4, #12]
 8014ff6:	d106      	bne.n	8015006 <__sflush_r+0x62>
 8014ff8:	6829      	ldr	r1, [r5, #0]
 8014ffa:	291d      	cmp	r1, #29
 8014ffc:	d82b      	bhi.n	8015056 <__sflush_r+0xb2>
 8014ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80150a8 <__sflush_r+0x104>)
 8015000:	410a      	asrs	r2, r1
 8015002:	07d6      	lsls	r6, r2, #31
 8015004:	d427      	bmi.n	8015056 <__sflush_r+0xb2>
 8015006:	2200      	movs	r2, #0
 8015008:	6062      	str	r2, [r4, #4]
 801500a:	04d9      	lsls	r1, r3, #19
 801500c:	6922      	ldr	r2, [r4, #16]
 801500e:	6022      	str	r2, [r4, #0]
 8015010:	d504      	bpl.n	801501c <__sflush_r+0x78>
 8015012:	1c42      	adds	r2, r0, #1
 8015014:	d101      	bne.n	801501a <__sflush_r+0x76>
 8015016:	682b      	ldr	r3, [r5, #0]
 8015018:	b903      	cbnz	r3, 801501c <__sflush_r+0x78>
 801501a:	6560      	str	r0, [r4, #84]	@ 0x54
 801501c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801501e:	602f      	str	r7, [r5, #0]
 8015020:	b1b9      	cbz	r1, 8015052 <__sflush_r+0xae>
 8015022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015026:	4299      	cmp	r1, r3
 8015028:	d002      	beq.n	8015030 <__sflush_r+0x8c>
 801502a:	4628      	mov	r0, r5
 801502c:	f7ff fc82 	bl	8014934 <_free_r>
 8015030:	2300      	movs	r3, #0
 8015032:	6363      	str	r3, [r4, #52]	@ 0x34
 8015034:	e00d      	b.n	8015052 <__sflush_r+0xae>
 8015036:	2301      	movs	r3, #1
 8015038:	4628      	mov	r0, r5
 801503a:	47b0      	blx	r6
 801503c:	4602      	mov	r2, r0
 801503e:	1c50      	adds	r0, r2, #1
 8015040:	d1c9      	bne.n	8014fd6 <__sflush_r+0x32>
 8015042:	682b      	ldr	r3, [r5, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d0c6      	beq.n	8014fd6 <__sflush_r+0x32>
 8015048:	2b1d      	cmp	r3, #29
 801504a:	d001      	beq.n	8015050 <__sflush_r+0xac>
 801504c:	2b16      	cmp	r3, #22
 801504e:	d11e      	bne.n	801508e <__sflush_r+0xea>
 8015050:	602f      	str	r7, [r5, #0]
 8015052:	2000      	movs	r0, #0
 8015054:	e022      	b.n	801509c <__sflush_r+0xf8>
 8015056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801505a:	b21b      	sxth	r3, r3
 801505c:	e01b      	b.n	8015096 <__sflush_r+0xf2>
 801505e:	690f      	ldr	r7, [r1, #16]
 8015060:	2f00      	cmp	r7, #0
 8015062:	d0f6      	beq.n	8015052 <__sflush_r+0xae>
 8015064:	0793      	lsls	r3, r2, #30
 8015066:	680e      	ldr	r6, [r1, #0]
 8015068:	bf08      	it	eq
 801506a:	694b      	ldreq	r3, [r1, #20]
 801506c:	600f      	str	r7, [r1, #0]
 801506e:	bf18      	it	ne
 8015070:	2300      	movne	r3, #0
 8015072:	eba6 0807 	sub.w	r8, r6, r7
 8015076:	608b      	str	r3, [r1, #8]
 8015078:	f1b8 0f00 	cmp.w	r8, #0
 801507c:	dde9      	ble.n	8015052 <__sflush_r+0xae>
 801507e:	6a21      	ldr	r1, [r4, #32]
 8015080:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015082:	4643      	mov	r3, r8
 8015084:	463a      	mov	r2, r7
 8015086:	4628      	mov	r0, r5
 8015088:	47b0      	blx	r6
 801508a:	2800      	cmp	r0, #0
 801508c:	dc08      	bgt.n	80150a0 <__sflush_r+0xfc>
 801508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015096:	81a3      	strh	r3, [r4, #12]
 8015098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a0:	4407      	add	r7, r0
 80150a2:	eba8 0800 	sub.w	r8, r8, r0
 80150a6:	e7e7      	b.n	8015078 <__sflush_r+0xd4>
 80150a8:	dfbffffe 	.word	0xdfbffffe

080150ac <_fflush_r>:
 80150ac:	b538      	push	{r3, r4, r5, lr}
 80150ae:	690b      	ldr	r3, [r1, #16]
 80150b0:	4605      	mov	r5, r0
 80150b2:	460c      	mov	r4, r1
 80150b4:	b913      	cbnz	r3, 80150bc <_fflush_r+0x10>
 80150b6:	2500      	movs	r5, #0
 80150b8:	4628      	mov	r0, r5
 80150ba:	bd38      	pop	{r3, r4, r5, pc}
 80150bc:	b118      	cbz	r0, 80150c6 <_fflush_r+0x1a>
 80150be:	6a03      	ldr	r3, [r0, #32]
 80150c0:	b90b      	cbnz	r3, 80150c6 <_fflush_r+0x1a>
 80150c2:	f7ff fa25 	bl	8014510 <__sinit>
 80150c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d0f3      	beq.n	80150b6 <_fflush_r+0xa>
 80150ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80150d0:	07d0      	lsls	r0, r2, #31
 80150d2:	d404      	bmi.n	80150de <_fflush_r+0x32>
 80150d4:	0599      	lsls	r1, r3, #22
 80150d6:	d402      	bmi.n	80150de <_fflush_r+0x32>
 80150d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80150da:	f7ff fbe8 	bl	80148ae <__retarget_lock_acquire_recursive>
 80150de:	4628      	mov	r0, r5
 80150e0:	4621      	mov	r1, r4
 80150e2:	f7ff ff5f 	bl	8014fa4 <__sflush_r>
 80150e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80150e8:	07da      	lsls	r2, r3, #31
 80150ea:	4605      	mov	r5, r0
 80150ec:	d4e4      	bmi.n	80150b8 <_fflush_r+0xc>
 80150ee:	89a3      	ldrh	r3, [r4, #12]
 80150f0:	059b      	lsls	r3, r3, #22
 80150f2:	d4e1      	bmi.n	80150b8 <_fflush_r+0xc>
 80150f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80150f6:	f7ff fbdb 	bl	80148b0 <__retarget_lock_release_recursive>
 80150fa:	e7dd      	b.n	80150b8 <_fflush_r+0xc>

080150fc <fiprintf>:
 80150fc:	b40e      	push	{r1, r2, r3}
 80150fe:	b503      	push	{r0, r1, lr}
 8015100:	4601      	mov	r1, r0
 8015102:	ab03      	add	r3, sp, #12
 8015104:	4805      	ldr	r0, [pc, #20]	@ (801511c <fiprintf+0x20>)
 8015106:	f853 2b04 	ldr.w	r2, [r3], #4
 801510a:	6800      	ldr	r0, [r0, #0]
 801510c:	9301      	str	r3, [sp, #4]
 801510e:	f000 f837 	bl	8015180 <_vfiprintf_r>
 8015112:	b002      	add	sp, #8
 8015114:	f85d eb04 	ldr.w	lr, [sp], #4
 8015118:	b003      	add	sp, #12
 801511a:	4770      	bx	lr
 801511c:	200001e4 	.word	0x200001e4

08015120 <abort>:
 8015120:	b508      	push	{r3, lr}
 8015122:	2006      	movs	r0, #6
 8015124:	f000 fa00 	bl	8015528 <raise>
 8015128:	2001      	movs	r0, #1
 801512a:	f7ec fb7f 	bl	800182c <_exit>

0801512e <__sfputc_r>:
 801512e:	6893      	ldr	r3, [r2, #8]
 8015130:	3b01      	subs	r3, #1
 8015132:	2b00      	cmp	r3, #0
 8015134:	b410      	push	{r4}
 8015136:	6093      	str	r3, [r2, #8]
 8015138:	da08      	bge.n	801514c <__sfputc_r+0x1e>
 801513a:	6994      	ldr	r4, [r2, #24]
 801513c:	42a3      	cmp	r3, r4
 801513e:	db01      	blt.n	8015144 <__sfputc_r+0x16>
 8015140:	290a      	cmp	r1, #10
 8015142:	d103      	bne.n	801514c <__sfputc_r+0x1e>
 8015144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015148:	f000 b932 	b.w	80153b0 <__swbuf_r>
 801514c:	6813      	ldr	r3, [r2, #0]
 801514e:	1c58      	adds	r0, r3, #1
 8015150:	6010      	str	r0, [r2, #0]
 8015152:	7019      	strb	r1, [r3, #0]
 8015154:	4608      	mov	r0, r1
 8015156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801515a:	4770      	bx	lr

0801515c <__sfputs_r>:
 801515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515e:	4606      	mov	r6, r0
 8015160:	460f      	mov	r7, r1
 8015162:	4614      	mov	r4, r2
 8015164:	18d5      	adds	r5, r2, r3
 8015166:	42ac      	cmp	r4, r5
 8015168:	d101      	bne.n	801516e <__sfputs_r+0x12>
 801516a:	2000      	movs	r0, #0
 801516c:	e007      	b.n	801517e <__sfputs_r+0x22>
 801516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015172:	463a      	mov	r2, r7
 8015174:	4630      	mov	r0, r6
 8015176:	f7ff ffda 	bl	801512e <__sfputc_r>
 801517a:	1c43      	adds	r3, r0, #1
 801517c:	d1f3      	bne.n	8015166 <__sfputs_r+0xa>
 801517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015180 <_vfiprintf_r>:
 8015180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015184:	460d      	mov	r5, r1
 8015186:	b09d      	sub	sp, #116	@ 0x74
 8015188:	4614      	mov	r4, r2
 801518a:	4698      	mov	r8, r3
 801518c:	4606      	mov	r6, r0
 801518e:	b118      	cbz	r0, 8015198 <_vfiprintf_r+0x18>
 8015190:	6a03      	ldr	r3, [r0, #32]
 8015192:	b90b      	cbnz	r3, 8015198 <_vfiprintf_r+0x18>
 8015194:	f7ff f9bc 	bl	8014510 <__sinit>
 8015198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801519a:	07d9      	lsls	r1, r3, #31
 801519c:	d405      	bmi.n	80151aa <_vfiprintf_r+0x2a>
 801519e:	89ab      	ldrh	r3, [r5, #12]
 80151a0:	059a      	lsls	r2, r3, #22
 80151a2:	d402      	bmi.n	80151aa <_vfiprintf_r+0x2a>
 80151a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151a6:	f7ff fb82 	bl	80148ae <__retarget_lock_acquire_recursive>
 80151aa:	89ab      	ldrh	r3, [r5, #12]
 80151ac:	071b      	lsls	r3, r3, #28
 80151ae:	d501      	bpl.n	80151b4 <_vfiprintf_r+0x34>
 80151b0:	692b      	ldr	r3, [r5, #16]
 80151b2:	b99b      	cbnz	r3, 80151dc <_vfiprintf_r+0x5c>
 80151b4:	4629      	mov	r1, r5
 80151b6:	4630      	mov	r0, r6
 80151b8:	f000 f938 	bl	801542c <__swsetup_r>
 80151bc:	b170      	cbz	r0, 80151dc <_vfiprintf_r+0x5c>
 80151be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151c0:	07dc      	lsls	r4, r3, #31
 80151c2:	d504      	bpl.n	80151ce <_vfiprintf_r+0x4e>
 80151c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151c8:	b01d      	add	sp, #116	@ 0x74
 80151ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ce:	89ab      	ldrh	r3, [r5, #12]
 80151d0:	0598      	lsls	r0, r3, #22
 80151d2:	d4f7      	bmi.n	80151c4 <_vfiprintf_r+0x44>
 80151d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151d6:	f7ff fb6b 	bl	80148b0 <__retarget_lock_release_recursive>
 80151da:	e7f3      	b.n	80151c4 <_vfiprintf_r+0x44>
 80151dc:	2300      	movs	r3, #0
 80151de:	9309      	str	r3, [sp, #36]	@ 0x24
 80151e0:	2320      	movs	r3, #32
 80151e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80151ea:	2330      	movs	r3, #48	@ 0x30
 80151ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801539c <_vfiprintf_r+0x21c>
 80151f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80151f4:	f04f 0901 	mov.w	r9, #1
 80151f8:	4623      	mov	r3, r4
 80151fa:	469a      	mov	sl, r3
 80151fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015200:	b10a      	cbz	r2, 8015206 <_vfiprintf_r+0x86>
 8015202:	2a25      	cmp	r2, #37	@ 0x25
 8015204:	d1f9      	bne.n	80151fa <_vfiprintf_r+0x7a>
 8015206:	ebba 0b04 	subs.w	fp, sl, r4
 801520a:	d00b      	beq.n	8015224 <_vfiprintf_r+0xa4>
 801520c:	465b      	mov	r3, fp
 801520e:	4622      	mov	r2, r4
 8015210:	4629      	mov	r1, r5
 8015212:	4630      	mov	r0, r6
 8015214:	f7ff ffa2 	bl	801515c <__sfputs_r>
 8015218:	3001      	adds	r0, #1
 801521a:	f000 80a7 	beq.w	801536c <_vfiprintf_r+0x1ec>
 801521e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015220:	445a      	add	r2, fp
 8015222:	9209      	str	r2, [sp, #36]	@ 0x24
 8015224:	f89a 3000 	ldrb.w	r3, [sl]
 8015228:	2b00      	cmp	r3, #0
 801522a:	f000 809f 	beq.w	801536c <_vfiprintf_r+0x1ec>
 801522e:	2300      	movs	r3, #0
 8015230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015238:	f10a 0a01 	add.w	sl, sl, #1
 801523c:	9304      	str	r3, [sp, #16]
 801523e:	9307      	str	r3, [sp, #28]
 8015240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015244:	931a      	str	r3, [sp, #104]	@ 0x68
 8015246:	4654      	mov	r4, sl
 8015248:	2205      	movs	r2, #5
 801524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801524e:	4853      	ldr	r0, [pc, #332]	@ (801539c <_vfiprintf_r+0x21c>)
 8015250:	f7ea ffde 	bl	8000210 <memchr>
 8015254:	9a04      	ldr	r2, [sp, #16]
 8015256:	b9d8      	cbnz	r0, 8015290 <_vfiprintf_r+0x110>
 8015258:	06d1      	lsls	r1, r2, #27
 801525a:	bf44      	itt	mi
 801525c:	2320      	movmi	r3, #32
 801525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015262:	0713      	lsls	r3, r2, #28
 8015264:	bf44      	itt	mi
 8015266:	232b      	movmi	r3, #43	@ 0x2b
 8015268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801526c:	f89a 3000 	ldrb.w	r3, [sl]
 8015270:	2b2a      	cmp	r3, #42	@ 0x2a
 8015272:	d015      	beq.n	80152a0 <_vfiprintf_r+0x120>
 8015274:	9a07      	ldr	r2, [sp, #28]
 8015276:	4654      	mov	r4, sl
 8015278:	2000      	movs	r0, #0
 801527a:	f04f 0c0a 	mov.w	ip, #10
 801527e:	4621      	mov	r1, r4
 8015280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015284:	3b30      	subs	r3, #48	@ 0x30
 8015286:	2b09      	cmp	r3, #9
 8015288:	d94b      	bls.n	8015322 <_vfiprintf_r+0x1a2>
 801528a:	b1b0      	cbz	r0, 80152ba <_vfiprintf_r+0x13a>
 801528c:	9207      	str	r2, [sp, #28]
 801528e:	e014      	b.n	80152ba <_vfiprintf_r+0x13a>
 8015290:	eba0 0308 	sub.w	r3, r0, r8
 8015294:	fa09 f303 	lsl.w	r3, r9, r3
 8015298:	4313      	orrs	r3, r2
 801529a:	9304      	str	r3, [sp, #16]
 801529c:	46a2      	mov	sl, r4
 801529e:	e7d2      	b.n	8015246 <_vfiprintf_r+0xc6>
 80152a0:	9b03      	ldr	r3, [sp, #12]
 80152a2:	1d19      	adds	r1, r3, #4
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	9103      	str	r1, [sp, #12]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	bfbb      	ittet	lt
 80152ac:	425b      	neglt	r3, r3
 80152ae:	f042 0202 	orrlt.w	r2, r2, #2
 80152b2:	9307      	strge	r3, [sp, #28]
 80152b4:	9307      	strlt	r3, [sp, #28]
 80152b6:	bfb8      	it	lt
 80152b8:	9204      	strlt	r2, [sp, #16]
 80152ba:	7823      	ldrb	r3, [r4, #0]
 80152bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80152be:	d10a      	bne.n	80152d6 <_vfiprintf_r+0x156>
 80152c0:	7863      	ldrb	r3, [r4, #1]
 80152c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80152c4:	d132      	bne.n	801532c <_vfiprintf_r+0x1ac>
 80152c6:	9b03      	ldr	r3, [sp, #12]
 80152c8:	1d1a      	adds	r2, r3, #4
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	9203      	str	r2, [sp, #12]
 80152ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152d2:	3402      	adds	r4, #2
 80152d4:	9305      	str	r3, [sp, #20]
 80152d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80153ac <_vfiprintf_r+0x22c>
 80152da:	7821      	ldrb	r1, [r4, #0]
 80152dc:	2203      	movs	r2, #3
 80152de:	4650      	mov	r0, sl
 80152e0:	f7ea ff96 	bl	8000210 <memchr>
 80152e4:	b138      	cbz	r0, 80152f6 <_vfiprintf_r+0x176>
 80152e6:	9b04      	ldr	r3, [sp, #16]
 80152e8:	eba0 000a 	sub.w	r0, r0, sl
 80152ec:	2240      	movs	r2, #64	@ 0x40
 80152ee:	4082      	lsls	r2, r0
 80152f0:	4313      	orrs	r3, r2
 80152f2:	3401      	adds	r4, #1
 80152f4:	9304      	str	r3, [sp, #16]
 80152f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152fa:	4829      	ldr	r0, [pc, #164]	@ (80153a0 <_vfiprintf_r+0x220>)
 80152fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015300:	2206      	movs	r2, #6
 8015302:	f7ea ff85 	bl	8000210 <memchr>
 8015306:	2800      	cmp	r0, #0
 8015308:	d03f      	beq.n	801538a <_vfiprintf_r+0x20a>
 801530a:	4b26      	ldr	r3, [pc, #152]	@ (80153a4 <_vfiprintf_r+0x224>)
 801530c:	bb1b      	cbnz	r3, 8015356 <_vfiprintf_r+0x1d6>
 801530e:	9b03      	ldr	r3, [sp, #12]
 8015310:	3307      	adds	r3, #7
 8015312:	f023 0307 	bic.w	r3, r3, #7
 8015316:	3308      	adds	r3, #8
 8015318:	9303      	str	r3, [sp, #12]
 801531a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801531c:	443b      	add	r3, r7
 801531e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015320:	e76a      	b.n	80151f8 <_vfiprintf_r+0x78>
 8015322:	fb0c 3202 	mla	r2, ip, r2, r3
 8015326:	460c      	mov	r4, r1
 8015328:	2001      	movs	r0, #1
 801532a:	e7a8      	b.n	801527e <_vfiprintf_r+0xfe>
 801532c:	2300      	movs	r3, #0
 801532e:	3401      	adds	r4, #1
 8015330:	9305      	str	r3, [sp, #20]
 8015332:	4619      	mov	r1, r3
 8015334:	f04f 0c0a 	mov.w	ip, #10
 8015338:	4620      	mov	r0, r4
 801533a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801533e:	3a30      	subs	r2, #48	@ 0x30
 8015340:	2a09      	cmp	r2, #9
 8015342:	d903      	bls.n	801534c <_vfiprintf_r+0x1cc>
 8015344:	2b00      	cmp	r3, #0
 8015346:	d0c6      	beq.n	80152d6 <_vfiprintf_r+0x156>
 8015348:	9105      	str	r1, [sp, #20]
 801534a:	e7c4      	b.n	80152d6 <_vfiprintf_r+0x156>
 801534c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015350:	4604      	mov	r4, r0
 8015352:	2301      	movs	r3, #1
 8015354:	e7f0      	b.n	8015338 <_vfiprintf_r+0x1b8>
 8015356:	ab03      	add	r3, sp, #12
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	462a      	mov	r2, r5
 801535c:	4b12      	ldr	r3, [pc, #72]	@ (80153a8 <_vfiprintf_r+0x228>)
 801535e:	a904      	add	r1, sp, #16
 8015360:	4630      	mov	r0, r6
 8015362:	f3af 8000 	nop.w
 8015366:	4607      	mov	r7, r0
 8015368:	1c78      	adds	r0, r7, #1
 801536a:	d1d6      	bne.n	801531a <_vfiprintf_r+0x19a>
 801536c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801536e:	07d9      	lsls	r1, r3, #31
 8015370:	d405      	bmi.n	801537e <_vfiprintf_r+0x1fe>
 8015372:	89ab      	ldrh	r3, [r5, #12]
 8015374:	059a      	lsls	r2, r3, #22
 8015376:	d402      	bmi.n	801537e <_vfiprintf_r+0x1fe>
 8015378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801537a:	f7ff fa99 	bl	80148b0 <__retarget_lock_release_recursive>
 801537e:	89ab      	ldrh	r3, [r5, #12]
 8015380:	065b      	lsls	r3, r3, #25
 8015382:	f53f af1f 	bmi.w	80151c4 <_vfiprintf_r+0x44>
 8015386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015388:	e71e      	b.n	80151c8 <_vfiprintf_r+0x48>
 801538a:	ab03      	add	r3, sp, #12
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	462a      	mov	r2, r5
 8015390:	4b05      	ldr	r3, [pc, #20]	@ (80153a8 <_vfiprintf_r+0x228>)
 8015392:	a904      	add	r1, sp, #16
 8015394:	4630      	mov	r0, r6
 8015396:	f7ff fce5 	bl	8014d64 <_printf_i>
 801539a:	e7e4      	b.n	8015366 <_vfiprintf_r+0x1e6>
 801539c:	08016468 	.word	0x08016468
 80153a0:	08016472 	.word	0x08016472
 80153a4:	00000000 	.word	0x00000000
 80153a8:	0801515d 	.word	0x0801515d
 80153ac:	0801646e 	.word	0x0801646e

080153b0 <__swbuf_r>:
 80153b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b2:	460e      	mov	r6, r1
 80153b4:	4614      	mov	r4, r2
 80153b6:	4605      	mov	r5, r0
 80153b8:	b118      	cbz	r0, 80153c2 <__swbuf_r+0x12>
 80153ba:	6a03      	ldr	r3, [r0, #32]
 80153bc:	b90b      	cbnz	r3, 80153c2 <__swbuf_r+0x12>
 80153be:	f7ff f8a7 	bl	8014510 <__sinit>
 80153c2:	69a3      	ldr	r3, [r4, #24]
 80153c4:	60a3      	str	r3, [r4, #8]
 80153c6:	89a3      	ldrh	r3, [r4, #12]
 80153c8:	071a      	lsls	r2, r3, #28
 80153ca:	d501      	bpl.n	80153d0 <__swbuf_r+0x20>
 80153cc:	6923      	ldr	r3, [r4, #16]
 80153ce:	b943      	cbnz	r3, 80153e2 <__swbuf_r+0x32>
 80153d0:	4621      	mov	r1, r4
 80153d2:	4628      	mov	r0, r5
 80153d4:	f000 f82a 	bl	801542c <__swsetup_r>
 80153d8:	b118      	cbz	r0, 80153e2 <__swbuf_r+0x32>
 80153da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80153de:	4638      	mov	r0, r7
 80153e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	6922      	ldr	r2, [r4, #16]
 80153e6:	1a98      	subs	r0, r3, r2
 80153e8:	6963      	ldr	r3, [r4, #20]
 80153ea:	b2f6      	uxtb	r6, r6
 80153ec:	4283      	cmp	r3, r0
 80153ee:	4637      	mov	r7, r6
 80153f0:	dc05      	bgt.n	80153fe <__swbuf_r+0x4e>
 80153f2:	4621      	mov	r1, r4
 80153f4:	4628      	mov	r0, r5
 80153f6:	f7ff fe59 	bl	80150ac <_fflush_r>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d1ed      	bne.n	80153da <__swbuf_r+0x2a>
 80153fe:	68a3      	ldr	r3, [r4, #8]
 8015400:	3b01      	subs	r3, #1
 8015402:	60a3      	str	r3, [r4, #8]
 8015404:	6823      	ldr	r3, [r4, #0]
 8015406:	1c5a      	adds	r2, r3, #1
 8015408:	6022      	str	r2, [r4, #0]
 801540a:	701e      	strb	r6, [r3, #0]
 801540c:	6962      	ldr	r2, [r4, #20]
 801540e:	1c43      	adds	r3, r0, #1
 8015410:	429a      	cmp	r2, r3
 8015412:	d004      	beq.n	801541e <__swbuf_r+0x6e>
 8015414:	89a3      	ldrh	r3, [r4, #12]
 8015416:	07db      	lsls	r3, r3, #31
 8015418:	d5e1      	bpl.n	80153de <__swbuf_r+0x2e>
 801541a:	2e0a      	cmp	r6, #10
 801541c:	d1df      	bne.n	80153de <__swbuf_r+0x2e>
 801541e:	4621      	mov	r1, r4
 8015420:	4628      	mov	r0, r5
 8015422:	f7ff fe43 	bl	80150ac <_fflush_r>
 8015426:	2800      	cmp	r0, #0
 8015428:	d0d9      	beq.n	80153de <__swbuf_r+0x2e>
 801542a:	e7d6      	b.n	80153da <__swbuf_r+0x2a>

0801542c <__swsetup_r>:
 801542c:	b538      	push	{r3, r4, r5, lr}
 801542e:	4b29      	ldr	r3, [pc, #164]	@ (80154d4 <__swsetup_r+0xa8>)
 8015430:	4605      	mov	r5, r0
 8015432:	6818      	ldr	r0, [r3, #0]
 8015434:	460c      	mov	r4, r1
 8015436:	b118      	cbz	r0, 8015440 <__swsetup_r+0x14>
 8015438:	6a03      	ldr	r3, [r0, #32]
 801543a:	b90b      	cbnz	r3, 8015440 <__swsetup_r+0x14>
 801543c:	f7ff f868 	bl	8014510 <__sinit>
 8015440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015444:	0719      	lsls	r1, r3, #28
 8015446:	d422      	bmi.n	801548e <__swsetup_r+0x62>
 8015448:	06da      	lsls	r2, r3, #27
 801544a:	d407      	bmi.n	801545c <__swsetup_r+0x30>
 801544c:	2209      	movs	r2, #9
 801544e:	602a      	str	r2, [r5, #0]
 8015450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015454:	81a3      	strh	r3, [r4, #12]
 8015456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801545a:	e033      	b.n	80154c4 <__swsetup_r+0x98>
 801545c:	0758      	lsls	r0, r3, #29
 801545e:	d512      	bpl.n	8015486 <__swsetup_r+0x5a>
 8015460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015462:	b141      	cbz	r1, 8015476 <__swsetup_r+0x4a>
 8015464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015468:	4299      	cmp	r1, r3
 801546a:	d002      	beq.n	8015472 <__swsetup_r+0x46>
 801546c:	4628      	mov	r0, r5
 801546e:	f7ff fa61 	bl	8014934 <_free_r>
 8015472:	2300      	movs	r3, #0
 8015474:	6363      	str	r3, [r4, #52]	@ 0x34
 8015476:	89a3      	ldrh	r3, [r4, #12]
 8015478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801547c:	81a3      	strh	r3, [r4, #12]
 801547e:	2300      	movs	r3, #0
 8015480:	6063      	str	r3, [r4, #4]
 8015482:	6923      	ldr	r3, [r4, #16]
 8015484:	6023      	str	r3, [r4, #0]
 8015486:	89a3      	ldrh	r3, [r4, #12]
 8015488:	f043 0308 	orr.w	r3, r3, #8
 801548c:	81a3      	strh	r3, [r4, #12]
 801548e:	6923      	ldr	r3, [r4, #16]
 8015490:	b94b      	cbnz	r3, 80154a6 <__swsetup_r+0x7a>
 8015492:	89a3      	ldrh	r3, [r4, #12]
 8015494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801549c:	d003      	beq.n	80154a6 <__swsetup_r+0x7a>
 801549e:	4621      	mov	r1, r4
 80154a0:	4628      	mov	r0, r5
 80154a2:	f000 f883 	bl	80155ac <__smakebuf_r>
 80154a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154aa:	f013 0201 	ands.w	r2, r3, #1
 80154ae:	d00a      	beq.n	80154c6 <__swsetup_r+0x9a>
 80154b0:	2200      	movs	r2, #0
 80154b2:	60a2      	str	r2, [r4, #8]
 80154b4:	6962      	ldr	r2, [r4, #20]
 80154b6:	4252      	negs	r2, r2
 80154b8:	61a2      	str	r2, [r4, #24]
 80154ba:	6922      	ldr	r2, [r4, #16]
 80154bc:	b942      	cbnz	r2, 80154d0 <__swsetup_r+0xa4>
 80154be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80154c2:	d1c5      	bne.n	8015450 <__swsetup_r+0x24>
 80154c4:	bd38      	pop	{r3, r4, r5, pc}
 80154c6:	0799      	lsls	r1, r3, #30
 80154c8:	bf58      	it	pl
 80154ca:	6962      	ldrpl	r2, [r4, #20]
 80154cc:	60a2      	str	r2, [r4, #8]
 80154ce:	e7f4      	b.n	80154ba <__swsetup_r+0x8e>
 80154d0:	2000      	movs	r0, #0
 80154d2:	e7f7      	b.n	80154c4 <__swsetup_r+0x98>
 80154d4:	200001e4 	.word	0x200001e4

080154d8 <_raise_r>:
 80154d8:	291f      	cmp	r1, #31
 80154da:	b538      	push	{r3, r4, r5, lr}
 80154dc:	4605      	mov	r5, r0
 80154de:	460c      	mov	r4, r1
 80154e0:	d904      	bls.n	80154ec <_raise_r+0x14>
 80154e2:	2316      	movs	r3, #22
 80154e4:	6003      	str	r3, [r0, #0]
 80154e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154ea:	bd38      	pop	{r3, r4, r5, pc}
 80154ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80154ee:	b112      	cbz	r2, 80154f6 <_raise_r+0x1e>
 80154f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154f4:	b94b      	cbnz	r3, 801550a <_raise_r+0x32>
 80154f6:	4628      	mov	r0, r5
 80154f8:	f000 f830 	bl	801555c <_getpid_r>
 80154fc:	4622      	mov	r2, r4
 80154fe:	4601      	mov	r1, r0
 8015500:	4628      	mov	r0, r5
 8015502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015506:	f000 b817 	b.w	8015538 <_kill_r>
 801550a:	2b01      	cmp	r3, #1
 801550c:	d00a      	beq.n	8015524 <_raise_r+0x4c>
 801550e:	1c59      	adds	r1, r3, #1
 8015510:	d103      	bne.n	801551a <_raise_r+0x42>
 8015512:	2316      	movs	r3, #22
 8015514:	6003      	str	r3, [r0, #0]
 8015516:	2001      	movs	r0, #1
 8015518:	e7e7      	b.n	80154ea <_raise_r+0x12>
 801551a:	2100      	movs	r1, #0
 801551c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015520:	4620      	mov	r0, r4
 8015522:	4798      	blx	r3
 8015524:	2000      	movs	r0, #0
 8015526:	e7e0      	b.n	80154ea <_raise_r+0x12>

08015528 <raise>:
 8015528:	4b02      	ldr	r3, [pc, #8]	@ (8015534 <raise+0xc>)
 801552a:	4601      	mov	r1, r0
 801552c:	6818      	ldr	r0, [r3, #0]
 801552e:	f7ff bfd3 	b.w	80154d8 <_raise_r>
 8015532:	bf00      	nop
 8015534:	200001e4 	.word	0x200001e4

08015538 <_kill_r>:
 8015538:	b538      	push	{r3, r4, r5, lr}
 801553a:	4d07      	ldr	r5, [pc, #28]	@ (8015558 <_kill_r+0x20>)
 801553c:	2300      	movs	r3, #0
 801553e:	4604      	mov	r4, r0
 8015540:	4608      	mov	r0, r1
 8015542:	4611      	mov	r1, r2
 8015544:	602b      	str	r3, [r5, #0]
 8015546:	f7ec f961 	bl	800180c <_kill>
 801554a:	1c43      	adds	r3, r0, #1
 801554c:	d102      	bne.n	8015554 <_kill_r+0x1c>
 801554e:	682b      	ldr	r3, [r5, #0]
 8015550:	b103      	cbz	r3, 8015554 <_kill_r+0x1c>
 8015552:	6023      	str	r3, [r4, #0]
 8015554:	bd38      	pop	{r3, r4, r5, pc}
 8015556:	bf00      	nop
 8015558:	2000dddc 	.word	0x2000dddc

0801555c <_getpid_r>:
 801555c:	f7ec b94e 	b.w	80017fc <_getpid>

08015560 <__swhatbuf_r>:
 8015560:	b570      	push	{r4, r5, r6, lr}
 8015562:	460c      	mov	r4, r1
 8015564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015568:	2900      	cmp	r1, #0
 801556a:	b096      	sub	sp, #88	@ 0x58
 801556c:	4615      	mov	r5, r2
 801556e:	461e      	mov	r6, r3
 8015570:	da0d      	bge.n	801558e <__swhatbuf_r+0x2e>
 8015572:	89a3      	ldrh	r3, [r4, #12]
 8015574:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015578:	f04f 0100 	mov.w	r1, #0
 801557c:	bf14      	ite	ne
 801557e:	2340      	movne	r3, #64	@ 0x40
 8015580:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015584:	2000      	movs	r0, #0
 8015586:	6031      	str	r1, [r6, #0]
 8015588:	602b      	str	r3, [r5, #0]
 801558a:	b016      	add	sp, #88	@ 0x58
 801558c:	bd70      	pop	{r4, r5, r6, pc}
 801558e:	466a      	mov	r2, sp
 8015590:	f000 f848 	bl	8015624 <_fstat_r>
 8015594:	2800      	cmp	r0, #0
 8015596:	dbec      	blt.n	8015572 <__swhatbuf_r+0x12>
 8015598:	9901      	ldr	r1, [sp, #4]
 801559a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801559e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80155a2:	4259      	negs	r1, r3
 80155a4:	4159      	adcs	r1, r3
 80155a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80155aa:	e7eb      	b.n	8015584 <__swhatbuf_r+0x24>

080155ac <__smakebuf_r>:
 80155ac:	898b      	ldrh	r3, [r1, #12]
 80155ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155b0:	079d      	lsls	r5, r3, #30
 80155b2:	4606      	mov	r6, r0
 80155b4:	460c      	mov	r4, r1
 80155b6:	d507      	bpl.n	80155c8 <__smakebuf_r+0x1c>
 80155b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80155bc:	6023      	str	r3, [r4, #0]
 80155be:	6123      	str	r3, [r4, #16]
 80155c0:	2301      	movs	r3, #1
 80155c2:	6163      	str	r3, [r4, #20]
 80155c4:	b003      	add	sp, #12
 80155c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c8:	ab01      	add	r3, sp, #4
 80155ca:	466a      	mov	r2, sp
 80155cc:	f7ff ffc8 	bl	8015560 <__swhatbuf_r>
 80155d0:	9f00      	ldr	r7, [sp, #0]
 80155d2:	4605      	mov	r5, r0
 80155d4:	4639      	mov	r1, r7
 80155d6:	4630      	mov	r0, r6
 80155d8:	f7fe fd68 	bl	80140ac <_malloc_r>
 80155dc:	b948      	cbnz	r0, 80155f2 <__smakebuf_r+0x46>
 80155de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155e2:	059a      	lsls	r2, r3, #22
 80155e4:	d4ee      	bmi.n	80155c4 <__smakebuf_r+0x18>
 80155e6:	f023 0303 	bic.w	r3, r3, #3
 80155ea:	f043 0302 	orr.w	r3, r3, #2
 80155ee:	81a3      	strh	r3, [r4, #12]
 80155f0:	e7e2      	b.n	80155b8 <__smakebuf_r+0xc>
 80155f2:	89a3      	ldrh	r3, [r4, #12]
 80155f4:	6020      	str	r0, [r4, #0]
 80155f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155fa:	81a3      	strh	r3, [r4, #12]
 80155fc:	9b01      	ldr	r3, [sp, #4]
 80155fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015602:	b15b      	cbz	r3, 801561c <__smakebuf_r+0x70>
 8015604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015608:	4630      	mov	r0, r6
 801560a:	f000 f81d 	bl	8015648 <_isatty_r>
 801560e:	b128      	cbz	r0, 801561c <__smakebuf_r+0x70>
 8015610:	89a3      	ldrh	r3, [r4, #12]
 8015612:	f023 0303 	bic.w	r3, r3, #3
 8015616:	f043 0301 	orr.w	r3, r3, #1
 801561a:	81a3      	strh	r3, [r4, #12]
 801561c:	89a3      	ldrh	r3, [r4, #12]
 801561e:	431d      	orrs	r5, r3
 8015620:	81a5      	strh	r5, [r4, #12]
 8015622:	e7cf      	b.n	80155c4 <__smakebuf_r+0x18>

08015624 <_fstat_r>:
 8015624:	b538      	push	{r3, r4, r5, lr}
 8015626:	4d07      	ldr	r5, [pc, #28]	@ (8015644 <_fstat_r+0x20>)
 8015628:	2300      	movs	r3, #0
 801562a:	4604      	mov	r4, r0
 801562c:	4608      	mov	r0, r1
 801562e:	4611      	mov	r1, r2
 8015630:	602b      	str	r3, [r5, #0]
 8015632:	f7ec f94b 	bl	80018cc <_fstat>
 8015636:	1c43      	adds	r3, r0, #1
 8015638:	d102      	bne.n	8015640 <_fstat_r+0x1c>
 801563a:	682b      	ldr	r3, [r5, #0]
 801563c:	b103      	cbz	r3, 8015640 <_fstat_r+0x1c>
 801563e:	6023      	str	r3, [r4, #0]
 8015640:	bd38      	pop	{r3, r4, r5, pc}
 8015642:	bf00      	nop
 8015644:	2000dddc 	.word	0x2000dddc

08015648 <_isatty_r>:
 8015648:	b538      	push	{r3, r4, r5, lr}
 801564a:	4d06      	ldr	r5, [pc, #24]	@ (8015664 <_isatty_r+0x1c>)
 801564c:	2300      	movs	r3, #0
 801564e:	4604      	mov	r4, r0
 8015650:	4608      	mov	r0, r1
 8015652:	602b      	str	r3, [r5, #0]
 8015654:	f7ec f94a 	bl	80018ec <_isatty>
 8015658:	1c43      	adds	r3, r0, #1
 801565a:	d102      	bne.n	8015662 <_isatty_r+0x1a>
 801565c:	682b      	ldr	r3, [r5, #0]
 801565e:	b103      	cbz	r3, 8015662 <_isatty_r+0x1a>
 8015660:	6023      	str	r3, [r4, #0]
 8015662:	bd38      	pop	{r3, r4, r5, pc}
 8015664:	2000dddc 	.word	0x2000dddc

08015668 <_init>:
 8015668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566a:	bf00      	nop
 801566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801566e:	bc08      	pop	{r3}
 8015670:	469e      	mov	lr, r3
 8015672:	4770      	bx	lr

08015674 <_fini>:
 8015674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015676:	bf00      	nop
 8015678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801567a:	bc08      	pop	{r3}
 801567c:	469e      	mov	lr, r3
 801567e:	4770      	bx	lr
