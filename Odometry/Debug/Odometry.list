
Odometry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08011698  08011698  00012698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122b0  080122b0  00014234  2**0
                  CONTENTS
  4 .ARM          00000008  080122b0  080122b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122b8  080122b8  00014234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080122b8  080122b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122c0  080122c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080122c4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db3c  20000238  080124f8  00014238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd74  080124f8  00014d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148f1  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d1  00000000  00000000  00028b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cac  00000000  00000000  0002d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008452  00000000  00000000  0002de7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a80  00000000  00000000  000362ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a7ad  00000000  00000000  0004ad4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000e54fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  000e5574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ea708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801167c 	.word	0x0801167c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0801167c 	.word	0x0801167c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f004 ffd2 	bl	80055f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f004 ff41 	bl	8005610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003e5c 	.word	0x20003e5c
 80007c0:	20003e68 	.word	0x20003e68
 80007c4:	20003e60 	.word	0x20003e60
 80007c8:	20003e54 	.word	0x20003e54
 80007cc:	20003e64 	.word	0x20003e64

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f004 feca 	bl	80055f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f004 fecc 	bl	8005610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003e68 	.word	0x20003e68
 8000884:	20003e60 	.word	0x20003e60

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003e68 	.word	0x20003e68

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f004 fe91 	bl	80055f4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f00f ffca 	bl	801089e <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f004 fe7e 	bl	8005610 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f004 fe64 	bl	80055f4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f004 fe5a 	bl	8005610 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000254 	.word	0x20000254
 8000a18:	20003e54 	.word	0x20003e54
 8000a1c:	20003e5c 	.word	0x20003e5c
 8000a20:	20003e64 	.word	0x20003e64
 8000a24:	20003e60 	.word	0x20003e60
 8000a28:	20003e68 	.word	0x20003e68

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003e54 	.word	0x20003e54
 8000adc:	20003e5c 	.word	0x20003e5c

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fe16 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81a 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d6 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 f8ac 	bl	8000c4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 f880 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 fc5e 	bl	80043b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000afc:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <main+0x34>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <main+0x38>)
 8000b02:	f003 fca3 	bl	800444c <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <main+0x3c>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f003 fc78 	bl	8004400 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <main+0x30>
 8000b14:	0801170c 	.word	0x0801170c
 8000b18:	08000d79 	.word	0x08000d79
 8000b1c:	20003f74 	.word	0x20003f74

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00f fdec 	bl	801070c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a28      	ldr	r2, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b94:	2310      	movs	r3, #16
 8000b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fcd6 	bl	800255c <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 f96b 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 ff38 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000be2:	f000 f955 	bl	8000e90 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f002 f92c 	bl	8002e8c <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f929 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20003e6c 	.word	0x20003e6c
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_DMA_Init+0x4c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2010      	movs	r0, #16
 8000c74:	f000 fe9b 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f000 feb4 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	2011      	movs	r0, #17
 8000c84:	f000 fe93 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f000 feac 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a2c      	ldr	r2, [pc, #176]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2120      	movs	r1, #32
 8000d26:	4812      	ldr	r0, [pc, #72]	@ (8000d70 <MX_GPIO_Init+0xd4>)
 8000d28:	f001 fbfe 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <MX_GPIO_Init+0xd8>)
 8000d44:	f001 fa6c 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <MX_GPIO_Init+0xd4>)
 8000d60:	f001 fa5e 	bl	8002220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020800 	.word	0x40020800

08000d78 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b0a4      	sub	sp, #144	@ 0x90
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	61f8      	str	r0, [r7, #28]
	  /* USER CODE BEGIN 5 */

	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8000d80:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <StartDefaultTask+0xd8>)
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	4b33      	ldr	r3, [pc, #204]	@ (8000e54 <StartDefaultTask+0xdc>)
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <StartDefaultTask+0xe0>)
 8000d8a:	4a34      	ldr	r2, [pc, #208]	@ (8000e5c <StartDefaultTask+0xe4>)
 8000d8c:	4934      	ldr	r1, [pc, #208]	@ (8000e60 <StartDefaultTask+0xe8>)
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f007 fd6e 	bl	8008870 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 fce9 	bl	8008770 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <StartDefaultTask+0xec>)
 8000da0:	677b      	str	r3, [r7, #116]	@ 0x74
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <StartDefaultTask+0xf0>)
 8000da4:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000da6:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <StartDefaultTask+0xf4>)
 8000da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <StartDefaultTask+0xf8>)
 8000dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000db0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 fce9 	bl	800878c <rcutils_set_default_allocator>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f083 0301 	eor.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <StartDefaultTask+0x58>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000dc6:	f240 115b 	movw	r1, #347	@ 0x15b
 8000dca:	482a      	ldr	r0, [pc, #168]	@ (8000e74 <StartDefaultTask+0xfc>)
 8000dcc:	f00f fbdc 	bl	8010588 <iprintf>
	  // micro-ROS app
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f007 fcf8 	bl	80087c8 <rcutils_get_default_allocator>
 8000dd8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000ddc:	463d      	mov	r5, r7
 8000dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dea:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	f007 fbfb 	bl	80085ec <rclc_support_init>

	      rclc_node_init_default(&node, "odometry_node", "", &support);
 8000df6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dfa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <StartDefaultTask+0x100>)
 8000e00:	491e      	ldr	r1, [pc, #120]	@ (8000e7c <StartDefaultTask+0x104>)
 8000e02:	f007 fc3d 	bl	8008680 <rclc_node_init_default>

	      // Initialize the publisher with Odometry message type
	      rclc_publisher_init_default(
 8000e06:	f006 f87f 	bl	8006f08 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <StartDefaultTask+0x108>)
 8000e12:	481c      	ldr	r0, [pc, #112]	@ (8000e84 <StartDefaultTask+0x10c>)
 8000e14:	f007 fc70 	bl	80086f8 <rclc_publisher_init_default>
		  /*odometry_msg.pose.pose.position.x = 10.0 your position x ;
		      odometry_msg.pose.pose.position.y = 15.0 your position y ;
		      odometry_msg.pose.pose.position.z = 0.0;  // Typically 0 in 2D*/

		      // Update twist (linear and angular velocity)
		      odometry_msg.linear.x = 1/* linear velocity x */;
 8000e18:	491b      	ldr	r1, [pc, #108]	@ (8000e88 <StartDefaultTask+0x110>)
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <StartDefaultTask+0x114>)
 8000e20:	e9c1 2300 	strd	r2, r3, [r1]
		      odometry_msg.linear.y = 1/* linear velocity y */;
 8000e24:	4918      	ldr	r1, [pc, #96]	@ (8000e88 <StartDefaultTask+0x110>)
 8000e26:	f04f 0200 	mov.w	r2, #0
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <StartDefaultTask+0x114>)
 8000e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		      odometry_msg.angular.z = 1/* angular velocity z */;
 8000e30:	4915      	ldr	r1, [pc, #84]	@ (8000e88 <StartDefaultTask+0x110>)
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <StartDefaultTask+0x114>)
 8000e38:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		      // Publish the odometry message
		      rcl_publish(&odometry_publisher, &odometry_msg, NULL);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4912      	ldr	r1, [pc, #72]	@ (8000e88 <StartDefaultTask+0x110>)
 8000e40:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <StartDefaultTask+0x10c>)
 8000e42:	f007 fbaf 	bl	80085a4 <rcl_publish>

		      // Small delay to control publish rate
	    osDelay(100);
 8000e46:	2064      	movs	r0, #100	@ 0x64
 8000e48:	f003 fb92 	bl	8004570 <osDelay>
		      odometry_msg.linear.x = 1/* linear velocity x */;
 8000e4c:	bf00      	nop
 8000e4e:	e7e3      	b.n	8000e18 <StartDefaultTask+0xa0>
 8000e50:	08001619 	.word	0x08001619
 8000e54:	080015b1 	.word	0x080015b1
 8000e58:	08001591 	.word	0x08001591
 8000e5c:	08001565 	.word	0x08001565
 8000e60:	20003e6c 	.word	0x20003e6c
 8000e64:	08000e9d 	.word	0x08000e9d
 8000e68:	08000ee1 	.word	0x08000ee1
 8000e6c:	08000f19 	.word	0x08000f19
 8000e70:	08000f85 	.word	0x08000f85
 8000e74:	080116a4 	.word	0x080116a4
 8000e78:	080116cc 	.word	0x080116cc
 8000e7c:	080116d0 	.word	0x080116d0
 8000e80:	080116e0 	.word	0x080116e0
 8000e84:	20003f78 	.word	0x20003f78
 8000e88:	20003f80 	.word	0x20003f80
 8000e8c:	3ff00000 	.word	0x3ff00000

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <microros_allocate+0x3c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <microros_allocate+0x3c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <microros_allocate+0x40>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <microros_allocate+0x40>)
 8000ec4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fbba 	bl	8000640 <pvPortMallocMicroROS>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20003fb0 	.word	0x20003fb0
 8000edc:	20003fb4 	.word	0x20003fb4

08000ee0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fcc9 	bl	8000888 <getBlockSize>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <microros_deallocate+0x34>)
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <microros_deallocate+0x34>)
 8000f02:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fc63 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20003fb4 	.word	0x20003fb4

08000f18 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <microros_reallocate+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <microros_reallocate+0x64>)
 8000f32:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <microros_reallocate+0x68>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <microros_reallocate+0x68>)
 8000f42:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d104      	bne.n	8000f54 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f7ff fb78 	bl	8000640 <pvPortMallocMicroROS>
 8000f50:	4603      	mov	r3, r0
 8000f52:	e00e      	b.n	8000f72 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fc97 	bl	8000888 <getBlockSize>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <microros_reallocate+0x68>)
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <microros_reallocate+0x68>)
 8000f66:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff fcaa 	bl	80008c4 <pvPortReallocMicroROS>
 8000f70:	4603      	mov	r3, r0
  }
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20003fb0 	.word	0x20003fb0
 8000f80:	20003fb4 	.word	0x20003fb4

08000f84 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <microros_zero_allocate+0x48>)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <microros_zero_allocate+0x48>)
 8000fa2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <microros_zero_allocate+0x4c>)
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <microros_zero_allocate+0x4c>)
 8000fb6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fcaf 	bl	800091e <pvPortCallocMicroROS>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20003fb0 	.word	0x20003fb0
 8000fd0:	20003fb4 	.word	0x20003fb4
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fee:	a320      	add	r3, pc, #128	@ (adr r3, 8001070 <UTILS_NanosecondsToTimespec+0x98>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f95c 	bl	80002b0 <__aeabi_ldivmod>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001006:	a31a      	add	r3, pc, #104	@ (adr r3, 8001070 <UTILS_NanosecondsToTimespec+0x98>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff f950 	bl	80002b0 <__aeabi_ldivmod>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da20      	bge.n	800105e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a11      	ldr	r2, [pc, #68]	@ (8001068 <UTILS_NanosecondsToTimespec+0x90>)
 8001022:	fb82 1203 	smull	r1, r2, r2, r3
 8001026:	1712      	asrs	r2, r2, #28
 8001028:	17db      	asrs	r3, r3, #31
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	6979      	ldr	r1, [r7, #20]
 8001038:	17c8      	asrs	r0, r1, #31
 800103a:	460c      	mov	r4, r1
 800103c:	4605      	mov	r5, r0
 800103e:	ebb2 0804 	subs.w	r8, r2, r4
 8001042:	eb63 0905 	sbc.w	r9, r3, r5
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4906      	ldr	r1, [pc, #24]	@ (800106c <UTILS_NanosecondsToTimespec+0x94>)
 8001054:	fb01 f303 	mul.w	r3, r1, r3
 8001058:	441a      	add	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
    }
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001068:	44b82fa1 	.word	0x44b82fa1
 800106c:	3b9aca00 	.word	0x3b9aca00
 8001070:	3b9aca00 	.word	0x3b9aca00
 8001074:	00000000 	.word	0x00000000

08001078 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b08e      	sub	sp, #56	@ 0x38
 800107e:	af00      	add	r7, sp, #0
 8001080:	6278      	str	r0, [r7, #36]	@ 0x24
 8001082:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001084:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001088:	2300      	movs	r3, #0
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 fd32 	bl	8005b08 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80010a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a6:	17da      	asrs	r2, r3, #31
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	61fa      	str	r2, [r7, #28]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	69b9      	ldr	r1, [r7, #24]
 80010b6:	000b      	movs	r3, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80010be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c0:	2200      	movs	r2, #0
 80010c2:	461c      	mov	r4, r3
 80010c4:	4615      	mov	r5, r2
 80010c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80010ca:	1911      	adds	r1, r2, r4
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	416b      	adcs	r3, r5
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80010da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	f04f 0500 	mov.w	r5, #0
 80010ea:	015d      	lsls	r5, r3, #5
 80010ec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80010f0:	0154      	lsls	r4, r2, #5
 80010f2:	4622      	mov	r2, r4
 80010f4:	462b      	mov	r3, r5
 80010f6:	ebb2 0800 	subs.w	r8, r2, r0
 80010fa:	eb63 0901 	sbc.w	r9, r3, r1
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800110a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800110e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001112:	4690      	mov	r8, r2
 8001114:	4699      	mov	r9, r3
 8001116:	eb18 0a00 	adds.w	sl, r8, r0
 800111a:	eb49 0b01 	adc.w	fp, r9, r1
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800112a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800112e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001132:	ebb2 040a 	subs.w	r4, r2, sl
 8001136:	603c      	str	r4, [r7, #0]
 8001138:	eb63 030b 	sbc.w	r3, r3, fp
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001142:	4623      	mov	r3, r4
 8001144:	181b      	adds	r3, r3, r0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	462b      	mov	r3, r5
 800114a:	eb41 0303 	adc.w	r3, r1, r3
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001156:	f7ff ff3f 	bl	8000fd8 <UTILS_NanosecondsToTimespec>

    return 0;
 800115a:	2300      	movs	r3, #0
 800115c:	4618      	mov	r0, r3
 800115e:	3738      	adds	r7, #56	@ 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4d      	ldr	r2, [pc, #308]	@ (800130c <HAL_UART_MspInit+0x154>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	f040 8093 	bne.w	8001302 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <HAL_UART_MspInit+0x158>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001310 <HAL_UART_MspInit+0x158>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <HAL_UART_MspInit+0x158>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b44      	ldr	r3, [pc, #272]	@ (8001310 <HAL_UART_MspInit+0x158>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	4a43      	ldr	r2, [pc, #268]	@ (8001310 <HAL_UART_MspInit+0x158>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6313      	str	r3, [r2, #48]	@ 0x30
 8001208:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <HAL_UART_MspInit+0x158>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001214:	230c      	movs	r3, #12
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001224:	2307      	movs	r3, #7
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4839      	ldr	r0, [pc, #228]	@ (8001314 <HAL_UART_MspInit+0x15c>)
 8001230:	f000 fff6 	bl	8002220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001236:	4a39      	ldr	r2, [pc, #228]	@ (800131c <HAL_UART_MspInit+0x164>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800123c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001240:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001242:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001248:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001254:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125c:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001268:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800126c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001270:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001278:	4827      	ldr	r0, [pc, #156]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800127a:	f000 fbcf 	bl	8001a1c <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001284:	f7ff fe04 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a23      	ldr	r2, [pc, #140]	@ (8001318 <HAL_UART_MspInit+0x160>)
 800128c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800128e:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <HAL_UART_MspInit+0x160>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <HAL_UART_MspInit+0x168>)
 8001296:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <HAL_UART_MspInit+0x16c>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <HAL_UART_MspInit+0x168>)
 800129c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012a4:	2240      	movs	r2, #64	@ 0x40
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d0:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012d6:	4812      	ldr	r0, [pc, #72]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012d8:	f000 fba0 	bl	8001a1c <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80012e2:	f7ff fdd5 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <HAL_UART_MspInit+0x168>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2026      	movs	r0, #38	@ 0x26
 80012f8:	f000 fb59 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fc:	2026      	movs	r0, #38	@ 0x26
 80012fe:	f000 fb72 	bl	80019e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	20003eb4 	.word	0x20003eb4
 800131c:	40026088 	.word	0x40026088
 8001320:	20003f14 	.word	0x20003f14
 8001324:	400260a0 	.word	0x400260a0

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <UsageFault_Handler+0x4>

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001362:	f000 fa29 	bl	80017b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001366:	f004 fd53 	bl	8005e10 <xTaskGetSchedulerState>
 800136a:	4603      	mov	r3, r0
 800136c:	2b01      	cmp	r3, #1
 800136e:	d001      	beq.n	8001374 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001370:	f005 fb4a 	bl	8006a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <DMA1_Stream5_IRQHandler+0x10>)
 800137e:	f000 fce5 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20003eb4 	.word	0x20003eb4

0800138c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <DMA1_Stream6_IRQHandler+0x10>)
 8001392:	f000 fcdb 	bl	8001d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20003f14 	.word	0x20003f14

080013a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <USART2_IRQHandler+0x10>)
 80013a6:	f001 fed5 	bl	8003154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20003e6c 	.word	0x20003e6c

080013b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return 1;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_kill>:

int _kill(int pid, int sig)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ce:	f00f fa31 	bl	8010834 <__errno>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2216      	movs	r2, #22
 80013d6:	601a      	str	r2, [r3, #0]
  return -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_exit>:

void _exit (int status)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffe7 	bl	80013c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f6:	bf00      	nop
 80013f8:	e7fd      	b.n	80013f6 <_exit+0x12>

080013fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e00a      	b.n	8001422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800140c:	f3af 8000 	nop.w
 8001410:	4601      	mov	r1, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	60ba      	str	r2, [r7, #8]
 8001418:	b2ca      	uxtb	r2, r1
 800141a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf0      	blt.n	800140c <_read+0x12>
  }

  return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e009      	b.n	800145a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	60ba      	str	r2, [r7, #8]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbf1      	blt.n	8001446 <_write+0x12>
  }
  return len;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_close>:

int _close(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001494:	605a      	str	r2, [r3, #4]
  return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_isatty>:

int _isatty(int file)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	@ (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f00f f996 	bl	8010834 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20018000 	.word	0x20018000
 8001534:	00000400 	.word	0x00000400
 8001538:	20003fbc 	.word	0x20003fbc
 800153c:	2000dd78 	.word	0x2000dd78

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001572:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001578:	4904      	ldr	r1, [pc, #16]	@ (800158c <cubemx_transport_open+0x28>)
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f001 fd46 	bl	800300c <HAL_UART_Receive_DMA>
    return true;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20003fc0 	.word	0x20003fc0

08001590 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800159e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f001 fd58 	bl	8003056 <HAL_UART_DMAStop>
    return true;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015c4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d11c      	bne.n	800160c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f001 fca6 	bl	8002f2c <HAL_UART_Transmit_DMA>
 80015e0:	4603      	mov	r3, r0
 80015e2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015e4:	e002      	b.n	80015ec <cubemx_transport_write+0x3c>
            osDelay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f002 ffc2 	bl	8004570 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015ec:	7cfb      	ldrb	r3, [r7, #19]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d105      	bne.n	80015fe <cubemx_transport_write+0x4e>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d1f3      	bne.n	80015e6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <cubemx_transport_write+0x58>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	e002      	b.n	800160e <cubemx_transport_write+0x5e>
 8001608:	2300      	movs	r3, #0
 800160a:	e000      	b.n	800160e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800160c:	2300      	movs	r3, #0
    }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800162c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
}
 8001634:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <cubemx_transport_read+0x9c>)
 8001644:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001646:	b662      	cpsie	i
}
 8001648:	bf00      	nop
        __enable_irq();
        ms_used++;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001650:	2001      	movs	r0, #1
 8001652:	f002 ff8d 	bl	8004570 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <cubemx_transport_read+0xa0>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <cubemx_transport_read+0x9c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d103      	bne.n	800166a <cubemx_transport_read+0x52>
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	dbe3      	blt.n	8001632 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800166e:	e011      	b.n	8001694 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <cubemx_transport_read+0xa0>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	440b      	add	r3, r1
 800167a:	4910      	ldr	r1, [pc, #64]	@ (80016bc <cubemx_transport_read+0xa4>)
 800167c:	5c8a      	ldrb	r2, [r1, r2]
 800167e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <cubemx_transport_read+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168a:	4a0b      	ldr	r2, [pc, #44]	@ (80016b8 <cubemx_transport_read+0xa0>)
 800168c:	6013      	str	r3, [r2, #0]
        wrote++;
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	3301      	adds	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <cubemx_transport_read+0xa0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <cubemx_transport_read+0x9c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d003      	beq.n	80016a8 <cubemx_transport_read+0x90>
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3e3      	bcc.n	8001670 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80016a8:	69bb      	ldr	r3, [r7, #24]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200047c4 	.word	0x200047c4
 80016b8:	200047c0 	.word	0x200047c0
 80016bc:	20003fc0 	.word	0x20003fc0

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016c4:	f7ff ff3c 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ca:	490d      	ldr	r1, [pc, #52]	@ (8001700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e0:	4c0a      	ldr	r4, [pc, #40]	@ (800170c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f00f f8a7 	bl	8010840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff f9f5 	bl	8000ae0 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001704:	080122c4 	.word	0x080122c4
  ldr r2, =_sbss
 8001708:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800170c:	2000dd74 	.word	0x2000dd74

08001710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_Init+0x40>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <HAL_Init+0x40>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800172e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <HAL_Init+0x40>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f92b 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f808 	bl	8001758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fd0e 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_InitTick+0x54>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x58>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f943 	bl	8001a02 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001794:	f000 f90b 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	@ (80017b4 <HAL_InitTick+0x5c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000004 	.word	0x20000004
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	20000008 	.word	0x20000008

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	200047c8 	.word	0x200047c8

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200047c8 	.word	0x200047c8

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	@ (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	@ (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff3e 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff31 	bl	800185c <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff feda 	bl	80017e0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e099      	b.n	8001b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a58:	e00f      	b.n	8001a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5a:	f7ff fec1 	bl	80017e0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d908      	bls.n	8001a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2203      	movs	r2, #3
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e078      	b.n	8001b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e8      	bne.n	8001a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <HAL_DMA_Init+0x158>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	4313      	orrs	r3, r2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d117      	bne.n	8001b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fb01 	bl	8002128 <DMA_CheckFifoParam>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e016      	b.n	8001b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fab8 	bl	80020bc <DMA_CalcBaseAndBitshift>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b54:	223f      	movs	r2, #63	@ 0x3f
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f010803f 	.word	0xf010803f

08001b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA_Start_IT+0x26>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e040      	b.n	8001c20 <HAL_DMA_Start_IT+0xa8>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d12f      	bne.n	8001c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa4a 	bl	8002060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	223f      	movs	r2, #63	@ 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0216 	orr.w	r2, r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0208 	orr.w	r2, r2, #8
 8001bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e005      	b.n	8001c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c36:	f7ff fdd3 	bl	80017e0 <HAL_GetTick>
 8001c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e052      	b.n	8001d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0216 	bic.w	r2, r2, #22
 8001c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <HAL_DMA_Abort+0x62>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0208 	bic.w	r2, r2, #8
 8001c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001caa:	e013      	b.n	8001cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cac:	f7ff fd98 	bl	80017e0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d90c      	bls.n	8001cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e015      	b.n	8001d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e4      	bne.n	8001cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	223f      	movs	r2, #63	@ 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2280      	movs	r2, #128	@ 0x80
 8001d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00c      	b.n	8001d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d58:	4b8e      	ldr	r3, [pc, #568]	@ (8001f94 <HAL_DMA_IRQHandler+0x248>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f98 <HAL_DMA_IRQHandler+0x24c>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	2208      	movs	r2, #8
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01a      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0204 	bic.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2208      	movs	r2, #8
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2201      	movs	r2, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	2204      	movs	r2, #4
 8001df4:	409a      	lsls	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2204      	movs	r2, #4
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f043 0204 	orr.w	r2, r3, #4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	2210      	movs	r2, #16
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d043      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03c      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	2210      	movs	r2, #16
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d018      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d108      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d024      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
 8001e7a:	e01f      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0208 	bic.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 808f 	beq.w	8001fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8087 	beq.w	8001fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d136      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0216 	bic.w	r2, r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x1da>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0208 	bic.w	r2, r2, #8
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	223f      	movs	r2, #63	@ 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d07e      	beq.n	8002058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
        }
        return;
 8001f62:	e079      	b.n	8002058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10d      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d031      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
 8001f90:	e02c      	b.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
 8001f92:	bf00      	nop
 8001f94:	20000004 	.word	0x20000004
 8001f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
 8001fac:	e01e      	b.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10f      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0210 	bic.w	r2, r2, #16
 8001fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d032      	beq.n	800205a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2205      	movs	r2, #5
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d307      	bcc.n	8002034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f2      	bne.n	8002018 <HAL_DMA_IRQHandler+0x2cc>
 8002032:	e000      	b.n	8002036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
 8002056:	e000      	b.n	800205a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002058:	bf00      	nop
    }
  }
}
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800207c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	d108      	bne.n	80020a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800209e:	e007      	b.n	80020b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3b10      	subs	r3, #16
 80020cc:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <DMA_CalcBaseAndBitshift+0x64>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <DMA_CalcBaseAndBitshift+0x68>)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d909      	bls.n	80020fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	1d1a      	adds	r2, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80020fc:	e007      	b.n	800210e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	aaaaaaab 	.word	0xaaaaaaab
 8002124:	08011748 	.word	0x08011748

08002128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11f      	bne.n	8002182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d856      	bhi.n	80021f6 <DMA_CheckFifoParam+0xce>
 8002148:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <DMA_CheckFifoParam+0x28>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002161 	.word	0x08002161
 8002154:	08002173 	.word	0x08002173
 8002158:	08002161 	.word	0x08002161
 800215c:	080021f7 	.word	0x080021f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d046      	beq.n	80021fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002170:	e043      	b.n	80021fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800217a:	d140      	bne.n	80021fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e03d      	b.n	80021fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218a:	d121      	bne.n	80021d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d837      	bhi.n	8002202 <DMA_CheckFifoParam+0xda>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <DMA_CheckFifoParam+0x70>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021af 	.word	0x080021af
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	080021c1 	.word	0x080021c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      break;
 80021ac:	e030      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d025      	beq.n	8002206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021be:	e022      	b.n	8002206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021c8:	d11f      	bne.n	800220a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ce:	e01c      	b.n	800220a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d903      	bls.n	80021de <DMA_CheckFifoParam+0xb6>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d003      	beq.n	80021e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021dc:	e018      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      break;
 80021e2:	e015      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e00b      	b.n	800220e <DMA_CheckFifoParam+0xe6>
      break;
 80021f6:	bf00      	nop
 80021f8:	e00a      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 80021fa:	bf00      	nop
 80021fc:	e008      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
 8002200:	e006      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 8002202:	bf00      	nop
 8002204:	e004      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e002      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;   
 800220a:	bf00      	nop
 800220c:	e000      	b.n	8002210 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
    }
  } 
  
  return status; 
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e159      	b.n	80024f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8148 	bne.w	80024ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a2 	beq.w	80024ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	4a56      	ldr	r2, [pc, #344]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b6:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <HAL_GPIO_Init+0x2e8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a52      	ldr	r2, [pc, #328]	@ (800250c <HAL_GPIO_Init+0x2ec>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_GPIO_Init+0x2f0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x202>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_GPIO_Init+0x2f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x1fe>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a47      	ldr	r2, [pc, #284]	@ (8002518 <HAL_GPIO_Init+0x2f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x1fa>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a46      	ldr	r2, [pc, #280]	@ (800251c <HAL_GPIO_Init+0x2fc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x1f6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a45      	ldr	r2, [pc, #276]	@ (8002520 <HAL_GPIO_Init+0x300>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x1f2>
 800240e:	2304      	movs	r3, #4
 8002410:	e008      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002412:	2307      	movs	r3, #7
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002416:	2303      	movs	r3, #3
 8002418:	e004      	b.n	8002424 <HAL_GPIO_Init+0x204>
 800241a:	2302      	movs	r3, #2
 800241c:	e002      	b.n	8002424 <HAL_GPIO_Init+0x204>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x204>
 8002422:	2300      	movs	r3, #0
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f002 0203 	and.w	r2, r2, #3
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	4093      	lsls	r3, r2
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002434:	4935      	ldr	r1, [pc, #212]	@ (800250c <HAL_GPIO_Init+0x2ec>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a2f      	ldr	r2, [pc, #188]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_GPIO_Init+0x304>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a24      	ldr	r2, [pc, #144]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002496:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_GPIO_Init+0x304>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002524 <HAL_GPIO_Init+0x304>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	f67f aea2 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3724      	adds	r7, #36	@ 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40013800 	.word	0x40013800
 8002510:	40020000 	.word	0x40020000
 8002514:	40020400 	.word	0x40020400
 8002518:	40020800 	.word	0x40020800
 800251c:	40020c00 	.word	0x40020c00
 8002520:	40021000 	.word	0x40021000
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e267      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d075      	beq.n	8002666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257a:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b82      	ldr	r3, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e242      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x74>
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6f      	ldr	r2, [pc, #444]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a68      	ldr	r2, [pc, #416]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b66      	ldr	r3, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff f8e4 	bl	80017e0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff f8e0 	bl	80017e0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e207      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff f8d0 	bl	80017e0 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff f8cc 	bl	80017e0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1f3      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b44      	ldr	r3, [pc, #272]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4937      	ldr	r1, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7ff f885 	bl	80017e0 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff f881 	bl	80017e0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a8      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4925      	ldr	r1, [pc, #148]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff f864 	bl	80017e0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff f860 	bl	80017e0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e187      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff f844 	bl	80017e0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff f840 	bl	80017e0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e167      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x200>
 800277a:	e01b      	b.n	80027b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff f82d 	bl	80017e0 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e00e      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278a:	f7ff f829 	bl	80017e0 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d907      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e150      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ea      	bne.n	800278a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8097 	beq.w	80028f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b7a      	ldr	r3, [pc, #488]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a73      	ldr	r2, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7fe ffe9 	bl	80017e0 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe ffe5 	bl	80017e0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ea>
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a63      	ldr	r2, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x30c>
 800284e:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	@ 0x70
 800285a:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002868:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a54      	ldr	r2, [pc, #336]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe ffaa 	bl	80017e0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe ffa6 	bl	80017e0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0cb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ee      	beq.n	8002890 <HAL_RCC_OscConfig+0x334>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe ff94 	bl	80017e0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe ff90 	bl	80017e0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0b5      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a1 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d05c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d141      	bne.n	8002992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ff64 	bl	80017e0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe ff60 	bl	80017e0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e087      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe ff39 	bl	80017e0 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe ff35 	bl	80017e0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e05c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x416>
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe ff22 	bl	80017e0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe ff1e 	bl	80017e0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4ec>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fe50 	bl	80017e0 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fe4c 	bl	80017e0 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fdb0 	bl	8001758 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08011730 	.word	0x08011730
 8002c10:	20000004 	.word	0x20000004
 8002c14:	20000008 	.word	0x20000008

08002c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c1c:	b094      	sub	sp, #80	@ 0x50
 8002c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f200 80e1 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x34>
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4a:	e0db      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c50:	e0db      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b73      	ldr	r3, [pc, #460]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c56:	e0d8      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c58:	4b6f      	ldr	r3, [pc, #444]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c82:	2300      	movs	r3, #0
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	0159      	lsls	r1, r3, #5
 8002c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9c:	0150      	lsls	r0, r2, #5
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	1a51      	subs	r1, r2, r1
 8002ca6:	6139      	str	r1, [r7, #16]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	018b      	lsls	r3, r1, #6
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	018a      	lsls	r2, r1, #6
 8002cca:	4651      	mov	r1, sl
 8002ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	eb49 0303 	adc.w	r3, r9, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	024b      	lsls	r3, r1, #9
 8002d0e:	4621      	mov	r1, r4
 8002d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d14:	4621      	mov	r1, r4
 8002d16:	024a      	lsls	r2, r1, #9
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d28:	f7fd fb12 	bl	8000350 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d34:	e058      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b38      	ldr	r3, [pc, #224]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4611      	mov	r1, r2
 8002d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d62:	0150      	lsls	r0, r2, #5
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4641      	mov	r1, r8
 8002d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d88:	ebb2 040a 	subs.w	r4, r2, sl
 8002d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	00eb      	lsls	r3, r5, #3
 8002d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9e:	00e2      	lsls	r2, r4, #3
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4643      	mov	r3, r8
 8002da6:	18e3      	adds	r3, r4, r3
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	61fa      	str	r2, [r7, #28]
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	f7fd fab8 	bl	8000350 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3750      	adds	r7, #80	@ 0x50
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08011740 	.word	0x08011740

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08011740 	.word	0x08011740

08002e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e042      	b.n	8002f24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f980 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	@ 0x24
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 ffc9 	bl	8003e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d156      	bne.n	8002ff4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_UART_Transmit_DMA+0x26>
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e04f      	b.n	8002ff6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2221      	movs	r2, #33	@ 0x21
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <HAL_UART_Transmit_DMA+0xd4>)
 8002f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	4a20      	ldr	r2, [pc, #128]	@ (8003004 <HAL_UART_Transmit_DMA+0xd8>)
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <HAL_UART_Transmit_DMA+0xdc>)
 8002f8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	2200      	movs	r2, #0
 8002f94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002f96:	f107 0308 	add.w	r3, r7, #8
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	461a      	mov	r2, r3
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	f7fe fde3 	bl	8001b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	617b      	str	r3, [r7, #20]
   return(result);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3730      	adds	r7, #48	@ 0x30
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	080036f5 	.word	0x080036f5
 8003004:	0800378f 	.word	0x0800378f
 8003008:	08003913 	.word	0x08003913

0800300c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b20      	cmp	r3, #32
 8003024:	d112      	bne.n	800304c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_UART_Receive_DMA+0x26>
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e00b      	b.n	800304e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	461a      	mov	r2, r3
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fcb0 	bl	80039a8 <UART_Start_Receive_DMA>
 8003048:	4603      	mov	r3, r0
 800304a:	e000      	b.n	800304e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b090      	sub	sp, #64	@ 0x40
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306c:	2b80      	cmp	r3, #128	@ 0x80
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b21      	cmp	r3, #33	@ 0x21
 8003082:	d128      	bne.n	80030d6 <HAL_UART_DMAStop+0x80>
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d025      	beq.n	80030d6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	623b      	str	r3, [r7, #32]
   return(result);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fdac 	bl	8001c28 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fd03 	bl	8003adc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b22      	cmp	r3, #34	@ 0x22
 80030f6:	d128      	bne.n	800314a <HAL_UART_DMAStop+0xf4>
 80030f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d025      	beq.n	800314a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	60fb      	str	r3, [r7, #12]
   return(result);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800311e:	61fa      	str	r2, [r7, #28]
 8003120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	617b      	str	r3, [r7, #20]
   return(result);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fd72 	bl	8001c28 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fcf1 	bl	8003b2c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3740      	adds	r7, #64	@ 0x40
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0ba      	sub	sp, #232	@ 0xe8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_UART_IRQHandler+0x66>
 80031a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd99 	bl	8003cea <UART_Receive_IT>
      return;
 80031b8:	e25b      	b.n	8003672 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80de 	beq.w	8003380 <HAL_UART_IRQHandler+0x22c>
 80031c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80d1 	beq.w	8003380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0xae>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_UART_IRQHandler+0xd2>
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xf6>
 8003232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d011      	beq.n	800327a <HAL_UART_IRQHandler+0x126>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 81f2 	beq.w	8003668 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_UART_IRQHandler+0x14e>
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd24 	bl	8003cea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_UART_IRQHandler+0x17a>
 80032c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04f      	beq.n	800336e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fc2c 	bl	8003b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d141      	bne.n	8003366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800330e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800331a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1d9      	bne.n	80032e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d013      	beq.n	800335e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333a:	4a7e      	ldr	r2, [pc, #504]	@ (8003534 <HAL_UART_IRQHandler+0x3e0>)
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fce0 	bl	8001d08 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003358:	4610      	mov	r0, r2
 800335a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e00e      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9b2 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	e00a      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9ae 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	e006      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9aa 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800337a:	e175      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	bf00      	nop
    return;
 800337e:	e173      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 814f 	bne.w	8003628 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8148 	beq.w	8003628 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8141 	beq.w	8003628 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b40      	cmp	r3, #64	@ 0x40
 80033c8:	f040 80b6 	bne.w	8003538 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8145 	beq.w	800366c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f080 813e 	bcs.w	800366c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	f000 8088 	beq.w	8003516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800343e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800344a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1d9      	bne.n	8003406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800347a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800347e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e1      	bne.n	8003452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800349e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3314      	adds	r3, #20
 80034ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e3      	bne.n	800348e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034e6:	f023 0310 	bic.w	r3, r3, #16
 80034ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e3      	bne.n	80034d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fb89 	bl	8001c28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8d5 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003532:	e09b      	b.n	800366c <HAL_UART_IRQHandler+0x518>
 8003534:	08003bf3 	.word	0x08003bf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003540:	b29b      	uxth	r3, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 808e 	beq.w	8003670 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8089 	beq.w	8003670 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800356e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003582:	647a      	str	r2, [r7, #68]	@ 0x44
 8003584:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e3      	bne.n	800355e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	623b      	str	r3, [r7, #32]
   return(result);
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e3      	bne.n	8003596 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0310 	bic.w	r3, r3, #16
 80035f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003600:	61fa      	str	r2, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	617b      	str	r3, [r7, #20]
   return(result);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e3      	bne.n	80035dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f85b 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003626:	e023      	b.n	8003670 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_UART_IRQHandler+0x4f4>
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 faea 	bl	8003c1a <UART_Transmit_IT>
    return;
 8003646:	e014      	b.n	8003672 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <HAL_UART_IRQHandler+0x51e>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb2a 	bl	8003cba <UART_EndTransmit_IT>
    return;
 8003666:	e004      	b.n	8003672 <HAL_UART_IRQHandler+0x51e>
    return;
 8003668:	bf00      	nop
 800366a:	e002      	b.n	8003672 <HAL_UART_IRQHandler+0x51e>
      return;
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_UART_IRQHandler+0x51e>
      return;
 8003670:	bf00      	nop
  }
}
 8003672:	37e8      	adds	r7, #232	@ 0xe8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b090      	sub	sp, #64	@ 0x40
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d137      	bne.n	8003780 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	2200      	movs	r2, #0
 8003714:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	623b      	str	r3, [r7, #32]
   return(result);
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800372e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003736:	633a      	str	r2, [r7, #48]	@ 0x30
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800373c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	60fb      	str	r3, [r7, #12]
   return(result);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
 8003762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800376a:	61fa      	str	r2, [r7, #28]
 800376c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	617b      	str	r3, [r7, #20]
   return(result);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800377e:	e002      	b.n	8003786 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003780:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003782:	f7ff ff79 	bl	8003678 <HAL_UART_TxCpltCallback>
}
 8003786:	bf00      	nop
 8003788:	3740      	adds	r7, #64	@ 0x40
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff75 	bl	800368c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b09c      	sub	sp, #112	@ 0x70
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d172      	bne.n	80038ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c8:	2200      	movs	r2, #0
 80037ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	667b      	str	r3, [r7, #100]	@ 0x64
 8003818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003820:	647a      	str	r2, [r7, #68]	@ 0x44
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800382e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	623b      	str	r3, [r7, #32]
   return(result);
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800384a:	663b      	str	r3, [r7, #96]	@ 0x60
 800384c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003854:	633a      	str	r2, [r7, #48]	@ 0x30
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800385a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	d119      	bne.n	80038ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60fb      	str	r3, [r7, #12]
   return(result);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0310 	bic.w	r3, r3, #16
 800388e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003898:	61fa      	str	r2, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	69b9      	ldr	r1, [r7, #24]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	617b      	str	r3, [r7, #20]
   return(result);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ae:	2200      	movs	r2, #0
 80038b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d106      	bne.n	80038c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038c2:	f7ff ff0b 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038c6:	e002      	b.n	80038ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80038c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038ca:	f7ff fee9 	bl	80036a0 <HAL_UART_RxCpltCallback>
}
 80038ce:	bf00      	nop
 80038d0:	3770      	adds	r7, #112	@ 0x70
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4619      	mov	r1, r3
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff feed 	bl	80036dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003902:	e002      	b.n	800390a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff fed5 	bl	80036b4 <HAL_UART_RxHalfCpltCallback>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b21      	cmp	r3, #33	@ 0x21
 8003944:	d108      	bne.n	8003958 <UART_DMAError+0x46>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f000 f8c2 	bl	8003adc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b40      	cmp	r3, #64	@ 0x40
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b22      	cmp	r3, #34	@ 0x22
 8003978:	d108      	bne.n	800398c <UART_DMAError+0x7a>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f000 f8d0 	bl	8003b2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003990:	f043 0210 	orr.w	r2, r3, #16
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003998:	68b8      	ldr	r0, [r7, #8]
 800399a:	f7ff fe95 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b098      	sub	sp, #96	@ 0x60
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2222      	movs	r2, #34	@ 0x22
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <UART_Start_Receive_DMA+0x128>)
 80039d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ad4 <UART_Start_Receive_DMA+0x12c>)
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad8 <UART_Start_Receive_DMA+0x130>)
 80039e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	2200      	movs	r2, #0
 80039ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	f7fe f8b6 	bl	8001b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a4a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a7e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ab2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6a39      	ldr	r1, [r7, #32]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3760      	adds	r7, #96	@ 0x60
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	080037ab 	.word	0x080037ab
 8003ad4:	080038d7 	.word	0x080038d7
 8003ad8:	08003913 	.word	0x08003913

08003adc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6979      	ldr	r1, [r7, #20]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	613b      	str	r3, [r7, #16]
   return(result);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b20:	bf00      	nop
 8003b22:	3724      	adds	r7, #36	@ 0x24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b095      	sub	sp, #84	@ 0x54
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b54:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d119      	bne.n	8003bd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc4:	61ba      	str	r2, [r7, #24]
 8003bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003be6:	bf00      	nop
 8003be8:	3754      	adds	r7, #84	@ 0x54
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff fd5b 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b21      	cmp	r3, #33	@ 0x21
 8003c2c:	d13e      	bne.n	8003cac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	d114      	bne.n	8003c62 <UART_Transmit_IT+0x48>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d110      	bne.n	8003c62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	621a      	str	r2, [r3, #32]
 8003c60:	e008      	b.n	8003c74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6211      	str	r1, [r2, #32]
 8003c6c:	781a      	ldrb	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4619      	mov	r1, r3
 8003c82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10f      	bne.n	8003ca8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fccc 	bl	8003678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08c      	sub	sp, #48	@ 0x30
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b22      	cmp	r3, #34	@ 0x22
 8003cfc:	f040 80ae 	bne.w	8003e5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d08:	d117      	bne.n	8003d3a <UART_Receive_IT+0x50>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d38:	e026      	b.n	8003d88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4c:	d007      	beq.n	8003d5e <UART_Receive_IT+0x74>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <UART_Receive_IT+0x82>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e008      	b.n	8003d7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4619      	mov	r1, r3
 8003d96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d15d      	bne.n	8003e58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0220 	bic.w	r2, r2, #32
 8003daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d135      	bne.n	8003e4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	613b      	str	r3, [r7, #16]
   return(result);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	623a      	str	r2, [r7, #32]
 8003e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69f9      	ldr	r1, [r7, #28]
 8003e0e:	6a3a      	ldr	r2, [r7, #32]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d10a      	bne.n	8003e40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fc48 	bl	80036dc <HAL_UARTEx_RxEventCallback>
 8003e4c:	e002      	b.n	8003e54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fc26 	bl	80036a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e002      	b.n	8003e5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	@ 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b0c0      	sub	sp, #256	@ 0x100
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	68d9      	ldr	r1, [r3, #12]
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	ea40 0301 	orr.w	r3, r0, r1
 8003e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ec0:	f021 010c 	bic.w	r1, r1, #12
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	6999      	ldr	r1, [r3, #24]
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	ea40 0301 	orr.w	r3, r0, r1
 8003eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8004134 <UART_SetConfig+0x2cc>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d005      	beq.n	8003f08 <UART_SetConfig+0xa0>
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8d      	ldr	r3, [pc, #564]	@ (8004138 <UART_SetConfig+0x2d0>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d104      	bne.n	8003f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7fe ffac 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f10:	e003      	b.n	8003f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f12:	f7fe ff93 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003f16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f24:	f040 810c 	bne.w	8004140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	1891      	adds	r1, r2, r2
 8003f40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f42:	415b      	adcs	r3, r3
 8003f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	eb12 0801 	adds.w	r8, r2, r1
 8003f50:	4629      	mov	r1, r5
 8003f52:	eb43 0901 	adc.w	r9, r3, r1
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6a:	4690      	mov	r8, r2
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	eb18 0303 	adds.w	r3, r8, r3
 8003f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f78:	462b      	mov	r3, r5
 8003f7a:	eb49 0303 	adc.w	r3, r9, r3
 8003f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f96:	460b      	mov	r3, r1
 8003f98:	18db      	adds	r3, r3, r3
 8003f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	eb42 0303 	adc.w	r3, r2, r3
 8003fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fac:	f7fc f9d0 	bl	8000350 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b61      	ldr	r3, [pc, #388]	@ (800413c <UART_SetConfig+0x2d4>)
 8003fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	011c      	lsls	r4, r3, #4
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004000:	4692      	mov	sl, r2
 8004002:	469b      	mov	fp, r3
 8004004:	4643      	mov	r3, r8
 8004006:	eb1a 0303 	adds.w	r3, sl, r3
 800400a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800400e:	464b      	mov	r3, r9
 8004010:	eb4b 0303 	adc.w	r3, fp, r3
 8004014:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004024:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800402c:	460b      	mov	r3, r1
 800402e:	18db      	adds	r3, r3, r3
 8004030:	643b      	str	r3, [r7, #64]	@ 0x40
 8004032:	4613      	mov	r3, r2
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	647b      	str	r3, [r7, #68]	@ 0x44
 800403a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800403e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004042:	f7fc f985 	bl	8000350 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4611      	mov	r1, r2
 800404c:	4b3b      	ldr	r3, [pc, #236]	@ (800413c <UART_SetConfig+0x2d4>)
 800404e:	fba3 2301 	umull	r2, r3, r3, r1
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2264      	movs	r2, #100	@ 0x64
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004062:	4b36      	ldr	r3, [pc, #216]	@ (800413c <UART_SetConfig+0x2d4>)
 8004064:	fba3 2302 	umull	r2, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004070:	441c      	add	r4, r3
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800407c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800408c:	415b      	adcs	r3, r3
 800408e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6339      	str	r1, [r7, #48]	@ 0x30
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c8:	464b      	mov	r3, r9
 80040ca:	460a      	mov	r2, r1
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040e8:	460b      	mov	r3, r1
 80040ea:	18db      	adds	r3, r3, r3
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ee:	4613      	mov	r3, r2
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040fe:	f7fc f927 	bl	8000350 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <UART_SetConfig+0x2d4>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	@ 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	@ 0x32
 800411a:	4a08      	ldr	r2, [pc, #32]	@ (800413c <UART_SetConfig+0x2d4>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 0207 	and.w	r2, r3, #7
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4422      	add	r2, r4
 800412e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004130:	e106      	b.n	8004340 <UART_SetConfig+0x4d8>
 8004132:	bf00      	nop
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800414a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800414e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004152:	4642      	mov	r2, r8
 8004154:	464b      	mov	r3, r9
 8004156:	1891      	adds	r1, r2, r2
 8004158:	6239      	str	r1, [r7, #32]
 800415a:	415b      	adcs	r3, r3
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
 800415e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004162:	4641      	mov	r1, r8
 8004164:	1854      	adds	r4, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb43 0501 	adc.w	r5, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	00eb      	lsls	r3, r5, #3
 8004176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417a:	00e2      	lsls	r2, r4, #3
 800417c:	4614      	mov	r4, r2
 800417e:	461d      	mov	r5, r3
 8004180:	4643      	mov	r3, r8
 8004182:	18e3      	adds	r3, r4, r3
 8004184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004188:	464b      	mov	r3, r9
 800418a:	eb45 0303 	adc.w	r3, r5, r3
 800418e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041ae:	4629      	mov	r1, r5
 80041b0:	008b      	lsls	r3, r1, #2
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b8:	4621      	mov	r1, r4
 80041ba:	008a      	lsls	r2, r1, #2
 80041bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041c0:	f7fc f8c6 	bl	8000350 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4b60      	ldr	r3, [pc, #384]	@ (800434c <UART_SetConfig+0x4e4>)
 80041ca:	fba3 2302 	umull	r2, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	011c      	lsls	r4, r3, #4
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	61b9      	str	r1, [r7, #24]
 80041ec:	415b      	adcs	r3, r3
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f4:	4641      	mov	r1, r8
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	6139      	str	r1, [r7, #16]
 80041fa:	4649      	mov	r1, r9
 80041fc:	414b      	adcs	r3, r1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800420c:	4659      	mov	r1, fp
 800420e:	00cb      	lsls	r3, r1, #3
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004216:	4651      	mov	r1, sl
 8004218:	00ca      	lsls	r2, r1, #3
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	4603      	mov	r3, r0
 8004220:	4642      	mov	r2, r8
 8004222:	189b      	adds	r3, r3, r2
 8004224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004228:	464b      	mov	r3, r9
 800422a:	460a      	mov	r2, r1
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800423e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800424c:	4649      	mov	r1, r9
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	4641      	mov	r1, r8
 8004252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004256:	4641      	mov	r1, r8
 8004258:	008a      	lsls	r2, r1, #2
 800425a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800425e:	f7fc f877 	bl	8000350 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4611      	mov	r1, r2
 8004268:	4b38      	ldr	r3, [pc, #224]	@ (800434c <UART_SetConfig+0x4e4>)
 800426a:	fba3 2301 	umull	r2, r3, r3, r1
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2264      	movs	r2, #100	@ 0x64
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	1acb      	subs	r3, r1, r3
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	3332      	adds	r3, #50	@ 0x32
 800427c:	4a33      	ldr	r2, [pc, #204]	@ (800434c <UART_SetConfig+0x4e4>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004288:	441c      	add	r4, r3
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	673b      	str	r3, [r7, #112]	@ 0x70
 8004292:	677a      	str	r2, [r7, #116]	@ 0x74
 8004294:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	1891      	adds	r1, r2, r2
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	415b      	adcs	r3, r3
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a8:	4641      	mov	r1, r8
 80042aa:	1851      	adds	r1, r2, r1
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	4649      	mov	r1, r9
 80042b0:	414b      	adcs	r3, r1
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c0:	4659      	mov	r1, fp
 80042c2:	00cb      	lsls	r3, r1, #3
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ca:	4651      	mov	r1, sl
 80042cc:	00ca      	lsls	r2, r1, #3
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	4642      	mov	r2, r8
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042da:	464b      	mov	r3, r9
 80042dc:	460a      	mov	r2, r1
 80042de:	eb42 0303 	adc.w	r3, r2, r3
 80042e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042fc:	4649      	mov	r1, r9
 80042fe:	008b      	lsls	r3, r1, #2
 8004300:	4641      	mov	r1, r8
 8004302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004306:	4641      	mov	r1, r8
 8004308:	008a      	lsls	r2, r1, #2
 800430a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800430e:	f7fc f81f 	bl	8000350 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <UART_SetConfig+0x4e4>)
 8004318:	fba3 1302 	umull	r1, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	2164      	movs	r1, #100	@ 0x64
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	3332      	adds	r3, #50	@ 0x32
 800432a:	4a08      	ldr	r2, [pc, #32]	@ (800434c <UART_SetConfig+0x4e4>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4422      	add	r2, r4
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004346:	46bd      	mov	sp, r7
 8004348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434c:	51eb851f 	.word	0x51eb851f

08004350 <__NVIC_SetPriority>:
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	db0a      	blt.n	800437a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	490c      	ldr	r1, [pc, #48]	@ (800439c <__NVIC_SetPriority+0x4c>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	440b      	add	r3, r1
 8004374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004378:	e00a      	b.n	8004390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <__NVIC_SetPriority+0x50>)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3b04      	subs	r3, #4
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	440b      	add	r3, r1
 800438e:	761a      	strb	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000e100 	.word	0xe000e100
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043a8:	2100      	movs	r1, #0
 80043aa:	f06f 0004 	mvn.w	r0, #4
 80043ae:	f7ff ffcf 	bl	8004350 <__NVIC_SetPriority>
#endif
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043be:	f3ef 8305 	mrs	r3, IPSR
 80043c2:	603b      	str	r3, [r7, #0]
  return(result);
 80043c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043ca:	f06f 0305 	mvn.w	r3, #5
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e00c      	b.n	80043ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <osKernelInitialize+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <osKernelInitialize+0x44>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	e002      	b.n	80043ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	200047cc 	.word	0x200047cc

08004400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	603b      	str	r3, [r7, #0]
  return(result);
 800440c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004412:	f06f 0305 	mvn.w	r3, #5
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	e010      	b.n	800443c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <osKernelStart+0x48>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d109      	bne.n	8004436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004422:	f7ff ffbf 	bl	80043a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <osKernelStart+0x48>)
 8004428:	2202      	movs	r2, #2
 800442a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800442c:	f001 f87a 	bl	8005524 <vTaskStartScheduler>
      stat = osOK;
 8004430:	2300      	movs	r3, #0
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	e002      	b.n	800443c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800443a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800443c:	687b      	ldr	r3, [r7, #4]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200047cc 	.word	0x200047cc

0800444c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08e      	sub	sp, #56	@ 0x38
 8004450:	af04      	add	r7, sp, #16
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445c:	f3ef 8305 	mrs	r3, IPSR
 8004460:	617b      	str	r3, [r7, #20]
  return(result);
 8004462:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004464:	2b00      	cmp	r3, #0
 8004466:	d17e      	bne.n	8004566 <osThreadNew+0x11a>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d07b      	beq.n	8004566 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004472:	2318      	movs	r3, #24
 8004474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800447e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d045      	beq.n	8004512 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <osThreadNew+0x48>
        name = attr->name;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <osThreadNew+0x6e>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b38      	cmp	r3, #56	@ 0x38
 80044ac:	d805      	bhi.n	80044ba <osThreadNew+0x6e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <osThreadNew+0x72>
        return (NULL);
 80044ba:	2300      	movs	r3, #0
 80044bc:	e054      	b.n	8004568 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <osThreadNew+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b5b      	cmp	r3, #91	@ 0x5b
 80044dc:	d90a      	bls.n	80044f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <osThreadNew+0xa8>
        mem = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e010      	b.n	8004516 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10c      	bne.n	8004516 <osThreadNew+0xca>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <osThreadNew+0xca>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <osThreadNew+0xca>
          mem = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e001      	b.n	8004516 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d110      	bne.n	800453e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004524:	9202      	str	r2, [sp, #8]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fe1a 	bl	800516c <xTaskCreateStatic>
 8004538:	4603      	mov	r3, r0
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e013      	b.n	8004566 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	b29a      	uxth	r2, r3
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fe68 	bl	800522c <xTaskCreate>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <osThreadNew+0x11a>
            hTask = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004566:	693b      	ldr	r3, [r7, #16]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	@ 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004578:	f3ef 8305 	mrs	r3, IPSR
 800457c:	60bb      	str	r3, [r7, #8]
  return(result);
 800457e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <osDelay+0x1c>
    stat = osErrorISR;
 8004584:	f06f 0305 	mvn.w	r3, #5
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e007      	b.n	800459c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 ff8e 	bl	80054b8 <vTaskDelay>
    }
  }

  return (stat);
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a07      	ldr	r2, [pc, #28]	@ (80045d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80045b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a06      	ldr	r2, [pc, #24]	@ (80045d8 <vApplicationGetIdleTaskMemory+0x30>)
 80045be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	@ 0x80
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	200047d0 	.word	0x200047d0
 80045d8:	2000482c 	.word	0x2000482c

080045dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a07      	ldr	r2, [pc, #28]	@ (8004608 <vApplicationGetTimerTaskMemory+0x2c>)
 80045ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a06      	ldr	r2, [pc, #24]	@ (800460c <vApplicationGetTimerTaskMemory+0x30>)
 80045f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045fa:	601a      	str	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	20004a2c 	.word	0x20004a2c
 800460c:	20004a88 	.word	0x20004a88

08004610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f103 0208 	add.w	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f103 0208 	add.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f103 0208 	add.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c8:	d103      	bne.n	80046d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e00c      	b.n	80046ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3308      	adds	r3, #8
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e002      	b.n	80046e0 <vListInsert+0x2e>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d2f6      	bcs.n	80046da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6852      	ldr	r2, [r2, #4]
 8004744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d103      	bne.n	8004758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <xQueueGenericReset+0x2c>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60bb      	str	r3, [r7, #8]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047a4:	f002 f8a0 	bl	80068e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d4:	3b01      	subs	r3, #1
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	22ff      	movs	r2, #255	@ 0xff
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	22ff      	movs	r2, #255	@ 0xff
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d114      	bne.n	8004824 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01a      	beq.n	8004838 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3310      	adds	r3, #16
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f91a 	bl	8005a40 <xTaskRemoveFromEventList>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <xQueueGenericReset+0xd0>)
 8004814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	e009      	b.n	8004838 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3310      	adds	r3, #16
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fef1 	bl	8004610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3324      	adds	r3, #36	@ 0x24
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff feec 	bl	8004610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004838:	f002 f888 	bl	800694c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08e      	sub	sp, #56	@ 0x38
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <xQueueGenericCreateStatic+0x56>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <xQueueGenericCreateStatic+0x5a>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueGenericCreateStatic+0x5c>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	623b      	str	r3, [r7, #32]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <xQueueGenericCreateStatic+0x84>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <xQueueGenericCreateStatic+0x88>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <xQueueGenericCreateStatic+0x8a>
 80048d4:	2300      	movs	r3, #0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	61fb      	str	r3, [r7, #28]
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	e7fd      	b.n	80048ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048f2:	2350      	movs	r3, #80	@ 0x50
 80048f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b50      	cmp	r3, #80	@ 0x50
 80048fa:	d00b      	beq.n	8004914 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	61bb      	str	r3, [r7, #24]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004914:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004928:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f805 	bl	8004946 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	@ 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e002      	b.n	8004968 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004974:	2101      	movs	r1, #1
 8004976:	69b8      	ldr	r0, [r7, #24]
 8004978:	f7ff fefe 	bl	8004778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	@ 0x38
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800499a:	2300      	movs	r3, #0
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <xQueueGenericSend+0x34>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <xQueueGenericSend+0x42>
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <xQueueGenericSend+0x46>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <xQueueGenericSend+0x48>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <xQueueGenericSend+0x64>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSend+0x72>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <xQueueGenericSend+0x76>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueGenericSend+0x78>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericSend+0x94>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	623b      	str	r3, [r7, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a20:	f001 f9f6 	bl	8005e10 <xTaskGetSchedulerState>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <xQueueGenericSend+0xa4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <xQueueGenericSend+0xa8>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <xQueueGenericSend+0xaa>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <xQueueGenericSend+0xc6>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a52:	f001 ff49 	bl	80068e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <xQueueGenericSend+0xdc>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d129      	bne.n	8004abc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6e:	f000 fa0f 	bl	8004e90 <prvCopyDataToQueue>
 8004a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	3324      	adds	r3, #36	@ 0x24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 ffdd 	bl	8005a40 <xTaskRemoveFromEventList>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b8c <xQueueGenericSend+0x200>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	e00a      	b.n	8004ab4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <xQueueGenericSend+0x200>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ab4:	f001 ff4a 	bl	800694c <vPortExitCritical>
				return pdPASS;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e063      	b.n	8004b84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ac2:	f001 ff43 	bl	800694c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e05c      	b.n	8004b84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f83f 	bl	8005b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ade:	f001 ff35 	bl	800694c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae2:	f000 fd87 	bl	80055f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae6:	f001 feff 	bl	80068e8 <vPortEnterCritical>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004af6:	d103      	bne.n	8004b00 <xQueueGenericSend+0x174>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b0c:	d103      	bne.n	8004b16 <xQueueGenericSend+0x18a>
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b16:	f001 ff19 	bl	800694c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b1a:	1d3a      	adds	r2, r7, #4
 8004b1c:	f107 0314 	add.w	r3, r7, #20
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f82e 	bl	8005b84 <xTaskCheckForTimeOut>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d124      	bne.n	8004b78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b30:	f000 faa6 	bl	8005080 <prvIsQueueFull>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	3310      	adds	r3, #16
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 ff2a 	bl	800599c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b4a:	f000 fa31 	bl	8004fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b4e:	f000 fd5f 	bl	8005610 <xTaskResumeAll>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f af7c 	bne.w	8004a52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <xQueueGenericSend+0x200>)
 8004b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	e772      	b.n	8004a52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b6e:	f000 fa1f 	bl	8004fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b72:	f000 fd4d 	bl	8005610 <xTaskResumeAll>
 8004b76:	e76c      	b.n	8004a52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fa19 	bl	8004fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7e:	f000 fd47 	bl	8005610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3738      	adds	r7, #56	@ 0x38
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b090      	sub	sp, #64	@ 0x40
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSendFromISR+0x3e>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <xQueueGenericSendFromISR+0x42>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <xQueueGenericSendFromISR+0x44>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d103      	bne.n	8004bfe <xQueueGenericSendFromISR+0x6e>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <xQueueGenericSendFromISR+0x72>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericSendFromISR+0x74>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	623b      	str	r3, [r7, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c20:	f001 ff42 	bl	8006aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c24:	f3ef 8211 	mrs	r2, BASEPRI
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	61fa      	str	r2, [r7, #28]
 8004c3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <xQueueGenericSendFromISR+0xc2>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d12f      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c68:	f000 f912 	bl	8004e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c74:	d112      	bne.n	8004c9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	3324      	adds	r3, #36	@ 0x24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fedc 	bl	8005a40 <xTaskRemoveFromEventList>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e007      	b.n	8004cac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	b25a      	sxtb	r2, r3
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004cb0:	e001      	b.n	8004cb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3740      	adds	r7, #64	@ 0x40
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	@ 0x30
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <xQueueReceive+0x32>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	623b      	str	r3, [r7, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <xQueueReceive+0x40>
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <xQueueReceive+0x44>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <xQueueReceive+0x46>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <xQueueReceive+0x62>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61fb      	str	r3, [r7, #28]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2e:	f001 f86f 	bl	8005e10 <xTaskGetSchedulerState>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <xQueueReceive+0x72>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <xQueueReceive+0x76>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueReceive+0x78>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xQueueReceive+0x94>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	61bb      	str	r3, [r7, #24]
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d60:	f001 fdc2 	bl	80068e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01f      	beq.n	8004db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d74:	f000 f8f6 	bl	8004f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	3310      	adds	r3, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fe57 	bl	8005a40 <xTaskRemoveFromEventList>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d98:	4b3c      	ldr	r3, [pc, #240]	@ (8004e8c <xQueueReceive+0x1c0>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004da8:	f001 fdd0 	bl	800694c <vPortExitCritical>
				return pdPASS;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e069      	b.n	8004e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004db6:	f001 fdc9 	bl	800694c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e062      	b.n	8004e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc4:	f107 0310 	add.w	r3, r7, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fec5 	bl	8005b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dd2:	f001 fdbb 	bl	800694c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dd6:	f000 fc0d 	bl	80055f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dda:	f001 fd85 	bl	80068e8 <vPortEnterCritical>
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dea:	d103      	bne.n	8004df4 <xQueueReceive+0x128>
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e00:	d103      	bne.n	8004e0a <xQueueReceive+0x13e>
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e0a:	f001 fd9f 	bl	800694c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0e:	1d3a      	adds	r2, r7, #4
 8004e10:	f107 0310 	add.w	r3, r7, #16
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 feb4 	bl	8005b84 <xTaskCheckForTimeOut>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d123      	bne.n	8004e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e24:	f000 f916 	bl	8005054 <prvIsQueueEmpty>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	3324      	adds	r3, #36	@ 0x24
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4611      	mov	r1, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fdb0 	bl	800599c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3e:	f000 f8b7 	bl	8004fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e42:	f000 fbe5 	bl	8005610 <xTaskResumeAll>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d189      	bne.n	8004d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <xQueueReceive+0x1c0>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	e780      	b.n	8004d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e60:	f000 f8a6 	bl	8004fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e64:	f000 fbd4 	bl	8005610 <xTaskResumeAll>
 8004e68:	e77a      	b.n	8004d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6c:	f000 f8a0 	bl	8004fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e70:	f000 fbce 	bl	8005610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e76:	f000 f8ed 	bl	8005054 <prvIsQueueEmpty>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f43f af6f 	beq.w	8004d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3730      	adds	r7, #48	@ 0x30
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d14d      	bne.n	8004f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 ffc6 	bl	8005e4c <xTaskPriorityDisinherit>
 8004ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	e043      	b.n	8004f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d119      	bne.n	8004f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6858      	ldr	r0, [r3, #4]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	f00b fcdf 	bl	801089e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	441a      	add	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d32b      	bcc.n	8004f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	e026      	b.n	8004f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68d8      	ldr	r0, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	f00b fcc5 	bl	801089e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	425b      	negs	r3, r3
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d207      	bcs.n	8004f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	425b      	negs	r3, r3
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d105      	bne.n	8004f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	441a      	add	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d303      	bcc.n	8004f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68d9      	ldr	r1, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6838      	ldr	r0, [r7, #0]
 8004fa4:	f00b fc7b 	bl	801089e <memcpy>
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fb8:	f001 fc96 	bl	80068e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc4:	e011      	b.n	8004fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3324      	adds	r3, #36	@ 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fd34 	bl	8005a40 <xTaskRemoveFromEventList>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fde:	f000 fe35 	bl	8005c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dce9      	bgt.n	8004fc6 <prvUnlockQueue+0x16>
 8004ff2:	e000      	b.n	8004ff6 <prvUnlockQueue+0x46>
					break;
 8004ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ffe:	f001 fca5 	bl	800694c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005002:	f001 fc71 	bl	80068e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800500c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800500e:	e011      	b.n	8005034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3310      	adds	r3, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fd0f 	bl	8005a40 <xTaskRemoveFromEventList>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005028:	f000 fe10 	bl	8005c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	3b01      	subs	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dce9      	bgt.n	8005010 <prvUnlockQueue+0x60>
 800503c:	e000      	b.n	8005040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800503e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	22ff      	movs	r2, #255	@ 0xff
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005048:	f001 fc80 	bl	800694c <vPortExitCritical>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800505c:	f001 fc44 	bl	80068e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e001      	b.n	8005072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005072:	f001 fc6b 	bl	800694c <vPortExitCritical>

	return xReturn;
 8005076:	68fb      	ldr	r3, [r7, #12]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005088:	f001 fc2e 	bl	80068e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005094:	429a      	cmp	r2, r3
 8005096:	d102      	bne.n	800509e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e001      	b.n	80050a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050a2:	f001 fc53 	bl	800694c <vPortExitCritical>

	return xReturn;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e014      	b.n	80050ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005100 <vQueueAddToRegistry+0x50>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050cc:	490c      	ldr	r1, [pc, #48]	@ (8005100 <vQueueAddToRegistry+0x50>)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005100 <vQueueAddToRegistry+0x50>)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050e2:	e006      	b.n	80050f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d9e7      	bls.n	80050c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20004e88 	.word	0x20004e88

08005104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005114:	f001 fbe8 	bl	80068e8 <vPortEnterCritical>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800511e:	b25b      	sxtb	r3, r3
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005124:	d103      	bne.n	800512e <vQueueWaitForMessageRestricted+0x2a>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005134:	b25b      	sxtb	r3, r3
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800513a:	d103      	bne.n	8005144 <vQueueWaitForMessageRestricted+0x40>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005144:	f001 fc02 	bl	800694c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3324      	adds	r3, #36	@ 0x24
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fc45 	bl	80059e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800515e:	6978      	ldr	r0, [r7, #20]
 8005160:	f7ff ff26 	bl	8004fb0 <prvUnlockQueue>
	}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	@ 0x38
 8005170:	af04      	add	r7, sp, #16
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	623b      	str	r3, [r7, #32]
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	61fb      	str	r3, [r7, #28]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051b6:	235c      	movs	r3, #92	@ 0x5c
 80051b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80051be:	d00b      	beq.n	80051d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61bb      	str	r3, [r7, #24]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01e      	beq.n	800521e <xTaskCreateStatic+0xb2>
 80051e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01b      	beq.n	800521e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051f8:	2300      	movs	r3, #0
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f850 	bl	80052b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005218:	f000 f8de 	bl	80053d8 <prvAddNewTaskToReadyList>
 800521c:	e001      	b.n	8005222 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005222:	697b      	ldr	r3, [r7, #20]
	}
 8005224:	4618      	mov	r0, r3
 8005226:	3728      	adds	r7, #40	@ 0x28
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	@ 0x30
 8005230:	af04      	add	r7, sp, #16
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4618      	mov	r0, r3
 8005242:	f001 fc73 	bl	8006b2c <pvPortMalloc>
 8005246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800524e:	205c      	movs	r0, #92	@ 0x5c
 8005250:	f001 fc6c 	bl	8006b2c <pvPortMalloc>
 8005254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	631a      	str	r2, [r3, #48]	@ 0x30
 8005262:	e005      	b.n	8005270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005264:	6978      	ldr	r0, [r7, #20]
 8005266:	f001 fd2f 	bl	8006cc8 <vPortFree>
 800526a:	e001      	b.n	8005270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d017      	beq.n	80052a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	2300      	movs	r3, #0
 8005282:	9303      	str	r3, [sp, #12]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9302      	str	r3, [sp, #8]
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f80e 	bl	80052b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800529a:	69f8      	ldr	r0, [r7, #28]
 800529c:	f000 f89c 	bl	80053d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	e002      	b.n	80052ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ac:	69bb      	ldr	r3, [r7, #24]
	}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	461a      	mov	r2, r3
 80052ce:	21a5      	movs	r1, #165	@ 0xa5
 80052d0:	f00b fa1c 	bl	801070c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052de:	3b01      	subs	r3, #1
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f023 0307 	bic.w	r3, r3, #7
 80052ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	617b      	str	r3, [r7, #20]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01f      	beq.n	8005356 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	e012      	b.n	8005342 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	7819      	ldrb	r1, [r3, #0]
 8005324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	3334      	adds	r3, #52	@ 0x34
 800532c:	460a      	mov	r2, r1
 800532e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3301      	adds	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d9e9      	bls.n	800531c <prvInitialiseNewTask+0x66>
 8005348:	e000      	b.n	800534c <prvInitialiseNewTask+0x96>
			{
				break;
 800534a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005354:	e003      	b.n	800535e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	2b37      	cmp	r3, #55	@ 0x37
 8005362:	d901      	bls.n	8005368 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005364:	2337      	movs	r3, #55	@ 0x37
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800536c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005372:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	2200      	movs	r2, #0
 8005378:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff f966 	bl	8004650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005386:	3318      	adds	r3, #24
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff f961 	bl	8004650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	2200      	movs	r2, #0
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	f001 f966 	bl	8006688 <pxPortInitialiseStack>
 80053bc:	4602      	mov	r2, r0
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ce:	bf00      	nop
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053e0:	f001 fa82 	bl	80068e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053e4:	4b2d      	ldr	r3, [pc, #180]	@ (800549c <prvAddNewTaskToReadyList+0xc4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <prvAddNewTaskToReadyList+0xc4>)
 80053ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ee:	4b2c      	ldr	r3, [pc, #176]	@ (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053f6:	4a2a      	ldr	r2, [pc, #168]	@ (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053fc:	4b27      	ldr	r3, [pc, #156]	@ (800549c <prvAddNewTaskToReadyList+0xc4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005404:	f000 fc46 	bl	8005c94 <prvInitialiseTaskLists>
 8005408:	e00d      	b.n	8005426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800540a:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <prvAddNewTaskToReadyList+0xcc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005412:	4b23      	ldr	r3, [pc, #140]	@ (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d802      	bhi.n	8005426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005420:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005426:	4b20      	ldr	r3, [pc, #128]	@ (80054a8 <prvAddNewTaskToReadyList+0xd0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a1e      	ldr	r2, [pc, #120]	@ (80054a8 <prvAddNewTaskToReadyList+0xd0>)
 800542e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <prvAddNewTaskToReadyList+0xd0>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ac <prvAddNewTaskToReadyList+0xd4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d903      	bls.n	800544c <prvAddNewTaskToReadyList+0x74>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <prvAddNewTaskToReadyList+0xd4>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <prvAddNewTaskToReadyList+0xd8>)
 800545a:	441a      	add	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7ff f901 	bl	800466a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005468:	f001 fa70 	bl	800694c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800546c:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <prvAddNewTaskToReadyList+0xcc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <prvAddNewTaskToReadyList+0xc8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	429a      	cmp	r2, r3
 8005480:	d207      	bcs.n	8005492 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <prvAddNewTaskToReadyList+0xdc>)
 8005484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2000539c 	.word	0x2000539c
 80054a0:	20004ec8 	.word	0x20004ec8
 80054a4:	200053a8 	.word	0x200053a8
 80054a8:	200053b8 	.word	0x200053b8
 80054ac:	200053a4 	.word	0x200053a4
 80054b0:	20004ecc 	.word	0x20004ecc
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d018      	beq.n	80054fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ca:	4b14      	ldr	r3, [pc, #80]	@ (800551c <vTaskDelay+0x64>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <vTaskDelay+0x32>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054ea:	f000 f883 	bl	80055f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ee:	2100      	movs	r1, #0
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fd1b 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054f6:	f000 f88b 	bl	8005610 <xTaskResumeAll>
 80054fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005502:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <vTaskDelay+0x68>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200053c4 	.word	0x200053c4
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005532:	463a      	mov	r2, r7
 8005534:	1d39      	adds	r1, r7, #4
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f834 	bl	80045a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	9202      	str	r2, [sp, #8]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	460a      	mov	r2, r1
 8005552:	4922      	ldr	r1, [pc, #136]	@ (80055dc <vTaskStartScheduler+0xb8>)
 8005554:	4822      	ldr	r0, [pc, #136]	@ (80055e0 <vTaskStartScheduler+0xbc>)
 8005556:	f7ff fe09 	bl	800516c <xTaskCreateStatic>
 800555a:	4603      	mov	r3, r0
 800555c:	4a21      	ldr	r2, [pc, #132]	@ (80055e4 <vTaskStartScheduler+0xc0>)
 800555e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005560:	4b20      	ldr	r3, [pc, #128]	@ (80055e4 <vTaskStartScheduler+0xc0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e001      	b.n	8005572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d102      	bne.n	800557e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005578:	f000 fd2c 	bl	8005fd4 <xTimerCreateTimerTask>
 800557c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d116      	bne.n	80055b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	613b      	str	r3, [r7, #16]
}
 8005596:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <vTaskStartScheduler+0xc4>)
 800559a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800559e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055a0:	4b12      	ldr	r3, [pc, #72]	@ (80055ec <vTaskStartScheduler+0xc8>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055a6:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <vTaskStartScheduler+0xcc>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ac:	f001 f8f8 	bl	80067a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055b0:	e00f      	b.n	80055d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b8:	d10b      	bne.n	80055d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	60fb      	str	r3, [r7, #12]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <vTaskStartScheduler+0xaa>
}
 80055d2:	bf00      	nop
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	080116e8 	.word	0x080116e8
 80055e0:	08005c65 	.word	0x08005c65
 80055e4:	200053c0 	.word	0x200053c0
 80055e8:	200053bc 	.word	0x200053bc
 80055ec:	200053a8 	.word	0x200053a8
 80055f0:	200053a0 	.word	0x200053a0

080055f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055f8:	4b04      	ldr	r3, [pc, #16]	@ (800560c <vTaskSuspendAll+0x18>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a03      	ldr	r2, [pc, #12]	@ (800560c <vTaskSuspendAll+0x18>)
 8005600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005602:	bf00      	nop
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	200053c4 	.word	0x200053c4

08005610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800561e:	4b42      	ldr	r3, [pc, #264]	@ (8005728 <xTaskResumeAll+0x118>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <xTaskResumeAll+0x2e>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800563e:	f001 f953 	bl	80068e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005642:	4b39      	ldr	r3, [pc, #228]	@ (8005728 <xTaskResumeAll+0x118>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3b01      	subs	r3, #1
 8005648:	4a37      	ldr	r2, [pc, #220]	@ (8005728 <xTaskResumeAll+0x118>)
 800564a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564c:	4b36      	ldr	r3, [pc, #216]	@ (8005728 <xTaskResumeAll+0x118>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d162      	bne.n	800571a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005654:	4b35      	ldr	r3, [pc, #212]	@ (800572c <xTaskResumeAll+0x11c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d05e      	beq.n	800571a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800565c:	e02f      	b.n	80056be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565e:	4b34      	ldr	r3, [pc, #208]	@ (8005730 <xTaskResumeAll+0x120>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3318      	adds	r3, #24
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f85a 	bl	8004724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f855 	bl	8004724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	4b2d      	ldr	r3, [pc, #180]	@ (8005734 <xTaskResumeAll+0x124>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <xTaskResumeAll+0x7e>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	4a2a      	ldr	r2, [pc, #168]	@ (8005734 <xTaskResumeAll+0x124>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a27      	ldr	r2, [pc, #156]	@ (8005738 <xTaskResumeAll+0x128>)
 800569c:	441a      	add	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7fe ffe0 	bl	800466a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4b23      	ldr	r3, [pc, #140]	@ (800573c <xTaskResumeAll+0x12c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80056b8:	4b21      	ldr	r3, [pc, #132]	@ (8005740 <xTaskResumeAll+0x130>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056be:	4b1c      	ldr	r3, [pc, #112]	@ (8005730 <xTaskResumeAll+0x120>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1cb      	bne.n	800565e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056cc:	f000 fb80 	bl	8005dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005744 <xTaskResumeAll+0x134>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056dc:	f000 f846 	bl	800576c <xTaskIncrementTick>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80056e6:	4b16      	ldr	r3, [pc, #88]	@ (8005740 <xTaskResumeAll+0x130>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f1      	bne.n	80056dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80056f8:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <xTaskResumeAll+0x134>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056fe:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <xTaskResumeAll+0x130>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800570a:	4b0f      	ldr	r3, [pc, #60]	@ (8005748 <xTaskResumeAll+0x138>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571a:	f001 f917 	bl	800694c <vPortExitCritical>

	return xAlreadyYielded;
 800571e:	68bb      	ldr	r3, [r7, #8]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200053c4 	.word	0x200053c4
 800572c:	2000539c 	.word	0x2000539c
 8005730:	2000535c 	.word	0x2000535c
 8005734:	200053a4 	.word	0x200053a4
 8005738:	20004ecc 	.word	0x20004ecc
 800573c:	20004ec8 	.word	0x20004ec8
 8005740:	200053b0 	.word	0x200053b0
 8005744:	200053ac 	.word	0x200053ac
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005752:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <xTaskGetTickCount+0x1c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005758:	687b      	ldr	r3, [r7, #4]
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	200053a0 	.word	0x200053a0

0800576c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005776:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <xTaskIncrementTick+0x148>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 8090 	bne.w	80058a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005780:	4b4d      	ldr	r3, [pc, #308]	@ (80058b8 <xTaskIncrementTick+0x14c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005788:	4a4b      	ldr	r2, [pc, #300]	@ (80058b8 <xTaskIncrementTick+0x14c>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d121      	bne.n	80057d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005794:	4b49      	ldr	r3, [pc, #292]	@ (80058bc <xTaskIncrementTick+0x150>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <xTaskIncrementTick+0x46>
 80057b6:	4b41      	ldr	r3, [pc, #260]	@ (80058bc <xTaskIncrementTick+0x150>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	4b40      	ldr	r3, [pc, #256]	@ (80058c0 <xTaskIncrementTick+0x154>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3e      	ldr	r2, [pc, #248]	@ (80058bc <xTaskIncrementTick+0x150>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	@ (80058c0 <xTaskIncrementTick+0x154>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b3e      	ldr	r3, [pc, #248]	@ (80058c4 <xTaskIncrementTick+0x158>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a3c      	ldr	r2, [pc, #240]	@ (80058c4 <xTaskIncrementTick+0x158>)
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	f000 fafc 	bl	8005dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057d8:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <xTaskIncrementTick+0x15c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d349      	bcc.n	8005876 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e2:	4b36      	ldr	r3, [pc, #216]	@ (80058bc <xTaskIncrementTick+0x150>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <xTaskIncrementTick+0x15c>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057f2:	601a      	str	r2, [r3, #0]
					break;
 80057f4:	e03f      	b.n	8005876 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f6:	4b31      	ldr	r3, [pc, #196]	@ (80058bc <xTaskIncrementTick+0x150>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d203      	bcs.n	8005816 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800580e:	4a2e      	ldr	r2, [pc, #184]	@ (80058c8 <xTaskIncrementTick+0x15c>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005814:	e02f      	b.n	8005876 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe ff82 	bl	8004724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3318      	adds	r3, #24
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe ff79 	bl	8004724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005836:	4b25      	ldr	r3, [pc, #148]	@ (80058cc <xTaskIncrementTick+0x160>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d903      	bls.n	8005846 <xTaskIncrementTick+0xda>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	4a22      	ldr	r2, [pc, #136]	@ (80058cc <xTaskIncrementTick+0x160>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a1f      	ldr	r2, [pc, #124]	@ (80058d0 <xTaskIncrementTick+0x164>)
 8005854:	441a      	add	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe ff04 	bl	800466a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005866:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <xTaskIncrementTick+0x168>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d3b8      	bcc.n	80057e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005874:	e7b5      	b.n	80057e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005876:	4b17      	ldr	r3, [pc, #92]	@ (80058d4 <xTaskIncrementTick+0x168>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587c:	4914      	ldr	r1, [pc, #80]	@ (80058d0 <xTaskIncrementTick+0x164>)
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d901      	bls.n	8005892 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005892:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <xTaskIncrementTick+0x16c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e004      	b.n	80058aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058a0:	4b0e      	ldr	r3, [pc, #56]	@ (80058dc <xTaskIncrementTick+0x170>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	4a0d      	ldr	r2, [pc, #52]	@ (80058dc <xTaskIncrementTick+0x170>)
 80058a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200053c4 	.word	0x200053c4
 80058b8:	200053a0 	.word	0x200053a0
 80058bc:	20005354 	.word	0x20005354
 80058c0:	20005358 	.word	0x20005358
 80058c4:	200053b4 	.word	0x200053b4
 80058c8:	200053bc 	.word	0x200053bc
 80058cc:	200053a4 	.word	0x200053a4
 80058d0:	20004ecc 	.word	0x20004ecc
 80058d4:	20004ec8 	.word	0x20004ec8
 80058d8:	200053b0 	.word	0x200053b0
 80058dc:	200053ac 	.word	0x200053ac

080058e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058e6:	4b28      	ldr	r3, [pc, #160]	@ (8005988 <vTaskSwitchContext+0xa8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ee:	4b27      	ldr	r3, [pc, #156]	@ (800598c <vTaskSwitchContext+0xac>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058f4:	e042      	b.n	800597c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80058f6:	4b25      	ldr	r3, [pc, #148]	@ (800598c <vTaskSwitchContext+0xac>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fc:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <vTaskSwitchContext+0xb0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e011      	b.n	8005928 <vTaskSwitchContext+0x48>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <vTaskSwitchContext+0x42>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	607b      	str	r3, [r7, #4]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <vTaskSwitchContext+0x3e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	491a      	ldr	r1, [pc, #104]	@ (8005994 <vTaskSwitchContext+0xb4>)
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0e3      	beq.n	8005904 <vTaskSwitchContext+0x24>
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <vTaskSwitchContext+0xb4>)
 8005948:	4413      	add	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	3308      	adds	r3, #8
 800595e:	429a      	cmp	r2, r3
 8005960:	d104      	bne.n	800596c <vTaskSwitchContext+0x8c>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a09      	ldr	r2, [pc, #36]	@ (8005998 <vTaskSwitchContext+0xb8>)
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4a06      	ldr	r2, [pc, #24]	@ (8005990 <vTaskSwitchContext+0xb0>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6013      	str	r3, [r2, #0]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	200053c4 	.word	0x200053c4
 800598c:	200053b0 	.word	0x200053b0
 8005990:	200053a4 	.word	0x200053a4
 8005994:	20004ecc 	.word	0x20004ecc
 8005998:	20004ec8 	.word	0x20004ec8

0800599c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c4:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <vTaskPlaceOnEventList+0x48>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3318      	adds	r3, #24
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fe70 	bl	80046b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d2:	2101      	movs	r1, #1
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f000 faa9 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20004ec8 	.word	0x20004ec8

080059e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	617b      	str	r3, [r7, #20]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <vTaskPlaceOnEventListRestricted+0x54>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3318      	adds	r3, #24
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fe fe25 	bl	800466a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f000 fa7c 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
	}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20004ec8 	.word	0x20004ec8

08005a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3318      	adds	r3, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fe56 	bl	8004724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a78:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <xTaskRemoveFromEventList+0xb0>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11d      	bne.n	8005abc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fe4d 	bl	8004724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8e:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <xTaskRemoveFromEventList+0xb4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d903      	bls.n	8005a9e <xTaskRemoveFromEventList+0x5e>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <xTaskRemoveFromEventList+0xb4>)
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4a13      	ldr	r2, [pc, #76]	@ (8005af8 <xTaskRemoveFromEventList+0xb8>)
 8005aac:	441a      	add	r2, r3
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe fdd8 	bl	800466a <vListInsertEnd>
 8005aba:	e005      	b.n	8005ac8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3318      	adds	r3, #24
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	480e      	ldr	r0, [pc, #56]	@ (8005afc <xTaskRemoveFromEventList+0xbc>)
 8005ac4:	f7fe fdd1 	bl	800466a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005acc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <xTaskRemoveFromEventList+0xc0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d905      	bls.n	8005ae2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ada:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <xTaskRemoveFromEventList+0xc4>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e001      	b.n	8005ae6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ae6:	697b      	ldr	r3, [r7, #20]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200053c4 	.word	0x200053c4
 8005af4:	200053a4 	.word	0x200053a4
 8005af8:	20004ecc 	.word	0x20004ecc
 8005afc:	2000535c 	.word	0x2000535c
 8005b00:	20004ec8 	.word	0x20004ec8
 8005b04:	200053b0 	.word	0x200053b0

08005b08 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	60fb      	str	r3, [r7, #12]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005b2e:	f000 fedb 	bl	80068e8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <vTaskSetTimeOutState+0x48>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <vTaskSetTimeOutState+0x4c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005b42:	f000 ff03 	bl	800694c <vPortExitCritical>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200053b4 	.word	0x200053b4
 8005b54:	200053a0 	.word	0x200053a0

08005b58 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <vTaskInternalSetTimeOutState+0x24>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <vTaskInternalSetTimeOutState+0x28>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	200053b4 	.word	0x200053b4
 8005b80:	200053a0 	.word	0x200053a0

08005b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	613b      	str	r3, [r7, #16]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005bca:	f000 fe8d 	bl	80068e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bce:	4b1d      	ldr	r3, [pc, #116]	@ (8005c44 <xTaskCheckForTimeOut+0xc0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005be6:	d102      	bne.n	8005bee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e023      	b.n	8005c36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <xTaskCheckForTimeOut+0xc4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d007      	beq.n	8005c0a <xTaskCheckForTimeOut+0x86>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e015      	b.n	8005c36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d20b      	bcs.n	8005c2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad2      	subs	r2, r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff99 	bl	8005b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e004      	b.n	8005c36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f000 fe89 	bl	800694c <vPortExitCritical>

	return xReturn;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200053a0 	.word	0x200053a0
 8005c48:	200053b4 	.word	0x200053b4

08005c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c50:	4b03      	ldr	r3, [pc, #12]	@ (8005c60 <vTaskMissedYield+0x14>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
}
 8005c56:	bf00      	nop
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	200053b0 	.word	0x200053b0

08005c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c6c:	f000 f852 	bl	8005d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <prvIdleTask+0x28>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d9f9      	bls.n	8005c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c78:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <prvIdleTask+0x2c>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c88:	e7f0      	b.n	8005c6c <prvIdleTask+0x8>
 8005c8a:	bf00      	nop
 8005c8c:	20004ecc 	.word	0x20004ecc
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e00c      	b.n	8005cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a12      	ldr	r2, [pc, #72]	@ (8005cf4 <prvInitialiseTaskLists+0x60>)
 8005cac:	4413      	add	r3, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fcae 	bl	8004610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b37      	cmp	r3, #55	@ 0x37
 8005cbe:	d9ef      	bls.n	8005ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cc0:	480d      	ldr	r0, [pc, #52]	@ (8005cf8 <prvInitialiseTaskLists+0x64>)
 8005cc2:	f7fe fca5 	bl	8004610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cc6:	480d      	ldr	r0, [pc, #52]	@ (8005cfc <prvInitialiseTaskLists+0x68>)
 8005cc8:	f7fe fca2 	bl	8004610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ccc:	480c      	ldr	r0, [pc, #48]	@ (8005d00 <prvInitialiseTaskLists+0x6c>)
 8005cce:	f7fe fc9f 	bl	8004610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cd2:	480c      	ldr	r0, [pc, #48]	@ (8005d04 <prvInitialiseTaskLists+0x70>)
 8005cd4:	f7fe fc9c 	bl	8004610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cd8:	480b      	ldr	r0, [pc, #44]	@ (8005d08 <prvInitialiseTaskLists+0x74>)
 8005cda:	f7fe fc99 	bl	8004610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cde:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <prvInitialiseTaskLists+0x78>)
 8005ce0:	4a05      	ldr	r2, [pc, #20]	@ (8005cf8 <prvInitialiseTaskLists+0x64>)
 8005ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <prvInitialiseTaskLists+0x7c>)
 8005ce6:	4a05      	ldr	r2, [pc, #20]	@ (8005cfc <prvInitialiseTaskLists+0x68>)
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20004ecc 	.word	0x20004ecc
 8005cf8:	2000532c 	.word	0x2000532c
 8005cfc:	20005340 	.word	0x20005340
 8005d00:	2000535c 	.word	0x2000535c
 8005d04:	20005370 	.word	0x20005370
 8005d08:	20005388 	.word	0x20005388
 8005d0c:	20005354 	.word	0x20005354
 8005d10:	20005358 	.word	0x20005358

08005d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d1a:	e019      	b.n	8005d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d1c:	f000 fde4 	bl	80068e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d20:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <prvCheckTasksWaitingTermination+0x50>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fcf9 	bl	8004724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <prvCheckTasksWaitingTermination+0x54>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	4a0b      	ldr	r2, [pc, #44]	@ (8005d68 <prvCheckTasksWaitingTermination+0x54>)
 8005d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d46:	f000 fe01 	bl	800694c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f810 	bl	8005d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d50:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <prvCheckTasksWaitingTermination+0x58>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e1      	bne.n	8005d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20005370 	.word	0x20005370
 8005d68:	2000539c 	.word	0x2000539c
 8005d6c:	20005384 	.word	0x20005384

08005d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 ff9e 	bl	8006cc8 <vPortFree>
				vPortFree( pxTCB );
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 ff9b 	bl	8006cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d92:	e019      	b.n	8005dc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d103      	bne.n	8005da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 ff92 	bl	8006cc8 <vPortFree>
	}
 8005da4:	e010      	b.n	8005dc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d00b      	beq.n	8005dc8 <prvDeleteTCB+0x58>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <prvDeleteTCB+0x54>
	}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <prvResetNextTaskUnblockTime+0x38>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <prvResetNextTaskUnblockTime+0x3c>)
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de8:	e008      	b.n	8005dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <prvResetNextTaskUnblockTime+0x38>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <prvResetNextTaskUnblockTime+0x3c>)
 8005dfa:	6013      	str	r3, [r2, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	20005354 	.word	0x20005354
 8005e0c:	200053bc 	.word	0x200053bc

08005e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e16:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <xTaskGetSchedulerState+0x34>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	e008      	b.n	8005e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e24:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <xTaskGetSchedulerState+0x38>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	e001      	b.n	8005e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e36:	687b      	ldr	r3, [r7, #4]
	}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	200053a8 	.word	0x200053a8
 8005e48:	200053c4 	.word	0x200053c4

08005e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d058      	beq.n	8005f14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e62:	4b2f      	ldr	r3, [pc, #188]	@ (8005f20 <xTaskPriorityDisinherit+0xd4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d00b      	beq.n	8005e84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	60bb      	str	r3, [r7, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d02c      	beq.n	8005f14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d128      	bne.n	8005f14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fc2c 	bl	8004724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <xTaskPriorityDisinherit+0xd8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d903      	bls.n	8005ef4 <xTaskPriorityDisinherit+0xa8>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <xTaskPriorityDisinherit+0xd8>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a09      	ldr	r2, [pc, #36]	@ (8005f28 <xTaskPriorityDisinherit+0xdc>)
 8005f02:	441a      	add	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fe fbad 	bl	800466a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f14:	697b      	ldr	r3, [r7, #20]
	}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20004ec8 	.word	0x20004ec8
 8005f24:	200053a4 	.word	0x200053a4
 8005f28:	20004ecc 	.word	0x20004ecc

08005f2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f36:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <prvAddCurrentTaskToDelayedList+0x90>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f3c:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fbee 	bl	8004724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f4e:	d10a      	bne.n	8005f66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4819      	ldr	r0, [pc, #100]	@ (8005fc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f60:	f7fe fb83 	bl	800466a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f64:	e026      	b.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d209      	bcs.n	8005f92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7e:	4b12      	ldr	r3, [pc, #72]	@ (8005fc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fe fb91 	bl	80046b2 <vListInsert>
}
 8005f90:	e010      	b.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f92:	4b0e      	ldr	r3, [pc, #56]	@ (8005fcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe fb87 	bl	80046b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d202      	bcs.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fae:	4a08      	ldr	r2, [pc, #32]	@ (8005fd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	200053a0 	.word	0x200053a0
 8005fc0:	20004ec8 	.word	0x20004ec8
 8005fc4:	20005388 	.word	0x20005388
 8005fc8:	20005358 	.word	0x20005358
 8005fcc:	20005354 	.word	0x20005354
 8005fd0:	200053bc 	.word	0x200053bc

08005fd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	@ 0x28
 8005fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fde:	f000 fb13 	bl	8006608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <xTimerCreateTimerTask+0x84>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d021      	beq.n	800602e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ff2:	1d3a      	adds	r2, r7, #4
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe faed 	bl	80045dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	9202      	str	r2, [sp, #8]
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	2302      	movs	r3, #2
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	460a      	mov	r2, r1
 8006014:	4911      	ldr	r1, [pc, #68]	@ (800605c <xTimerCreateTimerTask+0x88>)
 8006016:	4812      	ldr	r0, [pc, #72]	@ (8006060 <xTimerCreateTimerTask+0x8c>)
 8006018:	f7ff f8a8 	bl	800516c <xTaskCreateStatic>
 800601c:	4603      	mov	r3, r0
 800601e:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <xTimerCreateTimerTask+0x90>)
 8006020:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006022:	4b10      	ldr	r3, [pc, #64]	@ (8006064 <xTimerCreateTimerTask+0x90>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800604c:	697b      	ldr	r3, [r7, #20]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200053f8 	.word	0x200053f8
 800605c:	080116f0 	.word	0x080116f0
 8006060:	080061a1 	.word	0x080061a1
 8006064:	200053fc 	.word	0x200053fc

08006068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	@ 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006076:	2300      	movs	r3, #0
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xTimerGenericCommand+0x30>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	623b      	str	r3, [r7, #32]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <xTimerGenericCommand+0x98>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02a      	beq.n	80060f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	dc18      	bgt.n	80060e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060b2:	f7ff fead 	bl	8005e10 <xTaskGetSchedulerState>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d109      	bne.n	80060d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060bc:	4b10      	ldr	r3, [pc, #64]	@ (8006100 <xTimerGenericCommand+0x98>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	f107 0110 	add.w	r1, r7, #16
 80060c4:	2300      	movs	r3, #0
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	f7fe fc60 	bl	800498c <xQueueGenericSend>
 80060cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80060ce:	e012      	b.n	80060f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <xTimerGenericCommand+0x98>)
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	f107 0110 	add.w	r1, r7, #16
 80060d8:	2300      	movs	r3, #0
 80060da:	2200      	movs	r2, #0
 80060dc:	f7fe fc56 	bl	800498c <xQueueGenericSend>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80060e2:	e008      	b.n	80060f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <xTimerGenericCommand+0x98>)
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	f107 0110 	add.w	r1, r7, #16
 80060ec:	2300      	movs	r3, #0
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	f7fe fd4e 	bl	8004b90 <xQueueGenericSendFromISR>
 80060f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3728      	adds	r7, #40	@ 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	200053f8 	.word	0x200053f8

08006104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af02      	add	r7, sp, #8
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610e:	4b23      	ldr	r3, [pc, #140]	@ (800619c <prvProcessExpiredTimer+0x98>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fb01 	bl	8004724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d023      	beq.n	8006178 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	18d1      	adds	r1, r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	6978      	ldr	r0, [r7, #20]
 800613e:	f000 f8d5 	bl	80062ec <prvInsertTimerInActiveList>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006148:	2300      	movs	r3, #0
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	2300      	movs	r3, #0
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	2100      	movs	r1, #0
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff88 	bl	8006068 <xTimerGenericCommand>
 8006158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d114      	bne.n	800618a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	6978      	ldr	r0, [r7, #20]
 8006190:	4798      	blx	r3
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200053f0 	.word	0x200053f0

080061a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f859 	bl	8006264 <prvGetNextExpireTime>
 80061b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f805 	bl	80061c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061be:	f000 f8d7 	bl	8006370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c2:	bf00      	nop
 80061c4:	e7f0      	b.n	80061a8 <prvTimerTask+0x8>
	...

080061c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061d2:	f7ff fa0f 	bl	80055f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f866 	bl	80062ac <prvSampleTimeNow>
 80061e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d130      	bne.n	800624a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <prvProcessTimerOrBlockTask+0x3c>
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d806      	bhi.n	8006204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061f6:	f7ff fa0b 	bl	8005610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff81 	bl	8006104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006202:	e024      	b.n	800624e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <prvProcessTimerOrBlockTask+0x90>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <prvProcessTimerOrBlockTask+0x50>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <prvProcessTimerOrBlockTask+0x52>
 8006218:	2300      	movs	r3, #0
 800621a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800621c:	4b0f      	ldr	r3, [pc, #60]	@ (800625c <prvProcessTimerOrBlockTask+0x94>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	f7fe ff6b 	bl	8005104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800622e:	f7ff f9ef 	bl	8005610 <xTaskResumeAll>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006238:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <prvProcessTimerOrBlockTask+0x98>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
}
 8006248:	e001      	b.n	800624e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800624a:	f7ff f9e1 	bl	8005610 <xTaskResumeAll>
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	200053f4 	.word	0x200053f4
 800625c:	200053f8 	.word	0x200053f8
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800626c:	4b0e      	ldr	r3, [pc, #56]	@ (80062a8 <prvGetNextExpireTime+0x44>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <prvGetNextExpireTime+0x16>
 8006276:	2201      	movs	r2, #1
 8006278:	e000      	b.n	800627c <prvGetNextExpireTime+0x18>
 800627a:	2200      	movs	r2, #0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006288:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <prvGetNextExpireTime+0x44>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e001      	b.n	8006298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006298:	68fb      	ldr	r3, [r7, #12]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	200053f0 	.word	0x200053f0

080062ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062b4:	f7ff fa4a 	bl	800574c <xTaskGetTickCount>
 80062b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062ba:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <prvSampleTimeNow+0x3c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d205      	bcs.n	80062d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062c4:	f000 f93a 	bl	800653c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062d6:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <prvSampleTimeNow+0x3c>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20005400 	.word	0x20005400

080062ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d812      	bhi.n	8006338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e01b      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006326:	4b10      	ldr	r3, [pc, #64]	@ (8006368 <prvInsertTimerInActiveList+0x7c>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fe f9be 	bl	80046b2 <vListInsert>
 8006336:	e012      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d206      	bcs.n	800634e <prvInsertTimerInActiveList+0x62>
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e007      	b.n	800635e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800634e:	4b07      	ldr	r3, [pc, #28]	@ (800636c <prvInsertTimerInActiveList+0x80>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fe f9aa 	bl	80046b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800635e:	697b      	ldr	r3, [r7, #20]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	200053f4 	.word	0x200053f4
 800636c:	200053f0 	.word	0x200053f0

08006370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	@ 0x38
 8006374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006376:	e0ce      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da19      	bge.n	80063b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	3304      	adds	r3, #4
 8006382:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	61fb      	str	r3, [r7, #28]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a8:	6850      	ldr	r0, [r2, #4]
 80063aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ac:	6892      	ldr	r2, [r2, #8]
 80063ae:	4611      	mov	r1, r2
 80063b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f2c0 80ae 	blt.w	8006516 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	3304      	adds	r3, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe f9aa 	bl	8004724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d0:	463b      	mov	r3, r7
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ff6a 	bl	80062ac <prvSampleTimeNow>
 80063d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b09      	cmp	r3, #9
 80063de:	f200 8097 	bhi.w	8006510 <prvProcessReceivedCommands+0x1a0>
 80063e2:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <prvProcessReceivedCommands+0x78>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006411 	.word	0x08006411
 80063f4:	08006487 	.word	0x08006487
 80063f8:	0800649b 	.word	0x0800649b
 80063fc:	080064e7 	.word	0x080064e7
 8006400:	08006411 	.word	0x08006411
 8006404:	08006411 	.word	0x08006411
 8006408:	08006487 	.word	0x08006487
 800640c:	0800649b 	.word	0x0800649b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	18d1      	adds	r1, r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006430:	f7ff ff5c 	bl	80062ec <prvInsertTimerInActiveList>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06c      	beq.n	8006514 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d061      	beq.n	8006514 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	441a      	add	r2, r3
 8006458:	2300      	movs	r3, #0
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	2100      	movs	r1, #0
 8006460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006462:	f7ff fe01 	bl	8006068 <xTimerGenericCommand>
 8006466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d152      	bne.n	8006514 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	61bb      	str	r3, [r7, #24]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006498:	e03d      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	617b      	str	r3, [r7, #20]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	18d1      	adds	r1, r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e0:	f7ff ff04 	bl	80062ec <prvInsertTimerInActiveList>
					break;
 80064e4:	e017      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d103      	bne.n	80064fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80064f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f6:	f000 fbe7 	bl	8006cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064fa:	e00c      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800650e:	e002      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006510:	bf00      	nop
 8006512:	e000      	b.n	8006516 <prvProcessReceivedCommands+0x1a6>
					break;
 8006514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006516:	4b08      	ldr	r3, [pc, #32]	@ (8006538 <prvProcessReceivedCommands+0x1c8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	1d39      	adds	r1, r7, #4
 800651c:	2200      	movs	r2, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fbd4 	bl	8004ccc <xQueueReceive>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	f47f af26 	bne.w	8006378 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	3730      	adds	r7, #48	@ 0x30
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200053f8 	.word	0x200053f8

0800653c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006542:	e049      	b.n	80065d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006544:	4b2e      	ldr	r3, [pc, #184]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b2c      	ldr	r3, [pc, #176]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe f8e1 	bl	8004724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02f      	beq.n	80065d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d90e      	bls.n	80065a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b1a      	ldr	r3, [pc, #104]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe f886 	bl	80046b2 <vListInsert>
 80065a6:	e017      	b.n	80065d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fd58 	bl	8006068 <xTimerGenericCommand>
 80065b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	603b      	str	r3, [r7, #0]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d8:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1b0      	bne.n	8006544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065e2:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e8:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <prvSwitchTimerLists+0xc8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a04      	ldr	r2, [pc, #16]	@ (8006600 <prvSwitchTimerLists+0xc4>)
 80065ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065f0:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <prvSwitchTimerLists+0xc8>)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6013      	str	r3, [r2, #0]
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200053f0 	.word	0x200053f0
 8006604:	200053f4 	.word	0x200053f4

08006608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800660e:	f000 f96b 	bl	80068e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006612:	4b15      	ldr	r3, [pc, #84]	@ (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d120      	bne.n	800665c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800661a:	4814      	ldr	r0, [pc, #80]	@ (800666c <prvCheckForValidListAndQueue+0x64>)
 800661c:	f7fd fff8 	bl	8004610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006620:	4813      	ldr	r0, [pc, #76]	@ (8006670 <prvCheckForValidListAndQueue+0x68>)
 8006622:	f7fd fff5 	bl	8004610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006626:	4b13      	ldr	r3, [pc, #76]	@ (8006674 <prvCheckForValidListAndQueue+0x6c>)
 8006628:	4a10      	ldr	r2, [pc, #64]	@ (800666c <prvCheckForValidListAndQueue+0x64>)
 800662a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800662c:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <prvCheckForValidListAndQueue+0x70>)
 800662e:	4a10      	ldr	r2, [pc, #64]	@ (8006670 <prvCheckForValidListAndQueue+0x68>)
 8006630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4b11      	ldr	r3, [pc, #68]	@ (800667c <prvCheckForValidListAndQueue+0x74>)
 8006638:	4a11      	ldr	r2, [pc, #68]	@ (8006680 <prvCheckForValidListAndQueue+0x78>)
 800663a:	2110      	movs	r1, #16
 800663c:	200a      	movs	r0, #10
 800663e:	f7fe f905 	bl	800484c <xQueueGenericCreateStatic>
 8006642:	4603      	mov	r3, r0
 8006644:	4a08      	ldr	r2, [pc, #32]	@ (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006648:	4b07      	ldr	r3, [pc, #28]	@ (8006668 <prvCheckForValidListAndQueue+0x60>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006650:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	490b      	ldr	r1, [pc, #44]	@ (8006684 <prvCheckForValidListAndQueue+0x7c>)
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fd2a 	bl	80050b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800665c:	f000 f976 	bl	800694c <vPortExitCritical>
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200053f8 	.word	0x200053f8
 800666c:	200053c8 	.word	0x200053c8
 8006670:	200053dc 	.word	0x200053dc
 8006674:	200053f0 	.word	0x200053f0
 8006678:	200053f4 	.word	0x200053f4
 800667c:	200054a4 	.word	0x200054a4
 8006680:	20005404 	.word	0x20005404
 8006684:	080116f8 	.word	0x080116f8

08006688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3b04      	subs	r3, #4
 8006698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b8:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <pxPortInitialiseStack+0x64>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b14      	subs	r3, #20
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f06f 0202 	mvn.w	r2, #2
 80066d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3b20      	subs	r3, #32
 80066dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	080066f1 	.word	0x080066f1

080066f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066fa:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <prvTaskExitError+0x58>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006702:	d00b      	beq.n	800671c <prvTaskExitError+0x2c>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <prvTaskExitError+0x28>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60bb      	str	r3, [r7, #8]
}
 800672e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006730:	bf00      	nop
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0fc      	beq.n	8006732 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000010 	.word	0x20000010
 800674c:	00000000 	.word	0x00000000

08006750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20004ec8 	.word	0x20004ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006778:	4808      	ldr	r0, [pc, #32]	@ (800679c <prvPortStartFirstTask+0x24>)
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f380 8808 	msr	MSP, r0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8814 	msr	CONTROL, r0
 800678a:	b662      	cpsie	i
 800678c:	b661      	cpsie	f
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	df00      	svc	0
 8006798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800679a:	bf00      	nop
 800679c:	e000ed08 	.word	0xe000ed08

080067a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067a6:	4b47      	ldr	r3, [pc, #284]	@ (80068c4 <xPortStartScheduler+0x124>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a47      	ldr	r2, [pc, #284]	@ (80068c8 <xPortStartScheduler+0x128>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10b      	bne.n	80067c8 <xPortStartScheduler+0x28>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067c8:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <xPortStartScheduler+0x124>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3f      	ldr	r2, [pc, #252]	@ (80068cc <xPortStartScheduler+0x12c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10b      	bne.n	80067ea <xPortStartScheduler+0x4a>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60fb      	str	r3, [r7, #12]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ea:	4b39      	ldr	r3, [pc, #228]	@ (80068d0 <xPortStartScheduler+0x130>)
 80067ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	22ff      	movs	r2, #255	@ 0xff
 80067fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800680c:	b2da      	uxtb	r2, r3
 800680e:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <xPortStartScheduler+0x134>)
 8006810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006812:	4b31      	ldr	r3, [pc, #196]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006814:	2207      	movs	r2, #7
 8006816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006818:	e009      	b.n	800682e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800681a:	4b2f      	ldr	r3, [pc, #188]	@ (80068d8 <xPortStartScheduler+0x138>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3b01      	subs	r3, #1
 8006820:	4a2d      	ldr	r2, [pc, #180]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006836:	2b80      	cmp	r3, #128	@ 0x80
 8006838:	d0ef      	beq.n	800681a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800683a:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <xPortStartScheduler+0x138>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1c3 0307 	rsb	r3, r3, #7
 8006842:	2b04      	cmp	r3, #4
 8006844:	d00b      	beq.n	800685e <xPortStartScheduler+0xbe>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60bb      	str	r3, [r7, #8]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800685e:	4b1e      	ldr	r3, [pc, #120]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006868:	4b1b      	ldr	r3, [pc, #108]	@ (80068d8 <xPortStartScheduler+0x138>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006870:	4a19      	ldr	r2, [pc, #100]	@ (80068d8 <xPortStartScheduler+0x138>)
 8006872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800687c:	4b17      	ldr	r3, [pc, #92]	@ (80068dc <xPortStartScheduler+0x13c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <xPortStartScheduler+0x13c>)
 8006882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006888:	4b14      	ldr	r3, [pc, #80]	@ (80068dc <xPortStartScheduler+0x13c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a13      	ldr	r2, [pc, #76]	@ (80068dc <xPortStartScheduler+0x13c>)
 800688e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006894:	f000 f8da 	bl	8006a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006898:	4b11      	ldr	r3, [pc, #68]	@ (80068e0 <xPortStartScheduler+0x140>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800689e:	f000 f8f9 	bl	8006a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <xPortStartScheduler+0x144>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a0f      	ldr	r2, [pc, #60]	@ (80068e4 <xPortStartScheduler+0x144>)
 80068a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068ae:	f7ff ff63 	bl	8006778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068b2:	f7ff f815 	bl	80058e0 <vTaskSwitchContext>
	prvTaskExitError();
 80068b6:	f7ff ff1b 	bl	80066f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	e000ed00 	.word	0xe000ed00
 80068c8:	410fc271 	.word	0x410fc271
 80068cc:	410fc270 	.word	0x410fc270
 80068d0:	e000e400 	.word	0xe000e400
 80068d4:	200054f4 	.word	0x200054f4
 80068d8:	200054f8 	.word	0x200054f8
 80068dc:	e000ed20 	.word	0xe000ed20
 80068e0:	20000010 	.word	0x20000010
 80068e4:	e000ef34 	.word	0xe000ef34

080068e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006902:	4b10      	ldr	r3, [pc, #64]	@ (8006944 <vPortEnterCritical+0x5c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <vPortEnterCritical+0x5c>)
 800690a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800690c:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <vPortEnterCritical+0x5c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d110      	bne.n	8006936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006914:	4b0c      	ldr	r3, [pc, #48]	@ (8006948 <vPortEnterCritical+0x60>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vPortEnterCritical+0x4e>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	603b      	str	r3, [r7, #0]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vPortEnterCritical+0x4a>
	}
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000010 	.word	0x20000010
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006952:	4b12      	ldr	r3, [pc, #72]	@ (800699c <vPortExitCritical+0x50>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <vPortExitCritical+0x26>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <vPortExitCritical+0x50>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a08      	ldr	r2, [pc, #32]	@ (800699c <vPortExitCritical+0x50>)
 800697a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800697c:	4b07      	ldr	r3, [pc, #28]	@ (800699c <vPortExitCritical+0x50>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <vPortExitCritical+0x44>
 8006984:	2300      	movs	r3, #0
 8006986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000010 	.word	0x20000010

080069a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069a0:	f3ef 8009 	mrs	r0, PSP
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <pxCurrentTCBConst>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f01e 0f10 	tst.w	lr, #16
 80069b0:	bf08      	it	eq
 80069b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069c4:	f380 8811 	msr	BASEPRI, r0
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f7fe ff86 	bl	80058e0 <vTaskSwitchContext>
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f380 8811 	msr	BASEPRI, r0
 80069dc:	bc09      	pop	{r0, r3}
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	6808      	ldr	r0, [r1, #0]
 80069e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	f01e 0f10 	tst.w	lr, #16
 80069ea:	bf08      	it	eq
 80069ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069f0:	f380 8809 	msr	PSP, r0
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst>:
 8006a00:	20004ec8 	.word	0x20004ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a22:	f7fe fea3 	bl	800576c <xTaskIncrementTick>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <xPortSysTickHandler+0x40>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <vPortSetupTimerInterrupt+0x38>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <vPortSetupTimerInterrupt+0x3c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	@ (8006a8c <vPortSetupTimerInterrupt+0x40>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <vPortSetupTimerInterrupt+0x44>)
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a6e:	4b04      	ldr	r3, [pc, #16]	@ (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a70:	2207      	movs	r2, #7
 8006a72:	601a      	str	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	e000e010 	.word	0xe000e010
 8006a84:	e000e018 	.word	0xe000e018
 8006a88:	20000004 	.word	0x20000004
 8006a8c:	10624dd3 	.word	0x10624dd3
 8006a90:	e000e014 	.word	0xe000e014

08006a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006aa4 <vPortEnableVFP+0x10>
 8006a98:	6801      	ldr	r1, [r0, #0]
 8006a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a9e:	6001      	str	r1, [r0, #0]
 8006aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed88 	.word	0xe000ed88

08006aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d915      	bls.n	8006ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aba:	4a18      	ldr	r2, [pc, #96]	@ (8006b1c <vPortValidateInterruptPriority+0x74>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ac4:	4b16      	ldr	r3, [pc, #88]	@ (8006b20 <vPortValidateInterruptPriority+0x78>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	7afa      	ldrb	r2, [r7, #11]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d20b      	bcs.n	8006ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <vPortValidateInterruptPriority+0x7c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006aee:	4b0e      	ldr	r3, [pc, #56]	@ (8006b28 <vPortValidateInterruptPriority+0x80>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d90b      	bls.n	8006b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	603b      	str	r3, [r7, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <vPortValidateInterruptPriority+0x62>
	}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	e000e3f0 	.word	0xe000e3f0
 8006b20:	200054f4 	.word	0x200054f4
 8006b24:	e000ed0c 	.word	0xe000ed0c
 8006b28:	200054f8 	.word	0x200054f8

08006b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b38:	f7fe fd5c 	bl	80055f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006cb0 <pvPortMalloc+0x184>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b44:	f000 f924 	bl	8006d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b48:	4b5a      	ldr	r3, [pc, #360]	@ (8006cb4 <pvPortMalloc+0x188>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 8095 	bne.w	8006c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01e      	beq.n	8006b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f023 0307 	bic.w	r3, r3, #7
 8006b74:	3308      	adds	r3, #8
 8006b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <pvPortMalloc+0x6e>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	617b      	str	r3, [r7, #20]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d06f      	beq.n	8006c80 <pvPortMalloc+0x154>
 8006ba0:	4b45      	ldr	r3, [pc, #276]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d86a      	bhi.n	8006c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006baa:	4b44      	ldr	r3, [pc, #272]	@ (8006cbc <pvPortMalloc+0x190>)
 8006bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bae:	4b43      	ldr	r3, [pc, #268]	@ (8006cbc <pvPortMalloc+0x190>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb4:	e004      	b.n	8006bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d903      	bls.n	8006bd2 <pvPortMalloc+0xa6>
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f1      	bne.n	8006bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bd2:	4b37      	ldr	r3, [pc, #220]	@ (8006cb0 <pvPortMalloc+0x184>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d051      	beq.n	8006c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	4413      	add	r3, r2
 8006be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1ad2      	subs	r2, r2, r3
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d920      	bls.n	8006c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4413      	add	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <pvPortMalloc+0xfc>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613b      	str	r3, [r7, #16]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f000 f90a 	bl	8006e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <pvPortMalloc+0x194>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d203      	bcs.n	8006c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c5a:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <pvPortMalloc+0x18c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <pvPortMalloc+0x194>)
 8006c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b13      	ldr	r3, [pc, #76]	@ (8006cb4 <pvPortMalloc+0x188>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c76:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <pvPortMalloc+0x198>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <pvPortMalloc+0x198>)
 8006c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c80:	f7fe fcc6 	bl	8005610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60fb      	str	r3, [r7, #12]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	@ 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20009104 	.word	0x20009104
 8006cb4:	20009118 	.word	0x20009118
 8006cb8:	20009108 	.word	0x20009108
 8006cbc:	200090fc 	.word	0x200090fc
 8006cc0:	2000910c 	.word	0x2000910c
 8006cc4:	20009110 	.word	0x20009110

08006cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04f      	beq.n	8006d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	425b      	negs	r3, r3
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	4b25      	ldr	r3, [pc, #148]	@ (8006d84 <vPortFree+0xbc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <vPortFree+0x46>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <vPortFree+0x66>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60bb      	str	r3, [r7, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	4b14      	ldr	r3, [pc, #80]	@ (8006d84 <vPortFree+0xbc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01e      	beq.n	8006d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11a      	bne.n	8006d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <vPortFree+0xbc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	401a      	ands	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d54:	f7fe fc4e 	bl	80055f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <vPortFree+0xc0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4413      	add	r3, r2
 8006d62:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <vPortFree+0xc0>)
 8006d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f000 f874 	bl	8006e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d6c:	4b07      	ldr	r3, [pc, #28]	@ (8006d8c <vPortFree+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	4a06      	ldr	r2, [pc, #24]	@ (8006d8c <vPortFree+0xc4>)
 8006d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d76:	f7fe fc4b 	bl	8005610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20009118 	.word	0x20009118
 8006d88:	20009108 	.word	0x20009108
 8006d8c:	20009114 	.word	0x20009114

08006d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d9c:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <prvHeapInit+0xac>)
 8006d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3307      	adds	r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <prvHeapInit+0xac>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e40 <prvHeapInit+0xb0>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dce:	4b1c      	ldr	r3, [pc, #112]	@ (8006e40 <prvHeapInit+0xb0>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ddc:	2208      	movs	r2, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0307 	bic.w	r3, r3, #7
 8006dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a15      	ldr	r2, [pc, #84]	@ (8006e44 <prvHeapInit+0xb4>)
 8006df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006df2:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <prvHeapInit+0xb4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <prvHeapInit+0xb4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <prvHeapInit+0xb4>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e48 <prvHeapInit+0xb8>)
 8006e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a09      	ldr	r2, [pc, #36]	@ (8006e4c <prvHeapInit+0xbc>)
 8006e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e28:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <prvHeapInit+0xc0>)
 8006e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e2e:	601a      	str	r2, [r3, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	200054fc 	.word	0x200054fc
 8006e40:	200090fc 	.word	0x200090fc
 8006e44:	20009104 	.word	0x20009104
 8006e48:	2000910c 	.word	0x2000910c
 8006e4c:	20009108 	.word	0x20009108
 8006e50:	20009118 	.word	0x20009118

08006e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e5c:	4b28      	ldr	r3, [pc, #160]	@ (8006f00 <prvInsertBlockIntoFreeList+0xac>)
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e002      	b.n	8006e68 <prvInsertBlockIntoFreeList+0x14>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d8f7      	bhi.n	8006e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d108      	bne.n	8006e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d118      	bne.n	8006edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d00d      	beq.n	8006ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e008      	b.n	8006ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	e003      	b.n	8006ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d002      	beq.n	8006ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	200090fc 	.word	0x200090fc
 8006f04:	20009104 	.word	0x20009104

08006f08 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8006f08:	4b04      	ldr	r3, [pc, #16]	@ (8006f1c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	b10a      	cbz	r2, 8006f12 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8006f0e:	4803      	ldr	r0, [pc, #12]	@ (8006f1c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8006f10:	4770      	bx	lr
 8006f12:	4a03      	ldr	r2, [pc, #12]	@ (8006f20 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	4770      	bx	lr
 8006f1c:	2000001c 	.word	0x2000001c
 8006f20:	200001d0 	.word	0x200001d0

08006f24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8006f24:	4a02      	ldr	r2, [pc, #8]	@ (8006f30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 8006f26:	4b03      	ldr	r3, [pc, #12]	@ (8006f34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200001d0 	.word	0x200001d0
 8006f34:	2000001c 	.word	0x2000001c

08006f38 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8006f38:	f002 b94e 	b.w	80091d8 <geometry_msgs__msg__Twist__init>

08006f3c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8006f3c:	f002 b970 	b.w	8009220 <geometry_msgs__msg__Twist__fini>

08006f40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	f000 f819 	bl	8006f78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006f46:	4c07      	ldr	r4, [pc, #28]	@ (8006f64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8006f48:	60e0      	str	r0, [r4, #12]
 8006f4a:	f000 f815 	bl	8006f78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006f4e:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8006f50:	64a0      	str	r0, [r4, #72]	@ 0x48
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	b10a      	cbz	r2, 8006f5a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8006f56:	4804      	ldr	r0, [pc, #16]	@ (8006f68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8006f5c:	4802      	ldr	r0, [pc, #8]	@ (8006f68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	bd10      	pop	{r4, pc}
 8006f64:	20000028 	.word	0x20000028
 8006f68:	200000a0 	.word	0x200000a0
 8006f6c:	200001d4 	.word	0x200001d4

08006f70 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8006f70:	f002 b962 	b.w	8009238 <geometry_msgs__msg__Vector3__init>

08006f74 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8006f74:	f002 b964 	b.w	8009240 <geometry_msgs__msg__Vector3__fini>

08006f78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	b10a      	cbz	r2, 8006f82 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8006f7e:	4803      	ldr	r0, [pc, #12]	@ (8006f8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8006f80:	4770      	bx	lr
 8006f82:	4a03      	ldr	r2, [pc, #12]	@ (8006f90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	4770      	bx	lr
 8006f8c:	20000160 	.word	0x20000160
 8006f90:	200001d4 	.word	0x200001d4

08006f94 <get_serialized_size_geometry_msgs__msg__Twist>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4604      	mov	r4, r0
 8006f98:	b148      	cbz	r0, 8006fae <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	f000 f860 	bl	8007060 <get_serialized_size_geometry_msgs__msg__Vector3>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	1829      	adds	r1, r5, r0
 8006fa4:	f104 0018 	add.w	r0, r4, #24
 8006fa8:	f000 f85a 	bl	8007060 <get_serialized_size_geometry_msgs__msg__Vector3>
 8006fac:	4430      	add	r0, r6
 8006fae:	bd70      	pop	{r4, r5, r6, pc}

08006fb0 <_Twist__cdr_deserialize>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	b189      	cbz	r1, 8006fda <_Twist__cdr_deserialize+0x2a>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	f000 f8de 	bl	8007178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006fbc:	6843      	ldr	r3, [r0, #4]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	4798      	blx	r3
 8006fc6:	f000 f8d7 	bl	8007178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006fca:	6843      	ldr	r3, [r0, #4]
 8006fcc:	f104 0118 	add.w	r1, r4, #24
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fd8:	4718      	bx	r3
 8006fda:	4608      	mov	r0, r1
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	bf00      	nop

08006fe0 <_Twist__cdr_serialize>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	9101      	str	r1, [sp, #4]
 8006fe6:	b190      	cbz	r0, 800700e <_Twist__cdr_serialize+0x2e>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	f000 f8c5 	bl	8007178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006fee:	6843      	ldr	r3, [r0, #4]
 8006ff0:	9901      	ldr	r1, [sp, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4798      	blx	r3
 8006ff8:	f000 f8be 	bl	8007178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8006ffc:	6843      	ldr	r3, [r0, #4]
 8006ffe:	9901      	ldr	r1, [sp, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f104 0018 	add.w	r0, r4, #24
 8007006:	b002      	add	sp, #8
 8007008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700c:	4718      	bx	r3
 800700e:	b002      	add	sp, #8
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop

08007014 <_Twist__get_serialized_size>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	b148      	cbz	r0, 800702e <_Twist__get_serialized_size+0x1a>
 800701a:	2100      	movs	r1, #0
 800701c:	f000 f820 	bl	8007060 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007020:	4605      	mov	r5, r0
 8007022:	4601      	mov	r1, r0
 8007024:	f104 0018 	add.w	r0, r4, #24
 8007028:	f000 f81a 	bl	8007060 <get_serialized_size_geometry_msgs__msg__Vector3>
 800702c:	4428      	add	r0, r5
 800702e:	bd38      	pop	{r3, r4, r5, pc}

08007030 <_Twist__max_serialized_size>:
 8007030:	b510      	push	{r4, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	2301      	movs	r3, #1
 8007036:	2100      	movs	r1, #0
 8007038:	f10d 0007 	add.w	r0, sp, #7
 800703c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007040:	f000 f87e 	bl	8007140 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007044:	4604      	mov	r4, r0
 8007046:	4601      	mov	r1, r0
 8007048:	f10d 0007 	add.w	r0, sp, #7
 800704c:	f000 f878 	bl	8007140 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007050:	4420      	add	r0, r4
 8007052:	b002      	add	sp, #8
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop

08007058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007058:	4800      	ldr	r0, [pc, #0]	@ (800705c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800705a:	4770      	bx	lr
 800705c:	2000016c 	.word	0x2000016c

08007060 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007060:	b1b8      	cbz	r0, 8007092 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007062:	b538      	push	{r3, r4, r5, lr}
 8007064:	460d      	mov	r5, r1
 8007066:	4628      	mov	r0, r5
 8007068:	2108      	movs	r1, #8
 800706a:	f001 f965 	bl	8008338 <ucdr_alignment>
 800706e:	f105 0308 	add.w	r3, r5, #8
 8007072:	181c      	adds	r4, r3, r0
 8007074:	2108      	movs	r1, #8
 8007076:	4620      	mov	r0, r4
 8007078:	f001 f95e 	bl	8008338 <ucdr_alignment>
 800707c:	3008      	adds	r0, #8
 800707e:	4404      	add	r4, r0
 8007080:	2108      	movs	r1, #8
 8007082:	4620      	mov	r0, r4
 8007084:	f001 f958 	bl	8008338 <ucdr_alignment>
 8007088:	f1c5 0508 	rsb	r5, r5, #8
 800708c:	4428      	add	r0, r5
 800708e:	4420      	add	r0, r4
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	4770      	bx	lr

08007094 <_Vector3__cdr_deserialize>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	460c      	mov	r4, r1
 8007098:	b171      	cbz	r1, 80070b8 <_Vector3__cdr_deserialize+0x24>
 800709a:	4605      	mov	r5, r0
 800709c:	f001 f82e 	bl	80080fc <ucdr_deserialize_double>
 80070a0:	f104 0108 	add.w	r1, r4, #8
 80070a4:	4628      	mov	r0, r5
 80070a6:	f001 f829 	bl	80080fc <ucdr_deserialize_double>
 80070aa:	f104 0110 	add.w	r1, r4, #16
 80070ae:	4628      	mov	r0, r5
 80070b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b4:	f001 b822 	b.w	80080fc <ucdr_deserialize_double>
 80070b8:	4608      	mov	r0, r1
 80070ba:	bd38      	pop	{r3, r4, r5, pc}

080070bc <_Vector3__cdr_serialize>:
 80070bc:	b198      	cbz	r0, 80070e6 <_Vector3__cdr_serialize+0x2a>
 80070be:	b538      	push	{r3, r4, r5, lr}
 80070c0:	ed90 0b00 	vldr	d0, [r0]
 80070c4:	460d      	mov	r5, r1
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	f000 ff47 	bl	8007f5c <ucdr_serialize_double>
 80070ce:	ed94 0b02 	vldr	d0, [r4, #8]
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 ff42 	bl	8007f5c <ucdr_serialize_double>
 80070d8:	ed94 0b04 	vldr	d0, [r4, #16]
 80070dc:	4628      	mov	r0, r5
 80070de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e2:	f000 bf3b 	b.w	8007f5c <ucdr_serialize_double>
 80070e6:	4770      	bx	lr

080070e8 <_Vector3__get_serialized_size>:
 80070e8:	b198      	cbz	r0, 8007112 <_Vector3__get_serialized_size+0x2a>
 80070ea:	b510      	push	{r4, lr}
 80070ec:	2108      	movs	r1, #8
 80070ee:	2000      	movs	r0, #0
 80070f0:	f001 f922 	bl	8008338 <ucdr_alignment>
 80070f4:	f100 0408 	add.w	r4, r0, #8
 80070f8:	2108      	movs	r1, #8
 80070fa:	4620      	mov	r0, r4
 80070fc:	f001 f91c 	bl	8008338 <ucdr_alignment>
 8007100:	3008      	adds	r0, #8
 8007102:	4404      	add	r4, r0
 8007104:	2108      	movs	r1, #8
 8007106:	4620      	mov	r0, r4
 8007108:	f001 f916 	bl	8008338 <ucdr_alignment>
 800710c:	3008      	adds	r0, #8
 800710e:	4420      	add	r0, r4
 8007110:	bd10      	pop	{r4, pc}
 8007112:	4770      	bx	lr

08007114 <_Vector3__max_serialized_size>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	2108      	movs	r1, #8
 8007118:	2000      	movs	r0, #0
 800711a:	f001 f90d 	bl	8008338 <ucdr_alignment>
 800711e:	f100 0508 	add.w	r5, r0, #8
 8007122:	2108      	movs	r1, #8
 8007124:	4628      	mov	r0, r5
 8007126:	f001 f907 	bl	8008338 <ucdr_alignment>
 800712a:	f100 0408 	add.w	r4, r0, #8
 800712e:	442c      	add	r4, r5
 8007130:	2108      	movs	r1, #8
 8007132:	4620      	mov	r0, r4
 8007134:	f001 f900 	bl	8008338 <ucdr_alignment>
 8007138:	3008      	adds	r0, #8
 800713a:	4420      	add	r0, r4
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop

08007140 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	2301      	movs	r3, #1
 8007144:	460c      	mov	r4, r1
 8007146:	7003      	strb	r3, [r0, #0]
 8007148:	2108      	movs	r1, #8
 800714a:	4620      	mov	r0, r4
 800714c:	f001 f8f4 	bl	8008338 <ucdr_alignment>
 8007150:	f104 0508 	add.w	r5, r4, #8
 8007154:	1946      	adds	r6, r0, r5
 8007156:	2108      	movs	r1, #8
 8007158:	4630      	mov	r0, r6
 800715a:	f001 f8ed 	bl	8008338 <ucdr_alignment>
 800715e:	f100 0508 	add.w	r5, r0, #8
 8007162:	4435      	add	r5, r6
 8007164:	2108      	movs	r1, #8
 8007166:	4628      	mov	r0, r5
 8007168:	f001 f8e6 	bl	8008338 <ucdr_alignment>
 800716c:	f1c4 0408 	rsb	r4, r4, #8
 8007170:	4420      	add	r0, r4
 8007172:	4428      	add	r0, r5
 8007174:	bd70      	pop	{r4, r5, r6, pc}
 8007176:	bf00      	nop

08007178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8007178:	4800      	ldr	r0, [pc, #0]	@ (800717c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800717a:	4770      	bx	lr
 800717c:	20000194 	.word	0x20000194

08007180 <ucdr_serialize_bool>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	460d      	mov	r5, r1
 8007184:	2101      	movs	r1, #1
 8007186:	4604      	mov	r4, r0
 8007188:	f001 f88a 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 800718c:	b148      	cbz	r0, 80071a2 <ucdr_serialize_bool+0x22>
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	701d      	strb	r5, [r3, #0]
 8007192:	68a2      	ldr	r2, [r4, #8]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	2101      	movs	r1, #1
 8007198:	440a      	add	r2, r1
 800719a:	440b      	add	r3, r1
 800719c:	60a2      	str	r2, [r4, #8]
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	7561      	strb	r1, [r4, #21]
 80071a2:	7da0      	ldrb	r0, [r4, #22]
 80071a4:	f080 0001 	eor.w	r0, r0, #1
 80071a8:	bd38      	pop	{r3, r4, r5, pc}
 80071aa:	bf00      	nop

080071ac <ucdr_deserialize_bool>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	460d      	mov	r5, r1
 80071b0:	2101      	movs	r1, #1
 80071b2:	4604      	mov	r4, r0
 80071b4:	f001 f874 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80071b8:	b160      	cbz	r0, 80071d4 <ucdr_deserialize_bool+0x28>
 80071ba:	68a2      	ldr	r2, [r4, #8]
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071c2:	3900      	subs	r1, #0
 80071c4:	bf18      	it	ne
 80071c6:	2101      	movne	r1, #1
 80071c8:	7029      	strb	r1, [r5, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	2101      	movs	r1, #1
 80071ce:	60a2      	str	r2, [r4, #8]
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	7561      	strb	r1, [r4, #21]
 80071d4:	7da0      	ldrb	r0, [r4, #22]
 80071d6:	f080 0001 	eor.w	r0, r0, #1
 80071da:	bd38      	pop	{r3, r4, r5, pc}

080071dc <ucdr_serialize_uint8_t>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	460d      	mov	r5, r1
 80071e0:	2101      	movs	r1, #1
 80071e2:	4604      	mov	r4, r0
 80071e4:	f001 f85c 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80071e8:	b148      	cbz	r0, 80071fe <ucdr_serialize_uint8_t+0x22>
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	701d      	strb	r5, [r3, #0]
 80071ee:	68a2      	ldr	r2, [r4, #8]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	2101      	movs	r1, #1
 80071f4:	440a      	add	r2, r1
 80071f6:	440b      	add	r3, r1
 80071f8:	60a2      	str	r2, [r4, #8]
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	7561      	strb	r1, [r4, #21]
 80071fe:	7da0      	ldrb	r0, [r4, #22]
 8007200:	f080 0001 	eor.w	r0, r0, #1
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop

08007208 <ucdr_deserialize_uint8_t>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	460d      	mov	r5, r1
 800720c:	2101      	movs	r1, #1
 800720e:	4604      	mov	r4, r0
 8007210:	f001 f846 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007214:	b150      	cbz	r0, 800722c <ucdr_deserialize_uint8_t+0x24>
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	702b      	strb	r3, [r5, #0]
 800721c:	68a2      	ldr	r2, [r4, #8]
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	2101      	movs	r1, #1
 8007222:	440a      	add	r2, r1
 8007224:	440b      	add	r3, r1
 8007226:	60a2      	str	r2, [r4, #8]
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	7561      	strb	r1, [r4, #21]
 800722c:	7da0      	ldrb	r0, [r4, #22]
 800722e:	f080 0001 	eor.w	r0, r0, #1
 8007232:	bd38      	pop	{r3, r4, r5, pc}

08007234 <ucdr_serialize_uint16_t>:
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	460b      	mov	r3, r1
 800723c:	2102      	movs	r1, #2
 800723e:	4604      	mov	r4, r0
 8007240:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007244:	f001 f880 	bl	8008348 <ucdr_buffer_alignment>
 8007248:	4601      	mov	r1, r0
 800724a:	4620      	mov	r0, r4
 800724c:	7d67      	ldrb	r7, [r4, #21]
 800724e:	f001 f8bf 	bl	80083d0 <ucdr_advance_buffer>
 8007252:	2102      	movs	r1, #2
 8007254:	4620      	mov	r0, r4
 8007256:	f001 f817 	bl	8008288 <ucdr_check_buffer_available_for>
 800725a:	bb78      	cbnz	r0, 80072bc <ucdr_serialize_uint16_t+0x88>
 800725c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007260:	42ab      	cmp	r3, r5
 8007262:	d926      	bls.n	80072b2 <ucdr_serialize_uint16_t+0x7e>
 8007264:	1b5e      	subs	r6, r3, r5
 8007266:	60a3      	str	r3, [r4, #8]
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	f1c6 0802 	rsb	r8, r6, #2
 800726e:	4433      	add	r3, r6
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	4641      	mov	r1, r8
 8007274:	4620      	mov	r0, r4
 8007276:	f001 f813 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 800727a:	2800      	cmp	r0, #0
 800727c:	d03b      	beq.n	80072f6 <ucdr_serialize_uint16_t+0xc2>
 800727e:	7d23      	ldrb	r3, [r4, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d04a      	beq.n	800731a <ucdr_serialize_uint16_t+0xe6>
 8007284:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007288:	702b      	strb	r3, [r5, #0]
 800728a:	2e00      	cmp	r6, #0
 800728c:	d040      	beq.n	8007310 <ucdr_serialize_uint16_t+0xdc>
 800728e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007292:	706b      	strb	r3, [r5, #1]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	68a2      	ldr	r2, [r4, #8]
 8007298:	7da0      	ldrb	r0, [r4, #22]
 800729a:	3302      	adds	r3, #2
 800729c:	1b9e      	subs	r6, r3, r6
 800729e:	4442      	add	r2, r8
 80072a0:	2302      	movs	r3, #2
 80072a2:	f080 0001 	eor.w	r0, r0, #1
 80072a6:	60a2      	str	r2, [r4, #8]
 80072a8:	6126      	str	r6, [r4, #16]
 80072aa:	7563      	strb	r3, [r4, #21]
 80072ac:	b002      	add	sp, #8
 80072ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b2:	2102      	movs	r1, #2
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fff3 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80072ba:	b190      	cbz	r0, 80072e2 <ucdr_serialize_uint16_t+0xae>
 80072bc:	7d23      	ldrb	r3, [r4, #20]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	d014      	beq.n	80072ee <ucdr_serialize_uint16_t+0xba>
 80072c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80072d0:	705a      	strb	r2, [r3, #1]
 80072d2:	68a2      	ldr	r2, [r4, #8]
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	3202      	adds	r2, #2
 80072d8:	3302      	adds	r3, #2
 80072da:	2102      	movs	r1, #2
 80072dc:	60a2      	str	r2, [r4, #8]
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	7561      	strb	r1, [r4, #21]
 80072e2:	7da0      	ldrb	r0, [r4, #22]
 80072e4:	f080 0001 	eor.w	r0, r0, #1
 80072e8:	b002      	add	sp, #8
 80072ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e7ed      	b.n	80072d2 <ucdr_serialize_uint16_t+0x9e>
 80072f6:	68a2      	ldr	r2, [r4, #8]
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	7da0      	ldrb	r0, [r4, #22]
 80072fc:	7567      	strb	r7, [r4, #21]
 80072fe:	1b92      	subs	r2, r2, r6
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	f080 0001 	eor.w	r0, r0, #1
 8007306:	60a2      	str	r2, [r4, #8]
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	b002      	add	sp, #8
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	68a3      	ldr	r3, [r4, #8]
 8007312:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e7bc      	b.n	8007294 <ucdr_serialize_uint16_t+0x60>
 800731a:	4628      	mov	r0, r5
 800731c:	f10d 0506 	add.w	r5, sp, #6
 8007320:	4629      	mov	r1, r5
 8007322:	4632      	mov	r2, r6
 8007324:	f009 fabb 	bl	801089e <memcpy>
 8007328:	68a0      	ldr	r0, [r4, #8]
 800732a:	4642      	mov	r2, r8
 800732c:	19a9      	adds	r1, r5, r6
 800732e:	f009 fab6 	bl	801089e <memcpy>
 8007332:	e7af      	b.n	8007294 <ucdr_serialize_uint16_t+0x60>

08007334 <ucdr_serialize_endian_uint16_t>:
 8007334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007338:	b083      	sub	sp, #12
 800733a:	460d      	mov	r5, r1
 800733c:	2102      	movs	r1, #2
 800733e:	4604      	mov	r4, r0
 8007340:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007344:	f001 f800 	bl	8008348 <ucdr_buffer_alignment>
 8007348:	4601      	mov	r1, r0
 800734a:	4620      	mov	r0, r4
 800734c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007350:	f001 f83e 	bl	80083d0 <ucdr_advance_buffer>
 8007354:	2102      	movs	r1, #2
 8007356:	4620      	mov	r0, r4
 8007358:	f000 ff96 	bl	8008288 <ucdr_check_buffer_available_for>
 800735c:	bb70      	cbnz	r0, 80073bc <ucdr_serialize_endian_uint16_t+0x88>
 800735e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007362:	42be      	cmp	r6, r7
 8007364:	d925      	bls.n	80073b2 <ucdr_serialize_endian_uint16_t+0x7e>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	60a6      	str	r6, [r4, #8]
 800736a:	1bf6      	subs	r6, r6, r7
 800736c:	4433      	add	r3, r6
 800736e:	f1c6 0902 	rsb	r9, r6, #2
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	4649      	mov	r1, r9
 8007376:	4620      	mov	r0, r4
 8007378:	f000 ff92 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 800737c:	2800      	cmp	r0, #0
 800737e:	d039      	beq.n	80073f4 <ucdr_serialize_endian_uint16_t+0xc0>
 8007380:	2d01      	cmp	r5, #1
 8007382:	d04a      	beq.n	800741a <ucdr_serialize_endian_uint16_t+0xe6>
 8007384:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007388:	703b      	strb	r3, [r7, #0]
 800738a:	2e00      	cmp	r6, #0
 800738c:	d040      	beq.n	8007410 <ucdr_serialize_endian_uint16_t+0xdc>
 800738e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007392:	707b      	strb	r3, [r7, #1]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	68a2      	ldr	r2, [r4, #8]
 8007398:	7da0      	ldrb	r0, [r4, #22]
 800739a:	3302      	adds	r3, #2
 800739c:	444a      	add	r2, r9
 800739e:	1b9b      	subs	r3, r3, r6
 80073a0:	2102      	movs	r1, #2
 80073a2:	f080 0001 	eor.w	r0, r0, #1
 80073a6:	60a2      	str	r2, [r4, #8]
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	7561      	strb	r1, [r4, #21]
 80073ac:	b003      	add	sp, #12
 80073ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073b2:	2102      	movs	r1, #2
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 ff73 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80073ba:	b188      	cbz	r0, 80073e0 <ucdr_serialize_endian_uint16_t+0xac>
 80073bc:	2d01      	cmp	r5, #1
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	d014      	beq.n	80073ec <ucdr_serialize_endian_uint16_t+0xb8>
 80073c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80073ce:	705a      	strb	r2, [r3, #1]
 80073d0:	68a2      	ldr	r2, [r4, #8]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	3202      	adds	r2, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	2102      	movs	r1, #2
 80073da:	60a2      	str	r2, [r4, #8]
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	7561      	strb	r1, [r4, #21]
 80073e0:	7da0      	ldrb	r0, [r4, #22]
 80073e2:	f080 0001 	eor.w	r0, r0, #1
 80073e6:	b003      	add	sp, #12
 80073e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	e7ed      	b.n	80073d0 <ucdr_serialize_endian_uint16_t+0x9c>
 80073f4:	68a2      	ldr	r2, [r4, #8]
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	7da0      	ldrb	r0, [r4, #22]
 80073fa:	f884 8015 	strb.w	r8, [r4, #21]
 80073fe:	1b92      	subs	r2, r2, r6
 8007400:	1b9b      	subs	r3, r3, r6
 8007402:	f080 0001 	eor.w	r0, r0, #1
 8007406:	60a2      	str	r2, [r4, #8]
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007410:	68a3      	ldr	r3, [r4, #8]
 8007412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e7bc      	b.n	8007394 <ucdr_serialize_endian_uint16_t+0x60>
 800741a:	f10d 0506 	add.w	r5, sp, #6
 800741e:	4629      	mov	r1, r5
 8007420:	4632      	mov	r2, r6
 8007422:	4638      	mov	r0, r7
 8007424:	f009 fa3b 	bl	801089e <memcpy>
 8007428:	68a0      	ldr	r0, [r4, #8]
 800742a:	464a      	mov	r2, r9
 800742c:	19a9      	adds	r1, r5, r6
 800742e:	f009 fa36 	bl	801089e <memcpy>
 8007432:	e7af      	b.n	8007394 <ucdr_serialize_endian_uint16_t+0x60>

08007434 <ucdr_deserialize_uint16_t>:
 8007434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007438:	460d      	mov	r5, r1
 800743a:	2102      	movs	r1, #2
 800743c:	4604      	mov	r4, r0
 800743e:	f000 ff83 	bl	8008348 <ucdr_buffer_alignment>
 8007442:	4601      	mov	r1, r0
 8007444:	4620      	mov	r0, r4
 8007446:	f894 8015 	ldrb.w	r8, [r4, #21]
 800744a:	f000 ffc1 	bl	80083d0 <ucdr_advance_buffer>
 800744e:	2102      	movs	r1, #2
 8007450:	4620      	mov	r0, r4
 8007452:	f000 ff19 	bl	8008288 <ucdr_check_buffer_available_for>
 8007456:	bb60      	cbnz	r0, 80074b2 <ucdr_deserialize_uint16_t+0x7e>
 8007458:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800745c:	42be      	cmp	r6, r7
 800745e:	d923      	bls.n	80074a8 <ucdr_deserialize_uint16_t+0x74>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	60a6      	str	r6, [r4, #8]
 8007464:	1bf6      	subs	r6, r6, r7
 8007466:	4433      	add	r3, r6
 8007468:	f1c6 0902 	rsb	r9, r6, #2
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	4649      	mov	r1, r9
 8007470:	4620      	mov	r0, r4
 8007472:	f000 ff15 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007476:	2800      	cmp	r0, #0
 8007478:	d034      	beq.n	80074e4 <ucdr_deserialize_uint16_t+0xb0>
 800747a:	7d23      	ldrb	r3, [r4, #20]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d042      	beq.n	8007506 <ucdr_deserialize_uint16_t+0xd2>
 8007480:	787b      	ldrb	r3, [r7, #1]
 8007482:	702b      	strb	r3, [r5, #0]
 8007484:	2e00      	cmp	r6, #0
 8007486:	d03a      	beq.n	80074fe <ucdr_deserialize_uint16_t+0xca>
 8007488:	783b      	ldrb	r3, [r7, #0]
 800748a:	706b      	strb	r3, [r5, #1]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	68a2      	ldr	r2, [r4, #8]
 8007490:	7da0      	ldrb	r0, [r4, #22]
 8007492:	2102      	movs	r1, #2
 8007494:	3302      	adds	r3, #2
 8007496:	444a      	add	r2, r9
 8007498:	1b9b      	subs	r3, r3, r6
 800749a:	7561      	strb	r1, [r4, #21]
 800749c:	60a2      	str	r2, [r4, #8]
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	f080 0001 	eor.w	r0, r0, #1
 80074a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a8:	2102      	movs	r1, #2
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fef8 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80074b0:	b180      	cbz	r0, 80074d4 <ucdr_deserialize_uint16_t+0xa0>
 80074b2:	7d23      	ldrb	r3, [r4, #20]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	d011      	beq.n	80074de <ucdr_deserialize_uint16_t+0xaa>
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	702b      	strb	r3, [r5, #0]
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	706b      	strb	r3, [r5, #1]
 80074c4:	68a2      	ldr	r2, [r4, #8]
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	3202      	adds	r2, #2
 80074ca:	3302      	adds	r3, #2
 80074cc:	2102      	movs	r1, #2
 80074ce:	60a2      	str	r2, [r4, #8]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	7561      	strb	r1, [r4, #21]
 80074d4:	7da0      	ldrb	r0, [r4, #22]
 80074d6:	f080 0001 	eor.w	r0, r0, #1
 80074da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	802b      	strh	r3, [r5, #0]
 80074e2:	e7ef      	b.n	80074c4 <ucdr_deserialize_uint16_t+0x90>
 80074e4:	68a2      	ldr	r2, [r4, #8]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	7da0      	ldrb	r0, [r4, #22]
 80074ea:	f884 8015 	strb.w	r8, [r4, #21]
 80074ee:	1b92      	subs	r2, r2, r6
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	60a2      	str	r2, [r4, #8]
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	f080 0001 	eor.w	r0, r0, #1
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	706b      	strb	r3, [r5, #1]
 8007504:	e7c2      	b.n	800748c <ucdr_deserialize_uint16_t+0x58>
 8007506:	4639      	mov	r1, r7
 8007508:	4632      	mov	r2, r6
 800750a:	4628      	mov	r0, r5
 800750c:	f009 f9c7 	bl	801089e <memcpy>
 8007510:	68a1      	ldr	r1, [r4, #8]
 8007512:	464a      	mov	r2, r9
 8007514:	19a8      	adds	r0, r5, r6
 8007516:	f009 f9c2 	bl	801089e <memcpy>
 800751a:	e7b7      	b.n	800748c <ucdr_deserialize_uint16_t+0x58>

0800751c <ucdr_deserialize_endian_uint16_t>:
 800751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	460e      	mov	r6, r1
 8007522:	2102      	movs	r1, #2
 8007524:	4604      	mov	r4, r0
 8007526:	4615      	mov	r5, r2
 8007528:	f000 ff0e 	bl	8008348 <ucdr_buffer_alignment>
 800752c:	4601      	mov	r1, r0
 800752e:	4620      	mov	r0, r4
 8007530:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007534:	f000 ff4c 	bl	80083d0 <ucdr_advance_buffer>
 8007538:	2102      	movs	r1, #2
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fea4 	bl	8008288 <ucdr_check_buffer_available_for>
 8007540:	bb70      	cbnz	r0, 80075a0 <ucdr_deserialize_endian_uint16_t+0x84>
 8007542:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8007546:	4547      	cmp	r7, r8
 8007548:	d925      	bls.n	8007596 <ucdr_deserialize_endian_uint16_t+0x7a>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	60a7      	str	r7, [r4, #8]
 800754e:	eba7 0708 	sub.w	r7, r7, r8
 8007552:	443b      	add	r3, r7
 8007554:	f1c7 0a02 	rsb	sl, r7, #2
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	4651      	mov	r1, sl
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fe9f 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007562:	2800      	cmp	r0, #0
 8007564:	d034      	beq.n	80075d0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8007566:	2e01      	cmp	r6, #1
 8007568:	d043      	beq.n	80075f2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800756a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800756e:	702b      	strb	r3, [r5, #0]
 8007570:	2f00      	cmp	r7, #0
 8007572:	d03a      	beq.n	80075ea <ucdr_deserialize_endian_uint16_t+0xce>
 8007574:	f898 3000 	ldrb.w	r3, [r8]
 8007578:	706b      	strb	r3, [r5, #1]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	68a2      	ldr	r2, [r4, #8]
 800757e:	7da0      	ldrb	r0, [r4, #22]
 8007580:	2102      	movs	r1, #2
 8007582:	3302      	adds	r3, #2
 8007584:	4452      	add	r2, sl
 8007586:	1bdb      	subs	r3, r3, r7
 8007588:	7561      	strb	r1, [r4, #21]
 800758a:	60a2      	str	r2, [r4, #8]
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	f080 0001 	eor.w	r0, r0, #1
 8007592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007596:	2102      	movs	r1, #2
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fe81 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 800759e:	b178      	cbz	r0, 80075c0 <ucdr_deserialize_endian_uint16_t+0xa4>
 80075a0:	2e01      	cmp	r6, #1
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	d011      	beq.n	80075ca <ucdr_deserialize_endian_uint16_t+0xae>
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	702b      	strb	r3, [r5, #0]
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	706b      	strb	r3, [r5, #1]
 80075b0:	68a2      	ldr	r2, [r4, #8]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	3202      	adds	r2, #2
 80075b6:	3302      	adds	r3, #2
 80075b8:	2102      	movs	r1, #2
 80075ba:	60a2      	str	r2, [r4, #8]
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	7561      	strb	r1, [r4, #21]
 80075c0:	7da0      	ldrb	r0, [r4, #22]
 80075c2:	f080 0001 	eor.w	r0, r0, #1
 80075c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	802b      	strh	r3, [r5, #0]
 80075ce:	e7ef      	b.n	80075b0 <ucdr_deserialize_endian_uint16_t+0x94>
 80075d0:	68a2      	ldr	r2, [r4, #8]
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	7da0      	ldrb	r0, [r4, #22]
 80075d6:	f884 9015 	strb.w	r9, [r4, #21]
 80075da:	1bd2      	subs	r2, r2, r7
 80075dc:	1bdb      	subs	r3, r3, r7
 80075de:	60a2      	str	r2, [r4, #8]
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	f080 0001 	eor.w	r0, r0, #1
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	706b      	strb	r3, [r5, #1]
 80075f0:	e7c3      	b.n	800757a <ucdr_deserialize_endian_uint16_t+0x5e>
 80075f2:	4641      	mov	r1, r8
 80075f4:	463a      	mov	r2, r7
 80075f6:	4628      	mov	r0, r5
 80075f8:	f009 f951 	bl	801089e <memcpy>
 80075fc:	68a1      	ldr	r1, [r4, #8]
 80075fe:	4652      	mov	r2, sl
 8007600:	19e8      	adds	r0, r5, r7
 8007602:	f009 f94c 	bl	801089e <memcpy>
 8007606:	e7b8      	b.n	800757a <ucdr_deserialize_endian_uint16_t+0x5e>

08007608 <ucdr_serialize_uint32_t>:
 8007608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	4604      	mov	r4, r0
 8007610:	9101      	str	r1, [sp, #4]
 8007612:	2104      	movs	r1, #4
 8007614:	f000 fe98 	bl	8008348 <ucdr_buffer_alignment>
 8007618:	4601      	mov	r1, r0
 800761a:	4620      	mov	r0, r4
 800761c:	7d67      	ldrb	r7, [r4, #21]
 800761e:	f000 fed7 	bl	80083d0 <ucdr_advance_buffer>
 8007622:	2104      	movs	r1, #4
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fe2f 	bl	8008288 <ucdr_check_buffer_available_for>
 800762a:	2800      	cmp	r0, #0
 800762c:	d139      	bne.n	80076a2 <ucdr_serialize_uint32_t+0x9a>
 800762e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007632:	42ab      	cmp	r3, r5
 8007634:	d930      	bls.n	8007698 <ucdr_serialize_uint32_t+0x90>
 8007636:	1b5e      	subs	r6, r3, r5
 8007638:	60a3      	str	r3, [r4, #8]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	f1c6 0804 	rsb	r8, r6, #4
 8007640:	4433      	add	r3, r6
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	4641      	mov	r1, r8
 8007646:	4620      	mov	r0, r4
 8007648:	f000 fe2a 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 800764c:	2800      	cmp	r0, #0
 800764e:	d04c      	beq.n	80076ea <ucdr_serialize_uint32_t+0xe2>
 8007650:	7d23      	ldrb	r3, [r4, #20]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d063      	beq.n	800771e <ucdr_serialize_uint32_t+0x116>
 8007656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800765a:	702b      	strb	r3, [r5, #0]
 800765c:	2e00      	cmp	r6, #0
 800765e:	d051      	beq.n	8007704 <ucdr_serialize_uint32_t+0xfc>
 8007660:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007664:	706b      	strb	r3, [r5, #1]
 8007666:	2e01      	cmp	r6, #1
 8007668:	d050      	beq.n	800770c <ucdr_serialize_uint32_t+0x104>
 800766a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800766e:	70ab      	strb	r3, [r5, #2]
 8007670:	2e02      	cmp	r6, #2
 8007672:	d04f      	beq.n	8007714 <ucdr_serialize_uint32_t+0x10c>
 8007674:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007678:	70eb      	strb	r3, [r5, #3]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	68a2      	ldr	r2, [r4, #8]
 800767e:	7da0      	ldrb	r0, [r4, #22]
 8007680:	3304      	adds	r3, #4
 8007682:	1b9e      	subs	r6, r3, r6
 8007684:	4442      	add	r2, r8
 8007686:	2304      	movs	r3, #4
 8007688:	f080 0001 	eor.w	r0, r0, #1
 800768c:	60a2      	str	r2, [r4, #8]
 800768e:	6126      	str	r6, [r4, #16]
 8007690:	7563      	strb	r3, [r4, #21]
 8007692:	b002      	add	sp, #8
 8007694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007698:	2104      	movs	r1, #4
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fe00 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80076a0:	b1d0      	cbz	r0, 80076d8 <ucdr_serialize_uint32_t+0xd0>
 80076a2:	7d23      	ldrb	r3, [r4, #20]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	d01c      	beq.n	80076e4 <ucdr_serialize_uint32_t+0xdc>
 80076aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80076b6:	705a      	strb	r2, [r3, #1]
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80076be:	709a      	strb	r2, [r3, #2]
 80076c0:	68a3      	ldr	r3, [r4, #8]
 80076c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80076c6:	70da      	strb	r2, [r3, #3]
 80076c8:	68a2      	ldr	r2, [r4, #8]
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	3204      	adds	r2, #4
 80076ce:	3304      	adds	r3, #4
 80076d0:	2104      	movs	r1, #4
 80076d2:	60a2      	str	r2, [r4, #8]
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	7561      	strb	r1, [r4, #21]
 80076d8:	7da0      	ldrb	r0, [r4, #22]
 80076da:	f080 0001 	eor.w	r0, r0, #1
 80076de:	b002      	add	sp, #8
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e4:	9a01      	ldr	r2, [sp, #4]
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e7ee      	b.n	80076c8 <ucdr_serialize_uint32_t+0xc0>
 80076ea:	68a2      	ldr	r2, [r4, #8]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	7da0      	ldrb	r0, [r4, #22]
 80076f0:	7567      	strb	r7, [r4, #21]
 80076f2:	1b92      	subs	r2, r2, r6
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	f080 0001 	eor.w	r0, r0, #1
 80076fa:	60a2      	str	r2, [r4, #8]
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	b002      	add	sp, #8
 8007700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007704:	68a3      	ldr	r3, [r4, #8]
 8007706:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	68a3      	ldr	r3, [r4, #8]
 800770e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e7ad      	b.n	800767a <ucdr_serialize_uint32_t+0x72>
 800771e:	4628      	mov	r0, r5
 8007720:	ad01      	add	r5, sp, #4
 8007722:	4629      	mov	r1, r5
 8007724:	4632      	mov	r2, r6
 8007726:	f009 f8ba 	bl	801089e <memcpy>
 800772a:	68a0      	ldr	r0, [r4, #8]
 800772c:	4642      	mov	r2, r8
 800772e:	19a9      	adds	r1, r5, r6
 8007730:	f009 f8b5 	bl	801089e <memcpy>
 8007734:	e7a1      	b.n	800767a <ucdr_serialize_uint32_t+0x72>
 8007736:	bf00      	nop

08007738 <ucdr_serialize_endian_uint32_t>:
 8007738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800773c:	b083      	sub	sp, #12
 800773e:	460d      	mov	r5, r1
 8007740:	2104      	movs	r1, #4
 8007742:	4604      	mov	r4, r0
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	f000 fdff 	bl	8008348 <ucdr_buffer_alignment>
 800774a:	4601      	mov	r1, r0
 800774c:	4620      	mov	r0, r4
 800774e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007752:	f000 fe3d 	bl	80083d0 <ucdr_advance_buffer>
 8007756:	2104      	movs	r1, #4
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fd95 	bl	8008288 <ucdr_check_buffer_available_for>
 800775e:	2800      	cmp	r0, #0
 8007760:	d138      	bne.n	80077d4 <ucdr_serialize_endian_uint32_t+0x9c>
 8007762:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007766:	42b7      	cmp	r7, r6
 8007768:	d92f      	bls.n	80077ca <ucdr_serialize_endian_uint32_t+0x92>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	60a7      	str	r7, [r4, #8]
 800776e:	1bbf      	subs	r7, r7, r6
 8007770:	443b      	add	r3, r7
 8007772:	f1c7 0904 	rsb	r9, r7, #4
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	4649      	mov	r1, r9
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fd90 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007780:	2800      	cmp	r0, #0
 8007782:	d04a      	beq.n	800781a <ucdr_serialize_endian_uint32_t+0xe2>
 8007784:	2d01      	cmp	r5, #1
 8007786:	d063      	beq.n	8007850 <ucdr_serialize_endian_uint32_t+0x118>
 8007788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800778c:	7033      	strb	r3, [r6, #0]
 800778e:	2f00      	cmp	r7, #0
 8007790:	d051      	beq.n	8007836 <ucdr_serialize_endian_uint32_t+0xfe>
 8007792:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007796:	7073      	strb	r3, [r6, #1]
 8007798:	2f01      	cmp	r7, #1
 800779a:	d050      	beq.n	800783e <ucdr_serialize_endian_uint32_t+0x106>
 800779c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80077a0:	70b3      	strb	r3, [r6, #2]
 80077a2:	2f02      	cmp	r7, #2
 80077a4:	d04f      	beq.n	8007846 <ucdr_serialize_endian_uint32_t+0x10e>
 80077a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80077aa:	70f3      	strb	r3, [r6, #3]
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	68a2      	ldr	r2, [r4, #8]
 80077b0:	7da0      	ldrb	r0, [r4, #22]
 80077b2:	3304      	adds	r3, #4
 80077b4:	444a      	add	r2, r9
 80077b6:	1bdb      	subs	r3, r3, r7
 80077b8:	2104      	movs	r1, #4
 80077ba:	f080 0001 	eor.w	r0, r0, #1
 80077be:	60a2      	str	r2, [r4, #8]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	7561      	strb	r1, [r4, #21]
 80077c4:	b003      	add	sp, #12
 80077c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ca:	2104      	movs	r1, #4
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fd67 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80077d2:	b1c8      	cbz	r0, 8007808 <ucdr_serialize_endian_uint32_t+0xd0>
 80077d4:	2d01      	cmp	r5, #1
 80077d6:	68a3      	ldr	r3, [r4, #8]
 80077d8:	d01c      	beq.n	8007814 <ucdr_serialize_endian_uint32_t+0xdc>
 80077da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	68a3      	ldr	r3, [r4, #8]
 80077e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80077e6:	705a      	strb	r2, [r3, #1]
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80077ee:	709a      	strb	r2, [r3, #2]
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80077f6:	70da      	strb	r2, [r3, #3]
 80077f8:	68a2      	ldr	r2, [r4, #8]
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	3204      	adds	r2, #4
 80077fe:	3304      	adds	r3, #4
 8007800:	2104      	movs	r1, #4
 8007802:	60a2      	str	r2, [r4, #8]
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	7561      	strb	r1, [r4, #21]
 8007808:	7da0      	ldrb	r0, [r4, #22]
 800780a:	f080 0001 	eor.w	r0, r0, #1
 800780e:	b003      	add	sp, #12
 8007810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007814:	9a01      	ldr	r2, [sp, #4]
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	e7ee      	b.n	80077f8 <ucdr_serialize_endian_uint32_t+0xc0>
 800781a:	68a2      	ldr	r2, [r4, #8]
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	7da0      	ldrb	r0, [r4, #22]
 8007820:	f884 8015 	strb.w	r8, [r4, #21]
 8007824:	1bd2      	subs	r2, r2, r7
 8007826:	1bdb      	subs	r3, r3, r7
 8007828:	f080 0001 	eor.w	r0, r0, #1
 800782c:	60a2      	str	r2, [r4, #8]
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	b003      	add	sp, #12
 8007832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007836:	68a3      	ldr	r3, [r4, #8]
 8007838:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e7ad      	b.n	80077ac <ucdr_serialize_endian_uint32_t+0x74>
 8007850:	ad01      	add	r5, sp, #4
 8007852:	4629      	mov	r1, r5
 8007854:	463a      	mov	r2, r7
 8007856:	4630      	mov	r0, r6
 8007858:	f009 f821 	bl	801089e <memcpy>
 800785c:	68a0      	ldr	r0, [r4, #8]
 800785e:	464a      	mov	r2, r9
 8007860:	19e9      	adds	r1, r5, r7
 8007862:	f009 f81c 	bl	801089e <memcpy>
 8007866:	e7a1      	b.n	80077ac <ucdr_serialize_endian_uint32_t+0x74>

08007868 <ucdr_deserialize_uint32_t>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	460d      	mov	r5, r1
 800786e:	2104      	movs	r1, #4
 8007870:	4604      	mov	r4, r0
 8007872:	f000 fd69 	bl	8008348 <ucdr_buffer_alignment>
 8007876:	4601      	mov	r1, r0
 8007878:	4620      	mov	r0, r4
 800787a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800787e:	f000 fda7 	bl	80083d0 <ucdr_advance_buffer>
 8007882:	2104      	movs	r1, #4
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fcff 	bl	8008288 <ucdr_check_buffer_available_for>
 800788a:	2800      	cmp	r0, #0
 800788c:	d138      	bne.n	8007900 <ucdr_deserialize_uint32_t+0x98>
 800788e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007892:	42b7      	cmp	r7, r6
 8007894:	d92f      	bls.n	80078f6 <ucdr_deserialize_uint32_t+0x8e>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	60a7      	str	r7, [r4, #8]
 800789a:	1bbf      	subs	r7, r7, r6
 800789c:	443b      	add	r3, r7
 800789e:	f1c7 0904 	rsb	r9, r7, #4
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	4649      	mov	r1, r9
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 fcfa 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d046      	beq.n	800793e <ucdr_deserialize_uint32_t+0xd6>
 80078b0:	7d23      	ldrb	r3, [r4, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d05c      	beq.n	8007970 <ucdr_deserialize_uint32_t+0x108>
 80078b6:	78f3      	ldrb	r3, [r6, #3]
 80078b8:	702b      	strb	r3, [r5, #0]
 80078ba:	2f00      	cmp	r7, #0
 80078bc:	d04c      	beq.n	8007958 <ucdr_deserialize_uint32_t+0xf0>
 80078be:	78b3      	ldrb	r3, [r6, #2]
 80078c0:	706b      	strb	r3, [r5, #1]
 80078c2:	2f01      	cmp	r7, #1
 80078c4:	f105 0302 	add.w	r3, r5, #2
 80078c8:	d04a      	beq.n	8007960 <ucdr_deserialize_uint32_t+0xf8>
 80078ca:	7873      	ldrb	r3, [r6, #1]
 80078cc:	70ab      	strb	r3, [r5, #2]
 80078ce:	2f02      	cmp	r7, #2
 80078d0:	f105 0303 	add.w	r3, r5, #3
 80078d4:	d048      	beq.n	8007968 <ucdr_deserialize_uint32_t+0x100>
 80078d6:	7833      	ldrb	r3, [r6, #0]
 80078d8:	70eb      	strb	r3, [r5, #3]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	68a2      	ldr	r2, [r4, #8]
 80078de:	7da0      	ldrb	r0, [r4, #22]
 80078e0:	2104      	movs	r1, #4
 80078e2:	3304      	adds	r3, #4
 80078e4:	444a      	add	r2, r9
 80078e6:	1bdb      	subs	r3, r3, r7
 80078e8:	7561      	strb	r1, [r4, #21]
 80078ea:	60a2      	str	r2, [r4, #8]
 80078ec:	6123      	str	r3, [r4, #16]
 80078ee:	f080 0001 	eor.w	r0, r0, #1
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	2104      	movs	r1, #4
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fcd1 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80078fe:	b1b0      	cbz	r0, 800792e <ucdr_deserialize_uint32_t+0xc6>
 8007900:	7d23      	ldrb	r3, [r4, #20]
 8007902:	2b01      	cmp	r3, #1
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	d017      	beq.n	8007938 <ucdr_deserialize_uint32_t+0xd0>
 8007908:	78db      	ldrb	r3, [r3, #3]
 800790a:	702b      	strb	r3, [r5, #0]
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	789b      	ldrb	r3, [r3, #2]
 8007910:	706b      	strb	r3, [r5, #1]
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	70ab      	strb	r3, [r5, #2]
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	70eb      	strb	r3, [r5, #3]
 800791e:	68a2      	ldr	r2, [r4, #8]
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	3204      	adds	r2, #4
 8007924:	3304      	adds	r3, #4
 8007926:	2104      	movs	r1, #4
 8007928:	60a2      	str	r2, [r4, #8]
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	7561      	strb	r1, [r4, #21]
 800792e:	7da0      	ldrb	r0, [r4, #22]
 8007930:	f080 0001 	eor.w	r0, r0, #1
 8007934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	e7ef      	b.n	800791e <ucdr_deserialize_uint32_t+0xb6>
 800793e:	68a2      	ldr	r2, [r4, #8]
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	7da0      	ldrb	r0, [r4, #22]
 8007944:	f884 8015 	strb.w	r8, [r4, #21]
 8007948:	1bd2      	subs	r2, r2, r7
 800794a:	1bdb      	subs	r3, r3, r7
 800794c:	60a2      	str	r2, [r4, #8]
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	f080 0001 	eor.w	r0, r0, #1
 8007954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007958:	68a3      	ldr	r3, [r4, #8]
 800795a:	789b      	ldrb	r3, [r3, #2]
 800795c:	706b      	strb	r3, [r5, #1]
 800795e:	1cab      	adds	r3, r5, #2
 8007960:	68a2      	ldr	r2, [r4, #8]
 8007962:	7852      	ldrb	r2, [r2, #1]
 8007964:	f803 2b01 	strb.w	r2, [r3], #1
 8007968:	68a2      	ldr	r2, [r4, #8]
 800796a:	7812      	ldrb	r2, [r2, #0]
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e7b4      	b.n	80078da <ucdr_deserialize_uint32_t+0x72>
 8007970:	4631      	mov	r1, r6
 8007972:	463a      	mov	r2, r7
 8007974:	4628      	mov	r0, r5
 8007976:	f008 ff92 	bl	801089e <memcpy>
 800797a:	68a1      	ldr	r1, [r4, #8]
 800797c:	464a      	mov	r2, r9
 800797e:	19e8      	adds	r0, r5, r7
 8007980:	f008 ff8d 	bl	801089e <memcpy>
 8007984:	e7a9      	b.n	80078da <ucdr_deserialize_uint32_t+0x72>
 8007986:	bf00      	nop

08007988 <ucdr_deserialize_endian_uint32_t>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	460e      	mov	r6, r1
 800798e:	2104      	movs	r1, #4
 8007990:	4604      	mov	r4, r0
 8007992:	4615      	mov	r5, r2
 8007994:	f000 fcd8 	bl	8008348 <ucdr_buffer_alignment>
 8007998:	4601      	mov	r1, r0
 800799a:	4620      	mov	r0, r4
 800799c:	f894 9015 	ldrb.w	r9, [r4, #21]
 80079a0:	f000 fd16 	bl	80083d0 <ucdr_advance_buffer>
 80079a4:	2104      	movs	r1, #4
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 fc6e 	bl	8008288 <ucdr_check_buffer_available_for>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d13c      	bne.n	8007a2a <ucdr_deserialize_endian_uint32_t+0xa2>
 80079b0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80079b4:	42bb      	cmp	r3, r7
 80079b6:	d933      	bls.n	8007a20 <ucdr_deserialize_endian_uint32_t+0x98>
 80079b8:	eba3 0807 	sub.w	r8, r3, r7
 80079bc:	60a3      	str	r3, [r4, #8]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	f1c8 0a04 	rsb	sl, r8, #4
 80079c4:	4443      	add	r3, r8
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	4651      	mov	r1, sl
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 fc68 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d048      	beq.n	8007a66 <ucdr_deserialize_endian_uint32_t+0xde>
 80079d4:	2e01      	cmp	r6, #1
 80079d6:	d061      	beq.n	8007a9c <ucdr_deserialize_endian_uint32_t+0x114>
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	702b      	strb	r3, [r5, #0]
 80079dc:	f1b8 0f00 	cmp.w	r8, #0
 80079e0:	d050      	beq.n	8007a84 <ucdr_deserialize_endian_uint32_t+0xfc>
 80079e2:	78bb      	ldrb	r3, [r7, #2]
 80079e4:	706b      	strb	r3, [r5, #1]
 80079e6:	f1b8 0f01 	cmp.w	r8, #1
 80079ea:	f105 0302 	add.w	r3, r5, #2
 80079ee:	d04d      	beq.n	8007a8c <ucdr_deserialize_endian_uint32_t+0x104>
 80079f0:	787b      	ldrb	r3, [r7, #1]
 80079f2:	70ab      	strb	r3, [r5, #2]
 80079f4:	f1b8 0f02 	cmp.w	r8, #2
 80079f8:	f105 0303 	add.w	r3, r5, #3
 80079fc:	d04a      	beq.n	8007a94 <ucdr_deserialize_endian_uint32_t+0x10c>
 80079fe:	783b      	ldrb	r3, [r7, #0]
 8007a00:	70eb      	strb	r3, [r5, #3]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	68a2      	ldr	r2, [r4, #8]
 8007a06:	7da0      	ldrb	r0, [r4, #22]
 8007a08:	2104      	movs	r1, #4
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4452      	add	r2, sl
 8007a0e:	eba3 0308 	sub.w	r3, r3, r8
 8007a12:	7561      	strb	r1, [r4, #21]
 8007a14:	60a2      	str	r2, [r4, #8]
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	f080 0001 	eor.w	r0, r0, #1
 8007a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a20:	2104      	movs	r1, #4
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fc3c 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007a28:	b1a8      	cbz	r0, 8007a56 <ucdr_deserialize_endian_uint32_t+0xce>
 8007a2a:	2e01      	cmp	r6, #1
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	d017      	beq.n	8007a60 <ucdr_deserialize_endian_uint32_t+0xd8>
 8007a30:	78db      	ldrb	r3, [r3, #3]
 8007a32:	702b      	strb	r3, [r5, #0]
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	789b      	ldrb	r3, [r3, #2]
 8007a38:	706b      	strb	r3, [r5, #1]
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	70ab      	strb	r3, [r5, #2]
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	70eb      	strb	r3, [r5, #3]
 8007a46:	68a2      	ldr	r2, [r4, #8]
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	3204      	adds	r2, #4
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	2104      	movs	r1, #4
 8007a50:	60a2      	str	r2, [r4, #8]
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	7561      	strb	r1, [r4, #21]
 8007a56:	7da0      	ldrb	r0, [r4, #22]
 8007a58:	f080 0001 	eor.w	r0, r0, #1
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	e7ef      	b.n	8007a46 <ucdr_deserialize_endian_uint32_t+0xbe>
 8007a66:	68a2      	ldr	r2, [r4, #8]
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	7da0      	ldrb	r0, [r4, #22]
 8007a6c:	f884 9015 	strb.w	r9, [r4, #21]
 8007a70:	eba2 0208 	sub.w	r2, r2, r8
 8007a74:	eba3 0308 	sub.w	r3, r3, r8
 8007a78:	60a2      	str	r2, [r4, #8]
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	f080 0001 	eor.w	r0, r0, #1
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	68a3      	ldr	r3, [r4, #8]
 8007a86:	789b      	ldrb	r3, [r3, #2]
 8007a88:	706b      	strb	r3, [r5, #1]
 8007a8a:	1cab      	adds	r3, r5, #2
 8007a8c:	68a2      	ldr	r2, [r4, #8]
 8007a8e:	7852      	ldrb	r2, [r2, #1]
 8007a90:	f803 2b01 	strb.w	r2, [r3], #1
 8007a94:	68a2      	ldr	r2, [r4, #8]
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e7b2      	b.n	8007a02 <ucdr_deserialize_endian_uint32_t+0x7a>
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4642      	mov	r2, r8
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f008 fefc 	bl	801089e <memcpy>
 8007aa6:	68a1      	ldr	r1, [r4, #8]
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	eb05 0008 	add.w	r0, r5, r8
 8007aae:	f008 fef6 	bl	801089e <memcpy>
 8007ab2:	e7a6      	b.n	8007a02 <ucdr_deserialize_endian_uint32_t+0x7a>

08007ab4 <ucdr_serialize_uint64_t>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	2108      	movs	r1, #8
 8007aba:	b082      	sub	sp, #8
 8007abc:	4604      	mov	r4, r0
 8007abe:	e9cd 2300 	strd	r2, r3, [sp]
 8007ac2:	f000 fc41 	bl	8008348 <ucdr_buffer_alignment>
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4620      	mov	r0, r4
 8007aca:	7d67      	ldrb	r7, [r4, #21]
 8007acc:	f000 fc80 	bl	80083d0 <ucdr_advance_buffer>
 8007ad0:	2108      	movs	r1, #8
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fbd8 	bl	8008288 <ucdr_check_buffer_available_for>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d14e      	bne.n	8007b7a <ucdr_serialize_uint64_t+0xc6>
 8007adc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	d945      	bls.n	8007b70 <ucdr_serialize_uint64_t+0xbc>
 8007ae4:	1b5e      	subs	r6, r3, r5
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	f1c6 0808 	rsb	r8, r6, #8
 8007aee:	4433      	add	r3, r6
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	4641      	mov	r1, r8
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fbd3 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d074      	beq.n	8007be8 <ucdr_serialize_uint64_t+0x134>
 8007afe:	7d23      	ldrb	r3, [r4, #20]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	f000 809b 	beq.w	8007c3c <ucdr_serialize_uint64_t+0x188>
 8007b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b0a:	702b      	strb	r3, [r5, #0]
 8007b0c:	2e00      	cmp	r6, #0
 8007b0e:	d078      	beq.n	8007c02 <ucdr_serialize_uint64_t+0x14e>
 8007b10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b14:	706b      	strb	r3, [r5, #1]
 8007b16:	2e01      	cmp	r6, #1
 8007b18:	d077      	beq.n	8007c0a <ucdr_serialize_uint64_t+0x156>
 8007b1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007b1e:	70ab      	strb	r3, [r5, #2]
 8007b20:	2e02      	cmp	r6, #2
 8007b22:	d076      	beq.n	8007c12 <ucdr_serialize_uint64_t+0x15e>
 8007b24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007b28:	70eb      	strb	r3, [r5, #3]
 8007b2a:	2e03      	cmp	r6, #3
 8007b2c:	d075      	beq.n	8007c1a <ucdr_serialize_uint64_t+0x166>
 8007b2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b32:	712b      	strb	r3, [r5, #4]
 8007b34:	2e04      	cmp	r6, #4
 8007b36:	d074      	beq.n	8007c22 <ucdr_serialize_uint64_t+0x16e>
 8007b38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007b3c:	716b      	strb	r3, [r5, #5]
 8007b3e:	2e05      	cmp	r6, #5
 8007b40:	d073      	beq.n	8007c2a <ucdr_serialize_uint64_t+0x176>
 8007b42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007b46:	71ab      	strb	r3, [r5, #6]
 8007b48:	2e06      	cmp	r6, #6
 8007b4a:	d072      	beq.n	8007c32 <ucdr_serialize_uint64_t+0x17e>
 8007b4c:	f89d 3000 	ldrb.w	r3, [sp]
 8007b50:	71eb      	strb	r3, [r5, #7]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	68a2      	ldr	r2, [r4, #8]
 8007b56:	7da0      	ldrb	r0, [r4, #22]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	1b9e      	subs	r6, r3, r6
 8007b5c:	4442      	add	r2, r8
 8007b5e:	2308      	movs	r3, #8
 8007b60:	f080 0001 	eor.w	r0, r0, #1
 8007b64:	60a2      	str	r2, [r4, #8]
 8007b66:	6126      	str	r6, [r4, #16]
 8007b68:	7563      	strb	r3, [r4, #21]
 8007b6a:	b002      	add	sp, #8
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	2108      	movs	r1, #8
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fb94 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007b78:	b350      	cbz	r0, 8007bd0 <ucdr_serialize_uint64_t+0x11c>
 8007b7a:	7d23      	ldrb	r3, [r4, #20]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d02d      	beq.n	8007bdc <ucdr_serialize_uint64_t+0x128>
 8007b80:	68a3      	ldr	r3, [r4, #8]
 8007b82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	68a3      	ldr	r3, [r4, #8]
 8007b8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b8e:	705a      	strb	r2, [r3, #1]
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007b96:	709a      	strb	r2, [r3, #2]
 8007b98:	68a3      	ldr	r3, [r4, #8]
 8007b9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b9e:	70da      	strb	r2, [r3, #3]
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007ba6:	711a      	strb	r2, [r3, #4]
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007bae:	715a      	strb	r2, [r3, #5]
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007bb6:	719a      	strb	r2, [r3, #6]
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	f89d 2000 	ldrb.w	r2, [sp]
 8007bbe:	71da      	strb	r2, [r3, #7]
 8007bc0:	68a2      	ldr	r2, [r4, #8]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	3208      	adds	r2, #8
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	2108      	movs	r1, #8
 8007bca:	60a2      	str	r2, [r4, #8]
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	7561      	strb	r1, [r4, #21]
 8007bd0:	7da0      	ldrb	r0, [r4, #22]
 8007bd2:	f080 0001 	eor.w	r0, r0, #1
 8007bd6:	b002      	add	sp, #8
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	466b      	mov	r3, sp
 8007bde:	cb03      	ldmia	r3!, {r0, r1}
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	6018      	str	r0, [r3, #0]
 8007be4:	6059      	str	r1, [r3, #4]
 8007be6:	e7eb      	b.n	8007bc0 <ucdr_serialize_uint64_t+0x10c>
 8007be8:	68a2      	ldr	r2, [r4, #8]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	7da0      	ldrb	r0, [r4, #22]
 8007bee:	7567      	strb	r7, [r4, #21]
 8007bf0:	1b92      	subs	r2, r2, r6
 8007bf2:	1b9b      	subs	r3, r3, r6
 8007bf4:	f080 0001 	eor.w	r0, r0, #1
 8007bf8:	60a2      	str	r2, [r4, #8]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	b002      	add	sp, #8
 8007bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	68a3      	ldr	r3, [r4, #8]
 8007c34:	f89d 2000 	ldrb.w	r2, [sp]
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e78a      	b.n	8007b52 <ucdr_serialize_uint64_t+0x9e>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	466d      	mov	r5, sp
 8007c40:	4629      	mov	r1, r5
 8007c42:	4632      	mov	r2, r6
 8007c44:	f008 fe2b 	bl	801089e <memcpy>
 8007c48:	68a0      	ldr	r0, [r4, #8]
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	19a9      	adds	r1, r5, r6
 8007c4e:	f008 fe26 	bl	801089e <memcpy>
 8007c52:	e77e      	b.n	8007b52 <ucdr_serialize_uint64_t+0x9e>

08007c54 <ucdr_serialize_int16_t>:
 8007c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4604      	mov	r4, r0
 8007c60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007c64:	f000 fb70 	bl	8008348 <ucdr_buffer_alignment>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	7d67      	ldrb	r7, [r4, #21]
 8007c6e:	f000 fbaf 	bl	80083d0 <ucdr_advance_buffer>
 8007c72:	2102      	movs	r1, #2
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fb07 	bl	8008288 <ucdr_check_buffer_available_for>
 8007c7a:	bb78      	cbnz	r0, 8007cdc <ucdr_serialize_int16_t+0x88>
 8007c7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	d926      	bls.n	8007cd2 <ucdr_serialize_int16_t+0x7e>
 8007c84:	1b5e      	subs	r6, r3, r5
 8007c86:	60a3      	str	r3, [r4, #8]
 8007c88:	6923      	ldr	r3, [r4, #16]
 8007c8a:	f1c6 0802 	rsb	r8, r6, #2
 8007c8e:	4433      	add	r3, r6
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	4641      	mov	r1, r8
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fb03 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d03b      	beq.n	8007d16 <ucdr_serialize_int16_t+0xc2>
 8007c9e:	7d23      	ldrb	r3, [r4, #20]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d04a      	beq.n	8007d3a <ucdr_serialize_int16_t+0xe6>
 8007ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ca8:	702b      	strb	r3, [r5, #0]
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d040      	beq.n	8007d30 <ucdr_serialize_int16_t+0xdc>
 8007cae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007cb2:	706b      	strb	r3, [r5, #1]
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	68a2      	ldr	r2, [r4, #8]
 8007cb8:	7da0      	ldrb	r0, [r4, #22]
 8007cba:	3302      	adds	r3, #2
 8007cbc:	1b9e      	subs	r6, r3, r6
 8007cbe:	4442      	add	r2, r8
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f080 0001 	eor.w	r0, r0, #1
 8007cc6:	60a2      	str	r2, [r4, #8]
 8007cc8:	6126      	str	r6, [r4, #16]
 8007cca:	7563      	strb	r3, [r4, #21]
 8007ccc:	b002      	add	sp, #8
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd2:	2102      	movs	r1, #2
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fae3 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007cda:	b190      	cbz	r0, 8007d02 <ucdr_serialize_int16_t+0xae>
 8007cdc:	7d23      	ldrb	r3, [r4, #20]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	d014      	beq.n	8007d0e <ucdr_serialize_int16_t+0xba>
 8007ce4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007cf0:	705a      	strb	r2, [r3, #1]
 8007cf2:	68a2      	ldr	r2, [r4, #8]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	3202      	adds	r2, #2
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	60a2      	str	r2, [r4, #8]
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	7561      	strb	r1, [r4, #21]
 8007d02:	7da0      	ldrb	r0, [r4, #22]
 8007d04:	f080 0001 	eor.w	r0, r0, #1
 8007d08:	b002      	add	sp, #8
 8007d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e7ed      	b.n	8007cf2 <ucdr_serialize_int16_t+0x9e>
 8007d16:	68a2      	ldr	r2, [r4, #8]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	7da0      	ldrb	r0, [r4, #22]
 8007d1c:	7567      	strb	r7, [r4, #21]
 8007d1e:	1b92      	subs	r2, r2, r6
 8007d20:	1b9b      	subs	r3, r3, r6
 8007d22:	f080 0001 	eor.w	r0, r0, #1
 8007d26:	60a2      	str	r2, [r4, #8]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	b002      	add	sp, #8
 8007d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e7bc      	b.n	8007cb4 <ucdr_serialize_int16_t+0x60>
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f10d 0506 	add.w	r5, sp, #6
 8007d40:	4629      	mov	r1, r5
 8007d42:	4632      	mov	r2, r6
 8007d44:	f008 fdab 	bl	801089e <memcpy>
 8007d48:	68a0      	ldr	r0, [r4, #8]
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	19a9      	adds	r1, r5, r6
 8007d4e:	f008 fda6 	bl	801089e <memcpy>
 8007d52:	e7af      	b.n	8007cb4 <ucdr_serialize_int16_t+0x60>

08007d54 <ucdr_deserialize_int16_t>:
 8007d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d58:	460d      	mov	r5, r1
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	f000 faf3 	bl	8008348 <ucdr_buffer_alignment>
 8007d62:	4601      	mov	r1, r0
 8007d64:	4620      	mov	r0, r4
 8007d66:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007d6a:	f000 fb31 	bl	80083d0 <ucdr_advance_buffer>
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fa89 	bl	8008288 <ucdr_check_buffer_available_for>
 8007d76:	bb60      	cbnz	r0, 8007dd2 <ucdr_deserialize_int16_t+0x7e>
 8007d78:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007d7c:	42be      	cmp	r6, r7
 8007d7e:	d923      	bls.n	8007dc8 <ucdr_deserialize_int16_t+0x74>
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	60a6      	str	r6, [r4, #8]
 8007d84:	1bf6      	subs	r6, r6, r7
 8007d86:	4433      	add	r3, r6
 8007d88:	f1c6 0902 	rsb	r9, r6, #2
 8007d8c:	6123      	str	r3, [r4, #16]
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fa85 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d034      	beq.n	8007e04 <ucdr_deserialize_int16_t+0xb0>
 8007d9a:	7d23      	ldrb	r3, [r4, #20]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d042      	beq.n	8007e26 <ucdr_deserialize_int16_t+0xd2>
 8007da0:	787b      	ldrb	r3, [r7, #1]
 8007da2:	702b      	strb	r3, [r5, #0]
 8007da4:	2e00      	cmp	r6, #0
 8007da6:	d03a      	beq.n	8007e1e <ucdr_deserialize_int16_t+0xca>
 8007da8:	783b      	ldrb	r3, [r7, #0]
 8007daa:	706b      	strb	r3, [r5, #1]
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	68a2      	ldr	r2, [r4, #8]
 8007db0:	7da0      	ldrb	r0, [r4, #22]
 8007db2:	2102      	movs	r1, #2
 8007db4:	3302      	adds	r3, #2
 8007db6:	444a      	add	r2, r9
 8007db8:	1b9b      	subs	r3, r3, r6
 8007dba:	7561      	strb	r1, [r4, #21]
 8007dbc:	60a2      	str	r2, [r4, #8]
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	f080 0001 	eor.w	r0, r0, #1
 8007dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc8:	2102      	movs	r1, #2
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fa68 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007dd0:	b180      	cbz	r0, 8007df4 <ucdr_deserialize_int16_t+0xa0>
 8007dd2:	7d23      	ldrb	r3, [r4, #20]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	68a3      	ldr	r3, [r4, #8]
 8007dd8:	d011      	beq.n	8007dfe <ucdr_deserialize_int16_t+0xaa>
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	702b      	strb	r3, [r5, #0]
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	706b      	strb	r3, [r5, #1]
 8007de4:	68a2      	ldr	r2, [r4, #8]
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	3202      	adds	r2, #2
 8007dea:	3302      	adds	r3, #2
 8007dec:	2102      	movs	r1, #2
 8007dee:	60a2      	str	r2, [r4, #8]
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	7561      	strb	r1, [r4, #21]
 8007df4:	7da0      	ldrb	r0, [r4, #22]
 8007df6:	f080 0001 	eor.w	r0, r0, #1
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	802b      	strh	r3, [r5, #0]
 8007e02:	e7ef      	b.n	8007de4 <ucdr_deserialize_int16_t+0x90>
 8007e04:	68a2      	ldr	r2, [r4, #8]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	7da0      	ldrb	r0, [r4, #22]
 8007e0a:	f884 8015 	strb.w	r8, [r4, #21]
 8007e0e:	1b92      	subs	r2, r2, r6
 8007e10:	1b9b      	subs	r3, r3, r6
 8007e12:	60a2      	str	r2, [r4, #8]
 8007e14:	6123      	str	r3, [r4, #16]
 8007e16:	f080 0001 	eor.w	r0, r0, #1
 8007e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1e:	68a3      	ldr	r3, [r4, #8]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	706b      	strb	r3, [r5, #1]
 8007e24:	e7c2      	b.n	8007dac <ucdr_deserialize_int16_t+0x58>
 8007e26:	4639      	mov	r1, r7
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f008 fd37 	bl	801089e <memcpy>
 8007e30:	68a1      	ldr	r1, [r4, #8]
 8007e32:	464a      	mov	r2, r9
 8007e34:	19a8      	adds	r0, r5, r6
 8007e36:	f008 fd32 	bl	801089e <memcpy>
 8007e3a:	e7b7      	b.n	8007dac <ucdr_deserialize_int16_t+0x58>

08007e3c <ucdr_deserialize_int32_t>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	460d      	mov	r5, r1
 8007e42:	2104      	movs	r1, #4
 8007e44:	4604      	mov	r4, r0
 8007e46:	f000 fa7f 	bl	8008348 <ucdr_buffer_alignment>
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007e52:	f000 fabd 	bl	80083d0 <ucdr_advance_buffer>
 8007e56:	2104      	movs	r1, #4
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fa15 	bl	8008288 <ucdr_check_buffer_available_for>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d138      	bne.n	8007ed4 <ucdr_deserialize_int32_t+0x98>
 8007e62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007e66:	42b7      	cmp	r7, r6
 8007e68:	d92f      	bls.n	8007eca <ucdr_deserialize_int32_t+0x8e>
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	60a7      	str	r7, [r4, #8]
 8007e6e:	1bbf      	subs	r7, r7, r6
 8007e70:	443b      	add	r3, r7
 8007e72:	f1c7 0904 	rsb	r9, r7, #4
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fa10 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d046      	beq.n	8007f12 <ucdr_deserialize_int32_t+0xd6>
 8007e84:	7d23      	ldrb	r3, [r4, #20]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d05c      	beq.n	8007f44 <ucdr_deserialize_int32_t+0x108>
 8007e8a:	78f3      	ldrb	r3, [r6, #3]
 8007e8c:	702b      	strb	r3, [r5, #0]
 8007e8e:	2f00      	cmp	r7, #0
 8007e90:	d04c      	beq.n	8007f2c <ucdr_deserialize_int32_t+0xf0>
 8007e92:	78b3      	ldrb	r3, [r6, #2]
 8007e94:	706b      	strb	r3, [r5, #1]
 8007e96:	2f01      	cmp	r7, #1
 8007e98:	f105 0302 	add.w	r3, r5, #2
 8007e9c:	d04a      	beq.n	8007f34 <ucdr_deserialize_int32_t+0xf8>
 8007e9e:	7873      	ldrb	r3, [r6, #1]
 8007ea0:	70ab      	strb	r3, [r5, #2]
 8007ea2:	2f02      	cmp	r7, #2
 8007ea4:	f105 0303 	add.w	r3, r5, #3
 8007ea8:	d048      	beq.n	8007f3c <ucdr_deserialize_int32_t+0x100>
 8007eaa:	7833      	ldrb	r3, [r6, #0]
 8007eac:	70eb      	strb	r3, [r5, #3]
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	68a2      	ldr	r2, [r4, #8]
 8007eb2:	7da0      	ldrb	r0, [r4, #22]
 8007eb4:	2104      	movs	r1, #4
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	444a      	add	r2, r9
 8007eba:	1bdb      	subs	r3, r3, r7
 8007ebc:	7561      	strb	r1, [r4, #21]
 8007ebe:	60a2      	str	r2, [r4, #8]
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	f080 0001 	eor.w	r0, r0, #1
 8007ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eca:	2104      	movs	r1, #4
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 f9e7 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007ed2:	b1b0      	cbz	r0, 8007f02 <ucdr_deserialize_int32_t+0xc6>
 8007ed4:	7d23      	ldrb	r3, [r4, #20]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	d017      	beq.n	8007f0c <ucdr_deserialize_int32_t+0xd0>
 8007edc:	78db      	ldrb	r3, [r3, #3]
 8007ede:	702b      	strb	r3, [r5, #0]
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	789b      	ldrb	r3, [r3, #2]
 8007ee4:	706b      	strb	r3, [r5, #1]
 8007ee6:	68a3      	ldr	r3, [r4, #8]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	70ab      	strb	r3, [r5, #2]
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	70eb      	strb	r3, [r5, #3]
 8007ef2:	68a2      	ldr	r2, [r4, #8]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	3204      	adds	r2, #4
 8007ef8:	3304      	adds	r3, #4
 8007efa:	2104      	movs	r1, #4
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	6123      	str	r3, [r4, #16]
 8007f00:	7561      	strb	r1, [r4, #21]
 8007f02:	7da0      	ldrb	r0, [r4, #22]
 8007f04:	f080 0001 	eor.w	r0, r0, #1
 8007f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	e7ef      	b.n	8007ef2 <ucdr_deserialize_int32_t+0xb6>
 8007f12:	68a2      	ldr	r2, [r4, #8]
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	7da0      	ldrb	r0, [r4, #22]
 8007f18:	f884 8015 	strb.w	r8, [r4, #21]
 8007f1c:	1bd2      	subs	r2, r2, r7
 8007f1e:	1bdb      	subs	r3, r3, r7
 8007f20:	60a2      	str	r2, [r4, #8]
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	f080 0001 	eor.w	r0, r0, #1
 8007f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	789b      	ldrb	r3, [r3, #2]
 8007f30:	706b      	strb	r3, [r5, #1]
 8007f32:	1cab      	adds	r3, r5, #2
 8007f34:	68a2      	ldr	r2, [r4, #8]
 8007f36:	7852      	ldrb	r2, [r2, #1]
 8007f38:	f803 2b01 	strb.w	r2, [r3], #1
 8007f3c:	68a2      	ldr	r2, [r4, #8]
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e7b4      	b.n	8007eae <ucdr_deserialize_int32_t+0x72>
 8007f44:	4631      	mov	r1, r6
 8007f46:	463a      	mov	r2, r7
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f008 fca8 	bl	801089e <memcpy>
 8007f4e:	68a1      	ldr	r1, [r4, #8]
 8007f50:	464a      	mov	r2, r9
 8007f52:	19e8      	adds	r0, r5, r7
 8007f54:	f008 fca3 	bl	801089e <memcpy>
 8007f58:	e7a9      	b.n	8007eae <ucdr_deserialize_int32_t+0x72>
 8007f5a:	bf00      	nop

08007f5c <ucdr_serialize_double>:
 8007f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f60:	2108      	movs	r1, #8
 8007f62:	b082      	sub	sp, #8
 8007f64:	4604      	mov	r4, r0
 8007f66:	ed8d 0b00 	vstr	d0, [sp]
 8007f6a:	f000 f9ed 	bl	8008348 <ucdr_buffer_alignment>
 8007f6e:	4601      	mov	r1, r0
 8007f70:	4620      	mov	r0, r4
 8007f72:	7d67      	ldrb	r7, [r4, #21]
 8007f74:	f000 fa2c 	bl	80083d0 <ucdr_advance_buffer>
 8007f78:	2108      	movs	r1, #8
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f984 	bl	8008288 <ucdr_check_buffer_available_for>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d14e      	bne.n	8008022 <ucdr_serialize_double+0xc6>
 8007f84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007f88:	42ab      	cmp	r3, r5
 8007f8a:	d945      	bls.n	8008018 <ucdr_serialize_double+0xbc>
 8007f8c:	1b5e      	subs	r6, r3, r5
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	f1c6 0808 	rsb	r8, r6, #8
 8007f96:	4433      	add	r3, r6
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 f97f 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d074      	beq.n	8008090 <ucdr_serialize_double+0x134>
 8007fa6:	7d23      	ldrb	r3, [r4, #20]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f000 809b 	beq.w	80080e4 <ucdr_serialize_double+0x188>
 8007fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007fb2:	702b      	strb	r3, [r5, #0]
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	d078      	beq.n	80080aa <ucdr_serialize_double+0x14e>
 8007fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007fbc:	706b      	strb	r3, [r5, #1]
 8007fbe:	2e01      	cmp	r6, #1
 8007fc0:	d077      	beq.n	80080b2 <ucdr_serialize_double+0x156>
 8007fc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007fc6:	70ab      	strb	r3, [r5, #2]
 8007fc8:	2e02      	cmp	r6, #2
 8007fca:	d076      	beq.n	80080ba <ucdr_serialize_double+0x15e>
 8007fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007fd0:	70eb      	strb	r3, [r5, #3]
 8007fd2:	2e03      	cmp	r6, #3
 8007fd4:	d075      	beq.n	80080c2 <ucdr_serialize_double+0x166>
 8007fd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007fda:	712b      	strb	r3, [r5, #4]
 8007fdc:	2e04      	cmp	r6, #4
 8007fde:	d074      	beq.n	80080ca <ucdr_serialize_double+0x16e>
 8007fe0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8007fe4:	716b      	strb	r3, [r5, #5]
 8007fe6:	2e05      	cmp	r6, #5
 8007fe8:	d073      	beq.n	80080d2 <ucdr_serialize_double+0x176>
 8007fea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007fee:	71ab      	strb	r3, [r5, #6]
 8007ff0:	2e06      	cmp	r6, #6
 8007ff2:	d072      	beq.n	80080da <ucdr_serialize_double+0x17e>
 8007ff4:	f89d 3000 	ldrb.w	r3, [sp]
 8007ff8:	71eb      	strb	r3, [r5, #7]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	68a2      	ldr	r2, [r4, #8]
 8007ffe:	7da0      	ldrb	r0, [r4, #22]
 8008000:	3308      	adds	r3, #8
 8008002:	1b9e      	subs	r6, r3, r6
 8008004:	4442      	add	r2, r8
 8008006:	2308      	movs	r3, #8
 8008008:	f080 0001 	eor.w	r0, r0, #1
 800800c:	60a2      	str	r2, [r4, #8]
 800800e:	6126      	str	r6, [r4, #16]
 8008010:	7563      	strb	r3, [r4, #21]
 8008012:	b002      	add	sp, #8
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	2108      	movs	r1, #8
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f940 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8008020:	b350      	cbz	r0, 8008078 <ucdr_serialize_double+0x11c>
 8008022:	7d23      	ldrb	r3, [r4, #20]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d02d      	beq.n	8008084 <ucdr_serialize_double+0x128>
 8008028:	68a3      	ldr	r3, [r4, #8]
 800802a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008036:	705a      	strb	r2, [r3, #1]
 8008038:	68a3      	ldr	r3, [r4, #8]
 800803a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800803e:	709a      	strb	r2, [r3, #2]
 8008040:	68a3      	ldr	r3, [r4, #8]
 8008042:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008046:	70da      	strb	r2, [r3, #3]
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800804e:	711a      	strb	r2, [r3, #4]
 8008050:	68a3      	ldr	r3, [r4, #8]
 8008052:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008056:	715a      	strb	r2, [r3, #5]
 8008058:	68a3      	ldr	r3, [r4, #8]
 800805a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800805e:	719a      	strb	r2, [r3, #6]
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	f89d 2000 	ldrb.w	r2, [sp]
 8008066:	71da      	strb	r2, [r3, #7]
 8008068:	68a2      	ldr	r2, [r4, #8]
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	3208      	adds	r2, #8
 800806e:	3308      	adds	r3, #8
 8008070:	2108      	movs	r1, #8
 8008072:	60a2      	str	r2, [r4, #8]
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	7561      	strb	r1, [r4, #21]
 8008078:	7da0      	ldrb	r0, [r4, #22]
 800807a:	f080 0001 	eor.w	r0, r0, #1
 800807e:	b002      	add	sp, #8
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	466b      	mov	r3, sp
 8008086:	cb03      	ldmia	r3!, {r0, r1}
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	6018      	str	r0, [r3, #0]
 800808c:	6059      	str	r1, [r3, #4]
 800808e:	e7eb      	b.n	8008068 <ucdr_serialize_double+0x10c>
 8008090:	68a2      	ldr	r2, [r4, #8]
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	7da0      	ldrb	r0, [r4, #22]
 8008096:	7567      	strb	r7, [r4, #21]
 8008098:	1b92      	subs	r2, r2, r6
 800809a:	1b9b      	subs	r3, r3, r6
 800809c:	f080 0001 	eor.w	r0, r0, #1
 80080a0:	60a2      	str	r2, [r4, #8]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	b002      	add	sp, #8
 80080a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080aa:	68a3      	ldr	r3, [r4, #8]
 80080ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	f89d 2000 	ldrb.w	r2, [sp]
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e78a      	b.n	8007ffa <ucdr_serialize_double+0x9e>
 80080e4:	4628      	mov	r0, r5
 80080e6:	466d      	mov	r5, sp
 80080e8:	4629      	mov	r1, r5
 80080ea:	4632      	mov	r2, r6
 80080ec:	f008 fbd7 	bl	801089e <memcpy>
 80080f0:	68a0      	ldr	r0, [r4, #8]
 80080f2:	4642      	mov	r2, r8
 80080f4:	19a9      	adds	r1, r5, r6
 80080f6:	f008 fbd2 	bl	801089e <memcpy>
 80080fa:	e77e      	b.n	8007ffa <ucdr_serialize_double+0x9e>

080080fc <ucdr_deserialize_double>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	460d      	mov	r5, r1
 8008102:	2108      	movs	r1, #8
 8008104:	4604      	mov	r4, r0
 8008106:	f000 f91f 	bl	8008348 <ucdr_buffer_alignment>
 800810a:	4601      	mov	r1, r0
 800810c:	4620      	mov	r0, r4
 800810e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008112:	f000 f95d 	bl	80083d0 <ucdr_advance_buffer>
 8008116:	2108      	movs	r1, #8
 8008118:	4620      	mov	r0, r4
 800811a:	f000 f8b5 	bl	8008288 <ucdr_check_buffer_available_for>
 800811e:	2800      	cmp	r0, #0
 8008120:	d151      	bne.n	80081c6 <ucdr_deserialize_double+0xca>
 8008122:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008126:	42be      	cmp	r6, r7
 8008128:	d948      	bls.n	80081bc <ucdr_deserialize_double+0xc0>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	60a6      	str	r6, [r4, #8]
 800812e:	1bf6      	subs	r6, r6, r7
 8008130:	4433      	add	r3, r6
 8008132:	f1c6 0808 	rsb	r8, r6, #8
 8008136:	6123      	str	r3, [r4, #16]
 8008138:	4641      	mov	r1, r8
 800813a:	4620      	mov	r0, r4
 800813c:	f000 f8b0 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 8008140:	2800      	cmp	r0, #0
 8008142:	d06d      	beq.n	8008220 <ucdr_deserialize_double+0x124>
 8008144:	7d23      	ldrb	r3, [r4, #20]
 8008146:	2b01      	cmp	r3, #1
 8008148:	f000 8093 	beq.w	8008272 <ucdr_deserialize_double+0x176>
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	702b      	strb	r3, [r5, #0]
 8008150:	2e00      	cmp	r6, #0
 8008152:	d072      	beq.n	800823a <ucdr_deserialize_double+0x13e>
 8008154:	79bb      	ldrb	r3, [r7, #6]
 8008156:	706b      	strb	r3, [r5, #1]
 8008158:	2e01      	cmp	r6, #1
 800815a:	f105 0302 	add.w	r3, r5, #2
 800815e:	d070      	beq.n	8008242 <ucdr_deserialize_double+0x146>
 8008160:	797b      	ldrb	r3, [r7, #5]
 8008162:	70ab      	strb	r3, [r5, #2]
 8008164:	2e02      	cmp	r6, #2
 8008166:	f105 0303 	add.w	r3, r5, #3
 800816a:	d06e      	beq.n	800824a <ucdr_deserialize_double+0x14e>
 800816c:	793b      	ldrb	r3, [r7, #4]
 800816e:	70eb      	strb	r3, [r5, #3]
 8008170:	2e03      	cmp	r6, #3
 8008172:	f105 0304 	add.w	r3, r5, #4
 8008176:	d06c      	beq.n	8008252 <ucdr_deserialize_double+0x156>
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	712b      	strb	r3, [r5, #4]
 800817c:	2e04      	cmp	r6, #4
 800817e:	f105 0305 	add.w	r3, r5, #5
 8008182:	d06a      	beq.n	800825a <ucdr_deserialize_double+0x15e>
 8008184:	78bb      	ldrb	r3, [r7, #2]
 8008186:	716b      	strb	r3, [r5, #5]
 8008188:	2e05      	cmp	r6, #5
 800818a:	f105 0306 	add.w	r3, r5, #6
 800818e:	d068      	beq.n	8008262 <ucdr_deserialize_double+0x166>
 8008190:	787b      	ldrb	r3, [r7, #1]
 8008192:	71ab      	strb	r3, [r5, #6]
 8008194:	2e06      	cmp	r6, #6
 8008196:	f105 0307 	add.w	r3, r5, #7
 800819a:	d066      	beq.n	800826a <ucdr_deserialize_double+0x16e>
 800819c:	783b      	ldrb	r3, [r7, #0]
 800819e:	71eb      	strb	r3, [r5, #7]
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	68a2      	ldr	r2, [r4, #8]
 80081a4:	7da0      	ldrb	r0, [r4, #22]
 80081a6:	3308      	adds	r3, #8
 80081a8:	1b9e      	subs	r6, r3, r6
 80081aa:	2308      	movs	r3, #8
 80081ac:	4442      	add	r2, r8
 80081ae:	7563      	strb	r3, [r4, #21]
 80081b0:	60a2      	str	r2, [r4, #8]
 80081b2:	6126      	str	r6, [r4, #16]
 80081b4:	f080 0001 	eor.w	r0, r0, #1
 80081b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081bc:	2108      	movs	r1, #8
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 f86e 	bl	80082a0 <ucdr_check_final_buffer_behavior>
 80081c4:	b310      	cbz	r0, 800820c <ucdr_deserialize_double+0x110>
 80081c6:	7d23      	ldrb	r3, [r4, #20]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	d023      	beq.n	8008216 <ucdr_deserialize_double+0x11a>
 80081ce:	79db      	ldrb	r3, [r3, #7]
 80081d0:	702b      	strb	r3, [r5, #0]
 80081d2:	68a3      	ldr	r3, [r4, #8]
 80081d4:	799b      	ldrb	r3, [r3, #6]
 80081d6:	706b      	strb	r3, [r5, #1]
 80081d8:	68a3      	ldr	r3, [r4, #8]
 80081da:	795b      	ldrb	r3, [r3, #5]
 80081dc:	70ab      	strb	r3, [r5, #2]
 80081de:	68a3      	ldr	r3, [r4, #8]
 80081e0:	791b      	ldrb	r3, [r3, #4]
 80081e2:	70eb      	strb	r3, [r5, #3]
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	78db      	ldrb	r3, [r3, #3]
 80081e8:	712b      	strb	r3, [r5, #4]
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	789b      	ldrb	r3, [r3, #2]
 80081ee:	716b      	strb	r3, [r5, #5]
 80081f0:	68a3      	ldr	r3, [r4, #8]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	71ab      	strb	r3, [r5, #6]
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	71eb      	strb	r3, [r5, #7]
 80081fc:	68a2      	ldr	r2, [r4, #8]
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	3208      	adds	r2, #8
 8008202:	3308      	adds	r3, #8
 8008204:	2108      	movs	r1, #8
 8008206:	60a2      	str	r2, [r4, #8]
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	7561      	strb	r1, [r4, #21]
 800820c:	7da0      	ldrb	r0, [r4, #22]
 800820e:	f080 0001 	eor.w	r0, r0, #1
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	606b      	str	r3, [r5, #4]
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	e7ed      	b.n	80081fc <ucdr_deserialize_double+0x100>
 8008220:	68a2      	ldr	r2, [r4, #8]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	7da0      	ldrb	r0, [r4, #22]
 8008226:	f884 9015 	strb.w	r9, [r4, #21]
 800822a:	1b92      	subs	r2, r2, r6
 800822c:	1b9b      	subs	r3, r3, r6
 800822e:	60a2      	str	r2, [r4, #8]
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	f080 0001 	eor.w	r0, r0, #1
 8008236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	799b      	ldrb	r3, [r3, #6]
 800823e:	706b      	strb	r3, [r5, #1]
 8008240:	1cab      	adds	r3, r5, #2
 8008242:	68a2      	ldr	r2, [r4, #8]
 8008244:	7952      	ldrb	r2, [r2, #5]
 8008246:	f803 2b01 	strb.w	r2, [r3], #1
 800824a:	68a2      	ldr	r2, [r4, #8]
 800824c:	7912      	ldrb	r2, [r2, #4]
 800824e:	f803 2b01 	strb.w	r2, [r3], #1
 8008252:	68a2      	ldr	r2, [r4, #8]
 8008254:	78d2      	ldrb	r2, [r2, #3]
 8008256:	f803 2b01 	strb.w	r2, [r3], #1
 800825a:	68a2      	ldr	r2, [r4, #8]
 800825c:	7892      	ldrb	r2, [r2, #2]
 800825e:	f803 2b01 	strb.w	r2, [r3], #1
 8008262:	68a2      	ldr	r2, [r4, #8]
 8008264:	7852      	ldrb	r2, [r2, #1]
 8008266:	f803 2b01 	strb.w	r2, [r3], #1
 800826a:	68a2      	ldr	r2, [r4, #8]
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e796      	b.n	80081a0 <ucdr_deserialize_double+0xa4>
 8008272:	4639      	mov	r1, r7
 8008274:	4632      	mov	r2, r6
 8008276:	4628      	mov	r0, r5
 8008278:	f008 fb11 	bl	801089e <memcpy>
 800827c:	68a1      	ldr	r1, [r4, #8]
 800827e:	4642      	mov	r2, r8
 8008280:	19a8      	adds	r0, r5, r6
 8008282:	f008 fb0c 	bl	801089e <memcpy>
 8008286:	e78b      	b.n	80081a0 <ucdr_deserialize_double+0xa4>

08008288 <ucdr_check_buffer_available_for>:
 8008288:	7d83      	ldrb	r3, [r0, #22]
 800828a:	b93b      	cbnz	r3, 800829c <ucdr_check_buffer_available_for+0x14>
 800828c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008290:	4419      	add	r1, r3
 8008292:	4288      	cmp	r0, r1
 8008294:	bf34      	ite	cc
 8008296:	2000      	movcc	r0, #0
 8008298:	2001      	movcs	r0, #1
 800829a:	4770      	bx	lr
 800829c:	2000      	movs	r0, #0
 800829e:	4770      	bx	lr

080082a0 <ucdr_check_final_buffer_behavior>:
 80082a0:	7d83      	ldrb	r3, [r0, #22]
 80082a2:	b943      	cbnz	r3, 80082b6 <ucdr_check_final_buffer_behavior+0x16>
 80082a4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80082a8:	4291      	cmp	r1, r2
 80082aa:	b510      	push	{r4, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	d205      	bcs.n	80082bc <ucdr_check_final_buffer_behavior+0x1c>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	2300      	movs	r3, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	4770      	bx	lr
 80082bc:	6982      	ldr	r2, [r0, #24]
 80082be:	b13a      	cbz	r2, 80082d0 <ucdr_check_final_buffer_behavior+0x30>
 80082c0:	69c1      	ldr	r1, [r0, #28]
 80082c2:	4790      	blx	r2
 80082c4:	f080 0301 	eor.w	r3, r0, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	75a0      	strb	r0, [r4, #22]
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd10      	pop	{r4, pc}
 80082d0:	2001      	movs	r0, #1
 80082d2:	75a0      	strb	r0, [r4, #22]
 80082d4:	e7fa      	b.n	80082cc <ucdr_check_final_buffer_behavior+0x2c>
 80082d6:	bf00      	nop

080082d8 <ucdr_set_on_full_buffer_callback>:
 80082d8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <ucdr_init_buffer_origin_offset_endian>:
 80082e0:	b410      	push	{r4}
 80082e2:	9c01      	ldr	r4, [sp, #4]
 80082e4:	6001      	str	r1, [r0, #0]
 80082e6:	440a      	add	r2, r1
 80082e8:	6042      	str	r2, [r0, #4]
 80082ea:	190a      	adds	r2, r1, r4
 80082ec:	441c      	add	r4, r3
 80082ee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80082f2:	6082      	str	r2, [r0, #8]
 80082f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80082f8:	7503      	strb	r3, [r0, #20]
 80082fa:	2200      	movs	r2, #0
 80082fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008304:	7542      	strb	r2, [r0, #21]
 8008306:	7582      	strb	r2, [r0, #22]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop

0800830c <ucdr_init_buffer_origin_offset>:
 800830c:	b510      	push	{r4, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	9c04      	ldr	r4, [sp, #16]
 8008312:	9400      	str	r4, [sp, #0]
 8008314:	2401      	movs	r4, #1
 8008316:	9401      	str	r4, [sp, #4]
 8008318:	f7ff ffe2 	bl	80082e0 <ucdr_init_buffer_origin_offset_endian>
 800831c:	b002      	add	sp, #8
 800831e:	bd10      	pop	{r4, pc}

08008320 <ucdr_init_buffer_origin>:
 8008320:	b510      	push	{r4, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	2400      	movs	r4, #0
 8008326:	9400      	str	r4, [sp, #0]
 8008328:	f7ff fff0 	bl	800830c <ucdr_init_buffer_origin_offset>
 800832c:	b002      	add	sp, #8
 800832e:	bd10      	pop	{r4, pc}

08008330 <ucdr_init_buffer>:
 8008330:	2300      	movs	r3, #0
 8008332:	f7ff bff5 	b.w	8008320 <ucdr_init_buffer_origin>
 8008336:	bf00      	nop

08008338 <ucdr_alignment>:
 8008338:	fbb0 f3f1 	udiv	r3, r0, r1
 800833c:	fb03 0011 	mls	r0, r3, r1, r0
 8008340:	1a08      	subs	r0, r1, r0
 8008342:	3901      	subs	r1, #1
 8008344:	4008      	ands	r0, r1
 8008346:	4770      	bx	lr

08008348 <ucdr_buffer_alignment>:
 8008348:	7d43      	ldrb	r3, [r0, #21]
 800834a:	428b      	cmp	r3, r1
 800834c:	d208      	bcs.n	8008360 <ucdr_buffer_alignment+0x18>
 800834e:	6900      	ldr	r0, [r0, #16]
 8008350:	fbb0 f3f1 	udiv	r3, r0, r1
 8008354:	fb01 0013 	mls	r0, r1, r3, r0
 8008358:	1a08      	subs	r0, r1, r0
 800835a:	3901      	subs	r1, #1
 800835c:	4008      	ands	r0, r1
 800835e:	4770      	bx	lr
 8008360:	2000      	movs	r0, #0
 8008362:	4770      	bx	lr

08008364 <ucdr_align_to>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	f7ff ffed 	bl	8008348 <ucdr_buffer_alignment>
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	6921      	ldr	r1, [r4, #16]
 8008372:	7565      	strb	r5, [r4, #21]
 8008374:	181a      	adds	r2, r3, r0
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	4293      	cmp	r3, r2
 800837a:	4408      	add	r0, r1
 800837c:	bf28      	it	cs
 800837e:	4613      	movcs	r3, r2
 8008380:	6120      	str	r0, [r4, #16]
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop

08008388 <ucdr_buffer_length>:
 8008388:	6882      	ldr	r2, [r0, #8]
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	1a10      	subs	r0, r2, r0
 800838e:	4770      	bx	lr

08008390 <ucdr_buffer_remaining>:
 8008390:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008394:	1a10      	subs	r0, r2, r0
 8008396:	4770      	bx	lr

08008398 <ucdr_check_final_buffer_behavior_array>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	7d83      	ldrb	r3, [r0, #22]
 800839c:	b963      	cbnz	r3, 80083b8 <ucdr_check_final_buffer_behavior_array+0x20>
 800839e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	d308      	bcc.n	80083bc <ucdr_check_final_buffer_behavior_array+0x24>
 80083aa:	b139      	cbz	r1, 80083bc <ucdr_check_final_buffer_behavior_array+0x24>
 80083ac:	6983      	ldr	r3, [r0, #24]
 80083ae:	b163      	cbz	r3, 80083ca <ucdr_check_final_buffer_behavior_array+0x32>
 80083b0:	69c1      	ldr	r1, [r0, #28]
 80083b2:	4798      	blx	r3
 80083b4:	75a0      	strb	r0, [r4, #22]
 80083b6:	b108      	cbz	r0, 80083bc <ucdr_check_final_buffer_behavior_array+0x24>
 80083b8:	2000      	movs	r0, #0
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff ffe7 	bl	8008390 <ucdr_buffer_remaining>
 80083c2:	42a8      	cmp	r0, r5
 80083c4:	bf28      	it	cs
 80083c6:	4628      	movcs	r0, r5
 80083c8:	bd38      	pop	{r3, r4, r5, pc}
 80083ca:	2301      	movs	r3, #1
 80083cc:	7583      	strb	r3, [r0, #22]
 80083ce:	e7f3      	b.n	80083b8 <ucdr_check_final_buffer_behavior_array+0x20>

080083d0 <ucdr_advance_buffer>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	460d      	mov	r5, r1
 80083d6:	f7ff ff57 	bl	8008288 <ucdr_check_buffer_available_for>
 80083da:	b178      	cbz	r0, 80083fc <ucdr_advance_buffer+0x2c>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	68a2      	ldr	r2, [r4, #8]
 80083e0:	442b      	add	r3, r5
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	2301      	movs	r3, #1
 80083e6:	442a      	add	r2, r5
 80083e8:	7563      	strb	r3, [r4, #21]
 80083ea:	60a2      	str	r2, [r4, #8]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	68a2      	ldr	r2, [r4, #8]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	4402      	add	r2, r0
 80083f4:	4403      	add	r3, r0
 80083f6:	1a2d      	subs	r5, r5, r0
 80083f8:	60a2      	str	r2, [r4, #8]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	4629      	mov	r1, r5
 80083fe:	2201      	movs	r2, #1
 8008400:	4620      	mov	r0, r4
 8008402:	f7ff ffc9 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 8008406:	2800      	cmp	r0, #0
 8008408:	d1f1      	bne.n	80083ee <ucdr_advance_buffer+0x1e>
 800840a:	2301      	movs	r3, #1
 800840c:	7563      	strb	r3, [r4, #21]
 800840e:	bd38      	pop	{r3, r4, r5, pc}

08008410 <rcl_get_zero_initialized_publisher>:
 8008410:	4b01      	ldr	r3, [pc, #4]	@ (8008418 <rcl_get_zero_initialized_publisher+0x8>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	08011910 	.word	0x08011910

0800841c <rcl_publisher_init>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	b088      	sub	sp, #32
 8008422:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8008424:	2d00      	cmp	r5, #0
 8008426:	d069      	beq.n	80084fc <rcl_publisher_init+0xe0>
 8008428:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800842c:	4604      	mov	r4, r0
 800842e:	4648      	mov	r0, r9
 8008430:	460e      	mov	r6, r1
 8008432:	4690      	mov	r8, r2
 8008434:	461f      	mov	r7, r3
 8008436:	f000 f9d5 	bl	80087e4 <rcutils_allocator_is_valid>
 800843a:	2800      	cmp	r0, #0
 800843c:	d05e      	beq.n	80084fc <rcl_publisher_init+0xe0>
 800843e:	2c00      	cmp	r4, #0
 8008440:	d05c      	beq.n	80084fc <rcl_publisher_init+0xe0>
 8008442:	f8d4 a000 	ldr.w	sl, [r4]
 8008446:	f1ba 0f00 	cmp.w	sl, #0
 800844a:	d004      	beq.n	8008456 <rcl_publisher_init+0x3a>
 800844c:	2764      	movs	r7, #100	@ 0x64
 800844e:	4638      	mov	r0, r7
 8008450:	b008      	add	sp, #32
 8008452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008456:	4630      	mov	r0, r6
 8008458:	f003 ff7e 	bl	800c358 <rcl_node_is_valid>
 800845c:	2800      	cmp	r0, #0
 800845e:	d052      	beq.n	8008506 <rcl_publisher_init+0xea>
 8008460:	f1b8 0f00 	cmp.w	r8, #0
 8008464:	d04a      	beq.n	80084fc <rcl_publisher_init+0xe0>
 8008466:	2f00      	cmp	r7, #0
 8008468:	d048      	beq.n	80084fc <rcl_publisher_init+0xe0>
 800846a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800846e:	aa07      	add	r2, sp, #28
 8008470:	9205      	str	r2, [sp, #20]
 8008472:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8008476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800847a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800847e:	f8cd a01c 	str.w	sl, [sp, #28]
 8008482:	4639      	mov	r1, r7
 8008484:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008488:	4630      	mov	r0, r6
 800848a:	f003 ffb9 	bl	800c400 <rcl_node_resolve_name>
 800848e:	4607      	mov	r7, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	d14f      	bne.n	8008534 <rcl_publisher_init+0x118>
 8008494:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008496:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008498:	20c8      	movs	r0, #200	@ 0xc8
 800849a:	4798      	blx	r3
 800849c:	6020      	str	r0, [r4, #0]
 800849e:	2800      	cmp	r0, #0
 80084a0:	d04e      	beq.n	8008540 <rcl_publisher_init+0x124>
 80084a2:	4630      	mov	r0, r6
 80084a4:	f003 ff7a 	bl	800c39c <rcl_node_get_rmw_handle>
 80084a8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	9a07      	ldr	r2, [sp, #28]
 80084b0:	6827      	ldr	r7, [r4, #0]
 80084b2:	462b      	mov	r3, r5
 80084b4:	4641      	mov	r1, r8
 80084b6:	f000 fa55 	bl	8008964 <rmw_create_publisher>
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80084c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80084c4:	b370      	cbz	r0, 8008524 <rcl_publisher_init+0x108>
 80084c6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80084ca:	f000 fb29 	bl	8008b20 <rmw_publisher_get_actual_qos>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	4607      	mov	r7, r0
 80084d2:	b9d0      	cbnz	r0, 800850a <rcl_publisher_init+0xee>
 80084d4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80084d8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80084dc:	4629      	mov	r1, r5
 80084de:	2270      	movs	r2, #112	@ 0x70
 80084e0:	4618      	mov	r0, r3
 80084e2:	f008 f9dc 	bl	801089e <memcpy>
 80084e6:	6832      	ldr	r2, [r6, #0]
 80084e8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80084ec:	9807      	ldr	r0, [sp, #28]
 80084ee:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80084f0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80084f2:	4798      	blx	r3
 80084f4:	4638      	mov	r0, r7
 80084f6:	b008      	add	sp, #32
 80084f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fc:	270b      	movs	r7, #11
 80084fe:	4638      	mov	r0, r7
 8008500:	b008      	add	sp, #32
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	27c8      	movs	r7, #200	@ 0xc8
 8008508:	e7a1      	b.n	800844e <rcl_publisher_init+0x32>
 800850a:	b18b      	cbz	r3, 8008530 <rcl_publisher_init+0x114>
 800850c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8008510:	b142      	cbz	r2, 8008524 <rcl_publisher_init+0x108>
 8008512:	4630      	mov	r0, r6
 8008514:	f003 ff42 	bl	800c39c <rcl_node_get_rmw_handle>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800851e:	f000 fb0f 	bl	8008b40 <rmw_destroy_publisher>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8008526:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8008528:	4618      	mov	r0, r3
 800852a:	4790      	blx	r2
 800852c:	2300      	movs	r3, #0
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	2701      	movs	r7, #1
 8008532:	e7db      	b.n	80084ec <rcl_publisher_init+0xd0>
 8008534:	2867      	cmp	r0, #103	@ 0x67
 8008536:	d0d9      	beq.n	80084ec <rcl_publisher_init+0xd0>
 8008538:	2869      	cmp	r0, #105	@ 0x69
 800853a:	d003      	beq.n	8008544 <rcl_publisher_init+0x128>
 800853c:	280a      	cmp	r0, #10
 800853e:	d1f7      	bne.n	8008530 <rcl_publisher_init+0x114>
 8008540:	270a      	movs	r7, #10
 8008542:	e7d3      	b.n	80084ec <rcl_publisher_init+0xd0>
 8008544:	2767      	movs	r7, #103	@ 0x67
 8008546:	e7d1      	b.n	80084ec <rcl_publisher_init+0xd0>

08008548 <rcl_publisher_get_default_options>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4d14      	ldr	r5, [pc, #80]	@ (800859c <rcl_publisher_get_default_options+0x54>)
 800854c:	4914      	ldr	r1, [pc, #80]	@ (80085a0 <rcl_publisher_get_default_options+0x58>)
 800854e:	b088      	sub	sp, #32
 8008550:	4604      	mov	r4, r0
 8008552:	2250      	movs	r2, #80	@ 0x50
 8008554:	4628      	mov	r0, r5
 8008556:	f008 f9a2 	bl	801089e <memcpy>
 800855a:	a802      	add	r0, sp, #8
 800855c:	f000 f934 	bl	80087c8 <rcutils_get_default_allocator>
 8008560:	f10d 0c08 	add.w	ip, sp, #8
 8008564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008568:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800856c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008570:	466e      	mov	r6, sp
 8008572:	f8dc 3000 	ldr.w	r3, [ip]
 8008576:	f8ce 3000 	str.w	r3, [lr]
 800857a:	4630      	mov	r0, r6
 800857c:	f000 f974 	bl	8008868 <rmw_get_default_publisher_options>
 8008580:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008584:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8008588:	e883 0003 	stmia.w	r3, {r0, r1}
 800858c:	2270      	movs	r2, #112	@ 0x70
 800858e:	4629      	mov	r1, r5
 8008590:	4620      	mov	r0, r4
 8008592:	f008 f984 	bl	801089e <memcpy>
 8008596:	4620      	mov	r0, r4
 8008598:	b008      	add	sp, #32
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	20009120 	.word	0x20009120
 80085a0:	08011918 	.word	0x08011918

080085a4 <rcl_publish>:
 80085a4:	b1f8      	cbz	r0, 80085e6 <rcl_publish+0x42>
 80085a6:	6803      	ldr	r3, [r0, #0]
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4604      	mov	r4, r0
 80085ac:	b1b3      	cbz	r3, 80085dc <rcl_publish+0x38>
 80085ae:	4616      	mov	r6, r2
 80085b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80085b4:	b192      	cbz	r2, 80085dc <rcl_publish+0x38>
 80085b6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80085ba:	460d      	mov	r5, r1
 80085bc:	f003 faf2 	bl	800bba4 <rcl_context_is_valid>
 80085c0:	b160      	cbz	r0, 80085dc <rcl_publish+0x38>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80085c8:	b140      	cbz	r0, 80085dc <rcl_publish+0x38>
 80085ca:	b155      	cbz	r5, 80085e2 <rcl_publish+0x3e>
 80085cc:	4632      	mov	r2, r6
 80085ce:	4629      	mov	r1, r5
 80085d0:	f000 f968 	bl	80088a4 <rmw_publish>
 80085d4:	3800      	subs	r0, #0
 80085d6:	bf18      	it	ne
 80085d8:	2001      	movne	r0, #1
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	200b      	movs	r0, #11
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80085ea:	4770      	bx	lr

080085ec <rclc_support_init>:
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	b3b8      	cbz	r0, 8008664 <rclc_support_init+0x78>
 80085f4:	461c      	mov	r4, r3
 80085f6:	b3ab      	cbz	r3, 8008664 <rclc_support_init+0x78>
 80085f8:	460f      	mov	r7, r1
 80085fa:	4690      	mov	r8, r2
 80085fc:	4606      	mov	r6, r0
 80085fe:	f003 fc3b 	bl	800be78 <rcl_get_zero_initialized_init_options>
 8008602:	f104 030c 	add.w	r3, r4, #12
 8008606:	9005      	str	r0, [sp, #20]
 8008608:	e893 0003 	ldmia.w	r3, {r0, r1}
 800860c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008610:	a805      	add	r0, sp, #20
 8008612:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008616:	f003 fc31 	bl	800be7c <rcl_init_options_init>
 800861a:	4605      	mov	r5, r0
 800861c:	b9e0      	cbnz	r0, 8008658 <rclc_support_init+0x6c>
 800861e:	ad02      	add	r5, sp, #8
 8008620:	4628      	mov	r0, r5
 8008622:	f003 fab5 	bl	800bb90 <rcl_get_zero_initialized_context>
 8008626:	e895 0003 	ldmia.w	r5, {r0, r1}
 800862a:	4633      	mov	r3, r6
 800862c:	e886 0003 	stmia.w	r6, {r0, r1}
 8008630:	aa05      	add	r2, sp, #20
 8008632:	4641      	mov	r1, r8
 8008634:	4638      	mov	r0, r7
 8008636:	f003 fb1b 	bl	800bc70 <rcl_init>
 800863a:	4605      	mov	r5, r0
 800863c:	b9b8      	cbnz	r0, 800866e <rclc_support_init+0x82>
 800863e:	60b4      	str	r4, [r6, #8]
 8008640:	4622      	mov	r2, r4
 8008642:	f106 010c 	add.w	r1, r6, #12
 8008646:	2003      	movs	r0, #3
 8008648:	f004 f896 	bl	800c778 <rcl_clock_init>
 800864c:	4605      	mov	r5, r0
 800864e:	b970      	cbnz	r0, 800866e <rclc_support_init+0x82>
 8008650:	a805      	add	r0, sp, #20
 8008652:	f003 fc79 	bl	800bf48 <rcl_init_options_fini>
 8008656:	b108      	cbz	r0, 800865c <rclc_support_init+0x70>
 8008658:	f000 f8ea 	bl	8008830 <rcutils_reset_error>
 800865c:	4628      	mov	r0, r5
 800865e:	b006      	add	sp, #24
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	250b      	movs	r5, #11
 8008666:	4628      	mov	r0, r5
 8008668:	b006      	add	sp, #24
 800866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866e:	f000 f8df 	bl	8008830 <rcutils_reset_error>
 8008672:	a805      	add	r0, sp, #20
 8008674:	f003 fc68 	bl	800bf48 <rcl_init_options_fini>
 8008678:	2800      	cmp	r0, #0
 800867a:	d0ef      	beq.n	800865c <rclc_support_init+0x70>
 800867c:	e7ec      	b.n	8008658 <rclc_support_init+0x6c>
 800867e:	bf00      	nop

08008680 <rclc_node_init_default>:
 8008680:	b3b8      	cbz	r0, 80086f2 <rclc_node_init_default+0x72>
 8008682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008686:	460d      	mov	r5, r1
 8008688:	b0a1      	sub	sp, #132	@ 0x84
 800868a:	b329      	cbz	r1, 80086d8 <rclc_node_init_default+0x58>
 800868c:	4616      	mov	r6, r2
 800868e:	b31a      	cbz	r2, 80086d8 <rclc_node_init_default+0x58>
 8008690:	461f      	mov	r7, r3
 8008692:	b30b      	cbz	r3, 80086d8 <rclc_node_init_default+0x58>
 8008694:	f10d 0810 	add.w	r8, sp, #16
 8008698:	4604      	mov	r4, r0
 800869a:	4640      	mov	r0, r8
 800869c:	f003 fd0c 	bl	800c0b8 <rcl_get_zero_initialized_node>
 80086a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80086a4:	f10d 0918 	add.w	r9, sp, #24
 80086a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80086ac:	4648      	mov	r0, r9
 80086ae:	f003 fe7b 	bl	800c3a8 <rcl_node_get_default_options>
 80086b2:	4640      	mov	r0, r8
 80086b4:	f003 fd00 	bl	800c0b8 <rcl_get_zero_initialized_node>
 80086b8:	f8cd 9000 	str.w	r9, [sp]
 80086bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80086c0:	463b      	mov	r3, r7
 80086c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80086c6:	4632      	mov	r2, r6
 80086c8:	4629      	mov	r1, r5
 80086ca:	4620      	mov	r0, r4
 80086cc:	f003 fcfe 	bl	800c0cc <rcl_node_init>
 80086d0:	b930      	cbnz	r0, 80086e0 <rclc_node_init_default+0x60>
 80086d2:	b021      	add	sp, #132	@ 0x84
 80086d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086d8:	200b      	movs	r0, #11
 80086da:	b021      	add	sp, #132	@ 0x84
 80086dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e0:	9003      	str	r0, [sp, #12]
 80086e2:	f000 f8a5 	bl	8008830 <rcutils_reset_error>
 80086e6:	f000 f8a3 	bl	8008830 <rcutils_reset_error>
 80086ea:	9803      	ldr	r0, [sp, #12]
 80086ec:	b021      	add	sp, #132	@ 0x84
 80086ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086f2:	200b      	movs	r0, #11
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <rclc_publisher_init_default>:
 80086f8:	b368      	cbz	r0, 8008756 <rclc_publisher_init_default+0x5e>
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	460d      	mov	r5, r1
 8008700:	b0a0      	sub	sp, #128	@ 0x80
 8008702:	b321      	cbz	r1, 800874e <rclc_publisher_init_default+0x56>
 8008704:	4616      	mov	r6, r2
 8008706:	b312      	cbz	r2, 800874e <rclc_publisher_init_default+0x56>
 8008708:	461f      	mov	r7, r3
 800870a:	b303      	cbz	r3, 800874e <rclc_publisher_init_default+0x56>
 800870c:	4604      	mov	r4, r0
 800870e:	f7ff fe7f 	bl	8008410 <rcl_get_zero_initialized_publisher>
 8008712:	f10d 0810 	add.w	r8, sp, #16
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	4640      	mov	r0, r8
 800871a:	f7ff ff15 	bl	8008548 <rcl_publisher_get_default_options>
 800871e:	490f      	ldr	r1, [pc, #60]	@ (800875c <rclc_publisher_init_default+0x64>)
 8008720:	2250      	movs	r2, #80	@ 0x50
 8008722:	4640      	mov	r0, r8
 8008724:	f008 f8bb 	bl	801089e <memcpy>
 8008728:	f8cd 8000 	str.w	r8, [sp]
 800872c:	463b      	mov	r3, r7
 800872e:	4632      	mov	r2, r6
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f7ff fe72 	bl	800841c <rcl_publisher_init>
 8008738:	b910      	cbnz	r0, 8008740 <rclc_publisher_init_default+0x48>
 800873a:	b020      	add	sp, #128	@ 0x80
 800873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008740:	9003      	str	r0, [sp, #12]
 8008742:	f000 f875 	bl	8008830 <rcutils_reset_error>
 8008746:	9803      	ldr	r0, [sp, #12]
 8008748:	b020      	add	sp, #128	@ 0x80
 800874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874e:	200b      	movs	r0, #11
 8008750:	b020      	add	sp, #128	@ 0x80
 8008752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008756:	200b      	movs	r0, #11
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	08011968 	.word	0x08011968

08008760 <__default_zero_allocate>:
 8008760:	f007 bc14 	b.w	800ff8c <calloc>

08008764 <__default_reallocate>:
 8008764:	f007 bda0 	b.w	80102a8 <realloc>

08008768 <__default_deallocate>:
 8008768:	f007 bc7c 	b.w	8010064 <free>

0800876c <__default_allocate>:
 800876c:	f007 bc72 	b.w	8010054 <malloc>

08008770 <rcutils_get_zero_initialized_allocator>:
 8008770:	b510      	push	{r4, lr}
 8008772:	4c05      	ldr	r4, [pc, #20]	@ (8008788 <rcutils_get_zero_initialized_allocator+0x18>)
 8008774:	4686      	mov	lr, r0
 8008776:	4684      	mov	ip, r0
 8008778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800877a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	f8cc 3000 	str.w	r3, [ip]
 8008784:	4670      	mov	r0, lr
 8008786:	bd10      	pop	{r4, pc}
 8008788:	080119b8 	.word	0x080119b8

0800878c <rcutils_set_default_allocator>:
 800878c:	b1a8      	cbz	r0, 80087ba <rcutils_set_default_allocator+0x2e>
 800878e:	6802      	ldr	r2, [r0, #0]
 8008790:	b1a2      	cbz	r2, 80087bc <rcutils_set_default_allocator+0x30>
 8008792:	6841      	ldr	r1, [r0, #4]
 8008794:	b1a1      	cbz	r1, 80087c0 <rcutils_set_default_allocator+0x34>
 8008796:	b410      	push	{r4}
 8008798:	68c4      	ldr	r4, [r0, #12]
 800879a:	b164      	cbz	r4, 80087b6 <rcutils_set_default_allocator+0x2a>
 800879c:	6880      	ldr	r0, [r0, #8]
 800879e:	b138      	cbz	r0, 80087b0 <rcutils_set_default_allocator+0x24>
 80087a0:	4b08      	ldr	r3, [pc, #32]	@ (80087c4 <rcutils_set_default_allocator+0x38>)
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	2200      	movs	r2, #0
 80087a6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80087aa:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80087ae:	2001      	movs	r0, #1
 80087b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	4620      	mov	r0, r4
 80087b8:	e7fa      	b.n	80087b0 <rcutils_set_default_allocator+0x24>
 80087ba:	4770      	bx	lr
 80087bc:	4610      	mov	r0, r2
 80087be:	4770      	bx	lr
 80087c0:	4608      	mov	r0, r1
 80087c2:	4770      	bx	lr
 80087c4:	200001bc 	.word	0x200001bc

080087c8 <rcutils_get_default_allocator>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4c05      	ldr	r4, [pc, #20]	@ (80087e0 <rcutils_get_default_allocator+0x18>)
 80087cc:	4686      	mov	lr, r0
 80087ce:	4684      	mov	ip, r0
 80087d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f8cc 3000 	str.w	r3, [ip]
 80087dc:	4670      	mov	r0, lr
 80087de:	bd10      	pop	{r4, pc}
 80087e0:	200001bc 	.word	0x200001bc

080087e4 <rcutils_allocator_is_valid>:
 80087e4:	b158      	cbz	r0, 80087fe <rcutils_allocator_is_valid+0x1a>
 80087e6:	6803      	ldr	r3, [r0, #0]
 80087e8:	b143      	cbz	r3, 80087fc <rcutils_allocator_is_valid+0x18>
 80087ea:	6843      	ldr	r3, [r0, #4]
 80087ec:	b133      	cbz	r3, 80087fc <rcutils_allocator_is_valid+0x18>
 80087ee:	68c3      	ldr	r3, [r0, #12]
 80087f0:	b123      	cbz	r3, 80087fc <rcutils_allocator_is_valid+0x18>
 80087f2:	6880      	ldr	r0, [r0, #8]
 80087f4:	3800      	subs	r0, #0
 80087f6:	bf18      	it	ne
 80087f8:	2001      	movne	r0, #1
 80087fa:	4770      	bx	lr
 80087fc:	4618      	mov	r0, r3
 80087fe:	4770      	bx	lr

08008800 <rcutils_get_error_string>:
 8008800:	4b06      	ldr	r3, [pc, #24]	@ (800881c <rcutils_get_error_string+0x1c>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	b13b      	cbz	r3, 8008816 <rcutils_get_error_string+0x16>
 8008806:	4b06      	ldr	r3, [pc, #24]	@ (8008820 <rcutils_get_error_string+0x20>)
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	b90a      	cbnz	r2, 8008810 <rcutils_get_error_string+0x10>
 800880c:	2201      	movs	r2, #1
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	4b04      	ldr	r3, [pc, #16]	@ (8008824 <rcutils_get_error_string+0x24>)
 8008812:	7818      	ldrb	r0, [r3, #0]
 8008814:	4770      	bx	lr
 8008816:	4b04      	ldr	r3, [pc, #16]	@ (8008828 <rcutils_get_error_string+0x28>)
 8008818:	7818      	ldrb	r0, [r3, #0]
 800881a:	4770      	bx	lr
 800881c:	20009190 	.word	0x20009190
 8008820:	200091a9 	.word	0x200091a9
 8008824:	200091a8 	.word	0x200091a8
 8008828:	080119cc 	.word	0x080119cc
 800882c:	00000000 	.word	0x00000000

08008830 <rcutils_reset_error>:
 8008830:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8008850 <rcutils_reset_error+0x20>
 8008834:	4a08      	ldr	r2, [pc, #32]	@ (8008858 <rcutils_reset_error+0x28>)
 8008836:	4809      	ldr	r0, [pc, #36]	@ (800885c <rcutils_reset_error+0x2c>)
 8008838:	4909      	ldr	r1, [pc, #36]	@ (8008860 <rcutils_reset_error+0x30>)
 800883a:	2300      	movs	r3, #0
 800883c:	8013      	strh	r3, [r2, #0]
 800883e:	ed82 7b02 	vstr	d7, [r2, #8]
 8008842:	4a08      	ldr	r2, [pc, #32]	@ (8008864 <rcutils_reset_error+0x34>)
 8008844:	7003      	strb	r3, [r0, #0]
 8008846:	700b      	strb	r3, [r1, #0]
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	4770      	bx	lr
 800884c:	f3af 8000 	nop.w
	...
 8008858:	20009198 	.word	0x20009198
 800885c:	200091a9 	.word	0x200091a9
 8008860:	200091a8 	.word	0x200091a8
 8008864:	20009190 	.word	0x20009190

08008868 <rmw_get_default_publisher_options>:
 8008868:	2200      	movs	r2, #0
 800886a:	6002      	str	r2, [r0, #0]
 800886c:	7102      	strb	r2, [r0, #4]
 800886e:	4770      	bx	lr

08008870 <rmw_uros_set_custom_transport>:
 8008870:	b470      	push	{r4, r5, r6}
 8008872:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008876:	b162      	cbz	r2, 8008892 <rmw_uros_set_custom_transport+0x22>
 8008878:	b15b      	cbz	r3, 8008892 <rmw_uros_set_custom_transport+0x22>
 800887a:	b155      	cbz	r5, 8008892 <rmw_uros_set_custom_transport+0x22>
 800887c:	b14e      	cbz	r6, 8008892 <rmw_uros_set_custom_transport+0x22>
 800887e:	4c06      	ldr	r4, [pc, #24]	@ (8008898 <rmw_uros_set_custom_transport+0x28>)
 8008880:	7020      	strb	r0, [r4, #0]
 8008882:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008886:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800888a:	6166      	str	r6, [r4, #20]
 800888c:	2000      	movs	r0, #0
 800888e:	bc70      	pop	{r4, r5, r6}
 8008890:	4770      	bx	lr
 8008892:	200b      	movs	r0, #11
 8008894:	bc70      	pop	{r4, r5, r6}
 8008896:	4770      	bx	lr
 8008898:	200091ac 	.word	0x200091ac

0800889c <flush_session>:
 800889c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800889e:	f001 bb01 	b.w	8009ea4 <uxr_run_session_until_confirm_delivery>
 80088a2:	bf00      	nop

080088a4 <rmw_publish>:
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d053      	beq.n	8008950 <rmw_publish+0xac>
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	460d      	mov	r5, r1
 80088ac:	b08e      	sub	sp, #56	@ 0x38
 80088ae:	2900      	cmp	r1, #0
 80088b0:	d04b      	beq.n	800894a <rmw_publish+0xa6>
 80088b2:	4604      	mov	r4, r0
 80088b4:	6800      	ldr	r0, [r0, #0]
 80088b6:	f000 fc47 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d045      	beq.n	800894a <rmw_publish+0xa6>
 80088be:	6866      	ldr	r6, [r4, #4]
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d042      	beq.n	800894a <rmw_publish+0xa6>
 80088c4:	69b4      	ldr	r4, [r6, #24]
 80088c6:	4628      	mov	r0, r5
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	4798      	blx	r3
 80088cc:	69f3      	ldr	r3, [r6, #28]
 80088ce:	9005      	str	r0, [sp, #20]
 80088d0:	b113      	cbz	r3, 80088d8 <rmw_publish+0x34>
 80088d2:	a805      	add	r0, sp, #20
 80088d4:	4798      	blx	r3
 80088d6:	9805      	ldr	r0, [sp, #20]
 80088d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	9000      	str	r0, [sp, #0]
 80088e0:	6972      	ldr	r2, [r6, #20]
 80088e2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80088e4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80088e8:	ab06      	add	r3, sp, #24
 80088ea:	f002 f8c7 	bl	800aa7c <uxr_prepare_output_stream>
 80088ee:	b1d8      	cbz	r0, 8008928 <rmw_publish+0x84>
 80088f0:	68a3      	ldr	r3, [r4, #8]
 80088f2:	a906      	add	r1, sp, #24
 80088f4:	4628      	mov	r0, r5
 80088f6:	4798      	blx	r3
 80088f8:	6a33      	ldr	r3, [r6, #32]
 80088fa:	4604      	mov	r4, r0
 80088fc:	b10b      	cbz	r3, 8008902 <rmw_publish+0x5e>
 80088fe:	a806      	add	r0, sp, #24
 8008900:	4798      	blx	r3
 8008902:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8008906:	2b01      	cmp	r3, #1
 8008908:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800890c:	d022      	beq.n	8008954 <rmw_publish+0xb0>
 800890e:	6918      	ldr	r0, [r3, #16]
 8008910:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8008912:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008916:	f001 fac5 	bl	8009ea4 <uxr_run_session_until_confirm_delivery>
 800891a:	4020      	ands	r0, r4
 800891c:	b2c4      	uxtb	r4, r0
 800891e:	f084 0001 	eor.w	r0, r4, #1
 8008922:	b2c0      	uxtb	r0, r0
 8008924:	b00e      	add	sp, #56	@ 0x38
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800892c:	6918      	ldr	r0, [r3, #16]
 800892e:	9b05      	ldr	r3, [sp, #20]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <rmw_publish+0xbc>)
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	9602      	str	r6, [sp, #8]
 8008938:	6972      	ldr	r2, [r6, #20]
 800893a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800893c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008940:	ab06      	add	r3, sp, #24
 8008942:	f002 f8cb 	bl	800aadc <uxr_prepare_output_stream_fragmented>
 8008946:	2800      	cmp	r0, #0
 8008948:	d1d2      	bne.n	80088f0 <rmw_publish+0x4c>
 800894a:	2001      	movs	r0, #1
 800894c:	b00e      	add	sp, #56	@ 0x38
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	2001      	movs	r0, #1
 8008952:	4770      	bx	lr
 8008954:	6918      	ldr	r0, [r3, #16]
 8008956:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800895a:	f000 ff1d 	bl	8009798 <uxr_flash_output_streams>
 800895e:	e7de      	b.n	800891e <rmw_publish+0x7a>
 8008960:	0800889d 	.word	0x0800889d

08008964 <rmw_create_publisher>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	b087      	sub	sp, #28
 800896a:	2800      	cmp	r0, #0
 800896c:	f000 80cc 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 8008970:	460e      	mov	r6, r1
 8008972:	2900      	cmp	r1, #0
 8008974:	f000 80c8 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 8008978:	4604      	mov	r4, r0
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	4615      	mov	r5, r2
 800897e:	4698      	mov	r8, r3
 8008980:	f000 fbe2 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 8008984:	2800      	cmp	r0, #0
 8008986:	f000 80bf 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 800898a:	2d00      	cmp	r5, #0
 800898c:	f000 80bc 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 8008990:	782b      	ldrb	r3, [r5, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80b8 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 8008998:	f1b8 0f00 	cmp.w	r8, #0
 800899c:	f000 80b4 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 80089a0:	485c      	ldr	r0, [pc, #368]	@ (8008b14 <rmw_create_publisher+0x1b0>)
 80089a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80089a6:	f004 fc5f 	bl	800d268 <get_memory>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f000 80ac 	beq.w	8008b08 <rmw_create_publisher+0x1a4>
 80089b0:	6884      	ldr	r4, [r0, #8]
 80089b2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80089b6:	f004 fc7b 	bl	800d2b0 <rmw_get_implementation_identifier>
 80089ba:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80089be:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80089c2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7f7 fc14 	bl	80001f4 <strlen>
 80089cc:	3001      	adds	r0, #1
 80089ce:	283c      	cmp	r0, #60	@ 0x3c
 80089d0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80089d4:	f200 8091 	bhi.w	8008afa <rmw_create_publisher+0x196>
 80089d8:	4a4f      	ldr	r2, [pc, #316]	@ (8008b18 <rmw_create_publisher+0x1b4>)
 80089da:	462b      	mov	r3, r5
 80089dc:	213c      	movs	r1, #60	@ 0x3c
 80089de:	4650      	mov	r0, sl
 80089e0:	f007 fde4 	bl	80105ac <sniprintf>
 80089e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80089ea:	4641      	mov	r1, r8
 80089ec:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80089f0:	2250      	movs	r2, #80	@ 0x50
 80089f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80089f6:	f007 ff52 	bl	801089e <memcpy>
 80089fa:	f898 3008 	ldrb.w	r3, [r8, #8]
 80089fe:	4947      	ldr	r1, [pc, #284]	@ (8008b1c <rmw_create_publisher+0x1b8>)
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a06:	bf0c      	ite	eq
 8008a08:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8008a0c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8008a10:	67a3      	str	r3, [r4, #120]	@ 0x78
 8008a12:	2300      	movs	r3, #0
 8008a14:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 fba3 	bl	8009164 <get_message_typesupport_handle>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d06b      	beq.n	8008afa <rmw_create_publisher+0x196>
 8008a22:	6842      	ldr	r2, [r0, #4]
 8008a24:	61a2      	str	r2, [r4, #24]
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	d067      	beq.n	8008afa <rmw_create_publisher+0x196>
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4643      	mov	r3, r8
 8008a2e:	4648      	mov	r0, r9
 8008a30:	f004 fea4 	bl	800d77c <create_topic>
 8008a34:	6260      	str	r0, [r4, #36]	@ 0x24
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d063      	beq.n	8008b02 <rmw_create_publisher+0x19e>
 8008a3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a42:	2103      	movs	r1, #3
 8008a44:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8008a48:	1c42      	adds	r2, r0, #1
 8008a4a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8008a4e:	f000 fd53 	bl	80094f8 <uxr_object_id>
 8008a52:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008a56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a5a:	6120      	str	r0, [r4, #16]
 8008a5c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8008a60:	6910      	ldr	r0, [r2, #16]
 8008a62:	2506      	movs	r5, #6
 8008a64:	9500      	str	r5, [sp, #0]
 8008a66:	6819      	ldr	r1, [r3, #0]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008a6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008a72:	f000 fc9b 	bl	80093ac <uxr_buffer_create_publisher_bin>
 8008a76:	4602      	mov	r2, r0
 8008a78:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008a7c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008a80:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008a84:	f000 fae0 	bl	8009048 <run_xrce_session>
 8008a88:	b3b8      	cbz	r0, 8008afa <rmw_create_publisher+0x196>
 8008a8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a92:	2105      	movs	r1, #5
 8008a94:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8008a98:	1c42      	adds	r2, r0, #1
 8008a9a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8008a9e:	f000 fd2b 	bl	80094f8 <uxr_object_id>
 8008aa2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008aa6:	6160      	str	r0, [r4, #20]
 8008aa8:	691e      	ldr	r6, [r3, #16]
 8008aaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008aae:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8008ab2:	f10d 0a10 	add.w	sl, sp, #16
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	4650      	mov	r0, sl
 8008aba:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8008abe:	f000 fadf 	bl	8009080 <convert_qos_profile>
 8008ac2:	9503      	str	r5, [sp, #12]
 8008ac4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008ac8:	9001      	str	r0, [sp, #4]
 8008aca:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008ace:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8008ad8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008adc:	f8d8 1000 	ldr.w	r1, [r8]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 fc93 	bl	800940c <uxr_buffer_create_datawriter_bin>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008aec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008af0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008af4:	f000 faa8 	bl	8009048 <run_xrce_session>
 8008af8:	b938      	cbnz	r0, 8008b0a <rmw_create_publisher+0x1a6>
 8008afa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008afc:	b108      	cbz	r0, 8008b02 <rmw_create_publisher+0x19e>
 8008afe:	f000 fa47 	bl	8008f90 <rmw_uxrce_fini_topic_memory>
 8008b02:	4638      	mov	r0, r7
 8008b04:	f000 f9ec 	bl	8008ee0 <rmw_uxrce_fini_publisher_memory>
 8008b08:	2700      	movs	r7, #0
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	b007      	add	sp, #28
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	bf00      	nop
 8008b14:	2000daa4 	.word	0x2000daa4
 8008b18:	080119e0 	.word	0x080119e0
 8008b1c:	08011844 	.word	0x08011844

08008b20 <rmw_publisher_get_actual_qos>:
 8008b20:	b150      	cbz	r0, 8008b38 <rmw_publisher_get_actual_qos+0x18>
 8008b22:	b508      	push	{r3, lr}
 8008b24:	460b      	mov	r3, r1
 8008b26:	b149      	cbz	r1, 8008b3c <rmw_publisher_get_actual_qos+0x1c>
 8008b28:	6841      	ldr	r1, [r0, #4]
 8008b2a:	2250      	movs	r2, #80	@ 0x50
 8008b2c:	3128      	adds	r1, #40	@ 0x28
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f007 feb5 	bl	801089e <memcpy>
 8008b34:	2000      	movs	r0, #0
 8008b36:	bd08      	pop	{r3, pc}
 8008b38:	200b      	movs	r0, #11
 8008b3a:	4770      	bx	lr
 8008b3c:	200b      	movs	r0, #11
 8008b3e:	bd08      	pop	{r3, pc}

08008b40 <rmw_destroy_publisher>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	b128      	cbz	r0, 8008b50 <rmw_destroy_publisher+0x10>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	460d      	mov	r5, r1
 8008b4a:	f000 fafd 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 8008b4e:	b910      	cbnz	r0, 8008b56 <rmw_destroy_publisher+0x16>
 8008b50:	2401      	movs	r4, #1
 8008b52:	4620      	mov	r0, r4
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0f9      	beq.n	8008b50 <rmw_destroy_publisher+0x10>
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	d0f7      	beq.n	8008b50 <rmw_destroy_publisher+0x10>
 8008b60:	6828      	ldr	r0, [r5, #0]
 8008b62:	f000 faf1 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d0f2      	beq.n	8008b50 <rmw_destroy_publisher+0x10>
 8008b6a:	686c      	ldr	r4, [r5, #4]
 8008b6c:	2c00      	cmp	r4, #0
 8008b6e:	d0ef      	beq.n	8008b50 <rmw_destroy_publisher+0x10>
 8008b70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008b72:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8008b76:	f004 fe51 	bl	800d81c <destroy_topic>
 8008b7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008b7e:	6962      	ldr	r2, [r4, #20]
 8008b80:	6918      	ldr	r0, [r3, #16]
 8008b82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008b86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	f000 fb5a 	bl	8009244 <uxr_buffer_delete_entity>
 8008b90:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	6809      	ldr	r1, [r1, #0]
 8008ba0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8008ba4:	f000 fb4e 	bl	8009244 <uxr_buffer_delete_entity>
 8008ba8:	693e      	ldr	r6, [r7, #16]
 8008baa:	4622      	mov	r2, r4
 8008bac:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008bb0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f000 fa46 	bl	8009048 <run_xrce_session>
 8008bbc:	693e      	ldr	r6, [r7, #16]
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008bc4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008bc8:	4604      	mov	r4, r0
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 fa3c 	bl	8009048 <run_xrce_session>
 8008bd0:	b12c      	cbz	r4, 8008bde <rmw_destroy_publisher+0x9e>
 8008bd2:	b120      	cbz	r0, 8008bde <rmw_destroy_publisher+0x9e>
 8008bd4:	2400      	movs	r4, #0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f982 	bl	8008ee0 <rmw_uxrce_fini_publisher_memory>
 8008bdc:	e7b9      	b.n	8008b52 <rmw_destroy_publisher+0x12>
 8008bde:	2402      	movs	r4, #2
 8008be0:	e7f9      	b.n	8008bd6 <rmw_destroy_publisher+0x96>
 8008be2:	bf00      	nop

08008be4 <rmw_uxrce_init_service_memory>:
 8008be4:	b1e2      	cbz	r2, 8008c20 <rmw_uxrce_init_service_memory+0x3c>
 8008be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bea:	7b05      	ldrb	r5, [r0, #12]
 8008bec:	4606      	mov	r6, r0
 8008bee:	b9ad      	cbnz	r5, 8008c1c <rmw_uxrce_init_service_memory+0x38>
 8008bf0:	23c8      	movs	r3, #200	@ 0xc8
 8008bf2:	e9c0 5500 	strd	r5, r5, [r0]
 8008bf6:	6083      	str	r3, [r0, #8]
 8008bf8:	f240 1301 	movw	r3, #257	@ 0x101
 8008bfc:	4617      	mov	r7, r2
 8008bfe:	8183      	strh	r3, [r0, #12]
 8008c00:	460c      	mov	r4, r1
 8008c02:	46a8      	mov	r8, r5
 8008c04:	4621      	mov	r1, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	3501      	adds	r5, #1
 8008c0a:	f004 fb3d 	bl	800d288 <put_memory>
 8008c0e:	42af      	cmp	r7, r5
 8008c10:	60a4      	str	r4, [r4, #8]
 8008c12:	f884 800c 	strb.w	r8, [r4, #12]
 8008c16:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8008c1a:	d1f3      	bne.n	8008c04 <rmw_uxrce_init_service_memory+0x20>
 8008c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <rmw_uxrce_init_client_memory>:
 8008c24:	b1e2      	cbz	r2, 8008c60 <rmw_uxrce_init_client_memory+0x3c>
 8008c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2a:	7b05      	ldrb	r5, [r0, #12]
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	b9ad      	cbnz	r5, 8008c5c <rmw_uxrce_init_client_memory+0x38>
 8008c30:	23c8      	movs	r3, #200	@ 0xc8
 8008c32:	e9c0 5500 	strd	r5, r5, [r0]
 8008c36:	6083      	str	r3, [r0, #8]
 8008c38:	f240 1301 	movw	r3, #257	@ 0x101
 8008c3c:	4617      	mov	r7, r2
 8008c3e:	8183      	strh	r3, [r0, #12]
 8008c40:	460c      	mov	r4, r1
 8008c42:	46a8      	mov	r8, r5
 8008c44:	4621      	mov	r1, r4
 8008c46:	4630      	mov	r0, r6
 8008c48:	3501      	adds	r5, #1
 8008c4a:	f004 fb1d 	bl	800d288 <put_memory>
 8008c4e:	42af      	cmp	r7, r5
 8008c50:	60a4      	str	r4, [r4, #8]
 8008c52:	f884 800c 	strb.w	r8, [r4, #12]
 8008c56:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8008c5a:	d1f3      	bne.n	8008c44 <rmw_uxrce_init_client_memory+0x20>
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop

08008c64 <rmw_uxrce_init_publisher_memory>:
 8008c64:	b1e2      	cbz	r2, 8008ca0 <rmw_uxrce_init_publisher_memory+0x3c>
 8008c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6a:	7b05      	ldrb	r5, [r0, #12]
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b9ad      	cbnz	r5, 8008c9c <rmw_uxrce_init_publisher_memory+0x38>
 8008c70:	23d8      	movs	r3, #216	@ 0xd8
 8008c72:	e9c0 5500 	strd	r5, r5, [r0]
 8008c76:	6083      	str	r3, [r0, #8]
 8008c78:	f240 1301 	movw	r3, #257	@ 0x101
 8008c7c:	4617      	mov	r7, r2
 8008c7e:	8183      	strh	r3, [r0, #12]
 8008c80:	460c      	mov	r4, r1
 8008c82:	46a8      	mov	r8, r5
 8008c84:	4621      	mov	r1, r4
 8008c86:	4630      	mov	r0, r6
 8008c88:	3501      	adds	r5, #1
 8008c8a:	f004 fafd 	bl	800d288 <put_memory>
 8008c8e:	42af      	cmp	r7, r5
 8008c90:	60a4      	str	r4, [r4, #8]
 8008c92:	f884 800c 	strb.w	r8, [r4, #12]
 8008c96:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008c9a:	d1f3      	bne.n	8008c84 <rmw_uxrce_init_publisher_memory+0x20>
 8008c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop

08008ca4 <rmw_uxrce_init_subscription_memory>:
 8008ca4:	b1e2      	cbz	r2, 8008ce0 <rmw_uxrce_init_subscription_memory+0x3c>
 8008ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008caa:	7b05      	ldrb	r5, [r0, #12]
 8008cac:	4606      	mov	r6, r0
 8008cae:	b9ad      	cbnz	r5, 8008cdc <rmw_uxrce_init_subscription_memory+0x38>
 8008cb0:	23d8      	movs	r3, #216	@ 0xd8
 8008cb2:	e9c0 5500 	strd	r5, r5, [r0]
 8008cb6:	6083      	str	r3, [r0, #8]
 8008cb8:	f240 1301 	movw	r3, #257	@ 0x101
 8008cbc:	4617      	mov	r7, r2
 8008cbe:	8183      	strh	r3, [r0, #12]
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	46a8      	mov	r8, r5
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	3501      	adds	r5, #1
 8008cca:	f004 fadd 	bl	800d288 <put_memory>
 8008cce:	42af      	cmp	r7, r5
 8008cd0:	60a4      	str	r4, [r4, #8]
 8008cd2:	f884 800c 	strb.w	r8, [r4, #12]
 8008cd6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008cda:	d1f3      	bne.n	8008cc4 <rmw_uxrce_init_subscription_memory+0x20>
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <rmw_uxrce_init_node_memory>:
 8008ce4:	b1e2      	cbz	r2, 8008d20 <rmw_uxrce_init_node_memory+0x3c>
 8008ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	7b05      	ldrb	r5, [r0, #12]
 8008cec:	4606      	mov	r6, r0
 8008cee:	b9ad      	cbnz	r5, 8008d1c <rmw_uxrce_init_node_memory+0x38>
 8008cf0:	23a4      	movs	r3, #164	@ 0xa4
 8008cf2:	e9c0 5500 	strd	r5, r5, [r0]
 8008cf6:	6083      	str	r3, [r0, #8]
 8008cf8:	f240 1301 	movw	r3, #257	@ 0x101
 8008cfc:	4617      	mov	r7, r2
 8008cfe:	8183      	strh	r3, [r0, #12]
 8008d00:	460c      	mov	r4, r1
 8008d02:	46a8      	mov	r8, r5
 8008d04:	4621      	mov	r1, r4
 8008d06:	4630      	mov	r0, r6
 8008d08:	3501      	adds	r5, #1
 8008d0a:	f004 fabd 	bl	800d288 <put_memory>
 8008d0e:	42af      	cmp	r7, r5
 8008d10:	60a4      	str	r4, [r4, #8]
 8008d12:	f884 800c 	strb.w	r8, [r4, #12]
 8008d16:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8008d1a:	d1f3      	bne.n	8008d04 <rmw_uxrce_init_node_memory+0x20>
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop

08008d24 <rmw_uxrce_init_session_memory>:
 8008d24:	b1ea      	cbz	r2, 8008d62 <rmw_uxrce_init_session_memory+0x3e>
 8008d26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2a:	7b05      	ldrb	r5, [r0, #12]
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	b9b5      	cbnz	r5, 8008d5e <rmw_uxrce_init_session_memory+0x3a>
 8008d30:	e9c0 5500 	strd	r5, r5, [r0]
 8008d34:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8008d38:	f240 1301 	movw	r3, #257	@ 0x101
 8008d3c:	4617      	mov	r7, r2
 8008d3e:	f8c0 8008 	str.w	r8, [r0, #8]
 8008d42:	460c      	mov	r4, r1
 8008d44:	8183      	strh	r3, [r0, #12]
 8008d46:	46a9      	mov	r9, r5
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	f004 fa9b 	bl	800d288 <put_memory>
 8008d52:	42af      	cmp	r7, r5
 8008d54:	60a4      	str	r4, [r4, #8]
 8008d56:	f884 900c 	strb.w	r9, [r4, #12]
 8008d5a:	4444      	add	r4, r8
 8008d5c:	d1f4      	bne.n	8008d48 <rmw_uxrce_init_session_memory+0x24>
 8008d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d62:	4770      	bx	lr

08008d64 <rmw_uxrce_init_topic_memory>:
 8008d64:	b1e2      	cbz	r2, 8008da0 <rmw_uxrce_init_topic_memory+0x3c>
 8008d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	7b05      	ldrb	r5, [r0, #12]
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	b9ad      	cbnz	r5, 8008d9c <rmw_uxrce_init_topic_memory+0x38>
 8008d70:	231c      	movs	r3, #28
 8008d72:	e9c0 5500 	strd	r5, r5, [r0]
 8008d76:	6083      	str	r3, [r0, #8]
 8008d78:	f240 1301 	movw	r3, #257	@ 0x101
 8008d7c:	4617      	mov	r7, r2
 8008d7e:	8183      	strh	r3, [r0, #12]
 8008d80:	460c      	mov	r4, r1
 8008d82:	46a8      	mov	r8, r5
 8008d84:	4621      	mov	r1, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	3501      	adds	r5, #1
 8008d8a:	f004 fa7d 	bl	800d288 <put_memory>
 8008d8e:	42af      	cmp	r7, r5
 8008d90:	60a4      	str	r4, [r4, #8]
 8008d92:	f884 800c 	strb.w	r8, [r4, #12]
 8008d96:	f104 041c 	add.w	r4, r4, #28
 8008d9a:	d1f3      	bne.n	8008d84 <rmw_uxrce_init_topic_memory+0x20>
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop

08008da4 <rmw_uxrce_init_static_input_buffer_memory>:
 8008da4:	b1ea      	cbz	r2, 8008de2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8008da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008daa:	7b05      	ldrb	r5, [r0, #12]
 8008dac:	4606      	mov	r6, r0
 8008dae:	b9b5      	cbnz	r5, 8008dde <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008db0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8008db4:	e9c0 5500 	strd	r5, r5, [r0]
 8008db8:	6083      	str	r3, [r0, #8]
 8008dba:	f240 1301 	movw	r3, #257	@ 0x101
 8008dbe:	4617      	mov	r7, r2
 8008dc0:	8183      	strh	r3, [r0, #12]
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	46a8      	mov	r8, r5
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4630      	mov	r0, r6
 8008dca:	3501      	adds	r5, #1
 8008dcc:	f004 fa5c 	bl	800d288 <put_memory>
 8008dd0:	42af      	cmp	r7, r5
 8008dd2:	60a4      	str	r4, [r4, #8]
 8008dd4:	f884 800c 	strb.w	r8, [r4, #12]
 8008dd8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8008ddc:	d1f3      	bne.n	8008dc6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de2:	4770      	bx	lr

08008de4 <rmw_uxrce_init_init_options_impl_memory>:
 8008de4:	b1e2      	cbz	r2, 8008e20 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8008de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	7b05      	ldrb	r5, [r0, #12]
 8008dec:	4606      	mov	r6, r0
 8008dee:	b9ad      	cbnz	r5, 8008e1c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008df0:	232c      	movs	r3, #44	@ 0x2c
 8008df2:	e9c0 5500 	strd	r5, r5, [r0]
 8008df6:	6083      	str	r3, [r0, #8]
 8008df8:	f240 1301 	movw	r3, #257	@ 0x101
 8008dfc:	4617      	mov	r7, r2
 8008dfe:	8183      	strh	r3, [r0, #12]
 8008e00:	460c      	mov	r4, r1
 8008e02:	46a8      	mov	r8, r5
 8008e04:	4621      	mov	r1, r4
 8008e06:	4630      	mov	r0, r6
 8008e08:	3501      	adds	r5, #1
 8008e0a:	f004 fa3d 	bl	800d288 <put_memory>
 8008e0e:	42af      	cmp	r7, r5
 8008e10:	60a4      	str	r4, [r4, #8]
 8008e12:	f884 800c 	strb.w	r8, [r4, #12]
 8008e16:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8008e1a:	d1f3      	bne.n	8008e04 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <rmw_uxrce_init_wait_set_memory>:
 8008e24:	b1e2      	cbz	r2, 8008e60 <rmw_uxrce_init_wait_set_memory+0x3c>
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	7b05      	ldrb	r5, [r0, #12]
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	b9ad      	cbnz	r5, 8008e5c <rmw_uxrce_init_wait_set_memory+0x38>
 8008e30:	231c      	movs	r3, #28
 8008e32:	e9c0 5500 	strd	r5, r5, [r0]
 8008e36:	6083      	str	r3, [r0, #8]
 8008e38:	f240 1301 	movw	r3, #257	@ 0x101
 8008e3c:	4617      	mov	r7, r2
 8008e3e:	8183      	strh	r3, [r0, #12]
 8008e40:	460c      	mov	r4, r1
 8008e42:	46a8      	mov	r8, r5
 8008e44:	4621      	mov	r1, r4
 8008e46:	4630      	mov	r0, r6
 8008e48:	3501      	adds	r5, #1
 8008e4a:	f004 fa1d 	bl	800d288 <put_memory>
 8008e4e:	42af      	cmp	r7, r5
 8008e50:	60a4      	str	r4, [r4, #8]
 8008e52:	f884 800c 	strb.w	r8, [r4, #12]
 8008e56:	f104 041c 	add.w	r4, r4, #28
 8008e5a:	d1f3      	bne.n	8008e44 <rmw_uxrce_init_wait_set_memory+0x20>
 8008e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop

08008e64 <rmw_uxrce_init_guard_condition_memory>:
 8008e64:	b1e2      	cbz	r2, 8008ea0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8008e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6a:	7b05      	ldrb	r5, [r0, #12]
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	b9ad      	cbnz	r5, 8008e9c <rmw_uxrce_init_guard_condition_memory+0x38>
 8008e70:	2320      	movs	r3, #32
 8008e72:	e9c0 5500 	strd	r5, r5, [r0]
 8008e76:	6083      	str	r3, [r0, #8]
 8008e78:	f240 1301 	movw	r3, #257	@ 0x101
 8008e7c:	4617      	mov	r7, r2
 8008e7e:	8183      	strh	r3, [r0, #12]
 8008e80:	460c      	mov	r4, r1
 8008e82:	46a8      	mov	r8, r5
 8008e84:	4621      	mov	r1, r4
 8008e86:	4630      	mov	r0, r6
 8008e88:	3501      	adds	r5, #1
 8008e8a:	f004 f9fd 	bl	800d288 <put_memory>
 8008e8e:	42af      	cmp	r7, r5
 8008e90:	60a4      	str	r4, [r4, #8]
 8008e92:	f884 800c 	strb.w	r8, [r4, #12]
 8008e96:	f104 0420 	add.w	r4, r4, #32
 8008e9a:	d1f3      	bne.n	8008e84 <rmw_uxrce_init_guard_condition_memory+0x20>
 8008e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop

08008ea4 <rmw_uxrce_fini_session_memory>:
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4801      	ldr	r0, [pc, #4]	@ (8008eac <rmw_uxrce_fini_session_memory+0x8>)
 8008ea8:	f004 b9ee 	b.w	800d288 <put_memory>
 8008eac:	2000dac4 	.word	0x2000dac4

08008eb0 <rmw_uxrce_fini_node_memory>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	6800      	ldr	r0, [r0, #0]
 8008eb6:	b128      	cbz	r0, 8008ec4 <rmw_uxrce_fini_node_memory+0x14>
 8008eb8:	4b07      	ldr	r3, [pc, #28]	@ (8008ed8 <rmw_uxrce_fini_node_memory+0x28>)
 8008eba:	6819      	ldr	r1, [r3, #0]
 8008ebc:	f7f7 f990 	bl	80001e0 <strcmp>
 8008ec0:	b940      	cbnz	r0, 8008ed4 <rmw_uxrce_fini_node_memory+0x24>
 8008ec2:	6020      	str	r0, [r4, #0]
 8008ec4:	6861      	ldr	r1, [r4, #4]
 8008ec6:	b129      	cbz	r1, 8008ed4 <rmw_uxrce_fini_node_memory+0x24>
 8008ec8:	2500      	movs	r5, #0
 8008eca:	4804      	ldr	r0, [pc, #16]	@ (8008edc <rmw_uxrce_fini_node_memory+0x2c>)
 8008ecc:	610d      	str	r5, [r1, #16]
 8008ece:	f004 f9db 	bl	800d288 <put_memory>
 8008ed2:	6065      	str	r5, [r4, #4]
 8008ed4:	bd38      	pop	{r3, r4, r5, pc}
 8008ed6:	bf00      	nop
 8008ed8:	08011e90 	.word	0x08011e90
 8008edc:	2000da94 	.word	0x2000da94

08008ee0 <rmw_uxrce_fini_publisher_memory>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	6800      	ldr	r0, [r0, #0]
 8008ee6:	b128      	cbz	r0, 8008ef4 <rmw_uxrce_fini_publisher_memory+0x14>
 8008ee8:	4b06      	ldr	r3, [pc, #24]	@ (8008f04 <rmw_uxrce_fini_publisher_memory+0x24>)
 8008eea:	6819      	ldr	r1, [r3, #0]
 8008eec:	f7f7 f978 	bl	80001e0 <strcmp>
 8008ef0:	b938      	cbnz	r0, 8008f02 <rmw_uxrce_fini_publisher_memory+0x22>
 8008ef2:	6020      	str	r0, [r4, #0]
 8008ef4:	6861      	ldr	r1, [r4, #4]
 8008ef6:	b121      	cbz	r1, 8008f02 <rmw_uxrce_fini_publisher_memory+0x22>
 8008ef8:	4803      	ldr	r0, [pc, #12]	@ (8008f08 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008efa:	f004 f9c5 	bl	800d288 <put_memory>
 8008efe:	2300      	movs	r3, #0
 8008f00:	6063      	str	r3, [r4, #4]
 8008f02:	bd10      	pop	{r4, pc}
 8008f04:	08011e90 	.word	0x08011e90
 8008f08:	2000daa4 	.word	0x2000daa4

08008f0c <rmw_uxrce_fini_subscription_memory>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	4604      	mov	r4, r0
 8008f10:	6800      	ldr	r0, [r0, #0]
 8008f12:	b128      	cbz	r0, 8008f20 <rmw_uxrce_fini_subscription_memory+0x14>
 8008f14:	4b06      	ldr	r3, [pc, #24]	@ (8008f30 <rmw_uxrce_fini_subscription_memory+0x24>)
 8008f16:	6819      	ldr	r1, [r3, #0]
 8008f18:	f7f7 f962 	bl	80001e0 <strcmp>
 8008f1c:	b938      	cbnz	r0, 8008f2e <rmw_uxrce_fini_subscription_memory+0x22>
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	6861      	ldr	r1, [r4, #4]
 8008f22:	b121      	cbz	r1, 8008f2e <rmw_uxrce_fini_subscription_memory+0x22>
 8008f24:	4803      	ldr	r0, [pc, #12]	@ (8008f34 <rmw_uxrce_fini_subscription_memory+0x28>)
 8008f26:	f004 f9af 	bl	800d288 <put_memory>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	08011e90 	.word	0x08011e90
 8008f34:	2000dae4 	.word	0x2000dae4

08008f38 <rmw_uxrce_fini_service_memory>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	6800      	ldr	r0, [r0, #0]
 8008f3e:	b128      	cbz	r0, 8008f4c <rmw_uxrce_fini_service_memory+0x14>
 8008f40:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <rmw_uxrce_fini_service_memory+0x24>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	f7f7 f94c 	bl	80001e0 <strcmp>
 8008f48:	b938      	cbnz	r0, 8008f5a <rmw_uxrce_fini_service_memory+0x22>
 8008f4a:	6020      	str	r0, [r4, #0]
 8008f4c:	6861      	ldr	r1, [r4, #4]
 8008f4e:	b121      	cbz	r1, 8008f5a <rmw_uxrce_fini_service_memory+0x22>
 8008f50:	4803      	ldr	r0, [pc, #12]	@ (8008f60 <rmw_uxrce_fini_service_memory+0x28>)
 8008f52:	f004 f999 	bl	800d288 <put_memory>
 8008f56:	2300      	movs	r3, #0
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	bd10      	pop	{r4, pc}
 8008f5c:	08011e90 	.word	0x08011e90
 8008f60:	2000dab4 	.word	0x2000dab4

08008f64 <rmw_uxrce_fini_client_memory>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	4604      	mov	r4, r0
 8008f68:	6800      	ldr	r0, [r0, #0]
 8008f6a:	b128      	cbz	r0, 8008f78 <rmw_uxrce_fini_client_memory+0x14>
 8008f6c:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <rmw_uxrce_fini_client_memory+0x24>)
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	f7f7 f936 	bl	80001e0 <strcmp>
 8008f74:	b938      	cbnz	r0, 8008f86 <rmw_uxrce_fini_client_memory+0x22>
 8008f76:	6020      	str	r0, [r4, #0]
 8008f78:	6861      	ldr	r1, [r4, #4]
 8008f7a:	b121      	cbz	r1, 8008f86 <rmw_uxrce_fini_client_memory+0x22>
 8008f7c:	4803      	ldr	r0, [pc, #12]	@ (8008f8c <rmw_uxrce_fini_client_memory+0x28>)
 8008f7e:	f004 f983 	bl	800d288 <put_memory>
 8008f82:	2300      	movs	r3, #0
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	08011e90 	.word	0x08011e90
 8008f8c:	200091c8 	.word	0x200091c8

08008f90 <rmw_uxrce_fini_topic_memory>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4604      	mov	r4, r0
 8008f94:	4621      	mov	r1, r4
 8008f96:	4803      	ldr	r0, [pc, #12]	@ (8008fa4 <rmw_uxrce_fini_topic_memory+0x14>)
 8008f98:	f004 f976 	bl	800d288 <put_memory>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61a3      	str	r3, [r4, #24]
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000daf4 	.word	0x2000daf4

08008fa8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008fa8:	b082      	sub	sp, #8
 8008faa:	b530      	push	{r4, r5, lr}
 8008fac:	4925      	ldr	r1, [pc, #148]	@ (8009044 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008fae:	680d      	ldr	r5, [r1, #0]
 8008fb0:	ac03      	add	r4, sp, #12
 8008fb2:	e884 000c 	stmia.w	r4, {r2, r3}
 8008fb6:	461c      	mov	r4, r3
 8008fb8:	2d00      	cmp	r5, #0
 8008fba:	d041      	beq.n	8009040 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8008fc8:	4290      	cmp	r0, r2
 8008fca:	bf08      	it	eq
 8008fcc:	3101      	addeq	r1, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f6      	bne.n	8008fc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008fd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d029      	beq.n	800902e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008fda:	d907      	bls.n	8008fec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d005      	beq.n	8008fec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	b002      	add	sp, #8
 8008fea:	4770      	bx	lr
 8008fec:	b314      	cbz	r4, 8009034 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008fee:	428c      	cmp	r4, r1
 8008ff0:	d820      	bhi.n	8009034 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008ff2:	2d00      	cmp	r5, #0
 8008ff4:	d0f4      	beq.n	8008fe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8008ffc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8009000:	e002      	b.n	8009008 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8009002:	686d      	ldr	r5, [r5, #4]
 8009004:	2d00      	cmp	r5, #0
 8009006:	d0ec      	beq.n	8008fe2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009008:	68ab      	ldr	r3, [r5, #8]
 800900a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800900e:	4290      	cmp	r0, r2
 8009010:	d1f7      	bne.n	8009002 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009012:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009016:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800901a:	4562      	cmp	r2, ip
 800901c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009020:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009024:	daed      	bge.n	8009002 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009026:	4694      	mov	ip, r2
 8009028:	461c      	mov	r4, r3
 800902a:	4629      	mov	r1, r5
 800902c:	e7e9      	b.n	8009002 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800902e:	b10c      	cbz	r4, 8009034 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8009030:	428c      	cmp	r4, r1
 8009032:	d9d5      	bls.n	8008fe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009038:	4802      	ldr	r0, [pc, #8]	@ (8009044 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800903a:	b002      	add	sp, #8
 800903c:	f004 b914 	b.w	800d268 <get_memory>
 8009040:	4629      	mov	r1, r5
 8009042:	e7c6      	b.n	8008fd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009044:	2000dad4 	.word	0x2000dad4

08009048 <run_xrce_session>:
 8009048:	b510      	push	{r4, lr}
 800904a:	788c      	ldrb	r4, [r1, #2]
 800904c:	b086      	sub	sp, #24
 800904e:	2c01      	cmp	r4, #1
 8009050:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009054:	d00c      	beq.n	8009070 <run_xrce_session+0x28>
 8009056:	4619      	mov	r1, r3
 8009058:	2301      	movs	r3, #1
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	f10d 020e 	add.w	r2, sp, #14
 8009060:	f10d 0317 	add.w	r3, sp, #23
 8009064:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009068:	f000 ff42 	bl	8009ef0 <uxr_run_session_until_all_status>
 800906c:	b006      	add	sp, #24
 800906e:	bd10      	pop	{r4, pc}
 8009070:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009074:	f000 fb90 	bl	8009798 <uxr_flash_output_streams>
 8009078:	4620      	mov	r0, r4
 800907a:	b006      	add	sp, #24
 800907c:	bd10      	pop	{r4, pc}
 800907e:	bf00      	nop

08009080 <convert_qos_profile>:
 8009080:	7a4a      	ldrb	r2, [r1, #9]
 8009082:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009086:	2a02      	cmp	r2, #2
 8009088:	bf18      	it	ne
 800908a:	2200      	movne	r2, #0
 800908c:	7002      	strb	r2, [r0, #0]
 800908e:	780a      	ldrb	r2, [r1, #0]
 8009090:	8889      	ldrh	r1, [r1, #4]
 8009092:	8081      	strh	r1, [r0, #4]
 8009094:	f1ac 0c02 	sub.w	ip, ip, #2
 8009098:	f1a2 0202 	sub.w	r2, r2, #2
 800909c:	fabc fc8c 	clz	ip, ip
 80090a0:	fab2 f282 	clz	r2, r2
 80090a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80090a8:	0952      	lsrs	r2, r2, #5
 80090aa:	f880 c001 	strb.w	ip, [r0, #1]
 80090ae:	7082      	strb	r2, [r0, #2]
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop

080090b4 <generate_type_name>:
 80090b4:	b530      	push	{r4, r5, lr}
 80090b6:	2300      	movs	r3, #0
 80090b8:	700b      	strb	r3, [r1, #0]
 80090ba:	6803      	ldr	r3, [r0, #0]
 80090bc:	b087      	sub	sp, #28
 80090be:	4614      	mov	r4, r2
 80090c0:	b1d3      	cbz	r3, 80090f8 <generate_type_name+0x44>
 80090c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009100 <generate_type_name+0x4c>)
 80090c4:	4615      	mov	r5, r2
 80090c6:	9203      	str	r2, [sp, #12]
 80090c8:	9500      	str	r5, [sp, #0]
 80090ca:	6842      	ldr	r2, [r0, #4]
 80090cc:	480d      	ldr	r0, [pc, #52]	@ (8009104 <generate_type_name+0x50>)
 80090ce:	9001      	str	r0, [sp, #4]
 80090d0:	4608      	mov	r0, r1
 80090d2:	490d      	ldr	r1, [pc, #52]	@ (8009108 <generate_type_name+0x54>)
 80090d4:	9204      	str	r2, [sp, #16]
 80090d6:	9105      	str	r1, [sp, #20]
 80090d8:	9102      	str	r1, [sp, #8]
 80090da:	4a0c      	ldr	r2, [pc, #48]	@ (800910c <generate_type_name+0x58>)
 80090dc:	4621      	mov	r1, r4
 80090de:	f007 fa65 	bl	80105ac <sniprintf>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	db05      	blt.n	80090f2 <generate_type_name+0x3e>
 80090e6:	4284      	cmp	r4, r0
 80090e8:	bfd4      	ite	le
 80090ea:	2000      	movle	r0, #0
 80090ec:	2001      	movgt	r0, #1
 80090ee:	b007      	add	sp, #28
 80090f0:	bd30      	pop	{r4, r5, pc}
 80090f2:	2000      	movs	r0, #0
 80090f4:	b007      	add	sp, #28
 80090f6:	bd30      	pop	{r4, r5, pc}
 80090f8:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <generate_type_name+0x5c>)
 80090fa:	4a01      	ldr	r2, [pc, #4]	@ (8009100 <generate_type_name+0x4c>)
 80090fc:	461d      	mov	r5, r3
 80090fe:	e7e2      	b.n	80090c6 <generate_type_name+0x12>
 8009100:	080119d0 	.word	0x080119d0
 8009104:	080119e8 	.word	0x080119e8
 8009108:	080119e4 	.word	0x080119e4
 800910c:	080119d4 	.word	0x080119d4
 8009110:	08011c68 	.word	0x08011c68

08009114 <generate_topic_name>:
 8009114:	b510      	push	{r4, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	4614      	mov	r4, r2
 800911a:	9000      	str	r0, [sp, #0]
 800911c:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <generate_topic_name+0x2c>)
 800911e:	4a09      	ldr	r2, [pc, #36]	@ (8009144 <generate_topic_name+0x30>)
 8009120:	4608      	mov	r0, r1
 8009122:	4621      	mov	r1, r4
 8009124:	f007 fa42 	bl	80105ac <sniprintf>
 8009128:	2800      	cmp	r0, #0
 800912a:	db05      	blt.n	8009138 <generate_topic_name+0x24>
 800912c:	4284      	cmp	r4, r0
 800912e:	bfd4      	ite	le
 8009130:	2000      	movle	r0, #0
 8009132:	2001      	movgt	r0, #1
 8009134:	b002      	add	sp, #8
 8009136:	bd10      	pop	{r4, pc}
 8009138:	2000      	movs	r0, #0
 800913a:	b002      	add	sp, #8
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	080119f4 	.word	0x080119f4
 8009144:	080119ec 	.word	0x080119ec

08009148 <is_uxrce_rmw_identifier_valid>:
 8009148:	b510      	push	{r4, lr}
 800914a:	4604      	mov	r4, r0
 800914c:	b140      	cbz	r0, 8009160 <is_uxrce_rmw_identifier_valid+0x18>
 800914e:	f004 f8af 	bl	800d2b0 <rmw_get_implementation_identifier>
 8009152:	4601      	mov	r1, r0
 8009154:	4620      	mov	r0, r4
 8009156:	f7f7 f843 	bl	80001e0 <strcmp>
 800915a:	fab0 f080 	clz	r0, r0
 800915e:	0940      	lsrs	r0, r0, #5
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop

08009164 <get_message_typesupport_handle>:
 8009164:	6883      	ldr	r3, [r0, #8]
 8009166:	4718      	bx	r3

08009168 <get_message_typesupport_handle_function>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f7f7 f837 	bl	80001e0 <strcmp>
 8009172:	2800      	cmp	r0, #0
 8009174:	bf0c      	ite	eq
 8009176:	4620      	moveq	r0, r4
 8009178:	2000      	movne	r0, #0
 800917a:	bd10      	pop	{r4, pc}

0800917c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	6805      	ldr	r5, [r0, #0]
 8009182:	4604      	mov	r4, r0
 8009184:	4628      	mov	r0, r5
 8009186:	460e      	mov	r6, r1
 8009188:	f7f7 f82a 	bl	80001e0 <strcmp>
 800918c:	b1c8      	cbz	r0, 80091c2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800918e:	4b11      	ldr	r3, [pc, #68]	@ (80091d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429d      	cmp	r5, r3
 8009194:	d112      	bne.n	80091bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8009196:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800919a:	f8d8 4000 	ldr.w	r4, [r8]
 800919e:	b16c      	cbz	r4, 80091bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80091a0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80091a4:	2700      	movs	r7, #0
 80091a6:	3d04      	subs	r5, #4
 80091a8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80091ac:	4631      	mov	r1, r6
 80091ae:	f7f7 f817 	bl	80001e0 <strcmp>
 80091b2:	00bb      	lsls	r3, r7, #2
 80091b4:	b140      	cbz	r0, 80091c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80091b6:	3701      	adds	r7, #1
 80091b8:	42bc      	cmp	r4, r7
 80091ba:	d1f5      	bne.n	80091a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80091bc:	2000      	movs	r0, #0
 80091be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c2:	4620      	mov	r0, r4
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80091cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	58d3      	ldr	r3, [r2, r3]
 80091d2:	4718      	bx	r3
 80091d4:	200001d0 	.word	0x200001d0

080091d8 <geometry_msgs__msg__Twist__init>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	4605      	mov	r5, r0
 80091dc:	b1a8      	cbz	r0, 800920a <geometry_msgs__msg__Twist__init+0x32>
 80091de:	f000 f82b 	bl	8009238 <geometry_msgs__msg__Vector3__init>
 80091e2:	4604      	mov	r4, r0
 80091e4:	b140      	cbz	r0, 80091f8 <geometry_msgs__msg__Twist__init+0x20>
 80091e6:	f105 0618 	add.w	r6, r5, #24
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 f824 	bl	8009238 <geometry_msgs__msg__Vector3__init>
 80091f0:	4604      	mov	r4, r0
 80091f2:	b168      	cbz	r0, 8009210 <geometry_msgs__msg__Twist__init+0x38>
 80091f4:	4620      	mov	r0, r4
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 f821 	bl	8009240 <geometry_msgs__msg__Vector3__fini>
 80091fe:	f105 0018 	add.w	r0, r5, #24
 8009202:	f000 f81d 	bl	8009240 <geometry_msgs__msg__Vector3__fini>
 8009206:	4620      	mov	r0, r4
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	4604      	mov	r4, r0
 800920c:	4620      	mov	r0, r4
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f815 	bl	8009240 <geometry_msgs__msg__Vector3__fini>
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f812 	bl	8009240 <geometry_msgs__msg__Vector3__fini>
 800921c:	e7ea      	b.n	80091f4 <geometry_msgs__msg__Twist__init+0x1c>
 800921e:	bf00      	nop

08009220 <geometry_msgs__msg__Twist__fini>:
 8009220:	b148      	cbz	r0, 8009236 <geometry_msgs__msg__Twist__fini+0x16>
 8009222:	b510      	push	{r4, lr}
 8009224:	4604      	mov	r4, r0
 8009226:	f000 f80b 	bl	8009240 <geometry_msgs__msg__Vector3__fini>
 800922a:	f104 0018 	add.w	r0, r4, #24
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	f000 b805 	b.w	8009240 <geometry_msgs__msg__Vector3__fini>
 8009236:	4770      	bx	lr

08009238 <geometry_msgs__msg__Vector3__init>:
 8009238:	3800      	subs	r0, #0
 800923a:	bf18      	it	ne
 800923c:	2001      	movne	r0, #1
 800923e:	4770      	bx	lr

08009240 <geometry_msgs__msg__Vector3__fini>:
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop

08009244 <uxr_buffer_delete_entity>:
 8009244:	b510      	push	{r4, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	b08e      	sub	sp, #56	@ 0x38
 800924a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800924e:	2303      	movs	r3, #3
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2204      	movs	r2, #4
 8009254:	ab06      	add	r3, sp, #24
 8009256:	4604      	mov	r4, r0
 8009258:	9103      	str	r1, [sp, #12]
 800925a:	f001 f871 	bl	800a340 <uxr_prepare_stream_to_write_submessage>
 800925e:	b918      	cbnz	r0, 8009268 <uxr_buffer_delete_entity+0x24>
 8009260:	4604      	mov	r4, r0
 8009262:	4620      	mov	r0, r4
 8009264:	b00e      	add	sp, #56	@ 0x38
 8009266:	bd10      	pop	{r4, pc}
 8009268:	9902      	ldr	r1, [sp, #8]
 800926a:	aa05      	add	r2, sp, #20
 800926c:	4620      	mov	r0, r4
 800926e:	f001 f99d 	bl	800a5ac <uxr_init_base_object_request>
 8009272:	a905      	add	r1, sp, #20
 8009274:	4604      	mov	r4, r0
 8009276:	a806      	add	r0, sp, #24
 8009278:	f002 fb02 	bl	800b880 <uxr_serialize_DELETE_Payload>
 800927c:	4620      	mov	r0, r4
 800927e:	b00e      	add	sp, #56	@ 0x38
 8009280:	bd10      	pop	{r4, pc}
 8009282:	bf00      	nop

08009284 <uxr_common_create_entity>:
 8009284:	b510      	push	{r4, lr}
 8009286:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800928a:	b08c      	sub	sp, #48	@ 0x30
 800928c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009290:	f1bc 0f01 	cmp.w	ip, #1
 8009294:	bf0c      	ite	eq
 8009296:	f003 0201 	andeq.w	r2, r3, #1
 800929a:	2200      	movne	r2, #0
 800929c:	330e      	adds	r3, #14
 800929e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80092a2:	9101      	str	r1, [sp, #4]
 80092a4:	441a      	add	r2, r3
 80092a6:	2301      	movs	r3, #1
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	9903      	ldr	r1, [sp, #12]
 80092ac:	ab04      	add	r3, sp, #16
 80092ae:	b292      	uxth	r2, r2
 80092b0:	4604      	mov	r4, r0
 80092b2:	f001 f845 	bl	800a340 <uxr_prepare_stream_to_write_submessage>
 80092b6:	b918      	cbnz	r0, 80092c0 <uxr_common_create_entity+0x3c>
 80092b8:	4604      	mov	r4, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	b00c      	add	sp, #48	@ 0x30
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	9902      	ldr	r1, [sp, #8]
 80092c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092c4:	4620      	mov	r0, r4
 80092c6:	f001 f971 	bl	800a5ac <uxr_init_base_object_request>
 80092ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092cc:	4604      	mov	r4, r0
 80092ce:	a804      	add	r0, sp, #16
 80092d0:	f002 fa32 	bl	800b738 <uxr_serialize_CREATE_Payload>
 80092d4:	4620      	mov	r0, r4
 80092d6:	b00c      	add	sp, #48	@ 0x30
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop

080092dc <uxr_buffer_create_participant_bin>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80092e2:	ac11      	add	r4, sp, #68	@ 0x44
 80092e4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80092e8:	2303      	movs	r3, #3
 80092ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80092ee:	7223      	strb	r3, [r4, #8]
 80092f0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80092f2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80092f6:	2201      	movs	r2, #1
 80092f8:	2100      	movs	r1, #0
 80092fa:	4605      	mov	r5, r0
 80092fc:	7122      	strb	r2, [r4, #4]
 80092fe:	f88d 1014 	strb.w	r1, [sp, #20]
 8009302:	b1cb      	cbz	r3, 8009338 <uxr_buffer_create_participant_bin+0x5c>
 8009304:	f88d 201c 	strb.w	r2, [sp, #28]
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800930e:	a915      	add	r1, sp, #84	@ 0x54
 8009310:	a809      	add	r0, sp, #36	@ 0x24
 8009312:	f7ff f80d 	bl	8008330 <ucdr_init_buffer>
 8009316:	a905      	add	r1, sp, #20
 8009318:	a809      	add	r0, sp, #36	@ 0x24
 800931a:	f001 fedb 	bl	800b0d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800931e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009320:	9600      	str	r6, [sp, #0]
 8009322:	9401      	str	r4, [sp, #4]
 8009324:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009328:	60e3      	str	r3, [r4, #12]
 800932a:	4628      	mov	r0, r5
 800932c:	b29b      	uxth	r3, r3
 800932e:	f7ff ffa9 	bl	8009284 <uxr_common_create_entity>
 8009332:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	f88d 301c 	strb.w	r3, [sp, #28]
 800933c:	e7e5      	b.n	800930a <uxr_buffer_create_participant_bin+0x2e>
 800933e:	bf00      	nop

08009340 <uxr_buffer_create_topic_bin>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8009346:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800934a:	9105      	str	r1, [sp, #20]
 800934c:	4605      	mov	r5, r0
 800934e:	a997      	add	r1, sp, #604	@ 0x25c
 8009350:	4618      	mov	r0, r3
 8009352:	2302      	movs	r3, #2
 8009354:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8009358:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800935c:	f000 f8ee 	bl	800953c <uxr_object_id_to_raw>
 8009360:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8009366:	930a      	str	r3, [sp, #40]	@ 0x28
 8009368:	2303      	movs	r3, #3
 800936a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800936e:	2301      	movs	r3, #1
 8009370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009374:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009378:	a917      	add	r1, sp, #92	@ 0x5c
 800937a:	2300      	movs	r3, #0
 800937c:	a80b      	add	r0, sp, #44	@ 0x2c
 800937e:	f88d 301c 	strb.w	r3, [sp, #28]
 8009382:	f7fe ffd5 	bl	8008330 <ucdr_init_buffer>
 8009386:	a906      	add	r1, sp, #24
 8009388:	a80b      	add	r0, sp, #44	@ 0x2c
 800938a:	f001 fec5 	bl	800b118 <uxr_serialize_OBJK_Topic_Binary>
 800938e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009390:	9316      	str	r3, [sp, #88]	@ 0x58
 8009392:	ac13      	add	r4, sp, #76	@ 0x4c
 8009394:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009398:	9600      	str	r6, [sp, #0]
 800939a:	9401      	str	r4, [sp, #4]
 800939c:	b29b      	uxth	r3, r3
 800939e:	4628      	mov	r0, r5
 80093a0:	f7ff ff70 	bl	8009284 <uxr_common_create_entity>
 80093a4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	bf00      	nop

080093ac <uxr_buffer_create_publisher_bin>:
 80093ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ae:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80093b2:	4605      	mov	r5, r0
 80093b4:	9105      	str	r1, [sp, #20]
 80093b6:	4618      	mov	r0, r3
 80093b8:	2603      	movs	r6, #3
 80093ba:	a992      	add	r1, sp, #584	@ 0x248
 80093bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80093c0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80093c4:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80093c8:	f000 f8b8 	bl	800953c <uxr_object_id_to_raw>
 80093cc:	2300      	movs	r3, #0
 80093ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093d2:	a912      	add	r1, sp, #72	@ 0x48
 80093d4:	a806      	add	r0, sp, #24
 80093d6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80093da:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80093de:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80093e2:	f7fe ffa5 	bl	8008330 <ucdr_init_buffer>
 80093e6:	a993      	add	r1, sp, #588	@ 0x24c
 80093e8:	a806      	add	r0, sp, #24
 80093ea:	f001 ff49 	bl	800b280 <uxr_serialize_OBJK_Publisher_Binary>
 80093ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80093f2:	ac0e      	add	r4, sp, #56	@ 0x38
 80093f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80093f8:	9700      	str	r7, [sp, #0]
 80093fa:	9401      	str	r4, [sp, #4]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	4628      	mov	r0, r5
 8009400:	f7ff ff40 	bl	8009284 <uxr_common_create_entity>
 8009404:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	bf00      	nop

0800940c <uxr_buffer_create_datawriter_bin>:
 800940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009410:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009414:	ac1d      	add	r4, sp, #116	@ 0x74
 8009416:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800941a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800941e:	9105      	str	r1, [sp, #20]
 8009420:	4606      	mov	r6, r0
 8009422:	a9a1      	add	r1, sp, #644	@ 0x284
 8009424:	4618      	mov	r0, r3
 8009426:	2305      	movs	r3, #5
 8009428:	7123      	strb	r3, [r4, #4]
 800942a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800942e:	2703      	movs	r7, #3
 8009430:	f000 f884 	bl	800953c <uxr_object_id_to_raw>
 8009434:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8009436:	7227      	strb	r7, [r4, #8]
 8009438:	a90e      	add	r1, sp, #56	@ 0x38
 800943a:	f000 f87f 	bl	800953c <uxr_object_id_to_raw>
 800943e:	2300      	movs	r3, #0
 8009440:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8009444:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8009448:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800944c:	3d00      	subs	r5, #0
 800944e:	bf18      	it	ne
 8009450:	2501      	movne	r5, #1
 8009452:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8009456:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800945a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800945e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009462:	2301      	movs	r3, #1
 8009464:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8009468:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800946c:	bb8a      	cbnz	r2, 80094d2 <uxr_buffer_create_datawriter_bin+0xc6>
 800946e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009472:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8009476:	f04f 0c13 	mov.w	ip, #19
 800947a:	250b      	movs	r5, #11
 800947c:	2221      	movs	r2, #33	@ 0x21
 800947e:	2111      	movs	r1, #17
 8009480:	2009      	movs	r0, #9
 8009482:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8009486:	b923      	cbnz	r3, 8009492 <uxr_buffer_create_datawriter_bin+0x86>
 8009488:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800948c:	4672      	mov	r2, lr
 800948e:	4661      	mov	r1, ip
 8009490:	4628      	mov	r0, r5
 8009492:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8009496:	2b01      	cmp	r3, #1
 8009498:	d025      	beq.n	80094e6 <uxr_buffer_create_datawriter_bin+0xda>
 800949a:	2b03      	cmp	r3, #3
 800949c:	d029      	beq.n	80094f2 <uxr_buffer_create_datawriter_bin+0xe6>
 800949e:	b32b      	cbz	r3, 80094ec <uxr_buffer_create_datawriter_bin+0xe0>
 80094a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094a4:	a921      	add	r1, sp, #132	@ 0x84
 80094a6:	a806      	add	r0, sp, #24
 80094a8:	f7fe ff42 	bl	8008330 <ucdr_init_buffer>
 80094ac:	a90e      	add	r1, sp, #56	@ 0x38
 80094ae:	a806      	add	r0, sp, #24
 80094b0:	f001 ff5c 	bl	800b36c <uxr_serialize_OBJK_DataWriter_Binary>
 80094b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b6:	f8cd 8000 	str.w	r8, [sp]
 80094ba:	9401      	str	r4, [sp, #4]
 80094bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80094c0:	60e3      	str	r3, [r4, #12]
 80094c2:	4630      	mov	r0, r6
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f7ff fedd 	bl	8009284 <uxr_common_create_entity>
 80094ca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80094ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80094d6:	f04f 0c12 	mov.w	ip, #18
 80094da:	250a      	movs	r5, #10
 80094dc:	2220      	movs	r2, #32
 80094de:	2110      	movs	r1, #16
 80094e0:	2008      	movs	r0, #8
 80094e2:	2702      	movs	r7, #2
 80094e4:	e7cd      	b.n	8009482 <uxr_buffer_create_datawriter_bin+0x76>
 80094e6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80094ea:	e7d9      	b.n	80094a0 <uxr_buffer_create_datawriter_bin+0x94>
 80094ec:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80094f0:	e7d6      	b.n	80094a0 <uxr_buffer_create_datawriter_bin+0x94>
 80094f2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80094f6:	e7d3      	b.n	80094a0 <uxr_buffer_create_datawriter_bin+0x94>

080094f8 <uxr_object_id>:
 80094f8:	b082      	sub	sp, #8
 80094fa:	2300      	movs	r3, #0
 80094fc:	f88d 1006 	strb.w	r1, [sp, #6]
 8009500:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009504:	f360 030f 	bfi	r3, r0, #0, #16
 8009508:	f362 431f 	bfi	r3, r2, #16, #16
 800950c:	4618      	mov	r0, r3
 800950e:	b002      	add	sp, #8
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop

08009514 <uxr_object_id_from_raw>:
 8009514:	7843      	ldrb	r3, [r0, #1]
 8009516:	7801      	ldrb	r1, [r0, #0]
 8009518:	b082      	sub	sp, #8
 800951a:	f003 020f 	and.w	r2, r3, #15
 800951e:	f88d 2006 	strb.w	r2, [sp, #6]
 8009522:	091b      	lsrs	r3, r3, #4
 8009524:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009528:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800952c:	2000      	movs	r0, #0
 800952e:	f363 000f 	bfi	r0, r3, #0, #16
 8009532:	f362 401f 	bfi	r0, r2, #16, #16
 8009536:	b002      	add	sp, #8
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <uxr_object_id_to_raw>:
 800953c:	4602      	mov	r2, r0
 800953e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8009542:	b082      	sub	sp, #8
 8009544:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8009548:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800954c:	f881 c000 	strb.w	ip, [r1]
 8009550:	7048      	strb	r0, [r1, #1]
 8009552:	b002      	add	sp, #8
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop

08009558 <on_get_fragmentation_info>:
 8009558:	b500      	push	{lr}
 800955a:	b08b      	sub	sp, #44	@ 0x2c
 800955c:	4601      	mov	r1, r0
 800955e:	2204      	movs	r2, #4
 8009560:	a802      	add	r0, sp, #8
 8009562:	f7fe fee5 	bl	8008330 <ucdr_init_buffer>
 8009566:	f10d 0305 	add.w	r3, sp, #5
 800956a:	f10d 0206 	add.w	r2, sp, #6
 800956e:	a901      	add	r1, sp, #4
 8009570:	a802      	add	r0, sp, #8
 8009572:	f001 f99d 	bl	800a8b0 <uxr_read_submessage_header>
 8009576:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800957a:	2b0d      	cmp	r3, #13
 800957c:	d003      	beq.n	8009586 <on_get_fragmentation_info+0x2e>
 800957e:	2000      	movs	r0, #0
 8009580:	b00b      	add	sp, #44	@ 0x2c
 8009582:	f85d fb04 	ldr.w	pc, [sp], #4
 8009586:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800958a:	f013 0f02 	tst.w	r3, #2
 800958e:	bf14      	ite	ne
 8009590:	2002      	movne	r0, #2
 8009592:	2001      	moveq	r0, #1
 8009594:	b00b      	add	sp, #44	@ 0x2c
 8009596:	f85d fb04 	ldr.w	pc, [sp], #4
 800959a:	bf00      	nop

0800959c <read_submessage_get_info>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	2500      	movs	r5, #0
 80095a0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80095a4:	4604      	mov	r4, r0
 80095a6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80095aa:	460e      	mov	r6, r1
 80095ac:	a810      	add	r0, sp, #64	@ 0x40
 80095ae:	4629      	mov	r1, r5
 80095b0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80095b4:	f007 f8aa 	bl	801070c <memset>
 80095b8:	a903      	add	r1, sp, #12
 80095ba:	4630      	mov	r0, r6
 80095bc:	f002 f94c 	bl	800b858 <uxr_deserialize_GET_INFO_Payload>
 80095c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80095c4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 ffe7 	bl	800a59c <uxr_session_header_offset>
 80095ce:	462b      	mov	r3, r5
 80095d0:	9000      	str	r0, [sp, #0]
 80095d2:	220c      	movs	r2, #12
 80095d4:	a905      	add	r1, sp, #20
 80095d6:	a808      	add	r0, sp, #32
 80095d8:	f7fe fe98 	bl	800830c <ucdr_init_buffer_origin_offset>
 80095dc:	a910      	add	r1, sp, #64	@ 0x40
 80095de:	a808      	add	r0, sp, #32
 80095e0:	f002 f9ac 	bl	800b93c <uxr_serialize_INFO_Payload>
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	462a      	mov	r2, r5
 80095e8:	4629      	mov	r1, r5
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 ff80 	bl	800a4f0 <uxr_stamp_session_header>
 80095f0:	a808      	add	r0, sp, #32
 80095f2:	f7fe fec9 	bl	8008388 <ucdr_buffer_length>
 80095f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80095f8:	4602      	mov	r2, r0
 80095fa:	a905      	add	r1, sp, #20
 80095fc:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009600:	47a0      	blx	r4
 8009602:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8009606:	bd70      	pop	{r4, r5, r6, pc}

08009608 <write_submessage_acknack.isra.0>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	b092      	sub	sp, #72	@ 0x48
 800960c:	4605      	mov	r5, r0
 800960e:	460e      	mov	r6, r1
 8009610:	4614      	mov	r4, r2
 8009612:	f000 ffc3 	bl	800a59c <uxr_session_header_offset>
 8009616:	a905      	add	r1, sp, #20
 8009618:	9000      	str	r0, [sp, #0]
 800961a:	2300      	movs	r3, #0
 800961c:	a80a      	add	r0, sp, #40	@ 0x28
 800961e:	2211      	movs	r2, #17
 8009620:	f7fe fe74 	bl	800830c <ucdr_init_buffer_origin_offset>
 8009624:	2218      	movs	r2, #24
 8009626:	fb02 5404 	mla	r4, r2, r4, r5
 800962a:	2300      	movs	r3, #0
 800962c:	2205      	movs	r2, #5
 800962e:	3450      	adds	r4, #80	@ 0x50
 8009630:	210a      	movs	r1, #10
 8009632:	a80a      	add	r0, sp, #40	@ 0x28
 8009634:	f001 f922 	bl	800a87c <uxr_buffer_submessage_header>
 8009638:	a903      	add	r1, sp, #12
 800963a:	4620      	mov	r0, r4
 800963c:	f004 feee 	bl	800e41c <uxr_compute_acknack>
 8009640:	ba40      	rev16	r0, r0
 8009642:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009646:	a903      	add	r1, sp, #12
 8009648:	a80a      	add	r0, sp, #40	@ 0x28
 800964a:	f88d 6010 	strb.w	r6, [sp, #16]
 800964e:	f002 f9e5 	bl	800ba1c <uxr_serialize_ACKNACK_Payload>
 8009652:	2200      	movs	r2, #0
 8009654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009656:	4611      	mov	r1, r2
 8009658:	4628      	mov	r0, r5
 800965a:	f000 ff49 	bl	800a4f0 <uxr_stamp_session_header>
 800965e:	a80a      	add	r0, sp, #40	@ 0x28
 8009660:	f7fe fe92 	bl	8008388 <ucdr_buffer_length>
 8009664:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009666:	4602      	mov	r2, r0
 8009668:	a905      	add	r1, sp, #20
 800966a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800966e:	47a0      	blx	r4
 8009670:	b012      	add	sp, #72	@ 0x48
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	0000      	movs	r0, r0
	...

08009678 <uxr_init_session>:
 8009678:	b510      	push	{r4, lr}
 800967a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80096b0 <uxr_init_session+0x38>
 800967e:	2300      	movs	r3, #0
 8009680:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8009684:	4604      	mov	r4, r0
 8009686:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800968a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800968e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8009692:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8009696:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800969a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800969e:	2181      	movs	r1, #129	@ 0x81
 80096a0:	f000 fe92 	bl	800a3c8 <uxr_init_session_info>
 80096a4:	f104 0008 	add.w	r0, r4, #8
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f001 b802 	b.w	800a6b4 <uxr_init_stream_storage>
	...

080096b8 <uxr_set_status_callback>:
 80096b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop

080096c0 <uxr_set_topic_callback>:
 80096c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop

080096c8 <uxr_set_request_callback>:
 80096c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <uxr_set_reply_callback>:
 80096d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop

080096d8 <uxr_create_output_best_effort_stream>:
 80096d8:	b510      	push	{r4, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	e9cd 2100 	strd	r2, r1, [sp]
 80096e0:	4604      	mov	r4, r0
 80096e2:	f000 ff5b 	bl	800a59c <uxr_session_header_offset>
 80096e6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80096ea:	4603      	mov	r3, r0
 80096ec:	f104 0008 	add.w	r0, r4, #8
 80096f0:	b004      	add	sp, #16
 80096f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f6:	f001 b827 	b.w	800a748 <uxr_add_output_best_effort_buffer>
 80096fa:	bf00      	nop

080096fc <uxr_create_output_reliable_stream>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8009704:	4604      	mov	r4, r0
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	f000 ff48 	bl	800a59c <uxr_session_header_offset>
 800970c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009710:	9000      	str	r0, [sp, #0]
 8009712:	9905      	ldr	r1, [sp, #20]
 8009714:	f104 0008 	add.w	r0, r4, #8
 8009718:	f001 f82a 	bl	800a770 <uxr_add_output_reliable_buffer>
 800971c:	2200      	movs	r2, #0
 800971e:	b2c3      	uxtb	r3, r0
 8009720:	f363 0207 	bfi	r2, r3, #0, #8
 8009724:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009728:	f363 220f 	bfi	r2, r3, #8, #8
 800972c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009730:	f363 4217 	bfi	r2, r3, #16, #8
 8009734:	0e03      	lsrs	r3, r0, #24
 8009736:	f363 621f 	bfi	r2, r3, #24, #8
 800973a:	4610      	mov	r0, r2
 800973c:	b008      	add	sp, #32
 800973e:	bd10      	pop	{r4, pc}

08009740 <uxr_create_input_best_effort_stream>:
 8009740:	b082      	sub	sp, #8
 8009742:	3008      	adds	r0, #8
 8009744:	b002      	add	sp, #8
 8009746:	f001 b82d 	b.w	800a7a4 <uxr_add_input_best_effort_buffer>
 800974a:	bf00      	nop

0800974c <uxr_create_input_reliable_stream>:
 800974c:	b510      	push	{r4, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	4c0b      	ldr	r4, [pc, #44]	@ (8009780 <uxr_create_input_reliable_stream+0x34>)
 8009752:	9400      	str	r4, [sp, #0]
 8009754:	3008      	adds	r0, #8
 8009756:	f001 f83b 	bl	800a7d0 <uxr_add_input_reliable_buffer>
 800975a:	2200      	movs	r2, #0
 800975c:	b2c3      	uxtb	r3, r0
 800975e:	f363 0207 	bfi	r2, r3, #0, #8
 8009762:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009766:	f363 220f 	bfi	r2, r3, #8, #8
 800976a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800976e:	f363 4217 	bfi	r2, r3, #16, #8
 8009772:	0e03      	lsrs	r3, r0, #24
 8009774:	f363 621f 	bfi	r2, r3, #24, #8
 8009778:	4610      	mov	r0, r2
 800977a:	b004      	add	sp, #16
 800977c:	bd10      	pop	{r4, pc}
 800977e:	bf00      	nop
 8009780:	08009559 	.word	0x08009559

08009784 <uxr_epoch_nanos>:
 8009784:	b510      	push	{r4, lr}
 8009786:	4604      	mov	r4, r0
 8009788:	f001 f8d8 	bl	800a93c <uxr_nanos>
 800978c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8009790:	1ac0      	subs	r0, r0, r3
 8009792:	eb61 0102 	sbc.w	r1, r1, r2
 8009796:	bd10      	pop	{r4, pc}

08009798 <uxr_flash_output_streams>:
 8009798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800979c:	7e03      	ldrb	r3, [r0, #24]
 800979e:	b084      	sub	sp, #16
 80097a0:	4604      	mov	r4, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d035      	beq.n	8009812 <uxr_flash_output_streams+0x7a>
 80097a6:	f04f 0900 	mov.w	r9, #0
 80097aa:	4648      	mov	r0, r9
 80097ac:	f10d 0802 	add.w	r8, sp, #2
 80097b0:	af03      	add	r7, sp, #12
 80097b2:	ae02      	add	r6, sp, #8
 80097b4:	e006      	b.n	80097c4 <uxr_flash_output_streams+0x2c>
 80097b6:	7e23      	ldrb	r3, [r4, #24]
 80097b8:	f109 0901 	add.w	r9, r9, #1
 80097bc:	fa5f f089 	uxtb.w	r0, r9
 80097c0:	4283      	cmp	r3, r0
 80097c2:	d926      	bls.n	8009812 <uxr_flash_output_streams+0x7a>
 80097c4:	2201      	movs	r2, #1
 80097c6:	4611      	mov	r1, r2
 80097c8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80097cc:	f000 ff1e 	bl	800a60c <uxr_stream_id>
 80097d0:	3508      	adds	r5, #8
 80097d2:	4684      	mov	ip, r0
 80097d4:	4643      	mov	r3, r8
 80097d6:	463a      	mov	r2, r7
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	f8cd c004 	str.w	ip, [sp, #4]
 80097e0:	f004 fea2 	bl	800e528 <uxr_prepare_best_effort_buffer_to_send>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d0e6      	beq.n	80097b6 <uxr_flash_output_streams+0x1e>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80097ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fe7c 	bl	800a4f0 <uxr_stamp_session_header>
 80097f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80097fa:	9a03      	ldr	r2, [sp, #12]
 80097fc:	685d      	ldr	r5, [r3, #4]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	9902      	ldr	r1, [sp, #8]
 8009802:	47a8      	blx	r5
 8009804:	f109 0901 	add.w	r9, r9, #1
 8009808:	7e23      	ldrb	r3, [r4, #24]
 800980a:	fa5f f089 	uxtb.w	r0, r9
 800980e:	4283      	cmp	r3, r0
 8009810:	d8d8      	bhi.n	80097c4 <uxr_flash_output_streams+0x2c>
 8009812:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009816:	b38b      	cbz	r3, 800987c <uxr_flash_output_streams+0xe4>
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	f10d 0802 	add.w	r8, sp, #2
 8009820:	af03      	add	r7, sp, #12
 8009822:	ae02      	add	r6, sp, #8
 8009824:	4648      	mov	r0, r9
 8009826:	2201      	movs	r2, #1
 8009828:	2102      	movs	r1, #2
 800982a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800982e:	f000 feed 	bl	800a60c <uxr_stream_id>
 8009832:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009836:	3520      	adds	r5, #32
 8009838:	9001      	str	r0, [sp, #4]
 800983a:	e00d      	b.n	8009858 <uxr_flash_output_streams+0xc0>
 800983c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009840:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009844:	9b02      	ldr	r3, [sp, #8]
 8009846:	f000 fe53 	bl	800a4f0 <uxr_stamp_session_header>
 800984a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800984c:	9a03      	ldr	r2, [sp, #12]
 800984e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009852:	9902      	ldr	r1, [sp, #8]
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	47d0      	blx	sl
 8009858:	4643      	mov	r3, r8
 800985a:	463a      	mov	r2, r7
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	f005 f880 	bl	800e964 <uxr_prepare_next_reliable_buffer_to_send>
 8009864:	4603      	mov	r3, r0
 8009866:	4620      	mov	r0, r4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e7      	bne.n	800983c <uxr_flash_output_streams+0xa4>
 800986c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009870:	f109 0901 	add.w	r9, r9, #1
 8009874:	fa5f f089 	uxtb.w	r0, r9
 8009878:	4283      	cmp	r3, r0
 800987a:	d8d4      	bhi.n	8009826 <uxr_flash_output_streams+0x8e>
 800987c:	b004      	add	sp, #16
 800987e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009882:	bf00      	nop

08009884 <read_submessage_info>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	460d      	mov	r5, r1
 800988a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800988e:	4669      	mov	r1, sp
 8009890:	4607      	mov	r7, r0
 8009892:	4628      	mov	r0, r5
 8009894:	f001 feee 	bl	800b674 <uxr_deserialize_BaseObjectReply>
 8009898:	a902      	add	r1, sp, #8
 800989a:	4604      	mov	r4, r0
 800989c:	4628      	mov	r0, r5
 800989e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80098a2:	f7fd fc83 	bl	80071ac <ucdr_deserialize_bool>
 80098a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80098aa:	4004      	ands	r4, r0
 80098ac:	b2e4      	uxtb	r4, r4
 80098ae:	b95b      	cbnz	r3, 80098c8 <read_submessage_info+0x44>
 80098b0:	a987      	add	r1, sp, #540	@ 0x21c
 80098b2:	4628      	mov	r0, r5
 80098b4:	f7fd fc7a 	bl	80071ac <ucdr_deserialize_bool>
 80098b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80098bc:	4606      	mov	r6, r0
 80098be:	b94b      	cbnz	r3, 80098d4 <read_submessage_info+0x50>
 80098c0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	a903      	add	r1, sp, #12
 80098ca:	4628      	mov	r0, r5
 80098cc:	f001 fd7a 	bl	800b3c4 <uxr_deserialize_ObjectVariant>
 80098d0:	4004      	ands	r4, r0
 80098d2:	e7ed      	b.n	80098b0 <read_submessage_info+0x2c>
 80098d4:	a988      	add	r1, sp, #544	@ 0x220
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7fd fc96 	bl	8007208 <ucdr_deserialize_uint8_t>
 80098dc:	4234      	tst	r4, r6
 80098de:	d0ef      	beq.n	80098c0 <read_submessage_info+0x3c>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0ed      	beq.n	80098c0 <read_submessage_info+0x3c>
 80098e4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80098e8:	2b0d      	cmp	r3, #13
 80098ea:	d1e9      	bne.n	80098c0 <read_submessage_info+0x3c>
 80098ec:	a98a      	add	r1, sp, #552	@ 0x228
 80098ee:	4628      	mov	r0, r5
 80098f0:	f7fe fa30 	bl	8007d54 <ucdr_deserialize_int16_t>
 80098f4:	b140      	cbz	r0, 8009908 <read_submessage_info+0x84>
 80098f6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dd07      	ble.n	800990e <read_submessage_info+0x8a>
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	bf14      	ite	ne
 8009904:	2001      	movne	r0, #1
 8009906:	2002      	moveq	r0, #2
 8009908:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800990c:	e7d8      	b.n	80098c0 <read_submessage_info+0x3c>
 800990e:	2000      	movs	r0, #0
 8009910:	e7fa      	b.n	8009908 <read_submessage_info+0x84>
 8009912:	bf00      	nop

08009914 <read_submessage_list>:
 8009914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	b097      	sub	sp, #92	@ 0x5c
 800991a:	4ec1      	ldr	r6, [pc, #772]	@ (8009c20 <read_submessage_list+0x30c>)
 800991c:	9209      	str	r2, [sp, #36]	@ 0x24
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	f04f 0801 	mov.w	r8, #1
 8009926:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800992a:	aa0c      	add	r2, sp, #48	@ 0x30
 800992c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8009930:	4628      	mov	r0, r5
 8009932:	f000 ffbd 	bl	800a8b0 <uxr_read_submessage_header>
 8009936:	2800      	cmp	r0, #0
 8009938:	f000 813e 	beq.w	8009bb8 <read_submessage_list+0x2a4>
 800993c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8009940:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8009944:	3b02      	subs	r3, #2
 8009946:	2b0d      	cmp	r3, #13
 8009948:	d8ed      	bhi.n	8009926 <read_submessage_list+0x12>
 800994a:	a101      	add	r1, pc, #4	@ (adr r1, 8009950 <read_submessage_list+0x3c>)
 800994c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009950:	08009baf 	.word	0x08009baf
 8009954:	08009927 	.word	0x08009927
 8009958:	08009b9f 	.word	0x08009b9f
 800995c:	08009b3d 	.word	0x08009b3d
 8009960:	08009b33 	.word	0x08009b33
 8009964:	08009927 	.word	0x08009927
 8009968:	08009927 	.word	0x08009927
 800996c:	08009a93 	.word	0x08009a93
 8009970:	08009a23 	.word	0x08009a23
 8009974:	080099e3 	.word	0x080099e3
 8009978:	08009927 	.word	0x08009927
 800997c:	08009927 	.word	0x08009927
 8009980:	08009927 	.word	0x08009927
 8009984:	08009989 	.word	0x08009989
 8009988:	a910      	add	r1, sp, #64	@ 0x40
 800998a:	4628      	mov	r0, r5
 800998c:	f002 f896 	bl	800babc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009990:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8009994:	f1b9 0f00 	cmp.w	r9, #0
 8009998:	f000 8116 	beq.w	8009bc8 <read_submessage_list+0x2b4>
 800999c:	f000 ffce 	bl	800a93c <uxr_nanos>
 80099a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80099a8:	2100      	movs	r1, #0
 80099aa:	468c      	mov	ip, r1
 80099ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80099b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80099b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80099b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80099b8:	468c      	mov	ip, r1
 80099ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80099be:	46e2      	mov	sl, ip
 80099c0:	46bc      	mov	ip, r7
 80099c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80099c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80099ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80099ce:	e9cd 7100 	strd	r7, r1, [sp]
 80099d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80099d6:	9106      	str	r1, [sp, #24]
 80099d8:	4620      	mov	r0, r4
 80099da:	47c8      	blx	r9
 80099dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80099e0:	e7a1      	b.n	8009926 <read_submessage_list+0x12>
 80099e2:	a910      	add	r1, sp, #64	@ 0x40
 80099e4:	4628      	mov	r0, r5
 80099e6:	f002 f857 	bl	800ba98 <uxr_deserialize_HEARTBEAT_Payload>
 80099ea:	2100      	movs	r1, #0
 80099ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80099f0:	f000 fe36 	bl	800a660 <uxr_stream_id_from_raw>
 80099f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80099f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80099fa:	4639      	mov	r1, r7
 80099fc:	f104 0008 	add.w	r0, r4, #8
 8009a00:	f000 ff1c 	bl	800a83c <uxr_get_input_reliable_stream>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d08e      	beq.n	8009926 <read_submessage_list+0x12>
 8009a08:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8009a0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8009a10:	f004 fcf8 	bl	800e404 <uxr_process_heartbeat>
 8009a14:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8009a18:	463a      	mov	r2, r7
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7ff fdf4 	bl	8009608 <write_submessage_acknack.isra.0>
 8009a20:	e781      	b.n	8009926 <read_submessage_list+0x12>
 8009a22:	a910      	add	r1, sp, #64	@ 0x40
 8009a24:	4628      	mov	r0, r5
 8009a26:	f002 f80f 	bl	800ba48 <uxr_deserialize_ACKNACK_Payload>
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009a30:	f000 fe16 	bl	800a660 <uxr_stream_id_from_raw>
 8009a34:	900d      	str	r0, [sp, #52]	@ 0x34
 8009a36:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009a3a:	f104 0008 	add.w	r0, r4, #8
 8009a3e:	f000 fee9 	bl	800a814 <uxr_get_output_reliable_stream>
 8009a42:	4607      	mov	r7, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f af6e 	beq.w	8009926 <read_submessage_list+0x12>
 8009a4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8009a4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8009a52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009a56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009a5a:	b289      	uxth	r1, r1
 8009a5c:	f005 f82c 	bl	800eab8 <uxr_process_acknack>
 8009a60:	4638      	mov	r0, r7
 8009a62:	f004 ffe9 	bl	800ea38 <uxr_begin_output_nack_buffer_it>
 8009a66:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009a6a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8009a6e:	e006      	b.n	8009a7e <read_submessage_list+0x16a>
 8009a70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009a72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a74:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009a78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	47c8      	blx	r9
 8009a7e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8009a82:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009a84:	4651      	mov	r1, sl
 8009a86:	4638      	mov	r0, r7
 8009a88:	f004 ffd8 	bl	800ea3c <uxr_next_reliable_nack_buffer_to_send>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d1ef      	bne.n	8009a70 <read_submessage_list+0x15c>
 8009a90:	e749      	b.n	8009926 <read_submessage_list+0x12>
 8009a92:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8009a96:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8009a9a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009a9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009aa2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8009aa6:	4651      	mov	r1, sl
 8009aa8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009aac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8009ab0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8009ab4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8009abe:	f001 fd23 	bl	800b508 <uxr_deserialize_BaseObjectRequest>
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	a90f      	add	r1, sp, #60	@ 0x3c
 8009ac6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8009aca:	f000 fd8d 	bl	800a5e8 <uxr_parse_base_object_request>
 8009ace:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8009ad2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ad4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8009ad8:	9110      	str	r1, [sp, #64]	@ 0x40
 8009ada:	3f04      	subs	r7, #4
 8009adc:	f009 090e 	and.w	r9, r9, #14
 8009ae0:	b2bf      	uxth	r7, r7
 8009ae2:	f1bb 0f00 	cmp.w	fp, #0
 8009ae6:	d006      	beq.n	8009af6 <read_submessage_list+0x1e2>
 8009ae8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	4652      	mov	r2, sl
 8009af0:	2300      	movs	r3, #0
 8009af2:	4620      	mov	r0, r4
 8009af4:	47d8      	blx	fp
 8009af6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009af8:	b16a      	cbz	r2, 8009b16 <read_submessage_list+0x202>
 8009afa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009afc:	2100      	movs	r1, #0
 8009afe:	3802      	subs	r0, #2
 8009b00:	e002      	b.n	8009b08 <read_submessage_list+0x1f4>
 8009b02:	3101      	adds	r1, #1
 8009b04:	4291      	cmp	r1, r2
 8009b06:	d006      	beq.n	8009b16 <read_submessage_list+0x202>
 8009b08:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009b0c:	4553      	cmp	r3, sl
 8009b0e:	d1f8      	bne.n	8009b02 <read_submessage_list+0x1ee>
 8009b10:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009b12:	2200      	movs	r2, #0
 8009b14:	545a      	strb	r2, [r3, r1]
 8009b16:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8009b1a:	9102      	str	r1, [sp, #8]
 8009b1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b1e:	9101      	str	r1, [sp, #4]
 8009b20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b22:	9100      	str	r1, [sp, #0]
 8009b24:	464b      	mov	r3, r9
 8009b26:	463a      	mov	r2, r7
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f005 f848 	bl	800ebc0 <read_submessage_format>
 8009b30:	e6f9      	b.n	8009926 <read_submessage_list+0x12>
 8009b32:	4629      	mov	r1, r5
 8009b34:	4620      	mov	r0, r4
 8009b36:	f7ff fea5 	bl	8009884 <read_submessage_info>
 8009b3a:	e6f4      	b.n	8009926 <read_submessage_list+0x12>
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d03e      	beq.n	8009bbe <read_submessage_list+0x2aa>
 8009b40:	a910      	add	r1, sp, #64	@ 0x40
 8009b42:	4628      	mov	r0, r5
 8009b44:	f001 fedc 	bl	800b900 <uxr_deserialize_STATUS_Payload>
 8009b48:	a90e      	add	r1, sp, #56	@ 0x38
 8009b4a:	aa0d      	add	r2, sp, #52	@ 0x34
 8009b4c:	a810      	add	r0, sp, #64	@ 0x40
 8009b4e:	f000 fd4b 	bl	800a5e8 <uxr_parse_base_object_request>
 8009b52:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8009b56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b58:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8009b5c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8009b60:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009b62:	f1ba 0f00 	cmp.w	sl, #0
 8009b66:	d006      	beq.n	8009b76 <read_submessage_list+0x262>
 8009b68:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	463a      	mov	r2, r7
 8009b70:	464b      	mov	r3, r9
 8009b72:	4620      	mov	r0, r4
 8009b74:	47d0      	blx	sl
 8009b76:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	f43f aed4 	beq.w	8009926 <read_submessage_list+0x12>
 8009b7e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009b80:	2100      	movs	r1, #0
 8009b82:	3802      	subs	r0, #2
 8009b84:	e003      	b.n	8009b8e <read_submessage_list+0x27a>
 8009b86:	3101      	adds	r1, #1
 8009b88:	4291      	cmp	r1, r2
 8009b8a:	f43f aecc 	beq.w	8009926 <read_submessage_list+0x12>
 8009b8e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009b92:	42bb      	cmp	r3, r7
 8009b94:	d1f7      	bne.n	8009b86 <read_submessage_list+0x272>
 8009b96:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009b98:	f803 9001 	strb.w	r9, [r3, r1]
 8009b9c:	e6c3      	b.n	8009926 <read_submessage_list+0x12>
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	f47f aec1 	bne.w	8009926 <read_submessage_list+0x12>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 fc64 	bl	800a474 <uxr_read_create_session_status>
 8009bac:	e6bb      	b.n	8009926 <read_submessage_list+0x12>
 8009bae:	4629      	mov	r1, r5
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f7ff fcf3 	bl	800959c <read_submessage_get_info>
 8009bb6:	e6b6      	b.n	8009926 <read_submessage_list+0x12>
 8009bb8:	b017      	add	sp, #92	@ 0x5c
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 fc63 	bl	800a48c <uxr_read_delete_session_status>
 8009bc6:	e6ae      	b.n	8009926 <read_submessage_list+0x12>
 8009bc8:	f000 feb8 	bl	800a93c <uxr_nanos>
 8009bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009bd0:	464f      	mov	r7, r9
 8009bd2:	fbc3 2706 	smlal	r2, r7, r3, r6
 8009bd6:	1812      	adds	r2, r2, r0
 8009bd8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bda:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009bdc:	eb47 0101 	adc.w	r1, r7, r1
 8009be0:	464f      	mov	r7, r9
 8009be2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	4684      	mov	ip, r0
 8009bea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8009bee:	fbc7 0906 	smlal	r0, r9, r7, r6
 8009bf2:	eb1c 0c00 	adds.w	ip, ip, r0
 8009bf6:	464f      	mov	r7, r9
 8009bf8:	eb43 0307 	adc.w	r3, r3, r7
 8009bfc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8009c00:	eb61 0303 	sbc.w	r3, r1, r3
 8009c04:	0fda      	lsrs	r2, r3, #31
 8009c06:	eb12 020c 	adds.w	r2, r2, ip
 8009c0a:	f143 0300 	adc.w	r3, r3, #0
 8009c0e:	0852      	lsrs	r2, r2, #1
 8009c10:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8009c14:	105b      	asrs	r3, r3, #1
 8009c16:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8009c1a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8009c1e:	e6dd      	b.n	80099dc <read_submessage_list+0xc8>
 8009c20:	3b9aca00 	.word	0x3b9aca00

08009c24 <listen_message_reliably>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	1e0b      	subs	r3, r1, #0
 8009c2a:	b09d      	sub	sp, #116	@ 0x74
 8009c2c:	bfb8      	it	lt
 8009c2e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8009c32:	4680      	mov	r8, r0
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	f000 fe67 	bl	800a908 <uxr_millis>
 8009c3a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8009c3e:	4681      	mov	r9, r0
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	f000 80a1 	beq.w	8009d88 <listen_message_reliably+0x164>
 8009c46:	2600      	movs	r6, #0
 8009c48:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009c4c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	4630      	mov	r0, r6
 8009c54:	460f      	mov	r7, r1
 8009c56:	e00f      	b.n	8009c78 <listen_message_reliably+0x54>
 8009c58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009c5c:	9903      	ldr	r1, [sp, #12]
 8009c5e:	455a      	cmp	r2, fp
 8009c60:	f106 0601 	add.w	r6, r6, #1
 8009c64:	eb73 0101 	sbcs.w	r1, r3, r1
 8009c68:	b2f0      	uxtb	r0, r6
 8009c6a:	da01      	bge.n	8009c70 <listen_message_reliably+0x4c>
 8009c6c:	4693      	mov	fp, r2
 8009c6e:	9303      	str	r3, [sp, #12]
 8009c70:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8009c74:	4283      	cmp	r3, r0
 8009c76:	d960      	bls.n	8009d3a <listen_message_reliably+0x116>
 8009c78:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f000 fcc4 	bl	800a60c <uxr_stream_id>
 8009c84:	00e4      	lsls	r4, r4, #3
 8009c86:	f104 0520 	add.w	r5, r4, #32
 8009c8a:	4445      	add	r5, r8
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	463b      	mov	r3, r7
 8009c90:	464a      	mov	r2, r9
 8009c92:	4628      	mov	r0, r5
 8009c94:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c96:	f004 fea5 	bl	800e9e4 <uxr_update_output_stream_heartbeat_timestamp>
 8009c9a:	eb08 0304 	add.w	r3, r8, r4
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d0da      	beq.n	8009c58 <listen_message_reliably+0x34>
 8009ca2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009ca6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	4640      	mov	r0, r8
 8009cae:	f000 fc75 	bl	800a59c <uxr_session_header_offset>
 8009cb2:	3501      	adds	r5, #1
 8009cb4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8009cb8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009cbc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2211      	movs	r2, #17
 8009cc4:	9000      	str	r0, [sp, #0]
 8009cc6:	a90c      	add	r1, sp, #48	@ 0x30
 8009cc8:	4650      	mov	r0, sl
 8009cca:	f7fe fb1f 	bl	800830c <ucdr_init_buffer_origin_offset>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2205      	movs	r2, #5
 8009cd2:	210b      	movs	r1, #11
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	f000 fdd1 	bl	800a87c <uxr_buffer_submessage_header>
 8009cda:	8968      	ldrh	r0, [r5, #10]
 8009cdc:	2101      	movs	r1, #1
 8009cde:	f005 f839 	bl	800ed54 <uxr_seq_num_add>
 8009ce2:	892b      	ldrh	r3, [r5, #8]
 8009ce4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8009ce8:	4602      	mov	r2, r0
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8009cf0:	a90a      	add	r1, sp, #40	@ 0x28
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8009cf8:	f001 feba 	bl	800ba70 <uxr_serialize_HEARTBEAT_Payload>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4611      	mov	r1, r2
 8009d00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d02:	4640      	mov	r0, r8
 8009d04:	f000 fbf4 	bl	800a4f0 <uxr_stamp_session_header>
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f7fe fb3d 	bl	8008388 <ucdr_buffer_length>
 8009d0e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8009d12:	4602      	mov	r2, r0
 8009d14:	a90c      	add	r1, sp, #48	@ 0x30
 8009d16:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009d1a:	4444      	add	r4, r8
 8009d1c:	47a8      	blx	r5
 8009d1e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8009d22:	9903      	ldr	r1, [sp, #12]
 8009d24:	455a      	cmp	r2, fp
 8009d26:	f106 0601 	add.w	r6, r6, #1
 8009d2a:	eb73 0101 	sbcs.w	r1, r3, r1
 8009d2e:	b2f0      	uxtb	r0, r6
 8009d30:	db9c      	blt.n	8009c6c <listen_message_reliably+0x48>
 8009d32:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8009d36:	4283      	cmp	r3, r0
 8009d38:	d89e      	bhi.n	8009c78 <listen_message_reliably+0x54>
 8009d3a:	9a03      	ldr	r2, [sp, #12]
 8009d3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009d40:	429a      	cmp	r2, r3
 8009d42:	bf08      	it	eq
 8009d44:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8009d48:	d01e      	beq.n	8009d88 <listen_message_reliably+0x164>
 8009d4a:	ebab 0309 	sub.w	r3, fp, r9
 8009d4e:	9905      	ldr	r1, [sp, #20]
 8009d50:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf08      	it	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	bfa8      	it	ge
 8009d5e:	4619      	movge	r1, r3
 8009d60:	6894      	ldr	r4, [r2, #8]
 8009d62:	6810      	ldr	r0, [r2, #0]
 8009d64:	4689      	mov	r9, r1
 8009d66:	460b      	mov	r3, r1
 8009d68:	aa08      	add	r2, sp, #32
 8009d6a:	a907      	add	r1, sp, #28
 8009d6c:	47a0      	blx	r4
 8009d6e:	b968      	cbnz	r0, 8009d8c <listen_message_reliably+0x168>
 8009d70:	9b05      	ldr	r3, [sp, #20]
 8009d72:	eba3 0309 	sub.w	r3, r3, r9
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	f73f af5c 	bgt.w	8009c36 <listen_message_reliably+0x12>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4620      	mov	r0, r4
 8009d82:	b01d      	add	sp, #116	@ 0x74
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	e7e0      	b.n	8009d4e <listen_message_reliably+0x12a>
 8009d8c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8009d90:	4604      	mov	r4, r0
 8009d92:	a80c      	add	r0, sp, #48	@ 0x30
 8009d94:	f7fe facc 	bl	8008330 <ucdr_init_buffer>
 8009d98:	2500      	movs	r5, #0
 8009d9a:	f10d 031a 	add.w	r3, sp, #26
 8009d9e:	aa06      	add	r2, sp, #24
 8009da0:	a90c      	add	r1, sp, #48	@ 0x30
 8009da2:	4640      	mov	r0, r8
 8009da4:	f88d 5018 	strb.w	r5, [sp, #24]
 8009da8:	f000 fbb6 	bl	800a518 <uxr_read_session_header>
 8009dac:	b918      	cbnz	r0, 8009db6 <listen_message_reliably+0x192>
 8009dae:	4620      	mov	r0, r4
 8009db0:	b01d      	add	sp, #116	@ 0x74
 8009db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db6:	4629      	mov	r1, r5
 8009db8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8009dbc:	f000 fc50 	bl	800a660 <uxr_stream_id_from_raw>
 8009dc0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8009dc4:	2d01      	cmp	r5, #1
 8009dc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8009dca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8009dce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8009dd2:	d04b      	beq.n	8009e6c <listen_message_reliably+0x248>
 8009dd4:	2d02      	cmp	r5, #2
 8009dd6:	d00f      	beq.n	8009df8 <listen_message_reliably+0x1d4>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d1e8      	bne.n	8009dae <listen_message_reliably+0x18a>
 8009ddc:	4629      	mov	r1, r5
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 fc3e 	bl	800a660 <uxr_stream_id_from_raw>
 8009de4:	a90c      	add	r1, sp, #48	@ 0x30
 8009de6:	4602      	mov	r2, r0
 8009de8:	4640      	mov	r0, r8
 8009dea:	920a      	str	r2, [sp, #40]	@ 0x28
 8009dec:	f7ff fd92 	bl	8009914 <read_submessage_list>
 8009df0:	4620      	mov	r0, r4
 8009df2:	b01d      	add	sp, #116	@ 0x74
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	4631      	mov	r1, r6
 8009dfa:	f108 0008 	add.w	r0, r8, #8
 8009dfe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8009e02:	f000 fd1b 	bl	800a83c <uxr_get_input_reliable_stream>
 8009e06:	4607      	mov	r7, r0
 8009e08:	b338      	cbz	r0, 8009e5a <listen_message_reliably+0x236>
 8009e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	a80c      	add	r0, sp, #48	@ 0x30
 8009e10:	f7fe fabe 	bl	8008390 <ucdr_buffer_remaining>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f10d 0019 	add.w	r0, sp, #25
 8009e1a:	9000      	str	r0, [sp, #0]
 8009e1c:	9a03      	ldr	r2, [sp, #12]
 8009e1e:	4651      	mov	r1, sl
 8009e20:	4638      	mov	r0, r7
 8009e22:	f004 f9f5 	bl	800e210 <uxr_receive_reliable_message>
 8009e26:	b1c0      	cbz	r0, 8009e5a <listen_message_reliably+0x236>
 8009e28:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009e2c:	b393      	cbz	r3, 8009e94 <listen_message_reliably+0x270>
 8009e2e:	ad14      	add	r5, sp, #80	@ 0x50
 8009e30:	f04f 0a02 	mov.w	sl, #2
 8009e34:	e00a      	b.n	8009e4c <listen_message_reliably+0x228>
 8009e36:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8009e3a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8009e3e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8009e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e44:	4629      	mov	r1, r5
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7ff fd64 	bl	8009914 <read_submessage_list>
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4638      	mov	r0, r7
 8009e52:	f004 fa5d 	bl	800e310 <uxr_next_input_reliable_buffer_available>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d1ed      	bne.n	8009e36 <listen_message_reliably+0x212>
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7ff fbd2 	bl	8009608 <write_submessage_acknack.isra.0>
 8009e64:	4620      	mov	r0, r4
 8009e66:	b01d      	add	sp, #116	@ 0x74
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	f108 0008 	add.w	r0, r8, #8
 8009e72:	f000 fcd9 	bl	800a828 <uxr_get_input_best_effort_stream>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d099      	beq.n	8009dae <listen_message_reliably+0x18a>
 8009e7a:	4651      	mov	r1, sl
 8009e7c:	f004 f934 	bl	800e0e8 <uxr_receive_best_effort_message>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d094      	beq.n	8009dae <listen_message_reliably+0x18a>
 8009e84:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8009e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e8a:	a90c      	add	r1, sp, #48	@ 0x30
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	f7ff fd41 	bl	8009914 <read_submessage_list>
 8009e92:	e78c      	b.n	8009dae <listen_message_reliably+0x18a>
 8009e94:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8009e98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e9a:	a90c      	add	r1, sp, #48	@ 0x30
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	f7ff fd39 	bl	8009914 <read_submessage_list>
 8009ea2:	e7c4      	b.n	8009e2e <listen_message_reliably+0x20a>

08009ea4 <uxr_run_session_until_confirm_delivery>:
 8009ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	f000 fd2c 	bl	800a908 <uxr_millis>
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff fc70 	bl	8009798 <uxr_flash_output_streams>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	f106 0808 	add.w	r8, r6, #8
 8009ebe:	bfa8      	it	ge
 8009ec0:	462c      	movge	r4, r5
 8009ec2:	da07      	bge.n	8009ed4 <uxr_run_session_until_confirm_delivery+0x30>
 8009ec4:	e00e      	b.n	8009ee4 <uxr_run_session_until_confirm_delivery+0x40>
 8009ec6:	f7ff fead 	bl	8009c24 <listen_message_reliably>
 8009eca:	f000 fd1d 	bl	800a908 <uxr_millis>
 8009ece:	1bc3      	subs	r3, r0, r7
 8009ed0:	1aec      	subs	r4, r5, r3
 8009ed2:	d407      	bmi.n	8009ee4 <uxr_run_session_until_confirm_delivery+0x40>
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	f000 fcbb 	bl	800a850 <uxr_output_streams_confirmed>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4621      	mov	r1, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0f0      	beq.n	8009ec6 <uxr_run_session_until_confirm_delivery+0x22>
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eea:	f000 bcb1 	b.w	800a850 <uxr_output_streams_confirmed>
 8009eee:	bf00      	nop

08009ef0 <uxr_run_session_until_all_status>:
 8009ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	9c08      	ldr	r4, [sp, #32]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460f      	mov	r7, r1
 8009efa:	4691      	mov	r9, r2
 8009efc:	461d      	mov	r5, r3
 8009efe:	f7ff fc4b 	bl	8009798 <uxr_flash_output_streams>
 8009f02:	b124      	cbz	r4, 8009f0e <uxr_run_session_until_all_status+0x1e>
 8009f04:	4622      	mov	r2, r4
 8009f06:	21ff      	movs	r1, #255	@ 0xff
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f006 fbff 	bl	801070c <memset>
 8009f0e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8009f12:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8009f14:	f000 fcf8 	bl	800a908 <uxr_millis>
 8009f18:	3d01      	subs	r5, #1
 8009f1a:	f1a9 0902 	sub.w	r9, r9, #2
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4639      	mov	r1, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7ff fe7e 	bl	8009c24 <listen_message_reliably>
 8009f28:	f000 fcee 	bl	800a908 <uxr_millis>
 8009f2c:	eba0 0008 	sub.w	r0, r0, r8
 8009f30:	1a39      	subs	r1, r7, r0
 8009f32:	b344      	cbz	r4, 8009f86 <uxr_run_session_until_all_status+0x96>
 8009f34:	4628      	mov	r0, r5
 8009f36:	46ac      	mov	ip, r5
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e002      	b.n	8009f42 <uxr_run_session_until_all_status+0x52>
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	d20d      	bcs.n	8009f5c <uxr_run_session_until_all_status+0x6c>
 8009f40:	3301      	adds	r3, #1
 8009f42:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8009f46:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8009f4a:	d1f7      	bne.n	8009f3c <uxr_run_session_until_all_status+0x4c>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8009f52:	d213      	bcs.n	8009f7c <uxr_run_session_until_all_status+0x8c>
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	d0f3      	beq.n	8009f40 <uxr_run_session_until_all_status+0x50>
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	dce2      	bgt.n	8009f22 <uxr_run_session_until_all_status+0x32>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8009f60:	442c      	add	r4, r5
 8009f62:	e001      	b.n	8009f68 <uxr_run_session_until_all_status+0x78>
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d812      	bhi.n	8009f8e <uxr_run_session_until_all_status+0x9e>
 8009f68:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009f6c:	4284      	cmp	r4, r0
 8009f6e:	d1f9      	bne.n	8009f64 <uxr_run_session_until_all_status+0x74>
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	bf8c      	ite	hi
 8009f74:	2000      	movhi	r0, #0
 8009f76:	2001      	movls	r0, #1
 8009f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	dded      	ble.n	8009f5c <uxr_run_session_until_all_status+0x6c>
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d1ce      	bne.n	8009f22 <uxr_run_session_until_all_status+0x32>
 8009f84:	e7ea      	b.n	8009f5c <uxr_run_session_until_all_status+0x6c>
 8009f86:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8009f88:	2001      	movs	r0, #1
 8009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009f94 <wait_session_status>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	4604      	mov	r4, r0
 8009f9a:	b09d      	sub	sp, #116	@ 0x74
 8009f9c:	20ff      	movs	r0, #255	@ 0xff
 8009f9e:	7160      	strb	r0, [r4, #5]
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80b6 	beq.w	800a114 <wait_session_status+0x180>
 8009fa8:	468a      	mov	sl, r1
 8009faa:	4691      	mov	r9, r2
 8009fac:	f04f 0b00 	mov.w	fp, #0
 8009fb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009fb2:	464a      	mov	r2, r9
 8009fb4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8009fb8:	4651      	mov	r1, sl
 8009fba:	47a8      	blx	r5
 8009fbc:	f000 fca4 	bl	800a908 <uxr_millis>
 8009fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	e009      	b.n	8009fdc <wait_session_status+0x48>
 8009fc8:	f000 fc9e 	bl	800a908 <uxr_millis>
 8009fcc:	1b40      	subs	r0, r0, r5
 8009fce:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dd40      	ble.n	800a058 <wait_session_status+0xc4>
 8009fd6:	7960      	ldrb	r0, [r4, #5]
 8009fd8:	28ff      	cmp	r0, #255	@ 0xff
 8009fda:	d145      	bne.n	800a068 <wait_session_status+0xd4>
 8009fdc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8009fde:	a908      	add	r1, sp, #32
 8009fe0:	6896      	ldr	r6, [r2, #8]
 8009fe2:	6810      	ldr	r0, [r2, #0]
 8009fe4:	aa09      	add	r2, sp, #36	@ 0x24
 8009fe6:	47b0      	blx	r6
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0ed      	beq.n	8009fc8 <wait_session_status+0x34>
 8009fec:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8009ff0:	a80c      	add	r0, sp, #48	@ 0x30
 8009ff2:	f7fe f99d 	bl	8008330 <ucdr_init_buffer>
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	f10d 031e 	add.w	r3, sp, #30
 8009ffc:	aa07      	add	r2, sp, #28
 8009ffe:	a90c      	add	r1, sp, #48	@ 0x30
 800a000:	4620      	mov	r0, r4
 800a002:	f88d 601c 	strb.w	r6, [sp, #28]
 800a006:	f000 fa87 	bl	800a518 <uxr_read_session_header>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d0dc      	beq.n	8009fc8 <wait_session_status+0x34>
 800a00e:	4631      	mov	r1, r6
 800a010:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a014:	f000 fb24 	bl	800a660 <uxr_stream_id_from_raw>
 800a018:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800a01c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	2f01      	cmp	r7, #1
 800a024:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800a028:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a02c:	d05c      	beq.n	800a0e8 <wait_session_status+0x154>
 800a02e:	2f02      	cmp	r7, #2
 800a030:	d020      	beq.n	800a074 <wait_session_status+0xe0>
 800a032:	2f00      	cmp	r7, #0
 800a034:	d1c8      	bne.n	8009fc8 <wait_session_status+0x34>
 800a036:	4639      	mov	r1, r7
 800a038:	4638      	mov	r0, r7
 800a03a:	f000 fb11 	bl	800a660 <uxr_stream_id_from_raw>
 800a03e:	a90c      	add	r1, sp, #48	@ 0x30
 800a040:	4602      	mov	r2, r0
 800a042:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a044:	4620      	mov	r0, r4
 800a046:	f7ff fc65 	bl	8009914 <read_submessage_list>
 800a04a:	f000 fc5d 	bl	800a908 <uxr_millis>
 800a04e:	1b40      	subs	r0, r0, r5
 800a050:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a054:	2b00      	cmp	r3, #0
 800a056:	dcbe      	bgt.n	8009fd6 <wait_session_status+0x42>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	7960      	ldrb	r0, [r4, #5]
 800a05c:	f10b 0b01 	add.w	fp, fp, #1
 800a060:	455b      	cmp	r3, fp
 800a062:	d001      	beq.n	800a068 <wait_session_status+0xd4>
 800a064:	28ff      	cmp	r0, #255	@ 0xff
 800a066:	d0a3      	beq.n	8009fb0 <wait_session_status+0x1c>
 800a068:	38ff      	subs	r0, #255	@ 0xff
 800a06a:	bf18      	it	ne
 800a06c:	2001      	movne	r0, #1
 800a06e:	b01d      	add	sp, #116	@ 0x74
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	4631      	mov	r1, r6
 800a07c:	f104 0008 	add.w	r0, r4, #8
 800a080:	f000 fbdc 	bl	800a83c <uxr_get_input_reliable_stream>
 800a084:	4680      	mov	r8, r0
 800a086:	b348      	cbz	r0, 800a0dc <wait_session_status+0x148>
 800a088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a08a:	9205      	str	r2, [sp, #20]
 800a08c:	a80c      	add	r0, sp, #48	@ 0x30
 800a08e:	f7fe f97f 	bl	8008390 <ucdr_buffer_remaining>
 800a092:	4603      	mov	r3, r0
 800a094:	f10d 001d 	add.w	r0, sp, #29
 800a098:	9000      	str	r0, [sp, #0]
 800a09a:	9a05      	ldr	r2, [sp, #20]
 800a09c:	9902      	ldr	r1, [sp, #8]
 800a09e:	4640      	mov	r0, r8
 800a0a0:	f004 f8b6 	bl	800e210 <uxr_receive_reliable_message>
 800a0a4:	b1d0      	cbz	r0, 800a0dc <wait_session_status+0x148>
 800a0a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d03a      	beq.n	800a124 <wait_session_status+0x190>
 800a0ae:	9f04      	ldr	r7, [sp, #16]
 800a0b0:	e00a      	b.n	800a0c8 <wait_session_status+0x134>
 800a0b2:	f04f 0302 	mov.w	r3, #2
 800a0b6:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800a0ba:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800a0be:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800a0c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0c4:	f7ff fc26 	bl	8009914 <read_submessage_list>
 800a0c8:	a914      	add	r1, sp, #80	@ 0x50
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	f004 f91f 	bl	800e310 <uxr_next_input_reliable_buffer_available>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	a914      	add	r1, sp, #80	@ 0x50
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1ea      	bne.n	800a0b2 <wait_session_status+0x11e>
 800a0dc:	9904      	ldr	r1, [sp, #16]
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7ff fa91 	bl	8009608 <write_submessage_acknack.isra.0>
 800a0e6:	e76f      	b.n	8009fc8 <wait_session_status+0x34>
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	f104 0008 	add.w	r0, r4, #8
 800a0ee:	f000 fb9b 	bl	800a828 <uxr_get_input_best_effort_stream>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	f43f af68 	beq.w	8009fc8 <wait_session_status+0x34>
 800a0f8:	9902      	ldr	r1, [sp, #8]
 800a0fa:	f003 fff5 	bl	800e0e8 <uxr_receive_best_effort_message>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f af62 	beq.w	8009fc8 <wait_session_status+0x34>
 800a104:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a108:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a10a:	a90c      	add	r1, sp, #48	@ 0x30
 800a10c:	4620      	mov	r0, r4
 800a10e:	f7ff fc01 	bl	8009914 <read_submessage_list>
 800a112:	e759      	b.n	8009fc8 <wait_session_status+0x34>
 800a114:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a116:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a11a:	47a0      	blx	r4
 800a11c:	2001      	movs	r0, #1
 800a11e:	b01d      	add	sp, #116	@ 0x74
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a128:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a12a:	a90c      	add	r1, sp, #48	@ 0x30
 800a12c:	4620      	mov	r0, r4
 800a12e:	f7ff fbf1 	bl	8009914 <read_submessage_list>
 800a132:	e7bc      	b.n	800a0ae <wait_session_status+0x11a>

0800a134 <uxr_delete_session_retries>:
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	b08f      	sub	sp, #60	@ 0x3c
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	f000 fa2e 	bl	800a59c <uxr_session_header_offset>
 800a140:	2300      	movs	r3, #0
 800a142:	2210      	movs	r2, #16
 800a144:	9000      	str	r0, [sp, #0]
 800a146:	a902      	add	r1, sp, #8
 800a148:	a806      	add	r0, sp, #24
 800a14a:	f7fe f8df 	bl	800830c <ucdr_init_buffer_origin_offset>
 800a14e:	a906      	add	r1, sp, #24
 800a150:	4620      	mov	r0, r4
 800a152:	f000 f973 	bl	800a43c <uxr_buffer_delete_session>
 800a156:	2200      	movs	r2, #0
 800a158:	4611      	mov	r1, r2
 800a15a:	9b06      	ldr	r3, [sp, #24]
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 f9c7 	bl	800a4f0 <uxr_stamp_session_header>
 800a162:	a806      	add	r0, sp, #24
 800a164:	f7fe f910 	bl	8008388 <ucdr_buffer_length>
 800a168:	462b      	mov	r3, r5
 800a16a:	4602      	mov	r2, r0
 800a16c:	a902      	add	r1, sp, #8
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff ff10 	bl	8009f94 <wait_session_status>
 800a174:	b118      	cbz	r0, 800a17e <uxr_delete_session_retries+0x4a>
 800a176:	7960      	ldrb	r0, [r4, #5]
 800a178:	fab0 f080 	clz	r0, r0
 800a17c:	0940      	lsrs	r0, r0, #5
 800a17e:	b00f      	add	sp, #60	@ 0x3c
 800a180:	bd30      	pop	{r4, r5, pc}
 800a182:	bf00      	nop

0800a184 <uxr_create_session>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	f100 0b08 	add.w	fp, r0, #8
 800a18c:	b0ab      	sub	sp, #172	@ 0xac
 800a18e:	4604      	mov	r4, r0
 800a190:	4658      	mov	r0, fp
 800a192:	f000 fa99 	bl	800a6c8 <uxr_reset_stream_storage>
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fa00 	bl	800a59c <uxr_session_header_offset>
 800a19c:	2300      	movs	r3, #0
 800a19e:	9000      	str	r0, [sp, #0]
 800a1a0:	221c      	movs	r2, #28
 800a1a2:	a90b      	add	r1, sp, #44	@ 0x2c
 800a1a4:	a812      	add	r0, sp, #72	@ 0x48
 800a1a6:	f7fe f8b1 	bl	800830c <ucdr_init_buffer_origin_offset>
 800a1aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a1ac:	8a1a      	ldrh	r2, [r3, #16]
 800a1ae:	3a04      	subs	r2, #4
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	a912      	add	r1, sp, #72	@ 0x48
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 f917 	bl	800a3e8 <uxr_buffer_create_session>
 800a1ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 f983 	bl	800a4c8 <uxr_stamp_create_session_header>
 800a1c2:	a812      	add	r0, sp, #72	@ 0x48
 800a1c4:	f7fe f8e0 	bl	8008388 <ucdr_buffer_length>
 800a1c8:	23ff      	movs	r3, #255	@ 0xff
 800a1ca:	7163      	strb	r3, [r4, #5]
 800a1cc:	230a      	movs	r3, #10
 800a1ce:	46da      	mov	sl, fp
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	4683      	mov	fp, r0
 800a1d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a1d6:	465a      	mov	r2, fp
 800a1d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a1dc:	a90b      	add	r1, sp, #44	@ 0x2c
 800a1de:	47a8      	blx	r5
 800a1e0:	f000 fb92 	bl	800a908 <uxr_millis>
 800a1e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	e009      	b.n	800a200 <uxr_create_session+0x7c>
 800a1ec:	f000 fb8c 	bl	800a908 <uxr_millis>
 800a1f0:	1b40      	subs	r0, r0, r5
 800a1f2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	7962      	ldrb	r2, [r4, #5]
 800a1fa:	dd38      	ble.n	800a26e <uxr_create_session+0xea>
 800a1fc:	2aff      	cmp	r2, #255	@ 0xff
 800a1fe:	d13c      	bne.n	800a27a <uxr_create_session+0xf6>
 800a200:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800a202:	a907      	add	r1, sp, #28
 800a204:	6896      	ldr	r6, [r2, #8]
 800a206:	6810      	ldr	r0, [r2, #0]
 800a208:	aa08      	add	r2, sp, #32
 800a20a:	47b0      	blx	r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d0ed      	beq.n	800a1ec <uxr_create_session+0x68>
 800a210:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a214:	a81a      	add	r0, sp, #104	@ 0x68
 800a216:	f7fe f88b 	bl	8008330 <ucdr_init_buffer>
 800a21a:	2600      	movs	r6, #0
 800a21c:	f10d 031a 	add.w	r3, sp, #26
 800a220:	aa06      	add	r2, sp, #24
 800a222:	a91a      	add	r1, sp, #104	@ 0x68
 800a224:	4620      	mov	r0, r4
 800a226:	f88d 6018 	strb.w	r6, [sp, #24]
 800a22a:	f000 f975 	bl	800a518 <uxr_read_session_header>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d0dc      	beq.n	800a1ec <uxr_create_session+0x68>
 800a232:	4631      	mov	r1, r6
 800a234:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a238:	f000 fa12 	bl	800a660 <uxr_stream_id_from_raw>
 800a23c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a240:	2e01      	cmp	r6, #1
 800a242:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800a246:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a24a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a24e:	d053      	beq.n	800a2f8 <uxr_create_session+0x174>
 800a250:	2e02      	cmp	r6, #2
 800a252:	d018      	beq.n	800a286 <uxr_create_session+0x102>
 800a254:	2e00      	cmp	r6, #0
 800a256:	d1c9      	bne.n	800a1ec <uxr_create_session+0x68>
 800a258:	4631      	mov	r1, r6
 800a25a:	4630      	mov	r0, r6
 800a25c:	f000 fa00 	bl	800a660 <uxr_stream_id_from_raw>
 800a260:	a91a      	add	r1, sp, #104	@ 0x68
 800a262:	4602      	mov	r2, r0
 800a264:	900a      	str	r0, [sp, #40]	@ 0x28
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff fb54 	bl	8009914 <read_submessage_list>
 800a26c:	e7be      	b.n	800a1ec <uxr_create_session+0x68>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	3b01      	subs	r3, #1
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	d001      	beq.n	800a27a <uxr_create_session+0xf6>
 800a276:	2aff      	cmp	r2, #255	@ 0xff
 800a278:	d0ac      	beq.n	800a1d4 <uxr_create_session+0x50>
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d051      	beq.n	800a322 <uxr_create_session+0x19e>
 800a27e:	2000      	movs	r0, #0
 800a280:	b02b      	add	sp, #172	@ 0xac
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	4639      	mov	r1, r7
 800a28e:	4650      	mov	r0, sl
 800a290:	f000 fad4 	bl	800a83c <uxr_get_input_reliable_stream>
 800a294:	4680      	mov	r8, r0
 800a296:	b348      	cbz	r0, 800a2ec <uxr_create_session+0x168>
 800a298:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a29a:	9205      	str	r2, [sp, #20]
 800a29c:	a81a      	add	r0, sp, #104	@ 0x68
 800a29e:	f7fe f877 	bl	8008390 <ucdr_buffer_remaining>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f10d 0019 	add.w	r0, sp, #25
 800a2a8:	9000      	str	r0, [sp, #0]
 800a2aa:	9a05      	ldr	r2, [sp, #20]
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f003 ffae 	bl	800e210 <uxr_receive_reliable_message>
 800a2b4:	b1d0      	cbz	r0, 800a2ec <uxr_create_session+0x168>
 800a2b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d038      	beq.n	800a330 <uxr_create_session+0x1ac>
 800a2be:	9e04      	ldr	r6, [sp, #16]
 800a2c0:	e00a      	b.n	800a2d8 <uxr_create_session+0x154>
 800a2c2:	f04f 0302 	mov.w	r3, #2
 800a2c6:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800a2ca:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800a2ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2d4:	f7ff fb1e 	bl	8009914 <read_submessage_list>
 800a2d8:	a922      	add	r1, sp, #136	@ 0x88
 800a2da:	2204      	movs	r2, #4
 800a2dc:	4640      	mov	r0, r8
 800a2de:	f004 f817 	bl	800e310 <uxr_next_input_reliable_buffer_available>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	a922      	add	r1, sp, #136	@ 0x88
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1ea      	bne.n	800a2c2 <uxr_create_session+0x13e>
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7ff f989 	bl	8009608 <write_submessage_acknack.isra.0>
 800a2f6:	e779      	b.n	800a1ec <uxr_create_session+0x68>
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	4650      	mov	r0, sl
 800a2fc:	f000 fa94 	bl	800a828 <uxr_get_input_best_effort_stream>
 800a300:	2800      	cmp	r0, #0
 800a302:	f43f af73 	beq.w	800a1ec <uxr_create_session+0x68>
 800a306:	4649      	mov	r1, r9
 800a308:	f003 feee 	bl	800e0e8 <uxr_receive_best_effort_message>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f43f af6d 	beq.w	800a1ec <uxr_create_session+0x68>
 800a312:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a318:	a91a      	add	r1, sp, #104	@ 0x68
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff fafa 	bl	8009914 <read_submessage_list>
 800a320:	e764      	b.n	800a1ec <uxr_create_session+0x68>
 800a322:	4650      	mov	r0, sl
 800a324:	f000 f9d0 	bl	800a6c8 <uxr_reset_stream_storage>
 800a328:	2001      	movs	r0, #1
 800a32a:	b02b      	add	sp, #172	@ 0xac
 800a32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a330:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a336:	a91a      	add	r1, sp, #104	@ 0x68
 800a338:	4620      	mov	r0, r4
 800a33a:	f7ff faeb 	bl	8009914 <read_submessage_list>
 800a33e:	e7be      	b.n	800a2be <uxr_create_session+0x13a>

0800a340 <uxr_prepare_stream_to_write_submessage>:
 800a340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	4682      	mov	sl, r0
 800a348:	4610      	mov	r0, r2
 800a34a:	4615      	mov	r5, r2
 800a34c:	461e      	mov	r6, r3
 800a34e:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800a352:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800a356:	9101      	str	r1, [sp, #4]
 800a358:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a35c:	f000 face 	bl	800a8fc <uxr_submessage_padding>
 800a360:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a364:	f105 0904 	add.w	r9, r5, #4
 800a368:	2b01      	cmp	r3, #1
 800a36a:	4481      	add	r9, r0
 800a36c:	d01d      	beq.n	800a3aa <uxr_prepare_stream_to_write_submessage+0x6a>
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d116      	bne.n	800a3a0 <uxr_prepare_stream_to_write_submessage+0x60>
 800a372:	4621      	mov	r1, r4
 800a374:	f10a 0008 	add.w	r0, sl, #8
 800a378:	f000 fa4c 	bl	800a814 <uxr_get_output_reliable_stream>
 800a37c:	4604      	mov	r4, r0
 800a37e:	b158      	cbz	r0, 800a398 <uxr_prepare_stream_to_write_submessage+0x58>
 800a380:	4649      	mov	r1, r9
 800a382:	4632      	mov	r2, r6
 800a384:	f004 f980 	bl	800e688 <uxr_prepare_reliable_buffer_to_write>
 800a388:	4604      	mov	r4, r0
 800a38a:	b12c      	cbz	r4, 800a398 <uxr_prepare_stream_to_write_submessage+0x58>
 800a38c:	4643      	mov	r3, r8
 800a38e:	b2aa      	uxth	r2, r5
 800a390:	4639      	mov	r1, r7
 800a392:	4630      	mov	r0, r6
 800a394:	f000 fa72 	bl	800a87c <uxr_buffer_submessage_header>
 800a398:	4620      	mov	r0, r4
 800a39a:	b002      	add	sp, #8
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	2400      	movs	r4, #0
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	b002      	add	sp, #8
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	f10a 0008 	add.w	r0, sl, #8
 800a3b0:	f000 fa28 	bl	800a804 <uxr_get_output_best_effort_stream>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d0ee      	beq.n	800a398 <uxr_prepare_stream_to_write_submessage+0x58>
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	4632      	mov	r2, r6
 800a3be:	f004 f893 	bl	800e4e8 <uxr_prepare_best_effort_buffer_to_write>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	e7e1      	b.n	800a38a <uxr_prepare_stream_to_write_submessage+0x4a>
 800a3c6:	bf00      	nop

0800a3c8 <uxr_init_session_info>:
 800a3c8:	0e13      	lsrs	r3, r2, #24
 800a3ca:	7043      	strb	r3, [r0, #1]
 800a3cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a3d0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a3d4:	7001      	strb	r1, [r0, #0]
 800a3d6:	70c3      	strb	r3, [r0, #3]
 800a3d8:	2109      	movs	r1, #9
 800a3da:	23ff      	movs	r3, #255	@ 0xff
 800a3dc:	f880 c002 	strb.w	ip, [r0, #2]
 800a3e0:	7102      	strb	r2, [r0, #4]
 800a3e2:	80c1      	strh	r1, [r0, #6]
 800a3e4:	7143      	strb	r3, [r0, #5]
 800a3e6:	4770      	bx	lr

0800a3e8 <uxr_buffer_create_session>:
 800a3e8:	b530      	push	{r4, r5, lr}
 800a3ea:	b089      	sub	sp, #36	@ 0x24
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4d12      	ldr	r5, [pc, #72]	@ (800a438 <uxr_buffer_create_session+0x50>)
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	80c2      	strh	r2, [r0, #6]
 800a3fc:	f88d 2004 	strb.w	r2, [sp, #4]
 800a400:	682a      	ldr	r2, [r5, #0]
 800a402:	9200      	str	r2, [sp, #0]
 800a404:	88aa      	ldrh	r2, [r5, #4]
 800a406:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a40a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800a40e:	9202      	str	r2, [sp, #8]
 800a410:	460c      	mov	r4, r1
 800a412:	7802      	ldrb	r2, [r0, #0]
 800a414:	9303      	str	r3, [sp, #12]
 800a416:	4619      	mov	r1, r3
 800a418:	f88d 200c 	strb.w	r2, [sp, #12]
 800a41c:	4620      	mov	r0, r4
 800a41e:	2210      	movs	r2, #16
 800a420:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800a424:	9306      	str	r3, [sp, #24]
 800a426:	f000 fa29 	bl	800a87c <uxr_buffer_submessage_header>
 800a42a:	4669      	mov	r1, sp
 800a42c:	4620      	mov	r0, r4
 800a42e:	f001 f981 	bl	800b734 <uxr_serialize_CREATE_CLIENT_Payload>
 800a432:	b009      	add	sp, #36	@ 0x24
 800a434:	bd30      	pop	{r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	08011700 	.word	0x08011700

0800a43c <uxr_buffer_delete_session>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	4b0c      	ldr	r3, [pc, #48]	@ (800a470 <uxr_buffer_delete_session+0x34>)
 800a440:	b082      	sub	sp, #8
 800a442:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800a446:	f8ad c006 	strh.w	ip, [sp, #6]
 800a44a:	460c      	mov	r4, r1
 800a44c:	2202      	movs	r2, #2
 800a44e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a452:	80c2      	strh	r2, [r0, #6]
 800a454:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a458:	2204      	movs	r2, #4
 800a45a:	2300      	movs	r3, #0
 800a45c:	2103      	movs	r1, #3
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fa0c 	bl	800a87c <uxr_buffer_submessage_header>
 800a464:	a901      	add	r1, sp, #4
 800a466:	4620      	mov	r0, r4
 800a468:	f001 fa0a 	bl	800b880 <uxr_serialize_DELETE_Payload>
 800a46c:	b002      	add	sp, #8
 800a46e:	bd10      	pop	{r4, pc}
 800a470:	08011700 	.word	0x08011700

0800a474 <uxr_read_create_session_status>:
 800a474:	b510      	push	{r4, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	4604      	mov	r4, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	a901      	add	r1, sp, #4
 800a47e:	f001 fa0f 	bl	800b8a0 <uxr_deserialize_STATUS_AGENT_Payload>
 800a482:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a486:	7163      	strb	r3, [r4, #5]
 800a488:	b008      	add	sp, #32
 800a48a:	bd10      	pop	{r4, pc}

0800a48c <uxr_read_delete_session_status>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4604      	mov	r4, r0
 800a490:	b084      	sub	sp, #16
 800a492:	4608      	mov	r0, r1
 800a494:	a902      	add	r1, sp, #8
 800a496:	f001 fa33 	bl	800b900 <uxr_deserialize_STATUS_Payload>
 800a49a:	88e3      	ldrh	r3, [r4, #6]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d001      	beq.n	800a4a4 <uxr_read_delete_session_status+0x18>
 800a4a0:	b004      	add	sp, #16
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	f10d 000a 	add.w	r0, sp, #10
 800a4a8:	f7ff f834 	bl	8009514 <uxr_object_id_from_raw>
 800a4ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a4b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a4b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	bf04      	itt	eq
 800a4be:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800a4c2:	7163      	strbeq	r3, [r4, #5]
 800a4c4:	b004      	add	sp, #16
 800a4c6:	bd10      	pop	{r4, pc}

0800a4c8 <uxr_stamp_create_session_header>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	2208      	movs	r2, #8
 800a4cc:	b08a      	sub	sp, #40	@ 0x28
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	eb0d 0002 	add.w	r0, sp, r2
 800a4d4:	f7fd ff2c 	bl	8008330 <ucdr_init_buffer>
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	9400      	str	r4, [sp, #0]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a4e6:	a802      	add	r0, sp, #8
 800a4e8:	f000 fbc2 	bl	800ac70 <uxr_serialize_message_header>
 800a4ec:	b00a      	add	sp, #40	@ 0x28
 800a4ee:	bd10      	pop	{r4, pc}

0800a4f0 <uxr_stamp_session_header>:
 800a4f0:	b530      	push	{r4, r5, lr}
 800a4f2:	b08d      	sub	sp, #52	@ 0x34
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	9203      	str	r2, [sp, #12]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	a804      	add	r0, sp, #16
 800a4fe:	2208      	movs	r2, #8
 800a500:	f7fd ff16 	bl	8008330 <ucdr_init_buffer>
 800a504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	9400      	str	r4, [sp, #0]
 800a50c:	462a      	mov	r2, r5
 800a50e:	a804      	add	r0, sp, #16
 800a510:	f000 fbae 	bl	800ac70 <uxr_serialize_message_header>
 800a514:	b00d      	add	sp, #52	@ 0x34
 800a516:	bd30      	pop	{r4, r5, pc}

0800a518 <uxr_read_session_header>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	4607      	mov	r7, r0
 800a51e:	b084      	sub	sp, #16
 800a520:	4608      	mov	r0, r1
 800a522:	460c      	mov	r4, r1
 800a524:	4615      	mov	r5, r2
 800a526:	461e      	mov	r6, r3
 800a528:	f7fd ff32 	bl	8008390 <ucdr_buffer_remaining>
 800a52c:	2808      	cmp	r0, #8
 800a52e:	d803      	bhi.n	800a538 <uxr_read_session_header+0x20>
 800a530:	2000      	movs	r0, #0
 800a532:	b004      	add	sp, #16
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a538:	f10d 080c 	add.w	r8, sp, #12
 800a53c:	4633      	mov	r3, r6
 800a53e:	462a      	mov	r2, r5
 800a540:	f8cd 8000 	str.w	r8, [sp]
 800a544:	4620      	mov	r0, r4
 800a546:	f10d 010b 	add.w	r1, sp, #11
 800a54a:	f000 fbaf 	bl	800acac <uxr_deserialize_message_header>
 800a54e:	783a      	ldrb	r2, [r7, #0]
 800a550:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800a554:	4293      	cmp	r3, r2
 800a556:	d1eb      	bne.n	800a530 <uxr_read_session_header+0x18>
 800a558:	061b      	lsls	r3, r3, #24
 800a55a:	d41c      	bmi.n	800a596 <uxr_read_session_header+0x7e>
 800a55c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a560:	787b      	ldrb	r3, [r7, #1]
 800a562:	429a      	cmp	r2, r3
 800a564:	d003      	beq.n	800a56e <uxr_read_session_header+0x56>
 800a566:	2001      	movs	r0, #1
 800a568:	f080 0001 	eor.w	r0, r0, #1
 800a56c:	e7e1      	b.n	800a532 <uxr_read_session_header+0x1a>
 800a56e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800a572:	78bb      	ldrb	r3, [r7, #2]
 800a574:	429a      	cmp	r2, r3
 800a576:	f107 0102 	add.w	r1, r7, #2
 800a57a:	d1f4      	bne.n	800a566 <uxr_read_session_header+0x4e>
 800a57c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a580:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a584:	429a      	cmp	r2, r3
 800a586:	d1ee      	bne.n	800a566 <uxr_read_session_header+0x4e>
 800a588:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a58c:	784b      	ldrb	r3, [r1, #1]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d1e9      	bne.n	800a566 <uxr_read_session_header+0x4e>
 800a592:	2000      	movs	r0, #0
 800a594:	e7e8      	b.n	800a568 <uxr_read_session_header+0x50>
 800a596:	2001      	movs	r0, #1
 800a598:	e7cb      	b.n	800a532 <uxr_read_session_header+0x1a>
 800a59a:	bf00      	nop

0800a59c <uxr_session_header_offset>:
 800a59c:	f990 3000 	ldrsb.w	r3, [r0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfac      	ite	ge
 800a5a4:	2008      	movge	r0, #8
 800a5a6:	2004      	movlt	r0, #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop

0800a5ac <uxr_init_base_object_request>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	88c3      	ldrh	r3, [r0, #6]
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800a5b6:	9101      	str	r1, [sp, #4]
 800a5b8:	f1a3 010a 	sub.w	r1, r3, #10
 800a5bc:	b289      	uxth	r1, r1
 800a5be:	42a1      	cmp	r1, r4
 800a5c0:	d80e      	bhi.n	800a5e0 <uxr_init_base_object_request+0x34>
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	b29c      	uxth	r4, r3
 800a5c6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	80c4      	strh	r4, [r0, #6]
 800a5ce:	9801      	ldr	r0, [sp, #4]
 800a5d0:	7011      	strb	r1, [r2, #0]
 800a5d2:	7053      	strb	r3, [r2, #1]
 800a5d4:	1c91      	adds	r1, r2, #2
 800a5d6:	f7fe ffb1 	bl	800953c <uxr_object_id_to_raw>
 800a5da:	4620      	mov	r0, r4
 800a5dc:	b002      	add	sp, #8
 800a5de:	bd10      	pop	{r4, pc}
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	461c      	mov	r4, r3
 800a5e6:	e7f1      	b.n	800a5cc <uxr_init_base_object_request+0x20>

0800a5e8 <uxr_parse_base_object_request>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	3002      	adds	r0, #2
 800a5ee:	460d      	mov	r5, r1
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	f7fe ff8f 	bl	8009514 <uxr_object_id_from_raw>
 800a5f6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800a5fa:	8028      	strh	r0, [r5, #0]
 800a5fc:	806b      	strh	r3, [r5, #2]
 800a5fe:	7822      	ldrb	r2, [r4, #0]
 800a600:	7863      	ldrb	r3, [r4, #1]
 800a602:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a606:	8033      	strh	r3, [r6, #0]
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	bf00      	nop

0800a60c <uxr_stream_id>:
 800a60c:	2901      	cmp	r1, #1
 800a60e:	b082      	sub	sp, #8
 800a610:	d01d      	beq.n	800a64e <uxr_stream_id+0x42>
 800a612:	2902      	cmp	r1, #2
 800a614:	f04f 0c00 	mov.w	ip, #0
 800a618:	d01e      	beq.n	800a658 <uxr_stream_id+0x4c>
 800a61a:	2300      	movs	r3, #0
 800a61c:	f36c 0307 	bfi	r3, ip, #0, #8
 800a620:	f360 230f 	bfi	r3, r0, #8, #8
 800a624:	f361 4317 	bfi	r3, r1, #16, #8
 800a628:	f362 631f 	bfi	r3, r2, #24, #8
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	2000      	movs	r0, #0
 800a630:	f362 0007 	bfi	r0, r2, #0, #8
 800a634:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a638:	f362 200f 	bfi	r0, r2, #8, #8
 800a63c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a640:	f362 4017 	bfi	r0, r2, #16, #8
 800a644:	0e1b      	lsrs	r3, r3, #24
 800a646:	f363 601f 	bfi	r0, r3, #24, #8
 800a64a:	b002      	add	sp, #8
 800a64c:	4770      	bx	lr
 800a64e:	f100 0c01 	add.w	ip, r0, #1
 800a652:	fa5f fc8c 	uxtb.w	ip, ip
 800a656:	e7e0      	b.n	800a61a <uxr_stream_id+0xe>
 800a658:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800a65c:	e7dd      	b.n	800a61a <uxr_stream_id+0xe>
 800a65e:	bf00      	nop

0800a660 <uxr_stream_id_from_raw>:
 800a660:	b082      	sub	sp, #8
 800a662:	b130      	cbz	r0, 800a672 <uxr_stream_id_from_raw+0x12>
 800a664:	0603      	lsls	r3, r0, #24
 800a666:	d420      	bmi.n	800a6aa <uxr_stream_id_from_raw+0x4a>
 800a668:	1e42      	subs	r2, r0, #1
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	f04f 0c01 	mov.w	ip, #1
 800a670:	e001      	b.n	800a676 <uxr_stream_id_from_raw+0x16>
 800a672:	4684      	mov	ip, r0
 800a674:	4602      	mov	r2, r0
 800a676:	2300      	movs	r3, #0
 800a678:	f360 0307 	bfi	r3, r0, #0, #8
 800a67c:	f362 230f 	bfi	r3, r2, #8, #8
 800a680:	f36c 4317 	bfi	r3, ip, #16, #8
 800a684:	f361 631f 	bfi	r3, r1, #24, #8
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	2000      	movs	r0, #0
 800a68c:	f362 0007 	bfi	r0, r2, #0, #8
 800a690:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a694:	f362 200f 	bfi	r0, r2, #8, #8
 800a698:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a69c:	f362 4017 	bfi	r0, r2, #16, #8
 800a6a0:	0e1b      	lsrs	r3, r3, #24
 800a6a2:	f363 601f 	bfi	r0, r3, #24, #8
 800a6a6:	b002      	add	sp, #8
 800a6a8:	4770      	bx	lr
 800a6aa:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800a6ae:	f04f 0c02 	mov.w	ip, #2
 800a6b2:	e7e0      	b.n	800a676 <uxr_stream_id_from_raw+0x16>

0800a6b4 <uxr_init_stream_storage>:
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	7403      	strb	r3, [r0, #16]
 800a6b8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800a6bc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800a6c0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop

0800a6c8 <uxr_reset_stream_storage>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	7c03      	ldrb	r3, [r0, #16]
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	b153      	cbz	r3, 800a6e6 <uxr_reset_stream_storage+0x1e>
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f003 ff01 	bl	800e4dc <uxr_reset_output_best_effort_stream>
 800a6da:	7c23      	ldrb	r3, [r4, #16]
 800a6dc:	3501      	adds	r5, #1
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	f106 0610 	add.w	r6, r6, #16
 800a6e4:	d8f6      	bhi.n	800a6d4 <uxr_reset_stream_storage+0xc>
 800a6e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a6ea:	b163      	cbz	r3, 800a706 <uxr_reset_stream_storage+0x3e>
 800a6ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f003 fcf4 	bl	800e0e0 <uxr_reset_input_best_effort_stream>
 800a6f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	42ab      	cmp	r3, r5
 800a700:	f106 0602 	add.w	r6, r6, #2
 800a704:	d8f5      	bhi.n	800a6f2 <uxr_reset_stream_storage+0x2a>
 800a706:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a70a:	b163      	cbz	r3, 800a726 <uxr_reset_stream_storage+0x5e>
 800a70c:	f104 0618 	add.w	r6, r4, #24
 800a710:	2500      	movs	r5, #0
 800a712:	4630      	mov	r0, r6
 800a714:	f003 ff8e 	bl	800e634 <uxr_reset_output_reliable_stream>
 800a718:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a71c:	3501      	adds	r5, #1
 800a71e:	42ab      	cmp	r3, r5
 800a720:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800a724:	d8f5      	bhi.n	800a712 <uxr_reset_stream_storage+0x4a>
 800a726:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a72a:	b163      	cbz	r3, 800a746 <uxr_reset_stream_storage+0x7e>
 800a72c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800a730:	2500      	movs	r5, #0
 800a732:	4630      	mov	r0, r6
 800a734:	f003 fd48 	bl	800e1c8 <uxr_reset_input_reliable_stream>
 800a738:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800a73c:	3501      	adds	r5, #1
 800a73e:	42ab      	cmp	r3, r5
 800a740:	f106 0618 	add.w	r6, r6, #24
 800a744:	d8f5      	bhi.n	800a732 <uxr_reset_stream_storage+0x6a>
 800a746:	bd70      	pop	{r4, r5, r6, pc}

0800a748 <uxr_add_output_best_effort_buffer>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	7c04      	ldrb	r4, [r0, #16]
 800a74c:	f104 0c01 	add.w	ip, r4, #1
 800a750:	b082      	sub	sp, #8
 800a752:	f880 c010 	strb.w	ip, [r0, #16]
 800a756:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a75a:	f003 feb5 	bl	800e4c8 <uxr_init_output_best_effort_stream>
 800a75e:	2201      	movs	r2, #1
 800a760:	4611      	mov	r1, r2
 800a762:	4620      	mov	r0, r4
 800a764:	b002      	add	sp, #8
 800a766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a76a:	f7ff bf4f 	b.w	800a60c <uxr_stream_id>
 800a76e:	bf00      	nop

0800a770 <uxr_add_output_reliable_buffer>:
 800a770:	b510      	push	{r4, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	4684      	mov	ip, r0
 800a776:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a77a:	9000      	str	r0, [sp, #0]
 800a77c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800a780:	2028      	movs	r0, #40	@ 0x28
 800a782:	fb00 c004 	mla	r0, r0, r4, ip
 800a786:	f104 0e01 	add.w	lr, r4, #1
 800a78a:	3018      	adds	r0, #24
 800a78c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800a790:	f003 ff18 	bl	800e5c4 <uxr_init_output_reliable_stream>
 800a794:	2201      	movs	r2, #1
 800a796:	2102      	movs	r1, #2
 800a798:	4620      	mov	r0, r4
 800a79a:	b004      	add	sp, #16
 800a79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a0:	f7ff bf34 	b.w	800a60c <uxr_stream_id>

0800a7a4 <uxr_add_input_best_effort_buffer>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	1c62      	adds	r2, r4, #1
 800a7ae:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a7b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7bc:	f003 fc8c 	bl	800e0d8 <uxr_init_input_best_effort_stream>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	b002      	add	sp, #8
 800a7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7cc:	f7ff bf1e 	b.w	800a60c <uxr_stream_id>

0800a7d0 <uxr_add_input_reliable_buffer>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	4684      	mov	ip, r0
 800a7d6:	9806      	ldr	r0, [sp, #24]
 800a7d8:	9000      	str	r0, [sp, #0]
 800a7da:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800a7de:	2018      	movs	r0, #24
 800a7e0:	fb00 c004 	mla	r0, r0, r4, ip
 800a7e4:	f104 0e01 	add.w	lr, r4, #1
 800a7e8:	3048      	adds	r0, #72	@ 0x48
 800a7ea:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800a7ee:	f003 fcbf 	bl	800e170 <uxr_init_input_reliable_stream>
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	b004      	add	sp, #16
 800a7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7fe:	f7ff bf05 	b.w	800a60c <uxr_stream_id>
 800a802:	bf00      	nop

0800a804 <uxr_get_output_best_effort_stream>:
 800a804:	7c03      	ldrb	r3, [r0, #16]
 800a806:	428b      	cmp	r3, r1
 800a808:	bf8c      	ite	hi
 800a80a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800a80e:	2000      	movls	r0, #0
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop

0800a814 <uxr_get_output_reliable_stream>:
 800a814:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf83      	ittte	hi
 800a81c:	2328      	movhi	r3, #40	@ 0x28
 800a81e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a822:	3018      	addhi	r0, #24
 800a824:	2000      	movls	r0, #0
 800a826:	4770      	bx	lr

0800a828 <uxr_get_input_best_effort_stream>:
 800a828:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a82c:	428b      	cmp	r3, r1
 800a82e:	bf86      	itte	hi
 800a830:	3121      	addhi	r1, #33	@ 0x21
 800a832:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800a836:	2000      	movls	r0, #0
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <uxr_get_input_reliable_stream>:
 800a83c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800a840:	428b      	cmp	r3, r1
 800a842:	bf83      	ittte	hi
 800a844:	2318      	movhi	r3, #24
 800a846:	fb03 0001 	mlahi	r0, r3, r1, r0
 800a84a:	3048      	addhi	r0, #72	@ 0x48
 800a84c:	2000      	movls	r0, #0
 800a84e:	4770      	bx	lr

0800a850 <uxr_output_streams_confirmed>:
 800a850:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a854:	b183      	cbz	r3, 800a878 <uxr_output_streams_confirmed+0x28>
 800a856:	b570      	push	{r4, r5, r6, lr}
 800a858:	4606      	mov	r6, r0
 800a85a:	f100 0518 	add.w	r5, r0, #24
 800a85e:	2400      	movs	r4, #0
 800a860:	e001      	b.n	800a866 <uxr_output_streams_confirmed+0x16>
 800a862:	3528      	adds	r5, #40	@ 0x28
 800a864:	b138      	cbz	r0, 800a876 <uxr_output_streams_confirmed+0x26>
 800a866:	4628      	mov	r0, r5
 800a868:	f004 f954 	bl	800eb14 <uxr_is_output_up_to_date>
 800a86c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800a870:	3401      	adds	r4, #1
 800a872:	42a3      	cmp	r3, r4
 800a874:	d8f5      	bhi.n	800a862 <uxr_output_streams_confirmed+0x12>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	2001      	movs	r0, #1
 800a87a:	4770      	bx	lr

0800a87c <uxr_buffer_submessage_header>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	4604      	mov	r4, r0
 800a880:	460e      	mov	r6, r1
 800a882:	2104      	movs	r1, #4
 800a884:	4615      	mov	r5, r2
 800a886:	461f      	mov	r7, r3
 800a888:	f7fd fd6c 	bl	8008364 <ucdr_align_to>
 800a88c:	2301      	movs	r3, #1
 800a88e:	ea47 0203 	orr.w	r2, r7, r3
 800a892:	4631      	mov	r1, r6
 800a894:	7523      	strb	r3, [r4, #20]
 800a896:	4620      	mov	r0, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f000 fa27 	bl	800acec <uxr_serialize_submessage_header>
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7fd fd76 	bl	8008390 <ucdr_buffer_remaining>
 800a8a4:	42a8      	cmp	r0, r5
 800a8a6:	bf34      	ite	cc
 800a8a8:	2000      	movcc	r0, #0
 800a8aa:	2001      	movcs	r0, #1
 800a8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ae:	bf00      	nop

0800a8b0 <uxr_read_submessage_header>:
 800a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	2104      	movs	r1, #4
 800a8ba:	4616      	mov	r6, r2
 800a8bc:	4698      	mov	r8, r3
 800a8be:	f7fd fd51 	bl	8008364 <ucdr_align_to>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f7fd fd64 	bl	8008390 <ucdr_buffer_remaining>
 800a8c8:	2803      	cmp	r0, #3
 800a8ca:	bf8c      	ite	hi
 800a8cc:	2701      	movhi	r7, #1
 800a8ce:	2700      	movls	r7, #0
 800a8d0:	d802      	bhi.n	800a8d8 <uxr_read_submessage_header+0x28>
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d8:	4633      	mov	r3, r6
 800a8da:	4642      	mov	r2, r8
 800a8dc:	4620      	mov	r0, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f000 fa18 	bl	800ad14 <uxr_deserialize_submessage_header>
 800a8e4:	f898 3000 	ldrb.w	r3, [r8]
 800a8e8:	f003 0201 	and.w	r2, r3, #1
 800a8ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a8f0:	f888 3000 	strb.w	r3, [r8]
 800a8f4:	7522      	strb	r2, [r4, #20]
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8fc <uxr_submessage_padding>:
 800a8fc:	f010 0003 	ands.w	r0, r0, #3
 800a900:	bf18      	it	ne
 800a902:	f1c0 0004 	rsbne	r0, r0, #4
 800a906:	4770      	bx	lr

0800a908 <uxr_millis>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	4669      	mov	r1, sp
 800a90e:	2001      	movs	r0, #1
 800a910:	f7f6 fbb2 	bl	8001078 <clock_gettime>
 800a914:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800a918:	4906      	ldr	r1, [pc, #24]	@ (800a934 <uxr_millis+0x2c>)
 800a91a:	fba0 0301 	umull	r0, r3, r0, r1
 800a91e:	1900      	adds	r0, r0, r4
 800a920:	fb01 3102 	mla	r1, r1, r2, r3
 800a924:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a928:	4a03      	ldr	r2, [pc, #12]	@ (800a938 <uxr_millis+0x30>)
 800a92a:	2300      	movs	r3, #0
 800a92c:	f7f5 fcc0 	bl	80002b0 <__aeabi_ldivmod>
 800a930:	b004      	add	sp, #16
 800a932:	bd10      	pop	{r4, pc}
 800a934:	3b9aca00 	.word	0x3b9aca00
 800a938:	000f4240 	.word	0x000f4240

0800a93c <uxr_nanos>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	4669      	mov	r1, sp
 800a942:	2001      	movs	r0, #1
 800a944:	f7f6 fb98 	bl	8001078 <clock_gettime>
 800a948:	4a06      	ldr	r2, [pc, #24]	@ (800a964 <uxr_nanos+0x28>)
 800a94a:	9800      	ldr	r0, [sp, #0]
 800a94c:	9902      	ldr	r1, [sp, #8]
 800a94e:	9c01      	ldr	r4, [sp, #4]
 800a950:	fba0 0302 	umull	r0, r3, r0, r2
 800a954:	1840      	adds	r0, r0, r1
 800a956:	fb02 3304 	mla	r3, r2, r4, r3
 800a95a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800a95e:	b004      	add	sp, #16
 800a960:	bd10      	pop	{r4, pc}
 800a962:	bf00      	nop
 800a964:	3b9aca00 	.word	0x3b9aca00

0800a968 <on_full_output_buffer_fragmented>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	460c      	mov	r4, r1
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800a974:	4606      	mov	r6, r0
 800a976:	f104 0008 	add.w	r0, r4, #8
 800a97a:	f7ff ff4b 	bl	800a814 <uxr_get_output_reliable_stream>
 800a97e:	4605      	mov	r5, r0
 800a980:	f004 f8d2 	bl	800eb28 <get_available_free_slots>
 800a984:	b968      	cbnz	r0, 800a9a2 <on_full_output_buffer_fragmented+0x3a>
 800a986:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800a98a:	4620      	mov	r0, r4
 800a98c:	4798      	blx	r3
 800a98e:	b918      	cbnz	r0, 800a998 <on_full_output_buffer_fragmented+0x30>
 800a990:	2001      	movs	r0, #1
 800a992:	b00a      	add	sp, #40	@ 0x28
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4628      	mov	r0, r5
 800a99a:	f004 f8c5 	bl	800eb28 <get_available_free_slots>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d0f6      	beq.n	800a990 <on_full_output_buffer_fragmented+0x28>
 800a9a2:	8929      	ldrh	r1, [r5, #8]
 800a9a4:	89eb      	ldrh	r3, [r5, #14]
 800a9a6:	7b28      	ldrb	r0, [r5, #12]
 800a9a8:	686a      	ldr	r2, [r5, #4]
 800a9aa:	fbb2 f8f1 	udiv	r8, r2, r1
 800a9ae:	fbb3 f2f1 	udiv	r2, r3, r1
 800a9b2:	fb01 3112 	mls	r1, r1, r2, r3
 800a9b6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800a9ba:	b289      	uxth	r1, r1
 800a9bc:	fb08 f101 	mul.w	r1, r8, r1
 800a9c0:	30fc      	adds	r0, #252	@ 0xfc
 800a9c2:	f1a8 0804 	sub.w	r8, r8, #4
 800a9c6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800a9ca:	4440      	add	r0, r8
 800a9cc:	b287      	uxth	r7, r0
 800a9ce:	1bdb      	subs	r3, r3, r7
 800a9d0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	3104      	adds	r1, #4
 800a9d8:	4419      	add	r1, r3
 800a9da:	4642      	mov	r2, r8
 800a9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	a802      	add	r0, sp, #8
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f7fd fc91 	bl	800830c <ucdr_init_buffer_origin_offset>
 800a9ea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800a9ee:	f102 0308 	add.w	r3, r2, #8
 800a9f2:	4543      	cmp	r3, r8
 800a9f4:	d928      	bls.n	800aa48 <on_full_output_buffer_fragmented+0xe0>
 800a9f6:	463a      	mov	r2, r7
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	210d      	movs	r1, #13
 800a9fc:	a802      	add	r0, sp, #8
 800a9fe:	f7ff ff3d 	bl	800a87c <uxr_buffer_submessage_header>
 800aa02:	8929      	ldrh	r1, [r5, #8]
 800aa04:	89eb      	ldrh	r3, [r5, #14]
 800aa06:	fbb3 f2f1 	udiv	r2, r3, r1
 800aa0a:	fb01 3312 	mls	r3, r1, r2, r3
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	686a      	ldr	r2, [r5, #4]
 800aa12:	fbb2 f2f1 	udiv	r2, r2, r1
 800aa16:	fb02 f303 	mul.w	r3, r2, r3
 800aa1a:	682a      	ldr	r2, [r5, #0]
 800aa1c:	f842 8003 	str.w	r8, [r2, r3]
 800aa20:	89e8      	ldrh	r0, [r5, #14]
 800aa22:	2101      	movs	r1, #1
 800aa24:	f004 f996 	bl	800ed54 <uxr_seq_num_add>
 800aa28:	9904      	ldr	r1, [sp, #16]
 800aa2a:	9a03      	ldr	r2, [sp, #12]
 800aa2c:	81e8      	strh	r0, [r5, #14]
 800aa2e:	1a52      	subs	r2, r2, r1
 800aa30:	4630      	mov	r0, r6
 800aa32:	f7fd fc7d 	bl	8008330 <ucdr_init_buffer>
 800aa36:	4630      	mov	r0, r6
 800aa38:	490f      	ldr	r1, [pc, #60]	@ (800aa78 <on_full_output_buffer_fragmented+0x110>)
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	f7fd fc4c 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800aa40:	2000      	movs	r0, #0
 800aa42:	b00a      	add	sp, #40	@ 0x28
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	b292      	uxth	r2, r2
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	210d      	movs	r1, #13
 800aa4e:	a802      	add	r0, sp, #8
 800aa50:	f7ff ff14 	bl	800a87c <uxr_buffer_submessage_header>
 800aa54:	8928      	ldrh	r0, [r5, #8]
 800aa56:	89eb      	ldrh	r3, [r5, #14]
 800aa58:	fbb3 f1f0 	udiv	r1, r3, r0
 800aa5c:	fb00 3311 	mls	r3, r0, r1, r3
 800aa60:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800aa64:	6869      	ldr	r1, [r5, #4]
 800aa66:	fbb1 f1f0 	udiv	r1, r1, r0
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	fb01 f303 	mul.w	r3, r1, r3
 800aa70:	6829      	ldr	r1, [r5, #0]
 800aa72:	3208      	adds	r2, #8
 800aa74:	50ca      	str	r2, [r1, r3]
 800aa76:	e7d3      	b.n	800aa20 <on_full_output_buffer_fragmented+0xb8>
 800aa78:	0800a969 	.word	0x0800a969

0800aa7c <uxr_prepare_output_stream>:
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	2707      	movs	r7, #7
 800aa82:	9202      	str	r2, [sp, #8]
 800aa84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa86:	9103      	str	r1, [sp, #12]
 800aa88:	2500      	movs	r5, #0
 800aa8a:	3204      	adds	r2, #4
 800aa8c:	e9cd 7500 	strd	r7, r5, [sp]
 800aa90:	461c      	mov	r4, r3
 800aa92:	4606      	mov	r6, r0
 800aa94:	f7ff fc54 	bl	800a340 <uxr_prepare_stream_to_write_submessage>
 800aa98:	f080 0201 	eor.w	r2, r0, #1
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	75a2      	strb	r2, [r4, #22]
 800aaa0:	b112      	cbz	r2, 800aaa8 <uxr_prepare_output_stream+0x2c>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	b007      	add	sp, #28
 800aaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa8:	aa05      	add	r2, sp, #20
 800aaaa:	9902      	ldr	r1, [sp, #8]
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff fd7d 	bl	800a5ac <uxr_init_base_object_request>
 800aab2:	a905      	add	r1, sp, #20
 800aab4:	4605      	mov	r5, r0
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 ffa0 	bl	800b9fc <uxr_serialize_WRITE_DATA_Payload_Data>
 800aabc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800aac0:	69a6      	ldr	r6, [r4, #24]
 800aac2:	69e7      	ldr	r7, [r4, #28]
 800aac4:	1a52      	subs	r2, r2, r1
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7fd fc32 	bl	8008330 <ucdr_init_buffer>
 800aacc:	4620      	mov	r0, r4
 800aace:	463a      	mov	r2, r7
 800aad0:	4631      	mov	r1, r6
 800aad2:	f7fd fc01 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800aad6:	4628      	mov	r0, r5
 800aad8:	b007      	add	sp, #28
 800aada:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aadc <uxr_prepare_output_stream_fragmented>:
 800aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	b091      	sub	sp, #68	@ 0x44
 800aae2:	4605      	mov	r5, r0
 800aae4:	9105      	str	r1, [sp, #20]
 800aae6:	3008      	adds	r0, #8
 800aae8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800aaec:	461e      	mov	r6, r3
 800aaee:	9204      	str	r2, [sp, #16]
 800aaf0:	f7ff fe90 	bl	800a814 <uxr_get_output_reliable_stream>
 800aaf4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	f000 8091 	beq.w	800ac20 <uxr_prepare_output_stream_fragmented+0x144>
 800aafe:	4604      	mov	r4, r0
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f000 808d 	beq.w	800ac20 <uxr_prepare_output_stream_fragmented+0x144>
 800ab06:	f004 f80f 	bl	800eb28 <get_available_free_slots>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f000 8083 	beq.w	800ac16 <uxr_prepare_output_stream_fragmented+0x13a>
 800ab10:	8922      	ldrh	r2, [r4, #8]
 800ab12:	89e7      	ldrh	r7, [r4, #14]
 800ab14:	fbb7 f9f2 	udiv	r9, r7, r2
 800ab18:	fb02 7919 	mls	r9, r2, r9, r7
 800ab1c:	fa1f f989 	uxth.w	r9, r9
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	9203      	str	r2, [sp, #12]
 800ab2a:	fb02 f909 	mul.w	r9, r2, r9
 800ab2e:	f109 0904 	add.w	r9, r9, #4
 800ab32:	4499      	add	r9, r3
 800ab34:	7b23      	ldrb	r3, [r4, #12]
 800ab36:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ab3a:	4543      	cmp	r3, r8
 800ab3c:	f1a2 0b04 	sub.w	fp, r2, #4
 800ab40:	d37a      	bcc.n	800ac38 <uxr_prepare_output_stream_fragmented+0x15c>
 800ab42:	f1ab 0a04 	sub.w	sl, fp, #4
 800ab46:	ebaa 0a03 	sub.w	sl, sl, r3
 800ab4a:	465a      	mov	r2, fp
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4649      	mov	r1, r9
 800ab50:	a808      	add	r0, sp, #32
 800ab52:	f8cd 8000 	str.w	r8, [sp]
 800ab56:	f7fd fbd9 	bl	800830c <ucdr_init_buffer_origin_offset>
 800ab5a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ab5c:	fa1f fa8a 	uxth.w	sl, sl
 800ab60:	4652      	mov	r2, sl
 800ab62:	f103 0a08 	add.w	sl, r3, #8
 800ab66:	45da      	cmp	sl, fp
 800ab68:	bf34      	ite	cc
 800ab6a:	2302      	movcc	r3, #2
 800ab6c:	2300      	movcs	r3, #0
 800ab6e:	210d      	movs	r1, #13
 800ab70:	a808      	add	r0, sp, #32
 800ab72:	f7ff fe83 	bl	800a87c <uxr_buffer_submessage_header>
 800ab76:	8921      	ldrh	r1, [r4, #8]
 800ab78:	fbb7 f2f1 	udiv	r2, r7, r1
 800ab7c:	fb01 7212 	mls	r2, r1, r2, r7
 800ab80:	b292      	uxth	r2, r2
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab88:	fb02 f303 	mul.w	r3, r2, r3
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f842 b003 	str.w	fp, [r2, r3]
 800ab94:	2101      	movs	r1, #1
 800ab96:	f004 f8dd 	bl	800ed54 <uxr_seq_num_add>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	f108 0104 	add.w	r1, r8, #4
 800aba0:	f1a3 0208 	sub.w	r2, r3, #8
 800aba4:	eba2 0208 	sub.w	r2, r2, r8
 800aba8:	4449      	add	r1, r9
 800abaa:	4607      	mov	r7, r0
 800abac:	4630      	mov	r0, r6
 800abae:	f7fd fbbf 	bl	8008330 <ucdr_init_buffer>
 800abb2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800abb4:	81e7      	strh	r7, [r4, #14]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800abbc:	bf28      	it	cs
 800abbe:	2200      	movcs	r2, #0
 800abc0:	2300      	movs	r3, #0
 800abc2:	b292      	uxth	r2, r2
 800abc4:	2107      	movs	r1, #7
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff fe58 	bl	800a87c <uxr_buffer_submessage_header>
 800abcc:	9904      	ldr	r1, [sp, #16]
 800abce:	aa07      	add	r2, sp, #28
 800abd0:	4628      	mov	r0, r5
 800abd2:	f7ff fceb 	bl	800a5ac <uxr_init_base_object_request>
 800abd6:	4604      	mov	r4, r0
 800abd8:	b318      	cbz	r0, 800ac22 <uxr_prepare_output_stream_fragmented+0x146>
 800abda:	a907      	add	r1, sp, #28
 800abdc:	4630      	mov	r0, r6
 800abde:	f000 ff0d 	bl	800b9fc <uxr_serialize_WRITE_DATA_Payload_Data>
 800abe2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800abe6:	4630      	mov	r0, r6
 800abe8:	1a52      	subs	r2, r2, r1
 800abea:	f7fd fba1 	bl	8008330 <ucdr_init_buffer>
 800abee:	9b05      	ldr	r3, [sp, #20]
 800abf0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800abf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800abf6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800abfa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800abfc:	491b      	ldr	r1, [pc, #108]	@ (800ac6c <uxr_prepare_output_stream_fragmented+0x190>)
 800abfe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ac02:	4630      	mov	r0, r6
 800ac04:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ac08:	462a      	mov	r2, r5
 800ac0a:	f7fd fb65 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800ac0e:	4620      	mov	r0, r4
 800ac10:	b011      	add	sp, #68	@ 0x44
 800ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac16:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ac18:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4798      	blx	r3
 800ac1e:	b920      	cbnz	r0, 800ac2a <uxr_prepare_output_stream_fragmented+0x14e>
 800ac20:	2400      	movs	r4, #0
 800ac22:	4620      	mov	r0, r4
 800ac24:	b011      	add	sp, #68	@ 0x44
 800ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f003 ff7c 	bl	800eb28 <get_available_free_slots>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	f47f af6d 	bne.w	800ab10 <uxr_prepare_output_stream_fragmented+0x34>
 800ac36:	e7f3      	b.n	800ac20 <uxr_prepare_output_stream_fragmented+0x144>
 800ac38:	4638      	mov	r0, r7
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	f004 f88a 	bl	800ed54 <uxr_seq_num_add>
 800ac40:	8921      	ldrh	r1, [r4, #8]
 800ac42:	fbb0 f2f1 	udiv	r2, r0, r1
 800ac46:	fb01 0912 	mls	r9, r1, r2, r0
 800ac4a:	fa1f f289 	uxth.w	r2, r9
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	fbb3 f9f1 	udiv	r9, r3, r1
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	fb02 f909 	mul.w	r9, r2, r9
 800ac5a:	f109 0904 	add.w	r9, r9, #4
 800ac5e:	4499      	add	r9, r3
 800ac60:	4607      	mov	r7, r0
 800ac62:	7b23      	ldrb	r3, [r4, #12]
 800ac64:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800ac68:	e76b      	b.n	800ab42 <uxr_prepare_output_stream_fragmented+0x66>
 800ac6a:	bf00      	nop
 800ac6c:	0800a969 	.word	0x0800a969

0800ac70 <uxr_serialize_message_header>:
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac72:	b083      	sub	sp, #12
 800ac74:	4616      	mov	r6, r2
 800ac76:	4604      	mov	r4, r0
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	9f08      	ldr	r7, [sp, #32]
 800ac7e:	f7fc faad 	bl	80071dc <ucdr_serialize_uint8_t>
 800ac82:	4631      	mov	r1, r6
 800ac84:	4620      	mov	r0, r4
 800ac86:	f7fc faa9 	bl	80071dc <ucdr_serialize_uint8_t>
 800ac8a:	9a01      	ldr	r2, [sp, #4]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f7fc fb50 	bl	8007334 <ucdr_serialize_endian_uint16_t>
 800ac94:	062b      	lsls	r3, r5, #24
 800ac96:	d501      	bpl.n	800ac9c <uxr_serialize_message_header+0x2c>
 800ac98:	b003      	add	sp, #12
 800ac9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	4639      	mov	r1, r7
 800aca0:	4620      	mov	r0, r4
 800aca2:	b003      	add	sp, #12
 800aca4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aca8:	f003 b81c 	b.w	800dce4 <ucdr_serialize_array_uint8_t>

0800acac <uxr_deserialize_message_header>:
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	b083      	sub	sp, #12
 800acb0:	4616      	mov	r6, r2
 800acb2:	4604      	mov	r4, r0
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	460d      	mov	r5, r1
 800acb8:	9f08      	ldr	r7, [sp, #32]
 800acba:	f7fc faa5 	bl	8007208 <ucdr_deserialize_uint8_t>
 800acbe:	4631      	mov	r1, r6
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7fc faa1 	bl	8007208 <ucdr_deserialize_uint8_t>
 800acc6:	9a01      	ldr	r2, [sp, #4]
 800acc8:	2101      	movs	r1, #1
 800acca:	4620      	mov	r0, r4
 800accc:	f7fc fc26 	bl	800751c <ucdr_deserialize_endian_uint16_t>
 800acd0:	f995 3000 	ldrsb.w	r3, [r5]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da01      	bge.n	800acdc <uxr_deserialize_message_header+0x30>
 800acd8:	b003      	add	sp, #12
 800acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acdc:	2204      	movs	r2, #4
 800acde:	4639      	mov	r1, r7
 800ace0:	4620      	mov	r0, r4
 800ace2:	b003      	add	sp, #12
 800ace4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ace8:	f003 b860 	b.w	800ddac <ucdr_deserialize_array_uint8_t>

0800acec <uxr_serialize_submessage_header>:
 800acec:	b530      	push	{r4, r5, lr}
 800acee:	b083      	sub	sp, #12
 800acf0:	4615      	mov	r5, r2
 800acf2:	4604      	mov	r4, r0
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	f7fc fa71 	bl	80071dc <ucdr_serialize_uint8_t>
 800acfa:	4629      	mov	r1, r5
 800acfc:	4620      	mov	r0, r4
 800acfe:	f7fc fa6d 	bl	80071dc <ucdr_serialize_uint8_t>
 800ad02:	9a01      	ldr	r2, [sp, #4]
 800ad04:	2101      	movs	r1, #1
 800ad06:	4620      	mov	r0, r4
 800ad08:	b003      	add	sp, #12
 800ad0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad0e:	f7fc bb11 	b.w	8007334 <ucdr_serialize_endian_uint16_t>
 800ad12:	bf00      	nop

0800ad14 <uxr_deserialize_submessage_header>:
 800ad14:	b530      	push	{r4, r5, lr}
 800ad16:	b083      	sub	sp, #12
 800ad18:	4615      	mov	r5, r2
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	f7fc fa73 	bl	8007208 <ucdr_deserialize_uint8_t>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7fc fa6f 	bl	8007208 <ucdr_deserialize_uint8_t>
 800ad2a:	9a01      	ldr	r2, [sp, #4]
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	4620      	mov	r0, r4
 800ad30:	b003      	add	sp, #12
 800ad32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad36:	f7fc bbf1 	b.w	800751c <ucdr_deserialize_endian_uint16_t>
 800ad3a:	bf00      	nop

0800ad3c <uxr_serialize_CLIENT_Representation>:
 800ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	2204      	movs	r2, #4
 800ad42:	460e      	mov	r6, r1
 800ad44:	4605      	mov	r5, r0
 800ad46:	f002 ffcd 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	1d31      	adds	r1, r6, #4
 800ad50:	4628      	mov	r0, r5
 800ad52:	f002 ffc7 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ad56:	4038      	ands	r0, r7
 800ad58:	2202      	movs	r2, #2
 800ad5a:	1db1      	adds	r1, r6, #6
 800ad5c:	b2c7      	uxtb	r7, r0
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f002 ffc0 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ad64:	2204      	movs	r2, #4
 800ad66:	4007      	ands	r7, r0
 800ad68:	f106 0108 	add.w	r1, r6, #8
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f002 ffb9 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ad72:	7b31      	ldrb	r1, [r6, #12]
 800ad74:	4007      	ands	r7, r0
 800ad76:	4628      	mov	r0, r5
 800ad78:	f7fc fa30 	bl	80071dc <ucdr_serialize_uint8_t>
 800ad7c:	7b71      	ldrb	r1, [r6, #13]
 800ad7e:	4007      	ands	r7, r0
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7fc f9fd 	bl	8007180 <ucdr_serialize_bool>
 800ad86:	7b73      	ldrb	r3, [r6, #13]
 800ad88:	ea07 0800 	and.w	r8, r7, r0
 800ad8c:	b93b      	cbnz	r3, 800ad9e <uxr_serialize_CLIENT_Representation+0x62>
 800ad8e:	8bb1      	ldrh	r1, [r6, #28]
 800ad90:	4628      	mov	r0, r5
 800ad92:	f7fc fa4f 	bl	8007234 <ucdr_serialize_uint16_t>
 800ad96:	ea08 0000 	and.w	r0, r8, r0
 800ad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9e:	6931      	ldr	r1, [r6, #16]
 800ada0:	4628      	mov	r0, r5
 800ada2:	f7fc fc31 	bl	8007608 <ucdr_serialize_uint32_t>
 800ada6:	6933      	ldr	r3, [r6, #16]
 800ada8:	b1e3      	cbz	r3, 800ade4 <uxr_serialize_CLIENT_Representation+0xa8>
 800adaa:	b1c0      	cbz	r0, 800adde <uxr_serialize_CLIENT_Representation+0xa2>
 800adac:	4637      	mov	r7, r6
 800adae:	f04f 0900 	mov.w	r9, #0
 800adb2:	e001      	b.n	800adb8 <uxr_serialize_CLIENT_Representation+0x7c>
 800adb4:	3708      	adds	r7, #8
 800adb6:	b194      	cbz	r4, 800adde <uxr_serialize_CLIENT_Representation+0xa2>
 800adb8:	6979      	ldr	r1, [r7, #20]
 800adba:	4628      	mov	r0, r5
 800adbc:	f003 f8b2 	bl	800df24 <ucdr_serialize_string>
 800adc0:	69b9      	ldr	r1, [r7, #24]
 800adc2:	4604      	mov	r4, r0
 800adc4:	4628      	mov	r0, r5
 800adc6:	f003 f8ad 	bl	800df24 <ucdr_serialize_string>
 800adca:	6933      	ldr	r3, [r6, #16]
 800adcc:	f109 0901 	add.w	r9, r9, #1
 800add0:	4004      	ands	r4, r0
 800add2:	4599      	cmp	r9, r3
 800add4:	b2e4      	uxtb	r4, r4
 800add6:	d3ed      	bcc.n	800adb4 <uxr_serialize_CLIENT_Representation+0x78>
 800add8:	ea08 0804 	and.w	r8, r8, r4
 800addc:	e7d7      	b.n	800ad8e <uxr_serialize_CLIENT_Representation+0x52>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	e7d4      	b.n	800ad8e <uxr_serialize_CLIENT_Representation+0x52>
 800ade4:	ea08 0800 	and.w	r8, r8, r0
 800ade8:	e7d1      	b.n	800ad8e <uxr_serialize_CLIENT_Representation+0x52>
 800adea:	bf00      	nop

0800adec <uxr_deserialize_CLIENT_Representation>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	2204      	movs	r2, #4
 800adf2:	460c      	mov	r4, r1
 800adf4:	4605      	mov	r5, r0
 800adf6:	f002 ffd9 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800adfa:	2202      	movs	r2, #2
 800adfc:	4607      	mov	r7, r0
 800adfe:	1d21      	adds	r1, r4, #4
 800ae00:	4628      	mov	r0, r5
 800ae02:	f002 ffd3 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800ae06:	4038      	ands	r0, r7
 800ae08:	2202      	movs	r2, #2
 800ae0a:	1da1      	adds	r1, r4, #6
 800ae0c:	b2c6      	uxtb	r6, r0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f002 ffcc 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800ae14:	2204      	movs	r2, #4
 800ae16:	4006      	ands	r6, r0
 800ae18:	f104 0108 	add.w	r1, r4, #8
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f002 ffc5 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800ae22:	f104 010c 	add.w	r1, r4, #12
 800ae26:	4006      	ands	r6, r0
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7fc f9ed 	bl	8007208 <ucdr_deserialize_uint8_t>
 800ae2e:	f104 010d 	add.w	r1, r4, #13
 800ae32:	ea06 0700 	and.w	r7, r6, r0
 800ae36:	4628      	mov	r0, r5
 800ae38:	f7fc f9b8 	bl	80071ac <ucdr_deserialize_bool>
 800ae3c:	7b63      	ldrb	r3, [r4, #13]
 800ae3e:	4007      	ands	r7, r0
 800ae40:	b93b      	cbnz	r3, 800ae52 <uxr_deserialize_CLIENT_Representation+0x66>
 800ae42:	f104 011c 	add.w	r1, r4, #28
 800ae46:	4628      	mov	r0, r5
 800ae48:	f7fc faf4 	bl	8007434 <ucdr_deserialize_uint16_t>
 800ae4c:	4038      	ands	r0, r7
 800ae4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae52:	f104 0110 	add.w	r1, r4, #16
 800ae56:	4628      	mov	r0, r5
 800ae58:	f7fc fd06 	bl	8007868 <ucdr_deserialize_uint32_t>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d903      	bls.n	800ae6a <uxr_deserialize_CLIENT_Representation+0x7e>
 800ae62:	2301      	movs	r3, #1
 800ae64:	75ab      	strb	r3, [r5, #22]
 800ae66:	2700      	movs	r7, #0
 800ae68:	e7eb      	b.n	800ae42 <uxr_deserialize_CLIENT_Representation+0x56>
 800ae6a:	b30b      	cbz	r3, 800aeb0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d0fa      	beq.n	800ae66 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ae70:	46a0      	mov	r8, r4
 800ae72:	f04f 0900 	mov.w	r9, #0
 800ae76:	e001      	b.n	800ae7c <uxr_deserialize_CLIENT_Representation+0x90>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	d0f4      	beq.n	800ae66 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ae7c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ae80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae84:	4628      	mov	r0, r5
 800ae86:	f003 f85d 	bl	800df44 <ucdr_deserialize_string>
 800ae8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae8e:	4606      	mov	r6, r0
 800ae90:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ae94:	4628      	mov	r0, r5
 800ae96:	f003 f855 	bl	800df44 <ucdr_deserialize_string>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	f109 0901 	add.w	r9, r9, #1
 800aea0:	4006      	ands	r6, r0
 800aea2:	4599      	cmp	r9, r3
 800aea4:	f108 0808 	add.w	r8, r8, #8
 800aea8:	b2f6      	uxtb	r6, r6
 800aeaa:	d3e5      	bcc.n	800ae78 <uxr_deserialize_CLIENT_Representation+0x8c>
 800aeac:	4037      	ands	r7, r6
 800aeae:	e7c8      	b.n	800ae42 <uxr_deserialize_CLIENT_Representation+0x56>
 800aeb0:	4007      	ands	r7, r0
 800aeb2:	e7c6      	b.n	800ae42 <uxr_deserialize_CLIENT_Representation+0x56>

0800aeb4 <uxr_serialize_AGENT_Representation>:
 800aeb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb8:	2204      	movs	r2, #4
 800aeba:	460f      	mov	r7, r1
 800aebc:	4605      	mov	r5, r0
 800aebe:	f002 ff11 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800aec2:	2202      	movs	r2, #2
 800aec4:	4604      	mov	r4, r0
 800aec6:	1d39      	adds	r1, r7, #4
 800aec8:	4628      	mov	r0, r5
 800aeca:	f002 ff0b 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800aece:	4020      	ands	r0, r4
 800aed0:	2202      	movs	r2, #2
 800aed2:	1db9      	adds	r1, r7, #6
 800aed4:	b2c4      	uxtb	r4, r0
 800aed6:	4628      	mov	r0, r5
 800aed8:	f002 ff04 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800aedc:	7a39      	ldrb	r1, [r7, #8]
 800aede:	4004      	ands	r4, r0
 800aee0:	4628      	mov	r0, r5
 800aee2:	f7fc f94d 	bl	8007180 <ucdr_serialize_bool>
 800aee6:	7a3b      	ldrb	r3, [r7, #8]
 800aee8:	ea00 0804 	and.w	r8, r0, r4
 800aeec:	b913      	cbnz	r3, 800aef4 <uxr_serialize_AGENT_Representation+0x40>
 800aeee:	4640      	mov	r0, r8
 800aef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef4:	68f9      	ldr	r1, [r7, #12]
 800aef6:	4628      	mov	r0, r5
 800aef8:	f7fc fb86 	bl	8007608 <ucdr_serialize_uint32_t>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	b303      	cbz	r3, 800af42 <uxr_serialize_AGENT_Representation+0x8e>
 800af00:	b1d0      	cbz	r0, 800af38 <uxr_serialize_AGENT_Representation+0x84>
 800af02:	463e      	mov	r6, r7
 800af04:	f04f 0900 	mov.w	r9, #0
 800af08:	e001      	b.n	800af0e <uxr_serialize_AGENT_Representation+0x5a>
 800af0a:	3608      	adds	r6, #8
 800af0c:	b1a4      	cbz	r4, 800af38 <uxr_serialize_AGENT_Representation+0x84>
 800af0e:	6931      	ldr	r1, [r6, #16]
 800af10:	4628      	mov	r0, r5
 800af12:	f003 f807 	bl	800df24 <ucdr_serialize_string>
 800af16:	6971      	ldr	r1, [r6, #20]
 800af18:	4604      	mov	r4, r0
 800af1a:	4628      	mov	r0, r5
 800af1c:	f003 f802 	bl	800df24 <ucdr_serialize_string>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f109 0901 	add.w	r9, r9, #1
 800af26:	4004      	ands	r4, r0
 800af28:	4599      	cmp	r9, r3
 800af2a:	b2e4      	uxtb	r4, r4
 800af2c:	d3ed      	bcc.n	800af0a <uxr_serialize_AGENT_Representation+0x56>
 800af2e:	ea08 0804 	and.w	r8, r8, r4
 800af32:	4640      	mov	r0, r8
 800af34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af38:	f04f 0800 	mov.w	r8, #0
 800af3c:	4640      	mov	r0, r8
 800af3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af42:	ea08 0800 	and.w	r8, r8, r0
 800af46:	e7d2      	b.n	800aeee <uxr_serialize_AGENT_Representation+0x3a>

0800af48 <uxr_serialize_DATAWRITER_Representation>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	460d      	mov	r5, r1
 800af4c:	7809      	ldrb	r1, [r1, #0]
 800af4e:	4606      	mov	r6, r0
 800af50:	f7fc f944 	bl	80071dc <ucdr_serialize_uint8_t>
 800af54:	4604      	mov	r4, r0
 800af56:	b130      	cbz	r0, 800af66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800af58:	782b      	ldrb	r3, [r5, #0]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d00c      	beq.n	800af78 <uxr_serialize_DATAWRITER_Representation+0x30>
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d010      	beq.n	800af84 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800af62:	2b01      	cmp	r3, #1
 800af64:	d008      	beq.n	800af78 <uxr_serialize_DATAWRITER_Representation+0x30>
 800af66:	2202      	movs	r2, #2
 800af68:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800af6c:	4630      	mov	r0, r6
 800af6e:	f002 feb9 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800af72:	4020      	ands	r0, r4
 800af74:	b2c0      	uxtb	r0, r0
 800af76:	bd70      	pop	{r4, r5, r6, pc}
 800af78:	6869      	ldr	r1, [r5, #4]
 800af7a:	4630      	mov	r0, r6
 800af7c:	f002 ffd2 	bl	800df24 <ucdr_serialize_string>
 800af80:	4604      	mov	r4, r0
 800af82:	e7f0      	b.n	800af66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800af84:	4629      	mov	r1, r5
 800af86:	4630      	mov	r0, r6
 800af88:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800af8c:	3104      	adds	r1, #4
 800af8e:	f002 ff9d 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800af92:	4604      	mov	r4, r0
 800af94:	e7e7      	b.n	800af66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800af96:	bf00      	nop

0800af98 <uxr_serialize_ObjectVariant.part.0>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	780b      	ldrb	r3, [r1, #0]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	460c      	mov	r4, r1
 800afa0:	4605      	mov	r5, r0
 800afa2:	2b0d      	cmp	r3, #13
 800afa4:	d854      	bhi.n	800b050 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800afa6:	e8df f003 	tbb	[pc, r3]
 800afaa:	0730      	.short	0x0730
 800afac:	07071b1b 	.word	0x07071b1b
 800afb0:	0c530707 	.word	0x0c530707
 800afb4:	494e0c0c 	.word	0x494e0c0c
 800afb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afbc:	3104      	adds	r1, #4
 800afbe:	f7ff bfc3 	b.w	800af48 <uxr_serialize_DATAWRITER_Representation>
 800afc2:	7909      	ldrb	r1, [r1, #4]
 800afc4:	f7fc f90a 	bl	80071dc <ucdr_serialize_uint8_t>
 800afc8:	b1e8      	cbz	r0, 800b006 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800afca:	7923      	ldrb	r3, [r4, #4]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d001      	beq.n	800afd4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d13d      	bne.n	800b050 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800afd4:	68a1      	ldr	r1, [r4, #8]
 800afd6:	4628      	mov	r0, r5
 800afd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afdc:	f002 bfa2 	b.w	800df24 <ucdr_serialize_string>
 800afe0:	7909      	ldrb	r1, [r1, #4]
 800afe2:	f7fc f8fb 	bl	80071dc <ucdr_serialize_uint8_t>
 800afe6:	4606      	mov	r6, r0
 800afe8:	b120      	cbz	r0, 800aff4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800afea:	7923      	ldrb	r3, [r4, #4]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d039      	beq.n	800b064 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d02f      	beq.n	800b054 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800aff4:	2202      	movs	r2, #2
 800aff6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800affa:	4628      	mov	r0, r5
 800affc:	f002 fe72 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b000:	4030      	ands	r0, r6
 800b002:	b2c0      	uxtb	r0, r0
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	2000      	movs	r0, #0
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	7909      	ldrb	r1, [r1, #4]
 800b00c:	f7fc f8e6 	bl	80071dc <ucdr_serialize_uint8_t>
 800b010:	4606      	mov	r6, r0
 800b012:	b158      	cbz	r0, 800b02c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b014:	7923      	ldrb	r3, [r4, #4]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d003      	beq.n	800b022 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d028      	beq.n	800b070 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d104      	bne.n	800b02c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b022:	68a1      	ldr	r1, [r4, #8]
 800b024:	4628      	mov	r0, r5
 800b026:	f002 ff7d 	bl	800df24 <ucdr_serialize_string>
 800b02a:	4606      	mov	r6, r0
 800b02c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800b030:	4628      	mov	r0, r5
 800b032:	f7fc fe0f 	bl	8007c54 <ucdr_serialize_int16_t>
 800b036:	4030      	ands	r0, r6
 800b038:	b2c0      	uxtb	r0, r0
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b040:	3104      	adds	r1, #4
 800b042:	f7ff be7b 	b.w	800ad3c <uxr_serialize_CLIENT_Representation>
 800b046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b04a:	3104      	adds	r1, #4
 800b04c:	f7ff bf32 	b.w	800aeb4 <uxr_serialize_AGENT_Representation>
 800b050:	2001      	movs	r0, #1
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	68a2      	ldr	r2, [r4, #8]
 800b056:	f104 010c 	add.w	r1, r4, #12
 800b05a:	4628      	mov	r0, r5
 800b05c:	f002 ff36 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b060:	4606      	mov	r6, r0
 800b062:	e7c7      	b.n	800aff4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b064:	68a1      	ldr	r1, [r4, #8]
 800b066:	4628      	mov	r0, r5
 800b068:	f002 ff5c 	bl	800df24 <ucdr_serialize_string>
 800b06c:	4606      	mov	r6, r0
 800b06e:	e7c1      	b.n	800aff4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b070:	68a2      	ldr	r2, [r4, #8]
 800b072:	f104 010c 	add.w	r1, r4, #12
 800b076:	4628      	mov	r0, r5
 800b078:	f002 ff28 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b07c:	4606      	mov	r6, r0
 800b07e:	e7d5      	b.n	800b02c <uxr_serialize_ObjectVariant.part.0+0x94>

0800b080 <uxr_deserialize_DATAWRITER_Representation>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	4606      	mov	r6, r0
 800b084:	460d      	mov	r5, r1
 800b086:	f7fc f8bf 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b08a:	4604      	mov	r4, r0
 800b08c:	b130      	cbz	r0, 800b09c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b08e:	782b      	ldrb	r3, [r5, #0]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d00c      	beq.n	800b0ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b094:	2b03      	cmp	r3, #3
 800b096:	d012      	beq.n	800b0be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d008      	beq.n	800b0ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b09c:	2202      	movs	r2, #2
 800b09e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f002 fe82 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b0a8:	4020      	ands	r0, r4
 800b0aa:	b2c0      	uxtb	r0, r0
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
 800b0ae:	6869      	ldr	r1, [r5, #4]
 800b0b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f002 ff45 	bl	800df44 <ucdr_deserialize_string>
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	e7ee      	b.n	800b09c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b0be:	1d2b      	adds	r3, r5, #4
 800b0c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0c4:	f105 0108 	add.w	r1, r5, #8
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f002 ff11 	bl	800def0 <ucdr_deserialize_sequence_uint8_t>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	e7e4      	b.n	800b09c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b0d2:	bf00      	nop

0800b0d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	7809      	ldrb	r1, [r1, #0]
 800b0da:	4606      	mov	r6, r0
 800b0dc:	f7fc f850 	bl	8007180 <ucdr_serialize_bool>
 800b0e0:	782b      	ldrb	r3, [r5, #0]
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	b94b      	cbnz	r3, 800b0fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800b0e6:	7a29      	ldrb	r1, [r5, #8]
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7fc f849 	bl	8007180 <ucdr_serialize_bool>
 800b0ee:	7a2b      	ldrb	r3, [r5, #8]
 800b0f0:	4004      	ands	r4, r0
 800b0f2:	b2e4      	uxtb	r4, r4
 800b0f4:	b943      	cbnz	r3, 800b108 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	6869      	ldr	r1, [r5, #4]
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f002 ff11 	bl	800df24 <ucdr_serialize_string>
 800b102:	4004      	ands	r4, r0
 800b104:	b2e4      	uxtb	r4, r4
 800b106:	e7ee      	b.n	800b0e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800b108:	68e9      	ldr	r1, [r5, #12]
 800b10a:	4630      	mov	r0, r6
 800b10c:	f002 ff0a 	bl	800df24 <ucdr_serialize_string>
 800b110:	4004      	ands	r4, r0
 800b112:	4620      	mov	r0, r4
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	bf00      	nop

0800b118 <uxr_serialize_OBJK_Topic_Binary>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	460d      	mov	r5, r1
 800b11c:	6809      	ldr	r1, [r1, #0]
 800b11e:	4606      	mov	r6, r0
 800b120:	f002 ff00 	bl	800df24 <ucdr_serialize_string>
 800b124:	7929      	ldrb	r1, [r5, #4]
 800b126:	4604      	mov	r4, r0
 800b128:	4630      	mov	r0, r6
 800b12a:	f7fc f829 	bl	8007180 <ucdr_serialize_bool>
 800b12e:	792b      	ldrb	r3, [r5, #4]
 800b130:	4004      	ands	r4, r0
 800b132:	b2e4      	uxtb	r4, r4
 800b134:	b943      	cbnz	r3, 800b148 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800b136:	7b29      	ldrb	r1, [r5, #12]
 800b138:	4630      	mov	r0, r6
 800b13a:	f7fc f821 	bl	8007180 <ucdr_serialize_bool>
 800b13e:	7b2b      	ldrb	r3, [r5, #12]
 800b140:	4004      	ands	r4, r0
 800b142:	b93b      	cbnz	r3, 800b154 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800b144:	4620      	mov	r0, r4
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	68a9      	ldr	r1, [r5, #8]
 800b14a:	4630      	mov	r0, r6
 800b14c:	f002 feea 	bl	800df24 <ucdr_serialize_string>
 800b150:	4004      	ands	r4, r0
 800b152:	e7f0      	b.n	800b136 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800b154:	6929      	ldr	r1, [r5, #16]
 800b156:	4630      	mov	r0, r6
 800b158:	f002 fee4 	bl	800df24 <ucdr_serialize_string>
 800b15c:	4004      	ands	r4, r0
 800b15e:	b2e4      	uxtb	r4, r4
 800b160:	4620      	mov	r0, r4
 800b162:	bd70      	pop	{r4, r5, r6, pc}

0800b164 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b168:	460c      	mov	r4, r1
 800b16a:	7809      	ldrb	r1, [r1, #0]
 800b16c:	4606      	mov	r6, r0
 800b16e:	f7fc f807 	bl	8007180 <ucdr_serialize_bool>
 800b172:	7823      	ldrb	r3, [r4, #0]
 800b174:	4605      	mov	r5, r0
 800b176:	b96b      	cbnz	r3, 800b194 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800b178:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7fb ffff 	bl	8007180 <ucdr_serialize_bool>
 800b182:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b186:	4005      	ands	r5, r0
 800b188:	b2ed      	uxtb	r5, r5
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d169      	bne.n	800b262 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800b18e:	4628      	mov	r0, r5
 800b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4630      	mov	r0, r6
 800b198:	f7fc fa36 	bl	8007608 <ucdr_serialize_uint32_t>
 800b19c:	6863      	ldr	r3, [r4, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d06b      	beq.n	800b27a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d067      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b1a6:	68a1      	ldr	r1, [r4, #8]
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f002 febb 	bl	800df24 <ucdr_serialize_string>
 800b1ae:	6863      	ldr	r3, [r4, #4]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d953      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d05e      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b1b8:	68e1      	ldr	r1, [r4, #12]
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f002 feb2 	bl	800df24 <ucdr_serialize_string>
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d94a      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d055      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b1ca:	6921      	ldr	r1, [r4, #16]
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f002 fea9 	bl	800df24 <ucdr_serialize_string>
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d941      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d04c      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b1dc:	6961      	ldr	r1, [r4, #20]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f002 fea0 	bl	800df24 <ucdr_serialize_string>
 800b1e4:	6863      	ldr	r3, [r4, #4]
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d938      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d043      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b1ee:	69a1      	ldr	r1, [r4, #24]
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f002 fe97 	bl	800df24 <ucdr_serialize_string>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	d92f      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d03a      	beq.n	800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b200:	69e1      	ldr	r1, [r4, #28]
 800b202:	4630      	mov	r0, r6
 800b204:	f002 fe8e 	bl	800df24 <ucdr_serialize_string>
 800b208:	6863      	ldr	r3, [r4, #4]
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d926      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b20e:	b390      	cbz	r0, 800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	4630      	mov	r0, r6
 800b214:	f002 fe86 	bl	800df24 <ucdr_serialize_string>
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	2b07      	cmp	r3, #7
 800b21c:	d91e      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b21e:	b350      	cbz	r0, 800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b220:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b222:	4630      	mov	r0, r6
 800b224:	f002 fe7e 	bl	800df24 <ucdr_serialize_string>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	d916      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b22e:	b310      	cbz	r0, 800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b230:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b232:	4630      	mov	r0, r6
 800b234:	f002 fe76 	bl	800df24 <ucdr_serialize_string>
 800b238:	6863      	ldr	r3, [r4, #4]
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	d90e      	bls.n	800b25c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b23e:	b1d0      	cbz	r0, 800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b240:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800b244:	2709      	movs	r7, #9
 800b246:	e000      	b.n	800b24a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800b248:	b1a8      	cbz	r0, 800b276 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b24a:	f858 1b04 	ldr.w	r1, [r8], #4
 800b24e:	4630      	mov	r0, r6
 800b250:	f002 fe68 	bl	800df24 <ucdr_serialize_string>
 800b254:	6862      	ldr	r2, [r4, #4]
 800b256:	3701      	adds	r7, #1
 800b258:	4297      	cmp	r7, r2
 800b25a:	d3f5      	bcc.n	800b248 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800b25c:	4005      	ands	r5, r0
 800b25e:	b2ed      	uxtb	r5, r5
 800b260:	e78a      	b.n	800b178 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b262:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b264:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b268:	4630      	mov	r0, r6
 800b26a:	f002 fe2f 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b26e:	4005      	ands	r5, r0
 800b270:	4628      	mov	r0, r5
 800b272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b276:	2500      	movs	r5, #0
 800b278:	e77e      	b.n	800b178 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b27a:	4028      	ands	r0, r5
 800b27c:	b2c5      	uxtb	r5, r0
 800b27e:	e77b      	b.n	800b178 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800b280 <uxr_serialize_OBJK_Publisher_Binary>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	460d      	mov	r5, r1
 800b284:	7809      	ldrb	r1, [r1, #0]
 800b286:	4606      	mov	r6, r0
 800b288:	f7fb ff7a 	bl	8007180 <ucdr_serialize_bool>
 800b28c:	782b      	ldrb	r3, [r5, #0]
 800b28e:	4604      	mov	r4, r0
 800b290:	b94b      	cbnz	r3, 800b2a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800b292:	7a29      	ldrb	r1, [r5, #8]
 800b294:	4630      	mov	r0, r6
 800b296:	f7fb ff73 	bl	8007180 <ucdr_serialize_bool>
 800b29a:	7a2b      	ldrb	r3, [r5, #8]
 800b29c:	4004      	ands	r4, r0
 800b29e:	b2e4      	uxtb	r4, r4
 800b2a0:	b943      	cbnz	r3, 800b2b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
 800b2a6:	6869      	ldr	r1, [r5, #4]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f002 fe3b 	bl	800df24 <ucdr_serialize_string>
 800b2ae:	4004      	ands	r4, r0
 800b2b0:	b2e4      	uxtb	r4, r4
 800b2b2:	e7ee      	b.n	800b292 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800b2b4:	f105 010c 	add.w	r1, r5, #12
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff ff53 	bl	800b164 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800b2be:	4004      	ands	r4, r0
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}

0800b2c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800b2c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800b2c8:	4688      	mov	r8, r1
 800b2ca:	8809      	ldrh	r1, [r1, #0]
 800b2cc:	4681      	mov	r9, r0
 800b2ce:	f7fb ffb1 	bl	8007234 <ucdr_serialize_uint16_t>
 800b2d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	4648      	mov	r0, r9
 800b2da:	f7fb ff51 	bl	8007180 <ucdr_serialize_bool>
 800b2de:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b2e2:	4006      	ands	r6, r0
 800b2e4:	b2f5      	uxtb	r5, r6
 800b2e6:	b9eb      	cbnz	r3, 800b324 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800b2e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800b2ec:	4648      	mov	r0, r9
 800b2ee:	f7fb ff47 	bl	8007180 <ucdr_serialize_bool>
 800b2f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b2f6:	4005      	ands	r5, r0
 800b2f8:	bb7b      	cbnz	r3, 800b35a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800b2fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800b2fe:	4648      	mov	r0, r9
 800b300:	f7fb ff3e 	bl	8007180 <ucdr_serialize_bool>
 800b304:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b308:	4005      	ands	r5, r0
 800b30a:	b9f3      	cbnz	r3, 800b34a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800b30c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800b310:	4648      	mov	r0, r9
 800b312:	f7fb ff35 	bl	8007180 <ucdr_serialize_bool>
 800b316:	f898 3014 	ldrb.w	r3, [r8, #20]
 800b31a:	4005      	ands	r5, r0
 800b31c:	b94b      	cbnz	r3, 800b332 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800b31e:	4628      	mov	r0, r5
 800b320:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b324:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800b328:	4648      	mov	r0, r9
 800b32a:	f7fb ff83 	bl	8007234 <ucdr_serialize_uint16_t>
 800b32e:	4005      	ands	r5, r0
 800b330:	e7da      	b.n	800b2e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800b332:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b336:	f108 011c 	add.w	r1, r8, #28
 800b33a:	4648      	mov	r0, r9
 800b33c:	f002 fdc6 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b340:	4028      	ands	r0, r5
 800b342:	b2c5      	uxtb	r5, r0
 800b344:	4628      	mov	r0, r5
 800b346:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b34a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b34e:	4648      	mov	r0, r9
 800b350:	f7fc f95a 	bl	8007608 <ucdr_serialize_uint32_t>
 800b354:	4028      	ands	r0, r5
 800b356:	b2c5      	uxtb	r5, r0
 800b358:	e7d8      	b.n	800b30c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800b35a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b35e:	4648      	mov	r0, r9
 800b360:	f7fc f952 	bl	8007608 <ucdr_serialize_uint32_t>
 800b364:	4028      	ands	r0, r5
 800b366:	b2c5      	uxtb	r5, r0
 800b368:	e7c7      	b.n	800b2fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800b36a:	bf00      	nop

0800b36c <uxr_serialize_OBJK_DataWriter_Binary>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	2202      	movs	r2, #2
 800b370:	460d      	mov	r5, r1
 800b372:	4606      	mov	r6, r0
 800b374:	f002 fcb6 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b378:	78a9      	ldrb	r1, [r5, #2]
 800b37a:	4604      	mov	r4, r0
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7fb feff 	bl	8007180 <ucdr_serialize_bool>
 800b382:	78ab      	ldrb	r3, [r5, #2]
 800b384:	4004      	ands	r4, r0
 800b386:	b2e4      	uxtb	r4, r4
 800b388:	b90b      	cbnz	r3, 800b38e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800b38a:	4620      	mov	r0, r4
 800b38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b38e:	f105 0108 	add.w	r1, r5, #8
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ff96 	bl	800b2c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800b398:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800b39c:	4607      	mov	r7, r0
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7fb feee 	bl	8007180 <ucdr_serialize_bool>
 800b3a4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800b3a8:	4038      	ands	r0, r7
 800b3aa:	b2c7      	uxtb	r7, r0
 800b3ac:	b913      	cbnz	r3, 800b3b4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800b3ae:	403c      	ands	r4, r7
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7fc fb7b 	bl	8007ab4 <ucdr_serialize_uint64_t>
 800b3be:	4007      	ands	r7, r0
 800b3c0:	e7f5      	b.n	800b3ae <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800b3c2:	bf00      	nop

0800b3c4 <uxr_deserialize_ObjectVariant>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	460e      	mov	r6, r1
 800b3ca:	f7fb ff1d 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b3ce:	b168      	cbz	r0, 800b3ec <uxr_deserialize_ObjectVariant+0x28>
 800b3d0:	7833      	ldrb	r3, [r6, #0]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	2b0d      	cmp	r3, #13
 800b3d8:	d809      	bhi.n	800b3ee <uxr_deserialize_ObjectVariant+0x2a>
 800b3da:	e8df f003 	tbb	[pc, r3]
 800b3de:	0a41      	.short	0x0a41
 800b3e0:	0a0a2323 	.word	0x0a0a2323
 800b3e4:	10080a0a 	.word	0x10080a0a
 800b3e8:	565c1010 	.word	0x565c1010
 800b3ec:	2400      	movs	r4, #0
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
 800b3f2:	1d31      	adds	r1, r6, #4
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3fa:	f7ff be41 	b.w	800b080 <uxr_deserialize_DATAWRITER_Representation>
 800b3fe:	1d31      	adds	r1, r6, #4
 800b400:	4628      	mov	r0, r5
 800b402:	f7fb ff01 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b406:	2800      	cmp	r0, #0
 800b408:	d0f0      	beq.n	800b3ec <uxr_deserialize_ObjectVariant+0x28>
 800b40a:	7933      	ldrb	r3, [r6, #4]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d001      	beq.n	800b414 <uxr_deserialize_ObjectVariant+0x50>
 800b410:	2b02      	cmp	r3, #2
 800b412:	d1ec      	bne.n	800b3ee <uxr_deserialize_ObjectVariant+0x2a>
 800b414:	68b1      	ldr	r1, [r6, #8]
 800b416:	4628      	mov	r0, r5
 800b418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b41c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b420:	f002 bd90 	b.w	800df44 <ucdr_deserialize_string>
 800b424:	1d31      	adds	r1, r6, #4
 800b426:	4628      	mov	r0, r5
 800b428:	f7fb feee 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b42c:	4604      	mov	r4, r0
 800b42e:	b170      	cbz	r0, 800b44e <uxr_deserialize_ObjectVariant+0x8a>
 800b430:	7933      	ldrb	r3, [r6, #4]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d04c      	beq.n	800b4d0 <uxr_deserialize_ObjectVariant+0x10c>
 800b436:	2b03      	cmp	r3, #3
 800b438:	d109      	bne.n	800b44e <uxr_deserialize_ObjectVariant+0x8a>
 800b43a:	f106 0308 	add.w	r3, r6, #8
 800b43e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b442:	f106 010c 	add.w	r1, r6, #12
 800b446:	4628      	mov	r0, r5
 800b448:	f002 fd52 	bl	800def0 <ucdr_deserialize_sequence_uint8_t>
 800b44c:	4604      	mov	r4, r0
 800b44e:	2202      	movs	r2, #2
 800b450:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800b454:	4628      	mov	r0, r5
 800b456:	f002 fca9 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b45a:	4020      	ands	r0, r4
 800b45c:	b2c4      	uxtb	r4, r0
 800b45e:	e7c6      	b.n	800b3ee <uxr_deserialize_ObjectVariant+0x2a>
 800b460:	1d31      	adds	r1, r6, #4
 800b462:	4628      	mov	r0, r5
 800b464:	f7fb fed0 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b468:	4604      	mov	r4, r0
 800b46a:	b130      	cbz	r0, 800b47a <uxr_deserialize_ObjectVariant+0xb6>
 800b46c:	7933      	ldrb	r3, [r6, #4]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d036      	beq.n	800b4e0 <uxr_deserialize_ObjectVariant+0x11c>
 800b472:	2b03      	cmp	r3, #3
 800b474:	d03c      	beq.n	800b4f0 <uxr_deserialize_ObjectVariant+0x12c>
 800b476:	2b01      	cmp	r3, #1
 800b478:	d032      	beq.n	800b4e0 <uxr_deserialize_ObjectVariant+0x11c>
 800b47a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800b47e:	4628      	mov	r0, r5
 800b480:	f7fc fc68 	bl	8007d54 <ucdr_deserialize_int16_t>
 800b484:	4020      	ands	r0, r4
 800b486:	b2c4      	uxtb	r4, r0
 800b488:	e7b1      	b.n	800b3ee <uxr_deserialize_ObjectVariant+0x2a>
 800b48a:	1d31      	adds	r1, r6, #4
 800b48c:	4628      	mov	r0, r5
 800b48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b492:	f7ff bcab 	b.w	800adec <uxr_deserialize_CLIENT_Representation>
 800b496:	2204      	movs	r2, #4
 800b498:	18b1      	adds	r1, r6, r2
 800b49a:	4628      	mov	r0, r5
 800b49c:	f002 fc86 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f106 0108 	add.w	r1, r6, #8
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f002 fc7f 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	4004      	ands	r4, r0
 800b4b2:	f106 010a 	add.w	r1, r6, #10
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f002 fc78 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b4bc:	b2e4      	uxtb	r4, r4
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f106 010c 	add.w	r1, r6, #12
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	401c      	ands	r4, r3
 800b4c8:	f7fb fe70 	bl	80071ac <ucdr_deserialize_bool>
 800b4cc:	4004      	ands	r4, r0
 800b4ce:	e78e      	b.n	800b3ee <uxr_deserialize_ObjectVariant+0x2a>
 800b4d0:	68b1      	ldr	r1, [r6, #8]
 800b4d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f002 fd34 	bl	800df44 <ucdr_deserialize_string>
 800b4dc:	4604      	mov	r4, r0
 800b4de:	e7b6      	b.n	800b44e <uxr_deserialize_ObjectVariant+0x8a>
 800b4e0:	68b1      	ldr	r1, [r6, #8]
 800b4e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f002 fd2c 	bl	800df44 <ucdr_deserialize_string>
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	e7c4      	b.n	800b47a <uxr_deserialize_ObjectVariant+0xb6>
 800b4f0:	f106 0308 	add.w	r3, r6, #8
 800b4f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4f8:	f106 010c 	add.w	r1, r6, #12
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f002 fcf7 	bl	800def0 <ucdr_deserialize_sequence_uint8_t>
 800b502:	4604      	mov	r4, r0
 800b504:	e7b9      	b.n	800b47a <uxr_deserialize_ObjectVariant+0xb6>
 800b506:	bf00      	nop

0800b508 <uxr_deserialize_BaseObjectRequest>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	2202      	movs	r2, #2
 800b50c:	4605      	mov	r5, r0
 800b50e:	460e      	mov	r6, r1
 800b510:	f002 fc4c 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b514:	2202      	movs	r2, #2
 800b516:	4604      	mov	r4, r0
 800b518:	18b1      	adds	r1, r6, r2
 800b51a:	4628      	mov	r0, r5
 800b51c:	f002 fc46 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b520:	4020      	ands	r0, r4
 800b522:	b2c0      	uxtb	r0, r0
 800b524:	bd70      	pop	{r4, r5, r6, pc}
 800b526:	bf00      	nop

0800b528 <uxr_serialize_ActivityInfoVariant>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	460d      	mov	r5, r1
 800b52e:	7809      	ldrb	r1, [r1, #0]
 800b530:	4607      	mov	r7, r0
 800b532:	f7fb fe53 	bl	80071dc <ucdr_serialize_uint8_t>
 800b536:	4681      	mov	r9, r0
 800b538:	b138      	cbz	r0, 800b54a <uxr_serialize_ActivityInfoVariant+0x22>
 800b53a:	782b      	ldrb	r3, [r5, #0]
 800b53c:	2b06      	cmp	r3, #6
 800b53e:	f000 8082 	beq.w	800b646 <uxr_serialize_ActivityInfoVariant+0x11e>
 800b542:	2b0d      	cmp	r3, #13
 800b544:	d016      	beq.n	800b574 <uxr_serialize_ActivityInfoVariant+0x4c>
 800b546:	2b05      	cmp	r3, #5
 800b548:	d002      	beq.n	800b550 <uxr_serialize_ActivityInfoVariant+0x28>
 800b54a:	4648      	mov	r0, r9
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b554:	4638      	mov	r0, r7
 800b556:	f7fc fb7d 	bl	8007c54 <ucdr_serialize_int16_t>
 800b55a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b55e:	4681      	mov	r9, r0
 800b560:	4638      	mov	r0, r7
 800b562:	f7fc faa7 	bl	8007ab4 <ucdr_serialize_uint64_t>
 800b566:	ea09 0000 	and.w	r0, r9, r0
 800b56a:	fa5f f980 	uxtb.w	r9, r0
 800b56e:	4648      	mov	r0, r9
 800b570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b574:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b578:	4638      	mov	r0, r7
 800b57a:	f7fc fb6b 	bl	8007c54 <ucdr_serialize_int16_t>
 800b57e:	68e9      	ldr	r1, [r5, #12]
 800b580:	4681      	mov	r9, r0
 800b582:	4638      	mov	r0, r7
 800b584:	f7fc f840 	bl	8007608 <ucdr_serialize_uint32_t>
 800b588:	68eb      	ldr	r3, [r5, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0eb      	beq.n	800b566 <uxr_serialize_ActivityInfoVariant+0x3e>
 800b58e:	b320      	cbz	r0, 800b5da <uxr_serialize_ActivityInfoVariant+0xb2>
 800b590:	f105 080c 	add.w	r8, r5, #12
 800b594:	2600      	movs	r6, #0
 800b596:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800b59a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800b59e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7fb fe1a 	bl	80071dc <ucdr_serialize_uint8_t>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d053      	beq.n	800b654 <uxr_serialize_ActivityInfoVariant+0x12c>
 800b5ac:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800b5b0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800b5b4:	0074      	lsls	r4, r6, #1
 800b5b6:	00c9      	lsls	r1, r1, #3
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d854      	bhi.n	800b666 <uxr_serialize_ActivityInfoVariant+0x13e>
 800b5bc:	e8df f003 	tbb	[pc, r3]
 800b5c0:	02102132 	.word	0x02102132
 800b5c4:	4441      	add	r1, r8
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	6889      	ldr	r1, [r1, #8]
 800b5ca:	f002 fcab 	bl	800df24 <ucdr_serialize_string>
 800b5ce:	68ea      	ldr	r2, [r5, #12]
 800b5d0:	3601      	adds	r6, #1
 800b5d2:	4296      	cmp	r6, r2
 800b5d4:	d242      	bcs.n	800b65c <uxr_serialize_ActivityInfoVariant+0x134>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1dd      	bne.n	800b596 <uxr_serialize_ActivityInfoVariant+0x6e>
 800b5da:	f04f 0900 	mov.w	r9, #0
 800b5de:	e7b4      	b.n	800b54a <uxr_serialize_ActivityInfoVariant+0x22>
 800b5e0:	3108      	adds	r1, #8
 800b5e2:	4441      	add	r1, r8
 800b5e4:	2210      	movs	r2, #16
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f002 fb7c 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b5ec:	4434      	add	r4, r6
 800b5ee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f7fc f806 	bl	8007608 <ucdr_serialize_uint32_t>
 800b5fc:	4020      	ands	r0, r4
 800b5fe:	b2c0      	uxtb	r0, r0
 800b600:	e7e5      	b.n	800b5ce <uxr_serialize_ActivityInfoVariant+0xa6>
 800b602:	3108      	adds	r1, #8
 800b604:	4441      	add	r1, r8
 800b606:	2204      	movs	r2, #4
 800b608:	4638      	mov	r0, r7
 800b60a:	f002 fb6b 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b60e:	4434      	add	r4, r6
 800b610:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b614:	4604      	mov	r4, r0
 800b616:	8b19      	ldrh	r1, [r3, #24]
 800b618:	4638      	mov	r0, r7
 800b61a:	f7fb fe0b 	bl	8007234 <ucdr_serialize_uint16_t>
 800b61e:	4020      	ands	r0, r4
 800b620:	b2c0      	uxtb	r0, r0
 800b622:	e7d4      	b.n	800b5ce <uxr_serialize_ActivityInfoVariant+0xa6>
 800b624:	3108      	adds	r1, #8
 800b626:	4441      	add	r1, r8
 800b628:	2202      	movs	r2, #2
 800b62a:	4638      	mov	r0, r7
 800b62c:	f002 fb5a 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b630:	4434      	add	r4, r6
 800b632:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800b636:	4604      	mov	r4, r0
 800b638:	7d99      	ldrb	r1, [r3, #22]
 800b63a:	4638      	mov	r0, r7
 800b63c:	f7fb fdce 	bl	80071dc <ucdr_serialize_uint8_t>
 800b640:	4020      	ands	r0, r4
 800b642:	b2c0      	uxtb	r0, r0
 800b644:	e7c3      	b.n	800b5ce <uxr_serialize_ActivityInfoVariant+0xa6>
 800b646:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800b64a:	4638      	mov	r0, r7
 800b64c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	f7fc bb00 	b.w	8007c54 <ucdr_serialize_int16_t>
 800b654:	68ea      	ldr	r2, [r5, #12]
 800b656:	3601      	adds	r6, #1
 800b658:	42b2      	cmp	r2, r6
 800b65a:	d8be      	bhi.n	800b5da <uxr_serialize_ActivityInfoVariant+0xb2>
 800b65c:	ea09 0900 	and.w	r9, r9, r0
 800b660:	fa5f f989 	uxtb.w	r9, r9
 800b664:	e771      	b.n	800b54a <uxr_serialize_ActivityInfoVariant+0x22>
 800b666:	68eb      	ldr	r3, [r5, #12]
 800b668:	3601      	adds	r6, #1
 800b66a:	429e      	cmp	r6, r3
 800b66c:	f10a 0a18 	add.w	sl, sl, #24
 800b670:	d395      	bcc.n	800b59e <uxr_serialize_ActivityInfoVariant+0x76>
 800b672:	e76a      	b.n	800b54a <uxr_serialize_ActivityInfoVariant+0x22>

0800b674 <uxr_deserialize_BaseObjectReply>:
 800b674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b678:	2202      	movs	r2, #2
 800b67a:	4606      	mov	r6, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	f002 fb95 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b682:	2202      	movs	r2, #2
 800b684:	18b9      	adds	r1, r7, r2
 800b686:	4605      	mov	r5, r0
 800b688:	4630      	mov	r0, r6
 800b68a:	f002 fb8f 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b68e:	1d39      	adds	r1, r7, #4
 800b690:	4680      	mov	r8, r0
 800b692:	4630      	mov	r0, r6
 800b694:	f7fb fdb8 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b698:	1d79      	adds	r1, r7, #5
 800b69a:	4604      	mov	r4, r0
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7fb fdb3 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b6a2:	ea05 0508 	and.w	r5, r5, r8
 800b6a6:	402c      	ands	r4, r5
 800b6a8:	4020      	ands	r0, r4
 800b6aa:	b2c0      	uxtb	r0, r0
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6b0 <uxr_serialize_ReadSpecification>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	460e      	mov	r6, r1
 800b6b6:	7809      	ldrb	r1, [r1, #0]
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	f7fb fd8f 	bl	80071dc <ucdr_serialize_uint8_t>
 800b6be:	7871      	ldrb	r1, [r6, #1]
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	f7fb fd8a 	bl	80071dc <ucdr_serialize_uint8_t>
 800b6c8:	78b1      	ldrb	r1, [r6, #2]
 800b6ca:	4004      	ands	r4, r0
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7fb fd57 	bl	8007180 <ucdr_serialize_bool>
 800b6d2:	78b3      	ldrb	r3, [r6, #2]
 800b6d4:	b2e4      	uxtb	r4, r4
 800b6d6:	4004      	ands	r4, r0
 800b6d8:	b94b      	cbnz	r3, 800b6ee <uxr_serialize_ReadSpecification+0x3e>
 800b6da:	7a31      	ldrb	r1, [r6, #8]
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7fb fd4f 	bl	8007180 <ucdr_serialize_bool>
 800b6e2:	7a33      	ldrb	r3, [r6, #8]
 800b6e4:	4004      	ands	r4, r0
 800b6e6:	b943      	cbnz	r3, 800b6fa <uxr_serialize_ReadSpecification+0x4a>
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ee:	6871      	ldr	r1, [r6, #4]
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	f002 fc17 	bl	800df24 <ucdr_serialize_string>
 800b6f6:	4004      	ands	r4, r0
 800b6f8:	e7ef      	b.n	800b6da <uxr_serialize_ReadSpecification+0x2a>
 800b6fa:	8971      	ldrh	r1, [r6, #10]
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	f7fb fd99 	bl	8007234 <ucdr_serialize_uint16_t>
 800b702:	89b1      	ldrh	r1, [r6, #12]
 800b704:	4605      	mov	r5, r0
 800b706:	4638      	mov	r0, r7
 800b708:	f7fb fd94 	bl	8007234 <ucdr_serialize_uint16_t>
 800b70c:	89f1      	ldrh	r1, [r6, #14]
 800b70e:	4005      	ands	r5, r0
 800b710:	4638      	mov	r0, r7
 800b712:	f7fb fd8f 	bl	8007234 <ucdr_serialize_uint16_t>
 800b716:	8a31      	ldrh	r1, [r6, #16]
 800b718:	4680      	mov	r8, r0
 800b71a:	4638      	mov	r0, r7
 800b71c:	f7fb fd8a 	bl	8007234 <ucdr_serialize_uint16_t>
 800b720:	b2ed      	uxtb	r5, r5
 800b722:	4025      	ands	r5, r4
 800b724:	ea08 0505 	and.w	r5, r8, r5
 800b728:	ea00 0405 	and.w	r4, r0, r5
 800b72c:	4620      	mov	r0, r4
 800b72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b732:	bf00      	nop

0800b734 <uxr_serialize_CREATE_CLIENT_Payload>:
 800b734:	f7ff bb02 	b.w	800ad3c <uxr_serialize_CLIENT_Representation>

0800b738 <uxr_serialize_CREATE_Payload>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	2202      	movs	r2, #2
 800b73c:	4607      	mov	r7, r0
 800b73e:	460e      	mov	r6, r1
 800b740:	f002 fad0 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b744:	2202      	movs	r2, #2
 800b746:	18b1      	adds	r1, r6, r2
 800b748:	4605      	mov	r5, r0
 800b74a:	4638      	mov	r0, r7
 800b74c:	f002 faca 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b750:	7931      	ldrb	r1, [r6, #4]
 800b752:	4604      	mov	r4, r0
 800b754:	4638      	mov	r0, r7
 800b756:	f7fb fd41 	bl	80071dc <ucdr_serialize_uint8_t>
 800b75a:	b170      	cbz	r0, 800b77a <uxr_serialize_CREATE_Payload+0x42>
 800b75c:	7933      	ldrb	r3, [r6, #4]
 800b75e:	402c      	ands	r4, r5
 800b760:	3b01      	subs	r3, #1
 800b762:	b2e4      	uxtb	r4, r4
 800b764:	2b0d      	cmp	r3, #13
 800b766:	d809      	bhi.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b768:	e8df f003 	tbb	[pc, r3]
 800b76c:	23230a4c 	.word	0x23230a4c
 800b770:	0a0a0a0a 	.word	0x0a0a0a0a
 800b774:	12121208 	.word	0x12121208
 800b778:	3e45      	.short	0x3e45
 800b77a:	2400      	movs	r4, #0
 800b77c:	4620      	mov	r0, r4
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b780:	f106 0108 	add.w	r1, r6, #8
 800b784:	4638      	mov	r0, r7
 800b786:	f7ff fbdf 	bl	800af48 <uxr_serialize_DATAWRITER_Representation>
 800b78a:	4004      	ands	r4, r0
 800b78c:	4620      	mov	r0, r4
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b790:	7a31      	ldrb	r1, [r6, #8]
 800b792:	4638      	mov	r0, r7
 800b794:	f7fb fd22 	bl	80071dc <ucdr_serialize_uint8_t>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d0ee      	beq.n	800b77a <uxr_serialize_CREATE_Payload+0x42>
 800b79c:	7a33      	ldrb	r3, [r6, #8]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d001      	beq.n	800b7a6 <uxr_serialize_CREATE_Payload+0x6e>
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d1ea      	bne.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b7a6:	68f1      	ldr	r1, [r6, #12]
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f002 fbbb 	bl	800df24 <ucdr_serialize_string>
 800b7ae:	4004      	ands	r4, r0
 800b7b0:	e7e4      	b.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b7b2:	7a31      	ldrb	r1, [r6, #8]
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7fb fd11 	bl	80071dc <ucdr_serialize_uint8_t>
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	b158      	cbz	r0, 800b7d6 <uxr_serialize_CREATE_Payload+0x9e>
 800b7be:	7a33      	ldrb	r3, [r6, #8]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d034      	beq.n	800b82e <uxr_serialize_CREATE_Payload+0xf6>
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d106      	bne.n	800b7d6 <uxr_serialize_CREATE_Payload+0x9e>
 800b7c8:	68f2      	ldr	r2, [r6, #12]
 800b7ca:	f106 0110 	add.w	r1, r6, #16
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f002 fb7c 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f002 fa81 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b7e2:	4028      	ands	r0, r5
 800b7e4:	4004      	ands	r4, r0
 800b7e6:	e7c9      	b.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b7e8:	f106 0108 	add.w	r1, r6, #8
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff faa5 	bl	800ad3c <uxr_serialize_CLIENT_Representation>
 800b7f2:	4004      	ands	r4, r0
 800b7f4:	e7c2      	b.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b7f6:	f106 0108 	add.w	r1, r6, #8
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	f7ff fb5a 	bl	800aeb4 <uxr_serialize_AGENT_Representation>
 800b800:	4004      	ands	r4, r0
 800b802:	e7bb      	b.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b804:	7a31      	ldrb	r1, [r6, #8]
 800b806:	4638      	mov	r0, r7
 800b808:	f7fb fce8 	bl	80071dc <ucdr_serialize_uint8_t>
 800b80c:	4605      	mov	r5, r0
 800b80e:	b130      	cbz	r0, 800b81e <uxr_serialize_CREATE_Payload+0xe6>
 800b810:	7a33      	ldrb	r3, [r6, #8]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d011      	beq.n	800b83a <uxr_serialize_CREATE_Payload+0x102>
 800b816:	2b03      	cmp	r3, #3
 800b818:	d015      	beq.n	800b846 <uxr_serialize_CREATE_Payload+0x10e>
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d00d      	beq.n	800b83a <uxr_serialize_CREATE_Payload+0x102>
 800b81e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800b822:	4638      	mov	r0, r7
 800b824:	f7fc fa16 	bl	8007c54 <ucdr_serialize_int16_t>
 800b828:	4028      	ands	r0, r5
 800b82a:	4004      	ands	r4, r0
 800b82c:	e7a6      	b.n	800b77c <uxr_serialize_CREATE_Payload+0x44>
 800b82e:	68f1      	ldr	r1, [r6, #12]
 800b830:	4638      	mov	r0, r7
 800b832:	f002 fb77 	bl	800df24 <ucdr_serialize_string>
 800b836:	4605      	mov	r5, r0
 800b838:	e7cd      	b.n	800b7d6 <uxr_serialize_CREATE_Payload+0x9e>
 800b83a:	68f1      	ldr	r1, [r6, #12]
 800b83c:	4638      	mov	r0, r7
 800b83e:	f002 fb71 	bl	800df24 <ucdr_serialize_string>
 800b842:	4605      	mov	r5, r0
 800b844:	e7eb      	b.n	800b81e <uxr_serialize_CREATE_Payload+0xe6>
 800b846:	68f2      	ldr	r2, [r6, #12]
 800b848:	f106 0110 	add.w	r1, r6, #16
 800b84c:	4638      	mov	r0, r7
 800b84e:	f002 fb3d 	bl	800decc <ucdr_serialize_sequence_uint8_t>
 800b852:	4605      	mov	r5, r0
 800b854:	e7e3      	b.n	800b81e <uxr_serialize_CREATE_Payload+0xe6>
 800b856:	bf00      	nop

0800b858 <uxr_deserialize_GET_INFO_Payload>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	2202      	movs	r2, #2
 800b85c:	4605      	mov	r5, r0
 800b85e:	460e      	mov	r6, r1
 800b860:	f002 faa4 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b864:	2202      	movs	r2, #2
 800b866:	18b1      	adds	r1, r6, r2
 800b868:	4604      	mov	r4, r0
 800b86a:	4628      	mov	r0, r5
 800b86c:	f002 fa9e 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b870:	1d31      	adds	r1, r6, #4
 800b872:	4004      	ands	r4, r0
 800b874:	4628      	mov	r0, r5
 800b876:	f7fb fff7 	bl	8007868 <ucdr_deserialize_uint32_t>
 800b87a:	b2e4      	uxtb	r4, r4
 800b87c:	4020      	ands	r0, r4
 800b87e:	bd70      	pop	{r4, r5, r6, pc}

0800b880 <uxr_serialize_DELETE_Payload>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	2202      	movs	r2, #2
 800b884:	4605      	mov	r5, r0
 800b886:	460e      	mov	r6, r1
 800b888:	f002 fa2c 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b88c:	2202      	movs	r2, #2
 800b88e:	4604      	mov	r4, r0
 800b890:	18b1      	adds	r1, r6, r2
 800b892:	4628      	mov	r0, r5
 800b894:	f002 fa26 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b898:	4020      	ands	r0, r4
 800b89a:	b2c0      	uxtb	r0, r0
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	bf00      	nop

0800b8a0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800b8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	f7fb fcae 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b8ac:	1c71      	adds	r1, r6, #1
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7fb fca9 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	18b1      	adds	r1, r6, r2
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f002 fa75 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b8c2:	f106 0108 	add.w	r1, r6, #8
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f002 fa6e 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b8d0:	ea04 0308 	and.w	r3, r4, r8
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	ea03 0407 	and.w	r4, r3, r7
 800b8da:	2202      	movs	r2, #2
 800b8dc:	4607      	mov	r7, r0
 800b8de:	f106 010a 	add.w	r1, r6, #10
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f002 fa62 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b8e8:	f106 010c 	add.w	r1, r6, #12
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	461d      	mov	r5, r3
 800b8f2:	f7fb fc5b 	bl	80071ac <ucdr_deserialize_bool>
 800b8f6:	403c      	ands	r4, r7
 800b8f8:	4025      	ands	r5, r4
 800b8fa:	4028      	ands	r0, r5
 800b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b900 <uxr_deserialize_STATUS_Payload>:
 800b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b904:	2202      	movs	r2, #2
 800b906:	4606      	mov	r6, r0
 800b908:	460f      	mov	r7, r1
 800b90a:	f002 fa4f 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b90e:	2202      	movs	r2, #2
 800b910:	18b9      	adds	r1, r7, r2
 800b912:	4605      	mov	r5, r0
 800b914:	4630      	mov	r0, r6
 800b916:	f002 fa49 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800b91a:	1d39      	adds	r1, r7, #4
 800b91c:	4680      	mov	r8, r0
 800b91e:	4630      	mov	r0, r6
 800b920:	f7fb fc72 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b924:	1d79      	adds	r1, r7, #5
 800b926:	4604      	mov	r4, r0
 800b928:	4630      	mov	r0, r6
 800b92a:	f7fb fc6d 	bl	8007208 <ucdr_deserialize_uint8_t>
 800b92e:	ea05 0508 	and.w	r5, r5, r8
 800b932:	402c      	ands	r4, r5
 800b934:	4020      	ands	r0, r4
 800b936:	b2c0      	uxtb	r0, r0
 800b938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b93c <uxr_serialize_INFO_Payload>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	2202      	movs	r2, #2
 800b942:	460c      	mov	r4, r1
 800b944:	4605      	mov	r5, r0
 800b946:	f002 f9cd 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b94a:	2202      	movs	r2, #2
 800b94c:	18a1      	adds	r1, r4, r2
 800b94e:	4680      	mov	r8, r0
 800b950:	4628      	mov	r0, r5
 800b952:	f002 f9c7 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b956:	7921      	ldrb	r1, [r4, #4]
 800b958:	4607      	mov	r7, r0
 800b95a:	4628      	mov	r0, r5
 800b95c:	f7fb fc3e 	bl	80071dc <ucdr_serialize_uint8_t>
 800b960:	7961      	ldrb	r1, [r4, #5]
 800b962:	4606      	mov	r6, r0
 800b964:	4628      	mov	r0, r5
 800b966:	f7fb fc39 	bl	80071dc <ucdr_serialize_uint8_t>
 800b96a:	ea08 0807 	and.w	r8, r8, r7
 800b96e:	ea06 0608 	and.w	r6, r6, r8
 800b972:	4006      	ands	r6, r0
 800b974:	7a21      	ldrb	r1, [r4, #8]
 800b976:	4628      	mov	r0, r5
 800b978:	f7fb fc02 	bl	8007180 <ucdr_serialize_bool>
 800b97c:	7a23      	ldrb	r3, [r4, #8]
 800b97e:	b2f7      	uxtb	r7, r6
 800b980:	4606      	mov	r6, r0
 800b982:	b96b      	cbnz	r3, 800b9a0 <uxr_serialize_INFO_Payload+0x64>
 800b984:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800b988:	4628      	mov	r0, r5
 800b98a:	f7fb fbf9 	bl	8007180 <ucdr_serialize_bool>
 800b98e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800b992:	4030      	ands	r0, r6
 800b994:	b2c6      	uxtb	r6, r0
 800b996:	b983      	cbnz	r3, 800b9ba <uxr_serialize_INFO_Payload+0x7e>
 800b998:	ea06 0007 	and.w	r0, r6, r7
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	7b21      	ldrb	r1, [r4, #12]
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f7fb fc1a 	bl	80071dc <ucdr_serialize_uint8_t>
 800b9a8:	b188      	cbz	r0, 800b9ce <uxr_serialize_INFO_Payload+0x92>
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f7ff faf2 	bl	800af98 <uxr_serialize_ObjectVariant.part.0>
 800b9b4:	4030      	ands	r0, r6
 800b9b6:	b2c6      	uxtb	r6, r0
 800b9b8:	e7e4      	b.n	800b984 <uxr_serialize_INFO_Payload+0x48>
 800b9ba:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f7ff fdb2 	bl	800b528 <uxr_serialize_ActivityInfoVariant>
 800b9c4:	4006      	ands	r6, r0
 800b9c6:	ea06 0007 	and.w	r0, r6, r7
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	e7d8      	b.n	800b984 <uxr_serialize_INFO_Payload+0x48>
 800b9d2:	bf00      	nop

0800b9d4 <uxr_serialize_READ_DATA_Payload>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	4605      	mov	r5, r0
 800b9da:	460e      	mov	r6, r1
 800b9dc:	f002 f982 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	18b1      	adds	r1, r6, r2
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f002 f97c 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800b9ec:	1d31      	adds	r1, r6, #4
 800b9ee:	4004      	ands	r4, r0
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f7ff fe5d 	bl	800b6b0 <uxr_serialize_ReadSpecification>
 800b9f6:	b2e4      	uxtb	r4, r4
 800b9f8:	4020      	ands	r0, r4
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}

0800b9fc <uxr_serialize_WRITE_DATA_Payload_Data>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	2202      	movs	r2, #2
 800ba00:	4605      	mov	r5, r0
 800ba02:	460e      	mov	r6, r1
 800ba04:	f002 f96e 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ba08:	2202      	movs	r2, #2
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	18b1      	adds	r1, r6, r2
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f002 f968 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ba14:	4020      	ands	r0, r4
 800ba16:	b2c0      	uxtb	r0, r0
 800ba18:	bd70      	pop	{r4, r5, r6, pc}
 800ba1a:	bf00      	nop

0800ba1c <uxr_serialize_ACKNACK_Payload>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	460c      	mov	r4, r1
 800ba20:	460e      	mov	r6, r1
 800ba22:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ba26:	4605      	mov	r5, r0
 800ba28:	f7fb fc04 	bl	8007234 <ucdr_serialize_uint16_t>
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4604      	mov	r4, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f002 f956 	bl	800dce4 <ucdr_serialize_array_uint8_t>
 800ba38:	7931      	ldrb	r1, [r6, #4]
 800ba3a:	4004      	ands	r4, r0
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f7fb fbcd 	bl	80071dc <ucdr_serialize_uint8_t>
 800ba42:	b2e4      	uxtb	r4, r4
 800ba44:	4020      	ands	r0, r4
 800ba46:	bd70      	pop	{r4, r5, r6, pc}

0800ba48 <uxr_deserialize_ACKNACK_Payload>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	460e      	mov	r6, r1
 800ba4e:	f7fb fcf1 	bl	8007434 <ucdr_deserialize_uint16_t>
 800ba52:	2202      	movs	r2, #2
 800ba54:	18b1      	adds	r1, r6, r2
 800ba56:	4604      	mov	r4, r0
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f002 f9a7 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800ba5e:	1d31      	adds	r1, r6, #4
 800ba60:	4004      	ands	r4, r0
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7fb fbd0 	bl	8007208 <ucdr_deserialize_uint8_t>
 800ba68:	b2e4      	uxtb	r4, r4
 800ba6a:	4020      	ands	r0, r4
 800ba6c:	bd70      	pop	{r4, r5, r6, pc}
 800ba6e:	bf00      	nop

0800ba70 <uxr_serialize_HEARTBEAT_Payload>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	460d      	mov	r5, r1
 800ba74:	8809      	ldrh	r1, [r1, #0]
 800ba76:	4606      	mov	r6, r0
 800ba78:	f7fb fbdc 	bl	8007234 <ucdr_serialize_uint16_t>
 800ba7c:	8869      	ldrh	r1, [r5, #2]
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7fb fbd7 	bl	8007234 <ucdr_serialize_uint16_t>
 800ba86:	7929      	ldrb	r1, [r5, #4]
 800ba88:	4004      	ands	r4, r0
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7fb fba6 	bl	80071dc <ucdr_serialize_uint8_t>
 800ba90:	b2e4      	uxtb	r4, r4
 800ba92:	4020      	ands	r0, r4
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	bf00      	nop

0800ba98 <uxr_deserialize_HEARTBEAT_Payload>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	460e      	mov	r6, r1
 800ba9e:	f7fb fcc9 	bl	8007434 <ucdr_deserialize_uint16_t>
 800baa2:	1cb1      	adds	r1, r6, #2
 800baa4:	4604      	mov	r4, r0
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7fb fcc4 	bl	8007434 <ucdr_deserialize_uint16_t>
 800baac:	1d31      	adds	r1, r6, #4
 800baae:	4004      	ands	r4, r0
 800bab0:	4628      	mov	r0, r5
 800bab2:	f7fb fba9 	bl	8007208 <ucdr_deserialize_uint8_t>
 800bab6:	b2e4      	uxtb	r4, r4
 800bab8:	4020      	ands	r0, r4
 800baba:	bd70      	pop	{r4, r5, r6, pc}

0800babc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	4605      	mov	r5, r0
 800bac2:	460e      	mov	r6, r1
 800bac4:	f7fc f9ba 	bl	8007e3c <ucdr_deserialize_int32_t>
 800bac8:	1d31      	adds	r1, r6, #4
 800baca:	4607      	mov	r7, r0
 800bacc:	4628      	mov	r0, r5
 800bace:	f7fb fecb 	bl	8007868 <ucdr_deserialize_uint32_t>
 800bad2:	f106 0108 	add.w	r1, r6, #8
 800bad6:	4680      	mov	r8, r0
 800bad8:	4628      	mov	r0, r5
 800bada:	f7fc f9af 	bl	8007e3c <ucdr_deserialize_int32_t>
 800bade:	f106 010c 	add.w	r1, r6, #12
 800bae2:	4604      	mov	r4, r0
 800bae4:	4628      	mov	r0, r5
 800bae6:	f7fb febf 	bl	8007868 <ucdr_deserialize_uint32_t>
 800baea:	ea07 0708 	and.w	r7, r7, r8
 800baee:	403c      	ands	r4, r7
 800baf0:	f106 0110 	add.w	r1, r6, #16
 800baf4:	4004      	ands	r4, r0
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7fc f9a0 	bl	8007e3c <ucdr_deserialize_int32_t>
 800bafc:	f106 0114 	add.w	r1, r6, #20
 800bb00:	4607      	mov	r7, r0
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7fb feb0 	bl	8007868 <ucdr_deserialize_uint32_t>
 800bb08:	b2e4      	uxtb	r4, r4
 800bb0a:	403c      	ands	r4, r7
 800bb0c:	4020      	ands	r0, r4
 800bb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb12:	bf00      	nop

0800bb14 <uxr_deserialize_SampleIdentity>:
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	220c      	movs	r2, #12
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	f002 f945 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800bb22:	2203      	movs	r2, #3
 800bb24:	f105 010c 	add.w	r1, r5, #12
 800bb28:	4607      	mov	r7, r0
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f002 f93e 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800bb30:	f105 010f 	add.w	r1, r5, #15
 800bb34:	4680      	mov	r8, r0
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7fb fb66 	bl	8007208 <ucdr_deserialize_uint8_t>
 800bb3c:	f105 0110 	add.w	r1, r5, #16
 800bb40:	4606      	mov	r6, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	f7fc f97a 	bl	8007e3c <ucdr_deserialize_int32_t>
 800bb48:	f105 0114 	add.w	r1, r5, #20
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	4620      	mov	r0, r4
 800bb50:	ea07 0708 	and.w	r7, r7, r8
 800bb54:	461c      	mov	r4, r3
 800bb56:	f7fb fe87 	bl	8007868 <ucdr_deserialize_uint32_t>
 800bb5a:	403e      	ands	r6, r7
 800bb5c:	4034      	ands	r4, r6
 800bb5e:	4020      	ands	r0, r4
 800bb60:	b2c0      	uxtb	r0, r0
 800bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb66:	bf00      	nop

0800bb68 <rcl_convert_rmw_ret_to_rcl_ret>:
 800bb68:	280b      	cmp	r0, #11
 800bb6a:	dc0d      	bgt.n	800bb88 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	db09      	blt.n	800bb84 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800bb70:	280b      	cmp	r0, #11
 800bb72:	d807      	bhi.n	800bb84 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800bb74:	e8df f000 	tbb	[pc, r0]
 800bb78:	07060607 	.word	0x07060607
 800bb7c:	06060606 	.word	0x06060606
 800bb80:	07070606 	.word	0x07070606
 800bb84:	2001      	movs	r0, #1
 800bb86:	4770      	bx	lr
 800bb88:	28cb      	cmp	r0, #203	@ 0xcb
 800bb8a:	bf18      	it	ne
 800bb8c:	2001      	movne	r0, #1
 800bb8e:	4770      	bx	lr

0800bb90 <rcl_get_zero_initialized_context>:
 800bb90:	4a03      	ldr	r2, [pc, #12]	@ (800bba0 <rcl_get_zero_initialized_context+0x10>)
 800bb92:	4603      	mov	r3, r0
 800bb94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb98:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	4770      	bx	lr
 800bba0:	08011a10 	.word	0x08011a10

0800bba4 <rcl_context_is_valid>:
 800bba4:	b118      	cbz	r0, 800bbae <rcl_context_is_valid+0xa>
 800bba6:	6840      	ldr	r0, [r0, #4]
 800bba8:	3800      	subs	r0, #0
 800bbaa:	bf18      	it	ne
 800bbac:	2001      	movne	r0, #1
 800bbae:	4770      	bx	lr

0800bbb0 <__cleanup_context>:
 800bbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	6800      	ldr	r0, [r0, #0]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	6073      	str	r3, [r6, #4]
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d049      	beq.n	800bc54 <__cleanup_context+0xa4>
 800bbc0:	6947      	ldr	r7, [r0, #20]
 800bbc2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bbc6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800bbca:	b137      	cbz	r7, 800bbda <__cleanup_context+0x2a>
 800bbcc:	3014      	adds	r0, #20
 800bbce:	f000 f9bb 	bl	800bf48 <rcl_init_options_fini>
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d144      	bne.n	800bc62 <__cleanup_context+0xb2>
 800bbd8:	6830      	ldr	r0, [r6, #0]
 800bbda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bbdc:	b143      	cbz	r3, 800bbf0 <__cleanup_context+0x40>
 800bbde:	3028      	adds	r0, #40	@ 0x28
 800bbe0:	f001 fd9a 	bl	800d718 <rmw_context_fini>
 800bbe4:	b118      	cbz	r0, 800bbee <__cleanup_context+0x3e>
 800bbe6:	2f00      	cmp	r7, #0
 800bbe8:	d03e      	beq.n	800bc68 <__cleanup_context+0xb8>
 800bbea:	f7fc fe21 	bl	8008830 <rcutils_reset_error>
 800bbee:	6830      	ldr	r0, [r6, #0]
 800bbf0:	6a03      	ldr	r3, [r0, #32]
 800bbf2:	b1db      	cbz	r3, 800bc2c <__cleanup_context+0x7c>
 800bbf4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800bbf8:	2a01      	cmp	r2, #1
 800bbfa:	f17c 0100 	sbcs.w	r1, ip, #0
 800bbfe:	db11      	blt.n	800bc24 <__cleanup_context+0x74>
 800bc00:	2400      	movs	r4, #0
 800bc02:	4625      	mov	r5, r4
 800bc04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bc08:	4649      	mov	r1, r9
 800bc0a:	b1b8      	cbz	r0, 800bc3c <__cleanup_context+0x8c>
 800bc0c:	47c0      	blx	r8
 800bc0e:	6833      	ldr	r3, [r6, #0]
 800bc10:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800bc14:	3401      	adds	r4, #1
 800bc16:	f145 0500 	adc.w	r5, r5, #0
 800bc1a:	4294      	cmp	r4, r2
 800bc1c:	eb75 010c 	sbcs.w	r1, r5, ip
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	dbef      	blt.n	800bc04 <__cleanup_context+0x54>
 800bc24:	4618      	mov	r0, r3
 800bc26:	4649      	mov	r1, r9
 800bc28:	47c0      	blx	r8
 800bc2a:	6830      	ldr	r0, [r6, #0]
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	47c0      	blx	r8
 800bc30:	2300      	movs	r3, #0
 800bc32:	e9c6 3300 	strd	r3, r3, [r6]
 800bc36:	4638      	mov	r0, r7
 800bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3c:	3401      	adds	r4, #1
 800bc3e:	f145 0500 	adc.w	r5, r5, #0
 800bc42:	4294      	cmp	r4, r2
 800bc44:	eb75 010c 	sbcs.w	r1, r5, ip
 800bc48:	dbdc      	blt.n	800bc04 <__cleanup_context+0x54>
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	47c0      	blx	r8
 800bc50:	6830      	ldr	r0, [r6, #0]
 800bc52:	e7eb      	b.n	800bc2c <__cleanup_context+0x7c>
 800bc54:	4607      	mov	r7, r0
 800bc56:	2300      	movs	r3, #0
 800bc58:	e9c6 3300 	strd	r3, r3, [r6]
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc62:	f7fc fde5 	bl	8008830 <rcutils_reset_error>
 800bc66:	e7b7      	b.n	800bbd8 <__cleanup_context+0x28>
 800bc68:	f7ff ff7e 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	e7bc      	b.n	800bbea <__cleanup_context+0x3a>

0800bc70 <rcl_init>:
 800bc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc74:	1e05      	subs	r5, r0, #0
 800bc76:	b09e      	sub	sp, #120	@ 0x78
 800bc78:	460e      	mov	r6, r1
 800bc7a:	4690      	mov	r8, r2
 800bc7c:	461f      	mov	r7, r3
 800bc7e:	f340 809c 	ble.w	800bdba <rcl_init+0x14a>
 800bc82:	2900      	cmp	r1, #0
 800bc84:	f000 809c 	beq.w	800bdc0 <rcl_init+0x150>
 800bc88:	f1a1 0e04 	sub.w	lr, r1, #4
 800bc8c:	f04f 0c00 	mov.w	ip, #0
 800bc90:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800bc94:	f10c 0c01 	add.w	ip, ip, #1
 800bc98:	2c00      	cmp	r4, #0
 800bc9a:	f000 8091 	beq.w	800bdc0 <rcl_init+0x150>
 800bc9e:	4565      	cmp	r5, ip
 800bca0:	d1f6      	bne.n	800bc90 <rcl_init+0x20>
 800bca2:	f1b8 0f00 	cmp.w	r8, #0
 800bca6:	f000 808b 	beq.w	800bdc0 <rcl_init+0x150>
 800bcaa:	f8d8 4000 	ldr.w	r4, [r8]
 800bcae:	2c00      	cmp	r4, #0
 800bcb0:	f000 8086 	beq.w	800bdc0 <rcl_init+0x150>
 800bcb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcb6:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800bcba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	f8cc 3000 	str.w	r3, [ip]
 800bcc4:	a819      	add	r0, sp, #100	@ 0x64
 800bcc6:	f7fc fd8d 	bl	80087e4 <rcutils_allocator_is_valid>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d078      	beq.n	800bdc0 <rcl_init+0x150>
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	d076      	beq.n	800bdc0 <rcl_init+0x150>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d178      	bne.n	800bdca <rcl_init+0x15a>
 800bcd8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800bcdc:	2178      	movs	r1, #120	@ 0x78
 800bcde:	2001      	movs	r0, #1
 800bce0:	4798      	blx	r3
 800bce2:	4604      	mov	r4, r0
 800bce4:	6038      	str	r0, [r7, #0]
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f000 80b6 	beq.w	800be58 <rcl_init+0x1e8>
 800bcec:	a802      	add	r0, sp, #8
 800bcee:	f001 f957 	bl	800cfa0 <rmw_get_zero_initialized_context>
 800bcf2:	a902      	add	r1, sp, #8
 800bcf4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bcf8:	2250      	movs	r2, #80	@ 0x50
 800bcfa:	ac19      	add	r4, sp, #100	@ 0x64
 800bcfc:	f004 fdcf 	bl	801089e <memcpy>
 800bd00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd02:	f8d7 e000 	ldr.w	lr, [r7]
 800bd06:	46f4      	mov	ip, lr
 800bd08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	f8cc 3000 	str.w	r3, [ip]
 800bd12:	f10e 0114 	add.w	r1, lr, #20
 800bd16:	4640      	mov	r0, r8
 800bd18:	f000 f940 	bl	800bf9c <rcl_init_options_copy>
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d144      	bne.n	800bdac <rcl_init+0x13c>
 800bd22:	f8d7 9000 	ldr.w	r9, [r7]
 800bd26:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800bd2a:	f8c9 0020 	str.w	r0, [r9, #32]
 800bd2e:	f8c9 5018 	str.w	r5, [r9, #24]
 800bd32:	f8c9 801c 	str.w	r8, [r9, #28]
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	d04e      	beq.n	800bdd8 <rcl_init+0x168>
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d04c      	beq.n	800bdd8 <rcl_init+0x168>
 800bd3e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800bd42:	2104      	movs	r1, #4
 800bd44:	4628      	mov	r0, r5
 800bd46:	4798      	blx	r3
 800bd48:	f8c9 0020 	str.w	r0, [r9, #32]
 800bd4c:	f8d7 9000 	ldr.w	r9, [r7]
 800bd50:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800bd54:	46ca      	mov	sl, r9
 800bd56:	b343      	cbz	r3, 800bdaa <rcl_init+0x13a>
 800bd58:	2d01      	cmp	r5, #1
 800bd5a:	f178 0300 	sbcs.w	r3, r8, #0
 800bd5e:	db3b      	blt.n	800bdd8 <rcl_init+0x168>
 800bd60:	2400      	movs	r4, #0
 800bd62:	3e04      	subs	r6, #4
 800bd64:	46a1      	mov	r9, r4
 800bd66:	e00b      	b.n	800bd80 <rcl_init+0x110>
 800bd68:	6831      	ldr	r1, [r6, #0]
 800bd6a:	f004 fd98 	bl	801089e <memcpy>
 800bd6e:	3401      	adds	r4, #1
 800bd70:	f149 0900 	adc.w	r9, r9, #0
 800bd74:	45c8      	cmp	r8, r9
 800bd76:	bf08      	it	eq
 800bd78:	42a5      	cmpeq	r5, r4
 800bd7a:	d02b      	beq.n	800bdd4 <rcl_init+0x164>
 800bd7c:	f8d7 a000 	ldr.w	sl, [r7]
 800bd80:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800bd84:	f7f4 fa36 	bl	80001f4 <strlen>
 800bd88:	1c42      	adds	r2, r0, #1
 800bd8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd8c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800bd8e:	f8da a020 	ldr.w	sl, [sl, #32]
 800bd92:	9201      	str	r2, [sp, #4]
 800bd94:	4610      	mov	r0, r2
 800bd96:	4798      	blx	r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	9a01      	ldr	r2, [sp, #4]
 800bda2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1de      	bne.n	800bd68 <rcl_init+0xf8>
 800bdaa:	240a      	movs	r4, #10
 800bdac:	4638      	mov	r0, r7
 800bdae:	f7ff feff 	bl	800bbb0 <__cleanup_context>
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	b01e      	add	sp, #120	@ 0x78
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	2900      	cmp	r1, #0
 800bdbc:	f43f af71 	beq.w	800bca2 <rcl_init+0x32>
 800bdc0:	240b      	movs	r4, #11
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b01e      	add	sp, #120	@ 0x78
 800bdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdca:	2464      	movs	r4, #100	@ 0x64
 800bdcc:	4620      	mov	r0, r4
 800bdce:	b01e      	add	sp, #120	@ 0x78
 800bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd4:	f8d7 9000 	ldr.w	r9, [r7]
 800bdd8:	4926      	ldr	r1, [pc, #152]	@ (800be74 <rcl_init+0x204>)
 800bdda:	680b      	ldr	r3, [r1, #0]
 800bddc:	3301      	adds	r3, #1
 800bdde:	d036      	beq.n	800be4e <rcl_init+0x1de>
 800bde0:	600b      	str	r3, [r1, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	2400      	movs	r4, #0
 800bde6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bdee:	3301      	adds	r3, #1
 800bdf0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800bdf4:	d034      	beq.n	800be60 <rcl_init+0x1f0>
 800bdf6:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800bdfa:	b93b      	cbnz	r3, 800be0c <rcl_init+0x19c>
 800bdfc:	3030      	adds	r0, #48	@ 0x30
 800bdfe:	f000 f939 	bl	800c074 <rcl_get_localhost_only>
 800be02:	4604      	mov	r4, r0
 800be04:	2800      	cmp	r0, #0
 800be06:	d1d1      	bne.n	800bdac <rcl_init+0x13c>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	6958      	ldr	r0, [r3, #20]
 800be0c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800be0e:	aa18      	add	r2, sp, #96	@ 0x60
 800be10:	a917      	add	r1, sp, #92	@ 0x5c
 800be12:	f000 fd81 	bl	800c918 <rcl_validate_enclave_name>
 800be16:	4604      	mov	r4, r0
 800be18:	2800      	cmp	r0, #0
 800be1a:	d1c7      	bne.n	800bdac <rcl_init+0x13c>
 800be1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be1e:	b9eb      	cbnz	r3, 800be5c <rcl_init+0x1ec>
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	694b      	ldr	r3, [r1, #20]
 800be24:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800be26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800be2a:	f000 fc3d 	bl	800c6a8 <rcl_get_security_options_from_environment>
 800be2e:	4604      	mov	r4, r0
 800be30:	2800      	cmp	r0, #0
 800be32:	d1bb      	bne.n	800bdac <rcl_init+0x13c>
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6948      	ldr	r0, [r1, #20]
 800be38:	3128      	adds	r1, #40	@ 0x28
 800be3a:	3018      	adds	r0, #24
 800be3c:	f001 fb36 	bl	800d4ac <rmw_init>
 800be40:	4604      	mov	r4, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	d0bd      	beq.n	800bdc2 <rcl_init+0x152>
 800be46:	f7ff fe8f 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800be4a:	4604      	mov	r4, r0
 800be4c:	e7ae      	b.n	800bdac <rcl_init+0x13c>
 800be4e:	2201      	movs	r2, #1
 800be50:	461c      	mov	r4, r3
 800be52:	600a      	str	r2, [r1, #0]
 800be54:	4613      	mov	r3, r2
 800be56:	e7c6      	b.n	800bde6 <rcl_init+0x176>
 800be58:	240a      	movs	r4, #10
 800be5a:	e7b2      	b.n	800bdc2 <rcl_init+0x152>
 800be5c:	2401      	movs	r4, #1
 800be5e:	e7a5      	b.n	800bdac <rcl_init+0x13c>
 800be60:	3024      	adds	r0, #36	@ 0x24
 800be62:	f003 fc29 	bl	800f6b8 <rcl_get_default_domain_id>
 800be66:	4604      	mov	r4, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	d19f      	bne.n	800bdac <rcl_init+0x13c>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6958      	ldr	r0, [r3, #20]
 800be70:	e7c1      	b.n	800bdf6 <rcl_init+0x186>
 800be72:	bf00      	nop
 800be74:	2000db14 	.word	0x2000db14

0800be78 <rcl_get_zero_initialized_init_options>:
 800be78:	2000      	movs	r0, #0
 800be7a:	4770      	bx	lr

0800be7c <rcl_init_options_init>:
 800be7c:	b084      	sub	sp, #16
 800be7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be80:	b097      	sub	sp, #92	@ 0x5c
 800be82:	ae1d      	add	r6, sp, #116	@ 0x74
 800be84:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800be88:	2800      	cmp	r0, #0
 800be8a:	d058      	beq.n	800bf3e <rcl_init_options_init+0xc2>
 800be8c:	6803      	ldr	r3, [r0, #0]
 800be8e:	4605      	mov	r5, r0
 800be90:	b133      	cbz	r3, 800bea0 <rcl_init_options_init+0x24>
 800be92:	2464      	movs	r4, #100	@ 0x64
 800be94:	4620      	mov	r0, r4
 800be96:	b017      	add	sp, #92	@ 0x5c
 800be98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be9c:	b004      	add	sp, #16
 800be9e:	4770      	bx	lr
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7fc fc9f 	bl	80087e4 <rcutils_allocator_is_valid>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d049      	beq.n	800bf3e <rcl_init_options_init+0xc2>
 800beaa:	46b4      	mov	ip, r6
 800beac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800beb0:	ac11      	add	r4, sp, #68	@ 0x44
 800beb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800beb4:	f8dc 3000 	ldr.w	r3, [ip]
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bebc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bebe:	2050      	movs	r0, #80	@ 0x50
 800bec0:	4798      	blx	r3
 800bec2:	4604      	mov	r4, r0
 800bec4:	6028      	str	r0, [r5, #0]
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d03b      	beq.n	800bf42 <rcl_init_options_init+0xc6>
 800beca:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bece:	4686      	mov	lr, r0
 800bed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bed4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bed8:	f8dc 3000 	ldr.w	r3, [ip]
 800bedc:	f8ce 3000 	str.w	r3, [lr]
 800bee0:	a802      	add	r0, sp, #8
 800bee2:	f001 f86d 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800bee6:	f10d 0e08 	add.w	lr, sp, #8
 800beea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800beee:	f104 0c18 	add.w	ip, r4, #24
 800bef2:	682f      	ldr	r7, [r5, #0]
 800bef4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bef8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800befc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bf04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bf08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bf0c:	ac20      	add	r4, sp, #128	@ 0x80
 800bf0e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bf12:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf16:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf1a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bf1e:	f107 0018 	add.w	r0, r7, #24
 800bf22:	f001 f9cb 	bl	800d2bc <rmw_init_options_init>
 800bf26:	4604      	mov	r4, r0
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d0b3      	beq.n	800be94 <rcl_init_options_init+0x18>
 800bf2c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bf2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bf30:	6828      	ldr	r0, [r5, #0]
 800bf32:	4798      	blx	r3
 800bf34:	4620      	mov	r0, r4
 800bf36:	f7ff fe17 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	e7aa      	b.n	800be94 <rcl_init_options_init+0x18>
 800bf3e:	240b      	movs	r4, #11
 800bf40:	e7a8      	b.n	800be94 <rcl_init_options_init+0x18>
 800bf42:	240a      	movs	r4, #10
 800bf44:	e7a6      	b.n	800be94 <rcl_init_options_init+0x18>
 800bf46:	bf00      	nop

0800bf48 <rcl_init_options_fini>:
 800bf48:	b530      	push	{r4, r5, lr}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	b1f0      	cbz	r0, 800bf8c <rcl_init_options_fini+0x44>
 800bf4e:	6803      	ldr	r3, [r0, #0]
 800bf50:	4604      	mov	r4, r0
 800bf52:	b1db      	cbz	r3, 800bf8c <rcl_init_options_fini+0x44>
 800bf54:	469c      	mov	ip, r3
 800bf56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bf5a:	f10d 0e04 	add.w	lr, sp, #4
 800bf5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bf62:	f8dc 3000 	ldr.w	r3, [ip]
 800bf66:	f8ce 3000 	str.w	r3, [lr]
 800bf6a:	a801      	add	r0, sp, #4
 800bf6c:	f7fc fc3a 	bl	80087e4 <rcutils_allocator_is_valid>
 800bf70:	b160      	cbz	r0, 800bf8c <rcl_init_options_fini+0x44>
 800bf72:	6820      	ldr	r0, [r4, #0]
 800bf74:	3018      	adds	r0, #24
 800bf76:	f001 fa51 	bl	800d41c <rmw_init_options_fini>
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b950      	cbnz	r0, 800bf94 <rcl_init_options_fini+0x4c>
 800bf7e:	6820      	ldr	r0, [r4, #0]
 800bf80:	9b02      	ldr	r3, [sp, #8]
 800bf82:	9905      	ldr	r1, [sp, #20]
 800bf84:	4798      	blx	r3
 800bf86:	4628      	mov	r0, r5
 800bf88:	b007      	add	sp, #28
 800bf8a:	bd30      	pop	{r4, r5, pc}
 800bf8c:	250b      	movs	r5, #11
 800bf8e:	4628      	mov	r0, r5
 800bf90:	b007      	add	sp, #28
 800bf92:	bd30      	pop	{r4, r5, pc}
 800bf94:	f7ff fde8 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800bf98:	4605      	mov	r5, r0
 800bf9a:	e7f8      	b.n	800bf8e <rcl_init_options_fini+0x46>

0800bf9c <rcl_init_options_copy>:
 800bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa0:	b094      	sub	sp, #80	@ 0x50
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d058      	beq.n	800c058 <rcl_init_options_copy+0xbc>
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	6800      	ldr	r0, [r0, #0]
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d054      	beq.n	800c058 <rcl_init_options_copy+0xbc>
 800bfae:	460e      	mov	r6, r1
 800bfb0:	f7fc fc18 	bl	80087e4 <rcutils_allocator_is_valid>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d04f      	beq.n	800c058 <rcl_init_options_copy+0xbc>
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	d04d      	beq.n	800c058 <rcl_init_options_copy+0xbc>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	b123      	cbz	r3, 800bfca <rcl_init_options_copy+0x2e>
 800bfc0:	2464      	movs	r4, #100	@ 0x64
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	b014      	add	sp, #80	@ 0x50
 800bfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfca:	6827      	ldr	r7, [r4, #0]
 800bfcc:	46bc      	mov	ip, r7
 800bfce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfd2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bfd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfd6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfda:	f8d7 8000 	ldr.w	r8, [r7]
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2050      	movs	r0, #80	@ 0x50
 800bfe4:	47c0      	blx	r8
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	6030      	str	r0, [r6, #0]
 800bfea:	b3d0      	cbz	r0, 800c062 <rcl_init_options_copy+0xc6>
 800bfec:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bff0:	4686      	mov	lr, r0
 800bff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bff6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bffa:	f8dc 3000 	ldr.w	r3, [ip]
 800bffe:	f8ce 3000 	str.w	r3, [lr]
 800c002:	4668      	mov	r0, sp
 800c004:	f000 ffdc 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800c008:	46ee      	mov	lr, sp
 800c00a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c00e:	f105 0c18 	add.w	ip, r5, #24
 800c012:	6824      	ldr	r4, [r4, #0]
 800c014:	6835      	ldr	r5, [r6, #0]
 800c016:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c01a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c01e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c026:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c02a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c02e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c032:	f104 0018 	add.w	r0, r4, #24
 800c036:	f105 0118 	add.w	r1, r5, #24
 800c03a:	f001 f9a7 	bl	800d38c <rmw_init_options_copy>
 800c03e:	4604      	mov	r4, r0
 800c040:	2800      	cmp	r0, #0
 800c042:	d0be      	beq.n	800bfc2 <rcl_init_options_copy+0x26>
 800c044:	f7fc fbdc 	bl	8008800 <rcutils_get_error_string>
 800c048:	f7fc fbf2 	bl	8008830 <rcutils_reset_error>
 800c04c:	4630      	mov	r0, r6
 800c04e:	f7ff ff7b 	bl	800bf48 <rcl_init_options_fini>
 800c052:	b140      	cbz	r0, 800c066 <rcl_init_options_copy+0xca>
 800c054:	4604      	mov	r4, r0
 800c056:	e7b4      	b.n	800bfc2 <rcl_init_options_copy+0x26>
 800c058:	240b      	movs	r4, #11
 800c05a:	4620      	mov	r0, r4
 800c05c:	b014      	add	sp, #80	@ 0x50
 800c05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c062:	240a      	movs	r4, #10
 800c064:	e7ad      	b.n	800bfc2 <rcl_init_options_copy+0x26>
 800c066:	4620      	mov	r0, r4
 800c068:	b014      	add	sp, #80	@ 0x50
 800c06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	f7ff bd7b 	b.w	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800c072:	bf00      	nop

0800c074 <rcl_get_localhost_only>:
 800c074:	b510      	push	{r4, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	2300      	movs	r3, #0
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	b1b8      	cbz	r0, 800c0ae <rcl_get_localhost_only+0x3a>
 800c07e:	4604      	mov	r4, r0
 800c080:	a901      	add	r1, sp, #4
 800c082:	480c      	ldr	r0, [pc, #48]	@ (800c0b4 <rcl_get_localhost_only+0x40>)
 800c084:	f000 fc90 	bl	800c9a8 <rcutils_get_env>
 800c088:	b110      	cbz	r0, 800c090 <rcl_get_localhost_only+0x1c>
 800c08a:	2001      	movs	r0, #1
 800c08c:	b002      	add	sp, #8
 800c08e:	bd10      	pop	{r4, pc}
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	b113      	cbz	r3, 800c09a <rcl_get_localhost_only+0x26>
 800c094:	781a      	ldrb	r2, [r3, #0]
 800c096:	2a31      	cmp	r2, #49	@ 0x31
 800c098:	d004      	beq.n	800c0a4 <rcl_get_localhost_only+0x30>
 800c09a:	2302      	movs	r3, #2
 800c09c:	2000      	movs	r0, #0
 800c09e:	7023      	strb	r3, [r4, #0]
 800c0a0:	b002      	add	sp, #8
 800c0a2:	bd10      	pop	{r4, pc}
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1f7      	bne.n	800c09a <rcl_get_localhost_only+0x26>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e7f6      	b.n	800c09c <rcl_get_localhost_only+0x28>
 800c0ae:	200b      	movs	r0, #11
 800c0b0:	b002      	add	sp, #8
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	08011a18 	.word	0x08011a18

0800c0b8 <rcl_get_zero_initialized_node>:
 800c0b8:	4a03      	ldr	r2, [pc, #12]	@ (800c0c8 <rcl_get_zero_initialized_node+0x10>)
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0c0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	4770      	bx	lr
 800c0c8:	08011a40 	.word	0x08011a40

0800c0cc <rcl_node_init>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	b0a9      	sub	sp, #164	@ 0xa4
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c0d8:	a823      	add	r0, sp, #140	@ 0x8c
 800c0da:	460e      	mov	r6, r1
 800c0dc:	4615      	mov	r5, r2
 800c0de:	461f      	mov	r7, r3
 800c0e0:	f003 fd12 	bl	800fb08 <rcl_guard_condition_get_default_options>
 800c0e4:	f1b8 0f00 	cmp.w	r8, #0
 800c0e8:	f000 80e6 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	f7fc fb79 	bl	80087e4 <rcutils_allocator_is_valid>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	f000 80e0 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	f000 80dd 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c0fe:	2d00      	cmp	r5, #0
 800c100:	f000 80da 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c104:	2c00      	cmp	r4, #0
 800c106:	f000 80d7 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c10a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c10e:	f1b9 0f00 	cmp.w	r9, #0
 800c112:	f040 80fd 	bne.w	800c310 <rcl_node_init+0x244>
 800c116:	2f00      	cmp	r7, #0
 800c118:	f000 80ce 	beq.w	800c2b8 <rcl_node_init+0x1ec>
 800c11c:	4638      	mov	r0, r7
 800c11e:	f7ff fd41 	bl	800bba4 <rcl_context_is_valid>
 800c122:	4682      	mov	sl, r0
 800c124:	2800      	cmp	r0, #0
 800c126:	f000 80cd 	beq.w	800c2c4 <rcl_node_init+0x1f8>
 800c12a:	464a      	mov	r2, r9
 800c12c:	a922      	add	r1, sp, #136	@ 0x88
 800c12e:	4630      	mov	r0, r6
 800c130:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c134:	f001 f83a 	bl	800d1ac <rmw_validate_node_name>
 800c138:	4681      	mov	r9, r0
 800c13a:	2800      	cmp	r0, #0
 800c13c:	f040 80be 	bne.w	800c2bc <rcl_node_init+0x1f0>
 800c140:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c142:	2800      	cmp	r0, #0
 800c144:	f040 80f0 	bne.w	800c328 <rcl_node_init+0x25c>
 800c148:	4628      	mov	r0, r5
 800c14a:	f7f4 f853 	bl	80001f4 <strlen>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f040 80bb 	bne.w	800c2ca <rcl_node_init+0x1fe>
 800c154:	4d7c      	ldr	r5, [pc, #496]	@ (800c348 <rcl_node_init+0x27c>)
 800c156:	a922      	add	r1, sp, #136	@ 0x88
 800c158:	2200      	movs	r2, #0
 800c15a:	4628      	mov	r0, r5
 800c15c:	f001 f808 	bl	800d170 <rmw_validate_namespace>
 800c160:	4681      	mov	r9, r0
 800c162:	2800      	cmp	r0, #0
 800c164:	f040 80aa 	bne.w	800c2bc <rcl_node_init+0x1f0>
 800c168:	4682      	mov	sl, r0
 800c16a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f040 80e0 	bne.w	800c332 <rcl_node_init+0x266>
 800c172:	f8d8 3000 	ldr.w	r3, [r8]
 800c176:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c17a:	2078      	movs	r0, #120	@ 0x78
 800c17c:	4798      	blx	r3
 800c17e:	4681      	mov	r9, r0
 800c180:	6060      	str	r0, [r4, #4]
 800c182:	2800      	cmp	r0, #0
 800c184:	f000 80ca 	beq.w	800c31c <rcl_node_init+0x250>
 800c188:	2200      	movs	r2, #0
 800c18a:	2300      	movs	r3, #0
 800c18c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c190:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c194:	a808      	add	r0, sp, #32
 800c196:	f000 f907 	bl	800c3a8 <rcl_node_get_default_options>
 800c19a:	a908      	add	r1, sp, #32
 800c19c:	4648      	mov	r0, r9
 800c19e:	2268      	movs	r2, #104	@ 0x68
 800c1a0:	f004 fb7d 	bl	801089e <memcpy>
 800c1a4:	6861      	ldr	r1, [r4, #4]
 800c1a6:	6027      	str	r7, [r4, #0]
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f000 f90b 	bl	800c3c4 <rcl_node_options_copy>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d158      	bne.n	800c264 <rcl_node_init+0x198>
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7f4 f81e 	bl	80001f4 <strlen>
 800c1b8:	4428      	add	r0, r5
 800c1ba:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c1be:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c1c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	bf0c      	ite	eq
 800c1cc:	4b5f      	ldreq	r3, [pc, #380]	@ (800c34c <rcl_node_init+0x280>)
 800c1ce:	4b60      	ldrne	r3, [pc, #384]	@ (800c350 <rcl_node_init+0x284>)
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c1dc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c1e0:	f000 fc0a 	bl	800c9f8 <rcutils_format_string_limit>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	3028      	adds	r0, #40	@ 0x28
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	6866      	ldr	r6, [r4, #4]
 800c1f4:	f001 fbae 	bl	800d954 <rmw_create_node>
 800c1f8:	6863      	ldr	r3, [r4, #4]
 800c1fa:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c1fc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d032      	beq.n	800c268 <rcl_node_init+0x19c>
 800c202:	f001 fc3b 	bl	800da7c <rmw_node_get_graph_guard_condition>
 800c206:	4681      	mov	r9, r0
 800c208:	b360      	cbz	r0, 800c264 <rcl_node_init+0x198>
 800c20a:	f8d8 3000 	ldr.w	r3, [r8]
 800c20e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c212:	6866      	ldr	r6, [r4, #4]
 800c214:	2008      	movs	r0, #8
 800c216:	4798      	blx	r3
 800c218:	6863      	ldr	r3, [r4, #4]
 800c21a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c21c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c220:	f1bb 0f00 	cmp.w	fp, #0
 800c224:	d020      	beq.n	800c268 <rcl_node_init+0x19c>
 800c226:	a806      	add	r0, sp, #24
 800c228:	f003 fbde 	bl	800f9e8 <rcl_get_zero_initialized_guard_condition>
 800c22c:	a806      	add	r0, sp, #24
 800c22e:	c803      	ldmia	r0, {r0, r1}
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	46c4      	mov	ip, r8
 800c234:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c238:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c23c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c240:	ae23      	add	r6, sp, #140	@ 0x8c
 800c242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c244:	f8dc 3000 	ldr.w	r3, [ip]
 800c248:	6033      	str	r3, [r6, #0]
 800c24a:	ab28      	add	r3, sp, #160	@ 0xa0
 800c24c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c250:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c254:	4649      	mov	r1, r9
 800c256:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c258:	463a      	mov	r2, r7
 800c25a:	4670      	mov	r0, lr
 800c25c:	f003 fbce 	bl	800f9fc <rcl_guard_condition_init_from_rmw>
 800c260:	4681      	mov	r9, r0
 800c262:	b328      	cbz	r0, 800c2b0 <rcl_node_init+0x1e4>
 800c264:	6863      	ldr	r3, [r4, #4]
 800c266:	b1f3      	cbz	r3, 800c2a6 <rcl_node_init+0x1da>
 800c268:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c26a:	b128      	cbz	r0, 800c278 <rcl_node_init+0x1ac>
 800c26c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c270:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c274:	4798      	blx	r3
 800c276:	6863      	ldr	r3, [r4, #4]
 800c278:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c27a:	b110      	cbz	r0, 800c282 <rcl_node_init+0x1b6>
 800c27c:	f001 fb82 	bl	800d984 <rmw_destroy_node>
 800c280:	6863      	ldr	r3, [r4, #4]
 800c282:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c284:	b148      	cbz	r0, 800c29a <rcl_node_init+0x1ce>
 800c286:	f003 fc19 	bl	800fabc <rcl_guard_condition_fini>
 800c28a:	6863      	ldr	r3, [r4, #4]
 800c28c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c290:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c292:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c296:	4798      	blx	r3
 800c298:	6863      	ldr	r3, [r4, #4]
 800c29a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2a4:	4798      	blx	r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e9c4 3300 	strd	r3, r3, [r4]
 800c2ac:	f04f 0901 	mov.w	r9, #1
 800c2b0:	f1ba 0f00 	cmp.w	sl, #0
 800c2b4:	d125      	bne.n	800c302 <rcl_node_init+0x236>
 800c2b6:	e001      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c2b8:	f04f 090b 	mov.w	r9, #11
 800c2bc:	4648      	mov	r0, r9
 800c2be:	b029      	add	sp, #164	@ 0xa4
 800c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c2c8:	e7f8      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c2ca:	782b      	ldrb	r3, [r5, #0]
 800c2cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2ce:	f43f af42 	beq.w	800c156 <rcl_node_init+0x8a>
 800c2d2:	9503      	str	r5, [sp, #12]
 800c2d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	4b1e      	ldr	r3, [pc, #120]	@ (800c354 <rcl_node_init+0x288>)
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c2e8:	f000 fb86 	bl	800c9f8 <rcutils_format_string_limit>
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	b340      	cbz	r0, 800c342 <rcl_node_init+0x276>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	a922      	add	r1, sp, #136	@ 0x88
 800c2f4:	9222      	str	r2, [sp, #136]	@ 0x88
 800c2f6:	f000 ff3b 	bl	800d170 <rmw_validate_namespace>
 800c2fa:	4681      	mov	r9, r0
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	f43f af34 	beq.w	800c16a <rcl_node_init+0x9e>
 800c302:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c306:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c30a:	4628      	mov	r0, r5
 800c30c:	4798      	blx	r3
 800c30e:	e7d5      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c310:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c314:	4648      	mov	r0, r9
 800c316:	b029      	add	sp, #164	@ 0xa4
 800c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31c:	f04f 090a 	mov.w	r9, #10
 800c320:	f1ba 0f00 	cmp.w	sl, #0
 800c324:	d1ed      	bne.n	800c302 <rcl_node_init+0x236>
 800c326:	e7c9      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c328:	f000 ff92 	bl	800d250 <rmw_node_name_validation_result_string>
 800c32c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c330:	e7c4      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c332:	f000 ff2f 	bl	800d194 <rmw_namespace_validation_result_string>
 800c336:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c33a:	f1ba 0f00 	cmp.w	sl, #0
 800c33e:	d1e0      	bne.n	800c302 <rcl_node_init+0x236>
 800c340:	e7bc      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c342:	f04f 090a 	mov.w	r9, #10
 800c346:	e7b9      	b.n	800c2bc <rcl_node_init+0x1f0>
 800c348:	08011a30 	.word	0x08011a30
 800c34c:	080119ec 	.word	0x080119ec
 800c350:	08011a38 	.word	0x08011a38
 800c354:	08011a34 	.word	0x08011a34

0800c358 <rcl_node_is_valid>:
 800c358:	b130      	cbz	r0, 800c368 <rcl_node_is_valid+0x10>
 800c35a:	6843      	ldr	r3, [r0, #4]
 800c35c:	b123      	cbz	r3, 800c368 <rcl_node_is_valid+0x10>
 800c35e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c360:	b113      	cbz	r3, 800c368 <rcl_node_is_valid+0x10>
 800c362:	6800      	ldr	r0, [r0, #0]
 800c364:	f7ff bc1e 	b.w	800bba4 <rcl_context_is_valid>
 800c368:	2000      	movs	r0, #0
 800c36a:	4770      	bx	lr

0800c36c <rcl_node_get_name>:
 800c36c:	b120      	cbz	r0, 800c378 <rcl_node_get_name+0xc>
 800c36e:	6840      	ldr	r0, [r0, #4]
 800c370:	b110      	cbz	r0, 800c378 <rcl_node_get_name+0xc>
 800c372:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c374:	b100      	cbz	r0, 800c378 <rcl_node_get_name+0xc>
 800c376:	6880      	ldr	r0, [r0, #8]
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop

0800c37c <rcl_node_get_namespace>:
 800c37c:	b120      	cbz	r0, 800c388 <rcl_node_get_namespace+0xc>
 800c37e:	6840      	ldr	r0, [r0, #4]
 800c380:	b110      	cbz	r0, 800c388 <rcl_node_get_namespace+0xc>
 800c382:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c384:	b100      	cbz	r0, 800c388 <rcl_node_get_namespace+0xc>
 800c386:	68c0      	ldr	r0, [r0, #12]
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop

0800c38c <rcl_node_get_options>:
 800c38c:	b128      	cbz	r0, 800c39a <rcl_node_get_options+0xe>
 800c38e:	6840      	ldr	r0, [r0, #4]
 800c390:	b118      	cbz	r0, 800c39a <rcl_node_get_options+0xe>
 800c392:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c394:	2b00      	cmp	r3, #0
 800c396:	bf08      	it	eq
 800c398:	2000      	moveq	r0, #0
 800c39a:	4770      	bx	lr

0800c39c <rcl_node_get_rmw_handle>:
 800c39c:	b110      	cbz	r0, 800c3a4 <rcl_node_get_rmw_handle+0x8>
 800c39e:	6840      	ldr	r0, [r0, #4]
 800c3a0:	b100      	cbz	r0, 800c3a4 <rcl_node_get_rmw_handle+0x8>
 800c3a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop

0800c3a8 <rcl_node_get_default_options>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	2268      	movs	r2, #104	@ 0x68
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	f004 f9ac 	bl	801070c <memset>
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f7fc fa07 	bl	80087c8 <rcutils_get_default_allocator>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	7523      	strb	r3, [r4, #20]
 800c3be:	4620      	mov	r0, r4
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	bf00      	nop

0800c3c4 <rcl_node_options_copy>:
 800c3c4:	b1d0      	cbz	r0, 800c3fc <rcl_node_options_copy+0x38>
 800c3c6:	b570      	push	{r4, r5, r6, lr}
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	b1a9      	cbz	r1, 800c3f8 <rcl_node_options_copy+0x34>
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	4684      	mov	ip, r0
 800c3d0:	d012      	beq.n	800c3f8 <rcl_node_options_copy+0x34>
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	8a86      	ldrh	r6, [r0, #20]
 800c3d6:	468e      	mov	lr, r1
 800c3d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c3de:	682b      	ldr	r3, [r5, #0]
 800c3e0:	f8ce 3000 	str.w	r3, [lr]
 800c3e4:	f10c 0118 	add.w	r1, ip, #24
 800c3e8:	2250      	movs	r2, #80	@ 0x50
 800c3ea:	82a6      	strh	r6, [r4, #20]
 800c3ec:	f104 0018 	add.w	r0, r4, #24
 800c3f0:	f004 fa55 	bl	801089e <memcpy>
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	200b      	movs	r0, #11
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	200b      	movs	r0, #11
 800c3fe:	4770      	bx	lr

0800c400 <rcl_node_resolve_name>:
 800c400:	b082      	sub	sp, #8
 800c402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c406:	b091      	sub	sp, #68	@ 0x44
 800c408:	ac1a      	add	r4, sp, #104	@ 0x68
 800c40a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c40e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800c412:	2800      	cmp	r0, #0
 800c414:	d03b      	beq.n	800c48e <rcl_node_resolve_name+0x8e>
 800c416:	460c      	mov	r4, r1
 800c418:	4605      	mov	r5, r0
 800c41a:	f7ff ffb7 	bl	800c38c <rcl_node_get_options>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d037      	beq.n	800c492 <rcl_node_resolve_name+0x92>
 800c422:	4628      	mov	r0, r5
 800c424:	f7ff ffa2 	bl	800c36c <rcl_node_get_name>
 800c428:	4606      	mov	r6, r0
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7ff ffa6 	bl	800c37c <rcl_node_get_namespace>
 800c430:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800c434:	4681      	mov	r9, r0
 800c436:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c43a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800c43c:	46ac      	mov	ip, r5
 800c43e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c442:	f8de 3000 	ldr.w	r3, [lr]
 800c446:	f8cc 3000 	str.w	r3, [ip]
 800c44a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c44c:	b1fb      	cbz	r3, 800c48e <rcl_node_resolve_name+0x8e>
 800c44e:	468a      	mov	sl, r1
 800c450:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800c454:	f000 fc28 	bl	800cca8 <rcutils_get_zero_initialized_string_map>
 800c458:	ab10      	add	r3, sp, #64	@ 0x40
 800c45a:	9008      	str	r0, [sp, #32]
 800c45c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c460:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c464:	2100      	movs	r1, #0
 800c466:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c46a:	a808      	add	r0, sp, #32
 800c46c:	f000 fc94 	bl	800cd98 <rcutils_string_map_init>
 800c470:	4607      	mov	r7, r0
 800c472:	b180      	cbz	r0, 800c496 <rcl_node_resolve_name+0x96>
 800c474:	f7fc f9c4 	bl	8008800 <rcutils_get_error_string>
 800c478:	f7fc f9da 	bl	8008830 <rcutils_reset_error>
 800c47c:	2f0a      	cmp	r7, #10
 800c47e:	bf18      	it	ne
 800c480:	2701      	movne	r7, #1
 800c482:	4638      	mov	r0, r7
 800c484:	b011      	add	sp, #68	@ 0x44
 800c486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	b002      	add	sp, #8
 800c48c:	4770      	bx	lr
 800c48e:	270b      	movs	r7, #11
 800c490:	e7f7      	b.n	800c482 <rcl_node_resolve_name+0x82>
 800c492:	2701      	movs	r7, #1
 800c494:	e7f5      	b.n	800c482 <rcl_node_resolve_name+0x82>
 800c496:	9009      	str	r0, [sp, #36]	@ 0x24
 800c498:	9007      	str	r0, [sp, #28]
 800c49a:	a808      	add	r0, sp, #32
 800c49c:	f003 fa9e 	bl	800f9dc <rcl_get_default_topic_name_substitutions>
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	b1a8      	cbz	r0, 800c4d0 <rcl_node_resolve_name+0xd0>
 800c4a4:	280a      	cmp	r0, #10
 800c4a6:	9c07      	ldr	r4, [sp, #28]
 800c4a8:	d000      	beq.n	800c4ac <rcl_node_resolve_name+0xac>
 800c4aa:	2701      	movs	r7, #1
 800c4ac:	a808      	add	r0, sp, #32
 800c4ae:	f000 fcb3 	bl	800ce18 <rcutils_string_map_fini>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d13d      	bne.n	800c532 <rcl_node_resolve_name+0x132>
 800c4b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	47d0      	blx	sl
 800c4bc:	4659      	mov	r1, fp
 800c4be:	4620      	mov	r0, r4
 800c4c0:	47d0      	blx	sl
 800c4c2:	f1b8 0f00 	cmp.w	r8, #0
 800c4c6:	d0dc      	beq.n	800c482 <rcl_node_resolve_name+0x82>
 800c4c8:	2f67      	cmp	r7, #103	@ 0x67
 800c4ca:	bf08      	it	eq
 800c4cc:	2768      	moveq	r7, #104	@ 0x68
 800c4ce:	e7d8      	b.n	800c482 <rcl_node_resolve_name+0x82>
 800c4d0:	ab09      	add	r3, sp, #36	@ 0x24
 800c4d2:	9305      	str	r3, [sp, #20]
 800c4d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4d6:	46ec      	mov	ip, sp
 800c4d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	f8cc 3000 	str.w	r3, [ip]
 800c4e2:	464a      	mov	r2, r9
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	ab08      	add	r3, sp, #32
 800c4ea:	f003 f919 	bl	800f720 <rcl_expand_topic_name>
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	b9b8      	cbnz	r0, 800c522 <rcl_node_resolve_name+0x122>
 800c4f2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c4f4:	9009      	str	r0, [sp, #36]	@ 0x24
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	a90a      	add	r1, sp, #40	@ 0x28
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 fd74 	bl	800cfe8 <rmw_validate_full_topic_name>
 800c500:	b988      	cbnz	r0, 800c526 <rcl_node_resolve_name+0x126>
 800c502:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c504:	b9d5      	cbnz	r5, 800c53c <rcl_node_resolve_name+0x13c>
 800c506:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c508:	a808      	add	r0, sp, #32
 800c50a:	601c      	str	r4, [r3, #0]
 800c50c:	f000 fc84 	bl	800ce18 <rcutils_string_map_fini>
 800c510:	4607      	mov	r7, r0
 800c512:	b1a8      	cbz	r0, 800c540 <rcl_node_resolve_name+0x140>
 800c514:	f7fc f974 	bl	8008800 <rcutils_get_error_string>
 800c518:	462c      	mov	r4, r5
 800c51a:	f7fc f989 	bl	8008830 <rcutils_reset_error>
 800c51e:	2701      	movs	r7, #1
 800c520:	e7c9      	b.n	800c4b6 <rcl_node_resolve_name+0xb6>
 800c522:	9c07      	ldr	r4, [sp, #28]
 800c524:	e7c2      	b.n	800c4ac <rcl_node_resolve_name+0xac>
 800c526:	f7fc f96b 	bl	8008800 <rcutils_get_error_string>
 800c52a:	2701      	movs	r7, #1
 800c52c:	f7fc f980 	bl	8008830 <rcutils_reset_error>
 800c530:	e7bc      	b.n	800c4ac <rcl_node_resolve_name+0xac>
 800c532:	f7fc f965 	bl	8008800 <rcutils_get_error_string>
 800c536:	f7fc f97b 	bl	8008830 <rcutils_reset_error>
 800c53a:	e7bc      	b.n	800c4b6 <rcl_node_resolve_name+0xb6>
 800c53c:	2767      	movs	r7, #103	@ 0x67
 800c53e:	e7b5      	b.n	800c4ac <rcl_node_resolve_name+0xac>
 800c540:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c542:	4659      	mov	r1, fp
 800c544:	47d0      	blx	sl
 800c546:	4659      	mov	r1, fp
 800c548:	4638      	mov	r0, r7
 800c54a:	47d0      	blx	sl
 800c54c:	e799      	b.n	800c482 <rcl_node_resolve_name+0x82>
 800c54e:	bf00      	nop

0800c550 <exact_match_lookup>:
 800c550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c552:	f102 0708 	add.w	r7, r2, #8
 800c556:	460b      	mov	r3, r1
 800c558:	4614      	mov	r4, r2
 800c55a:	4606      	mov	r6, r0
 800c55c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c560:	b085      	sub	sp, #20
 800c562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c566:	4618      	mov	r0, r3
 800c568:	4919      	ldr	r1, [pc, #100]	@ (800c5d0 <exact_match_lookup+0x80>)
 800c56a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c56e:	f000 fa35 	bl	800c9dc <rcutils_join_path>
 800c572:	7833      	ldrb	r3, [r6, #0]
 800c574:	2b2f      	cmp	r3, #47	@ 0x2f
 800c576:	4605      	mov	r5, r0
 800c578:	d023      	beq.n	800c5c2 <exact_match_lookup+0x72>
 800c57a:	f104 030c 	add.w	r3, r4, #12
 800c57e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c582:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c586:	1c70      	adds	r0, r6, #1
 800c588:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c58c:	f000 fa2c 	bl	800c9e8 <rcutils_to_native_path>
 800c590:	4606      	mov	r6, r0
 800c592:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c596:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c59a:	4631      	mov	r1, r6
 800c59c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f000 fa1b 	bl	800c9dc <rcutils_join_path>
 800c5a6:	6862      	ldr	r2, [r4, #4]
 800c5a8:	6921      	ldr	r1, [r4, #16]
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	461e      	mov	r6, r3
 800c5b0:	4790      	blx	r2
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	6863      	ldr	r3, [r4, #4]
 800c5b6:	6921      	ldr	r1, [r4, #16]
 800c5b8:	4798      	blx	r3
 800c5ba:	4635      	mov	r5, r6
 800c5bc:	4628      	mov	r0, r5
 800c5be:	b005      	add	sp, #20
 800c5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c2:	7873      	ldrb	r3, [r6, #1]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1d8      	bne.n	800c57a <exact_match_lookup+0x2a>
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	b005      	add	sp, #20
 800c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	08011a84 	.word	0x08011a84

0800c5d4 <rcl_get_secure_root>:
 800c5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	b168      	cbz	r0, 800c5f8 <rcl_get_secure_root+0x24>
 800c5dc:	4607      	mov	r7, r0
 800c5de:	4608      	mov	r0, r1
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	f7fc f8ff 	bl	80087e4 <rcutils_allocator_is_valid>
 800c5e6:	b138      	cbz	r0, 800c5f8 <rcl_get_secure_root+0x24>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	482d      	ldr	r0, [pc, #180]	@ (800c6a0 <rcl_get_secure_root+0xcc>)
 800c5ec:	9303      	str	r3, [sp, #12]
 800c5ee:	a903      	add	r1, sp, #12
 800c5f0:	f000 f9da 	bl	800c9a8 <rcutils_get_env>
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	b120      	cbz	r0, 800c602 <rcl_get_secure_root+0x2e>
 800c5f8:	2500      	movs	r5, #0
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	b005      	add	sp, #20
 800c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	781a      	ldrb	r2, [r3, #0]
 800c606:	2a00      	cmp	r2, #0
 800c608:	d0f6      	beq.n	800c5f8 <rcl_get_secure_root+0x24>
 800c60a:	f104 090c 	add.w	r9, r4, #12
 800c60e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c612:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c616:	4618      	mov	r0, r3
 800c618:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c61c:	f000 fb06 	bl	800cc2c <rcutils_strdup>
 800c620:	4680      	mov	r8, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	d0e8      	beq.n	800c5f8 <rcl_get_secure_root+0x24>
 800c626:	481f      	ldr	r0, [pc, #124]	@ (800c6a4 <rcl_get_secure_root+0xd0>)
 800c628:	9503      	str	r5, [sp, #12]
 800c62a:	a903      	add	r1, sp, #12
 800c62c:	f000 f9bc 	bl	800c9a8 <rcutils_get_env>
 800c630:	b160      	cbz	r0, 800c64c <rcl_get_secure_root+0x78>
 800c632:	2600      	movs	r6, #0
 800c634:	6863      	ldr	r3, [r4, #4]
 800c636:	6921      	ldr	r1, [r4, #16]
 800c638:	4630      	mov	r0, r6
 800c63a:	4798      	blx	r3
 800c63c:	4640      	mov	r0, r8
 800c63e:	6863      	ldr	r3, [r4, #4]
 800c640:	6921      	ldr	r1, [r4, #16]
 800c642:	4798      	blx	r3
 800c644:	4628      	mov	r0, r5
 800c646:	b005      	add	sp, #20
 800c648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c64c:	9b03      	ldr	r3, [sp, #12]
 800c64e:	781e      	ldrb	r6, [r3, #0]
 800c650:	b1f6      	cbz	r6, 800c690 <rcl_get_secure_root+0xbc>
 800c652:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c656:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c65a:	4618      	mov	r0, r3
 800c65c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c660:	f000 fae4 	bl	800cc2c <rcutils_strdup>
 800c664:	4606      	mov	r6, r0
 800c666:	2800      	cmp	r0, #0
 800c668:	d0e3      	beq.n	800c632 <rcl_get_secure_root+0x5e>
 800c66a:	4622      	mov	r2, r4
 800c66c:	4641      	mov	r1, r8
 800c66e:	f7ff ff6f 	bl	800c550 <exact_match_lookup>
 800c672:	4605      	mov	r5, r0
 800c674:	2d00      	cmp	r5, #0
 800c676:	d0dd      	beq.n	800c634 <rcl_get_secure_root+0x60>
 800c678:	4628      	mov	r0, r5
 800c67a:	f000 f9ad 	bl	800c9d8 <rcutils_is_directory>
 800c67e:	4603      	mov	r3, r0
 800c680:	2800      	cmp	r0, #0
 800c682:	d1d7      	bne.n	800c634 <rcl_get_secure_root+0x60>
 800c684:	4628      	mov	r0, r5
 800c686:	6921      	ldr	r1, [r4, #16]
 800c688:	461d      	mov	r5, r3
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	4798      	blx	r3
 800c68e:	e7d1      	b.n	800c634 <rcl_get_secure_root+0x60>
 800c690:	4622      	mov	r2, r4
 800c692:	4638      	mov	r0, r7
 800c694:	4641      	mov	r1, r8
 800c696:	f7ff ff5b 	bl	800c550 <exact_match_lookup>
 800c69a:	4605      	mov	r5, r0
 800c69c:	e7ea      	b.n	800c674 <rcl_get_secure_root+0xa0>
 800c69e:	bf00      	nop
 800c6a0:	08011a90 	.word	0x08011a90
 800c6a4:	08011aa8 	.word	0x08011aa8

0800c6a8 <rcl_get_security_options_from_environment>:
 800c6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	4820      	ldr	r0, [pc, #128]	@ (800c738 <rcl_get_security_options_from_environment+0x90>)
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	a901      	add	r1, sp, #4
 800c6ba:	4690      	mov	r8, r2
 800c6bc:	f000 f974 	bl	800c9a8 <rcutils_get_env>
 800c6c0:	b120      	cbz	r0, 800c6cc <rcl_get_security_options_from_environment+0x24>
 800c6c2:	2501      	movs	r5, #1
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	b002      	add	sp, #8
 800c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6cc:	491b      	ldr	r1, [pc, #108]	@ (800c73c <rcl_get_security_options_from_environment+0x94>)
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	9801      	ldr	r0, [sp, #4]
 800c6d2:	f7f3 fd85 	bl	80001e0 <strcmp>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b9e8      	cbnz	r0, 800c716 <rcl_get_security_options_from_environment+0x6e>
 800c6da:	9001      	str	r0, [sp, #4]
 800c6dc:	f1b8 0f00 	cmp.w	r8, #0
 800c6e0:	d020      	beq.n	800c724 <rcl_get_security_options_from_environment+0x7c>
 800c6e2:	4817      	ldr	r0, [pc, #92]	@ (800c740 <rcl_get_security_options_from_environment+0x98>)
 800c6e4:	a901      	add	r1, sp, #4
 800c6e6:	f000 f95f 	bl	800c9a8 <rcutils_get_env>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d1e9      	bne.n	800c6c2 <rcl_get_security_options_from_environment+0x1a>
 800c6ee:	4915      	ldr	r1, [pc, #84]	@ (800c744 <rcl_get_security_options_from_environment+0x9c>)
 800c6f0:	9801      	ldr	r0, [sp, #4]
 800c6f2:	f7f3 fd75 	bl	80001e0 <strcmp>
 800c6f6:	fab0 f080 	clz	r0, r0
 800c6fa:	0940      	lsrs	r0, r0, #5
 800c6fc:	f888 0000 	strb.w	r0, [r8]
 800c700:	4639      	mov	r1, r7
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff ff66 	bl	800c5d4 <rcl_get_secure_root>
 800c708:	b170      	cbz	r0, 800c728 <rcl_get_security_options_from_environment+0x80>
 800c70a:	f8c8 0004 	str.w	r0, [r8, #4]
 800c70e:	4628      	mov	r0, r5
 800c710:	b002      	add	sp, #8
 800c712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c716:	4625      	mov	r5, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	f888 4000 	strb.w	r4, [r8]
 800c71e:	b002      	add	sp, #8
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	250b      	movs	r5, #11
 800c726:	e7cd      	b.n	800c6c4 <rcl_get_security_options_from_environment+0x1c>
 800c728:	f898 5000 	ldrb.w	r5, [r8]
 800c72c:	f1a5 0501 	sub.w	r5, r5, #1
 800c730:	fab5 f585 	clz	r5, r5
 800c734:	096d      	lsrs	r5, r5, #5
 800c736:	e7c5      	b.n	800c6c4 <rcl_get_security_options_from_environment+0x1c>
 800c738:	08011a48 	.word	0x08011a48
 800c73c:	08011a5c 	.word	0x08011a5c
 800c740:	08011a64 	.word	0x08011a64
 800c744:	08011a7c 	.word	0x08011a7c

0800c748 <rcl_get_system_time>:
 800c748:	4608      	mov	r0, r1
 800c74a:	f000 bbd9 	b.w	800cf00 <rcutils_system_time_now>
 800c74e:	bf00      	nop

0800c750 <rcl_get_steady_time>:
 800c750:	4608      	mov	r0, r1
 800c752:	f000 bbfd 	b.w	800cf50 <rcutils_steady_time_now>
 800c756:	bf00      	nop

0800c758 <rcl_get_ros_time>:
 800c758:	7a03      	ldrb	r3, [r0, #8]
 800c75a:	b510      	push	{r4, lr}
 800c75c:	460c      	mov	r4, r1
 800c75e:	b133      	cbz	r3, 800c76e <rcl_get_ros_time+0x16>
 800c760:	2105      	movs	r1, #5
 800c762:	f000 f8eb 	bl	800c93c <__atomic_load_8>
 800c766:	e9c4 0100 	strd	r0, r1, [r4]
 800c76a:	2000      	movs	r0, #0
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c772:	4608      	mov	r0, r1
 800c774:	f000 bbc4 	b.w	800cf00 <rcutils_system_time_now>

0800c778 <rcl_clock_init>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	4610      	mov	r0, r2
 800c77e:	4614      	mov	r4, r2
 800c780:	460e      	mov	r6, r1
 800c782:	f7fc f82f 	bl	80087e4 <rcutils_allocator_is_valid>
 800c786:	b128      	cbz	r0, 800c794 <rcl_clock_init+0x1c>
 800c788:	2d03      	cmp	r5, #3
 800c78a:	d803      	bhi.n	800c794 <rcl_clock_init+0x1c>
 800c78c:	e8df f005 	tbb	[pc, r5]
 800c790:	06532e1d 	.word	0x06532e1d
 800c794:	f04f 0c0b 	mov.w	ip, #11
 800c798:	4660      	mov	r0, ip
 800c79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c79c:	2e00      	cmp	r6, #0
 800c79e:	d0f9      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	d0f7      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c7aa:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800c860 <rcl_clock_init+0xe8>
 800c7ae:	6133      	str	r3, [r6, #16]
 800c7b0:	f106 0514 	add.w	r5, r6, #20
 800c7b4:	469c      	mov	ip, r3
 800c7b6:	2703      	movs	r7, #3
 800c7b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	602b      	str	r3, [r5, #0]
 800c7c0:	7037      	strb	r7, [r6, #0]
 800c7c2:	f8c6 e00c 	str.w	lr, [r6, #12]
 800c7c6:	4660      	mov	r0, ip
 800c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ca:	2e00      	cmp	r6, #0
 800c7cc:	d0e2      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	7033      	strb	r3, [r6, #0]
 800c7d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c7d6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800c7da:	469c      	mov	ip, r3
 800c7dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7de:	f106 0514 	add.w	r5, r6, #20
 800c7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	602b      	str	r3, [r5, #0]
 800c7e8:	4660      	mov	r0, ip
 800c7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ec:	2e00      	cmp	r6, #0
 800c7ee:	d0d1      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c7f0:	2c00      	cmp	r4, #0
 800c7f2:	d0cf      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c7f4:	2700      	movs	r7, #0
 800c7f6:	7037      	strb	r7, [r6, #0]
 800c7f8:	46a4      	mov	ip, r4
 800c7fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7fe:	f106 0514 	add.w	r5, r6, #20
 800c802:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800c806:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800c80a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c80c:	f8dc 3000 	ldr.w	r3, [ip]
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	6921      	ldr	r1, [r4, #16]
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	2010      	movs	r0, #16
 800c818:	4798      	blx	r3
 800c81a:	6130      	str	r0, [r6, #16]
 800c81c:	b1d0      	cbz	r0, 800c854 <rcl_clock_init+0xdc>
 800c81e:	2200      	movs	r2, #0
 800c820:	2300      	movs	r3, #0
 800c822:	e9c0 2300 	strd	r2, r3, [r0]
 800c826:	2301      	movs	r3, #1
 800c828:	7207      	strb	r7, [r0, #8]
 800c82a:	4a0c      	ldr	r2, [pc, #48]	@ (800c85c <rcl_clock_init+0xe4>)
 800c82c:	7033      	strb	r3, [r6, #0]
 800c82e:	46bc      	mov	ip, r7
 800c830:	60f2      	str	r2, [r6, #12]
 800c832:	4660      	mov	r0, ip
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c836:	2e00      	cmp	r6, #0
 800c838:	d0ac      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c83a:	2c00      	cmp	r4, #0
 800c83c:	d0aa      	beq.n	800c794 <rcl_clock_init+0x1c>
 800c83e:	2300      	movs	r3, #0
 800c840:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c844:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800c864 <rcl_clock_init+0xec>
 800c848:	6133      	str	r3, [r6, #16]
 800c84a:	f106 0514 	add.w	r5, r6, #20
 800c84e:	469c      	mov	ip, r3
 800c850:	2702      	movs	r7, #2
 800c852:	e7b1      	b.n	800c7b8 <rcl_clock_init+0x40>
 800c854:	f04f 0c0a 	mov.w	ip, #10
 800c858:	e79e      	b.n	800c798 <rcl_clock_init+0x20>
 800c85a:	bf00      	nop
 800c85c:	0800c759 	.word	0x0800c759
 800c860:	0800c751 	.word	0x0800c751
 800c864:	0800c749 	.word	0x0800c749

0800c868 <rcl_validate_enclave_name_with_size>:
 800c868:	b378      	cbz	r0, 800c8ca <rcl_validate_enclave_name_with_size+0x62>
 800c86a:	b570      	push	{r4, r5, r6, lr}
 800c86c:	4615      	mov	r5, r2
 800c86e:	b0c2      	sub	sp, #264	@ 0x108
 800c870:	b302      	cbz	r2, 800c8b4 <rcl_validate_enclave_name_with_size+0x4c>
 800c872:	461e      	mov	r6, r3
 800c874:	466a      	mov	r2, sp
 800c876:	ab01      	add	r3, sp, #4
 800c878:	460c      	mov	r4, r1
 800c87a:	f000 fc2b 	bl	800d0d4 <rmw_validate_namespace_with_size>
 800c87e:	4684      	mov	ip, r0
 800c880:	b9e8      	cbnz	r0, 800c8be <rcl_validate_enclave_name_with_size+0x56>
 800c882:	9b00      	ldr	r3, [sp, #0]
 800c884:	b923      	cbnz	r3, 800c890 <rcl_validate_enclave_name_with_size+0x28>
 800c886:	2300      	movs	r3, #0
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	4660      	mov	r0, ip
 800c88c:	b042      	add	sp, #264	@ 0x108
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	2b07      	cmp	r3, #7
 800c892:	d007      	beq.n	800c8a4 <rcl_validate_enclave_name_with_size+0x3c>
 800c894:	1e5a      	subs	r2, r3, #1
 800c896:	2a05      	cmp	r2, #5
 800c898:	d833      	bhi.n	800c902 <rcl_validate_enclave_name_with_size+0x9a>
 800c89a:	e8df f002 	tbb	[pc, r2]
 800c89e:	2c2f      	.short	0x2c2f
 800c8a0:	1a232629 	.word	0x1a232629
 800c8a4:	2cff      	cmp	r4, #255	@ 0xff
 800c8a6:	d9ee      	bls.n	800c886 <rcl_validate_enclave_name_with_size+0x1e>
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	2e00      	cmp	r6, #0
 800c8ac:	d0ed      	beq.n	800c88a <rcl_validate_enclave_name_with_size+0x22>
 800c8ae:	23fe      	movs	r3, #254	@ 0xfe
 800c8b0:	6033      	str	r3, [r6, #0]
 800c8b2:	e7ea      	b.n	800c88a <rcl_validate_enclave_name_with_size+0x22>
 800c8b4:	f04f 0c0b 	mov.w	ip, #11
 800c8b8:	4660      	mov	r0, ip
 800c8ba:	b042      	add	sp, #264	@ 0x108
 800c8bc:	bd70      	pop	{r4, r5, r6, pc}
 800c8be:	f7ff f953 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800c8c2:	4684      	mov	ip, r0
 800c8c4:	4660      	mov	r0, ip
 800c8c6:	b042      	add	sp, #264	@ 0x108
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	f04f 0c0b 	mov.w	ip, #11
 800c8ce:	4660      	mov	r0, ip
 800c8d0:	4770      	bx	lr
 800c8d2:	2306      	movs	r3, #6
 800c8d4:	602b      	str	r3, [r5, #0]
 800c8d6:	2e00      	cmp	r6, #0
 800c8d8:	d0d7      	beq.n	800c88a <rcl_validate_enclave_name_with_size+0x22>
 800c8da:	9b01      	ldr	r3, [sp, #4]
 800c8dc:	6033      	str	r3, [r6, #0]
 800c8de:	4660      	mov	r0, ip
 800c8e0:	b042      	add	sp, #264	@ 0x108
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	2305      	movs	r3, #5
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	e7f5      	b.n	800c8d6 <rcl_validate_enclave_name_with_size+0x6e>
 800c8ea:	2304      	movs	r3, #4
 800c8ec:	602b      	str	r3, [r5, #0]
 800c8ee:	e7f2      	b.n	800c8d6 <rcl_validate_enclave_name_with_size+0x6e>
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	e7ef      	b.n	800c8d6 <rcl_validate_enclave_name_with_size+0x6e>
 800c8f6:	2302      	movs	r3, #2
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	e7ec      	b.n	800c8d6 <rcl_validate_enclave_name_with_size+0x6e>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	e7e9      	b.n	800c8d6 <rcl_validate_enclave_name_with_size+0x6e>
 800c902:	4a04      	ldr	r2, [pc, #16]	@ (800c914 <rcl_validate_enclave_name_with_size+0xac>)
 800c904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c908:	a802      	add	r0, sp, #8
 800c90a:	f000 f963 	bl	800cbd4 <rcutils_snprintf>
 800c90e:	f04f 0c01 	mov.w	ip, #1
 800c912:	e7ba      	b.n	800c88a <rcl_validate_enclave_name_with_size+0x22>
 800c914:	08011ac8 	.word	0x08011ac8

0800c918 <rcl_validate_enclave_name>:
 800c918:	b168      	cbz	r0, 800c936 <rcl_validate_enclave_name+0x1e>
 800c91a:	b570      	push	{r4, r5, r6, lr}
 800c91c:	460d      	mov	r5, r1
 800c91e:	4616      	mov	r6, r2
 800c920:	4604      	mov	r4, r0
 800c922:	f7f3 fc67 	bl	80001f4 <strlen>
 800c926:	4633      	mov	r3, r6
 800c928:	4601      	mov	r1, r0
 800c92a:	462a      	mov	r2, r5
 800c92c:	4620      	mov	r0, r4
 800c92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c932:	f7ff bf99 	b.w	800c868 <rcl_validate_enclave_name_with_size>
 800c936:	200b      	movs	r0, #11
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop

0800c93c <__atomic_load_8>:
 800c93c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800c940:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800c944:	4a15      	ldr	r2, [pc, #84]	@ (800c99c <__atomic_load_8+0x60>)
 800c946:	4b16      	ldr	r3, [pc, #88]	@ (800c9a0 <__atomic_load_8+0x64>)
 800c948:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c94c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800c950:	fb02 f101 	mul.w	r1, r2, r1
 800c954:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800c958:	fba3 2301 	umull	r2, r3, r3, r1
 800c95c:	091b      	lsrs	r3, r3, #4
 800c95e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c962:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800c966:	b4d0      	push	{r4, r6, r7}
 800c968:	4c0e      	ldr	r4, [pc, #56]	@ (800c9a4 <__atomic_load_8+0x68>)
 800c96a:	1ac9      	subs	r1, r1, r3
 800c96c:	1862      	adds	r2, r4, r1
 800c96e:	f04f 0c01 	mov.w	ip, #1
 800c972:	e8d2 3f4f 	ldrexb	r3, [r2]
 800c976:	e8c2 cf46 	strexb	r6, ip, [r2]
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	d1f9      	bne.n	800c972 <__atomic_load_8+0x36>
 800c97e:	f3bf 8f5b 	dmb	ish
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1f4      	bne.n	800c972 <__atomic_load_8+0x36>
 800c988:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c98c:	f3bf 8f5b 	dmb	ish
 800c990:	5463      	strb	r3, [r4, r1]
 800c992:	4630      	mov	r0, r6
 800c994:	4639      	mov	r1, r7
 800c996:	bcd0      	pop	{r4, r6, r7}
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	27d4eb2d 	.word	0x27d4eb2d
 800c9a0:	b21642c9 	.word	0xb21642c9
 800c9a4:	2000db18 	.word	0x2000db18

0800c9a8 <rcutils_get_env>:
 800c9a8:	b168      	cbz	r0, 800c9c6 <rcutils_get_env+0x1e>
 800c9aa:	b510      	push	{r4, lr}
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	b129      	cbz	r1, 800c9bc <rcutils_get_env+0x14>
 800c9b0:	f003 fb08 	bl	800ffc4 <getenv>
 800c9b4:	b120      	cbz	r0, 800c9c0 <rcutils_get_env+0x18>
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	bd10      	pop	{r4, pc}
 800c9bc:	4803      	ldr	r0, [pc, #12]	@ (800c9cc <rcutils_get_env+0x24>)
 800c9be:	bd10      	pop	{r4, pc}
 800c9c0:	4b03      	ldr	r3, [pc, #12]	@ (800c9d0 <rcutils_get_env+0x28>)
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	bd10      	pop	{r4, pc}
 800c9c6:	4803      	ldr	r0, [pc, #12]	@ (800c9d4 <rcutils_get_env+0x2c>)
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	08011b44 	.word	0x08011b44
 800c9d0:	08011c68 	.word	0x08011c68
 800c9d4:	08011b28 	.word	0x08011b28

0800c9d8 <rcutils_is_directory>:
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4770      	bx	lr

0800c9dc <rcutils_join_path>:
 800c9dc:	b082      	sub	sp, #8
 800c9de:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	b002      	add	sp, #8
 800c9e6:	4770      	bx	lr

0800c9e8 <rcutils_to_native_path>:
 800c9e8:	b084      	sub	sp, #16
 800c9ea:	a801      	add	r0, sp, #4
 800c9ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800c9f0:	b004      	add	sp, #16
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop

0800c9f8 <rcutils_format_string_limit>:
 800c9f8:	b40f      	push	{r0, r1, r2, r3}
 800c9fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fc:	b083      	sub	sp, #12
 800c9fe:	ac08      	add	r4, sp, #32
 800ca00:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ca02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ca06:	b34e      	cbz	r6, 800ca5c <rcutils_format_string_limit+0x64>
 800ca08:	a808      	add	r0, sp, #32
 800ca0a:	f7fb feeb 	bl	80087e4 <rcutils_allocator_is_valid>
 800ca0e:	b328      	cbz	r0, 800ca5c <rcutils_format_string_limit+0x64>
 800ca10:	2100      	movs	r1, #0
 800ca12:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ca14:	4632      	mov	r2, r6
 800ca16:	4608      	mov	r0, r1
 800ca18:	e9cd 3300 	strd	r3, r3, [sp]
 800ca1c:	f000 f8f4 	bl	800cc08 <rcutils_vsnprintf>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	4605      	mov	r5, r0
 800ca24:	d01a      	beq.n	800ca5c <rcutils_format_string_limit+0x64>
 800ca26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca2a:	1c47      	adds	r7, r0, #1
 800ca2c:	429f      	cmp	r7, r3
 800ca2e:	bf84      	itt	hi
 800ca30:	461f      	movhi	r7, r3
 800ca32:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ca36:	4638      	mov	r0, r7
 800ca38:	9b08      	ldr	r3, [sp, #32]
 800ca3a:	4798      	blx	r3
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	b168      	cbz	r0, 800ca5c <rcutils_format_string_limit+0x64>
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	4632      	mov	r2, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f000 f8df 	bl	800cc08 <rcutils_vsnprintf>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	db02      	blt.n	800ca54 <rcutils_format_string_limit+0x5c>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	5563      	strb	r3, [r4, r5]
 800ca52:	e004      	b.n	800ca5e <rcutils_format_string_limit+0x66>
 800ca54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca58:	4620      	mov	r0, r4
 800ca5a:	4798      	blx	r3
 800ca5c:	2400      	movs	r4, #0
 800ca5e:	4620      	mov	r0, r4
 800ca60:	b003      	add	sp, #12
 800ca62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca66:	b004      	add	sp, #16
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop

0800ca6c <rcutils_repl_str>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	ed2d 8b02 	vpush	{d8}
 800ca74:	b087      	sub	sp, #28
 800ca76:	4680      	mov	r8, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	f8cd 8004 	str.w	r8, [sp, #4]
 800ca7e:	ee08 2a10 	vmov	s16, r2
 800ca82:	468a      	mov	sl, r1
 800ca84:	4699      	mov	r9, r3
 800ca86:	f7f3 fbb5 	bl	80001f4 <strlen>
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	4647      	mov	r7, r8
 800ca8e:	9002      	str	r0, [sp, #8]
 800ca90:	46b3      	mov	fp, r6
 800ca92:	2510      	movs	r5, #16
 800ca94:	46b0      	mov	r8, r6
 800ca96:	e01d      	b.n	800cad4 <rcutils_repl_str+0x68>
 800ca98:	f10b 0b01 	add.w	fp, fp, #1
 800ca9c:	455e      	cmp	r6, fp
 800ca9e:	d211      	bcs.n	800cac4 <rcutils_repl_str+0x58>
 800caa0:	442e      	add	r6, r5
 800caa2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800caa6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800caaa:	00b1      	lsls	r1, r6, #2
 800caac:	4798      	blx	r3
 800caae:	2800      	cmp	r0, #0
 800cab0:	f000 8088 	beq.w	800cbc4 <rcutils_repl_str+0x158>
 800cab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cab8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800cabc:	4680      	mov	r8, r0
 800cabe:	bf28      	it	cs
 800cac0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800cac4:	9a01      	ldr	r2, [sp, #4]
 800cac6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800caca:	1aa2      	subs	r2, r4, r2
 800cacc:	f843 2c04 	str.w	r2, [r3, #-4]
 800cad0:	9b02      	ldr	r3, [sp, #8]
 800cad2:	18e7      	adds	r7, r4, r3
 800cad4:	4651      	mov	r1, sl
 800cad6:	4638      	mov	r0, r7
 800cad8:	f003 fe3f 	bl	801075a <strstr>
 800cadc:	4604      	mov	r4, r0
 800cade:	4640      	mov	r0, r8
 800cae0:	2c00      	cmp	r4, #0
 800cae2:	d1d9      	bne.n	800ca98 <rcutils_repl_str+0x2c>
 800cae4:	46b8      	mov	r8, r7
 800cae6:	4607      	mov	r7, r0
 800cae8:	4640      	mov	r0, r8
 800caea:	f7f3 fb83 	bl	80001f4 <strlen>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	eba8 0303 	sub.w	r3, r8, r3
 800caf4:	181c      	adds	r4, r3, r0
 800caf6:	9404      	str	r4, [sp, #16]
 800caf8:	f1bb 0f00 	cmp.w	fp, #0
 800cafc:	d04a      	beq.n	800cb94 <rcutils_repl_str+0x128>
 800cafe:	ee18 0a10 	vmov	r0, s16
 800cb02:	f7f3 fb77 	bl	80001f4 <strlen>
 800cb06:	9b02      	ldr	r3, [sp, #8]
 800cb08:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cb0c:	1ac3      	subs	r3, r0, r3
 800cb0e:	fb0b 4303 	mla	r3, fp, r3, r4
 800cb12:	461a      	mov	r2, r3
 800cb14:	9305      	str	r3, [sp, #20]
 800cb16:	4606      	mov	r6, r0
 800cb18:	f8d9 3000 	ldr.w	r3, [r9]
 800cb1c:	1c50      	adds	r0, r2, #1
 800cb1e:	4798      	blx	r3
 800cb20:	9003      	str	r0, [sp, #12]
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d04f      	beq.n	800cbc6 <rcutils_repl_str+0x15a>
 800cb26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	f003 feb6 	bl	801089e <memcpy>
 800cb32:	683d      	ldr	r5, [r7, #0]
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	9701      	str	r7, [sp, #4]
 800cb38:	46ba      	mov	sl, r7
 800cb3a:	441d      	add	r5, r3
 800cb3c:	9f02      	ldr	r7, [sp, #8]
 800cb3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb42:	2401      	movs	r4, #1
 800cb44:	46d1      	mov	r9, sl
 800cb46:	ee18 aa10 	vmov	sl, s16
 800cb4a:	e00a      	b.n	800cb62 <rcutils_repl_str+0xf6>
 800cb4c:	f8d9 5000 	ldr.w	r5, [r9]
 800cb50:	1aaa      	subs	r2, r5, r2
 800cb52:	1885      	adds	r5, r0, r2
 800cb54:	f003 fea3 	bl	801089e <memcpy>
 800cb58:	45a3      	cmp	fp, r4
 800cb5a:	f104 0201 	add.w	r2, r4, #1
 800cb5e:	d935      	bls.n	800cbcc <rcutils_repl_str+0x160>
 800cb60:	4614      	mov	r4, r2
 800cb62:	4632      	mov	r2, r6
 800cb64:	4651      	mov	r1, sl
 800cb66:	4628      	mov	r0, r5
 800cb68:	f003 fe99 	bl	801089e <memcpy>
 800cb6c:	f859 2b04 	ldr.w	r2, [r9], #4
 800cb70:	45a3      	cmp	fp, r4
 800cb72:	443a      	add	r2, r7
 800cb74:	eb05 0006 	add.w	r0, r5, r6
 800cb78:	eb08 0102 	add.w	r1, r8, r2
 800cb7c:	d1e6      	bne.n	800cb4c <rcutils_repl_str+0xe0>
 800cb7e:	9b04      	ldr	r3, [sp, #16]
 800cb80:	1a9a      	subs	r2, r3, r2
 800cb82:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cb86:	f003 fe8a 	bl	801089e <memcpy>
 800cb8a:	9a03      	ldr	r2, [sp, #12]
 800cb8c:	9905      	ldr	r1, [sp, #20]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	5453      	strb	r3, [r2, r1]
 800cb92:	e00b      	b.n	800cbac <rcutils_repl_str+0x140>
 800cb94:	4620      	mov	r0, r4
 800cb96:	f8d9 3000 	ldr.w	r3, [r9]
 800cb9a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cb9e:	3001      	adds	r0, #1
 800cba0:	4798      	blx	r3
 800cba2:	9003      	str	r0, [sp, #12]
 800cba4:	b110      	cbz	r0, 800cbac <rcutils_repl_str+0x140>
 800cba6:	9901      	ldr	r1, [sp, #4]
 800cba8:	f003 fe71 	bl	801088e <strcpy>
 800cbac:	4638      	mov	r0, r7
 800cbae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cbb2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cbb6:	4798      	blx	r3
 800cbb8:	9803      	ldr	r0, [sp, #12]
 800cbba:	b007      	add	sp, #28
 800cbbc:	ecbd 8b02 	vpop	{d8}
 800cbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc4:	4647      	mov	r7, r8
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	9303      	str	r3, [sp, #12]
 800cbca:	e7ef      	b.n	800cbac <rcutils_repl_str+0x140>
 800cbcc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cbd0:	e7db      	b.n	800cb8a <rcutils_repl_str+0x11e>
 800cbd2:	bf00      	nop

0800cbd4 <rcutils_snprintf>:
 800cbd4:	b40c      	push	{r2, r3}
 800cbd6:	b530      	push	{r4, r5, lr}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	ab06      	add	r3, sp, #24
 800cbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	b152      	cbz	r2, 800cbfa <rcutils_snprintf+0x26>
 800cbe4:	b138      	cbz	r0, 800cbf6 <rcutils_snprintf+0x22>
 800cbe6:	b141      	cbz	r1, 800cbfa <rcutils_snprintf+0x26>
 800cbe8:	f003 fd82 	bl	80106f0 <vsniprintf>
 800cbec:	b003      	add	sp, #12
 800cbee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbf2:	b002      	add	sp, #8
 800cbf4:	4770      	bx	lr
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	d0f6      	beq.n	800cbe8 <rcutils_snprintf+0x14>
 800cbfa:	f003 fe1b 	bl	8010834 <__errno>
 800cbfe:	2316      	movs	r3, #22
 800cc00:	6003      	str	r3, [r0, #0]
 800cc02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc06:	e7f1      	b.n	800cbec <rcutils_snprintf+0x18>

0800cc08 <rcutils_vsnprintf>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	b13a      	cbz	r2, 800cc1c <rcutils_vsnprintf+0x14>
 800cc0c:	b120      	cbz	r0, 800cc18 <rcutils_vsnprintf+0x10>
 800cc0e:	b129      	cbz	r1, 800cc1c <rcutils_vsnprintf+0x14>
 800cc10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc14:	f003 bd6c 	b.w	80106f0 <vsniprintf>
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	d0f9      	beq.n	800cc10 <rcutils_vsnprintf+0x8>
 800cc1c:	f003 fe0a 	bl	8010834 <__errno>
 800cc20:	2316      	movs	r3, #22
 800cc22:	6003      	str	r3, [r0, #0]
 800cc24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
 800cc2a:	bf00      	nop

0800cc2c <rcutils_strdup>:
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	b570      	push	{r4, r5, r6, lr}
 800cc30:	b082      	sub	sp, #8
 800cc32:	ac07      	add	r4, sp, #28
 800cc34:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800cc38:	4605      	mov	r5, r0
 800cc3a:	b1b0      	cbz	r0, 800cc6a <rcutils_strdup+0x3e>
 800cc3c:	f7f3 fada 	bl	80001f4 <strlen>
 800cc40:	1c42      	adds	r2, r0, #1
 800cc42:	9b07      	ldr	r3, [sp, #28]
 800cc44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc46:	9201      	str	r2, [sp, #4]
 800cc48:	4606      	mov	r6, r0
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4798      	blx	r3
 800cc4e:	4604      	mov	r4, r0
 800cc50:	b128      	cbz	r0, 800cc5e <rcutils_strdup+0x32>
 800cc52:	9a01      	ldr	r2, [sp, #4]
 800cc54:	4629      	mov	r1, r5
 800cc56:	f003 fe22 	bl	801089e <memcpy>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	55a3      	strb	r3, [r4, r6]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	b002      	add	sp, #8
 800cc62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc66:	b004      	add	sp, #16
 800cc68:	4770      	bx	lr
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	e7f7      	b.n	800cc5e <rcutils_strdup+0x32>
 800cc6e:	bf00      	nop

0800cc70 <rcutils_strndup>:
 800cc70:	b082      	sub	sp, #8
 800cc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc74:	ac06      	add	r4, sp, #24
 800cc76:	e884 000c 	stmia.w	r4, {r2, r3}
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	b188      	cbz	r0, 800cca2 <rcutils_strndup+0x32>
 800cc7e:	1c4f      	adds	r7, r1, #1
 800cc80:	460e      	mov	r6, r1
 800cc82:	4638      	mov	r0, r7
 800cc84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc86:	4790      	blx	r2
 800cc88:	4604      	mov	r4, r0
 800cc8a:	b128      	cbz	r0, 800cc98 <rcutils_strndup+0x28>
 800cc8c:	463a      	mov	r2, r7
 800cc8e:	4629      	mov	r1, r5
 800cc90:	f003 fe05 	bl	801089e <memcpy>
 800cc94:	2300      	movs	r3, #0
 800cc96:	55a3      	strb	r3, [r4, r6]
 800cc98:	4620      	mov	r0, r4
 800cc9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc9e:	b002      	add	sp, #8
 800cca0:	4770      	bx	lr
 800cca2:	4604      	mov	r4, r0
 800cca4:	e7f8      	b.n	800cc98 <rcutils_strndup+0x28>
 800cca6:	bf00      	nop

0800cca8 <rcutils_get_zero_initialized_string_map>:
 800cca8:	4b01      	ldr	r3, [pc, #4]	@ (800ccb0 <rcutils_get_zero_initialized_string_map+0x8>)
 800ccaa:	2000      	movs	r0, #0
 800ccac:	6018      	str	r0, [r3, #0]
 800ccae:	4770      	bx	lr
 800ccb0:	2000db30 	.word	0x2000db30

0800ccb4 <rcutils_string_map_reserve>:
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d05f      	beq.n	800cd78 <rcutils_string_map_reserve+0xc4>
 800ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	6801      	ldr	r1, [r0, #0]
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	b129      	cbz	r1, 800ccd2 <rcutils_string_map_reserve+0x1e>
 800ccc6:	68cb      	ldr	r3, [r1, #12]
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	d906      	bls.n	800ccda <rcutils_string_map_reserve+0x26>
 800cccc:	461c      	mov	r4, r3
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d1f9      	bne.n	800ccc6 <rcutils_string_map_reserve+0x12>
 800ccd2:	201f      	movs	r0, #31
 800ccd4:	b002      	add	sp, #8
 800ccd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccda:	688b      	ldr	r3, [r1, #8]
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d047      	beq.n	800cd70 <rcutils_string_map_reserve+0xbc>
 800cce0:	6a0e      	ldr	r6, [r1, #32]
 800cce2:	2c00      	cmp	r4, #0
 800cce4:	d034      	beq.n	800cd50 <rcutils_string_map_reserve+0x9c>
 800cce6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ccea:	d243      	bcs.n	800cd74 <rcutils_string_map_reserve+0xc0>
 800ccec:	00a7      	lsls	r7, r4, #2
 800ccee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800ccf2:	6808      	ldr	r0, [r1, #0]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	47c0      	blx	r8
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d03a      	beq.n	800cd74 <rcutils_string_map_reserve+0xc0>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	4632      	mov	r2, r6
 800cd02:	6018      	str	r0, [r3, #0]
 800cd04:	4639      	mov	r1, r7
 800cd06:	6858      	ldr	r0, [r3, #4]
 800cd08:	47c0      	blx	r8
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d032      	beq.n	800cd74 <rcutils_string_map_reserve+0xc0>
 800cd0e:	682d      	ldr	r5, [r5, #0]
 800cd10:	68ab      	ldr	r3, [r5, #8]
 800cd12:	6068      	str	r0, [r5, #4]
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	d226      	bcs.n	800cd66 <rcutils_string_map_reserve+0xb2>
 800cd18:	682a      	ldr	r2, [r5, #0]
 800cd1a:	eb00 0c07 	add.w	ip, r0, r7
 800cd1e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800cd22:	45e6      	cmp	lr, ip
 800cd24:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800cd28:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800cd2c:	d203      	bcs.n	800cd36 <rcutils_string_map_reserve+0x82>
 800cd2e:	eb02 0c07 	add.w	ip, r2, r7
 800cd32:	4566      	cmp	r6, ip
 800cd34:	d322      	bcc.n	800cd7c <rcutils_string_map_reserve+0xc8>
 800cd36:	1ae3      	subs	r3, r4, r3
 800cd38:	009a      	lsls	r2, r3, #2
 800cd3a:	4670      	mov	r0, lr
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	9201      	str	r2, [sp, #4]
 800cd40:	f003 fce4 	bl	801070c <memset>
 800cd44:	9a01      	ldr	r2, [sp, #4]
 800cd46:	2100      	movs	r1, #0
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f003 fcdf 	bl	801070c <memset>
 800cd4e:	e00a      	b.n	800cd66 <rcutils_string_map_reserve+0xb2>
 800cd50:	694f      	ldr	r7, [r1, #20]
 800cd52:	6808      	ldr	r0, [r1, #0]
 800cd54:	4631      	mov	r1, r6
 800cd56:	47b8      	blx	r7
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	6858      	ldr	r0, [r3, #4]
 800cd5e:	601c      	str	r4, [r3, #0]
 800cd60:	47b8      	blx	r7
 800cd62:	682d      	ldr	r5, [r5, #0]
 800cd64:	606c      	str	r4, [r5, #4]
 800cd66:	2000      	movs	r0, #0
 800cd68:	60ac      	str	r4, [r5, #8]
 800cd6a:	b002      	add	sp, #8
 800cd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd70:	2000      	movs	r0, #0
 800cd72:	e7af      	b.n	800ccd4 <rcutils_string_map_reserve+0x20>
 800cd74:	200a      	movs	r0, #10
 800cd76:	e7ad      	b.n	800ccd4 <rcutils_string_map_reserve+0x20>
 800cd78:	200b      	movs	r0, #11
 800cd7a:	4770      	bx	lr
 800cd7c:	1f0b      	subs	r3, r1, #4
 800cd7e:	4418      	add	r0, r3
 800cd80:	4413      	add	r3, r2
 800cd82:	3a04      	subs	r2, #4
 800cd84:	4417      	add	r7, r2
 800cd86:	2200      	movs	r2, #0
 800cd88:	f843 2f04 	str.w	r2, [r3, #4]!
 800cd8c:	42bb      	cmp	r3, r7
 800cd8e:	f840 2f04 	str.w	r2, [r0, #4]!
 800cd92:	d1f9      	bne.n	800cd88 <rcutils_string_map_reserve+0xd4>
 800cd94:	e7e7      	b.n	800cd66 <rcutils_string_map_reserve+0xb2>
 800cd96:	bf00      	nop

0800cd98 <rcutils_string_map_init>:
 800cd98:	b082      	sub	sp, #8
 800cd9a:	b570      	push	{r4, r5, r6, lr}
 800cd9c:	ac04      	add	r4, sp, #16
 800cd9e:	e884 000c 	stmia.w	r4, {r2, r3}
 800cda2:	b380      	cbz	r0, 800ce06 <rcutils_string_map_init+0x6e>
 800cda4:	6806      	ldr	r6, [r0, #0]
 800cda6:	4604      	mov	r4, r0
 800cda8:	b12e      	cbz	r6, 800cdb6 <rcutils_string_map_init+0x1e>
 800cdaa:	251e      	movs	r5, #30
 800cdac:	4628      	mov	r0, r5
 800cdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdb2:	b002      	add	sp, #8
 800cdb4:	4770      	bx	lr
 800cdb6:	a804      	add	r0, sp, #16
 800cdb8:	460d      	mov	r5, r1
 800cdba:	f7fb fd13 	bl	80087e4 <rcutils_allocator_is_valid>
 800cdbe:	b310      	cbz	r0, 800ce06 <rcutils_string_map_init+0x6e>
 800cdc0:	9b04      	ldr	r3, [sp, #16]
 800cdc2:	9908      	ldr	r1, [sp, #32]
 800cdc4:	2024      	movs	r0, #36	@ 0x24
 800cdc6:	4798      	blx	r3
 800cdc8:	6020      	str	r0, [r4, #0]
 800cdca:	b310      	cbz	r0, 800ce12 <rcutils_string_map_init+0x7a>
 800cdcc:	f10d 0e10 	add.w	lr, sp, #16
 800cdd0:	e9c0 6600 	strd	r6, r6, [r0]
 800cdd4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800cdd8:	f100 0c10 	add.w	ip, r0, #16
 800cddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cde0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cde4:	f8de 3000 	ldr.w	r3, [lr]
 800cde8:	f8cc 3000 	str.w	r3, [ip]
 800cdec:	4629      	mov	r1, r5
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f7ff ff60 	bl	800ccb4 <rcutils_string_map_reserve>
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d0d8      	beq.n	800cdac <rcutils_string_map_init+0x14>
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	9908      	ldr	r1, [sp, #32]
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	4798      	blx	r3
 800ce02:	6026      	str	r6, [r4, #0]
 800ce04:	e7d2      	b.n	800cdac <rcutils_string_map_init+0x14>
 800ce06:	250b      	movs	r5, #11
 800ce08:	4628      	mov	r0, r5
 800ce0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce0e:	b002      	add	sp, #8
 800ce10:	4770      	bx	lr
 800ce12:	250a      	movs	r5, #10
 800ce14:	e7ca      	b.n	800cdac <rcutils_string_map_init+0x14>
 800ce16:	bf00      	nop

0800ce18 <rcutils_string_map_fini>:
 800ce18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d03a      	beq.n	800ce98 <rcutils_string_map_fini+0x80>
 800ce22:	6804      	ldr	r4, [r0, #0]
 800ce24:	4606      	mov	r6, r0
 800ce26:	2c00      	cmp	r4, #0
 800ce28:	d032      	beq.n	800ce90 <rcutils_string_map_fini+0x78>
 800ce2a:	68a3      	ldr	r3, [r4, #8]
 800ce2c:	b32b      	cbz	r3, 800ce7a <rcutils_string_map_fini+0x62>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	6822      	ldr	r2, [r4, #0]
 800ce32:	462f      	mov	r7, r5
 800ce34:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ce38:	b1e0      	cbz	r0, 800ce74 <rcutils_string_map_fini+0x5c>
 800ce3a:	6a21      	ldr	r1, [r4, #32]
 800ce3c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800ce40:	9101      	str	r1, [sp, #4]
 800ce42:	47c0      	blx	r8
 800ce44:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce48:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800ce4c:	9901      	ldr	r1, [sp, #4]
 800ce4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce52:	47c0      	blx	r8
 800ce54:	68e3      	ldr	r3, [r4, #12]
 800ce56:	6862      	ldr	r2, [r4, #4]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800ce5e:	60e3      	str	r3, [r4, #12]
 800ce60:	6834      	ldr	r4, [r6, #0]
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	3501      	adds	r5, #1
 800ce66:	429d      	cmp	r5, r3
 800ce68:	d207      	bcs.n	800ce7a <rcutils_string_map_fini+0x62>
 800ce6a:	6822      	ldr	r2, [r4, #0]
 800ce6c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d1e2      	bne.n	800ce3a <rcutils_string_map_fini+0x22>
 800ce74:	3501      	adds	r5, #1
 800ce76:	429d      	cmp	r5, r3
 800ce78:	d3dc      	bcc.n	800ce34 <rcutils_string_map_fini+0x1c>
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff ff19 	bl	800ccb4 <rcutils_string_map_reserve>
 800ce82:	4604      	mov	r4, r0
 800ce84:	b920      	cbnz	r0, 800ce90 <rcutils_string_map_fini+0x78>
 800ce86:	6830      	ldr	r0, [r6, #0]
 800ce88:	6943      	ldr	r3, [r0, #20]
 800ce8a:	6a01      	ldr	r1, [r0, #32]
 800ce8c:	4798      	blx	r3
 800ce8e:	6034      	str	r4, [r6, #0]
 800ce90:	4620      	mov	r0, r4
 800ce92:	b002      	add	sp, #8
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	240b      	movs	r4, #11
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	b002      	add	sp, #8
 800ce9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea2:	bf00      	nop

0800cea4 <rcutils_string_map_getn>:
 800cea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	b300      	cbz	r0, 800ceec <rcutils_string_map_getn+0x48>
 800ceaa:	6807      	ldr	r7, [r0, #0]
 800ceac:	b1ff      	cbz	r7, 800ceee <rcutils_string_map_getn+0x4a>
 800ceae:	4688      	mov	r8, r1
 800ceb0:	b1e1      	cbz	r1, 800ceec <rcutils_string_map_getn+0x48>
 800ceb2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800ceb6:	683e      	ldr	r6, [r7, #0]
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	d016      	beq.n	800ceec <rcutils_string_map_getn+0x48>
 800cebe:	4691      	mov	r9, r2
 800cec0:	3e04      	subs	r6, #4
 800cec2:	2400      	movs	r4, #0
 800cec4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800cec8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cecc:	4628      	mov	r0, r5
 800cece:	3401      	adds	r4, #1
 800ced0:	b155      	cbz	r5, 800cee8 <rcutils_string_map_getn+0x44>
 800ced2:	f7f3 f98f 	bl	80001f4 <strlen>
 800ced6:	4548      	cmp	r0, r9
 800ced8:	4602      	mov	r2, r0
 800ceda:	4629      	mov	r1, r5
 800cedc:	bf38      	it	cc
 800cede:	464a      	movcc	r2, r9
 800cee0:	4640      	mov	r0, r8
 800cee2:	f003 fc28 	bl	8010736 <strncmp>
 800cee6:	b128      	cbz	r0, 800cef4 <rcutils_string_map_getn+0x50>
 800cee8:	45a2      	cmp	sl, r4
 800ceea:	d1eb      	bne.n	800cec4 <rcutils_string_map_getn+0x20>
 800ceec:	2700      	movs	r7, #0
 800ceee:	4638      	mov	r0, r7
 800cef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f853 700b 	ldr.w	r7, [r3, fp]
 800cefa:	4638      	mov	r0, r7
 800cefc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf00 <rcutils_system_time_now>:
 800cf00:	b308      	cbz	r0, 800cf46 <rcutils_system_time_now+0x46>
 800cf02:	b570      	push	{r4, r5, r6, lr}
 800cf04:	b084      	sub	sp, #16
 800cf06:	4604      	mov	r4, r0
 800cf08:	4669      	mov	r1, sp
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	f7f4 f8b4 	bl	8001078 <clock_gettime>
 800cf10:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	db13      	blt.n	800cf40 <rcutils_system_time_now+0x40>
 800cf18:	9902      	ldr	r1, [sp, #8]
 800cf1a:	2900      	cmp	r1, #0
 800cf1c:	db0d      	blt.n	800cf3a <rcutils_system_time_now+0x3a>
 800cf1e:	4e0b      	ldr	r6, [pc, #44]	@ (800cf4c <rcutils_system_time_now+0x4c>)
 800cf20:	fba3 3206 	umull	r3, r2, r3, r6
 800cf24:	185b      	adds	r3, r3, r1
 800cf26:	fb06 2205 	mla	r2, r6, r5, r2
 800cf2a:	f04f 0000 	mov.w	r0, #0
 800cf2e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf32:	e9c4 3200 	strd	r3, r2, [r4]
 800cf36:	b004      	add	sp, #16
 800cf38:	bd70      	pop	{r4, r5, r6, pc}
 800cf3a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf3e:	d1ee      	bne.n	800cf1e <rcutils_system_time_now+0x1e>
 800cf40:	2002      	movs	r0, #2
 800cf42:	b004      	add	sp, #16
 800cf44:	bd70      	pop	{r4, r5, r6, pc}
 800cf46:	200b      	movs	r0, #11
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	3b9aca00 	.word	0x3b9aca00

0800cf50 <rcutils_steady_time_now>:
 800cf50:	b308      	cbz	r0, 800cf96 <rcutils_steady_time_now+0x46>
 800cf52:	b570      	push	{r4, r5, r6, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	4604      	mov	r4, r0
 800cf58:	4669      	mov	r1, sp
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	f7f4 f88c 	bl	8001078 <clock_gettime>
 800cf60:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf64:	2d00      	cmp	r5, #0
 800cf66:	db13      	blt.n	800cf90 <rcutils_steady_time_now+0x40>
 800cf68:	9902      	ldr	r1, [sp, #8]
 800cf6a:	2900      	cmp	r1, #0
 800cf6c:	db0d      	blt.n	800cf8a <rcutils_steady_time_now+0x3a>
 800cf6e:	4e0b      	ldr	r6, [pc, #44]	@ (800cf9c <rcutils_steady_time_now+0x4c>)
 800cf70:	fba3 3206 	umull	r3, r2, r3, r6
 800cf74:	185b      	adds	r3, r3, r1
 800cf76:	fb06 2205 	mla	r2, r6, r5, r2
 800cf7a:	f04f 0000 	mov.w	r0, #0
 800cf7e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf82:	e9c4 3200 	strd	r3, r2, [r4]
 800cf86:	b004      	add	sp, #16
 800cf88:	bd70      	pop	{r4, r5, r6, pc}
 800cf8a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf8e:	d1ee      	bne.n	800cf6e <rcutils_steady_time_now+0x1e>
 800cf90:	2002      	movs	r0, #2
 800cf92:	b004      	add	sp, #16
 800cf94:	bd70      	pop	{r4, r5, r6, pc}
 800cf96:	200b      	movs	r0, #11
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	3b9aca00 	.word	0x3b9aca00

0800cfa0 <rmw_get_zero_initialized_context>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	3010      	adds	r0, #16
 800cfa6:	f000 f80b 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2000      	movs	r0, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	e9c4 0100 	strd	r0, r1, [r4]
 800cfb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800cfb8:	60a3      	str	r3, [r4, #8]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	bf00      	nop

0800cfc0 <rmw_get_zero_initialized_init_options>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	2238      	movs	r2, #56	@ 0x38
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f003 fba0 	bl	801070c <memset>
 800cfcc:	f104 0010 	add.w	r0, r4, #16
 800cfd0:	f000 f806 	bl	800cfe0 <rmw_get_default_security_options>
 800cfd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfd8:	60e3      	str	r3, [r4, #12]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	bf00      	nop

0800cfe0 <rmw_get_default_security_options>:
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	7002      	strb	r2, [r0, #0]
 800cfe4:	6042      	str	r2, [r0, #4]
 800cfe6:	4770      	bx	lr

0800cfe8 <rmw_validate_full_topic_name>:
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d057      	beq.n	800d09c <rmw_validate_full_topic_name+0xb4>
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	460d      	mov	r5, r1
 800cff2:	2900      	cmp	r1, #0
 800cff4:	d054      	beq.n	800d0a0 <rmw_validate_full_topic_name+0xb8>
 800cff6:	4616      	mov	r6, r2
 800cff8:	4604      	mov	r4, r0
 800cffa:	f7f3 f8fb 	bl	80001f4 <strlen>
 800cffe:	b148      	cbz	r0, 800d014 <rmw_validate_full_topic_name+0x2c>
 800d000:	7823      	ldrb	r3, [r4, #0]
 800d002:	2b2f      	cmp	r3, #47	@ 0x2f
 800d004:	d00d      	beq.n	800d022 <rmw_validate_full_topic_name+0x3a>
 800d006:	2302      	movs	r3, #2
 800d008:	602b      	str	r3, [r5, #0]
 800d00a:	b13e      	cbz	r6, 800d01c <rmw_validate_full_topic_name+0x34>
 800d00c:	2000      	movs	r0, #0
 800d00e:	6030      	str	r0, [r6, #0]
 800d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d014:	2301      	movs	r3, #1
 800d016:	602b      	str	r3, [r5, #0]
 800d018:	2e00      	cmp	r6, #0
 800d01a:	d1f7      	bne.n	800d00c <rmw_validate_full_topic_name+0x24>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d022:	1e43      	subs	r3, r0, #1
 800d024:	5ce2      	ldrb	r2, [r4, r3]
 800d026:	2a2f      	cmp	r2, #47	@ 0x2f
 800d028:	d03c      	beq.n	800d0a4 <rmw_validate_full_topic_name+0xbc>
 800d02a:	1e63      	subs	r3, r4, #1
 800d02c:	eb03 0800 	add.w	r8, r3, r0
 800d030:	f1c4 0e01 	rsb	lr, r4, #1
 800d034:	eb0e 0703 	add.w	r7, lr, r3
 800d038:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d03c:	f021 0220 	bic.w	r2, r1, #32
 800d040:	3a41      	subs	r2, #65	@ 0x41
 800d042:	2a19      	cmp	r2, #25
 800d044:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800d048:	d90b      	bls.n	800d062 <rmw_validate_full_topic_name+0x7a>
 800d04a:	295f      	cmp	r1, #95	@ 0x5f
 800d04c:	d009      	beq.n	800d062 <rmw_validate_full_topic_name+0x7a>
 800d04e:	f1bc 0f0a 	cmp.w	ip, #10
 800d052:	d906      	bls.n	800d062 <rmw_validate_full_topic_name+0x7a>
 800d054:	2304      	movs	r3, #4
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	2e00      	cmp	r6, #0
 800d05a:	d0df      	beq.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d05c:	6037      	str	r7, [r6, #0]
 800d05e:	2000      	movs	r0, #0
 800d060:	e7d6      	b.n	800d010 <rmw_validate_full_topic_name+0x28>
 800d062:	4543      	cmp	r3, r8
 800d064:	d1e6      	bne.n	800d034 <rmw_validate_full_topic_name+0x4c>
 800d066:	4f1a      	ldr	r7, [pc, #104]	@ (800d0d0 <rmw_validate_full_topic_name+0xe8>)
 800d068:	2301      	movs	r3, #1
 800d06a:	e004      	b.n	800d076 <rmw_validate_full_topic_name+0x8e>
 800d06c:	4298      	cmp	r0, r3
 800d06e:	f104 0401 	add.w	r4, r4, #1
 800d072:	d91c      	bls.n	800d0ae <rmw_validate_full_topic_name+0xc6>
 800d074:	4613      	mov	r3, r2
 800d076:	4298      	cmp	r0, r3
 800d078:	f103 0201 	add.w	r2, r3, #1
 800d07c:	d0f6      	beq.n	800d06c <rmw_validate_full_topic_name+0x84>
 800d07e:	7821      	ldrb	r1, [r4, #0]
 800d080:	292f      	cmp	r1, #47	@ 0x2f
 800d082:	d1f3      	bne.n	800d06c <rmw_validate_full_topic_name+0x84>
 800d084:	7861      	ldrb	r1, [r4, #1]
 800d086:	292f      	cmp	r1, #47	@ 0x2f
 800d088:	d01c      	beq.n	800d0c4 <rmw_validate_full_topic_name+0xdc>
 800d08a:	5dc9      	ldrb	r1, [r1, r7]
 800d08c:	0749      	lsls	r1, r1, #29
 800d08e:	d5ed      	bpl.n	800d06c <rmw_validate_full_topic_name+0x84>
 800d090:	2206      	movs	r2, #6
 800d092:	602a      	str	r2, [r5, #0]
 800d094:	2e00      	cmp	r6, #0
 800d096:	d0c1      	beq.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d098:	6033      	str	r3, [r6, #0]
 800d09a:	e7bf      	b.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d09c:	200b      	movs	r0, #11
 800d09e:	4770      	bx	lr
 800d0a0:	200b      	movs	r0, #11
 800d0a2:	e7b5      	b.n	800d010 <rmw_validate_full_topic_name+0x28>
 800d0a4:	2203      	movs	r2, #3
 800d0a6:	602a      	str	r2, [r5, #0]
 800d0a8:	2e00      	cmp	r6, #0
 800d0aa:	d1f5      	bne.n	800d098 <rmw_validate_full_topic_name+0xb0>
 800d0ac:	e7b6      	b.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d0ae:	28f7      	cmp	r0, #247	@ 0xf7
 800d0b0:	d802      	bhi.n	800d0b8 <rmw_validate_full_topic_name+0xd0>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	6028      	str	r0, [r5, #0]
 800d0b6:	e7ab      	b.n	800d010 <rmw_validate_full_topic_name+0x28>
 800d0b8:	2307      	movs	r3, #7
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	2e00      	cmp	r6, #0
 800d0be:	d0ad      	beq.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d0c0:	23f6      	movs	r3, #246	@ 0xf6
 800d0c2:	e7e9      	b.n	800d098 <rmw_validate_full_topic_name+0xb0>
 800d0c4:	2205      	movs	r2, #5
 800d0c6:	602a      	str	r2, [r5, #0]
 800d0c8:	2e00      	cmp	r6, #0
 800d0ca:	d1e5      	bne.n	800d098 <rmw_validate_full_topic_name+0xb0>
 800d0cc:	e7a6      	b.n	800d01c <rmw_validate_full_topic_name+0x34>
 800d0ce:	bf00      	nop
 800d0d0:	08012140 	.word	0x08012140

0800d0d4 <rmw_validate_namespace_with_size>:
 800d0d4:	b340      	cbz	r0, 800d128 <rmw_validate_namespace_with_size+0x54>
 800d0d6:	b570      	push	{r4, r5, r6, lr}
 800d0d8:	4614      	mov	r4, r2
 800d0da:	b0c2      	sub	sp, #264	@ 0x108
 800d0dc:	b332      	cbz	r2, 800d12c <rmw_validate_namespace_with_size+0x58>
 800d0de:	2901      	cmp	r1, #1
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	461e      	mov	r6, r3
 800d0e4:	d102      	bne.n	800d0ec <rmw_validate_namespace_with_size+0x18>
 800d0e6:	7803      	ldrb	r3, [r0, #0]
 800d0e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0ea:	d012      	beq.n	800d112 <rmw_validate_namespace_with_size+0x3e>
 800d0ec:	aa01      	add	r2, sp, #4
 800d0ee:	4669      	mov	r1, sp
 800d0f0:	f7ff ff7a 	bl	800cfe8 <rmw_validate_full_topic_name>
 800d0f4:	b978      	cbnz	r0, 800d116 <rmw_validate_namespace_with_size+0x42>
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	b14b      	cbz	r3, 800d10e <rmw_validate_namespace_with_size+0x3a>
 800d0fa:	2b07      	cmp	r3, #7
 800d0fc:	d007      	beq.n	800d10e <rmw_validate_namespace_with_size+0x3a>
 800d0fe:	1e5a      	subs	r2, r3, #1
 800d100:	2a05      	cmp	r2, #5
 800d102:	d82b      	bhi.n	800d15c <rmw_validate_namespace_with_size+0x88>
 800d104:	e8df f002 	tbb	[pc, r2]
 800d108:	1e212427 	.word	0x1e212427
 800d10c:	141b      	.short	0x141b
 800d10e:	2df5      	cmp	r5, #245	@ 0xf5
 800d110:	d803      	bhi.n	800d11a <rmw_validate_namespace_with_size+0x46>
 800d112:	2000      	movs	r0, #0
 800d114:	6020      	str	r0, [r4, #0]
 800d116:	b042      	add	sp, #264	@ 0x108
 800d118:	bd70      	pop	{r4, r5, r6, pc}
 800d11a:	2307      	movs	r3, #7
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	2e00      	cmp	r6, #0
 800d120:	d0f9      	beq.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d122:	23f4      	movs	r3, #244	@ 0xf4
 800d124:	6033      	str	r3, [r6, #0]
 800d126:	e7f6      	b.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d128:	200b      	movs	r0, #11
 800d12a:	4770      	bx	lr
 800d12c:	200b      	movs	r0, #11
 800d12e:	e7f2      	b.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d130:	2306      	movs	r3, #6
 800d132:	6023      	str	r3, [r4, #0]
 800d134:	2e00      	cmp	r6, #0
 800d136:	d0ee      	beq.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	6033      	str	r3, [r6, #0]
 800d13c:	e7eb      	b.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d13e:	2305      	movs	r3, #5
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	e7f7      	b.n	800d134 <rmw_validate_namespace_with_size+0x60>
 800d144:	2304      	movs	r3, #4
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	e7f4      	b.n	800d134 <rmw_validate_namespace_with_size+0x60>
 800d14a:	2303      	movs	r3, #3
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	e7f1      	b.n	800d134 <rmw_validate_namespace_with_size+0x60>
 800d150:	2302      	movs	r3, #2
 800d152:	6023      	str	r3, [r4, #0]
 800d154:	e7ee      	b.n	800d134 <rmw_validate_namespace_with_size+0x60>
 800d156:	2301      	movs	r3, #1
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	e7eb      	b.n	800d134 <rmw_validate_namespace_with_size+0x60>
 800d15c:	4a03      	ldr	r2, [pc, #12]	@ (800d16c <rmw_validate_namespace_with_size+0x98>)
 800d15e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d162:	a802      	add	r0, sp, #8
 800d164:	f7ff fd36 	bl	800cbd4 <rcutils_snprintf>
 800d168:	2001      	movs	r0, #1
 800d16a:	e7d4      	b.n	800d116 <rmw_validate_namespace_with_size+0x42>
 800d16c:	08011b60 	.word	0x08011b60

0800d170 <rmw_validate_namespace>:
 800d170:	b168      	cbz	r0, 800d18e <rmw_validate_namespace+0x1e>
 800d172:	b570      	push	{r4, r5, r6, lr}
 800d174:	460d      	mov	r5, r1
 800d176:	4616      	mov	r6, r2
 800d178:	4604      	mov	r4, r0
 800d17a:	f7f3 f83b 	bl	80001f4 <strlen>
 800d17e:	4633      	mov	r3, r6
 800d180:	4601      	mov	r1, r0
 800d182:	462a      	mov	r2, r5
 800d184:	4620      	mov	r0, r4
 800d186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d18a:	f7ff bfa3 	b.w	800d0d4 <rmw_validate_namespace_with_size>
 800d18e:	200b      	movs	r0, #11
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <rmw_namespace_validation_result_string>:
 800d194:	2807      	cmp	r0, #7
 800d196:	bf9a      	itte	ls
 800d198:	4b02      	ldrls	r3, [pc, #8]	@ (800d1a4 <rmw_namespace_validation_result_string+0x10>)
 800d19a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d19e:	4802      	ldrhi	r0, [pc, #8]	@ (800d1a8 <rmw_namespace_validation_result_string+0x14>)
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	08011d58 	.word	0x08011d58
 800d1a8:	08011bb0 	.word	0x08011bb0

0800d1ac <rmw_validate_node_name>:
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d03b      	beq.n	800d228 <rmw_validate_node_name+0x7c>
 800d1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	2900      	cmp	r1, #0
 800d1b8:	d038      	beq.n	800d22c <rmw_validate_node_name+0x80>
 800d1ba:	4616      	mov	r6, r2
 800d1bc:	4604      	mov	r4, r0
 800d1be:	f7f3 f819 	bl	80001f4 <strlen>
 800d1c2:	b1e0      	cbz	r0, 800d1fe <rmw_validate_node_name+0x52>
 800d1c4:	1e63      	subs	r3, r4, #1
 800d1c6:	eb03 0800 	add.w	r8, r3, r0
 800d1ca:	f1c4 0101 	rsb	r1, r4, #1
 800d1ce:	18cf      	adds	r7, r1, r3
 800d1d0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d1d4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d1d8:	f02e 0c20 	bic.w	ip, lr, #32
 800d1dc:	2a09      	cmp	r2, #9
 800d1de:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d1e2:	d914      	bls.n	800d20e <rmw_validate_node_name+0x62>
 800d1e4:	f1bc 0f19 	cmp.w	ip, #25
 800d1e8:	d911      	bls.n	800d20e <rmw_validate_node_name+0x62>
 800d1ea:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d1ee:	d00e      	beq.n	800d20e <rmw_validate_node_name+0x62>
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	602b      	str	r3, [r5, #0]
 800d1f4:	b106      	cbz	r6, 800d1f8 <rmw_validate_node_name+0x4c>
 800d1f6:	6037      	str	r7, [r6, #0]
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fe:	2301      	movs	r3, #1
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	2e00      	cmp	r6, #0
 800d204:	d0f8      	beq.n	800d1f8 <rmw_validate_node_name+0x4c>
 800d206:	2000      	movs	r0, #0
 800d208:	6030      	str	r0, [r6, #0]
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20e:	4543      	cmp	r3, r8
 800d210:	d1dd      	bne.n	800d1ce <rmw_validate_node_name+0x22>
 800d212:	7822      	ldrb	r2, [r4, #0]
 800d214:	4b0d      	ldr	r3, [pc, #52]	@ (800d24c <rmw_validate_node_name+0xa0>)
 800d216:	5cd3      	ldrb	r3, [r2, r3]
 800d218:	f013 0304 	ands.w	r3, r3, #4
 800d21c:	d110      	bne.n	800d240 <rmw_validate_node_name+0x94>
 800d21e:	28ff      	cmp	r0, #255	@ 0xff
 800d220:	d806      	bhi.n	800d230 <rmw_validate_node_name+0x84>
 800d222:	602b      	str	r3, [r5, #0]
 800d224:	4618      	mov	r0, r3
 800d226:	e7e8      	b.n	800d1fa <rmw_validate_node_name+0x4e>
 800d228:	200b      	movs	r0, #11
 800d22a:	4770      	bx	lr
 800d22c:	200b      	movs	r0, #11
 800d22e:	e7e4      	b.n	800d1fa <rmw_validate_node_name+0x4e>
 800d230:	2204      	movs	r2, #4
 800d232:	602a      	str	r2, [r5, #0]
 800d234:	2e00      	cmp	r6, #0
 800d236:	d0df      	beq.n	800d1f8 <rmw_validate_node_name+0x4c>
 800d238:	22fe      	movs	r2, #254	@ 0xfe
 800d23a:	6032      	str	r2, [r6, #0]
 800d23c:	4618      	mov	r0, r3
 800d23e:	e7dc      	b.n	800d1fa <rmw_validate_node_name+0x4e>
 800d240:	2303      	movs	r3, #3
 800d242:	602b      	str	r3, [r5, #0]
 800d244:	2e00      	cmp	r6, #0
 800d246:	d1de      	bne.n	800d206 <rmw_validate_node_name+0x5a>
 800d248:	e7d6      	b.n	800d1f8 <rmw_validate_node_name+0x4c>
 800d24a:	bf00      	nop
 800d24c:	08012140 	.word	0x08012140

0800d250 <rmw_node_name_validation_result_string>:
 800d250:	2804      	cmp	r0, #4
 800d252:	bf9a      	itte	ls
 800d254:	4b02      	ldrls	r3, [pc, #8]	@ (800d260 <rmw_node_name_validation_result_string+0x10>)
 800d256:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d25a:	4802      	ldrhi	r0, [pc, #8]	@ (800d264 <rmw_node_name_validation_result_string+0x14>)
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	08011e64 	.word	0x08011e64
 800d264:	08011d78 	.word	0x08011d78

0800d268 <get_memory>:
 800d268:	4603      	mov	r3, r0
 800d26a:	6840      	ldr	r0, [r0, #4]
 800d26c:	b158      	cbz	r0, 800d286 <get_memory+0x1e>
 800d26e:	6842      	ldr	r2, [r0, #4]
 800d270:	605a      	str	r2, [r3, #4]
 800d272:	b10a      	cbz	r2, 800d278 <get_memory+0x10>
 800d274:	2100      	movs	r1, #0
 800d276:	6011      	str	r1, [r2, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	6042      	str	r2, [r0, #4]
 800d27c:	b102      	cbz	r2, 800d280 <get_memory+0x18>
 800d27e:	6010      	str	r0, [r2, #0]
 800d280:	2200      	movs	r2, #0
 800d282:	6002      	str	r2, [r0, #0]
 800d284:	6018      	str	r0, [r3, #0]
 800d286:	4770      	bx	lr

0800d288 <put_memory>:
 800d288:	680b      	ldr	r3, [r1, #0]
 800d28a:	b10b      	cbz	r3, 800d290 <put_memory+0x8>
 800d28c:	684a      	ldr	r2, [r1, #4]
 800d28e:	605a      	str	r2, [r3, #4]
 800d290:	684a      	ldr	r2, [r1, #4]
 800d292:	b102      	cbz	r2, 800d296 <put_memory+0xe>
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	6803      	ldr	r3, [r0, #0]
 800d298:	428b      	cmp	r3, r1
 800d29a:	6843      	ldr	r3, [r0, #4]
 800d29c:	bf08      	it	eq
 800d29e:	6002      	streq	r2, [r0, #0]
 800d2a0:	604b      	str	r3, [r1, #4]
 800d2a2:	b103      	cbz	r3, 800d2a6 <put_memory+0x1e>
 800d2a4:	6019      	str	r1, [r3, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	600b      	str	r3, [r1, #0]
 800d2aa:	6041      	str	r1, [r0, #4]
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop

0800d2b0 <rmw_get_implementation_identifier>:
 800d2b0:	4b01      	ldr	r3, [pc, #4]	@ (800d2b8 <rmw_get_implementation_identifier+0x8>)
 800d2b2:	6818      	ldr	r0, [r3, #0]
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	08011e90 	.word	0x08011e90

0800d2bc <rmw_init_options_init>:
 800d2bc:	b084      	sub	sp, #16
 800d2be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	ad09      	add	r5, sp, #36	@ 0x24
 800d2c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d2c8:	b130      	cbz	r0, 800d2d8 <rmw_init_options_init+0x1c>
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7fb fa89 	bl	80087e4 <rcutils_allocator_is_valid>
 800d2d2:	b108      	cbz	r0, 800d2d8 <rmw_init_options_init+0x1c>
 800d2d4:	68a6      	ldr	r6, [r4, #8]
 800d2d6:	b12e      	cbz	r6, 800d2e4 <rmw_init_options_init+0x28>
 800d2d8:	200b      	movs	r0, #11
 800d2da:	b003      	add	sp, #12
 800d2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d2e0:	b004      	add	sp, #16
 800d2e2:	4770      	bx	lr
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e9c4 2300 	strd	r2, r3, [r4]
 800d2ec:	4b22      	ldr	r3, [pc, #136]	@ (800d378 <rmw_init_options_init+0xbc>)
 800d2ee:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d388 <rmw_init_options_init+0xcc>
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60a3      	str	r3, [r4, #8]
 800d2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2f8:	f104 0c20 	add.w	ip, r4, #32
 800d2fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d300:	466f      	mov	r7, sp
 800d302:	682b      	ldr	r3, [r5, #0]
 800d304:	f8cc 3000 	str.w	r3, [ip]
 800d308:	4638      	mov	r0, r7
 800d30a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d30e:	60e6      	str	r6, [r4, #12]
 800d310:	f7ff fe66 	bl	800cfe0 <rmw_get_default_security_options>
 800d314:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d318:	f104 0310 	add.w	r3, r4, #16
 800d31c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d320:	2203      	movs	r2, #3
 800d322:	4816      	ldr	r0, [pc, #88]	@ (800d37c <rmw_init_options_init+0xc0>)
 800d324:	4916      	ldr	r1, [pc, #88]	@ (800d380 <rmw_init_options_init+0xc4>)
 800d326:	7626      	strb	r6, [r4, #24]
 800d328:	f7fb fd5c 	bl	8008de4 <rmw_uxrce_init_init_options_impl_memory>
 800d32c:	4813      	ldr	r0, [pc, #76]	@ (800d37c <rmw_init_options_init+0xc0>)
 800d32e:	f7ff ff9b 	bl	800d268 <get_memory>
 800d332:	b1f0      	cbz	r0, 800d372 <rmw_init_options_init+0xb6>
 800d334:	4a13      	ldr	r2, [pc, #76]	@ (800d384 <rmw_init_options_init+0xc8>)
 800d336:	6883      	ldr	r3, [r0, #8]
 800d338:	6851      	ldr	r1, [r2, #4]
 800d33a:	7810      	ldrb	r0, [r2, #0]
 800d33c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d33e:	7418      	strb	r0, [r3, #16]
 800d340:	6159      	str	r1, [r3, #20]
 800d342:	68d1      	ldr	r1, [r2, #12]
 800d344:	61d9      	str	r1, [r3, #28]
 800d346:	6911      	ldr	r1, [r2, #16]
 800d348:	6219      	str	r1, [r3, #32]
 800d34a:	6951      	ldr	r1, [r2, #20]
 800d34c:	6892      	ldr	r2, [r2, #8]
 800d34e:	619a      	str	r2, [r3, #24]
 800d350:	6259      	str	r1, [r3, #36]	@ 0x24
 800d352:	f7fd faf3 	bl	800a93c <uxr_nanos>
 800d356:	f002 ff3b 	bl	80101d0 <srand>
 800d35a:	f002 ff67 	bl	801022c <rand>
 800d35e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d360:	6298      	str	r0, [r3, #40]	@ 0x28
 800d362:	2800      	cmp	r0, #0
 800d364:	d0f9      	beq.n	800d35a <rmw_init_options_init+0x9e>
 800d366:	2000      	movs	r0, #0
 800d368:	b003      	add	sp, #12
 800d36a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d36e:	b004      	add	sp, #16
 800d370:	4770      	bx	lr
 800d372:	2001      	movs	r0, #1
 800d374:	e7b1      	b.n	800d2da <rmw_init_options_init+0x1e>
 800d376:	bf00      	nop
 800d378:	08011e90 	.word	0x08011e90
 800d37c:	2000da84 	.word	0x2000da84
 800d380:	20009320 	.word	0x20009320
 800d384:	200091ac 	.word	0x200091ac
 800d388:	08011a30 	.word	0x08011a30

0800d38c <rmw_init_options_copy>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	b158      	cbz	r0, 800d3a8 <rmw_init_options_copy+0x1c>
 800d390:	460d      	mov	r5, r1
 800d392:	b149      	cbz	r1, 800d3a8 <rmw_init_options_copy+0x1c>
 800d394:	4604      	mov	r4, r0
 800d396:	6880      	ldr	r0, [r0, #8]
 800d398:	b120      	cbz	r0, 800d3a4 <rmw_init_options_copy+0x18>
 800d39a:	4b1e      	ldr	r3, [pc, #120]	@ (800d414 <rmw_init_options_copy+0x88>)
 800d39c:	6819      	ldr	r1, [r3, #0]
 800d39e:	f7f2 ff1f 	bl	80001e0 <strcmp>
 800d3a2:	bb90      	cbnz	r0, 800d40a <rmw_init_options_copy+0x7e>
 800d3a4:	68ab      	ldr	r3, [r5, #8]
 800d3a6:	b113      	cbz	r3, 800d3ae <rmw_init_options_copy+0x22>
 800d3a8:	250b      	movs	r5, #11
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	4623      	mov	r3, r4
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d3b6:	f8d3 c000 	ldr.w	ip, [r3]
 800d3ba:	6858      	ldr	r0, [r3, #4]
 800d3bc:	6899      	ldr	r1, [r3, #8]
 800d3be:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d3c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d3c6:	3310      	adds	r3, #16
 800d3c8:	42b3      	cmp	r3, r6
 800d3ca:	f8c2 c000 	str.w	ip, [r2]
 800d3ce:	6050      	str	r0, [r2, #4]
 800d3d0:	6091      	str	r1, [r2, #8]
 800d3d2:	f102 0210 	add.w	r2, r2, #16
 800d3d6:	d1ee      	bne.n	800d3b6 <rmw_init_options_copy+0x2a>
 800d3d8:	6819      	ldr	r1, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	480e      	ldr	r0, [pc, #56]	@ (800d418 <rmw_init_options_copy+0x8c>)
 800d3de:	6053      	str	r3, [r2, #4]
 800d3e0:	6011      	str	r1, [r2, #0]
 800d3e2:	f7ff ff41 	bl	800d268 <get_memory>
 800d3e6:	b198      	cbz	r0, 800d410 <rmw_init_options_copy+0x84>
 800d3e8:	6883      	ldr	r3, [r0, #8]
 800d3ea:	636b      	str	r3, [r5, #52]	@ 0x34
 800d3ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d3ee:	f102 0c10 	add.w	ip, r2, #16
 800d3f2:	f103 0410 	add.w	r4, r3, #16
 800d3f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3fc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d400:	2500      	movs	r5, #0
 800d402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d406:	4628      	mov	r0, r5
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	250c      	movs	r5, #12
 800d40c:	4628      	mov	r0, r5
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	2501      	movs	r5, #1
 800d412:	e7ca      	b.n	800d3aa <rmw_init_options_copy+0x1e>
 800d414:	08011e90 	.word	0x08011e90
 800d418:	2000da84 	.word	0x2000da84

0800d41c <rmw_init_options_fini>:
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d03d      	beq.n	800d49c <rmw_init_options_fini+0x80>
 800d420:	b510      	push	{r4, lr}
 800d422:	4604      	mov	r4, r0
 800d424:	b08e      	sub	sp, #56	@ 0x38
 800d426:	3020      	adds	r0, #32
 800d428:	f7fb f9dc 	bl	80087e4 <rcutils_allocator_is_valid>
 800d42c:	b360      	cbz	r0, 800d488 <rmw_init_options_fini+0x6c>
 800d42e:	68a0      	ldr	r0, [r4, #8]
 800d430:	b120      	cbz	r0, 800d43c <rmw_init_options_fini+0x20>
 800d432:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a4 <rmw_init_options_fini+0x88>)
 800d434:	6819      	ldr	r1, [r3, #0]
 800d436:	f7f2 fed3 	bl	80001e0 <strcmp>
 800d43a:	bb68      	cbnz	r0, 800d498 <rmw_init_options_fini+0x7c>
 800d43c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <rmw_init_options_fini+0x8c>)
 800d43e:	6819      	ldr	r1, [r3, #0]
 800d440:	b331      	cbz	r1, 800d490 <rmw_init_options_fini+0x74>
 800d442:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d444:	e001      	b.n	800d44a <rmw_init_options_fini+0x2e>
 800d446:	6849      	ldr	r1, [r1, #4]
 800d448:	b311      	cbz	r1, 800d490 <rmw_init_options_fini+0x74>
 800d44a:	688b      	ldr	r3, [r1, #8]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d1fa      	bne.n	800d446 <rmw_init_options_fini+0x2a>
 800d450:	4815      	ldr	r0, [pc, #84]	@ (800d4a8 <rmw_init_options_fini+0x8c>)
 800d452:	f7ff ff19 	bl	800d288 <put_memory>
 800d456:	4668      	mov	r0, sp
 800d458:	f7ff fdb2 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800d45c:	46ee      	mov	lr, sp
 800d45e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d462:	46a4      	mov	ip, r4
 800d464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d46c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d470:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d478:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d47c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d480:	2300      	movs	r3, #0
 800d482:	4618      	mov	r0, r3
 800d484:	b00e      	add	sp, #56	@ 0x38
 800d486:	bd10      	pop	{r4, pc}
 800d488:	230b      	movs	r3, #11
 800d48a:	4618      	mov	r0, r3
 800d48c:	b00e      	add	sp, #56	@ 0x38
 800d48e:	bd10      	pop	{r4, pc}
 800d490:	2301      	movs	r3, #1
 800d492:	4618      	mov	r0, r3
 800d494:	b00e      	add	sp, #56	@ 0x38
 800d496:	bd10      	pop	{r4, pc}
 800d498:	230c      	movs	r3, #12
 800d49a:	e7f2      	b.n	800d482 <rmw_init_options_fini+0x66>
 800d49c:	230b      	movs	r3, #11
 800d49e:	4618      	mov	r0, r3
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	08011e90 	.word	0x08011e90
 800d4a8:	2000da84 	.word	0x2000da84

0800d4ac <rmw_init>:
 800d4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	f000 80d3 	beq.w	800d65e <rmw_init+0x1b2>
 800d4b8:	460e      	mov	r6, r1
 800d4ba:	2900      	cmp	r1, #0
 800d4bc:	f000 80cf 	beq.w	800d65e <rmw_init+0x1b2>
 800d4c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 80ca 	beq.w	800d65e <rmw_init+0x1b2>
 800d4ca:	4b78      	ldr	r3, [pc, #480]	@ (800d6ac <rmw_init+0x200>)
 800d4cc:	6880      	ldr	r0, [r0, #8]
 800d4ce:	681f      	ldr	r7, [r3, #0]
 800d4d0:	b128      	cbz	r0, 800d4de <rmw_init+0x32>
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f2 fe84 	bl	80001e0 <strcmp>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f040 80ca 	bne.w	800d672 <rmw_init+0x1c6>
 800d4de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4e2:	4c73      	ldr	r4, [pc, #460]	@ (800d6b0 <rmw_init+0x204>)
 800d4e4:	4973      	ldr	r1, [pc, #460]	@ (800d6b4 <rmw_init+0x208>)
 800d4e6:	4874      	ldr	r0, [pc, #464]	@ (800d6b8 <rmw_init+0x20c>)
 800d4e8:	60b7      	str	r7, [r6, #8]
 800d4ea:	e9c6 2300 	strd	r2, r3, [r6]
 800d4ee:	68eb      	ldr	r3, [r5, #12]
 800d4f0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f7fb fc16 	bl	8008d24 <rmw_uxrce_init_session_memory>
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	4970      	ldr	r1, [pc, #448]	@ (800d6bc <rmw_init+0x210>)
 800d4fc:	2204      	movs	r2, #4
 800d4fe:	f7fb fc51 	bl	8008da4 <rmw_uxrce_init_static_input_buffer_memory>
 800d502:	f04f 0800 	mov.w	r8, #0
 800d506:	486c      	ldr	r0, [pc, #432]	@ (800d6b8 <rmw_init+0x20c>)
 800d508:	f884 800d 	strb.w	r8, [r4, #13]
 800d50c:	f7ff feac 	bl	800d268 <get_memory>
 800d510:	2800      	cmp	r0, #0
 800d512:	f000 80a9 	beq.w	800d668 <rmw_init+0x1bc>
 800d516:	6884      	ldr	r4, [r0, #8]
 800d518:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d51a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d51c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d520:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d524:	9101      	str	r1, [sp, #4]
 800d526:	6a00      	ldr	r0, [r0, #32]
 800d528:	9000      	str	r0, [sp, #0]
 800d52a:	f104 0910 	add.w	r9, r4, #16
 800d52e:	4661      	mov	r1, ip
 800d530:	4648      	mov	r0, r9
 800d532:	f000 fd8b 	bl	800e04c <uxr_set_custom_transport_callbacks>
 800d536:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d53a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d53e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d542:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d546:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d54a:	495d      	ldr	r1, [pc, #372]	@ (800d6c0 <rmw_init+0x214>)
 800d54c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d550:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d554:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d558:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d55c:	4859      	ldr	r0, [pc, #356]	@ (800d6c4 <rmw_init+0x218>)
 800d55e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d562:	2201      	movs	r2, #1
 800d564:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d566:	f7fb fbbd 	bl	8008ce4 <rmw_uxrce_init_node_memory>
 800d56a:	4957      	ldr	r1, [pc, #348]	@ (800d6c8 <rmw_init+0x21c>)
 800d56c:	4857      	ldr	r0, [pc, #348]	@ (800d6cc <rmw_init+0x220>)
 800d56e:	2205      	movs	r2, #5
 800d570:	f7fb fb98 	bl	8008ca4 <rmw_uxrce_init_subscription_memory>
 800d574:	4956      	ldr	r1, [pc, #344]	@ (800d6d0 <rmw_init+0x224>)
 800d576:	4857      	ldr	r0, [pc, #348]	@ (800d6d4 <rmw_init+0x228>)
 800d578:	220a      	movs	r2, #10
 800d57a:	f7fb fb73 	bl	8008c64 <rmw_uxrce_init_publisher_memory>
 800d57e:	4956      	ldr	r1, [pc, #344]	@ (800d6d8 <rmw_init+0x22c>)
 800d580:	4856      	ldr	r0, [pc, #344]	@ (800d6dc <rmw_init+0x230>)
 800d582:	2201      	movs	r2, #1
 800d584:	f7fb fb2e 	bl	8008be4 <rmw_uxrce_init_service_memory>
 800d588:	4955      	ldr	r1, [pc, #340]	@ (800d6e0 <rmw_init+0x234>)
 800d58a:	4856      	ldr	r0, [pc, #344]	@ (800d6e4 <rmw_init+0x238>)
 800d58c:	2201      	movs	r2, #1
 800d58e:	f7fb fb49 	bl	8008c24 <rmw_uxrce_init_client_memory>
 800d592:	4955      	ldr	r1, [pc, #340]	@ (800d6e8 <rmw_init+0x23c>)
 800d594:	4855      	ldr	r0, [pc, #340]	@ (800d6ec <rmw_init+0x240>)
 800d596:	220f      	movs	r2, #15
 800d598:	f7fb fbe4 	bl	8008d64 <rmw_uxrce_init_topic_memory>
 800d59c:	4954      	ldr	r1, [pc, #336]	@ (800d6f0 <rmw_init+0x244>)
 800d59e:	4855      	ldr	r0, [pc, #340]	@ (800d6f4 <rmw_init+0x248>)
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	f7fb fc1f 	bl	8008de4 <rmw_uxrce_init_init_options_impl_memory>
 800d5a6:	4954      	ldr	r1, [pc, #336]	@ (800d6f8 <rmw_init+0x24c>)
 800d5a8:	4854      	ldr	r0, [pc, #336]	@ (800d6fc <rmw_init+0x250>)
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	f7fb fc3a 	bl	8008e24 <rmw_uxrce_init_wait_set_memory>
 800d5b0:	4953      	ldr	r1, [pc, #332]	@ (800d700 <rmw_init+0x254>)
 800d5b2:	4854      	ldr	r0, [pc, #336]	@ (800d704 <rmw_init+0x258>)
 800d5b4:	2204      	movs	r2, #4
 800d5b6:	f7fb fc55 	bl	8008e64 <rmw_uxrce_init_guard_condition_memory>
 800d5ba:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d5bc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d5be:	4642      	mov	r2, r8
 800d5c0:	f000 fb06 	bl	800dbd0 <rmw_uxrce_transport_init>
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d158      	bne.n	800d67c <rmw_init+0x1d0>
 800d5ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d5cc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d5d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d5d2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f7fc f84e 	bl	8009678 <uxr_init_session>
 800d5dc:	494a      	ldr	r1, [pc, #296]	@ (800d708 <rmw_init+0x25c>)
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f7fc f86d 	bl	80096c0 <uxr_set_topic_callback>
 800d5e6:	4949      	ldr	r1, [pc, #292]	@ (800d70c <rmw_init+0x260>)
 800d5e8:	463a      	mov	r2, r7
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7fc f864 	bl	80096b8 <uxr_set_status_callback>
 800d5f0:	4947      	ldr	r1, [pc, #284]	@ (800d710 <rmw_init+0x264>)
 800d5f2:	463a      	mov	r2, r7
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7fc f867 	bl	80096c8 <uxr_set_request_callback>
 800d5fa:	4946      	ldr	r1, [pc, #280]	@ (800d714 <rmw_init+0x268>)
 800d5fc:	463a      	mov	r2, r7
 800d5fe:	4628      	mov	r0, r5
 800d600:	f7fc f866 	bl	80096d0 <uxr_set_reply_callback>
 800d604:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d608:	2304      	movs	r3, #4
 800d60a:	0092      	lsls	r2, r2, #2
 800d60c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d610:	4628      	mov	r0, r5
 800d612:	f7fc f89b 	bl	800974c <uxr_create_input_reliable_stream>
 800d616:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d61a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d61e:	0092      	lsls	r2, r2, #2
 800d620:	2304      	movs	r3, #4
 800d622:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d626:	4628      	mov	r0, r5
 800d628:	f7fc f868 	bl	80096fc <uxr_create_output_reliable_stream>
 800d62c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d630:	4628      	mov	r0, r5
 800d632:	f7fc f885 	bl	8009740 <uxr_create_input_best_effort_stream>
 800d636:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d63a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d63e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d642:	3114      	adds	r1, #20
 800d644:	4628      	mov	r0, r5
 800d646:	f7fc f847 	bl	80096d8 <uxr_create_output_best_effort_stream>
 800d64a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d64e:	4628      	mov	r0, r5
 800d650:	f7fc fd98 	bl	800a184 <uxr_create_session>
 800d654:	b1f8      	cbz	r0, 800d696 <rmw_init+0x1ea>
 800d656:	4638      	mov	r0, r7
 800d658:	b003      	add	sp, #12
 800d65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65e:	270b      	movs	r7, #11
 800d660:	4638      	mov	r0, r7
 800d662:	b003      	add	sp, #12
 800d664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d668:	2701      	movs	r7, #1
 800d66a:	4638      	mov	r0, r7
 800d66c:	b003      	add	sp, #12
 800d66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d672:	270c      	movs	r7, #12
 800d674:	4638      	mov	r0, r7
 800d676:	b003      	add	sp, #12
 800d678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d67c:	4648      	mov	r0, r9
 800d67e:	f000 fd27 	bl	800e0d0 <uxr_close_custom_transport>
 800d682:	480d      	ldr	r0, [pc, #52]	@ (800d6b8 <rmw_init+0x20c>)
 800d684:	4621      	mov	r1, r4
 800d686:	f7ff fdff 	bl	800d288 <put_memory>
 800d68a:	4638      	mov	r0, r7
 800d68c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d690:	b003      	add	sp, #12
 800d692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d696:	4648      	mov	r0, r9
 800d698:	f000 fd1a 	bl	800e0d0 <uxr_close_custom_transport>
 800d69c:	4806      	ldr	r0, [pc, #24]	@ (800d6b8 <rmw_init+0x20c>)
 800d69e:	4621      	mov	r1, r4
 800d6a0:	f7ff fdf2 	bl	800d288 <put_memory>
 800d6a4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d6a6:	2701      	movs	r7, #1
 800d6a8:	e7d5      	b.n	800d656 <rmw_init+0x1aa>
 800d6aa:	bf00      	nop
 800d6ac:	08011e90 	.word	0x08011e90
 800d6b0:	2000dad4 	.word	0x2000dad4
 800d6b4:	20009d80 	.word	0x20009d80
 800d6b8:	2000dac4 	.word	0x2000dac4
 800d6bc:	2000b328 	.word	0x2000b328
 800d6c0:	200093a4 	.word	0x200093a4
 800d6c4:	2000da94 	.word	0x2000da94
 800d6c8:	2000d428 	.word	0x2000d428
 800d6cc:	2000dae4 	.word	0x2000dae4
 800d6d0:	20009448 	.word	0x20009448
 800d6d4:	2000daa4 	.word	0x2000daa4
 800d6d8:	20009cb8 	.word	0x20009cb8
 800d6dc:	2000dab4 	.word	0x2000dab4
 800d6e0:	200091d8 	.word	0x200091d8
 800d6e4:	200091c8 	.word	0x200091c8
 800d6e8:	2000d860 	.word	0x2000d860
 800d6ec:	2000daf4 	.word	0x2000daf4
 800d6f0:	20009320 	.word	0x20009320
 800d6f4:	2000da84 	.word	0x2000da84
 800d6f8:	2000da04 	.word	0x2000da04
 800d6fc:	2000db04 	.word	0x2000db04
 800d700:	200092a0 	.word	0x200092a0
 800d704:	2000da74 	.word	0x2000da74
 800d708:	0800fced 	.word	0x0800fced
 800d70c:	0800fce5 	.word	0x0800fce5
 800d710:	0800fd85 	.word	0x0800fd85
 800d714:	0800fe21 	.word	0x0800fe21

0800d718 <rmw_context_fini>:
 800d718:	4b17      	ldr	r3, [pc, #92]	@ (800d778 <rmw_context_fini+0x60>)
 800d71a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	681c      	ldr	r4, [r3, #0]
 800d720:	4605      	mov	r5, r0
 800d722:	b334      	cbz	r4, 800d772 <rmw_context_fini+0x5a>
 800d724:	2600      	movs	r6, #0
 800d726:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d72a:	6902      	ldr	r2, [r0, #16]
 800d72c:	428a      	cmp	r2, r1
 800d72e:	d018      	beq.n	800d762 <rmw_context_fini+0x4a>
 800d730:	2c00      	cmp	r4, #0
 800d732:	d1f8      	bne.n	800d726 <rmw_context_fini+0xe>
 800d734:	b189      	cbz	r1, 800d75a <rmw_context_fini+0x42>
 800d736:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d73a:	789b      	ldrb	r3, [r3, #2]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d742:	bf14      	ite	ne
 800d744:	210a      	movne	r1, #10
 800d746:	2100      	moveq	r1, #0
 800d748:	f7fc fcf4 	bl	800a134 <uxr_delete_session_retries>
 800d74c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d74e:	f7fb fba9 	bl	8008ea4 <rmw_uxrce_fini_session_memory>
 800d752:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d754:	3010      	adds	r0, #16
 800d756:	f000 fcbb 	bl	800e0d0 <uxr_close_custom_transport>
 800d75a:	2300      	movs	r3, #0
 800d75c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d75e:	4630      	mov	r0, r6
 800d760:	bd70      	pop	{r4, r5, r6, pc}
 800d762:	3018      	adds	r0, #24
 800d764:	f000 f90e 	bl	800d984 <rmw_destroy_node>
 800d768:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d76a:	4606      	mov	r6, r0
 800d76c:	2c00      	cmp	r4, #0
 800d76e:	d1da      	bne.n	800d726 <rmw_context_fini+0xe>
 800d770:	e7e0      	b.n	800d734 <rmw_context_fini+0x1c>
 800d772:	4626      	mov	r6, r4
 800d774:	e7de      	b.n	800d734 <rmw_context_fini+0x1c>
 800d776:	bf00      	nop
 800d778:	2000da94 	.word	0x2000da94

0800d77c <create_topic>:
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	4605      	mov	r5, r0
 800d782:	b084      	sub	sp, #16
 800d784:	4822      	ldr	r0, [pc, #136]	@ (800d810 <create_topic+0x94>)
 800d786:	460f      	mov	r7, r1
 800d788:	4616      	mov	r6, r2
 800d78a:	f7ff fd6d 	bl	800d268 <get_memory>
 800d78e:	4604      	mov	r4, r0
 800d790:	2800      	cmp	r0, #0
 800d792:	d039      	beq.n	800d808 <create_topic+0x8c>
 800d794:	692b      	ldr	r3, [r5, #16]
 800d796:	6884      	ldr	r4, [r0, #8]
 800d798:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800d818 <create_topic+0x9c>
 800d79c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7a0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800d7a4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 800d7a8:	1c42      	adds	r2, r0, #1
 800d7aa:	2102      	movs	r1, #2
 800d7ac:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 800d7b0:	f7fb fea2 	bl	80094f8 <uxr_object_id>
 800d7b4:	223c      	movs	r2, #60	@ 0x3c
 800d7b6:	6120      	str	r0, [r4, #16]
 800d7b8:	4641      	mov	r1, r8
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	f7fb fcaa 	bl	8009114 <generate_topic_name>
 800d7c0:	b1f0      	cbz	r0, 800d800 <create_topic+0x84>
 800d7c2:	4f14      	ldr	r7, [pc, #80]	@ (800d814 <create_topic+0x98>)
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	2264      	movs	r2, #100	@ 0x64
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7fb fc73 	bl	80090b4 <generate_type_name>
 800d7ce:	b1b8      	cbz	r0, 800d800 <create_topic+0x84>
 800d7d0:	6928      	ldr	r0, [r5, #16]
 800d7d2:	2306      	movs	r3, #6
 800d7d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d7d8:	f8cd 8000 	str.w	r8, [sp]
 800d7dc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800d7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d7e4:	6811      	ldr	r1, [r2, #0]
 800d7e6:	696b      	ldr	r3, [r5, #20]
 800d7e8:	6922      	ldr	r2, [r4, #16]
 800d7ea:	f7fb fda9 	bl	8009340 <uxr_buffer_create_topic_bin>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	6928      	ldr	r0, [r5, #16]
 800d7f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d7f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d7fa:	f7fb fc25 	bl	8009048 <run_xrce_session>
 800d7fe:	b918      	cbnz	r0, 800d808 <create_topic+0x8c>
 800d800:	4620      	mov	r0, r4
 800d802:	f7fb fbc5 	bl	8008f90 <rmw_uxrce_fini_topic_memory>
 800d806:	2400      	movs	r4, #0
 800d808:	4620      	mov	r0, r4
 800d80a:	b004      	add	sp, #16
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	2000daf4 	.word	0x2000daf4
 800d814:	2000db70 	.word	0x2000db70
 800d818:	2000db34 	.word	0x2000db34

0800d81c <destroy_topic>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	6985      	ldr	r5, [r0, #24]
 800d820:	b1d5      	cbz	r5, 800d858 <destroy_topic+0x3c>
 800d822:	4604      	mov	r4, r0
 800d824:	6928      	ldr	r0, [r5, #16]
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d82c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d830:	6819      	ldr	r1, [r3, #0]
 800d832:	f7fb fd07 	bl	8009244 <uxr_buffer_delete_entity>
 800d836:	4602      	mov	r2, r0
 800d838:	6928      	ldr	r0, [r5, #16]
 800d83a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d83e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d842:	f7fb fc01 	bl	8009048 <run_xrce_session>
 800d846:	2800      	cmp	r0, #0
 800d848:	4620      	mov	r0, r4
 800d84a:	bf14      	ite	ne
 800d84c:	2400      	movne	r4, #0
 800d84e:	2402      	moveq	r4, #2
 800d850:	f7fb fb9e 	bl	8008f90 <rmw_uxrce_fini_topic_memory>
 800d854:	4620      	mov	r0, r4
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	2401      	movs	r4, #1
 800d85a:	4620      	mov	r0, r4
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	bf00      	nop

0800d860 <create_node>:
 800d860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d864:	b083      	sub	sp, #12
 800d866:	2b00      	cmp	r3, #0
 800d868:	d05f      	beq.n	800d92a <create_node+0xca>
 800d86a:	4606      	mov	r6, r0
 800d86c:	4835      	ldr	r0, [pc, #212]	@ (800d944 <create_node+0xe4>)
 800d86e:	460f      	mov	r7, r1
 800d870:	4690      	mov	r8, r2
 800d872:	461d      	mov	r5, r3
 800d874:	f7ff fcf8 	bl	800d268 <get_memory>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d056      	beq.n	800d92a <create_node+0xca>
 800d87c:	6884      	ldr	r4, [r0, #8]
 800d87e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	f7ff fd15 	bl	800d2b0 <rmw_get_implementation_identifier>
 800d886:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d88a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d88e:	f8c4 9020 	str.w	r9, [r4, #32]
 800d892:	4630      	mov	r0, r6
 800d894:	f7f2 fcae 	bl	80001f4 <strlen>
 800d898:	1c42      	adds	r2, r0, #1
 800d89a:	2a3c      	cmp	r2, #60	@ 0x3c
 800d89c:	f104 0518 	add.w	r5, r4, #24
 800d8a0:	d840      	bhi.n	800d924 <create_node+0xc4>
 800d8a2:	4648      	mov	r0, r9
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d8aa:	f002 fff8 	bl	801089e <memcpy>
 800d8ae:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	f7f2 fc9e 	bl	80001f4 <strlen>
 800d8b8:	1c42      	adds	r2, r0, #1
 800d8ba:	2a3c      	cmp	r2, #60	@ 0x3c
 800d8bc:	d832      	bhi.n	800d924 <create_node+0xc4>
 800d8be:	4639      	mov	r1, r7
 800d8c0:	4648      	mov	r0, r9
 800d8c2:	f002 ffec 	bl	801089e <memcpy>
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d8d2:	1842      	adds	r2, r0, r1
 800d8d4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d8d8:	f7fb fe0e 	bl	80094f8 <uxr_object_id>
 800d8dc:	6160      	str	r0, [r4, #20]
 800d8de:	783b      	ldrb	r3, [r7, #0]
 800d8e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8e2:	d127      	bne.n	800d934 <create_node+0xd4>
 800d8e4:	787b      	ldrb	r3, [r7, #1]
 800d8e6:	bb2b      	cbnz	r3, 800d934 <create_node+0xd4>
 800d8e8:	4a17      	ldr	r2, [pc, #92]	@ (800d948 <create_node+0xe8>)
 800d8ea:	4818      	ldr	r0, [pc, #96]	@ (800d94c <create_node+0xec>)
 800d8ec:	4633      	mov	r3, r6
 800d8ee:	213c      	movs	r1, #60	@ 0x3c
 800d8f0:	f002 fe5c 	bl	80105ac <sniprintf>
 800d8f4:	6920      	ldr	r0, [r4, #16]
 800d8f6:	4915      	ldr	r1, [pc, #84]	@ (800d94c <create_node+0xec>)
 800d8f8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d8fc:	9100      	str	r1, [sp, #0]
 800d8fe:	2106      	movs	r1, #6
 800d900:	9101      	str	r1, [sp, #4]
 800d902:	6811      	ldr	r1, [r2, #0]
 800d904:	6962      	ldr	r2, [r4, #20]
 800d906:	fa1f f388 	uxth.w	r3, r8
 800d90a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d90e:	f7fb fce5 	bl	80092dc <uxr_buffer_create_participant_bin>
 800d912:	4602      	mov	r2, r0
 800d914:	6920      	ldr	r0, [r4, #16]
 800d916:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d91a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d91e:	f7fb fb93 	bl	8009048 <run_xrce_session>
 800d922:	b918      	cbnz	r0, 800d92c <create_node+0xcc>
 800d924:	4628      	mov	r0, r5
 800d926:	f7fb fac3 	bl	8008eb0 <rmw_uxrce_fini_node_memory>
 800d92a:	2500      	movs	r5, #0
 800d92c:	4628      	mov	r0, r5
 800d92e:	b003      	add	sp, #12
 800d930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d934:	4a06      	ldr	r2, [pc, #24]	@ (800d950 <create_node+0xf0>)
 800d936:	9600      	str	r6, [sp, #0]
 800d938:	463b      	mov	r3, r7
 800d93a:	213c      	movs	r1, #60	@ 0x3c
 800d93c:	4803      	ldr	r0, [pc, #12]	@ (800d94c <create_node+0xec>)
 800d93e:	f002 fe35 	bl	80105ac <sniprintf>
 800d942:	e7d7      	b.n	800d8f4 <create_node+0x94>
 800d944:	2000da94 	.word	0x2000da94
 800d948:	080119e0 	.word	0x080119e0
 800d94c:	2000dbd4 	.word	0x2000dbd4
 800d950:	08011a38 	.word	0x08011a38

0800d954 <rmw_create_node>:
 800d954:	b199      	cbz	r1, 800d97e <rmw_create_node+0x2a>
 800d956:	780b      	ldrb	r3, [r1, #0]
 800d958:	468c      	mov	ip, r1
 800d95a:	b183      	cbz	r3, 800d97e <rmw_create_node+0x2a>
 800d95c:	b410      	push	{r4}
 800d95e:	4614      	mov	r4, r2
 800d960:	b14a      	cbz	r2, 800d976 <rmw_create_node+0x22>
 800d962:	7813      	ldrb	r3, [r2, #0]
 800d964:	b13b      	cbz	r3, 800d976 <rmw_create_node+0x22>
 800d966:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d968:	4603      	mov	r3, r0
 800d96a:	4621      	mov	r1, r4
 800d96c:	4660      	mov	r0, ip
 800d96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d972:	f7ff bf75 	b.w	800d860 <create_node>
 800d976:	2000      	movs	r0, #0
 800d978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d97c:	4770      	bx	lr
 800d97e:	2000      	movs	r0, #0
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop

0800d984 <rmw_destroy_node>:
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d986:	b328      	cbz	r0, 800d9d4 <rmw_destroy_node+0x50>
 800d988:	4607      	mov	r7, r0
 800d98a:	6800      	ldr	r0, [r0, #0]
 800d98c:	b120      	cbz	r0, 800d998 <rmw_destroy_node+0x14>
 800d98e:	4b36      	ldr	r3, [pc, #216]	@ (800da68 <rmw_destroy_node+0xe4>)
 800d990:	6819      	ldr	r1, [r3, #0]
 800d992:	f7f2 fc25 	bl	80001e0 <strcmp>
 800d996:	b9e8      	cbnz	r0, 800d9d4 <rmw_destroy_node+0x50>
 800d998:	687d      	ldr	r5, [r7, #4]
 800d99a:	b1dd      	cbz	r5, 800d9d4 <rmw_destroy_node+0x50>
 800d99c:	4b33      	ldr	r3, [pc, #204]	@ (800da6c <rmw_destroy_node+0xe8>)
 800d99e:	681c      	ldr	r4, [r3, #0]
 800d9a0:	2c00      	cmp	r4, #0
 800d9a2:	d05f      	beq.n	800da64 <rmw_destroy_node+0xe0>
 800d9a4:	2600      	movs	r6, #0
 800d9a6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d9aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d9ae:	429d      	cmp	r5, r3
 800d9b0:	d013      	beq.n	800d9da <rmw_destroy_node+0x56>
 800d9b2:	2c00      	cmp	r4, #0
 800d9b4:	d1f7      	bne.n	800d9a6 <rmw_destroy_node+0x22>
 800d9b6:	4b2e      	ldr	r3, [pc, #184]	@ (800da70 <rmw_destroy_node+0xec>)
 800d9b8:	681c      	ldr	r4, [r3, #0]
 800d9ba:	b1c4      	cbz	r4, 800d9ee <rmw_destroy_node+0x6a>
 800d9bc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d9c0:	6a0b      	ldr	r3, [r1, #32]
 800d9c2:	429d      	cmp	r5, r3
 800d9c4:	d1f9      	bne.n	800d9ba <rmw_destroy_node+0x36>
 800d9c6:	317c      	adds	r1, #124	@ 0x7c
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	f000 f8a1 	bl	800db10 <rmw_destroy_subscription>
 800d9ce:	2801      	cmp	r0, #1
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	d1f2      	bne.n	800d9ba <rmw_destroy_node+0x36>
 800d9d4:	2601      	movs	r6, #1
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9da:	3184      	adds	r1, #132	@ 0x84
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7fb f8af 	bl	8008b40 <rmw_destroy_publisher>
 800d9e2:	2801      	cmp	r0, #1
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	d0f5      	beq.n	800d9d4 <rmw_destroy_node+0x50>
 800d9e8:	2c00      	cmp	r4, #0
 800d9ea:	d1dc      	bne.n	800d9a6 <rmw_destroy_node+0x22>
 800d9ec:	e7e3      	b.n	800d9b6 <rmw_destroy_node+0x32>
 800d9ee:	4b21      	ldr	r3, [pc, #132]	@ (800da74 <rmw_destroy_node+0xf0>)
 800d9f0:	681c      	ldr	r4, [r3, #0]
 800d9f2:	b16c      	cbz	r4, 800da10 <rmw_destroy_node+0x8c>
 800d9f4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d9f8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d9fa:	429d      	cmp	r5, r3
 800d9fc:	d1f9      	bne.n	800d9f2 <rmw_destroy_node+0x6e>
 800d9fe:	317c      	adds	r1, #124	@ 0x7c
 800da00:	4638      	mov	r0, r7
 800da02:	f000 f841 	bl	800da88 <rmw_destroy_service>
 800da06:	2801      	cmp	r0, #1
 800da08:	4606      	mov	r6, r0
 800da0a:	d0e3      	beq.n	800d9d4 <rmw_destroy_node+0x50>
 800da0c:	2c00      	cmp	r4, #0
 800da0e:	d1f1      	bne.n	800d9f4 <rmw_destroy_node+0x70>
 800da10:	4b19      	ldr	r3, [pc, #100]	@ (800da78 <rmw_destroy_node+0xf4>)
 800da12:	681c      	ldr	r4, [r3, #0]
 800da14:	b16c      	cbz	r4, 800da32 <rmw_destroy_node+0xae>
 800da16:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da1a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800da1c:	429d      	cmp	r5, r3
 800da1e:	d1f9      	bne.n	800da14 <rmw_destroy_node+0x90>
 800da20:	317c      	adds	r1, #124	@ 0x7c
 800da22:	4638      	mov	r0, r7
 800da24:	f002 fa46 	bl	800feb4 <rmw_destroy_client>
 800da28:	2801      	cmp	r0, #1
 800da2a:	4606      	mov	r6, r0
 800da2c:	d0d2      	beq.n	800d9d4 <rmw_destroy_node+0x50>
 800da2e:	2c00      	cmp	r4, #0
 800da30:	d1f1      	bne.n	800da16 <rmw_destroy_node+0x92>
 800da32:	6928      	ldr	r0, [r5, #16]
 800da34:	696a      	ldr	r2, [r5, #20]
 800da36:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da3e:	6819      	ldr	r1, [r3, #0]
 800da40:	f7fb fc00 	bl	8009244 <uxr_buffer_delete_entity>
 800da44:	4602      	mov	r2, r0
 800da46:	6928      	ldr	r0, [r5, #16]
 800da48:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da50:	f7fb fafa 	bl	8009048 <run_xrce_session>
 800da54:	2800      	cmp	r0, #0
 800da56:	bf08      	it	eq
 800da58:	2602      	moveq	r6, #2
 800da5a:	4638      	mov	r0, r7
 800da5c:	f7fb fa28 	bl	8008eb0 <rmw_uxrce_fini_node_memory>
 800da60:	4630      	mov	r0, r6
 800da62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da64:	4626      	mov	r6, r4
 800da66:	e7a6      	b.n	800d9b6 <rmw_destroy_node+0x32>
 800da68:	08011e90 	.word	0x08011e90
 800da6c:	2000daa4 	.word	0x2000daa4
 800da70:	2000dae4 	.word	0x2000dae4
 800da74:	2000dab4 	.word	0x2000dab4
 800da78:	200091c8 	.word	0x200091c8

0800da7c <rmw_node_get_graph_guard_condition>:
 800da7c:	6843      	ldr	r3, [r0, #4]
 800da7e:	6918      	ldr	r0, [r3, #16]
 800da80:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop

0800da88 <rmw_destroy_service>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	b128      	cbz	r0, 800da98 <rmw_destroy_service+0x10>
 800da8c:	4604      	mov	r4, r0
 800da8e:	6800      	ldr	r0, [r0, #0]
 800da90:	460d      	mov	r5, r1
 800da92:	f7fb fb59 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800da96:	b910      	cbnz	r0, 800da9e <rmw_destroy_service+0x16>
 800da98:	2401      	movs	r4, #1
 800da9a:	4620      	mov	r0, r4
 800da9c:	bd70      	pop	{r4, r5, r6, pc}
 800da9e:	6863      	ldr	r3, [r4, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0f9      	beq.n	800da98 <rmw_destroy_service+0x10>
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	d0f7      	beq.n	800da98 <rmw_destroy_service+0x10>
 800daa8:	6828      	ldr	r0, [r5, #0]
 800daaa:	f7fb fb4d 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d0f2      	beq.n	800da98 <rmw_destroy_service+0x10>
 800dab2:	686e      	ldr	r6, [r5, #4]
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	d0ef      	beq.n	800da98 <rmw_destroy_service+0x10>
 800dab8:	6864      	ldr	r4, [r4, #4]
 800daba:	6932      	ldr	r2, [r6, #16]
 800dabc:	6920      	ldr	r0, [r4, #16]
 800dabe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dac2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dac6:	6819      	ldr	r1, [r3, #0]
 800dac8:	f001 f84e 	bl	800eb68 <uxr_buffer_cancel_data>
 800dacc:	4602      	mov	r2, r0
 800dace:	6920      	ldr	r0, [r4, #16]
 800dad0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dad4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dad8:	f7fb fab6 	bl	8009048 <run_xrce_session>
 800dadc:	6920      	ldr	r0, [r4, #16]
 800dade:	6932      	ldr	r2, [r6, #16]
 800dae0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dae4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dae8:	6819      	ldr	r1, [r3, #0]
 800daea:	f7fb fbab 	bl	8009244 <uxr_buffer_delete_entity>
 800daee:	4602      	mov	r2, r0
 800daf0:	6920      	ldr	r0, [r4, #16]
 800daf2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800daf6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dafa:	f7fb faa5 	bl	8009048 <run_xrce_session>
 800dafe:	2800      	cmp	r0, #0
 800db00:	4628      	mov	r0, r5
 800db02:	bf14      	ite	ne
 800db04:	2400      	movne	r4, #0
 800db06:	2402      	moveq	r4, #2
 800db08:	f7fb fa16 	bl	8008f38 <rmw_uxrce_fini_service_memory>
 800db0c:	e7c5      	b.n	800da9a <rmw_destroy_service+0x12>
 800db0e:	bf00      	nop

0800db10 <rmw_destroy_subscription>:
 800db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db12:	b128      	cbz	r0, 800db20 <rmw_destroy_subscription+0x10>
 800db14:	4604      	mov	r4, r0
 800db16:	6800      	ldr	r0, [r0, #0]
 800db18:	460d      	mov	r5, r1
 800db1a:	f7fb fb15 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800db1e:	b910      	cbnz	r0, 800db26 <rmw_destroy_subscription+0x16>
 800db20:	2401      	movs	r4, #1
 800db22:	4620      	mov	r0, r4
 800db24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db26:	6863      	ldr	r3, [r4, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d0f9      	beq.n	800db20 <rmw_destroy_subscription+0x10>
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	d0f7      	beq.n	800db20 <rmw_destroy_subscription+0x10>
 800db30:	6828      	ldr	r0, [r5, #0]
 800db32:	f7fb fb09 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800db36:	2800      	cmp	r0, #0
 800db38:	d0f2      	beq.n	800db20 <rmw_destroy_subscription+0x10>
 800db3a:	686c      	ldr	r4, [r5, #4]
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d0ef      	beq.n	800db20 <rmw_destroy_subscription+0x10>
 800db40:	6a26      	ldr	r6, [r4, #32]
 800db42:	6962      	ldr	r2, [r4, #20]
 800db44:	6930      	ldr	r0, [r6, #16]
 800db46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db4e:	6819      	ldr	r1, [r3, #0]
 800db50:	f001 f80a 	bl	800eb68 <uxr_buffer_cancel_data>
 800db54:	4602      	mov	r2, r0
 800db56:	6930      	ldr	r0, [r6, #16]
 800db58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db60:	f7fb fa72 	bl	8009048 <run_xrce_session>
 800db64:	69e0      	ldr	r0, [r4, #28]
 800db66:	f7ff fe59 	bl	800d81c <destroy_topic>
 800db6a:	6a23      	ldr	r3, [r4, #32]
 800db6c:	6962      	ldr	r2, [r4, #20]
 800db6e:	6918      	ldr	r0, [r3, #16]
 800db70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db78:	6819      	ldr	r1, [r3, #0]
 800db7a:	f7fb fb63 	bl	8009244 <uxr_buffer_delete_entity>
 800db7e:	6a23      	ldr	r3, [r4, #32]
 800db80:	6922      	ldr	r2, [r4, #16]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800db88:	4604      	mov	r4, r0
 800db8a:	6809      	ldr	r1, [r1, #0]
 800db8c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800db90:	f7fb fb58 	bl	8009244 <uxr_buffer_delete_entity>
 800db94:	6937      	ldr	r7, [r6, #16]
 800db96:	4622      	mov	r2, r4
 800db98:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800db9c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800dba0:	4604      	mov	r4, r0
 800dba2:	4638      	mov	r0, r7
 800dba4:	f7fb fa50 	bl	8009048 <run_xrce_session>
 800dba8:	6936      	ldr	r6, [r6, #16]
 800dbaa:	4622      	mov	r2, r4
 800dbac:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dbb0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f7fb fa46 	bl	8009048 <run_xrce_session>
 800dbbc:	b12c      	cbz	r4, 800dbca <rmw_destroy_subscription+0xba>
 800dbbe:	b120      	cbz	r0, 800dbca <rmw_destroy_subscription+0xba>
 800dbc0:	2400      	movs	r4, #0
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7fb f9a2 	bl	8008f0c <rmw_uxrce_fini_subscription_memory>
 800dbc8:	e7ab      	b.n	800db22 <rmw_destroy_subscription+0x12>
 800dbca:	2402      	movs	r4, #2
 800dbcc:	e7f9      	b.n	800dbc2 <rmw_destroy_subscription+0xb2>
 800dbce:	bf00      	nop

0800dbd0 <rmw_uxrce_transport_init>:
 800dbd0:	b508      	push	{r3, lr}
 800dbd2:	b108      	cbz	r0, 800dbd8 <rmw_uxrce_transport_init+0x8>
 800dbd4:	f100 0210 	add.w	r2, r0, #16
 800dbd8:	b139      	cbz	r1, 800dbea <rmw_uxrce_transport_init+0x1a>
 800dbda:	6949      	ldr	r1, [r1, #20]
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f000 fa43 	bl	800e068 <uxr_init_custom_transport>
 800dbe2:	f080 0001 	eor.w	r0, r0, #1
 800dbe6:	b2c0      	uxtb	r0, r0
 800dbe8:	bd08      	pop	{r3, pc}
 800dbea:	4b04      	ldr	r3, [pc, #16]	@ (800dbfc <rmw_uxrce_transport_init+0x2c>)
 800dbec:	4610      	mov	r0, r2
 800dbee:	6859      	ldr	r1, [r3, #4]
 800dbf0:	f000 fa3a 	bl	800e068 <uxr_init_custom_transport>
 800dbf4:	f080 0001 	eor.w	r0, r0, #1
 800dbf8:	b2c0      	uxtb	r0, r0
 800dbfa:	bd08      	pop	{r3, pc}
 800dbfc:	200091ac 	.word	0x200091ac

0800dc00 <rmw_uros_epoch_nanos>:
 800dc00:	4b05      	ldr	r3, [pc, #20]	@ (800dc18 <rmw_uros_epoch_nanos+0x18>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	b123      	cbz	r3, 800dc10 <rmw_uros_epoch_nanos+0x10>
 800dc06:	6898      	ldr	r0, [r3, #8]
 800dc08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc0c:	f7fb bdba 	b.w	8009784 <uxr_epoch_nanos>
 800dc10:	2000      	movs	r0, #0
 800dc12:	2100      	movs	r1, #0
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	2000dac4 	.word	0x2000dac4

0800dc1c <ucdr_serialize_endian_array_char>:
 800dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc20:	4619      	mov	r1, r3
 800dc22:	461f      	mov	r7, r3
 800dc24:	4605      	mov	r5, r0
 800dc26:	4690      	mov	r8, r2
 800dc28:	f7fa fb2e 	bl	8008288 <ucdr_check_buffer_available_for>
 800dc2c:	b9e0      	cbnz	r0, 800dc68 <ucdr_serialize_endian_array_char+0x4c>
 800dc2e:	463e      	mov	r6, r7
 800dc30:	e009      	b.n	800dc46 <ucdr_serialize_endian_array_char+0x2a>
 800dc32:	68a8      	ldr	r0, [r5, #8]
 800dc34:	f002 fe33 	bl	801089e <memcpy>
 800dc38:	68ab      	ldr	r3, [r5, #8]
 800dc3a:	6928      	ldr	r0, [r5, #16]
 800dc3c:	4423      	add	r3, r4
 800dc3e:	4420      	add	r0, r4
 800dc40:	1b36      	subs	r6, r6, r4
 800dc42:	60ab      	str	r3, [r5, #8]
 800dc44:	6128      	str	r0, [r5, #16]
 800dc46:	4631      	mov	r1, r6
 800dc48:	2201      	movs	r2, #1
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7fa fba4 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800dc50:	1bb9      	subs	r1, r7, r6
 800dc52:	4441      	add	r1, r8
 800dc54:	4604      	mov	r4, r0
 800dc56:	4602      	mov	r2, r0
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d1ea      	bne.n	800dc32 <ucdr_serialize_endian_array_char+0x16>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	7da8      	ldrb	r0, [r5, #22]
 800dc60:	756b      	strb	r3, [r5, #21]
 800dc62:	4058      	eors	r0, r3
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc68:	463a      	mov	r2, r7
 800dc6a:	68a8      	ldr	r0, [r5, #8]
 800dc6c:	4641      	mov	r1, r8
 800dc6e:	f002 fe16 	bl	801089e <memcpy>
 800dc72:	68aa      	ldr	r2, [r5, #8]
 800dc74:	692b      	ldr	r3, [r5, #16]
 800dc76:	443a      	add	r2, r7
 800dc78:	443b      	add	r3, r7
 800dc7a:	60aa      	str	r2, [r5, #8]
 800dc7c:	612b      	str	r3, [r5, #16]
 800dc7e:	e7ed      	b.n	800dc5c <ucdr_serialize_endian_array_char+0x40>

0800dc80 <ucdr_deserialize_endian_array_char>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	4619      	mov	r1, r3
 800dc86:	461f      	mov	r7, r3
 800dc88:	4605      	mov	r5, r0
 800dc8a:	4690      	mov	r8, r2
 800dc8c:	f7fa fafc 	bl	8008288 <ucdr_check_buffer_available_for>
 800dc90:	b9e0      	cbnz	r0, 800dccc <ucdr_deserialize_endian_array_char+0x4c>
 800dc92:	463e      	mov	r6, r7
 800dc94:	e009      	b.n	800dcaa <ucdr_deserialize_endian_array_char+0x2a>
 800dc96:	68a9      	ldr	r1, [r5, #8]
 800dc98:	f002 fe01 	bl	801089e <memcpy>
 800dc9c:	68ab      	ldr	r3, [r5, #8]
 800dc9e:	6928      	ldr	r0, [r5, #16]
 800dca0:	4423      	add	r3, r4
 800dca2:	4420      	add	r0, r4
 800dca4:	1b36      	subs	r6, r6, r4
 800dca6:	60ab      	str	r3, [r5, #8]
 800dca8:	6128      	str	r0, [r5, #16]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	4631      	mov	r1, r6
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f7fa fb72 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	1bb8      	subs	r0, r7, r6
 800dcb8:	4440      	add	r0, r8
 800dcba:	4622      	mov	r2, r4
 800dcbc:	2c00      	cmp	r4, #0
 800dcbe:	d1ea      	bne.n	800dc96 <ucdr_deserialize_endian_array_char+0x16>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	7da8      	ldrb	r0, [r5, #22]
 800dcc4:	756b      	strb	r3, [r5, #21]
 800dcc6:	4058      	eors	r0, r3
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	463a      	mov	r2, r7
 800dcce:	68a9      	ldr	r1, [r5, #8]
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	f002 fde4 	bl	801089e <memcpy>
 800dcd6:	68aa      	ldr	r2, [r5, #8]
 800dcd8:	692b      	ldr	r3, [r5, #16]
 800dcda:	443a      	add	r2, r7
 800dcdc:	443b      	add	r3, r7
 800dcde:	60aa      	str	r2, [r5, #8]
 800dce0:	612b      	str	r3, [r5, #16]
 800dce2:	e7ed      	b.n	800dcc0 <ucdr_deserialize_endian_array_char+0x40>

0800dce4 <ucdr_serialize_array_uint8_t>:
 800dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce8:	4688      	mov	r8, r1
 800dcea:	4611      	mov	r1, r2
 800dcec:	4617      	mov	r7, r2
 800dcee:	4605      	mov	r5, r0
 800dcf0:	f7fa faca 	bl	8008288 <ucdr_check_buffer_available_for>
 800dcf4:	b9e0      	cbnz	r0, 800dd30 <ucdr_serialize_array_uint8_t+0x4c>
 800dcf6:	463e      	mov	r6, r7
 800dcf8:	e009      	b.n	800dd0e <ucdr_serialize_array_uint8_t+0x2a>
 800dcfa:	68a8      	ldr	r0, [r5, #8]
 800dcfc:	f002 fdcf 	bl	801089e <memcpy>
 800dd00:	68aa      	ldr	r2, [r5, #8]
 800dd02:	692b      	ldr	r3, [r5, #16]
 800dd04:	4422      	add	r2, r4
 800dd06:	4423      	add	r3, r4
 800dd08:	1b36      	subs	r6, r6, r4
 800dd0a:	60aa      	str	r2, [r5, #8]
 800dd0c:	612b      	str	r3, [r5, #16]
 800dd0e:	4631      	mov	r1, r6
 800dd10:	2201      	movs	r2, #1
 800dd12:	4628      	mov	r0, r5
 800dd14:	f7fa fb40 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800dd18:	1bb9      	subs	r1, r7, r6
 800dd1a:	4441      	add	r1, r8
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	4602      	mov	r2, r0
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d1ea      	bne.n	800dcfa <ucdr_serialize_array_uint8_t+0x16>
 800dd24:	2301      	movs	r3, #1
 800dd26:	7da8      	ldrb	r0, [r5, #22]
 800dd28:	756b      	strb	r3, [r5, #21]
 800dd2a:	4058      	eors	r0, r3
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	463a      	mov	r2, r7
 800dd32:	68a8      	ldr	r0, [r5, #8]
 800dd34:	4641      	mov	r1, r8
 800dd36:	f002 fdb2 	bl	801089e <memcpy>
 800dd3a:	68aa      	ldr	r2, [r5, #8]
 800dd3c:	692b      	ldr	r3, [r5, #16]
 800dd3e:	443a      	add	r2, r7
 800dd40:	443b      	add	r3, r7
 800dd42:	60aa      	str	r2, [r5, #8]
 800dd44:	612b      	str	r3, [r5, #16]
 800dd46:	e7ed      	b.n	800dd24 <ucdr_serialize_array_uint8_t+0x40>

0800dd48 <ucdr_serialize_endian_array_uint8_t>:
 800dd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	461f      	mov	r7, r3
 800dd50:	4605      	mov	r5, r0
 800dd52:	4690      	mov	r8, r2
 800dd54:	f7fa fa98 	bl	8008288 <ucdr_check_buffer_available_for>
 800dd58:	b9e0      	cbnz	r0, 800dd94 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800dd5a:	463e      	mov	r6, r7
 800dd5c:	e009      	b.n	800dd72 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800dd5e:	68a8      	ldr	r0, [r5, #8]
 800dd60:	f002 fd9d 	bl	801089e <memcpy>
 800dd64:	68ab      	ldr	r3, [r5, #8]
 800dd66:	6928      	ldr	r0, [r5, #16]
 800dd68:	4423      	add	r3, r4
 800dd6a:	4420      	add	r0, r4
 800dd6c:	1b36      	subs	r6, r6, r4
 800dd6e:	60ab      	str	r3, [r5, #8]
 800dd70:	6128      	str	r0, [r5, #16]
 800dd72:	4631      	mov	r1, r6
 800dd74:	2201      	movs	r2, #1
 800dd76:	4628      	mov	r0, r5
 800dd78:	f7fa fb0e 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800dd7c:	1bb9      	subs	r1, r7, r6
 800dd7e:	4441      	add	r1, r8
 800dd80:	4604      	mov	r4, r0
 800dd82:	4602      	mov	r2, r0
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d1ea      	bne.n	800dd5e <ucdr_serialize_endian_array_uint8_t+0x16>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	7da8      	ldrb	r0, [r5, #22]
 800dd8c:	756b      	strb	r3, [r5, #21]
 800dd8e:	4058      	eors	r0, r3
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	463a      	mov	r2, r7
 800dd96:	68a8      	ldr	r0, [r5, #8]
 800dd98:	4641      	mov	r1, r8
 800dd9a:	f002 fd80 	bl	801089e <memcpy>
 800dd9e:	68aa      	ldr	r2, [r5, #8]
 800dda0:	692b      	ldr	r3, [r5, #16]
 800dda2:	443a      	add	r2, r7
 800dda4:	443b      	add	r3, r7
 800dda6:	60aa      	str	r2, [r5, #8]
 800dda8:	612b      	str	r3, [r5, #16]
 800ddaa:	e7ed      	b.n	800dd88 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ddac <ucdr_deserialize_array_uint8_t>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4688      	mov	r8, r1
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	4617      	mov	r7, r2
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	f7fa fa66 	bl	8008288 <ucdr_check_buffer_available_for>
 800ddbc:	b9e0      	cbnz	r0, 800ddf8 <ucdr_deserialize_array_uint8_t+0x4c>
 800ddbe:	463e      	mov	r6, r7
 800ddc0:	e009      	b.n	800ddd6 <ucdr_deserialize_array_uint8_t+0x2a>
 800ddc2:	68a9      	ldr	r1, [r5, #8]
 800ddc4:	f002 fd6b 	bl	801089e <memcpy>
 800ddc8:	68aa      	ldr	r2, [r5, #8]
 800ddca:	692b      	ldr	r3, [r5, #16]
 800ddcc:	4422      	add	r2, r4
 800ddce:	4423      	add	r3, r4
 800ddd0:	1b36      	subs	r6, r6, r4
 800ddd2:	60aa      	str	r2, [r5, #8]
 800ddd4:	612b      	str	r3, [r5, #16]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4631      	mov	r1, r6
 800ddda:	4628      	mov	r0, r5
 800dddc:	f7fa fadc 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800dde0:	4604      	mov	r4, r0
 800dde2:	1bb8      	subs	r0, r7, r6
 800dde4:	4440      	add	r0, r8
 800dde6:	4622      	mov	r2, r4
 800dde8:	2c00      	cmp	r4, #0
 800ddea:	d1ea      	bne.n	800ddc2 <ucdr_deserialize_array_uint8_t+0x16>
 800ddec:	2301      	movs	r3, #1
 800ddee:	7da8      	ldrb	r0, [r5, #22]
 800ddf0:	756b      	strb	r3, [r5, #21]
 800ddf2:	4058      	eors	r0, r3
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf8:	463a      	mov	r2, r7
 800ddfa:	68a9      	ldr	r1, [r5, #8]
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	f002 fd4e 	bl	801089e <memcpy>
 800de02:	68aa      	ldr	r2, [r5, #8]
 800de04:	692b      	ldr	r3, [r5, #16]
 800de06:	443a      	add	r2, r7
 800de08:	443b      	add	r3, r7
 800de0a:	60aa      	str	r2, [r5, #8]
 800de0c:	612b      	str	r3, [r5, #16]
 800de0e:	e7ed      	b.n	800ddec <ucdr_deserialize_array_uint8_t+0x40>

0800de10 <ucdr_deserialize_endian_array_uint8_t>:
 800de10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de14:	4619      	mov	r1, r3
 800de16:	461f      	mov	r7, r3
 800de18:	4605      	mov	r5, r0
 800de1a:	4690      	mov	r8, r2
 800de1c:	f7fa fa34 	bl	8008288 <ucdr_check_buffer_available_for>
 800de20:	b9e0      	cbnz	r0, 800de5c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800de22:	463e      	mov	r6, r7
 800de24:	e009      	b.n	800de3a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800de26:	68a9      	ldr	r1, [r5, #8]
 800de28:	f002 fd39 	bl	801089e <memcpy>
 800de2c:	68ab      	ldr	r3, [r5, #8]
 800de2e:	6928      	ldr	r0, [r5, #16]
 800de30:	4423      	add	r3, r4
 800de32:	4420      	add	r0, r4
 800de34:	1b36      	subs	r6, r6, r4
 800de36:	60ab      	str	r3, [r5, #8]
 800de38:	6128      	str	r0, [r5, #16]
 800de3a:	2201      	movs	r2, #1
 800de3c:	4631      	mov	r1, r6
 800de3e:	4628      	mov	r0, r5
 800de40:	f7fa faaa 	bl	8008398 <ucdr_check_final_buffer_behavior_array>
 800de44:	4604      	mov	r4, r0
 800de46:	1bb8      	subs	r0, r7, r6
 800de48:	4440      	add	r0, r8
 800de4a:	4622      	mov	r2, r4
 800de4c:	2c00      	cmp	r4, #0
 800de4e:	d1ea      	bne.n	800de26 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800de50:	2301      	movs	r3, #1
 800de52:	7da8      	ldrb	r0, [r5, #22]
 800de54:	756b      	strb	r3, [r5, #21]
 800de56:	4058      	eors	r0, r3
 800de58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5c:	463a      	mov	r2, r7
 800de5e:	68a9      	ldr	r1, [r5, #8]
 800de60:	4640      	mov	r0, r8
 800de62:	f002 fd1c 	bl	801089e <memcpy>
 800de66:	68aa      	ldr	r2, [r5, #8]
 800de68:	692b      	ldr	r3, [r5, #16]
 800de6a:	443a      	add	r2, r7
 800de6c:	443b      	add	r3, r7
 800de6e:	60aa      	str	r2, [r5, #8]
 800de70:	612b      	str	r3, [r5, #16]
 800de72:	e7ed      	b.n	800de50 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800de74 <ucdr_serialize_sequence_char>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4615      	mov	r5, r2
 800de78:	460e      	mov	r6, r1
 800de7a:	7d01      	ldrb	r1, [r0, #20]
 800de7c:	4604      	mov	r4, r0
 800de7e:	f7f9 fc5b 	bl	8007738 <ucdr_serialize_endian_uint32_t>
 800de82:	b90d      	cbnz	r5, 800de88 <ucdr_serialize_sequence_char+0x14>
 800de84:	2001      	movs	r0, #1
 800de86:	bd70      	pop	{r4, r5, r6, pc}
 800de88:	7d21      	ldrb	r1, [r4, #20]
 800de8a:	462b      	mov	r3, r5
 800de8c:	4632      	mov	r2, r6
 800de8e:	4620      	mov	r0, r4
 800de90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de94:	f7ff bec2 	b.w	800dc1c <ucdr_serialize_endian_array_char>

0800de98 <ucdr_deserialize_sequence_char>:
 800de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9c:	461d      	mov	r5, r3
 800de9e:	4616      	mov	r6, r2
 800dea0:	460f      	mov	r7, r1
 800dea2:	461a      	mov	r2, r3
 800dea4:	7d01      	ldrb	r1, [r0, #20]
 800dea6:	4604      	mov	r4, r0
 800dea8:	f7f9 fd6e 	bl	8007988 <ucdr_deserialize_endian_uint32_t>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	429e      	cmp	r6, r3
 800deb0:	bf3c      	itt	cc
 800deb2:	2201      	movcc	r2, #1
 800deb4:	75a2      	strbcc	r2, [r4, #22]
 800deb6:	b913      	cbnz	r3, 800debe <ucdr_deserialize_sequence_char+0x26>
 800deb8:	2001      	movs	r0, #1
 800deba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800debe:	7d21      	ldrb	r1, [r4, #20]
 800dec0:	463a      	mov	r2, r7
 800dec2:	4620      	mov	r0, r4
 800dec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dec8:	f7ff beda 	b.w	800dc80 <ucdr_deserialize_endian_array_char>

0800decc <ucdr_serialize_sequence_uint8_t>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4615      	mov	r5, r2
 800ded0:	460e      	mov	r6, r1
 800ded2:	7d01      	ldrb	r1, [r0, #20]
 800ded4:	4604      	mov	r4, r0
 800ded6:	f7f9 fc2f 	bl	8007738 <ucdr_serialize_endian_uint32_t>
 800deda:	b90d      	cbnz	r5, 800dee0 <ucdr_serialize_sequence_uint8_t+0x14>
 800dedc:	2001      	movs	r0, #1
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	7d21      	ldrb	r1, [r4, #20]
 800dee2:	462b      	mov	r3, r5
 800dee4:	4632      	mov	r2, r6
 800dee6:	4620      	mov	r0, r4
 800dee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800deec:	f7ff bf2c 	b.w	800dd48 <ucdr_serialize_endian_array_uint8_t>

0800def0 <ucdr_deserialize_sequence_uint8_t>:
 800def0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def4:	461d      	mov	r5, r3
 800def6:	4616      	mov	r6, r2
 800def8:	460f      	mov	r7, r1
 800defa:	461a      	mov	r2, r3
 800defc:	7d01      	ldrb	r1, [r0, #20]
 800defe:	4604      	mov	r4, r0
 800df00:	f7f9 fd42 	bl	8007988 <ucdr_deserialize_endian_uint32_t>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	429e      	cmp	r6, r3
 800df08:	bf3c      	itt	cc
 800df0a:	2201      	movcc	r2, #1
 800df0c:	75a2      	strbcc	r2, [r4, #22]
 800df0e:	b913      	cbnz	r3, 800df16 <ucdr_deserialize_sequence_uint8_t+0x26>
 800df10:	2001      	movs	r0, #1
 800df12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df16:	7d21      	ldrb	r1, [r4, #20]
 800df18:	463a      	mov	r2, r7
 800df1a:	4620      	mov	r0, r4
 800df1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df20:	f7ff bf76 	b.w	800de10 <ucdr_deserialize_endian_array_uint8_t>

0800df24 <ucdr_serialize_string>:
 800df24:	b510      	push	{r4, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	4604      	mov	r4, r0
 800df2a:	4608      	mov	r0, r1
 800df2c:	9101      	str	r1, [sp, #4]
 800df2e:	f7f2 f961 	bl	80001f4 <strlen>
 800df32:	9901      	ldr	r1, [sp, #4]
 800df34:	1c42      	adds	r2, r0, #1
 800df36:	4620      	mov	r0, r4
 800df38:	b002      	add	sp, #8
 800df3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df3e:	f7ff bf99 	b.w	800de74 <ucdr_serialize_sequence_char>
 800df42:	bf00      	nop

0800df44 <ucdr_deserialize_string>:
 800df44:	b500      	push	{lr}
 800df46:	b083      	sub	sp, #12
 800df48:	ab01      	add	r3, sp, #4
 800df4a:	f7ff ffa5 	bl	800de98 <ucdr_deserialize_sequence_char>
 800df4e:	b003      	add	sp, #12
 800df50:	f85d fb04 	ldr.w	pc, [sp], #4

0800df54 <get_custom_error>:
 800df54:	4b01      	ldr	r3, [pc, #4]	@ (800df5c <get_custom_error+0x8>)
 800df56:	7818      	ldrb	r0, [r3, #0]
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	2000dc10 	.word	0x2000dc10

0800df60 <recv_custom_msg>:
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	4693      	mov	fp, r2
 800df66:	b089      	sub	sp, #36	@ 0x24
 800df68:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800df6c:	9305      	str	r3, [sp, #20]
 800df6e:	468a      	mov	sl, r1
 800df70:	2100      	movs	r1, #0
 800df72:	4604      	mov	r4, r0
 800df74:	f88d 101e 	strb.w	r1, [sp, #30]
 800df78:	b322      	cbz	r2, 800dfc4 <recv_custom_msg+0x64>
 800df7a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800df7e:	f10d 081f 	add.w	r8, sp, #31
 800df82:	af05      	add	r7, sp, #20
 800df84:	f10d 061e 	add.w	r6, sp, #30
 800df88:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800df8c:	e002      	b.n	800df94 <recv_custom_msg+0x34>
 800df8e:	9b05      	ldr	r3, [sp, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	dd0f      	ble.n	800dfb4 <recv_custom_msg+0x54>
 800df94:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800df98:	4623      	mov	r3, r4
 800df9a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800df9e:	e9cd 5600 	strd	r5, r6, [sp]
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	4648      	mov	r0, r9
 800dfa6:	f001 f8f3 	bl	800f190 <uxr_read_framed_msg>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d0ef      	beq.n	800df8e <recv_custom_msg+0x2e>
 800dfae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dfb2:	b1b3      	cbz	r3, 800dfe2 <recv_custom_msg+0x82>
 800dfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800dff4 <recv_custom_msg+0x94>)
 800dfb6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800dfba:	701a      	strb	r2, [r3, #0]
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	b009      	add	sp, #36	@ 0x24
 800dfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc4:	f10d 021f 	add.w	r2, sp, #31
 800dfc8:	9200      	str	r2, [sp, #0]
 800dfca:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800dfce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dfd2:	4601      	mov	r1, r0
 800dfd4:	47a8      	blx	r5
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d0ec      	beq.n	800dfb4 <recv_custom_msg+0x54>
 800dfda:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e8      	bne.n	800dfb4 <recv_custom_msg+0x54>
 800dfe2:	f8cb 0000 	str.w	r0, [fp]
 800dfe6:	2001      	movs	r0, #1
 800dfe8:	f8ca 4000 	str.w	r4, [sl]
 800dfec:	b009      	add	sp, #36	@ 0x24
 800dfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff2:	bf00      	nop
 800dff4:	2000dc10 	.word	0x2000dc10

0800dff8 <send_custom_msg>:
 800dff8:	b530      	push	{r4, r5, lr}
 800dffa:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800dffe:	b087      	sub	sp, #28
 800e000:	4615      	mov	r5, r2
 800e002:	b974      	cbnz	r4, 800e022 <send_custom_msg+0x2a>
 800e004:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e008:	f10d 0317 	add.w	r3, sp, #23
 800e00c:	47a0      	blx	r4
 800e00e:	b108      	cbz	r0, 800e014 <send_custom_msg+0x1c>
 800e010:	42a8      	cmp	r0, r5
 800e012:	d015      	beq.n	800e040 <send_custom_msg+0x48>
 800e014:	4b0c      	ldr	r3, [pc, #48]	@ (800e048 <send_custom_msg+0x50>)
 800e016:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e01a:	701a      	strb	r2, [r3, #0]
 800e01c:	2000      	movs	r0, #0
 800e01e:	b007      	add	sp, #28
 800e020:	bd30      	pop	{r4, r5, pc}
 800e022:	460b      	mov	r3, r1
 800e024:	2200      	movs	r2, #0
 800e026:	f10d 0117 	add.w	r1, sp, #23
 800e02a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e02e:	4602      	mov	r2, r0
 800e030:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e034:	9500      	str	r5, [sp, #0]
 800e036:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e03a:	f000 feb1 	bl	800eda0 <uxr_write_framed_msg>
 800e03e:	e7e6      	b.n	800e00e <send_custom_msg+0x16>
 800e040:	2001      	movs	r0, #1
 800e042:	b007      	add	sp, #28
 800e044:	bd30      	pop	{r4, r5, pc}
 800e046:	bf00      	nop
 800e048:	2000dc10 	.word	0x2000dc10

0800e04c <uxr_set_custom_transport_callbacks>:
 800e04c:	b410      	push	{r4}
 800e04e:	9c01      	ldr	r4, [sp, #4]
 800e050:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e054:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e058:	9b02      	ldr	r3, [sp, #8]
 800e05a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e062:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e066:	4770      	bx	lr

0800e068 <uxr_init_custom_transport>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e06e:	b303      	cbz	r3, 800e0b2 <uxr_init_custom_transport+0x4a>
 800e070:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e074:	4604      	mov	r4, r0
 800e076:	b1e2      	cbz	r2, 800e0b2 <uxr_init_custom_transport+0x4a>
 800e078:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e07c:	b1ca      	cbz	r2, 800e0b2 <uxr_init_custom_transport+0x4a>
 800e07e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e082:	b1b2      	cbz	r2, 800e0b2 <uxr_init_custom_transport+0x4a>
 800e084:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e088:	4798      	blx	r3
 800e08a:	4605      	mov	r5, r0
 800e08c:	b188      	cbz	r0, 800e0b2 <uxr_init_custom_transport+0x4a>
 800e08e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e092:	b98b      	cbnz	r3, 800e0b8 <uxr_init_custom_transport+0x50>
 800e094:	490b      	ldr	r1, [pc, #44]	@ (800e0c4 <uxr_init_custom_transport+0x5c>)
 800e096:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c8 <uxr_init_custom_transport+0x60>)
 800e098:	4a0c      	ldr	r2, [pc, #48]	@ (800e0cc <uxr_init_custom_transport+0x64>)
 800e09a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e09e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0a2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e0a6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e0aa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	bd38      	pop	{r3, r4, r5, pc}
 800e0b2:	2500      	movs	r5, #0
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e0be:	f000 fe69 	bl	800ed94 <uxr_init_framing_io>
 800e0c2:	e7e7      	b.n	800e094 <uxr_init_custom_transport+0x2c>
 800e0c4:	0800dff9 	.word	0x0800dff9
 800e0c8:	0800df61 	.word	0x0800df61
 800e0cc:	0800df55 	.word	0x0800df55

0800e0d0 <uxr_close_custom_transport>:
 800e0d0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e0d4:	4718      	bx	r3
 800e0d6:	bf00      	nop

0800e0d8 <uxr_init_input_best_effort_stream>:
 800e0d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e0dc:	8003      	strh	r3, [r0, #0]
 800e0de:	4770      	bx	lr

0800e0e0 <uxr_reset_input_best_effort_stream>:
 800e0e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e0e4:	8003      	strh	r3, [r0, #0]
 800e0e6:	4770      	bx	lr

0800e0e8 <uxr_receive_best_effort_message>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	8800      	ldrh	r0, [r0, #0]
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	f000 fe38 	bl	800ed64 <uxr_seq_num_cmp>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e0fc:	bfb8      	it	lt
 800e0fe:	8025      	strhlt	r5, [r4, #0]
 800e100:	bd38      	pop	{r3, r4, r5, pc}
 800e102:	bf00      	nop

0800e104 <on_full_input_buffer>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	4605      	mov	r5, r0
 800e108:	460c      	mov	r4, r1
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	6809      	ldr	r1, [r1, #0]
 800e10e:	8920      	ldrh	r0, [r4, #8]
 800e110:	6862      	ldr	r2, [r4, #4]
 800e112:	fbb2 f2f0 	udiv	r2, r2, r0
 800e116:	eba3 0c01 	sub.w	ip, r3, r1
 800e11a:	fbbc fcf2 	udiv	ip, ip, r2
 800e11e:	f10c 0c01 	add.w	ip, ip, #1
 800e122:	fa1f f38c 	uxth.w	r3, ip
 800e126:	fbb3 f6f0 	udiv	r6, r3, r0
 800e12a:	fb00 3316 	mls	r3, r0, r6, r3
 800e12e:	b29b      	uxth	r3, r3
 800e130:	fb02 f303 	mul.w	r3, r2, r3
 800e134:	1d18      	adds	r0, r3, #4
 800e136:	4408      	add	r0, r1
 800e138:	7d26      	ldrb	r6, [r4, #20]
 800e13a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e13e:	b116      	cbz	r6, 800e146 <on_full_input_buffer+0x42>
 800e140:	2600      	movs	r6, #0
 800e142:	f840 6c04 	str.w	r6, [r0, #-4]
 800e146:	2a03      	cmp	r2, #3
 800e148:	d801      	bhi.n	800e14e <on_full_input_buffer+0x4a>
 800e14a:	2001      	movs	r0, #1
 800e14c:	bd70      	pop	{r4, r5, r6, pc}
 800e14e:	3308      	adds	r3, #8
 800e150:	4419      	add	r1, r3
 800e152:	4628      	mov	r0, r5
 800e154:	692b      	ldr	r3, [r5, #16]
 800e156:	3a04      	subs	r2, #4
 800e158:	f7fa f8e2 	bl	8008320 <ucdr_init_buffer_origin>
 800e15c:	4628      	mov	r0, r5
 800e15e:	4903      	ldr	r1, [pc, #12]	@ (800e16c <on_full_input_buffer+0x68>)
 800e160:	4622      	mov	r2, r4
 800e162:	f7fa f8b9 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800e166:	2000      	movs	r0, #0
 800e168:	bd70      	pop	{r4, r5, r6, pc}
 800e16a:	bf00      	nop
 800e16c:	0800e105 	.word	0x0800e105

0800e170 <uxr_init_input_reliable_stream>:
 800e170:	b500      	push	{lr}
 800e172:	e9c0 1200 	strd	r1, r2, [r0]
 800e176:	f04f 0e00 	mov.w	lr, #0
 800e17a:	9a01      	ldr	r2, [sp, #4]
 800e17c:	8103      	strh	r3, [r0, #8]
 800e17e:	6102      	str	r2, [r0, #16]
 800e180:	f880 e014 	strb.w	lr, [r0, #20]
 800e184:	b1d3      	cbz	r3, 800e1bc <uxr_init_input_reliable_stream+0x4c>
 800e186:	f8c1 e000 	str.w	lr, [r1]
 800e18a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e18e:	f1bc 0f01 	cmp.w	ip, #1
 800e192:	d913      	bls.n	800e1bc <uxr_init_input_reliable_stream+0x4c>
 800e194:	2301      	movs	r3, #1
 800e196:	fbb3 f1fc 	udiv	r1, r3, ip
 800e19a:	fb0c 3111 	mls	r1, ip, r1, r3
 800e19e:	b289      	uxth	r1, r1
 800e1a0:	6842      	ldr	r2, [r0, #4]
 800e1a2:	fbb2 f2fc 	udiv	r2, r2, ip
 800e1a6:	fb01 f202 	mul.w	r2, r1, r2
 800e1aa:	6801      	ldr	r1, [r0, #0]
 800e1ac:	f841 e002 	str.w	lr, [r1, r2]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	459c      	cmp	ip, r3
 800e1ba:	d8ec      	bhi.n	800e196 <uxr_init_input_reliable_stream+0x26>
 800e1bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1c0:	60c3      	str	r3, [r0, #12]
 800e1c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1c6:	bf00      	nop

0800e1c8 <uxr_reset_input_reliable_stream>:
 800e1c8:	8901      	ldrh	r1, [r0, #8]
 800e1ca:	b1e9      	cbz	r1, 800e208 <uxr_reset_input_reliable_stream+0x40>
 800e1cc:	f04f 0c00 	mov.w	ip, #0
 800e1d0:	b500      	push	{lr}
 800e1d2:	4663      	mov	r3, ip
 800e1d4:	46e6      	mov	lr, ip
 800e1d6:	fbb3 f2f1 	udiv	r2, r3, r1
 800e1da:	fb01 3312 	mls	r3, r1, r2, r3
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	6842      	ldr	r2, [r0, #4]
 800e1e2:	fbb2 f2f1 	udiv	r2, r2, r1
 800e1e6:	fb02 f303 	mul.w	r3, r2, r3
 800e1ea:	6802      	ldr	r2, [r0, #0]
 800e1ec:	f842 e003 	str.w	lr, [r2, r3]
 800e1f0:	f10c 0c01 	add.w	ip, ip, #1
 800e1f4:	8901      	ldrh	r1, [r0, #8]
 800e1f6:	fa1f f38c 	uxth.w	r3, ip
 800e1fa:	4299      	cmp	r1, r3
 800e1fc:	d8eb      	bhi.n	800e1d6 <uxr_reset_input_reliable_stream+0xe>
 800e1fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e202:	60c3      	str	r3, [r0, #12]
 800e204:	f85d fb04 	ldr.w	pc, [sp], #4
 800e208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e20c:	60c3      	str	r3, [r0, #12]
 800e20e:	4770      	bx	lr

0800e210 <uxr_receive_reliable_message>:
 800e210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e214:	4604      	mov	r4, r0
 800e216:	460d      	mov	r5, r1
 800e218:	8901      	ldrh	r1, [r0, #8]
 800e21a:	8980      	ldrh	r0, [r0, #12]
 800e21c:	4690      	mov	r8, r2
 800e21e:	461f      	mov	r7, r3
 800e220:	f000 fd98 	bl	800ed54 <uxr_seq_num_add>
 800e224:	4629      	mov	r1, r5
 800e226:	4606      	mov	r6, r0
 800e228:	89a0      	ldrh	r0, [r4, #12]
 800e22a:	f000 fd9b 	bl	800ed64 <uxr_seq_num_cmp>
 800e22e:	2800      	cmp	r0, #0
 800e230:	db0a      	blt.n	800e248 <uxr_receive_reliable_message+0x38>
 800e232:	2600      	movs	r6, #0
 800e234:	89e0      	ldrh	r0, [r4, #14]
 800e236:	4629      	mov	r1, r5
 800e238:	f000 fd94 	bl	800ed64 <uxr_seq_num_cmp>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	da00      	bge.n	800e242 <uxr_receive_reliable_message+0x32>
 800e240:	81e5      	strh	r5, [r4, #14]
 800e242:	4630      	mov	r0, r6
 800e244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e248:	4630      	mov	r0, r6
 800e24a:	4629      	mov	r1, r5
 800e24c:	f000 fd8a 	bl	800ed64 <uxr_seq_num_cmp>
 800e250:	2800      	cmp	r0, #0
 800e252:	dbee      	blt.n	800e232 <uxr_receive_reliable_message+0x22>
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	4640      	mov	r0, r8
 800e258:	4798      	blx	r3
 800e25a:	2101      	movs	r1, #1
 800e25c:	4681      	mov	r9, r0
 800e25e:	89a0      	ldrh	r0, [r4, #12]
 800e260:	f000 fd78 	bl	800ed54 <uxr_seq_num_add>
 800e264:	f1b9 0f00 	cmp.w	r9, #0
 800e268:	d101      	bne.n	800e26e <uxr_receive_reliable_message+0x5e>
 800e26a:	4285      	cmp	r5, r0
 800e26c:	d047      	beq.n	800e2fe <uxr_receive_reliable_message+0xee>
 800e26e:	8922      	ldrh	r2, [r4, #8]
 800e270:	fbb5 f0f2 	udiv	r0, r5, r2
 800e274:	fb02 5010 	mls	r0, r2, r0, r5
 800e278:	b280      	uxth	r0, r0
 800e27a:	6863      	ldr	r3, [r4, #4]
 800e27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e280:	fb00 f303 	mul.w	r3, r0, r3
 800e284:	6820      	ldr	r0, [r4, #0]
 800e286:	3304      	adds	r3, #4
 800e288:	4418      	add	r0, r3
 800e28a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1cf      	bne.n	800e232 <uxr_receive_reliable_message+0x22>
 800e292:	4641      	mov	r1, r8
 800e294:	463a      	mov	r2, r7
 800e296:	f002 fb02 	bl	801089e <memcpy>
 800e29a:	8921      	ldrh	r1, [r4, #8]
 800e29c:	fbb5 f2f1 	udiv	r2, r5, r1
 800e2a0:	fb01 5212 	mls	r2, r1, r2, r5
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	6863      	ldr	r3, [r4, #4]
 800e2a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2ac:	fb02 f303 	mul.w	r3, r2, r3
 800e2b0:	6822      	ldr	r2, [r4, #0]
 800e2b2:	50d7      	str	r7, [r2, r3]
 800e2b4:	9a08      	ldr	r2, [sp, #32]
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	7013      	strb	r3, [r2, #0]
 800e2ba:	f1b9 0f00 	cmp.w	r9, #0
 800e2be:	d0b8      	beq.n	800e232 <uxr_receive_reliable_message+0x22>
 800e2c0:	89a6      	ldrh	r6, [r4, #12]
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	f000 fd45 	bl	800ed54 <uxr_seq_num_add>
 800e2ca:	8922      	ldrh	r2, [r4, #8]
 800e2cc:	6863      	ldr	r3, [r4, #4]
 800e2ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	fbb0 f0f2 	udiv	r0, r0, r2
 800e2d8:	fb02 6010 	mls	r0, r2, r0, r6
 800e2dc:	b280      	uxth	r0, r0
 800e2de:	fb00 f303 	mul.w	r3, r0, r3
 800e2e2:	6820      	ldr	r0, [r4, #0]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	4418      	add	r0, r3
 800e2e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d0a0      	beq.n	800e232 <uxr_receive_reliable_message+0x22>
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	4798      	blx	r3
 800e2f4:	2802      	cmp	r0, #2
 800e2f6:	d008      	beq.n	800e30a <uxr_receive_reliable_message+0xfa>
 800e2f8:	2801      	cmp	r0, #1
 800e2fa:	d0e2      	beq.n	800e2c2 <uxr_receive_reliable_message+0xb2>
 800e2fc:	e799      	b.n	800e232 <uxr_receive_reliable_message+0x22>
 800e2fe:	9b08      	ldr	r3, [sp, #32]
 800e300:	81a5      	strh	r5, [r4, #12]
 800e302:	2601      	movs	r6, #1
 800e304:	f883 9000 	strb.w	r9, [r3]
 800e308:	e794      	b.n	800e234 <uxr_receive_reliable_message+0x24>
 800e30a:	2601      	movs	r6, #1
 800e30c:	e792      	b.n	800e234 <uxr_receive_reliable_message+0x24>
 800e30e:	bf00      	nop

0800e310 <uxr_next_input_reliable_buffer_available>:
 800e310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	4604      	mov	r4, r0
 800e316:	460f      	mov	r7, r1
 800e318:	8980      	ldrh	r0, [r0, #12]
 800e31a:	2101      	movs	r1, #1
 800e31c:	4690      	mov	r8, r2
 800e31e:	f000 fd19 	bl	800ed54 <uxr_seq_num_add>
 800e322:	8922      	ldrh	r2, [r4, #8]
 800e324:	fbb0 f6f2 	udiv	r6, r0, r2
 800e328:	fb02 0616 	mls	r6, r2, r6, r0
 800e32c:	b2b6      	uxth	r6, r6
 800e32e:	6863      	ldr	r3, [r4, #4]
 800e330:	fbb3 f3f2 	udiv	r3, r3, r2
 800e334:	fb06 f303 	mul.w	r3, r6, r3
 800e338:	6826      	ldr	r6, [r4, #0]
 800e33a:	3304      	adds	r3, #4
 800e33c:	441e      	add	r6, r3
 800e33e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800e342:	f1b9 0f00 	cmp.w	r9, #0
 800e346:	d023      	beq.n	800e390 <uxr_next_input_reliable_buffer_available+0x80>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	4605      	mov	r5, r0
 800e34c:	4630      	mov	r0, r6
 800e34e:	4798      	blx	r3
 800e350:	4682      	mov	sl, r0
 800e352:	b300      	cbz	r0, 800e396 <uxr_next_input_reliable_buffer_available+0x86>
 800e354:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800e358:	2101      	movs	r1, #1
 800e35a:	4650      	mov	r0, sl
 800e35c:	f000 fcfa 	bl	800ed54 <uxr_seq_num_add>
 800e360:	8921      	ldrh	r1, [r4, #8]
 800e362:	fbb0 f2f1 	udiv	r2, r0, r1
 800e366:	4682      	mov	sl, r0
 800e368:	fb01 0212 	mls	r2, r1, r2, r0
 800e36c:	e9d4 0300 	ldrd	r0, r3, [r4]
 800e370:	b292      	uxth	r2, r2
 800e372:	fbb3 f3f1 	udiv	r3, r3, r1
 800e376:	fb02 f303 	mul.w	r3, r2, r3
 800e37a:	3304      	adds	r3, #4
 800e37c:	4418      	add	r0, r3
 800e37e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e382:	b12b      	cbz	r3, 800e390 <uxr_next_input_reliable_buffer_available+0x80>
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	4798      	blx	r3
 800e388:	2802      	cmp	r0, #2
 800e38a:	d01b      	beq.n	800e3c4 <uxr_next_input_reliable_buffer_available+0xb4>
 800e38c:	2801      	cmp	r0, #1
 800e38e:	d0e3      	beq.n	800e358 <uxr_next_input_reliable_buffer_available+0x48>
 800e390:	2000      	movs	r0, #0
 800e392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e396:	464a      	mov	r2, r9
 800e398:	4631      	mov	r1, r6
 800e39a:	4638      	mov	r0, r7
 800e39c:	f7f9 ffc8 	bl	8008330 <ucdr_init_buffer>
 800e3a0:	8921      	ldrh	r1, [r4, #8]
 800e3a2:	fbb5 f2f1 	udiv	r2, r5, r1
 800e3a6:	fb01 5212 	mls	r2, r1, r2, r5
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	6863      	ldr	r3, [r4, #4]
 800e3ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3b2:	fb02 f303 	mul.w	r3, r2, r3
 800e3b6:	6822      	ldr	r2, [r4, #0]
 800e3b8:	f842 a003 	str.w	sl, [r2, r3]
 800e3bc:	2001      	movs	r0, #1
 800e3be:	81a5      	strh	r5, [r4, #12]
 800e3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c4:	8920      	ldrh	r0, [r4, #8]
 800e3c6:	fbb5 f3f0 	udiv	r3, r5, r0
 800e3ca:	fb00 5513 	mls	r5, r0, r3, r5
 800e3ce:	b2ad      	uxth	r5, r5
 800e3d0:	6863      	ldr	r3, [r4, #4]
 800e3d2:	fbb3 f3f0 	udiv	r3, r3, r0
 800e3d6:	fb03 f505 	mul.w	r5, r3, r5
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	2000      	movs	r0, #0
 800e3de:	5158      	str	r0, [r3, r5]
 800e3e0:	eb06 0108 	add.w	r1, r6, r8
 800e3e4:	eba9 0208 	sub.w	r2, r9, r8
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f7f9 ffa1 	bl	8008330 <ucdr_init_buffer>
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	4903      	ldr	r1, [pc, #12]	@ (800e400 <uxr_next_input_reliable_buffer_available+0xf0>)
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	f7f9 ff70 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800e3f8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	e7c8      	b.n	800e392 <uxr_next_input_reliable_buffer_available+0x82>
 800e400:	0800e105 	.word	0x0800e105

0800e404 <uxr_process_heartbeat>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4611      	mov	r1, r2
 800e408:	4604      	mov	r4, r0
 800e40a:	89c0      	ldrh	r0, [r0, #14]
 800e40c:	4615      	mov	r5, r2
 800e40e:	f000 fca9 	bl	800ed64 <uxr_seq_num_cmp>
 800e412:	2800      	cmp	r0, #0
 800e414:	bfb8      	it	lt
 800e416:	81e5      	strhlt	r5, [r4, #14]
 800e418:	bd38      	pop	{r3, r4, r5, pc}
 800e41a:	bf00      	nop

0800e41c <uxr_compute_acknack>:
 800e41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e420:	8903      	ldrh	r3, [r0, #8]
 800e422:	8985      	ldrh	r5, [r0, #12]
 800e424:	4604      	mov	r4, r0
 800e426:	460e      	mov	r6, r1
 800e428:	b1d3      	cbz	r3, 800e460 <uxr_compute_acknack+0x44>
 800e42a:	4628      	mov	r0, r5
 800e42c:	2701      	movs	r7, #1
 800e42e:	e003      	b.n	800e438 <uxr_compute_acknack+0x1c>
 800e430:	4567      	cmp	r7, ip
 800e432:	d215      	bcs.n	800e460 <uxr_compute_acknack+0x44>
 800e434:	89a0      	ldrh	r0, [r4, #12]
 800e436:	3701      	adds	r7, #1
 800e438:	b2b9      	uxth	r1, r7
 800e43a:	f000 fc8b 	bl	800ed54 <uxr_seq_num_add>
 800e43e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e442:	fbb0 f3fc 	udiv	r3, r0, ip
 800e446:	fb0c 0313 	mls	r3, ip, r3, r0
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	e9d4 1300 	ldrd	r1, r3, [r4]
 800e450:	fbb3 f3fc 	udiv	r3, r3, ip
 800e454:	fb02 f303 	mul.w	r3, r2, r3
 800e458:	58cb      	ldr	r3, [r1, r3]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e8      	bne.n	800e430 <uxr_compute_acknack+0x14>
 800e45e:	4605      	mov	r5, r0
 800e460:	8035      	strh	r5, [r6, #0]
 800e462:	2101      	movs	r1, #1
 800e464:	4628      	mov	r0, r5
 800e466:	89e7      	ldrh	r7, [r4, #14]
 800e468:	f000 fc78 	bl	800ed5c <uxr_seq_num_sub>
 800e46c:	4601      	mov	r1, r0
 800e46e:	4638      	mov	r0, r7
 800e470:	f000 fc74 	bl	800ed5c <uxr_seq_num_sub>
 800e474:	4605      	mov	r5, r0
 800e476:	b318      	cbz	r0, 800e4c0 <uxr_compute_acknack+0xa4>
 800e478:	f04f 0900 	mov.w	r9, #0
 800e47c:	464f      	mov	r7, r9
 800e47e:	f04f 0801 	mov.w	r8, #1
 800e482:	fa1f f189 	uxth.w	r1, r9
 800e486:	8830      	ldrh	r0, [r6, #0]
 800e488:	f000 fc64 	bl	800ed54 <uxr_seq_num_add>
 800e48c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e490:	fbb0 f3fc 	udiv	r3, r0, ip
 800e494:	e9d4 1200 	ldrd	r1, r2, [r4]
 800e498:	fb03 001c 	mls	r0, r3, ip, r0
 800e49c:	b283      	uxth	r3, r0
 800e49e:	fbb2 f2fc 	udiv	r2, r2, ip
 800e4a2:	fb02 f303 	mul.w	r3, r2, r3
 800e4a6:	fa08 f209 	lsl.w	r2, r8, r9
 800e4aa:	58cb      	ldr	r3, [r1, r3]
 800e4ac:	f109 0901 	add.w	r9, r9, #1
 800e4b0:	b90b      	cbnz	r3, 800e4b6 <uxr_compute_acknack+0x9a>
 800e4b2:	4317      	orrs	r7, r2
 800e4b4:	b2bf      	uxth	r7, r7
 800e4b6:	454d      	cmp	r5, r9
 800e4b8:	d1e3      	bne.n	800e482 <uxr_compute_acknack+0x66>
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e4c8 <uxr_init_output_best_effort_stream>:
 800e4c8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800e4cc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800e4d0:	6001      	str	r1, [r0, #0]
 800e4d2:	7303      	strb	r3, [r0, #12]
 800e4d4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop

0800e4dc <uxr_reset_output_best_effort_stream>:
 800e4dc:	7b02      	ldrb	r2, [r0, #12]
 800e4de:	6042      	str	r2, [r0, #4]
 800e4e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e4e4:	81c3      	strh	r3, [r0, #14]
 800e4e6:	4770      	bx	lr

0800e4e8 <uxr_prepare_best_effort_buffer_to_write>:
 800e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	b083      	sub	sp, #12
 800e4ee:	6840      	ldr	r0, [r0, #4]
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	4616      	mov	r6, r2
 800e4f4:	f7fc fa02 	bl	800a8fc <uxr_submessage_padding>
 800e4f8:	6863      	ldr	r3, [r4, #4]
 800e4fa:	4418      	add	r0, r3
 800e4fc:	68a3      	ldr	r3, [r4, #8]
 800e4fe:	1942      	adds	r2, r0, r5
 800e500:	4293      	cmp	r3, r2
 800e502:	bf2c      	ite	cs
 800e504:	2701      	movcs	r7, #1
 800e506:	2700      	movcc	r7, #0
 800e508:	d202      	bcs.n	800e510 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800e50a:	4638      	mov	r0, r7
 800e50c:	b003      	add	sp, #12
 800e50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e510:	9000      	str	r0, [sp, #0]
 800e512:	6821      	ldr	r1, [r4, #0]
 800e514:	4630      	mov	r0, r6
 800e516:	2300      	movs	r3, #0
 800e518:	f7f9 fef8 	bl	800830c <ucdr_init_buffer_origin_offset>
 800e51c:	6861      	ldr	r1, [r4, #4]
 800e51e:	4638      	mov	r0, r7
 800e520:	4429      	add	r1, r5
 800e522:	6061      	str	r1, [r4, #4]
 800e524:	b003      	add	sp, #12
 800e526:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e528 <uxr_prepare_best_effort_buffer_to_send>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	4604      	mov	r4, r0
 800e52e:	461d      	mov	r5, r3
 800e530:	6840      	ldr	r0, [r0, #4]
 800e532:	7b23      	ldrb	r3, [r4, #12]
 800e534:	4298      	cmp	r0, r3
 800e536:	bf8c      	ite	hi
 800e538:	2601      	movhi	r6, #1
 800e53a:	2600      	movls	r6, #0
 800e53c:	d802      	bhi.n	800e544 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800e53e:	4630      	mov	r0, r6
 800e540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e544:	4688      	mov	r8, r1
 800e546:	89e0      	ldrh	r0, [r4, #14]
 800e548:	2101      	movs	r1, #1
 800e54a:	4617      	mov	r7, r2
 800e54c:	f000 fc02 	bl	800ed54 <uxr_seq_num_add>
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	81e0      	strh	r0, [r4, #14]
 800e554:	8028      	strh	r0, [r5, #0]
 800e556:	f8c8 3000 	str.w	r3, [r8]
 800e55a:	6863      	ldr	r3, [r4, #4]
 800e55c:	603b      	str	r3, [r7, #0]
 800e55e:	7b23      	ldrb	r3, [r4, #12]
 800e560:	6063      	str	r3, [r4, #4]
 800e562:	4630      	mov	r0, r6
 800e564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e568 <on_full_output_buffer>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	6802      	ldr	r2, [r0, #0]
 800e56c:	460c      	mov	r4, r1
 800e56e:	6809      	ldr	r1, [r1, #0]
 800e570:	8923      	ldrh	r3, [r4, #8]
 800e572:	eba2 0c01 	sub.w	ip, r2, r1
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	fbb2 f2f3 	udiv	r2, r2, r3
 800e57c:	fbbc fcf2 	udiv	ip, ip, r2
 800e580:	f10c 0c01 	add.w	ip, ip, #1
 800e584:	fa1f fc8c 	uxth.w	ip, ip
 800e588:	fbbc fef3 	udiv	lr, ip, r3
 800e58c:	fb03 c31e 	mls	r3, r3, lr, ip
 800e590:	b29b      	uxth	r3, r3
 800e592:	fb02 f303 	mul.w	r3, r2, r3
 800e596:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800e59a:	58ca      	ldr	r2, [r1, r3]
 800e59c:	4463      	add	r3, ip
 800e59e:	eba2 020c 	sub.w	r2, r2, ip
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	4419      	add	r1, r3
 800e5a8:	3a04      	subs	r2, #4
 800e5aa:	6903      	ldr	r3, [r0, #16]
 800e5ac:	f7f9 feb8 	bl	8008320 <ucdr_init_buffer_origin>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	4903      	ldr	r1, [pc, #12]	@ (800e5c0 <on_full_output_buffer+0x58>)
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	f7f9 fe8f 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	bd38      	pop	{r3, r4, r5, pc}
 800e5be:	bf00      	nop
 800e5c0:	0800e569 	.word	0x0800e569

0800e5c4 <uxr_init_output_reliable_stream>:
 800e5c4:	b410      	push	{r4}
 800e5c6:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e5ca:	8103      	strh	r3, [r0, #8]
 800e5cc:	e9c0 1200 	strd	r1, r2, [r0]
 800e5d0:	f880 c00c 	strb.w	ip, [r0, #12]
 800e5d4:	b1d3      	cbz	r3, 800e60c <uxr_init_output_reliable_stream+0x48>
 800e5d6:	f8c1 c000 	str.w	ip, [r1]
 800e5da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e5de:	f1bc 0f01 	cmp.w	ip, #1
 800e5e2:	d913      	bls.n	800e60c <uxr_init_output_reliable_stream+0x48>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	fbb3 f1fc 	udiv	r1, r3, ip
 800e5ea:	fb0c 3111 	mls	r1, ip, r1, r3
 800e5ee:	b289      	uxth	r1, r1
 800e5f0:	6842      	ldr	r2, [r0, #4]
 800e5f2:	6804      	ldr	r4, [r0, #0]
 800e5f4:	fbb2 f2fc 	udiv	r2, r2, ip
 800e5f8:	fb01 f202 	mul.w	r2, r1, r2
 800e5fc:	7b01      	ldrb	r1, [r0, #12]
 800e5fe:	50a1      	str	r1, [r4, r2]
 800e600:	3301      	adds	r3, #1
 800e602:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e606:	b29b      	uxth	r3, r3
 800e608:	459c      	cmp	ip, r3
 800e60a:	d8ec      	bhi.n	800e5e6 <uxr_init_output_reliable_stream+0x22>
 800e60c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e610:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e614:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e618:	4905      	ldr	r1, [pc, #20]	@ (800e630 <uxr_init_output_reliable_stream+0x6c>)
 800e61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61e:	f8c0 100e 	str.w	r1, [r0, #14]
 800e622:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e626:	2300      	movs	r3, #0
 800e628:	8242      	strh	r2, [r0, #18]
 800e62a:	8403      	strh	r3, [r0, #32]
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	ffff0000 	.word	0xffff0000

0800e634 <uxr_reset_output_reliable_stream>:
 800e634:	8901      	ldrh	r1, [r0, #8]
 800e636:	b1b1      	cbz	r1, 800e666 <uxr_reset_output_reliable_stream+0x32>
 800e638:	f04f 0c00 	mov.w	ip, #0
 800e63c:	4663      	mov	r3, ip
 800e63e:	fbb3 f2f1 	udiv	r2, r3, r1
 800e642:	fb01 3312 	mls	r3, r1, r2, r3
 800e646:	b29b      	uxth	r3, r3
 800e648:	6842      	ldr	r2, [r0, #4]
 800e64a:	fbb2 f2f1 	udiv	r2, r2, r1
 800e64e:	6801      	ldr	r1, [r0, #0]
 800e650:	fb02 f303 	mul.w	r3, r2, r3
 800e654:	7b02      	ldrb	r2, [r0, #12]
 800e656:	50ca      	str	r2, [r1, r3]
 800e658:	f10c 0c01 	add.w	ip, ip, #1
 800e65c:	8901      	ldrh	r1, [r0, #8]
 800e65e:	fa1f f38c 	uxth.w	r3, ip
 800e662:	4299      	cmp	r1, r3
 800e664:	d8eb      	bhi.n	800e63e <uxr_reset_output_reliable_stream+0xa>
 800e666:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e66a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e66e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e672:	4904      	ldr	r1, [pc, #16]	@ (800e684 <uxr_reset_output_reliable_stream+0x50>)
 800e674:	f8c0 100e 	str.w	r1, [r0, #14]
 800e678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e67c:	2300      	movs	r3, #0
 800e67e:	8242      	strh	r2, [r0, #18]
 800e680:	8403      	strh	r3, [r0, #32]
 800e682:	4770      	bx	lr
 800e684:	ffff0000 	.word	0xffff0000

0800e688 <uxr_prepare_reliable_buffer_to_write>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	4604      	mov	r4, r0
 800e68e:	b091      	sub	sp, #68	@ 0x44
 800e690:	8900      	ldrh	r0, [r0, #8]
 800e692:	89e6      	ldrh	r6, [r4, #14]
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	9204      	str	r2, [sp, #16]
 800e698:	fbb6 f2f0 	udiv	r2, r6, r0
 800e69c:	fb00 6212 	mls	r2, r0, r2, r6
 800e6a0:	b292      	uxth	r2, r2
 800e6a2:	6865      	ldr	r5, [r4, #4]
 800e6a4:	fbb5 f5f0 	udiv	r5, r5, r0
 800e6a8:	fb05 3202 	mla	r2, r5, r2, r3
 800e6ac:	3204      	adds	r2, #4
 800e6ae:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800e6b2:	f894 900c 	ldrb.w	r9, [r4, #12]
 800e6b6:	9203      	str	r2, [sp, #12]
 800e6b8:	468b      	mov	fp, r1
 800e6ba:	1f2f      	subs	r7, r5, #4
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	f000 814c 	beq.w	800e95a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800e6c2:	f04f 0c00 	mov.w	ip, #0
 800e6c6:	46e2      	mov	sl, ip
 800e6c8:	4661      	mov	r1, ip
 800e6ca:	fbb1 f2f0 	udiv	r2, r1, r0
 800e6ce:	fb00 1212 	mls	r2, r0, r2, r1
 800e6d2:	b292      	uxth	r2, r2
 800e6d4:	fb05 f202 	mul.w	r2, r5, r2
 800e6d8:	f10c 0c01 	add.w	ip, ip, #1
 800e6dc:	589a      	ldr	r2, [r3, r2]
 800e6de:	454a      	cmp	r2, r9
 800e6e0:	bf08      	it	eq
 800e6e2:	f10a 0a01 	addeq.w	sl, sl, #1
 800e6e6:	fa1f f18c 	uxth.w	r1, ip
 800e6ea:	bf08      	it	eq
 800e6ec:	fa1f fa8a 	uxtheq.w	sl, sl
 800e6f0:	4281      	cmp	r1, r0
 800e6f2:	d3ea      	bcc.n	800e6ca <uxr_prepare_reliable_buffer_to_write+0x42>
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	2104      	movs	r1, #4
 800e6f8:	f8cd a014 	str.w	sl, [sp, #20]
 800e6fc:	f7f9 fe1c 	bl	8008338 <ucdr_alignment>
 800e700:	4480      	add	r8, r0
 800e702:	eb08 020b 	add.w	r2, r8, fp
 800e706:	42ba      	cmp	r2, r7
 800e708:	f240 80cd 	bls.w	800e8a6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 800e70c:	7b22      	ldrb	r2, [r4, #12]
 800e70e:	445a      	add	r2, fp
 800e710:	42ba      	cmp	r2, r7
 800e712:	f240 80b5 	bls.w	800e880 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800e716:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 800e71a:	33fc      	adds	r3, #252	@ 0xfc
 800e71c:	b2ba      	uxth	r2, r7
 800e71e:	4413      	add	r3, r2
 800e720:	b29b      	uxth	r3, r3
 800e722:	fb0a f903 	mul.w	r9, sl, r3
 800e726:	45d9      	cmp	r9, fp
 800e728:	9305      	str	r3, [sp, #20]
 800e72a:	9306      	str	r3, [sp, #24]
 800e72c:	f0c0 80b7 	bcc.w	800e89e <uxr_prepare_reliable_buffer_to_write+0x216>
 800e730:	f108 0304 	add.w	r3, r8, #4
 800e734:	42bb      	cmp	r3, r7
 800e736:	f080 80db 	bcs.w	800e8f0 <uxr_prepare_reliable_buffer_to_write+0x268>
 800e73a:	f1a2 0904 	sub.w	r9, r2, #4
 800e73e:	eba9 0908 	sub.w	r9, r9, r8
 800e742:	9b05      	ldr	r3, [sp, #20]
 800e744:	fa1f f989 	uxth.w	r9, r9
 800e748:	ebab 0b09 	sub.w	fp, fp, r9
 800e74c:	fbbb f2f3 	udiv	r2, fp, r3
 800e750:	fb03 b312 	mls	r3, r3, r2, fp
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 80c8 	beq.w	800e8ea <uxr_prepare_reliable_buffer_to_write+0x262>
 800e75a:	3201      	adds	r2, #1
 800e75c:	b292      	uxth	r2, r2
 800e75e:	9306      	str	r3, [sp, #24]
 800e760:	4552      	cmp	r2, sl
 800e762:	f200 809c 	bhi.w	800e89e <uxr_prepare_reliable_buffer_to_write+0x216>
 800e766:	f10d 0b20 	add.w	fp, sp, #32
 800e76a:	2a00      	cmp	r2, #0
 800e76c:	d042      	beq.n	800e7f4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 800e76e:	f8cd 801c 	str.w	r8, [sp, #28]
 800e772:	f04f 0a00 	mov.w	sl, #0
 800e776:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e77a:	9505      	str	r5, [sp, #20]
 800e77c:	f10d 0b20 	add.w	fp, sp, #32
 800e780:	4615      	mov	r5, r2
 800e782:	e000      	b.n	800e786 <uxr_prepare_reliable_buffer_to_write+0xfe>
 800e784:	46c1      	mov	r9, r8
 800e786:	8920      	ldrh	r0, [r4, #8]
 800e788:	fbb6 f2f0 	udiv	r2, r6, r0
 800e78c:	fb00 6112 	mls	r1, r0, r2, r6
 800e790:	b28a      	uxth	r2, r1
 800e792:	6863      	ldr	r3, [r4, #4]
 800e794:	fbb3 f1f0 	udiv	r1, r3, r0
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	fb02 f101 	mul.w	r1, r2, r1
 800e79e:	3104      	adds	r1, #4
 800e7a0:	4419      	add	r1, r3
 800e7a2:	4658      	mov	r0, fp
 800e7a4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800e7a8:	9200      	str	r2, [sp, #0]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	463a      	mov	r2, r7
 800e7ae:	f7f9 fdad 	bl	800830c <ucdr_init_buffer_origin_offset>
 800e7b2:	464a      	mov	r2, r9
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	210d      	movs	r1, #13
 800e7b8:	4658      	mov	r0, fp
 800e7ba:	f7fc f85f 	bl	800a87c <uxr_buffer_submessage_header>
 800e7be:	8921      	ldrh	r1, [r4, #8]
 800e7c0:	fbb6 f2f1 	udiv	r2, r6, r1
 800e7c4:	fb01 6212 	mls	r2, r1, r2, r6
 800e7c8:	b292      	uxth	r2, r2
 800e7ca:	6863      	ldr	r3, [r4, #4]
 800e7cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7d0:	fb02 f303 	mul.w	r3, r2, r3
 800e7d4:	6822      	ldr	r2, [r4, #0]
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	50d7      	str	r7, [r2, r3]
 800e7da:	2101      	movs	r1, #1
 800e7dc:	f000 faba 	bl	800ed54 <uxr_seq_num_add>
 800e7e0:	f10a 0a01 	add.w	sl, sl, #1
 800e7e4:	fa1f f38a 	uxth.w	r3, sl
 800e7e8:	429d      	cmp	r5, r3
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	d8ca      	bhi.n	800e784 <uxr_prepare_reliable_buffer_to_write+0xfc>
 800e7ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e7f2:	9d05      	ldr	r5, [sp, #20]
 800e7f4:	8920      	ldrh	r0, [r4, #8]
 800e7f6:	fbb6 f3f0 	udiv	r3, r6, r0
 800e7fa:	fb00 6313 	mls	r3, r0, r3, r6
 800e7fe:	b299      	uxth	r1, r3
 800e800:	6863      	ldr	r3, [r4, #4]
 800e802:	fbb3 f3f0 	udiv	r3, r3, r0
 800e806:	fb01 f303 	mul.w	r3, r1, r3
 800e80a:	6821      	ldr	r1, [r4, #0]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4419      	add	r1, r3
 800e810:	463a      	mov	r2, r7
 800e812:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800e816:	9000      	str	r0, [sp, #0]
 800e818:	2300      	movs	r3, #0
 800e81a:	4658      	mov	r0, fp
 800e81c:	f7f9 fd76 	bl	800830c <ucdr_init_buffer_origin_offset>
 800e820:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800e824:	4658      	mov	r0, fp
 800e826:	fa1f f289 	uxth.w	r2, r9
 800e82a:	2302      	movs	r3, #2
 800e82c:	210d      	movs	r1, #13
 800e82e:	f7fc f825 	bl	800a87c <uxr_buffer_submessage_header>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	8927      	ldrh	r7, [r4, #8]
 800e836:	7b20      	ldrb	r0, [r4, #12]
 800e838:	f108 0104 	add.w	r1, r8, #4
 800e83c:	440b      	add	r3, r1
 800e83e:	4619      	mov	r1, r3
 800e840:	fbb6 f3f7 	udiv	r3, r6, r7
 800e844:	fb07 6313 	mls	r3, r7, r3, r6
 800e848:	f1a5 0208 	sub.w	r2, r5, #8
 800e84c:	b29d      	uxth	r5, r3
 800e84e:	3004      	adds	r0, #4
 800e850:	6863      	ldr	r3, [r4, #4]
 800e852:	fbb3 f3f7 	udiv	r3, r3, r7
 800e856:	fb05 f303 	mul.w	r3, r5, r3
 800e85a:	6825      	ldr	r5, [r4, #0]
 800e85c:	4448      	add	r0, r9
 800e85e:	50e8      	str	r0, [r5, r3]
 800e860:	9d04      	ldr	r5, [sp, #16]
 800e862:	eba2 0208 	sub.w	r2, r2, r8
 800e866:	4628      	mov	r0, r5
 800e868:	f7f9 fd62 	bl	8008330 <ucdr_init_buffer>
 800e86c:	4628      	mov	r0, r5
 800e86e:	493c      	ldr	r1, [pc, #240]	@ (800e960 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800e870:	4622      	mov	r2, r4
 800e872:	f7f9 fd31 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800e876:	2001      	movs	r0, #1
 800e878:	81e6      	strh	r6, [r4, #14]
 800e87a:	b011      	add	sp, #68	@ 0x44
 800e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e880:	2101      	movs	r1, #1
 800e882:	89e0      	ldrh	r0, [r4, #14]
 800e884:	f000 fa66 	bl	800ed54 <uxr_seq_num_add>
 800e888:	8921      	ldrh	r1, [r4, #8]
 800e88a:	4605      	mov	r5, r0
 800e88c:	8a60      	ldrh	r0, [r4, #18]
 800e88e:	f000 fa61 	bl	800ed54 <uxr_seq_num_add>
 800e892:	4601      	mov	r1, r0
 800e894:	4628      	mov	r0, r5
 800e896:	f000 fa65 	bl	800ed64 <uxr_seq_num_cmp>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	dd42      	ble.n	800e924 <uxr_prepare_reliable_buffer_to_write+0x29c>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	b011      	add	sp, #68	@ 0x44
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a6:	8921      	ldrh	r1, [r4, #8]
 800e8a8:	8a60      	ldrh	r0, [r4, #18]
 800e8aa:	9205      	str	r2, [sp, #20]
 800e8ac:	f000 fa52 	bl	800ed54 <uxr_seq_num_add>
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f000 fa56 	bl	800ed64 <uxr_seq_num_cmp>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	9a05      	ldr	r2, [sp, #20]
 800e8bc:	dcef      	bgt.n	800e89e <uxr_prepare_reliable_buffer_to_write+0x216>
 800e8be:	8927      	ldrh	r7, [r4, #8]
 800e8c0:	fbb6 f3f7 	udiv	r3, r6, r7
 800e8c4:	fb07 6313 	mls	r3, r7, r3, r6
 800e8c8:	b29d      	uxth	r5, r3
 800e8ca:	6863      	ldr	r3, [r4, #4]
 800e8cc:	6824      	ldr	r4, [r4, #0]
 800e8ce:	fbb3 f3f7 	udiv	r3, r3, r7
 800e8d2:	fb05 f303 	mul.w	r3, r5, r3
 800e8d6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800e8da:	50e2      	str	r2, [r4, r3]
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f8cd 8000 	str.w	r8, [sp]
 800e8e2:	f7f9 fd13 	bl	800830c <ucdr_init_buffer_origin_offset>
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	e7da      	b.n	800e8a0 <uxr_prepare_reliable_buffer_to_write+0x218>
 800e8ea:	b293      	uxth	r3, r2
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	e737      	b.n	800e760 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	9207      	str	r2, [sp, #28]
 800e8f6:	f000 fa2d 	bl	800ed54 <uxr_seq_num_add>
 800e8fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e8fe:	fbb0 f1fc 	udiv	r1, r0, ip
 800e902:	fb0c 0111 	mls	r1, ip, r1, r0
 800e906:	4606      	mov	r6, r0
 800e908:	b288      	uxth	r0, r1
 800e90a:	6863      	ldr	r3, [r4, #4]
 800e90c:	fbb3 f1fc 	udiv	r1, r3, ip
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	9a07      	ldr	r2, [sp, #28]
 800e914:	fb00 f101 	mul.w	r1, r0, r1
 800e918:	3104      	adds	r1, #4
 800e91a:	440b      	add	r3, r1
 800e91c:	9303      	str	r3, [sp, #12]
 800e91e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800e922:	e70a      	b.n	800e73a <uxr_prepare_reliable_buffer_to_write+0xb2>
 800e924:	8921      	ldrh	r1, [r4, #8]
 800e926:	fbb5 f3f1 	udiv	r3, r5, r1
 800e92a:	fb01 5313 	mls	r3, r1, r3, r5
 800e92e:	b29a      	uxth	r2, r3
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	fbb3 f3f1 	udiv	r3, r3, r1
 800e936:	6821      	ldr	r1, [r4, #0]
 800e938:	9804      	ldr	r0, [sp, #16]
 800e93a:	fb02 f303 	mul.w	r3, r2, r3
 800e93e:	3304      	adds	r3, #4
 800e940:	7b22      	ldrb	r2, [r4, #12]
 800e942:	4419      	add	r1, r3
 800e944:	445a      	add	r2, fp
 800e946:	f841 2c04 	str.w	r2, [r1, #-4]
 800e94a:	7b23      	ldrb	r3, [r4, #12]
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	2300      	movs	r3, #0
 800e950:	f7f9 fcdc 	bl	800830c <ucdr_init_buffer_origin_offset>
 800e954:	81e5      	strh	r5, [r4, #14]
 800e956:	2001      	movs	r0, #1
 800e958:	e7a2      	b.n	800e8a0 <uxr_prepare_reliable_buffer_to_write+0x218>
 800e95a:	4682      	mov	sl, r0
 800e95c:	e6ca      	b.n	800e6f4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 800e95e:	bf00      	nop
 800e960:	0800e569 	.word	0x0800e569

0800e964 <uxr_prepare_next_reliable_buffer_to_send>:
 800e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e966:	4604      	mov	r4, r0
 800e968:	460f      	mov	r7, r1
 800e96a:	8a00      	ldrh	r0, [r0, #16]
 800e96c:	2101      	movs	r1, #1
 800e96e:	4616      	mov	r6, r2
 800e970:	461d      	mov	r5, r3
 800e972:	f000 f9ef 	bl	800ed54 <uxr_seq_num_add>
 800e976:	8028      	strh	r0, [r5, #0]
 800e978:	8922      	ldrh	r2, [r4, #8]
 800e97a:	fbb0 f3f2 	udiv	r3, r0, r2
 800e97e:	fb02 0c13 	mls	ip, r2, r3, r0
 800e982:	fa1f fc8c 	uxth.w	ip, ip
 800e986:	6863      	ldr	r3, [r4, #4]
 800e988:	fbb3 f3f2 	udiv	r3, r3, r2
 800e98c:	fb0c fc03 	mul.w	ip, ip, r3
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	89e1      	ldrh	r1, [r4, #14]
 800e994:	f10c 0c04 	add.w	ip, ip, #4
 800e998:	4463      	add	r3, ip
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	449c      	add	ip, r3
 800e9a0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800e9a4:	6033      	str	r3, [r6, #0]
 800e9a6:	f000 f9dd 	bl	800ed64 <uxr_seq_num_cmp>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	dd01      	ble.n	800e9b2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9b2:	7b23      	ldrb	r3, [r4, #12]
 800e9b4:	6832      	ldr	r2, [r6, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d9f9      	bls.n	800e9ae <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e9ba:	8a61      	ldrh	r1, [r4, #18]
 800e9bc:	8a20      	ldrh	r0, [r4, #16]
 800e9be:	f000 f9cd 	bl	800ed5c <uxr_seq_num_sub>
 800e9c2:	8923      	ldrh	r3, [r4, #8]
 800e9c4:	4283      	cmp	r3, r0
 800e9c6:	d0f2      	beq.n	800e9ae <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800e9c8:	8828      	ldrh	r0, [r5, #0]
 800e9ca:	89e3      	ldrh	r3, [r4, #14]
 800e9cc:	8220      	strh	r0, [r4, #16]
 800e9ce:	4298      	cmp	r0, r3
 800e9d0:	d001      	beq.n	800e9d6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800e9d2:	2001      	movs	r0, #1
 800e9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d6:	2101      	movs	r1, #1
 800e9d8:	f000 f9bc 	bl	800ed54 <uxr_seq_num_add>
 800e9dc:	81e0      	strh	r0, [r4, #14]
 800e9de:	2001      	movs	r0, #1
 800e9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e2:	bf00      	nop

0800e9e4 <uxr_update_output_stream_heartbeat_timestamp>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	8a01      	ldrh	r1, [r0, #16]
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	8a40      	ldrh	r0, [r0, #18]
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	461e      	mov	r6, r3
 800e9f0:	f000 f9b8 	bl	800ed64 <uxr_seq_num_cmp>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	db07      	blt.n	800ea08 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800e9f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ea00:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800ea04:	2000      	movs	r0, #0
 800ea06:	bd70      	pop	{r4, r5, r6, pc}
 800ea08:	f894 0020 	ldrb.w	r0, [r4, #32]
 800ea0c:	b940      	cbnz	r0, 800ea20 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	f884 3020 	strb.w	r3, [r4, #32]
 800ea14:	3564      	adds	r5, #100	@ 0x64
 800ea16:	f146 0600 	adc.w	r6, r6, #0
 800ea1a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}
 800ea20:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ea24:	4295      	cmp	r5, r2
 800ea26:	eb76 0303 	sbcs.w	r3, r6, r3
 800ea2a:	bfa5      	ittet	ge
 800ea2c:	3001      	addge	r0, #1
 800ea2e:	f884 0020 	strbge.w	r0, [r4, #32]
 800ea32:	2000      	movlt	r0, #0
 800ea34:	2001      	movge	r0, #1
 800ea36:	e7ed      	b.n	800ea14 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800ea38 <uxr_begin_output_nack_buffer_it>:
 800ea38:	8a40      	ldrh	r0, [r0, #18]
 800ea3a:	4770      	bx	lr

0800ea3c <uxr_next_reliable_nack_buffer_to_send>:
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 800ea44:	b082      	sub	sp, #8
 800ea46:	f1b8 0f00 	cmp.w	r8, #0
 800ea4a:	d011      	beq.n	800ea70 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	8818      	ldrh	r0, [r3, #0]
 800ea50:	460e      	mov	r6, r1
 800ea52:	4617      	mov	r7, r2
 800ea54:	461d      	mov	r5, r3
 800ea56:	2101      	movs	r1, #1
 800ea58:	f000 f97c 	bl	800ed54 <uxr_seq_num_add>
 800ea5c:	8028      	strh	r0, [r5, #0]
 800ea5e:	8a21      	ldrh	r1, [r4, #16]
 800ea60:	f000 f980 	bl	800ed64 <uxr_seq_num_cmp>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	dd07      	ble.n	800ea78 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800ea68:	f04f 0800 	mov.w	r8, #0
 800ea6c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 800ea70:	4640      	mov	r0, r8
 800ea72:	b002      	add	sp, #8
 800ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea78:	8921      	ldrh	r1, [r4, #8]
 800ea7a:	8828      	ldrh	r0, [r5, #0]
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	fbb0 f2f1 	udiv	r2, r0, r1
 800ea82:	fb01 0c12 	mls	ip, r1, r2, r0
 800ea86:	fa1f f28c 	uxth.w	r2, ip
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	6863      	ldr	r3, [r4, #4]
 800ea8e:	fbb3 fcf1 	udiv	ip, r3, r1
 800ea92:	9b01      	ldr	r3, [sp, #4]
 800ea94:	fb02 fc0c 	mul.w	ip, r2, ip
 800ea98:	f10c 0c04 	add.w	ip, ip, #4
 800ea9c:	4463      	add	r3, ip
 800ea9e:	6033      	str	r3, [r6, #0]
 800eaa0:	6823      	ldr	r3, [r4, #0]
 800eaa2:	4463      	add	r3, ip
 800eaa4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eaa8:	603b      	str	r3, [r7, #0]
 800eaaa:	7b22      	ldrb	r2, [r4, #12]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d0d2      	beq.n	800ea56 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800eab0:	4640      	mov	r0, r8
 800eab2:	b002      	add	sp, #8
 800eab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eab8 <uxr_process_acknack>:
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaba:	4604      	mov	r4, r0
 800eabc:	460e      	mov	r6, r1
 800eabe:	4610      	mov	r0, r2
 800eac0:	2101      	movs	r1, #1
 800eac2:	f000 f94b 	bl	800ed5c <uxr_seq_num_sub>
 800eac6:	8a61      	ldrh	r1, [r4, #18]
 800eac8:	f000 f948 	bl	800ed5c <uxr_seq_num_sub>
 800eacc:	b1c0      	cbz	r0, 800eb00 <uxr_process_acknack+0x48>
 800eace:	4605      	mov	r5, r0
 800ead0:	2700      	movs	r7, #0
 800ead2:	2101      	movs	r1, #1
 800ead4:	8a60      	ldrh	r0, [r4, #18]
 800ead6:	f000 f93d 	bl	800ed54 <uxr_seq_num_add>
 800eada:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eade:	fbb0 f1fc 	udiv	r1, r0, ip
 800eae2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eae6:	fb0c 0111 	mls	r1, ip, r1, r0
 800eaea:	b289      	uxth	r1, r1
 800eaec:	3701      	adds	r7, #1
 800eaee:	fbb3 f3fc 	udiv	r3, r3, ip
 800eaf2:	fb01 f303 	mul.w	r3, r1, r3
 800eaf6:	42bd      	cmp	r5, r7
 800eaf8:	7b21      	ldrb	r1, [r4, #12]
 800eafa:	8260      	strh	r0, [r4, #18]
 800eafc:	50d1      	str	r1, [r2, r3]
 800eafe:	d1e8      	bne.n	800ead2 <uxr_process_acknack+0x1a>
 800eb00:	3e00      	subs	r6, #0
 800eb02:	f04f 0300 	mov.w	r3, #0
 800eb06:	bf18      	it	ne
 800eb08:	2601      	movne	r6, #1
 800eb0a:	f884 3020 	strb.w	r3, [r4, #32]
 800eb0e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 800eb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb14 <uxr_is_output_up_to_date>:
 800eb14:	8a01      	ldrh	r1, [r0, #16]
 800eb16:	8a40      	ldrh	r0, [r0, #18]
 800eb18:	b508      	push	{r3, lr}
 800eb1a:	f000 f923 	bl	800ed64 <uxr_seq_num_cmp>
 800eb1e:	fab0 f080 	clz	r0, r0
 800eb22:	0940      	lsrs	r0, r0, #5
 800eb24:	bd08      	pop	{r3, pc}
 800eb26:	bf00      	nop

0800eb28 <get_available_free_slots>:
 800eb28:	8902      	ldrh	r2, [r0, #8]
 800eb2a:	b1da      	cbz	r2, 800eb64 <get_available_free_slots+0x3c>
 800eb2c:	b530      	push	{r4, r5, lr}
 800eb2e:	2100      	movs	r1, #0
 800eb30:	6843      	ldr	r3, [r0, #4]
 800eb32:	6805      	ldr	r5, [r0, #0]
 800eb34:	7b04      	ldrb	r4, [r0, #12]
 800eb36:	fbb3 fef2 	udiv	lr, r3, r2
 800eb3a:	4608      	mov	r0, r1
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	fbb3 fcf2 	udiv	ip, r3, r2
 800eb42:	fb02 331c 	mls	r3, r2, ip, r3
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	fb0e f303 	mul.w	r3, lr, r3
 800eb4c:	3101      	adds	r1, #1
 800eb4e:	f855 c003 	ldr.w	ip, [r5, r3]
 800eb52:	4564      	cmp	r4, ip
 800eb54:	bf08      	it	eq
 800eb56:	3001      	addeq	r0, #1
 800eb58:	b28b      	uxth	r3, r1
 800eb5a:	bf08      	it	eq
 800eb5c:	b280      	uxtheq	r0, r0
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d3ed      	bcc.n	800eb3e <get_available_free_slots+0x16>
 800eb62:	bd30      	pop	{r4, r5, pc}
 800eb64:	4610      	mov	r0, r2
 800eb66:	4770      	bx	lr

0800eb68 <uxr_buffer_cancel_data>:
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	b094      	sub	sp, #80	@ 0x50
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9202      	str	r2, [sp, #8]
 800eb70:	9205      	str	r2, [sp, #20]
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb7a:	f88d 301e 	strb.w	r3, [sp, #30]
 800eb7e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800eb82:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800eb86:	2308      	movs	r3, #8
 800eb88:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	2210      	movs	r2, #16
 800eb90:	ab0c      	add	r3, sp, #48	@ 0x30
 800eb92:	4604      	mov	r4, r0
 800eb94:	9103      	str	r1, [sp, #12]
 800eb96:	f7fb fbd3 	bl	800a340 <uxr_prepare_stream_to_write_submessage>
 800eb9a:	b918      	cbnz	r0, 800eba4 <uxr_buffer_cancel_data+0x3c>
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	4620      	mov	r0, r4
 800eba0:	b014      	add	sp, #80	@ 0x50
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	9905      	ldr	r1, [sp, #20]
 800eba6:	aa06      	add	r2, sp, #24
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7fb fcff 	bl	800a5ac <uxr_init_base_object_request>
 800ebae:	a906      	add	r1, sp, #24
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	a80c      	add	r0, sp, #48	@ 0x30
 800ebb4:	f7fc ff0e 	bl	800b9d4 <uxr_serialize_READ_DATA_Payload>
 800ebb8:	4620      	mov	r0, r4
 800ebba:	b014      	add	sp, #80	@ 0x50
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	bf00      	nop

0800ebc0 <read_submessage_format>:
 800ebc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	b095      	sub	sp, #84	@ 0x54
 800ebc6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ebca:	b113      	cbz	r3, 800ebd2 <read_submessage_format+0x12>
 800ebcc:	b015      	add	sp, #84	@ 0x54
 800ebce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	4615      	mov	r5, r2
 800ebd6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ebda:	4607      	mov	r7, r0
 800ebdc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ebde:	9004      	str	r0, [sp, #16]
 800ebe0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ebe2:	9005      	str	r0, [sp, #20]
 800ebe4:	1a52      	subs	r2, r2, r1
 800ebe6:	a80c      	add	r0, sp, #48	@ 0x30
 800ebe8:	4699      	mov	r9, r3
 800ebea:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ebee:	f7f9 fb9f 	bl	8008330 <ucdr_init_buffer>
 800ebf2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ebf6:	a80c      	add	r0, sp, #48	@ 0x30
 800ebf8:	f7f9 fb6e 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800ebfc:	69e2      	ldr	r2, [r4, #28]
 800ebfe:	b19a      	cbz	r2, 800ec28 <read_submessage_format+0x68>
 800ec00:	f1b8 0f07 	cmp.w	r8, #7
 800ec04:	f882 9014 	strb.w	r9, [r2, #20]
 800ec08:	d040      	beq.n	800ec8c <read_submessage_format+0xcc>
 800ec0a:	f1b8 0f08 	cmp.w	r8, #8
 800ec0e:	d02e      	beq.n	800ec6e <read_submessage_format+0xae>
 800ec10:	f1b8 0f06 	cmp.w	r8, #6
 800ec14:	d011      	beq.n	800ec3a <read_submessage_format+0x7a>
 800ec16:	2301      	movs	r3, #1
 800ec18:	7513      	strb	r3, [r2, #20]
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f7f9 fbd7 	bl	80083d0 <ucdr_advance_buffer>
 800ec22:	b015      	add	sp, #84	@ 0x54
 800ec24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec28:	f1b8 0f07 	cmp.w	r8, #7
 800ec2c:	d02e      	beq.n	800ec8c <read_submessage_format+0xcc>
 800ec2e:	f1b8 0f08 	cmp.w	r8, #8
 800ec32:	d01c      	beq.n	800ec6e <read_submessage_format+0xae>
 800ec34:	f1b8 0f06 	cmp.w	r8, #6
 800ec38:	d1ef      	bne.n	800ec1a <read_submessage_format+0x5a>
 800ec3a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ec3e:	f1b8 0f00 	cmp.w	r8, #0
 800ec42:	d011      	beq.n	800ec68 <read_submessage_format+0xa8>
 800ec44:	ab0c      	add	r3, sp, #48	@ 0x30
 800ec46:	e9cd 3500 	strd	r3, r5, [sp]
 800ec4a:	2306      	movs	r3, #6
 800ec4c:	f88d 3016 	strb.w	r3, [sp, #22]
 800ec50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ec54:	9302      	str	r3, [sp, #8]
 800ec56:	4632      	mov	r2, r6
 800ec58:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	47c0      	blx	r8
 800ec60:	2301      	movs	r3, #1
 800ec62:	69e2      	ldr	r2, [r4, #28]
 800ec64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ec68:	2a00      	cmp	r2, #0
 800ec6a:	d1d4      	bne.n	800ec16 <read_submessage_format+0x56>
 800ec6c:	e7d5      	b.n	800ec1a <read_submessage_format+0x5a>
 800ec6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0f8      	beq.n	800ec68 <read_submessage_format+0xa8>
 800ec76:	a906      	add	r1, sp, #24
 800ec78:	a80c      	add	r0, sp, #48	@ 0x30
 800ec7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ec7e:	f7fc ff49 	bl	800bb14 <uxr_deserialize_SampleIdentity>
 800ec82:	b9a0      	cbnz	r0, 800ecae <read_submessage_format+0xee>
 800ec84:	69e2      	ldr	r2, [r4, #28]
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	d1c5      	bne.n	800ec16 <read_submessage_format+0x56>
 800ec8a:	e7c6      	b.n	800ec1a <read_submessage_format+0x5a>
 800ec8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec90:	b13b      	cbz	r3, 800eca2 <read_submessage_format+0xe2>
 800ec92:	a906      	add	r1, sp, #24
 800ec94:	a80c      	add	r0, sp, #48	@ 0x30
 800ec96:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ec9a:	f7fc fc35 	bl	800b508 <uxr_deserialize_BaseObjectRequest>
 800ec9e:	bb60      	cbnz	r0, 800ecfa <read_submessage_format+0x13a>
 800eca0:	69e2      	ldr	r2, [r4, #28]
 800eca2:	68a3      	ldr	r3, [r4, #8]
 800eca4:	442b      	add	r3, r5
 800eca6:	60a3      	str	r3, [r4, #8]
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	d1b4      	bne.n	800ec16 <read_submessage_format+0x56>
 800ecac:	e7b5      	b.n	800ec1a <read_submessage_format+0x5a>
 800ecae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ecb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ecb4:	1a52      	subs	r2, r2, r1
 800ecb6:	eba8 0803 	sub.w	r8, r8, r3
 800ecba:	a80c      	add	r0, sp, #48	@ 0x30
 800ecbc:	f7f9 fb38 	bl	8008330 <ucdr_init_buffer>
 800ecc0:	44a8      	add	r8, r5
 800ecc2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ecc6:	a80c      	add	r0, sp, #48	@ 0x30
 800ecc8:	f7f9 fb06 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800eccc:	fa1f f888 	uxth.w	r8, r8
 800ecd0:	ab0c      	add	r3, sp, #48	@ 0x30
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	f8cd 8004 	str.w	r8, [sp, #4]
 800ecd8:	2108      	movs	r1, #8
 800ecda:	f88d 1016 	strb.w	r1, [sp, #22]
 800ecde:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ece2:	9102      	str	r1, [sp, #8]
 800ece4:	ab06      	add	r3, sp, #24
 800ece6:	4632      	mov	r2, r6
 800ece8:	9905      	ldr	r1, [sp, #20]
 800ecea:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ecee:	4638      	mov	r0, r7
 800ecf0:	47b0      	blx	r6
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ecf8:	e7c4      	b.n	800ec84 <read_submessage_format+0xc4>
 800ecfa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ecfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed00:	1a52      	subs	r2, r2, r1
 800ed02:	a80c      	add	r0, sp, #48	@ 0x30
 800ed04:	eba8 0803 	sub.w	r8, r8, r3
 800ed08:	f7f9 fb12 	bl	8008330 <ucdr_init_buffer>
 800ed0c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ed10:	a80c      	add	r0, sp, #48	@ 0x30
 800ed12:	f7f9 fae1 	bl	80082d8 <ucdr_set_on_full_buffer_callback>
 800ed16:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ed1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ed22:	44a8      	add	r8, r5
 800ed24:	fa1f f888 	uxth.w	r8, r8
 800ed28:	f8cd 8004 	str.w	r8, [sp, #4]
 800ed2c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ed30:	2107      	movs	r1, #7
 800ed32:	f88d 1016 	strb.w	r1, [sp, #22]
 800ed36:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ed3a:	9102      	str	r1, [sp, #8]
 800ed3c:	4632      	mov	r2, r6
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ed44:	9905      	ldr	r1, [sp, #20]
 800ed46:	4638      	mov	r0, r7
 800ed48:	47b0      	blx	r6
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ed50:	e7a6      	b.n	800eca0 <read_submessage_format+0xe0>
 800ed52:	bf00      	nop

0800ed54 <uxr_seq_num_add>:
 800ed54:	4408      	add	r0, r1
 800ed56:	b280      	uxth	r0, r0
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop

0800ed5c <uxr_seq_num_sub>:
 800ed5c:	1a40      	subs	r0, r0, r1
 800ed5e:	b280      	uxth	r0, r0
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop

0800ed64 <uxr_seq_num_cmp>:
 800ed64:	4288      	cmp	r0, r1
 800ed66:	d011      	beq.n	800ed8c <uxr_seq_num_cmp+0x28>
 800ed68:	d309      	bcc.n	800ed7e <uxr_seq_num_cmp+0x1a>
 800ed6a:	4288      	cmp	r0, r1
 800ed6c:	d910      	bls.n	800ed90 <uxr_seq_num_cmp+0x2c>
 800ed6e:	1a40      	subs	r0, r0, r1
 800ed70:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800ed74:	bfd4      	ite	le
 800ed76:	2001      	movle	r0, #1
 800ed78:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 800ed7c:	4770      	bx	lr
 800ed7e:	1a0b      	subs	r3, r1, r0
 800ed80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed84:	daf1      	bge.n	800ed6a <uxr_seq_num_cmp+0x6>
 800ed86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed8a:	4770      	bx	lr
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	4770      	bx	lr
 800ed90:	2001      	movs	r0, #1
 800ed92:	4770      	bx	lr

0800ed94 <uxr_init_framing_io>:
 800ed94:	2300      	movs	r3, #0
 800ed96:	7041      	strb	r1, [r0, #1]
 800ed98:	7003      	strb	r3, [r0, #0]
 800ed9a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop

0800eda0 <uxr_write_framed_msg>:
 800eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	4617      	mov	r7, r2
 800eda6:	7842      	ldrb	r2, [r0, #1]
 800eda8:	b083      	sub	sp, #12
 800edaa:	460e      	mov	r6, r1
 800edac:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800edb0:	469a      	mov	sl, r3
 800edb2:	2901      	cmp	r1, #1
 800edb4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800edb8:	4604      	mov	r4, r0
 800edba:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800edbe:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800edc2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800edc6:	f240 8137 	bls.w	800f038 <uxr_write_framed_msg+0x298>
 800edca:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800edce:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800edd2:	2901      	cmp	r1, #1
 800edd4:	f04f 0202 	mov.w	r2, #2
 800edd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eddc:	f240 808f 	bls.w	800eefe <uxr_write_framed_msg+0x15e>
 800ede0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ede2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800ede6:	b2dd      	uxtb	r5, r3
 800ede8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800edec:	2203      	movs	r2, #3
 800edee:	2901      	cmp	r1, #1
 800edf0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800edf4:	f240 809a 	bls.w	800ef2c <uxr_write_framed_msg+0x18c>
 800edf8:	18a1      	adds	r1, r4, r2
 800edfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edfc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800ee00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ee04:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ee08:	3201      	adds	r2, #1
 800ee0a:	2801      	cmp	r0, #1
 800ee0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee10:	f240 80a0 	bls.w	800ef54 <uxr_write_framed_msg+0x1b4>
 800ee14:	18a0      	adds	r0, r4, r2
 800ee16:	3201      	adds	r2, #1
 800ee18:	b2d2      	uxtb	r2, r2
 800ee1a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ee1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 80a9 	beq.w	800ef7a <uxr_write_framed_msg+0x1da>
 800ee28:	f04f 0900 	mov.w	r9, #0
 800ee2c:	46c8      	mov	r8, r9
 800ee2e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ee32:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ee36:	2901      	cmp	r1, #1
 800ee38:	f240 80c3 	bls.w	800efc2 <uxr_write_framed_msg+0x222>
 800ee3c:	2a29      	cmp	r2, #41	@ 0x29
 800ee3e:	f200 809f 	bhi.w	800ef80 <uxr_write_framed_msg+0x1e0>
 800ee42:	18a1      	adds	r1, r4, r2
 800ee44:	3201      	adds	r2, #1
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ee4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee50:	ea89 0303 	eor.w	r3, r9, r3
 800ee54:	498c      	ldr	r1, [pc, #560]	@ (800f088 <uxr_write_framed_msg+0x2e8>)
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f108 0801 	add.w	r8, r8, #1
 800ee5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee60:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800ee64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee66:	4543      	cmp	r3, r8
 800ee68:	d8e1      	bhi.n	800ee2e <uxr_write_framed_msg+0x8e>
 800ee6a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ee6e:	fa5f f889 	uxtb.w	r8, r9
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	f04f 0900 	mov.w	r9, #0
 800ee78:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800ee7c:	fa5f f18a 	uxtb.w	r1, sl
 800ee80:	2901      	cmp	r1, #1
 800ee82:	d921      	bls.n	800eec8 <uxr_write_framed_msg+0x128>
 800ee84:	2a29      	cmp	r2, #41	@ 0x29
 800ee86:	f240 80af 	bls.w	800efe8 <uxr_write_framed_msg+0x248>
 800ee8a:	2500      	movs	r5, #0
 800ee8c:	e000      	b.n	800ee90 <uxr_write_framed_msg+0xf0>
 800ee8e:	b160      	cbz	r0, 800eeaa <uxr_write_framed_msg+0x10a>
 800ee90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ee94:	1b52      	subs	r2, r2, r5
 800ee96:	465b      	mov	r3, fp
 800ee98:	4421      	add	r1, r4
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	47b0      	blx	r6
 800ee9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eea2:	4405      	add	r5, r0
 800eea4:	4295      	cmp	r5, r2
 800eea6:	d3f2      	bcc.n	800ee8e <uxr_write_framed_msg+0xee>
 800eea8:	d003      	beq.n	800eeb2 <uxr_write_framed_msg+0x112>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	b003      	add	sp, #12
 800eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb2:	fa5f f18a 	uxtb.w	r1, sl
 800eeb6:	f04f 0300 	mov.w	r3, #0
 800eeba:	2901      	cmp	r1, #1
 800eebc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eec0:	f04f 0200 	mov.w	r2, #0
 800eec4:	f200 8090 	bhi.w	800efe8 <uxr_write_framed_msg+0x248>
 800eec8:	1c51      	adds	r1, r2, #1
 800eeca:	b2c9      	uxtb	r1, r1
 800eecc:	2929      	cmp	r1, #41	@ 0x29
 800eece:	d8dc      	bhi.n	800ee8a <uxr_write_framed_msg+0xea>
 800eed0:	18a5      	adds	r5, r4, r2
 800eed2:	4421      	add	r1, r4
 800eed4:	3202      	adds	r2, #2
 800eed6:	f088 0820 	eor.w	r8, r8, #32
 800eeda:	4648      	mov	r0, r9
 800eedc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800eee0:	b2d2      	uxtb	r2, r2
 800eee2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800eee6:	f04f 0901 	mov.w	r9, #1
 800eeea:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800eeee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f040 8085 	bne.w	800f002 <uxr_write_framed_msg+0x262>
 800eef8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eefc:	e7bc      	b.n	800ee78 <uxr_write_framed_msg+0xd8>
 800eefe:	4611      	mov	r1, r2
 800ef00:	f04f 0c03 	mov.w	ip, #3
 800ef04:	2204      	movs	r2, #4
 800ef06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef08:	4421      	add	r1, r4
 800ef0a:	b2dd      	uxtb	r5, r3
 800ef0c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800ef10:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800ef14:	44a4      	add	ip, r4
 800ef16:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ef1a:	f080 0020 	eor.w	r0, r0, #32
 800ef1e:	2901      	cmp	r1, #1
 800ef20:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ef24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ef28:	f63f af66 	bhi.w	800edf8 <uxr_write_framed_msg+0x58>
 800ef2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef2e:	18a0      	adds	r0, r4, r2
 800ef30:	f085 0520 	eor.w	r5, r5, #32
 800ef34:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ef38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ef3c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ef40:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800ef44:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ef48:	3202      	adds	r2, #2
 800ef4a:	2801      	cmp	r0, #1
 800ef4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ef50:	f63f af60 	bhi.w	800ee14 <uxr_write_framed_msg+0x74>
 800ef54:	1c50      	adds	r0, r2, #1
 800ef56:	18a5      	adds	r5, r4, r2
 800ef58:	fa54 f080 	uxtab	r0, r4, r0
 800ef5c:	3202      	adds	r2, #2
 800ef5e:	f081 0120 	eor.w	r1, r1, #32
 800ef62:	b2d2      	uxtb	r2, r2
 800ef64:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ef68:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800ef6c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ef70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f47f af57 	bne.w	800ee28 <uxr_write_framed_msg+0x88>
 800ef7a:	9301      	str	r3, [sp, #4]
 800ef7c:	4698      	mov	r8, r3
 800ef7e:	e779      	b.n	800ee74 <uxr_write_framed_msg+0xd4>
 800ef80:	2500      	movs	r5, #0
 800ef82:	e001      	b.n	800ef88 <uxr_write_framed_msg+0x1e8>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d090      	beq.n	800eeaa <uxr_write_framed_msg+0x10a>
 800ef88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ef8c:	1b52      	subs	r2, r2, r5
 800ef8e:	465b      	mov	r3, fp
 800ef90:	4421      	add	r1, r4
 800ef92:	4638      	mov	r0, r7
 800ef94:	47b0      	blx	r6
 800ef96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ef9a:	4405      	add	r5, r0
 800ef9c:	4295      	cmp	r5, r2
 800ef9e:	d3f1      	bcc.n	800ef84 <uxr_write_framed_msg+0x1e4>
 800efa0:	d183      	bne.n	800eeaa <uxr_write_framed_msg+0x10a>
 800efa2:	f04f 0300 	mov.w	r3, #0
 800efa6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800efaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efac:	4543      	cmp	r3, r8
 800efae:	d964      	bls.n	800f07a <uxr_write_framed_msg+0x2da>
 800efb0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800efb4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800efb8:	2901      	cmp	r1, #1
 800efba:	f04f 0200 	mov.w	r2, #0
 800efbe:	f63f af3d 	bhi.w	800ee3c <uxr_write_framed_msg+0x9c>
 800efc2:	1c51      	adds	r1, r2, #1
 800efc4:	b2c9      	uxtb	r1, r1
 800efc6:	2929      	cmp	r1, #41	@ 0x29
 800efc8:	d8da      	bhi.n	800ef80 <uxr_write_framed_msg+0x1e0>
 800efca:	18a0      	adds	r0, r4, r2
 800efcc:	4421      	add	r1, r4
 800efce:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800efd2:	3202      	adds	r2, #2
 800efd4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800efd8:	b2d2      	uxtb	r2, r2
 800efda:	f083 0020 	eor.w	r0, r3, #32
 800efde:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800efe2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800efe6:	e733      	b.n	800ee50 <uxr_write_framed_msg+0xb0>
 800efe8:	18a1      	adds	r1, r4, r2
 800efea:	3201      	adds	r2, #1
 800efec:	4648      	mov	r0, r9
 800efee:	b2d2      	uxtb	r2, r2
 800eff0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800eff4:	f04f 0901 	mov.w	r9, #1
 800eff8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800effc:	2800      	cmp	r0, #0
 800effe:	f43f af7b 	beq.w	800eef8 <uxr_write_framed_msg+0x158>
 800f002:	2500      	movs	r5, #0
 800f004:	e002      	b.n	800f00c <uxr_write_framed_msg+0x26c>
 800f006:	2800      	cmp	r0, #0
 800f008:	f43f af4f 	beq.w	800eeaa <uxr_write_framed_msg+0x10a>
 800f00c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f010:	1b52      	subs	r2, r2, r5
 800f012:	465b      	mov	r3, fp
 800f014:	4421      	add	r1, r4
 800f016:	4638      	mov	r0, r7
 800f018:	47b0      	blx	r6
 800f01a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f01e:	4405      	add	r5, r0
 800f020:	4295      	cmp	r5, r2
 800f022:	d3f0      	bcc.n	800f006 <uxr_write_framed_msg+0x266>
 800f024:	f47f af41 	bne.w	800eeaa <uxr_write_framed_msg+0x10a>
 800f028:	2300      	movs	r3, #0
 800f02a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f030:	b298      	uxth	r0, r3
 800f032:	b003      	add	sp, #12
 800f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f038:	217d      	movs	r1, #125	@ 0x7d
 800f03a:	f082 0220 	eor.w	r2, r2, #32
 800f03e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f042:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f046:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f04a:	2901      	cmp	r1, #1
 800f04c:	f04f 0203 	mov.w	r2, #3
 800f050:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f054:	d804      	bhi.n	800f060 <uxr_write_framed_msg+0x2c0>
 800f056:	4611      	mov	r1, r2
 800f058:	f04f 0c04 	mov.w	ip, #4
 800f05c:	2205      	movs	r2, #5
 800f05e:	e752      	b.n	800ef06 <uxr_write_framed_msg+0x166>
 800f060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f062:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f066:	b2dd      	uxtb	r5, r3
 800f068:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f06c:	2204      	movs	r2, #4
 800f06e:	2901      	cmp	r1, #1
 800f070:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f074:	f63f aec0 	bhi.w	800edf8 <uxr_write_framed_msg+0x58>
 800f078:	e758      	b.n	800ef2c <uxr_write_framed_msg+0x18c>
 800f07a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f07e:	fa5f f889 	uxtb.w	r8, r9
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	e6f5      	b.n	800ee74 <uxr_write_framed_msg+0xd4>
 800f088:	08011e94 	.word	0x08011e94

0800f08c <uxr_framing_read_transport>:
 800f08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f090:	4604      	mov	r4, r0
 800f092:	b083      	sub	sp, #12
 800f094:	461f      	mov	r7, r3
 800f096:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f09a:	4689      	mov	r9, r1
 800f09c:	4692      	mov	sl, r2
 800f09e:	f7fb fc33 	bl	800a908 <uxr_millis>
 800f0a2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f0a6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f0aa:	42b3      	cmp	r3, r6
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	d061      	beq.n	800f174 <uxr_framing_read_transport+0xe8>
 800f0b0:	d81c      	bhi.n	800f0ec <uxr_framing_read_transport+0x60>
 800f0b2:	1e75      	subs	r5, r6, #1
 800f0b4:	1aed      	subs	r5, r5, r3
 800f0b6:	b2ed      	uxtb	r5, r5
 800f0b8:	2600      	movs	r6, #0
 800f0ba:	455d      	cmp	r5, fp
 800f0bc:	d81f      	bhi.n	800f0fe <uxr_framing_read_transport+0x72>
 800f0be:	19ab      	adds	r3, r5, r6
 800f0c0:	455b      	cmp	r3, fp
 800f0c2:	bf84      	itt	hi
 800f0c4:	ebab 0605 	subhi.w	r6, fp, r5
 800f0c8:	b2f6      	uxtbhi	r6, r6
 800f0ca:	b9ed      	cbnz	r5, 800f108 <uxr_framing_read_transport+0x7c>
 800f0cc:	f04f 0b00 	mov.w	fp, #0
 800f0d0:	f7fb fc1a 	bl	800a908 <uxr_millis>
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	eba0 0808 	sub.w	r8, r0, r8
 800f0da:	eba3 0308 	sub.w	r3, r3, r8
 800f0de:	4658      	mov	r0, fp
 800f0e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f0e4:	603b      	str	r3, [r7, #0]
 800f0e6:	b003      	add	sp, #12
 800f0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ec:	2e00      	cmp	r6, #0
 800f0ee:	d049      	beq.n	800f184 <uxr_framing_read_transport+0xf8>
 800f0f0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f0f4:	b2ed      	uxtb	r5, r5
 800f0f6:	3e01      	subs	r6, #1
 800f0f8:	455d      	cmp	r5, fp
 800f0fa:	b2f6      	uxtb	r6, r6
 800f0fc:	d9df      	bls.n	800f0be <uxr_framing_read_transport+0x32>
 800f0fe:	fa5f f58b 	uxtb.w	r5, fp
 800f102:	2600      	movs	r6, #0
 800f104:	2d00      	cmp	r5, #0
 800f106:	d0e1      	beq.n	800f0cc <uxr_framing_read_transport+0x40>
 800f108:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f10c:	3102      	adds	r1, #2
 800f10e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	4421      	add	r1, r4
 800f116:	462a      	mov	r2, r5
 800f118:	4650      	mov	r0, sl
 800f11a:	47c8      	blx	r9
 800f11c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f120:	4a1a      	ldr	r2, [pc, #104]	@ (800f18c <uxr_framing_read_transport+0x100>)
 800f122:	4403      	add	r3, r0
 800f124:	0859      	lsrs	r1, r3, #1
 800f126:	fba2 2101 	umull	r2, r1, r2, r1
 800f12a:	0889      	lsrs	r1, r1, #2
 800f12c:	222a      	movs	r2, #42	@ 0x2a
 800f12e:	fb02 3111 	mls	r1, r2, r1, r3
 800f132:	4683      	mov	fp, r0
 800f134:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f138:	2800      	cmp	r0, #0
 800f13a:	d0c7      	beq.n	800f0cc <uxr_framing_read_transport+0x40>
 800f13c:	42a8      	cmp	r0, r5
 800f13e:	d1c7      	bne.n	800f0d0 <uxr_framing_read_transport+0x44>
 800f140:	2e00      	cmp	r6, #0
 800f142:	d0c5      	beq.n	800f0d0 <uxr_framing_read_transport+0x44>
 800f144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	3102      	adds	r1, #2
 800f14a:	4632      	mov	r2, r6
 800f14c:	4421      	add	r1, r4
 800f14e:	2300      	movs	r3, #0
 800f150:	4650      	mov	r0, sl
 800f152:	47c8      	blx	r9
 800f154:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f158:	4a0c      	ldr	r2, [pc, #48]	@ (800f18c <uxr_framing_read_transport+0x100>)
 800f15a:	180b      	adds	r3, r1, r0
 800f15c:	0859      	lsrs	r1, r3, #1
 800f15e:	fba2 1201 	umull	r1, r2, r2, r1
 800f162:	0892      	lsrs	r2, r2, #2
 800f164:	212a      	movs	r1, #42	@ 0x2a
 800f166:	fb01 3312 	mls	r3, r1, r2, r3
 800f16a:	eb00 0b05 	add.w	fp, r0, r5
 800f16e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f172:	e7ad      	b.n	800f0d0 <uxr_framing_read_transport+0x44>
 800f174:	2600      	movs	r6, #0
 800f176:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f17a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f17c:	d9bf      	bls.n	800f0fe <uxr_framing_read_transport+0x72>
 800f17e:	2102      	movs	r1, #2
 800f180:	2529      	movs	r5, #41	@ 0x29
 800f182:	e7c4      	b.n	800f10e <uxr_framing_read_transport+0x82>
 800f184:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f188:	b2ed      	uxtb	r5, r5
 800f18a:	e796      	b.n	800f0ba <uxr_framing_read_transport+0x2e>
 800f18c:	30c30c31 	.word	0x30c30c31

0800f190 <uxr_read_framed_msg>:
 800f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	461e      	mov	r6, r3
 800f196:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f19a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f19e:	429d      	cmp	r5, r3
 800f1a0:	b083      	sub	sp, #12
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	4688      	mov	r8, r1
 800f1a6:	4691      	mov	r9, r2
 800f1a8:	f000 8188 	beq.w	800f4bc <uxr_read_framed_msg+0x32c>
 800f1ac:	7823      	ldrb	r3, [r4, #0]
 800f1ae:	4dc1      	ldr	r5, [pc, #772]	@ (800f4b4 <uxr_read_framed_msg+0x324>)
 800f1b0:	4fc1      	ldr	r7, [pc, #772]	@ (800f4b8 <uxr_read_framed_msg+0x328>)
 800f1b2:	2b07      	cmp	r3, #7
 800f1b4:	d8fd      	bhi.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f1b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f1ba:	0115      	.short	0x0115
 800f1bc:	00d600f6 	.word	0x00d600f6
 800f1c0:	009000b9 	.word	0x009000b9
 800f1c4:	0030004d 	.word	0x0030004d
 800f1c8:	0008      	.short	0x0008
 800f1ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f1ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f1d2:	4299      	cmp	r1, r3
 800f1d4:	f000 814a 	beq.w	800f46c <uxr_read_framed_msg+0x2dc>
 800f1d8:	18e2      	adds	r2, r4, r3
 800f1da:	7892      	ldrb	r2, [r2, #2]
 800f1dc:	2a7d      	cmp	r2, #125	@ 0x7d
 800f1de:	f000 8199 	beq.w	800f514 <uxr_read_framed_msg+0x384>
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	0858      	lsrs	r0, r3, #1
 800f1e6:	fba5 1000 	umull	r1, r0, r5, r0
 800f1ea:	0880      	lsrs	r0, r0, #2
 800f1ec:	212a      	movs	r1, #42	@ 0x2a
 800f1ee:	fb01 3310 	mls	r3, r1, r0, r3
 800f1f2:	2a7e      	cmp	r2, #126	@ 0x7e
 800f1f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f1f8:	f000 8252 	beq.w	800f6a0 <uxr_read_framed_msg+0x510>
 800f1fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f1fe:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f200:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f204:	b29b      	uxth	r3, r3
 800f206:	2200      	movs	r2, #0
 800f208:	4299      	cmp	r1, r3
 800f20a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f20c:	7022      	strb	r2, [r4, #0]
 800f20e:	f000 8179 	beq.w	800f504 <uxr_read_framed_msg+0x374>
 800f212:	2000      	movs	r0, #0
 800f214:	b003      	add	sp, #12
 800f216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f21e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f222:	4299      	cmp	r1, r3
 800f224:	f000 8131 	beq.w	800f48a <uxr_read_framed_msg+0x2fa>
 800f228:	18e2      	adds	r2, r4, r3
 800f22a:	7890      	ldrb	r0, [r2, #2]
 800f22c:	287d      	cmp	r0, #125	@ 0x7d
 800f22e:	f000 8190 	beq.w	800f552 <uxr_read_framed_msg+0x3c2>
 800f232:	3301      	adds	r3, #1
 800f234:	085a      	lsrs	r2, r3, #1
 800f236:	fba5 1202 	umull	r1, r2, r5, r2
 800f23a:	0892      	lsrs	r2, r2, #2
 800f23c:	212a      	movs	r1, #42	@ 0x2a
 800f23e:	fb01 3312 	mls	r3, r1, r2, r3
 800f242:	287e      	cmp	r0, #126	@ 0x7e
 800f244:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f248:	f000 821a 	beq.w	800f680 <uxr_read_framed_msg+0x4f0>
 800f24c:	2307      	movs	r3, #7
 800f24e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f250:	7023      	strb	r3, [r4, #0]
 800f252:	e7ae      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f254:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f256:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f25a:	459e      	cmp	lr, r3
 800f25c:	d938      	bls.n	800f2d0 <uxr_read_framed_msg+0x140>
 800f25e:	ee07 8a90 	vmov	s15, r8
 800f262:	212a      	movs	r1, #42	@ 0x2a
 800f264:	e020      	b.n	800f2a8 <uxr_read_framed_msg+0x118>
 800f266:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f26a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f26e:	f000 80d4 	beq.w	800f41a <uxr_read_framed_msg+0x28a>
 800f272:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f276:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f27a:	f000 8219 	beq.w	800f6b0 <uxr_read_framed_msg+0x520>
 800f27e:	f806 c003 	strb.w	ip, [r6, r3]
 800f282:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f286:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f288:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f28c:	ea8a 000c 	eor.w	r0, sl, ip
 800f290:	b2c0      	uxtb	r0, r0
 800f292:	3301      	adds	r3, #1
 800f294:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f29e:	4573      	cmp	r3, lr
 800f2a0:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f2a2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f2a4:	f080 8120 	bcs.w	800f4e8 <uxr_read_framed_msg+0x358>
 800f2a8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f2ac:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f2b0:	f100 0c01 	add.w	ip, r0, #1
 800f2b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f2b8:	fba5 8202 	umull	r8, r2, r5, r2
 800f2bc:	0892      	lsrs	r2, r2, #2
 800f2be:	4582      	cmp	sl, r0
 800f2c0:	eb04 0b00 	add.w	fp, r4, r0
 800f2c4:	fb01 c212 	mls	r2, r1, r2, ip
 800f2c8:	d1cd      	bne.n	800f266 <uxr_read_framed_msg+0xd6>
 800f2ca:	ee17 8a90 	vmov	r8, s15
 800f2ce:	459e      	cmp	lr, r3
 800f2d0:	f040 8111 	bne.w	800f4f6 <uxr_read_framed_msg+0x366>
 800f2d4:	2306      	movs	r3, #6
 800f2d6:	7023      	strb	r3, [r4, #0]
 800f2d8:	e76b      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f2da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f2de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f2e2:	4298      	cmp	r0, r3
 800f2e4:	f000 80c2 	beq.w	800f46c <uxr_read_framed_msg+0x2dc>
 800f2e8:	18e2      	adds	r2, r4, r3
 800f2ea:	7891      	ldrb	r1, [r2, #2]
 800f2ec:	297d      	cmp	r1, #125	@ 0x7d
 800f2ee:	f000 814c 	beq.w	800f58a <uxr_read_framed_msg+0x3fa>
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	085a      	lsrs	r2, r3, #1
 800f2f6:	fba5 0202 	umull	r0, r2, r5, r2
 800f2fa:	0892      	lsrs	r2, r2, #2
 800f2fc:	202a      	movs	r0, #42	@ 0x2a
 800f2fe:	fb00 3312 	mls	r3, r0, r2, r3
 800f302:	297e      	cmp	r1, #126	@ 0x7e
 800f304:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f308:	f000 81ca 	beq.w	800f6a0 <uxr_read_framed_msg+0x510>
 800f30c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f30e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f312:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f314:	b29b      	uxth	r3, r3
 800f316:	2000      	movs	r0, #0
 800f318:	428b      	cmp	r3, r1
 800f31a:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f31c:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f31e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f320:	f240 80df 	bls.w	800f4e2 <uxr_read_framed_msg+0x352>
 800f324:	7020      	strb	r0, [r4, #0]
 800f326:	b003      	add	sp, #12
 800f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f330:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f334:	4299      	cmp	r1, r3
 800f336:	f000 80a8 	beq.w	800f48a <uxr_read_framed_msg+0x2fa>
 800f33a:	18e2      	adds	r2, r4, r3
 800f33c:	7890      	ldrb	r0, [r2, #2]
 800f33e:	287d      	cmp	r0, #125	@ 0x7d
 800f340:	f000 8164 	beq.w	800f60c <uxr_read_framed_msg+0x47c>
 800f344:	3301      	adds	r3, #1
 800f346:	085a      	lsrs	r2, r3, #1
 800f348:	fba5 1202 	umull	r1, r2, r5, r2
 800f34c:	0892      	lsrs	r2, r2, #2
 800f34e:	212a      	movs	r1, #42	@ 0x2a
 800f350:	fb01 3312 	mls	r3, r1, r2, r3
 800f354:	287e      	cmp	r0, #126	@ 0x7e
 800f356:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f35a:	f000 8191 	beq.w	800f680 <uxr_read_framed_msg+0x4f0>
 800f35e:	2304      	movs	r3, #4
 800f360:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f362:	7023      	strb	r3, [r4, #0]
 800f364:	e725      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f366:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f36a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f36e:	4290      	cmp	r0, r2
 800f370:	f000 80b3 	beq.w	800f4da <uxr_read_framed_msg+0x34a>
 800f374:	18a3      	adds	r3, r4, r2
 800f376:	7899      	ldrb	r1, [r3, #2]
 800f378:	297d      	cmp	r1, #125	@ 0x7d
 800f37a:	f000 8164 	beq.w	800f646 <uxr_read_framed_msg+0x4b6>
 800f37e:	3201      	adds	r2, #1
 800f380:	0850      	lsrs	r0, r2, #1
 800f382:	fba5 3000 	umull	r3, r0, r5, r0
 800f386:	0880      	lsrs	r0, r0, #2
 800f388:	232a      	movs	r3, #42	@ 0x2a
 800f38a:	fb03 2210 	mls	r2, r3, r0, r2
 800f38e:	297e      	cmp	r1, #126	@ 0x7e
 800f390:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f394:	f000 8188 	beq.w	800f6a8 <uxr_read_framed_msg+0x518>
 800f398:	7863      	ldrb	r3, [r4, #1]
 800f39a:	428b      	cmp	r3, r1
 800f39c:	bf0c      	ite	eq
 800f39e:	2303      	moveq	r3, #3
 800f3a0:	2300      	movne	r3, #0
 800f3a2:	7023      	strb	r3, [r4, #0]
 800f3a4:	e705      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f3a6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f3aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	4299      	cmp	r1, r3
 800f3b2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f3b6:	d06c      	beq.n	800f492 <uxr_read_framed_msg+0x302>
 800f3b8:	18e2      	adds	r2, r4, r3
 800f3ba:	7890      	ldrb	r0, [r2, #2]
 800f3bc:	287d      	cmp	r0, #125	@ 0x7d
 800f3be:	f000 8101 	beq.w	800f5c4 <uxr_read_framed_msg+0x434>
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	085a      	lsrs	r2, r3, #1
 800f3c6:	fba5 1202 	umull	r1, r2, r5, r2
 800f3ca:	0892      	lsrs	r2, r2, #2
 800f3cc:	212a      	movs	r1, #42	@ 0x2a
 800f3ce:	fb01 3312 	mls	r3, r1, r2, r3
 800f3d2:	287e      	cmp	r0, #126	@ 0x7e
 800f3d4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f3d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f3dc:	d059      	beq.n	800f492 <uxr_read_framed_msg+0x302>
 800f3de:	2302      	movs	r3, #2
 800f3e0:	7023      	strb	r3, [r4, #0]
 800f3e2:	e6e6      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f3e4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f3e8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f3ec:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f3f0:	1c51      	adds	r1, r2, #1
 800f3f2:	084b      	lsrs	r3, r1, #1
 800f3f4:	fba5 c303 	umull	ip, r3, r5, r3
 800f3f8:	089b      	lsrs	r3, r3, #2
 800f3fa:	fb0e 1313 	mls	r3, lr, r3, r1
 800f3fe:	4592      	cmp	sl, r2
 800f400:	eb04 0002 	add.w	r0, r4, r2
 800f404:	b2da      	uxtb	r2, r3
 800f406:	f43f af04 	beq.w	800f212 <uxr_read_framed_msg+0x82>
 800f40a:	7883      	ldrb	r3, [r0, #2]
 800f40c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f410:	2b7e      	cmp	r3, #126	@ 0x7e
 800f412:	d1ed      	bne.n	800f3f0 <uxr_read_framed_msg+0x260>
 800f414:	2301      	movs	r3, #1
 800f416:	7023      	strb	r3, [r4, #0]
 800f418:	e6cb      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f41a:	f100 0c01 	add.w	ip, r0, #1
 800f41e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f422:	fba5 8202 	umull	r8, r2, r5, r2
 800f426:	0892      	lsrs	r2, r2, #2
 800f428:	fb01 c212 	mls	r2, r1, r2, ip
 800f42c:	eb04 0c02 	add.w	ip, r4, r2
 800f430:	b2d2      	uxtb	r2, r2
 800f432:	4592      	cmp	sl, r2
 800f434:	f100 0002 	add.w	r0, r0, #2
 800f438:	f43f af47 	beq.w	800f2ca <uxr_read_framed_msg+0x13a>
 800f43c:	0842      	lsrs	r2, r0, #1
 800f43e:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f442:	fba5 8202 	umull	r8, r2, r5, r2
 800f446:	0892      	lsrs	r2, r2, #2
 800f448:	fb01 0012 	mls	r0, r1, r2, r0
 800f44c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f450:	f08a 0c20 	eor.w	ip, sl, #32
 800f454:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f458:	f47f af11 	bne.w	800f27e <uxr_read_framed_msg+0xee>
 800f45c:	459e      	cmp	lr, r3
 800f45e:	ee17 8a90 	vmov	r8, s15
 800f462:	f43f af37 	beq.w	800f2d4 <uxr_read_framed_msg+0x144>
 800f466:	2301      	movs	r3, #1
 800f468:	7023      	strb	r3, [r4, #0]
 800f46a:	e6a2      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	2301      	movs	r3, #1
 800f472:	9301      	str	r3, [sp, #4]
 800f474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f476:	464a      	mov	r2, r9
 800f478:	4641      	mov	r1, r8
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7ff fe06 	bl	800f08c <uxr_framing_read_transport>
 800f480:	2800      	cmp	r0, #0
 800f482:	f43f aec6 	beq.w	800f212 <uxr_read_framed_msg+0x82>
 800f486:	7823      	ldrb	r3, [r4, #0]
 800f488:	e693      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	2302      	movs	r3, #2
 800f490:	e7ef      	b.n	800f472 <uxr_read_framed_msg+0x2e2>
 800f492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	2304      	movs	r3, #4
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	464a      	mov	r2, r9
 800f49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f49e:	4641      	mov	r1, r8
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f7ff fdf3 	bl	800f08c <uxr_framing_read_transport>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d1ed      	bne.n	800f486 <uxr_read_framed_msg+0x2f6>
 800f4aa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f4ae:	2b7e      	cmp	r3, #126	@ 0x7e
 800f4b0:	d0e9      	beq.n	800f486 <uxr_read_framed_msg+0x2f6>
 800f4b2:	e6ae      	b.n	800f212 <uxr_read_framed_msg+0x82>
 800f4b4:	30c30c31 	.word	0x30c30c31
 800f4b8:	08011e94 	.word	0x08011e94
 800f4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	2305      	movs	r3, #5
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4c6:	f7ff fde1 	bl	800f08c <uxr_framing_read_transport>
 800f4ca:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f4ce:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	f43f ae9d 	beq.w	800f212 <uxr_read_framed_msg+0x82>
 800f4d8:	e668      	b.n	800f1ac <uxr_read_framed_msg+0x1c>
 800f4da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	2303      	movs	r3, #3
 800f4e0:	e7c7      	b.n	800f472 <uxr_read_framed_msg+0x2e2>
 800f4e2:	2305      	movs	r3, #5
 800f4e4:	7023      	strb	r3, [r4, #0]
 800f4e6:	e664      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f4e8:	ee17 8a90 	vmov	r8, s15
 800f4ec:	f43f aef2 	beq.w	800f2d4 <uxr_read_framed_msg+0x144>
 800f4f0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f4f4:	d08e      	beq.n	800f414 <uxr_read_framed_msg+0x284>
 800f4f6:	ebae 0303 	sub.w	r3, lr, r3
 800f4fa:	3302      	adds	r3, #2
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	e7b7      	b.n	800f474 <uxr_read_framed_msg+0x2e4>
 800f504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f506:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f50a:	7013      	strb	r3, [r2, #0]
 800f50c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f50e:	b003      	add	sp, #12
 800f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f514:	f103 0c01 	add.w	ip, r3, #1
 800f518:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f51c:	fba5 0202 	umull	r0, r2, r5, r2
 800f520:	0892      	lsrs	r2, r2, #2
 800f522:	202a      	movs	r0, #42	@ 0x2a
 800f524:	fb00 c212 	mls	r2, r0, r2, ip
 800f528:	fa5f fc82 	uxtb.w	ip, r2
 800f52c:	4561      	cmp	r1, ip
 800f52e:	d09d      	beq.n	800f46c <uxr_read_framed_msg+0x2dc>
 800f530:	3302      	adds	r3, #2
 800f532:	4422      	add	r2, r4
 800f534:	0859      	lsrs	r1, r3, #1
 800f536:	7892      	ldrb	r2, [r2, #2]
 800f538:	fba5 c101 	umull	ip, r1, r5, r1
 800f53c:	0889      	lsrs	r1, r1, #2
 800f53e:	fb00 3311 	mls	r3, r0, r1, r3
 800f542:	2a7e      	cmp	r2, #126	@ 0x7e
 800f544:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f548:	f000 80aa 	beq.w	800f6a0 <uxr_read_framed_msg+0x510>
 800f54c:	f082 0220 	eor.w	r2, r2, #32
 800f550:	e654      	b.n	800f1fc <uxr_read_framed_msg+0x6c>
 800f552:	1c58      	adds	r0, r3, #1
 800f554:	0842      	lsrs	r2, r0, #1
 800f556:	fba5 c202 	umull	ip, r2, r5, r2
 800f55a:	0892      	lsrs	r2, r2, #2
 800f55c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f560:	fb0c 0212 	mls	r2, ip, r2, r0
 800f564:	b2d0      	uxtb	r0, r2
 800f566:	4281      	cmp	r1, r0
 800f568:	d08f      	beq.n	800f48a <uxr_read_framed_msg+0x2fa>
 800f56a:	4422      	add	r2, r4
 800f56c:	3302      	adds	r3, #2
 800f56e:	7890      	ldrb	r0, [r2, #2]
 800f570:	085a      	lsrs	r2, r3, #1
 800f572:	fba5 1202 	umull	r1, r2, r5, r2
 800f576:	0892      	lsrs	r2, r2, #2
 800f578:	fb0c 3312 	mls	r3, ip, r2, r3
 800f57c:	287e      	cmp	r0, #126	@ 0x7e
 800f57e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f582:	d07d      	beq.n	800f680 <uxr_read_framed_msg+0x4f0>
 800f584:	f080 0020 	eor.w	r0, r0, #32
 800f588:	e660      	b.n	800f24c <uxr_read_framed_msg+0xbc>
 800f58a:	1c59      	adds	r1, r3, #1
 800f58c:	084a      	lsrs	r2, r1, #1
 800f58e:	fba5 c202 	umull	ip, r2, r5, r2
 800f592:	0892      	lsrs	r2, r2, #2
 800f594:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f598:	fb0c 1212 	mls	r2, ip, r2, r1
 800f59c:	b2d1      	uxtb	r1, r2
 800f59e:	4288      	cmp	r0, r1
 800f5a0:	f43f af64 	beq.w	800f46c <uxr_read_framed_msg+0x2dc>
 800f5a4:	4422      	add	r2, r4
 800f5a6:	3302      	adds	r3, #2
 800f5a8:	7891      	ldrb	r1, [r2, #2]
 800f5aa:	085a      	lsrs	r2, r3, #1
 800f5ac:	fba5 0202 	umull	r0, r2, r5, r2
 800f5b0:	0892      	lsrs	r2, r2, #2
 800f5b2:	fb0c 3312 	mls	r3, ip, r2, r3
 800f5b6:	297e      	cmp	r1, #126	@ 0x7e
 800f5b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f5bc:	d070      	beq.n	800f6a0 <uxr_read_framed_msg+0x510>
 800f5be:	f081 0120 	eor.w	r1, r1, #32
 800f5c2:	e6a3      	b.n	800f30c <uxr_read_framed_msg+0x17c>
 800f5c4:	f103 0c01 	add.w	ip, r3, #1
 800f5c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f5cc:	fba5 0202 	umull	r0, r2, r5, r2
 800f5d0:	0892      	lsrs	r2, r2, #2
 800f5d2:	202a      	movs	r0, #42	@ 0x2a
 800f5d4:	fb00 c212 	mls	r2, r0, r2, ip
 800f5d8:	fa5f fc82 	uxtb.w	ip, r2
 800f5dc:	4561      	cmp	r1, ip
 800f5de:	f43f af58 	beq.w	800f492 <uxr_read_framed_msg+0x302>
 800f5e2:	4422      	add	r2, r4
 800f5e4:	3302      	adds	r3, #2
 800f5e6:	7891      	ldrb	r1, [r2, #2]
 800f5e8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f5ec:	085a      	lsrs	r2, r3, #1
 800f5ee:	fba5 c202 	umull	ip, r2, r5, r2
 800f5f2:	0892      	lsrs	r2, r2, #2
 800f5f4:	fb00 3312 	mls	r3, r0, r2, r3
 800f5f8:	297e      	cmp	r1, #126	@ 0x7e
 800f5fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f5fe:	f43f af48 	beq.w	800f492 <uxr_read_framed_msg+0x302>
 800f602:	f081 0120 	eor.w	r1, r1, #32
 800f606:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f60a:	e6e8      	b.n	800f3de <uxr_read_framed_msg+0x24e>
 800f60c:	1c58      	adds	r0, r3, #1
 800f60e:	0842      	lsrs	r2, r0, #1
 800f610:	fba5 c202 	umull	ip, r2, r5, r2
 800f614:	0892      	lsrs	r2, r2, #2
 800f616:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f61a:	fb0c 0212 	mls	r2, ip, r2, r0
 800f61e:	b2d0      	uxtb	r0, r2
 800f620:	4281      	cmp	r1, r0
 800f622:	f43f af32 	beq.w	800f48a <uxr_read_framed_msg+0x2fa>
 800f626:	4422      	add	r2, r4
 800f628:	3302      	adds	r3, #2
 800f62a:	7890      	ldrb	r0, [r2, #2]
 800f62c:	085a      	lsrs	r2, r3, #1
 800f62e:	fba5 1202 	umull	r1, r2, r5, r2
 800f632:	0892      	lsrs	r2, r2, #2
 800f634:	fb0c 3312 	mls	r3, ip, r2, r3
 800f638:	287e      	cmp	r0, #126	@ 0x7e
 800f63a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f63e:	d01f      	beq.n	800f680 <uxr_read_framed_msg+0x4f0>
 800f640:	f080 0020 	eor.w	r0, r0, #32
 800f644:	e68b      	b.n	800f35e <uxr_read_framed_msg+0x1ce>
 800f646:	1c51      	adds	r1, r2, #1
 800f648:	084b      	lsrs	r3, r1, #1
 800f64a:	fba5 c303 	umull	ip, r3, r5, r3
 800f64e:	089b      	lsrs	r3, r3, #2
 800f650:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f654:	fb0c 1313 	mls	r3, ip, r3, r1
 800f658:	b2d9      	uxtb	r1, r3
 800f65a:	4288      	cmp	r0, r1
 800f65c:	f43f af3d 	beq.w	800f4da <uxr_read_framed_msg+0x34a>
 800f660:	3202      	adds	r2, #2
 800f662:	4423      	add	r3, r4
 800f664:	0850      	lsrs	r0, r2, #1
 800f666:	789b      	ldrb	r3, [r3, #2]
 800f668:	fba5 1000 	umull	r1, r0, r5, r0
 800f66c:	0880      	lsrs	r0, r0, #2
 800f66e:	fb0c 2210 	mls	r2, ip, r0, r2
 800f672:	2b7e      	cmp	r3, #126	@ 0x7e
 800f674:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f678:	d016      	beq.n	800f6a8 <uxr_read_framed_msg+0x518>
 800f67a:	f083 0120 	eor.w	r1, r3, #32
 800f67e:	e68b      	b.n	800f398 <uxr_read_framed_msg+0x208>
 800f680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	2302      	movs	r3, #2
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	464a      	mov	r2, r9
 800f68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f68c:	4641      	mov	r1, r8
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff fcfc 	bl	800f08c <uxr_framing_read_transport>
 800f694:	2800      	cmp	r0, #0
 800f696:	f47f aef6 	bne.w	800f486 <uxr_read_framed_msg+0x2f6>
 800f69a:	2301      	movs	r3, #1
 800f69c:	7023      	strb	r3, [r4, #0]
 800f69e:	e588      	b.n	800f1b2 <uxr_read_framed_msg+0x22>
 800f6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	e7ee      	b.n	800f686 <uxr_read_framed_msg+0x4f6>
 800f6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	2303      	movs	r3, #3
 800f6ae:	e7ea      	b.n	800f686 <uxr_read_framed_msg+0x4f6>
 800f6b0:	ee17 8a90 	vmov	r8, s15
 800f6b4:	e6ae      	b.n	800f414 <uxr_read_framed_msg+0x284>
 800f6b6:	bf00      	nop

0800f6b8 <rcl_get_default_domain_id>:
 800f6b8:	b530      	push	{r4, r5, lr}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	2300      	movs	r3, #0
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	b1d0      	cbz	r0, 800f6f8 <rcl_get_default_domain_id+0x40>
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	4669      	mov	r1, sp
 800f6c6:	4815      	ldr	r0, [pc, #84]	@ (800f71c <rcl_get_default_domain_id+0x64>)
 800f6c8:	f7fd f96e 	bl	800c9a8 <rcutils_get_env>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	b110      	cbz	r0, 800f6d6 <rcl_get_default_domain_id+0x1e>
 800f6d0:	2001      	movs	r0, #1
 800f6d2:	b003      	add	sp, #12
 800f6d4:	bd30      	pop	{r4, r5, pc}
 800f6d6:	9b00      	ldr	r3, [sp, #0]
 800f6d8:	b18b      	cbz	r3, 800f6fe <rcl_get_default_domain_id+0x46>
 800f6da:	7818      	ldrb	r0, [r3, #0]
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d0f8      	beq.n	800f6d2 <rcl_get_default_domain_id+0x1a>
 800f6e0:	a901      	add	r1, sp, #4
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	9201      	str	r2, [sp, #4]
 800f6e6:	f000 fe83 	bl	80103f0 <strtoul>
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	b150      	cbz	r0, 800f704 <rcl_get_default_domain_id+0x4c>
 800f6ee:	1c43      	adds	r3, r0, #1
 800f6f0:	d00d      	beq.n	800f70e <rcl_get_default_domain_id+0x56>
 800f6f2:	6025      	str	r5, [r4, #0]
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	e7ec      	b.n	800f6d2 <rcl_get_default_domain_id+0x1a>
 800f6f8:	200b      	movs	r0, #11
 800f6fa:	b003      	add	sp, #12
 800f6fc:	bd30      	pop	{r4, r5, pc}
 800f6fe:	4618      	mov	r0, r3
 800f700:	b003      	add	sp, #12
 800f702:	bd30      	pop	{r4, r5, pc}
 800f704:	9b01      	ldr	r3, [sp, #4]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d0f2      	beq.n	800f6f2 <rcl_get_default_domain_id+0x3a>
 800f70c:	e7e0      	b.n	800f6d0 <rcl_get_default_domain_id+0x18>
 800f70e:	f001 f891 	bl	8010834 <__errno>
 800f712:	6803      	ldr	r3, [r0, #0]
 800f714:	2b22      	cmp	r3, #34	@ 0x22
 800f716:	d1ec      	bne.n	800f6f2 <rcl_get_default_domain_id+0x3a>
 800f718:	e7da      	b.n	800f6d0 <rcl_get_default_domain_id+0x18>
 800f71a:	bf00      	nop
 800f71c:	08012094 	.word	0x08012094

0800f720 <rcl_expand_topic_name>:
 800f720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f724:	b08b      	sub	sp, #44	@ 0x2c
 800f726:	9306      	str	r3, [sp, #24]
 800f728:	2800      	cmp	r0, #0
 800f72a:	f000 80ad 	beq.w	800f888 <rcl_expand_topic_name+0x168>
 800f72e:	460e      	mov	r6, r1
 800f730:	2900      	cmp	r1, #0
 800f732:	f000 80a9 	beq.w	800f888 <rcl_expand_topic_name+0x168>
 800f736:	4617      	mov	r7, r2
 800f738:	2a00      	cmp	r2, #0
 800f73a:	f000 80a5 	beq.w	800f888 <rcl_expand_topic_name+0x168>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 80a2 	beq.w	800f888 <rcl_expand_topic_name+0x168>
 800f744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f746:	2b00      	cmp	r3, #0
 800f748:	f000 809e 	beq.w	800f888 <rcl_expand_topic_name+0x168>
 800f74c:	2200      	movs	r2, #0
 800f74e:	a909      	add	r1, sp, #36	@ 0x24
 800f750:	4680      	mov	r8, r0
 800f752:	f000 f9f5 	bl	800fb40 <rcl_validate_topic_name>
 800f756:	4604      	mov	r4, r0
 800f758:	2800      	cmp	r0, #0
 800f75a:	f040 8096 	bne.w	800f88a <rcl_expand_topic_name+0x16a>
 800f75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f760:	2b00      	cmp	r3, #0
 800f762:	f040 809a 	bne.w	800f89a <rcl_expand_topic_name+0x17a>
 800f766:	4602      	mov	r2, r0
 800f768:	a909      	add	r1, sp, #36	@ 0x24
 800f76a:	4630      	mov	r0, r6
 800f76c:	f7fd fd1e 	bl	800d1ac <rmw_validate_node_name>
 800f770:	2800      	cmp	r0, #0
 800f772:	f040 808e 	bne.w	800f892 <rcl_expand_topic_name+0x172>
 800f776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f778:	2a00      	cmp	r2, #0
 800f77a:	f040 8093 	bne.w	800f8a4 <rcl_expand_topic_name+0x184>
 800f77e:	a909      	add	r1, sp, #36	@ 0x24
 800f780:	4638      	mov	r0, r7
 800f782:	f7fd fcf5 	bl	800d170 <rmw_validate_namespace>
 800f786:	2800      	cmp	r0, #0
 800f788:	f040 8083 	bne.w	800f892 <rcl_expand_topic_name+0x172>
 800f78c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f78e:	2c00      	cmp	r4, #0
 800f790:	f040 80ed 	bne.w	800f96e <rcl_expand_topic_name+0x24e>
 800f794:	217b      	movs	r1, #123	@ 0x7b
 800f796:	4640      	mov	r0, r8
 800f798:	f000 ffc0 	bl	801071c <strchr>
 800f79c:	f898 3000 	ldrb.w	r3, [r8]
 800f7a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	f000 809e 	beq.w	800f8e4 <rcl_expand_topic_name+0x1c4>
 800f7a8:	2b7e      	cmp	r3, #126	@ 0x7e
 800f7aa:	f040 80a2 	bne.w	800f8f2 <rcl_expand_topic_name+0x1d2>
 800f7ae:	4638      	mov	r0, r7
 800f7b0:	f7f0 fd20 	bl	80001f4 <strlen>
 800f7b4:	4a82      	ldr	r2, [pc, #520]	@ (800f9c0 <rcl_expand_topic_name+0x2a0>)
 800f7b6:	4b83      	ldr	r3, [pc, #524]	@ (800f9c4 <rcl_expand_topic_name+0x2a4>)
 800f7b8:	2801      	cmp	r0, #1
 800f7ba:	bf18      	it	ne
 800f7bc:	4613      	movne	r3, r2
 800f7be:	9302      	str	r3, [sp, #8]
 800f7c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f7c8:	f108 0301 	add.w	r3, r8, #1
 800f7cc:	9305      	str	r3, [sp, #20]
 800f7ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	ab14      	add	r3, sp, #80	@ 0x50
 800f7d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f7d8:	f7fd f90e 	bl	800c9f8 <rcutils_format_string_limit>
 800f7dc:	4682      	mov	sl, r0
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f000 80c7 	beq.w	800f972 <rcl_expand_topic_name+0x252>
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	f000 80a2 	beq.w	800f92e <rcl_expand_topic_name+0x20e>
 800f7ea:	217b      	movs	r1, #123	@ 0x7b
 800f7ec:	f000 ff96 	bl	801071c <strchr>
 800f7f0:	46d1      	mov	r9, sl
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	9407      	str	r4, [sp, #28]
 800f7f6:	46d3      	mov	fp, sl
 800f7f8:	464c      	mov	r4, r9
 800f7fa:	2d00      	cmp	r5, #0
 800f7fc:	f000 80be 	beq.w	800f97c <rcl_expand_topic_name+0x25c>
 800f800:	217d      	movs	r1, #125	@ 0x7d
 800f802:	4620      	mov	r0, r4
 800f804:	f000 ff8a 	bl	801071c <strchr>
 800f808:	eba0 0905 	sub.w	r9, r0, r5
 800f80c:	f109 0a01 	add.w	sl, r9, #1
 800f810:	486d      	ldr	r0, [pc, #436]	@ (800f9c8 <rcl_expand_topic_name+0x2a8>)
 800f812:	4652      	mov	r2, sl
 800f814:	4629      	mov	r1, r5
 800f816:	f000 ff8e 	bl	8010736 <strncmp>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d067      	beq.n	800f8ee <rcl_expand_topic_name+0x1ce>
 800f81e:	486b      	ldr	r0, [pc, #428]	@ (800f9cc <rcl_expand_topic_name+0x2ac>)
 800f820:	4652      	mov	r2, sl
 800f822:	4629      	mov	r1, r5
 800f824:	f000 ff87 	bl	8010736 <strncmp>
 800f828:	b130      	cbz	r0, 800f838 <rcl_expand_topic_name+0x118>
 800f82a:	4869      	ldr	r0, [pc, #420]	@ (800f9d0 <rcl_expand_topic_name+0x2b0>)
 800f82c:	4652      	mov	r2, sl
 800f82e:	4629      	mov	r1, r5
 800f830:	f000 ff81 	bl	8010736 <strncmp>
 800f834:	2800      	cmp	r0, #0
 800f836:	d137      	bne.n	800f8a8 <rcl_expand_topic_name+0x188>
 800f838:	46b9      	mov	r9, r7
 800f83a:	ab16      	add	r3, sp, #88	@ 0x58
 800f83c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f840:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f844:	ab14      	add	r3, sp, #80	@ 0x50
 800f846:	4628      	mov	r0, r5
 800f848:	cb0c      	ldmia	r3, {r2, r3}
 800f84a:	4651      	mov	r1, sl
 800f84c:	f7fd fa10 	bl	800cc70 <rcutils_strndup>
 800f850:	4605      	mov	r5, r0
 800f852:	2800      	cmp	r0, #0
 800f854:	f000 809c 	beq.w	800f990 <rcl_expand_topic_name+0x270>
 800f858:	464a      	mov	r2, r9
 800f85a:	4620      	mov	r0, r4
 800f85c:	ab14      	add	r3, sp, #80	@ 0x50
 800f85e:	4629      	mov	r1, r5
 800f860:	f7fd f904 	bl	800ca6c <rcutils_repl_str>
 800f864:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f866:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f868:	4604      	mov	r4, r0
 800f86a:	4628      	mov	r0, r5
 800f86c:	4798      	blx	r3
 800f86e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f870:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f872:	4658      	mov	r0, fp
 800f874:	4798      	blx	r3
 800f876:	2c00      	cmp	r4, #0
 800f878:	d07b      	beq.n	800f972 <rcl_expand_topic_name+0x252>
 800f87a:	217b      	movs	r1, #123	@ 0x7b
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 ff4d 	bl	801071c <strchr>
 800f882:	46a3      	mov	fp, r4
 800f884:	4605      	mov	r5, r0
 800f886:	e7b8      	b.n	800f7fa <rcl_expand_topic_name+0xda>
 800f888:	240b      	movs	r4, #11
 800f88a:	4620      	mov	r0, r4
 800f88c:	b00b      	add	sp, #44	@ 0x2c
 800f88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f892:	f7fc f969 	bl	800bb68 <rcl_convert_rmw_ret_to_rcl_ret>
 800f896:	4604      	mov	r4, r0
 800f898:	e7f7      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f89a:	2467      	movs	r4, #103	@ 0x67
 800f89c:	4620      	mov	r0, r4
 800f89e:	b00b      	add	sp, #44	@ 0x2c
 800f8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a4:	24c9      	movs	r4, #201	@ 0xc9
 800f8a6:	e7f0      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f8a8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800f8ac:	9806      	ldr	r0, [sp, #24]
 800f8ae:	1c69      	adds	r1, r5, #1
 800f8b0:	f7fd faf8 	bl	800cea4 <rcutils_string_map_getn>
 800f8b4:	4681      	mov	r9, r0
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d1bf      	bne.n	800f83a <rcl_expand_topic_name+0x11a>
 800f8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8bc:	aa16      	add	r2, sp, #88	@ 0x58
 800f8be:	6018      	str	r0, [r3, #0]
 800f8c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f8c6:	ab14      	add	r3, sp, #80	@ 0x50
 800f8c8:	cb0c      	ldmia	r3, {r2, r3}
 800f8ca:	4651      	mov	r1, sl
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f7fd f9cf 	bl	800cc70 <rcutils_strndup>
 800f8d2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f8d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f8d6:	4798      	blx	r3
 800f8d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f8da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f8dc:	4658      	mov	r0, fp
 800f8de:	2469      	movs	r4, #105	@ 0x69
 800f8e0:	4798      	blx	r3
 800f8e2:	e7d2      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d05b      	beq.n	800f9a0 <rcl_expand_topic_name+0x280>
 800f8e8:	46c1      	mov	r9, r8
 800f8ea:	46a2      	mov	sl, r4
 800f8ec:	e782      	b.n	800f7f4 <rcl_expand_topic_name+0xd4>
 800f8ee:	46b1      	mov	r9, r6
 800f8f0:	e7a3      	b.n	800f83a <rcl_expand_topic_name+0x11a>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d1f8      	bne.n	800f8e8 <rcl_expand_topic_name+0x1c8>
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	f7f0 fc7c 	bl	80001f4 <strlen>
 800f8fc:	4a35      	ldr	r2, [pc, #212]	@ (800f9d4 <rcl_expand_topic_name+0x2b4>)
 800f8fe:	4b36      	ldr	r3, [pc, #216]	@ (800f9d8 <rcl_expand_topic_name+0x2b8>)
 800f900:	f8cd 8010 	str.w	r8, [sp, #16]
 800f904:	2801      	cmp	r0, #1
 800f906:	bf18      	it	ne
 800f908:	4613      	movne	r3, r2
 800f90a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f90e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f912:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f914:	9703      	str	r7, [sp, #12]
 800f916:	9200      	str	r2, [sp, #0]
 800f918:	ab14      	add	r3, sp, #80	@ 0x50
 800f91a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f91c:	f7fd f86c 	bl	800c9f8 <rcutils_format_string_limit>
 800f920:	4682      	mov	sl, r0
 800f922:	4653      	mov	r3, sl
 800f924:	b32b      	cbz	r3, 800f972 <rcl_expand_topic_name+0x252>
 800f926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f928:	f8c3 a000 	str.w	sl, [r3]
 800f92c:	e7ad      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f92e:	f89a 3000 	ldrb.w	r3, [sl]
 800f932:	2b2f      	cmp	r3, #47	@ 0x2f
 800f934:	d0f7      	beq.n	800f926 <rcl_expand_topic_name+0x206>
 800f936:	4638      	mov	r0, r7
 800f938:	f7f0 fc5c 	bl	80001f4 <strlen>
 800f93c:	4a25      	ldr	r2, [pc, #148]	@ (800f9d4 <rcl_expand_topic_name+0x2b4>)
 800f93e:	4b26      	ldr	r3, [pc, #152]	@ (800f9d8 <rcl_expand_topic_name+0x2b8>)
 800f940:	f8cd a010 	str.w	sl, [sp, #16]
 800f944:	2801      	cmp	r0, #1
 800f946:	bf18      	it	ne
 800f948:	4613      	movne	r3, r2
 800f94a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f94e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800f952:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f954:	9703      	str	r7, [sp, #12]
 800f956:	9200      	str	r2, [sp, #0]
 800f958:	ab14      	add	r3, sp, #80	@ 0x50
 800f95a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f95c:	f7fd f84c 	bl	800c9f8 <rcutils_format_string_limit>
 800f960:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f962:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800f964:	4605      	mov	r5, r0
 800f966:	4650      	mov	r0, sl
 800f968:	4798      	blx	r3
 800f96a:	46aa      	mov	sl, r5
 800f96c:	e7d9      	b.n	800f922 <rcl_expand_topic_name+0x202>
 800f96e:	24ca      	movs	r4, #202	@ 0xca
 800f970:	e78b      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f974:	2300      	movs	r3, #0
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	240a      	movs	r4, #10
 800f97a:	e786      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f97c:	465b      	mov	r3, fp
 800f97e:	9c07      	ldr	r4, [sp, #28]
 800f980:	46da      	mov	sl, fp
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1d3      	bne.n	800f92e <rcl_expand_topic_name+0x20e>
 800f986:	f898 3000 	ldrb.w	r3, [r8]
 800f98a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f98c:	d0cb      	beq.n	800f926 <rcl_expand_topic_name+0x206>
 800f98e:	e7b2      	b.n	800f8f6 <rcl_expand_topic_name+0x1d6>
 800f990:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 800f994:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f996:	6015      	str	r5, [r2, #0]
 800f998:	4658      	mov	r0, fp
 800f99a:	4798      	blx	r3
 800f99c:	240a      	movs	r4, #10
 800f99e:	e774      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f9a0:	ab17      	add	r3, sp, #92	@ 0x5c
 800f9a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f9a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f9aa:	ab14      	add	r3, sp, #80	@ 0x50
 800f9ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f9ae:	4640      	mov	r0, r8
 800f9b0:	f7fd f93c 	bl	800cc2c <rcutils_strdup>
 800f9b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	6018      	str	r0, [r3, #0]
 800f9ba:	bf08      	it	eq
 800f9bc:	240a      	moveq	r4, #10
 800f9be:	e764      	b.n	800f88a <rcl_expand_topic_name+0x16a>
 800f9c0:	080120a4 	.word	0x080120a4
 800f9c4:	080119dc 	.word	0x080119dc
 800f9c8:	080120ac 	.word	0x080120ac
 800f9cc:	080120b4 	.word	0x080120b4
 800f9d0:	080120bc 	.word	0x080120bc
 800f9d4:	08011a38 	.word	0x08011a38
 800f9d8:	080119ec 	.word	0x080119ec

0800f9dc <rcl_get_default_topic_name_substitutions>:
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	bf0c      	ite	eq
 800f9e0:	200b      	moveq	r0, #11
 800f9e2:	2000      	movne	r0, #0
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop

0800f9e8 <rcl_get_zero_initialized_guard_condition>:
 800f9e8:	4a03      	ldr	r2, [pc, #12]	@ (800f9f8 <rcl_get_zero_initialized_guard_condition+0x10>)
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	4770      	bx	lr
 800f9f8:	080120c8 	.word	0x080120c8

0800f9fc <rcl_guard_condition_init_from_rmw>:
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800fa08:	4604      	mov	r4, r0
 800fa0a:	f84c 3f04 	str.w	r3, [ip, #4]!
 800fa0e:	460e      	mov	r6, r1
 800fa10:	4617      	mov	r7, r2
 800fa12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa16:	f10d 0e04 	add.w	lr, sp, #4
 800fa1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa1e:	f8dc 3000 	ldr.w	r3, [ip]
 800fa22:	f8ce 3000 	str.w	r3, [lr]
 800fa26:	a801      	add	r0, sp, #4
 800fa28:	f7f8 fedc 	bl	80087e4 <rcutils_allocator_is_valid>
 800fa2c:	b350      	cbz	r0, 800fa84 <rcl_guard_condition_init_from_rmw+0x88>
 800fa2e:	b34c      	cbz	r4, 800fa84 <rcl_guard_condition_init_from_rmw+0x88>
 800fa30:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fa34:	f1b8 0f00 	cmp.w	r8, #0
 800fa38:	d11e      	bne.n	800fa78 <rcl_guard_condition_init_from_rmw+0x7c>
 800fa3a:	b31f      	cbz	r7, 800fa84 <rcl_guard_condition_init_from_rmw+0x88>
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f7fc f8b1 	bl	800bba4 <rcl_context_is_valid>
 800fa42:	b328      	cbz	r0, 800fa90 <rcl_guard_condition_init_from_rmw+0x94>
 800fa44:	9b01      	ldr	r3, [sp, #4]
 800fa46:	9905      	ldr	r1, [sp, #20]
 800fa48:	201c      	movs	r0, #28
 800fa4a:	4798      	blx	r3
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	6060      	str	r0, [r4, #4]
 800fa50:	b358      	cbz	r0, 800faaa <rcl_guard_condition_init_from_rmw+0xae>
 800fa52:	b1fe      	cbz	r6, 800fa94 <rcl_guard_condition_init_from_rmw+0x98>
 800fa54:	6006      	str	r6, [r0, #0]
 800fa56:	f880 8004 	strb.w	r8, [r0, #4]
 800fa5a:	ac01      	add	r4, sp, #4
 800fa5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa5e:	f105 0c08 	add.w	ip, r5, #8
 800fa62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	f8cc 3000 	str.w	r3, [ip]
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	b006      	add	sp, #24
 800fa70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa74:	b002      	add	sp, #8
 800fa76:	4770      	bx	lr
 800fa78:	2064      	movs	r0, #100	@ 0x64
 800fa7a:	b006      	add	sp, #24
 800fa7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa80:	b002      	add	sp, #8
 800fa82:	4770      	bx	lr
 800fa84:	200b      	movs	r0, #11
 800fa86:	b006      	add	sp, #24
 800fa88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8c:	b002      	add	sp, #8
 800fa8e:	4770      	bx	lr
 800fa90:	2065      	movs	r0, #101	@ 0x65
 800fa92:	e7f2      	b.n	800fa7a <rcl_guard_condition_init_from_rmw+0x7e>
 800fa94:	6838      	ldr	r0, [r7, #0]
 800fa96:	3028      	adds	r0, #40	@ 0x28
 800fa98:	f000 fa50 	bl	800ff3c <rmw_create_guard_condition>
 800fa9c:	6028      	str	r0, [r5, #0]
 800fa9e:	6865      	ldr	r5, [r4, #4]
 800faa0:	682e      	ldr	r6, [r5, #0]
 800faa2:	b126      	cbz	r6, 800faae <rcl_guard_condition_init_from_rmw+0xb2>
 800faa4:	2301      	movs	r3, #1
 800faa6:	712b      	strb	r3, [r5, #4]
 800faa8:	e7d7      	b.n	800fa5a <rcl_guard_condition_init_from_rmw+0x5e>
 800faaa:	200a      	movs	r0, #10
 800faac:	e7e5      	b.n	800fa7a <rcl_guard_condition_init_from_rmw+0x7e>
 800faae:	4628      	mov	r0, r5
 800fab0:	9b02      	ldr	r3, [sp, #8]
 800fab2:	9905      	ldr	r1, [sp, #20]
 800fab4:	4798      	blx	r3
 800fab6:	6066      	str	r6, [r4, #4]
 800fab8:	2001      	movs	r0, #1
 800faba:	e7de      	b.n	800fa7a <rcl_guard_condition_init_from_rmw+0x7e>

0800fabc <rcl_guard_condition_fini>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	b1f0      	cbz	r0, 800fb00 <rcl_guard_condition_fini+0x44>
 800fac2:	6843      	ldr	r3, [r0, #4]
 800fac4:	4604      	mov	r4, r0
 800fac6:	b163      	cbz	r3, 800fae2 <rcl_guard_condition_fini+0x26>
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	68de      	ldr	r6, [r3, #12]
 800facc:	6999      	ldr	r1, [r3, #24]
 800face:	b160      	cbz	r0, 800faea <rcl_guard_condition_fini+0x2e>
 800fad0:	791d      	ldrb	r5, [r3, #4]
 800fad2:	b965      	cbnz	r5, 800faee <rcl_guard_condition_fini+0x32>
 800fad4:	4618      	mov	r0, r3
 800fad6:	47b0      	blx	r6
 800fad8:	2300      	movs	r3, #0
 800fada:	4628      	mov	r0, r5
 800fadc:	6063      	str	r3, [r4, #4]
 800fade:	b002      	add	sp, #8
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	461d      	mov	r5, r3
 800fae4:	4628      	mov	r0, r5
 800fae6:	b002      	add	sp, #8
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
 800faea:	4605      	mov	r5, r0
 800faec:	e7f2      	b.n	800fad4 <rcl_guard_condition_fini+0x18>
 800faee:	9101      	str	r1, [sp, #4]
 800faf0:	f000 fa38 	bl	800ff64 <rmw_destroy_guard_condition>
 800faf4:	1e05      	subs	r5, r0, #0
 800faf6:	6863      	ldr	r3, [r4, #4]
 800faf8:	9901      	ldr	r1, [sp, #4]
 800fafa:	bf18      	it	ne
 800fafc:	2501      	movne	r5, #1
 800fafe:	e7e9      	b.n	800fad4 <rcl_guard_condition_fini+0x18>
 800fb00:	250b      	movs	r5, #11
 800fb02:	4628      	mov	r0, r5
 800fb04:	b002      	add	sp, #8
 800fb06:	bd70      	pop	{r4, r5, r6, pc}

0800fb08 <rcl_guard_condition_get_default_options>:
 800fb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	4668      	mov	r0, sp
 800fb10:	f7f8 fe5a 	bl	80087c8 <rcutils_get_default_allocator>
 800fb14:	4b09      	ldr	r3, [pc, #36]	@ (800fb3c <rcl_guard_condition_get_default_options+0x34>)
 800fb16:	46ee      	mov	lr, sp
 800fb18:	469c      	mov	ip, r3
 800fb1a:	461d      	mov	r5, r3
 800fb1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb26:	4634      	mov	r4, r6
 800fb28:	f8de 7000 	ldr.w	r7, [lr]
 800fb2c:	f8cc 7000 	str.w	r7, [ip]
 800fb30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb32:	4630      	mov	r0, r6
 800fb34:	6027      	str	r7, [r4, #0]
 800fb36:	b007      	add	sp, #28
 800fb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	2000dc14 	.word	0x2000dc14

0800fb40 <rcl_validate_topic_name>:
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d07a      	beq.n	800fc3a <rcl_validate_topic_name+0xfa>
 800fb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb48:	460e      	mov	r6, r1
 800fb4a:	2900      	cmp	r1, #0
 800fb4c:	d07c      	beq.n	800fc48 <rcl_validate_topic_name+0x108>
 800fb4e:	4617      	mov	r7, r2
 800fb50:	4605      	mov	r5, r0
 800fb52:	f7f0 fb4f 	bl	80001f4 <strlen>
 800fb56:	b1b0      	cbz	r0, 800fb86 <rcl_validate_topic_name+0x46>
 800fb58:	f895 9000 	ldrb.w	r9, [r5]
 800fb5c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 800fce0 <rcl_validate_topic_name+0x1a0>
 800fb60:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800fb64:	f013 0304 	ands.w	r3, r3, #4
 800fb68:	d169      	bne.n	800fc3e <rcl_validate_topic_name+0xfe>
 800fb6a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800fb6e:	f815 2008 	ldrb.w	r2, [r5, r8]
 800fb72:	2a2f      	cmp	r2, #47	@ 0x2f
 800fb74:	d10e      	bne.n	800fb94 <rcl_validate_topic_name+0x54>
 800fb76:	2202      	movs	r2, #2
 800fb78:	6032      	str	r2, [r6, #0]
 800fb7a:	b36f      	cbz	r7, 800fbd8 <rcl_validate_topic_name+0x98>
 800fb7c:	f8c7 8000 	str.w	r8, [r7]
 800fb80:	4618      	mov	r0, r3
 800fb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb86:	2301      	movs	r3, #1
 800fb88:	6033      	str	r3, [r6, #0]
 800fb8a:	b32f      	cbz	r7, 800fbd8 <rcl_validate_topic_name+0x98>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	6038      	str	r0, [r7, #0]
 800fb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb94:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800fb98:	461c      	mov	r4, r3
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800fba0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fba4:	f1be 0f09 	cmp.w	lr, #9
 800fba8:	d919      	bls.n	800fbde <rcl_validate_topic_name+0x9e>
 800fbaa:	f022 0e20 	bic.w	lr, r2, #32
 800fbae:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800fbb2:	f1be 0f19 	cmp.w	lr, #25
 800fbb6:	d912      	bls.n	800fbde <rcl_validate_topic_name+0x9e>
 800fbb8:	2a5f      	cmp	r2, #95	@ 0x5f
 800fbba:	d019      	beq.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fbbc:	2a2f      	cmp	r2, #47	@ 0x2f
 800fbbe:	d051      	beq.n	800fc64 <rcl_validate_topic_name+0x124>
 800fbc0:	2a7e      	cmp	r2, #126	@ 0x7e
 800fbc2:	d048      	beq.n	800fc56 <rcl_validate_topic_name+0x116>
 800fbc4:	2a7b      	cmp	r2, #123	@ 0x7b
 800fbc6:	d054      	beq.n	800fc72 <rcl_validate_topic_name+0x132>
 800fbc8:	2a7d      	cmp	r2, #125	@ 0x7d
 800fbca:	d161      	bne.n	800fc90 <rcl_validate_topic_name+0x150>
 800fbcc:	2c00      	cmp	r4, #0
 800fbce:	d155      	bne.n	800fc7c <rcl_validate_topic_name+0x13c>
 800fbd0:	2305      	movs	r3, #5
 800fbd2:	6033      	str	r3, [r6, #0]
 800fbd4:	b107      	cbz	r7, 800fbd8 <rcl_validate_topic_name+0x98>
 800fbd6:	6039      	str	r1, [r7, #0]
 800fbd8:	2000      	movs	r0, #0
 800fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbde:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fbe2:	0752      	lsls	r2, r2, #29
 800fbe4:	d504      	bpl.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fbe6:	b11c      	cbz	r4, 800fbf0 <rcl_validate_topic_name+0xb0>
 800fbe8:	b111      	cbz	r1, 800fbf0 <rcl_validate_topic_name+0xb0>
 800fbea:	1e4a      	subs	r2, r1, #1
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d02d      	beq.n	800fc4c <rcl_validate_topic_name+0x10c>
 800fbf0:	3101      	adds	r1, #1
 800fbf2:	4288      	cmp	r0, r1
 800fbf4:	d1d2      	bne.n	800fb9c <rcl_validate_topic_name+0x5c>
 800fbf6:	2c00      	cmp	r4, #0
 800fbf8:	d145      	bne.n	800fc86 <rcl_validate_topic_name+0x146>
 800fbfa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800fbfe:	d04f      	beq.n	800fca0 <rcl_validate_topic_name+0x160>
 800fc00:	4620      	mov	r0, r4
 800fc02:	2301      	movs	r3, #1
 800fc04:	e006      	b.n	800fc14 <rcl_validate_topic_name+0xd4>
 800fc06:	428b      	cmp	r3, r1
 800fc08:	f105 0501 	add.w	r5, r5, #1
 800fc0c:	f103 0201 	add.w	r2, r3, #1
 800fc10:	d236      	bcs.n	800fc80 <rcl_validate_topic_name+0x140>
 800fc12:	4613      	mov	r3, r2
 800fc14:	4580      	cmp	r8, r0
 800fc16:	f100 0001 	add.w	r0, r0, #1
 800fc1a:	d0f4      	beq.n	800fc06 <rcl_validate_topic_name+0xc6>
 800fc1c:	782a      	ldrb	r2, [r5, #0]
 800fc1e:	2a2f      	cmp	r2, #47	@ 0x2f
 800fc20:	d1f1      	bne.n	800fc06 <rcl_validate_topic_name+0xc6>
 800fc22:	786a      	ldrb	r2, [r5, #1]
 800fc24:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fc28:	0754      	lsls	r4, r2, #29
 800fc2a:	d5ec      	bpl.n	800fc06 <rcl_validate_topic_name+0xc6>
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	6032      	str	r2, [r6, #0]
 800fc30:	2f00      	cmp	r7, #0
 800fc32:	d0d1      	beq.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc34:	603b      	str	r3, [r7, #0]
 800fc36:	2000      	movs	r0, #0
 800fc38:	e7aa      	b.n	800fb90 <rcl_validate_topic_name+0x50>
 800fc3a:	200b      	movs	r0, #11
 800fc3c:	4770      	bx	lr
 800fc3e:	2304      	movs	r3, #4
 800fc40:	6033      	str	r3, [r6, #0]
 800fc42:	2f00      	cmp	r7, #0
 800fc44:	d1a2      	bne.n	800fb8c <rcl_validate_topic_name+0x4c>
 800fc46:	e7c7      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc48:	200b      	movs	r0, #11
 800fc4a:	e7a1      	b.n	800fb90 <rcl_validate_topic_name+0x50>
 800fc4c:	2309      	movs	r3, #9
 800fc4e:	6033      	str	r3, [r6, #0]
 800fc50:	2f00      	cmp	r7, #0
 800fc52:	d1c0      	bne.n	800fbd6 <rcl_validate_topic_name+0x96>
 800fc54:	e7c0      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc56:	2900      	cmp	r1, #0
 800fc58:	d0ca      	beq.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fc5a:	2306      	movs	r3, #6
 800fc5c:	6033      	str	r3, [r6, #0]
 800fc5e:	2f00      	cmp	r7, #0
 800fc60:	d1b9      	bne.n	800fbd6 <rcl_validate_topic_name+0x96>
 800fc62:	e7b9      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc64:	2c00      	cmp	r4, #0
 800fc66:	d0c3      	beq.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fc68:	2308      	movs	r3, #8
 800fc6a:	6033      	str	r3, [r6, #0]
 800fc6c:	2f00      	cmp	r7, #0
 800fc6e:	d1b2      	bne.n	800fbd6 <rcl_validate_topic_name+0x96>
 800fc70:	e7b2      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc72:	2c00      	cmp	r4, #0
 800fc74:	d1f8      	bne.n	800fc68 <rcl_validate_topic_name+0x128>
 800fc76:	460b      	mov	r3, r1
 800fc78:	2401      	movs	r4, #1
 800fc7a:	e7b9      	b.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fc7c:	2400      	movs	r4, #0
 800fc7e:	e7b7      	b.n	800fbf0 <rcl_validate_topic_name+0xb0>
 800fc80:	2000      	movs	r0, #0
 800fc82:	6030      	str	r0, [r6, #0]
 800fc84:	e784      	b.n	800fb90 <rcl_validate_topic_name+0x50>
 800fc86:	2205      	movs	r2, #5
 800fc88:	6032      	str	r2, [r6, #0]
 800fc8a:	2f00      	cmp	r7, #0
 800fc8c:	d1d2      	bne.n	800fc34 <rcl_validate_topic_name+0xf4>
 800fc8e:	e7a3      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fc90:	2c00      	cmp	r4, #0
 800fc92:	bf14      	ite	ne
 800fc94:	2308      	movne	r3, #8
 800fc96:	2303      	moveq	r3, #3
 800fc98:	6033      	str	r3, [r6, #0]
 800fc9a:	2f00      	cmp	r7, #0
 800fc9c:	d19b      	bne.n	800fbd6 <rcl_validate_topic_name+0x96>
 800fc9e:	e79b      	b.n	800fbd8 <rcl_validate_topic_name+0x98>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e00a      	b.n	800fcba <rcl_validate_topic_name+0x17a>
 800fca4:	2c01      	cmp	r4, #1
 800fca6:	d013      	beq.n	800fcd0 <rcl_validate_topic_name+0x190>
 800fca8:	4299      	cmp	r1, r3
 800fcaa:	f104 0401 	add.w	r4, r4, #1
 800fcae:	f105 0501 	add.w	r5, r5, #1
 800fcb2:	f103 0201 	add.w	r2, r3, #1
 800fcb6:	d9e3      	bls.n	800fc80 <rcl_validate_topic_name+0x140>
 800fcb8:	4613      	mov	r3, r2
 800fcba:	45a0      	cmp	r8, r4
 800fcbc:	d0f4      	beq.n	800fca8 <rcl_validate_topic_name+0x168>
 800fcbe:	782a      	ldrb	r2, [r5, #0]
 800fcc0:	2a2f      	cmp	r2, #47	@ 0x2f
 800fcc2:	d1ef      	bne.n	800fca4 <rcl_validate_topic_name+0x164>
 800fcc4:	786a      	ldrb	r2, [r5, #1]
 800fcc6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fcca:	0752      	lsls	r2, r2, #29
 800fccc:	d5ec      	bpl.n	800fca8 <rcl_validate_topic_name+0x168>
 800fcce:	e7ad      	b.n	800fc2c <rcl_validate_topic_name+0xec>
 800fcd0:	2307      	movs	r3, #7
 800fcd2:	6033      	str	r3, [r6, #0]
 800fcd4:	2f00      	cmp	r7, #0
 800fcd6:	f43f af7f 	beq.w	800fbd8 <rcl_validate_topic_name+0x98>
 800fcda:	603c      	str	r4, [r7, #0]
 800fcdc:	2000      	movs	r0, #0
 800fcde:	e757      	b.n	800fb90 <rcl_validate_topic_name+0x50>
 800fce0:	08012140 	.word	0x08012140

0800fce4 <on_status>:
 800fce4:	b082      	sub	sp, #8
 800fce6:	b002      	add	sp, #8
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop

0800fcec <on_topic>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4a22      	ldr	r2, [pc, #136]	@ (800fd7c <on_topic+0x90>)
 800fcf2:	b094      	sub	sp, #80	@ 0x50
 800fcf4:	6812      	ldr	r2, [r2, #0]
 800fcf6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800fcf8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800fcfc:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800fd00:	b3c2      	cbz	r2, 800fd74 <on_topic+0x88>
 800fd02:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800fd06:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800fd0a:	e001      	b.n	800fd10 <on_topic+0x24>
 800fd0c:	6852      	ldr	r2, [r2, #4]
 800fd0e:	b38a      	cbz	r2, 800fd74 <on_topic+0x88>
 800fd10:	6894      	ldr	r4, [r2, #8]
 800fd12:	8aa3      	ldrh	r3, [r4, #20]
 800fd14:	428b      	cmp	r3, r1
 800fd16:	d1f9      	bne.n	800fd0c <on_topic+0x20>
 800fd18:	7da3      	ldrb	r3, [r4, #22]
 800fd1a:	4283      	cmp	r3, r0
 800fd1c:	d1f6      	bne.n	800fd0c <on_topic+0x20>
 800fd1e:	2248      	movs	r2, #72	@ 0x48
 800fd20:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fd24:	4668      	mov	r0, sp
 800fd26:	f000 fdba 	bl	801089e <memcpy>
 800fd2a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800fd2e:	cb0c      	ldmia	r3, {r2, r3}
 800fd30:	4620      	mov	r0, r4
 800fd32:	f7f9 f939 	bl	8008fa8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800fd36:	4607      	mov	r7, r0
 800fd38:	b1e0      	cbz	r0, 800fd74 <on_topic+0x88>
 800fd3a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800fd3e:	4632      	mov	r2, r6
 800fd40:	4628      	mov	r0, r5
 800fd42:	f108 0110 	add.w	r1, r8, #16
 800fd46:	f7fe f831 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800fd4a:	b930      	cbnz	r0, 800fd5a <on_topic+0x6e>
 800fd4c:	480c      	ldr	r0, [pc, #48]	@ (800fd80 <on_topic+0x94>)
 800fd4e:	4639      	mov	r1, r7
 800fd50:	b014      	add	sp, #80	@ 0x50
 800fd52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd56:	f7fd ba97 	b.w	800d288 <put_memory>
 800fd5a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 800fd5e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 800fd62:	f7fd ff4d 	bl	800dc00 <rmw_uros_epoch_nanos>
 800fd66:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 800fd6a:	2305      	movs	r3, #5
 800fd6c:	e942 0102 	strd	r0, r1, [r2, #-8]
 800fd70:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 800fd74:	b014      	add	sp, #80	@ 0x50
 800fd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7a:	bf00      	nop
 800fd7c:	2000dae4 	.word	0x2000dae4
 800fd80:	2000dad4 	.word	0x2000dad4

0800fd84 <on_request>:
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	4823      	ldr	r0, [pc, #140]	@ (800fe18 <on_request+0x94>)
 800fd8a:	b094      	sub	sp, #80	@ 0x50
 800fd8c:	6800      	ldr	r0, [r0, #0]
 800fd8e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800fd90:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800fd94:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d03b      	beq.n	800fe12 <on_request+0x8e>
 800fd9a:	461d      	mov	r5, r3
 800fd9c:	e001      	b.n	800fda2 <on_request+0x1e>
 800fd9e:	6840      	ldr	r0, [r0, #4]
 800fda0:	b3b8      	cbz	r0, 800fe12 <on_request+0x8e>
 800fda2:	6884      	ldr	r4, [r0, #8]
 800fda4:	8b21      	ldrh	r1, [r4, #24]
 800fda6:	4291      	cmp	r1, r2
 800fda8:	d1f9      	bne.n	800fd9e <on_request+0x1a>
 800fdaa:	2248      	movs	r2, #72	@ 0x48
 800fdac:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800fdb0:	4668      	mov	r0, sp
 800fdb2:	f000 fd74 	bl	801089e <memcpy>
 800fdb6:	f104 0320 	add.w	r3, r4, #32
 800fdba:	cb0c      	ldmia	r3, {r2, r3}
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f7f9 f8f3 	bl	8008fa8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800fdc2:	4680      	mov	r8, r0
 800fdc4:	b328      	cbz	r0, 800fe12 <on_request+0x8e>
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800fdcc:	4632      	mov	r2, r6
 800fdce:	f107 0110 	add.w	r1, r7, #16
 800fdd2:	f7fd ffeb 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800fdd6:	b930      	cbnz	r0, 800fde6 <on_request+0x62>
 800fdd8:	4810      	ldr	r0, [pc, #64]	@ (800fe1c <on_request+0x98>)
 800fdda:	4641      	mov	r1, r8
 800fddc:	b014      	add	sp, #80	@ 0x50
 800fdde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fde2:	f7fd ba51 	b.w	800d288 <put_memory>
 800fde6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fde8:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 800fdec:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800fdf0:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800fdf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fdfc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe00:	f7fd fefe 	bl	800dc00 <rmw_uros_epoch_nanos>
 800fe04:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800fe08:	2303      	movs	r3, #3
 800fe0a:	e942 0102 	strd	r0, r1, [r2, #-8]
 800fe0e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800fe12:	b014      	add	sp, #80	@ 0x50
 800fe14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe18:	2000dab4 	.word	0x2000dab4
 800fe1c:	2000dad4 	.word	0x2000dad4

0800fe20 <on_reply>:
 800fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe24:	4821      	ldr	r0, [pc, #132]	@ (800feac <on_reply+0x8c>)
 800fe26:	b094      	sub	sp, #80	@ 0x50
 800fe28:	6800      	ldr	r0, [r0, #0]
 800fe2a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800fe2c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800fe30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fe32:	b3b8      	cbz	r0, 800fea4 <on_reply+0x84>
 800fe34:	461d      	mov	r5, r3
 800fe36:	e001      	b.n	800fe3c <on_reply+0x1c>
 800fe38:	6840      	ldr	r0, [r0, #4]
 800fe3a:	b398      	cbz	r0, 800fea4 <on_reply+0x84>
 800fe3c:	6884      	ldr	r4, [r0, #8]
 800fe3e:	8b21      	ldrh	r1, [r4, #24]
 800fe40:	4291      	cmp	r1, r2
 800fe42:	d1f9      	bne.n	800fe38 <on_reply+0x18>
 800fe44:	2248      	movs	r2, #72	@ 0x48
 800fe46:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800fe4a:	4668      	mov	r0, sp
 800fe4c:	f000 fd27 	bl	801089e <memcpy>
 800fe50:	f104 0320 	add.w	r3, r4, #32
 800fe54:	cb0c      	ldmia	r3, {r2, r3}
 800fe56:	4620      	mov	r0, r4
 800fe58:	f7f9 f8a6 	bl	8008fa8 <rmw_uxrce_get_static_input_buffer_for_entity>
 800fe5c:	4680      	mov	r8, r0
 800fe5e:	b308      	cbz	r0, 800fea4 <on_reply+0x84>
 800fe60:	4638      	mov	r0, r7
 800fe62:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800fe66:	4632      	mov	r2, r6
 800fe68:	f107 0110 	add.w	r1, r7, #16
 800fe6c:	f7fd ff9e 	bl	800ddac <ucdr_deserialize_array_uint8_t>
 800fe70:	b930      	cbnz	r0, 800fe80 <on_reply+0x60>
 800fe72:	480f      	ldr	r0, [pc, #60]	@ (800feb0 <on_reply+0x90>)
 800fe74:	4641      	mov	r1, r8
 800fe76:	b014      	add	sp, #80	@ 0x50
 800fe78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7c:	f7fd ba04 	b.w	800d288 <put_memory>
 800fe80:	2200      	movs	r2, #0
 800fe82:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 800fe86:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800fe8a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800fe8e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 800fe92:	f7fd feb5 	bl	800dc00 <rmw_uros_epoch_nanos>
 800fe96:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800fe9a:	2304      	movs	r3, #4
 800fe9c:	e942 0102 	strd	r0, r1, [r2, #-8]
 800fea0:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800fea4:	b014      	add	sp, #80	@ 0x50
 800fea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feaa:	bf00      	nop
 800feac:	200091c8 	.word	0x200091c8
 800feb0:	2000dad4 	.word	0x2000dad4

0800feb4 <rmw_destroy_client>:
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	b128      	cbz	r0, 800fec4 <rmw_destroy_client+0x10>
 800feb8:	4604      	mov	r4, r0
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	460d      	mov	r5, r1
 800febe:	f7f9 f943 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800fec2:	b910      	cbnz	r0, 800feca <rmw_destroy_client+0x16>
 800fec4:	2401      	movs	r4, #1
 800fec6:	4620      	mov	r0, r4
 800fec8:	bd70      	pop	{r4, r5, r6, pc}
 800feca:	6863      	ldr	r3, [r4, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d0f9      	beq.n	800fec4 <rmw_destroy_client+0x10>
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	d0f7      	beq.n	800fec4 <rmw_destroy_client+0x10>
 800fed4:	6828      	ldr	r0, [r5, #0]
 800fed6:	f7f9 f937 	bl	8009148 <is_uxrce_rmw_identifier_valid>
 800feda:	2800      	cmp	r0, #0
 800fedc:	d0f2      	beq.n	800fec4 <rmw_destroy_client+0x10>
 800fede:	686e      	ldr	r6, [r5, #4]
 800fee0:	2e00      	cmp	r6, #0
 800fee2:	d0ef      	beq.n	800fec4 <rmw_destroy_client+0x10>
 800fee4:	6864      	ldr	r4, [r4, #4]
 800fee6:	6932      	ldr	r2, [r6, #16]
 800fee8:	6920      	ldr	r0, [r4, #16]
 800feea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800feee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fef2:	6819      	ldr	r1, [r3, #0]
 800fef4:	f7fe fe38 	bl	800eb68 <uxr_buffer_cancel_data>
 800fef8:	4602      	mov	r2, r0
 800fefa:	6920      	ldr	r0, [r4, #16]
 800fefc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ff00:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ff04:	f7f9 f8a0 	bl	8009048 <run_xrce_session>
 800ff08:	6920      	ldr	r0, [r4, #16]
 800ff0a:	6932      	ldr	r2, [r6, #16]
 800ff0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ff10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff14:	6819      	ldr	r1, [r3, #0]
 800ff16:	f7f9 f995 	bl	8009244 <uxr_buffer_delete_entity>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	6920      	ldr	r0, [r4, #16]
 800ff1e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ff22:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ff26:	f7f9 f88f 	bl	8009048 <run_xrce_session>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	bf14      	ite	ne
 800ff30:	2400      	movne	r4, #0
 800ff32:	2402      	moveq	r4, #2
 800ff34:	f7f9 f816 	bl	8008f64 <rmw_uxrce_fini_client_memory>
 800ff38:	e7c5      	b.n	800fec6 <rmw_destroy_client+0x12>
 800ff3a:	bf00      	nop

0800ff3c <rmw_create_guard_condition>:
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	4605      	mov	r5, r0
 800ff40:	4807      	ldr	r0, [pc, #28]	@ (800ff60 <rmw_create_guard_condition+0x24>)
 800ff42:	f7fd f991 	bl	800d268 <get_memory>
 800ff46:	b148      	cbz	r0, 800ff5c <rmw_create_guard_condition+0x20>
 800ff48:	6884      	ldr	r4, [r0, #8]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	7423      	strb	r3, [r4, #16]
 800ff4e:	61e5      	str	r5, [r4, #28]
 800ff50:	f7fd f9ae 	bl	800d2b0 <rmw_get_implementation_identifier>
 800ff54:	e9c4 0405 	strd	r0, r4, [r4, #20]
 800ff58:	f104 0014 	add.w	r0, r4, #20
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	bf00      	nop
 800ff60:	2000da74 	.word	0x2000da74

0800ff64 <rmw_destroy_guard_condition>:
 800ff64:	b508      	push	{r3, lr}
 800ff66:	4b08      	ldr	r3, [pc, #32]	@ (800ff88 <rmw_destroy_guard_condition+0x24>)
 800ff68:	6819      	ldr	r1, [r3, #0]
 800ff6a:	b911      	cbnz	r1, 800ff72 <rmw_destroy_guard_condition+0xe>
 800ff6c:	e00a      	b.n	800ff84 <rmw_destroy_guard_condition+0x20>
 800ff6e:	6849      	ldr	r1, [r1, #4]
 800ff70:	b141      	cbz	r1, 800ff84 <rmw_destroy_guard_condition+0x20>
 800ff72:	688b      	ldr	r3, [r1, #8]
 800ff74:	3314      	adds	r3, #20
 800ff76:	4298      	cmp	r0, r3
 800ff78:	d1f9      	bne.n	800ff6e <rmw_destroy_guard_condition+0xa>
 800ff7a:	4803      	ldr	r0, [pc, #12]	@ (800ff88 <rmw_destroy_guard_condition+0x24>)
 800ff7c:	f7fd f984 	bl	800d288 <put_memory>
 800ff80:	2000      	movs	r0, #0
 800ff82:	bd08      	pop	{r3, pc}
 800ff84:	2001      	movs	r0, #1
 800ff86:	bd08      	pop	{r3, pc}
 800ff88:	2000da74 	.word	0x2000da74

0800ff8c <calloc>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	@ (800ff98 <calloc+0xc>)
 800ff8e:	460a      	mov	r2, r1
 800ff90:	4601      	mov	r1, r0
 800ff92:	6818      	ldr	r0, [r3, #0]
 800ff94:	f000 b802 	b.w	800ff9c <_calloc_r>
 800ff98:	200001e4 	.word	0x200001e4

0800ff9c <_calloc_r>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	fba1 5402 	umull	r5, r4, r1, r2
 800ffa2:	b93c      	cbnz	r4, 800ffb4 <_calloc_r+0x18>
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	f000 f887 	bl	80100b8 <_malloc_r>
 800ffaa:	4606      	mov	r6, r0
 800ffac:	b928      	cbnz	r0, 800ffba <_calloc_r+0x1e>
 800ffae:	2600      	movs	r6, #0
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	bd70      	pop	{r4, r5, r6, pc}
 800ffb4:	220c      	movs	r2, #12
 800ffb6:	6002      	str	r2, [r0, #0]
 800ffb8:	e7f9      	b.n	800ffae <_calloc_r+0x12>
 800ffba:	462a      	mov	r2, r5
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f000 fba5 	bl	801070c <memset>
 800ffc2:	e7f5      	b.n	800ffb0 <_calloc_r+0x14>

0800ffc4 <getenv>:
 800ffc4:	b507      	push	{r0, r1, r2, lr}
 800ffc6:	4b04      	ldr	r3, [pc, #16]	@ (800ffd8 <getenv+0x14>)
 800ffc8:	4601      	mov	r1, r0
 800ffca:	aa01      	add	r2, sp, #4
 800ffcc:	6818      	ldr	r0, [r3, #0]
 800ffce:	f000 f805 	bl	800ffdc <_findenv_r>
 800ffd2:	b003      	add	sp, #12
 800ffd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffd8:	200001e4 	.word	0x200001e4

0800ffdc <_findenv_r>:
 800ffdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010050 <_findenv_r+0x74>
 800ffe4:	4606      	mov	r6, r0
 800ffe6:	4689      	mov	r9, r1
 800ffe8:	4617      	mov	r7, r2
 800ffea:	f000 fc85 	bl	80108f8 <__env_lock>
 800ffee:	f8da 4000 	ldr.w	r4, [sl]
 800fff2:	b134      	cbz	r4, 8010002 <_findenv_r+0x26>
 800fff4:	464b      	mov	r3, r9
 800fff6:	4698      	mov	r8, r3
 800fff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fffc:	b13a      	cbz	r2, 801000e <_findenv_r+0x32>
 800fffe:	2a3d      	cmp	r2, #61	@ 0x3d
 8010000:	d1f9      	bne.n	800fff6 <_findenv_r+0x1a>
 8010002:	4630      	mov	r0, r6
 8010004:	f000 fc7e 	bl	8010904 <__env_unlock>
 8010008:	2000      	movs	r0, #0
 801000a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	eba8 0809 	sub.w	r8, r8, r9
 8010012:	46a3      	mov	fp, r4
 8010014:	f854 0b04 	ldr.w	r0, [r4], #4
 8010018:	2800      	cmp	r0, #0
 801001a:	d0f2      	beq.n	8010002 <_findenv_r+0x26>
 801001c:	4642      	mov	r2, r8
 801001e:	4649      	mov	r1, r9
 8010020:	f000 fb89 	bl	8010736 <strncmp>
 8010024:	2800      	cmp	r0, #0
 8010026:	d1f4      	bne.n	8010012 <_findenv_r+0x36>
 8010028:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801002c:	eb03 0508 	add.w	r5, r3, r8
 8010030:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010034:	2b3d      	cmp	r3, #61	@ 0x3d
 8010036:	d1ec      	bne.n	8010012 <_findenv_r+0x36>
 8010038:	f8da 3000 	ldr.w	r3, [sl]
 801003c:	ebab 0303 	sub.w	r3, fp, r3
 8010040:	109b      	asrs	r3, r3, #2
 8010042:	4630      	mov	r0, r6
 8010044:	603b      	str	r3, [r7, #0]
 8010046:	f000 fc5d 	bl	8010904 <__env_unlock>
 801004a:	1c68      	adds	r0, r5, #1
 801004c:	e7dd      	b.n	801000a <_findenv_r+0x2e>
 801004e:	bf00      	nop
 8010050:	20000000 	.word	0x20000000

08010054 <malloc>:
 8010054:	4b02      	ldr	r3, [pc, #8]	@ (8010060 <malloc+0xc>)
 8010056:	4601      	mov	r1, r0
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	f000 b82d 	b.w	80100b8 <_malloc_r>
 801005e:	bf00      	nop
 8010060:	200001e4 	.word	0x200001e4

08010064 <free>:
 8010064:	4b02      	ldr	r3, [pc, #8]	@ (8010070 <free+0xc>)
 8010066:	4601      	mov	r1, r0
 8010068:	6818      	ldr	r0, [r3, #0]
 801006a:	f000 bc51 	b.w	8010910 <_free_r>
 801006e:	bf00      	nop
 8010070:	200001e4 	.word	0x200001e4

08010074 <sbrk_aligned>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	4e0f      	ldr	r6, [pc, #60]	@ (80100b4 <sbrk_aligned+0x40>)
 8010078:	460c      	mov	r4, r1
 801007a:	6831      	ldr	r1, [r6, #0]
 801007c:	4605      	mov	r5, r0
 801007e:	b911      	cbnz	r1, 8010086 <sbrk_aligned+0x12>
 8010080:	f000 fbb6 	bl	80107f0 <_sbrk_r>
 8010084:	6030      	str	r0, [r6, #0]
 8010086:	4621      	mov	r1, r4
 8010088:	4628      	mov	r0, r5
 801008a:	f000 fbb1 	bl	80107f0 <_sbrk_r>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	d103      	bne.n	801009a <sbrk_aligned+0x26>
 8010092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010096:	4620      	mov	r0, r4
 8010098:	bd70      	pop	{r4, r5, r6, pc}
 801009a:	1cc4      	adds	r4, r0, #3
 801009c:	f024 0403 	bic.w	r4, r4, #3
 80100a0:	42a0      	cmp	r0, r4
 80100a2:	d0f8      	beq.n	8010096 <sbrk_aligned+0x22>
 80100a4:	1a21      	subs	r1, r4, r0
 80100a6:	4628      	mov	r0, r5
 80100a8:	f000 fba2 	bl	80107f0 <_sbrk_r>
 80100ac:	3001      	adds	r0, #1
 80100ae:	d1f2      	bne.n	8010096 <sbrk_aligned+0x22>
 80100b0:	e7ef      	b.n	8010092 <sbrk_aligned+0x1e>
 80100b2:	bf00      	nop
 80100b4:	2000dc28 	.word	0x2000dc28

080100b8 <_malloc_r>:
 80100b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100bc:	1ccd      	adds	r5, r1, #3
 80100be:	f025 0503 	bic.w	r5, r5, #3
 80100c2:	3508      	adds	r5, #8
 80100c4:	2d0c      	cmp	r5, #12
 80100c6:	bf38      	it	cc
 80100c8:	250c      	movcc	r5, #12
 80100ca:	2d00      	cmp	r5, #0
 80100cc:	4606      	mov	r6, r0
 80100ce:	db01      	blt.n	80100d4 <_malloc_r+0x1c>
 80100d0:	42a9      	cmp	r1, r5
 80100d2:	d904      	bls.n	80100de <_malloc_r+0x26>
 80100d4:	230c      	movs	r3, #12
 80100d6:	6033      	str	r3, [r6, #0]
 80100d8:	2000      	movs	r0, #0
 80100da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101b4 <_malloc_r+0xfc>
 80100e2:	f000 f869 	bl	80101b8 <__malloc_lock>
 80100e6:	f8d8 3000 	ldr.w	r3, [r8]
 80100ea:	461c      	mov	r4, r3
 80100ec:	bb44      	cbnz	r4, 8010140 <_malloc_r+0x88>
 80100ee:	4629      	mov	r1, r5
 80100f0:	4630      	mov	r0, r6
 80100f2:	f7ff ffbf 	bl	8010074 <sbrk_aligned>
 80100f6:	1c43      	adds	r3, r0, #1
 80100f8:	4604      	mov	r4, r0
 80100fa:	d158      	bne.n	80101ae <_malloc_r+0xf6>
 80100fc:	f8d8 4000 	ldr.w	r4, [r8]
 8010100:	4627      	mov	r7, r4
 8010102:	2f00      	cmp	r7, #0
 8010104:	d143      	bne.n	801018e <_malloc_r+0xd6>
 8010106:	2c00      	cmp	r4, #0
 8010108:	d04b      	beq.n	80101a2 <_malloc_r+0xea>
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	4639      	mov	r1, r7
 801010e:	4630      	mov	r0, r6
 8010110:	eb04 0903 	add.w	r9, r4, r3
 8010114:	f000 fb6c 	bl	80107f0 <_sbrk_r>
 8010118:	4581      	cmp	r9, r0
 801011a:	d142      	bne.n	80101a2 <_malloc_r+0xea>
 801011c:	6821      	ldr	r1, [r4, #0]
 801011e:	1a6d      	subs	r5, r5, r1
 8010120:	4629      	mov	r1, r5
 8010122:	4630      	mov	r0, r6
 8010124:	f7ff ffa6 	bl	8010074 <sbrk_aligned>
 8010128:	3001      	adds	r0, #1
 801012a:	d03a      	beq.n	80101a2 <_malloc_r+0xea>
 801012c:	6823      	ldr	r3, [r4, #0]
 801012e:	442b      	add	r3, r5
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	f8d8 3000 	ldr.w	r3, [r8]
 8010136:	685a      	ldr	r2, [r3, #4]
 8010138:	bb62      	cbnz	r2, 8010194 <_malloc_r+0xdc>
 801013a:	f8c8 7000 	str.w	r7, [r8]
 801013e:	e00f      	b.n	8010160 <_malloc_r+0xa8>
 8010140:	6822      	ldr	r2, [r4, #0]
 8010142:	1b52      	subs	r2, r2, r5
 8010144:	d420      	bmi.n	8010188 <_malloc_r+0xd0>
 8010146:	2a0b      	cmp	r2, #11
 8010148:	d917      	bls.n	801017a <_malloc_r+0xc2>
 801014a:	1961      	adds	r1, r4, r5
 801014c:	42a3      	cmp	r3, r4
 801014e:	6025      	str	r5, [r4, #0]
 8010150:	bf18      	it	ne
 8010152:	6059      	strne	r1, [r3, #4]
 8010154:	6863      	ldr	r3, [r4, #4]
 8010156:	bf08      	it	eq
 8010158:	f8c8 1000 	streq.w	r1, [r8]
 801015c:	5162      	str	r2, [r4, r5]
 801015e:	604b      	str	r3, [r1, #4]
 8010160:	4630      	mov	r0, r6
 8010162:	f000 f82f 	bl	80101c4 <__malloc_unlock>
 8010166:	f104 000b 	add.w	r0, r4, #11
 801016a:	1d23      	adds	r3, r4, #4
 801016c:	f020 0007 	bic.w	r0, r0, #7
 8010170:	1ac2      	subs	r2, r0, r3
 8010172:	bf1c      	itt	ne
 8010174:	1a1b      	subne	r3, r3, r0
 8010176:	50a3      	strne	r3, [r4, r2]
 8010178:	e7af      	b.n	80100da <_malloc_r+0x22>
 801017a:	6862      	ldr	r2, [r4, #4]
 801017c:	42a3      	cmp	r3, r4
 801017e:	bf0c      	ite	eq
 8010180:	f8c8 2000 	streq.w	r2, [r8]
 8010184:	605a      	strne	r2, [r3, #4]
 8010186:	e7eb      	b.n	8010160 <_malloc_r+0xa8>
 8010188:	4623      	mov	r3, r4
 801018a:	6864      	ldr	r4, [r4, #4]
 801018c:	e7ae      	b.n	80100ec <_malloc_r+0x34>
 801018e:	463c      	mov	r4, r7
 8010190:	687f      	ldr	r7, [r7, #4]
 8010192:	e7b6      	b.n	8010102 <_malloc_r+0x4a>
 8010194:	461a      	mov	r2, r3
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	42a3      	cmp	r3, r4
 801019a:	d1fb      	bne.n	8010194 <_malloc_r+0xdc>
 801019c:	2300      	movs	r3, #0
 801019e:	6053      	str	r3, [r2, #4]
 80101a0:	e7de      	b.n	8010160 <_malloc_r+0xa8>
 80101a2:	230c      	movs	r3, #12
 80101a4:	6033      	str	r3, [r6, #0]
 80101a6:	4630      	mov	r0, r6
 80101a8:	f000 f80c 	bl	80101c4 <__malloc_unlock>
 80101ac:	e794      	b.n	80100d8 <_malloc_r+0x20>
 80101ae:	6005      	str	r5, [r0, #0]
 80101b0:	e7d6      	b.n	8010160 <_malloc_r+0xa8>
 80101b2:	bf00      	nop
 80101b4:	2000dc2c 	.word	0x2000dc2c

080101b8 <__malloc_lock>:
 80101b8:	4801      	ldr	r0, [pc, #4]	@ (80101c0 <__malloc_lock+0x8>)
 80101ba:	f000 bb66 	b.w	801088a <__retarget_lock_acquire_recursive>
 80101be:	bf00      	nop
 80101c0:	2000dd71 	.word	0x2000dd71

080101c4 <__malloc_unlock>:
 80101c4:	4801      	ldr	r0, [pc, #4]	@ (80101cc <__malloc_unlock+0x8>)
 80101c6:	f000 bb61 	b.w	801088c <__retarget_lock_release_recursive>
 80101ca:	bf00      	nop
 80101cc:	2000dd71 	.word	0x2000dd71

080101d0 <srand>:
 80101d0:	b538      	push	{r3, r4, r5, lr}
 80101d2:	4b10      	ldr	r3, [pc, #64]	@ (8010214 <srand+0x44>)
 80101d4:	681d      	ldr	r5, [r3, #0]
 80101d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80101d8:	4604      	mov	r4, r0
 80101da:	b9b3      	cbnz	r3, 801020a <srand+0x3a>
 80101dc:	2018      	movs	r0, #24
 80101de:	f7ff ff39 	bl	8010054 <malloc>
 80101e2:	4602      	mov	r2, r0
 80101e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80101e6:	b920      	cbnz	r0, 80101f2 <srand+0x22>
 80101e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <srand+0x48>)
 80101ea:	480c      	ldr	r0, [pc, #48]	@ (801021c <srand+0x4c>)
 80101ec:	2146      	movs	r1, #70	@ 0x46
 80101ee:	f000 fb65 	bl	80108bc <__assert_func>
 80101f2:	490b      	ldr	r1, [pc, #44]	@ (8010220 <srand+0x50>)
 80101f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010224 <srand+0x54>)
 80101f6:	e9c0 1300 	strd	r1, r3, [r0]
 80101fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010228 <srand+0x58>)
 80101fc:	6083      	str	r3, [r0, #8]
 80101fe:	230b      	movs	r3, #11
 8010200:	8183      	strh	r3, [r0, #12]
 8010202:	2100      	movs	r1, #0
 8010204:	2001      	movs	r0, #1
 8010206:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801020a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801020c:	2200      	movs	r2, #0
 801020e:	611c      	str	r4, [r3, #16]
 8010210:	615a      	str	r2, [r3, #20]
 8010212:	bd38      	pop	{r3, r4, r5, pc}
 8010214:	200001e4 	.word	0x200001e4
 8010218:	080120d0 	.word	0x080120d0
 801021c:	080120e7 	.word	0x080120e7
 8010220:	abcd330e 	.word	0xabcd330e
 8010224:	e66d1234 	.word	0xe66d1234
 8010228:	0005deec 	.word	0x0005deec

0801022c <rand>:
 801022c:	4b16      	ldr	r3, [pc, #88]	@ (8010288 <rand+0x5c>)
 801022e:	b510      	push	{r4, lr}
 8010230:	681c      	ldr	r4, [r3, #0]
 8010232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010234:	b9b3      	cbnz	r3, 8010264 <rand+0x38>
 8010236:	2018      	movs	r0, #24
 8010238:	f7ff ff0c 	bl	8010054 <malloc>
 801023c:	4602      	mov	r2, r0
 801023e:	6320      	str	r0, [r4, #48]	@ 0x30
 8010240:	b920      	cbnz	r0, 801024c <rand+0x20>
 8010242:	4b12      	ldr	r3, [pc, #72]	@ (801028c <rand+0x60>)
 8010244:	4812      	ldr	r0, [pc, #72]	@ (8010290 <rand+0x64>)
 8010246:	2152      	movs	r1, #82	@ 0x52
 8010248:	f000 fb38 	bl	80108bc <__assert_func>
 801024c:	4911      	ldr	r1, [pc, #68]	@ (8010294 <rand+0x68>)
 801024e:	4b12      	ldr	r3, [pc, #72]	@ (8010298 <rand+0x6c>)
 8010250:	e9c0 1300 	strd	r1, r3, [r0]
 8010254:	4b11      	ldr	r3, [pc, #68]	@ (801029c <rand+0x70>)
 8010256:	6083      	str	r3, [r0, #8]
 8010258:	230b      	movs	r3, #11
 801025a:	8183      	strh	r3, [r0, #12]
 801025c:	2100      	movs	r1, #0
 801025e:	2001      	movs	r0, #1
 8010260:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010264:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010266:	480e      	ldr	r0, [pc, #56]	@ (80102a0 <rand+0x74>)
 8010268:	690b      	ldr	r3, [r1, #16]
 801026a:	694c      	ldr	r4, [r1, #20]
 801026c:	4a0d      	ldr	r2, [pc, #52]	@ (80102a4 <rand+0x78>)
 801026e:	4358      	muls	r0, r3
 8010270:	fb02 0004 	mla	r0, r2, r4, r0
 8010274:	fba3 3202 	umull	r3, r2, r3, r2
 8010278:	3301      	adds	r3, #1
 801027a:	eb40 0002 	adc.w	r0, r0, r2
 801027e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010282:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010286:	bd10      	pop	{r4, pc}
 8010288:	200001e4 	.word	0x200001e4
 801028c:	080120d0 	.word	0x080120d0
 8010290:	080120e7 	.word	0x080120e7
 8010294:	abcd330e 	.word	0xabcd330e
 8010298:	e66d1234 	.word	0xe66d1234
 801029c:	0005deec 	.word	0x0005deec
 80102a0:	5851f42d 	.word	0x5851f42d
 80102a4:	4c957f2d 	.word	0x4c957f2d

080102a8 <realloc>:
 80102a8:	4b02      	ldr	r3, [pc, #8]	@ (80102b4 <realloc+0xc>)
 80102aa:	460a      	mov	r2, r1
 80102ac:	4601      	mov	r1, r0
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	f000 b802 	b.w	80102b8 <_realloc_r>
 80102b4:	200001e4 	.word	0x200001e4

080102b8 <_realloc_r>:
 80102b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102bc:	4680      	mov	r8, r0
 80102be:	4615      	mov	r5, r2
 80102c0:	460c      	mov	r4, r1
 80102c2:	b921      	cbnz	r1, 80102ce <_realloc_r+0x16>
 80102c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c8:	4611      	mov	r1, r2
 80102ca:	f7ff bef5 	b.w	80100b8 <_malloc_r>
 80102ce:	b92a      	cbnz	r2, 80102dc <_realloc_r+0x24>
 80102d0:	f000 fb1e 	bl	8010910 <_free_r>
 80102d4:	2400      	movs	r4, #0
 80102d6:	4620      	mov	r0, r4
 80102d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102dc:	f000 fb62 	bl	80109a4 <_malloc_usable_size_r>
 80102e0:	4285      	cmp	r5, r0
 80102e2:	4606      	mov	r6, r0
 80102e4:	d802      	bhi.n	80102ec <_realloc_r+0x34>
 80102e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80102ea:	d8f4      	bhi.n	80102d6 <_realloc_r+0x1e>
 80102ec:	4629      	mov	r1, r5
 80102ee:	4640      	mov	r0, r8
 80102f0:	f7ff fee2 	bl	80100b8 <_malloc_r>
 80102f4:	4607      	mov	r7, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d0ec      	beq.n	80102d4 <_realloc_r+0x1c>
 80102fa:	42b5      	cmp	r5, r6
 80102fc:	462a      	mov	r2, r5
 80102fe:	4621      	mov	r1, r4
 8010300:	bf28      	it	cs
 8010302:	4632      	movcs	r2, r6
 8010304:	f000 facb 	bl	801089e <memcpy>
 8010308:	4621      	mov	r1, r4
 801030a:	4640      	mov	r0, r8
 801030c:	f000 fb00 	bl	8010910 <_free_r>
 8010310:	463c      	mov	r4, r7
 8010312:	e7e0      	b.n	80102d6 <_realloc_r+0x1e>

08010314 <_strtoul_l.constprop.0>:
 8010314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010318:	4e34      	ldr	r6, [pc, #208]	@ (80103ec <_strtoul_l.constprop.0+0xd8>)
 801031a:	4686      	mov	lr, r0
 801031c:	460d      	mov	r5, r1
 801031e:	4628      	mov	r0, r5
 8010320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010324:	5d37      	ldrb	r7, [r6, r4]
 8010326:	f017 0708 	ands.w	r7, r7, #8
 801032a:	d1f8      	bne.n	801031e <_strtoul_l.constprop.0+0xa>
 801032c:	2c2d      	cmp	r4, #45	@ 0x2d
 801032e:	d12f      	bne.n	8010390 <_strtoul_l.constprop.0+0x7c>
 8010330:	782c      	ldrb	r4, [r5, #0]
 8010332:	2701      	movs	r7, #1
 8010334:	1c85      	adds	r5, r0, #2
 8010336:	f033 0010 	bics.w	r0, r3, #16
 801033a:	d109      	bne.n	8010350 <_strtoul_l.constprop.0+0x3c>
 801033c:	2c30      	cmp	r4, #48	@ 0x30
 801033e:	d12c      	bne.n	801039a <_strtoul_l.constprop.0+0x86>
 8010340:	7828      	ldrb	r0, [r5, #0]
 8010342:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010346:	2858      	cmp	r0, #88	@ 0x58
 8010348:	d127      	bne.n	801039a <_strtoul_l.constprop.0+0x86>
 801034a:	786c      	ldrb	r4, [r5, #1]
 801034c:	2310      	movs	r3, #16
 801034e:	3502      	adds	r5, #2
 8010350:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010354:	2600      	movs	r6, #0
 8010356:	fbb8 f8f3 	udiv	r8, r8, r3
 801035a:	fb03 f908 	mul.w	r9, r3, r8
 801035e:	ea6f 0909 	mvn.w	r9, r9
 8010362:	4630      	mov	r0, r6
 8010364:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010368:	f1bc 0f09 	cmp.w	ip, #9
 801036c:	d81c      	bhi.n	80103a8 <_strtoul_l.constprop.0+0x94>
 801036e:	4664      	mov	r4, ip
 8010370:	42a3      	cmp	r3, r4
 8010372:	dd2a      	ble.n	80103ca <_strtoul_l.constprop.0+0xb6>
 8010374:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010378:	d007      	beq.n	801038a <_strtoul_l.constprop.0+0x76>
 801037a:	4580      	cmp	r8, r0
 801037c:	d322      	bcc.n	80103c4 <_strtoul_l.constprop.0+0xb0>
 801037e:	d101      	bne.n	8010384 <_strtoul_l.constprop.0+0x70>
 8010380:	45a1      	cmp	r9, r4
 8010382:	db1f      	blt.n	80103c4 <_strtoul_l.constprop.0+0xb0>
 8010384:	fb00 4003 	mla	r0, r0, r3, r4
 8010388:	2601      	movs	r6, #1
 801038a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801038e:	e7e9      	b.n	8010364 <_strtoul_l.constprop.0+0x50>
 8010390:	2c2b      	cmp	r4, #43	@ 0x2b
 8010392:	bf04      	itt	eq
 8010394:	782c      	ldrbeq	r4, [r5, #0]
 8010396:	1c85      	addeq	r5, r0, #2
 8010398:	e7cd      	b.n	8010336 <_strtoul_l.constprop.0+0x22>
 801039a:	2b00      	cmp	r3, #0
 801039c:	d1d8      	bne.n	8010350 <_strtoul_l.constprop.0+0x3c>
 801039e:	2c30      	cmp	r4, #48	@ 0x30
 80103a0:	bf0c      	ite	eq
 80103a2:	2308      	moveq	r3, #8
 80103a4:	230a      	movne	r3, #10
 80103a6:	e7d3      	b.n	8010350 <_strtoul_l.constprop.0+0x3c>
 80103a8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80103ac:	f1bc 0f19 	cmp.w	ip, #25
 80103b0:	d801      	bhi.n	80103b6 <_strtoul_l.constprop.0+0xa2>
 80103b2:	3c37      	subs	r4, #55	@ 0x37
 80103b4:	e7dc      	b.n	8010370 <_strtoul_l.constprop.0+0x5c>
 80103b6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80103ba:	f1bc 0f19 	cmp.w	ip, #25
 80103be:	d804      	bhi.n	80103ca <_strtoul_l.constprop.0+0xb6>
 80103c0:	3c57      	subs	r4, #87	@ 0x57
 80103c2:	e7d5      	b.n	8010370 <_strtoul_l.constprop.0+0x5c>
 80103c4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80103c8:	e7df      	b.n	801038a <_strtoul_l.constprop.0+0x76>
 80103ca:	1c73      	adds	r3, r6, #1
 80103cc:	d106      	bne.n	80103dc <_strtoul_l.constprop.0+0xc8>
 80103ce:	2322      	movs	r3, #34	@ 0x22
 80103d0:	f8ce 3000 	str.w	r3, [lr]
 80103d4:	4630      	mov	r0, r6
 80103d6:	b932      	cbnz	r2, 80103e6 <_strtoul_l.constprop.0+0xd2>
 80103d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103dc:	b107      	cbz	r7, 80103e0 <_strtoul_l.constprop.0+0xcc>
 80103de:	4240      	negs	r0, r0
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	d0f9      	beq.n	80103d8 <_strtoul_l.constprop.0+0xc4>
 80103e4:	b106      	cbz	r6, 80103e8 <_strtoul_l.constprop.0+0xd4>
 80103e6:	1e69      	subs	r1, r5, #1
 80103e8:	6011      	str	r1, [r2, #0]
 80103ea:	e7f5      	b.n	80103d8 <_strtoul_l.constprop.0+0xc4>
 80103ec:	08012140 	.word	0x08012140

080103f0 <strtoul>:
 80103f0:	4613      	mov	r3, r2
 80103f2:	460a      	mov	r2, r1
 80103f4:	4601      	mov	r1, r0
 80103f6:	4802      	ldr	r0, [pc, #8]	@ (8010400 <strtoul+0x10>)
 80103f8:	6800      	ldr	r0, [r0, #0]
 80103fa:	f7ff bf8b 	b.w	8010314 <_strtoul_l.constprop.0>
 80103fe:	bf00      	nop
 8010400:	200001e4 	.word	0x200001e4

08010404 <std>:
 8010404:	2300      	movs	r3, #0
 8010406:	b510      	push	{r4, lr}
 8010408:	4604      	mov	r4, r0
 801040a:	e9c0 3300 	strd	r3, r3, [r0]
 801040e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010412:	6083      	str	r3, [r0, #8]
 8010414:	8181      	strh	r1, [r0, #12]
 8010416:	6643      	str	r3, [r0, #100]	@ 0x64
 8010418:	81c2      	strh	r2, [r0, #14]
 801041a:	6183      	str	r3, [r0, #24]
 801041c:	4619      	mov	r1, r3
 801041e:	2208      	movs	r2, #8
 8010420:	305c      	adds	r0, #92	@ 0x5c
 8010422:	f000 f973 	bl	801070c <memset>
 8010426:	4b0d      	ldr	r3, [pc, #52]	@ (801045c <std+0x58>)
 8010428:	6263      	str	r3, [r4, #36]	@ 0x24
 801042a:	4b0d      	ldr	r3, [pc, #52]	@ (8010460 <std+0x5c>)
 801042c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801042e:	4b0d      	ldr	r3, [pc, #52]	@ (8010464 <std+0x60>)
 8010430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010432:	4b0d      	ldr	r3, [pc, #52]	@ (8010468 <std+0x64>)
 8010434:	6323      	str	r3, [r4, #48]	@ 0x30
 8010436:	4b0d      	ldr	r3, [pc, #52]	@ (801046c <std+0x68>)
 8010438:	6224      	str	r4, [r4, #32]
 801043a:	429c      	cmp	r4, r3
 801043c:	d006      	beq.n	801044c <std+0x48>
 801043e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010442:	4294      	cmp	r4, r2
 8010444:	d002      	beq.n	801044c <std+0x48>
 8010446:	33d0      	adds	r3, #208	@ 0xd0
 8010448:	429c      	cmp	r4, r3
 801044a:	d105      	bne.n	8010458 <std+0x54>
 801044c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010454:	f000 ba18 	b.w	8010888 <__retarget_lock_init_recursive>
 8010458:	bd10      	pop	{r4, pc}
 801045a:	bf00      	nop
 801045c:	08010615 	.word	0x08010615
 8010460:	08010637 	.word	0x08010637
 8010464:	0801066f 	.word	0x0801066f
 8010468:	08010693 	.word	0x08010693
 801046c:	2000dc30 	.word	0x2000dc30

08010470 <stdio_exit_handler>:
 8010470:	4a02      	ldr	r2, [pc, #8]	@ (801047c <stdio_exit_handler+0xc>)
 8010472:	4903      	ldr	r1, [pc, #12]	@ (8010480 <stdio_exit_handler+0x10>)
 8010474:	4803      	ldr	r0, [pc, #12]	@ (8010484 <stdio_exit_handler+0x14>)
 8010476:	f000 b869 	b.w	801054c <_fwalk_sglue>
 801047a:	bf00      	nop
 801047c:	200001d8 	.word	0x200001d8
 8010480:	0801130d 	.word	0x0801130d
 8010484:	200001e8 	.word	0x200001e8

08010488 <cleanup_stdio>:
 8010488:	6841      	ldr	r1, [r0, #4]
 801048a:	4b0c      	ldr	r3, [pc, #48]	@ (80104bc <cleanup_stdio+0x34>)
 801048c:	4299      	cmp	r1, r3
 801048e:	b510      	push	{r4, lr}
 8010490:	4604      	mov	r4, r0
 8010492:	d001      	beq.n	8010498 <cleanup_stdio+0x10>
 8010494:	f000 ff3a 	bl	801130c <_fflush_r>
 8010498:	68a1      	ldr	r1, [r4, #8]
 801049a:	4b09      	ldr	r3, [pc, #36]	@ (80104c0 <cleanup_stdio+0x38>)
 801049c:	4299      	cmp	r1, r3
 801049e:	d002      	beq.n	80104a6 <cleanup_stdio+0x1e>
 80104a0:	4620      	mov	r0, r4
 80104a2:	f000 ff33 	bl	801130c <_fflush_r>
 80104a6:	68e1      	ldr	r1, [r4, #12]
 80104a8:	4b06      	ldr	r3, [pc, #24]	@ (80104c4 <cleanup_stdio+0x3c>)
 80104aa:	4299      	cmp	r1, r3
 80104ac:	d004      	beq.n	80104b8 <cleanup_stdio+0x30>
 80104ae:	4620      	mov	r0, r4
 80104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b4:	f000 bf2a 	b.w	801130c <_fflush_r>
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	bf00      	nop
 80104bc:	2000dc30 	.word	0x2000dc30
 80104c0:	2000dc98 	.word	0x2000dc98
 80104c4:	2000dd00 	.word	0x2000dd00

080104c8 <global_stdio_init.part.0>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4b0b      	ldr	r3, [pc, #44]	@ (80104f8 <global_stdio_init.part.0+0x30>)
 80104cc:	4c0b      	ldr	r4, [pc, #44]	@ (80104fc <global_stdio_init.part.0+0x34>)
 80104ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010500 <global_stdio_init.part.0+0x38>)
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	4620      	mov	r0, r4
 80104d4:	2200      	movs	r2, #0
 80104d6:	2104      	movs	r1, #4
 80104d8:	f7ff ff94 	bl	8010404 <std>
 80104dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80104e0:	2201      	movs	r2, #1
 80104e2:	2109      	movs	r1, #9
 80104e4:	f7ff ff8e 	bl	8010404 <std>
 80104e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80104ec:	2202      	movs	r2, #2
 80104ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f2:	2112      	movs	r1, #18
 80104f4:	f7ff bf86 	b.w	8010404 <std>
 80104f8:	2000dd68 	.word	0x2000dd68
 80104fc:	2000dc30 	.word	0x2000dc30
 8010500:	08010471 	.word	0x08010471

08010504 <__sfp_lock_acquire>:
 8010504:	4801      	ldr	r0, [pc, #4]	@ (801050c <__sfp_lock_acquire+0x8>)
 8010506:	f000 b9c0 	b.w	801088a <__retarget_lock_acquire_recursive>
 801050a:	bf00      	nop
 801050c:	2000dd72 	.word	0x2000dd72

08010510 <__sfp_lock_release>:
 8010510:	4801      	ldr	r0, [pc, #4]	@ (8010518 <__sfp_lock_release+0x8>)
 8010512:	f000 b9bb 	b.w	801088c <__retarget_lock_release_recursive>
 8010516:	bf00      	nop
 8010518:	2000dd72 	.word	0x2000dd72

0801051c <__sinit>:
 801051c:	b510      	push	{r4, lr}
 801051e:	4604      	mov	r4, r0
 8010520:	f7ff fff0 	bl	8010504 <__sfp_lock_acquire>
 8010524:	6a23      	ldr	r3, [r4, #32]
 8010526:	b11b      	cbz	r3, 8010530 <__sinit+0x14>
 8010528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801052c:	f7ff bff0 	b.w	8010510 <__sfp_lock_release>
 8010530:	4b04      	ldr	r3, [pc, #16]	@ (8010544 <__sinit+0x28>)
 8010532:	6223      	str	r3, [r4, #32]
 8010534:	4b04      	ldr	r3, [pc, #16]	@ (8010548 <__sinit+0x2c>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1f5      	bne.n	8010528 <__sinit+0xc>
 801053c:	f7ff ffc4 	bl	80104c8 <global_stdio_init.part.0>
 8010540:	e7f2      	b.n	8010528 <__sinit+0xc>
 8010542:	bf00      	nop
 8010544:	08010489 	.word	0x08010489
 8010548:	2000dd68 	.word	0x2000dd68

0801054c <_fwalk_sglue>:
 801054c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010550:	4607      	mov	r7, r0
 8010552:	4688      	mov	r8, r1
 8010554:	4614      	mov	r4, r2
 8010556:	2600      	movs	r6, #0
 8010558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801055c:	f1b9 0901 	subs.w	r9, r9, #1
 8010560:	d505      	bpl.n	801056e <_fwalk_sglue+0x22>
 8010562:	6824      	ldr	r4, [r4, #0]
 8010564:	2c00      	cmp	r4, #0
 8010566:	d1f7      	bne.n	8010558 <_fwalk_sglue+0xc>
 8010568:	4630      	mov	r0, r6
 801056a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801056e:	89ab      	ldrh	r3, [r5, #12]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d907      	bls.n	8010584 <_fwalk_sglue+0x38>
 8010574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010578:	3301      	adds	r3, #1
 801057a:	d003      	beq.n	8010584 <_fwalk_sglue+0x38>
 801057c:	4629      	mov	r1, r5
 801057e:	4638      	mov	r0, r7
 8010580:	47c0      	blx	r8
 8010582:	4306      	orrs	r6, r0
 8010584:	3568      	adds	r5, #104	@ 0x68
 8010586:	e7e9      	b.n	801055c <_fwalk_sglue+0x10>

08010588 <iprintf>:
 8010588:	b40f      	push	{r0, r1, r2, r3}
 801058a:	b507      	push	{r0, r1, r2, lr}
 801058c:	4906      	ldr	r1, [pc, #24]	@ (80105a8 <iprintf+0x20>)
 801058e:	ab04      	add	r3, sp, #16
 8010590:	6808      	ldr	r0, [r1, #0]
 8010592:	f853 2b04 	ldr.w	r2, [r3], #4
 8010596:	6881      	ldr	r1, [r0, #8]
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	f000 fb8d 	bl	8010cb8 <_vfiprintf_r>
 801059e:	b003      	add	sp, #12
 80105a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105a4:	b004      	add	sp, #16
 80105a6:	4770      	bx	lr
 80105a8:	200001e4 	.word	0x200001e4

080105ac <sniprintf>:
 80105ac:	b40c      	push	{r2, r3}
 80105ae:	b530      	push	{r4, r5, lr}
 80105b0:	4b17      	ldr	r3, [pc, #92]	@ (8010610 <sniprintf+0x64>)
 80105b2:	1e0c      	subs	r4, r1, #0
 80105b4:	681d      	ldr	r5, [r3, #0]
 80105b6:	b09d      	sub	sp, #116	@ 0x74
 80105b8:	da08      	bge.n	80105cc <sniprintf+0x20>
 80105ba:	238b      	movs	r3, #139	@ 0x8b
 80105bc:	602b      	str	r3, [r5, #0]
 80105be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105c2:	b01d      	add	sp, #116	@ 0x74
 80105c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105c8:	b002      	add	sp, #8
 80105ca:	4770      	bx	lr
 80105cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80105d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80105d4:	bf14      	ite	ne
 80105d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80105da:	4623      	moveq	r3, r4
 80105dc:	9304      	str	r3, [sp, #16]
 80105de:	9307      	str	r3, [sp, #28]
 80105e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105e4:	9002      	str	r0, [sp, #8]
 80105e6:	9006      	str	r0, [sp, #24]
 80105e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80105ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80105ee:	ab21      	add	r3, sp, #132	@ 0x84
 80105f0:	a902      	add	r1, sp, #8
 80105f2:	4628      	mov	r0, r5
 80105f4:	9301      	str	r3, [sp, #4]
 80105f6:	f000 fa39 	bl	8010a6c <_svfiprintf_r>
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	bfbc      	itt	lt
 80105fe:	238b      	movlt	r3, #139	@ 0x8b
 8010600:	602b      	strlt	r3, [r5, #0]
 8010602:	2c00      	cmp	r4, #0
 8010604:	d0dd      	beq.n	80105c2 <sniprintf+0x16>
 8010606:	9b02      	ldr	r3, [sp, #8]
 8010608:	2200      	movs	r2, #0
 801060a:	701a      	strb	r2, [r3, #0]
 801060c:	e7d9      	b.n	80105c2 <sniprintf+0x16>
 801060e:	bf00      	nop
 8010610:	200001e4 	.word	0x200001e4

08010614 <__sread>:
 8010614:	b510      	push	{r4, lr}
 8010616:	460c      	mov	r4, r1
 8010618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801061c:	f000 f8d6 	bl	80107cc <_read_r>
 8010620:	2800      	cmp	r0, #0
 8010622:	bfab      	itete	ge
 8010624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010626:	89a3      	ldrhlt	r3, [r4, #12]
 8010628:	181b      	addge	r3, r3, r0
 801062a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801062e:	bfac      	ite	ge
 8010630:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010632:	81a3      	strhlt	r3, [r4, #12]
 8010634:	bd10      	pop	{r4, pc}

08010636 <__swrite>:
 8010636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063a:	461f      	mov	r7, r3
 801063c:	898b      	ldrh	r3, [r1, #12]
 801063e:	05db      	lsls	r3, r3, #23
 8010640:	4605      	mov	r5, r0
 8010642:	460c      	mov	r4, r1
 8010644:	4616      	mov	r6, r2
 8010646:	d505      	bpl.n	8010654 <__swrite+0x1e>
 8010648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064c:	2302      	movs	r3, #2
 801064e:	2200      	movs	r2, #0
 8010650:	f000 f8aa 	bl	80107a8 <_lseek_r>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801065a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	4632      	mov	r2, r6
 8010662:	463b      	mov	r3, r7
 8010664:	4628      	mov	r0, r5
 8010666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	f000 b8d1 	b.w	8010810 <_write_r>

0801066e <__sseek>:
 801066e:	b510      	push	{r4, lr}
 8010670:	460c      	mov	r4, r1
 8010672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010676:	f000 f897 	bl	80107a8 <_lseek_r>
 801067a:	1c43      	adds	r3, r0, #1
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	bf15      	itete	ne
 8010680:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801068a:	81a3      	strheq	r3, [r4, #12]
 801068c:	bf18      	it	ne
 801068e:	81a3      	strhne	r3, [r4, #12]
 8010690:	bd10      	pop	{r4, pc}

08010692 <__sclose>:
 8010692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010696:	f000 b877 	b.w	8010788 <_close_r>

0801069a <_vsniprintf_r>:
 801069a:	b530      	push	{r4, r5, lr}
 801069c:	4614      	mov	r4, r2
 801069e:	2c00      	cmp	r4, #0
 80106a0:	b09b      	sub	sp, #108	@ 0x6c
 80106a2:	4605      	mov	r5, r0
 80106a4:	461a      	mov	r2, r3
 80106a6:	da05      	bge.n	80106b4 <_vsniprintf_r+0x1a>
 80106a8:	238b      	movs	r3, #139	@ 0x8b
 80106aa:	6003      	str	r3, [r0, #0]
 80106ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106b0:	b01b      	add	sp, #108	@ 0x6c
 80106b2:	bd30      	pop	{r4, r5, pc}
 80106b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80106b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106bc:	bf14      	ite	ne
 80106be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80106c2:	4623      	moveq	r3, r4
 80106c4:	9302      	str	r3, [sp, #8]
 80106c6:	9305      	str	r3, [sp, #20]
 80106c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106cc:	9100      	str	r1, [sp, #0]
 80106ce:	9104      	str	r1, [sp, #16]
 80106d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80106d4:	4669      	mov	r1, sp
 80106d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106d8:	f000 f9c8 	bl	8010a6c <_svfiprintf_r>
 80106dc:	1c43      	adds	r3, r0, #1
 80106de:	bfbc      	itt	lt
 80106e0:	238b      	movlt	r3, #139	@ 0x8b
 80106e2:	602b      	strlt	r3, [r5, #0]
 80106e4:	2c00      	cmp	r4, #0
 80106e6:	d0e3      	beq.n	80106b0 <_vsniprintf_r+0x16>
 80106e8:	9b00      	ldr	r3, [sp, #0]
 80106ea:	2200      	movs	r2, #0
 80106ec:	701a      	strb	r2, [r3, #0]
 80106ee:	e7df      	b.n	80106b0 <_vsniprintf_r+0x16>

080106f0 <vsniprintf>:
 80106f0:	b507      	push	{r0, r1, r2, lr}
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	4613      	mov	r3, r2
 80106f6:	460a      	mov	r2, r1
 80106f8:	4601      	mov	r1, r0
 80106fa:	4803      	ldr	r0, [pc, #12]	@ (8010708 <vsniprintf+0x18>)
 80106fc:	6800      	ldr	r0, [r0, #0]
 80106fe:	f7ff ffcc 	bl	801069a <_vsniprintf_r>
 8010702:	b003      	add	sp, #12
 8010704:	f85d fb04 	ldr.w	pc, [sp], #4
 8010708:	200001e4 	.word	0x200001e4

0801070c <memset>:
 801070c:	4402      	add	r2, r0
 801070e:	4603      	mov	r3, r0
 8010710:	4293      	cmp	r3, r2
 8010712:	d100      	bne.n	8010716 <memset+0xa>
 8010714:	4770      	bx	lr
 8010716:	f803 1b01 	strb.w	r1, [r3], #1
 801071a:	e7f9      	b.n	8010710 <memset+0x4>

0801071c <strchr>:
 801071c:	b2c9      	uxtb	r1, r1
 801071e:	4603      	mov	r3, r0
 8010720:	4618      	mov	r0, r3
 8010722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010726:	b112      	cbz	r2, 801072e <strchr+0x12>
 8010728:	428a      	cmp	r2, r1
 801072a:	d1f9      	bne.n	8010720 <strchr+0x4>
 801072c:	4770      	bx	lr
 801072e:	2900      	cmp	r1, #0
 8010730:	bf18      	it	ne
 8010732:	2000      	movne	r0, #0
 8010734:	4770      	bx	lr

08010736 <strncmp>:
 8010736:	b510      	push	{r4, lr}
 8010738:	b16a      	cbz	r2, 8010756 <strncmp+0x20>
 801073a:	3901      	subs	r1, #1
 801073c:	1884      	adds	r4, r0, r2
 801073e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010742:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010746:	429a      	cmp	r2, r3
 8010748:	d103      	bne.n	8010752 <strncmp+0x1c>
 801074a:	42a0      	cmp	r0, r4
 801074c:	d001      	beq.n	8010752 <strncmp+0x1c>
 801074e:	2a00      	cmp	r2, #0
 8010750:	d1f5      	bne.n	801073e <strncmp+0x8>
 8010752:	1ad0      	subs	r0, r2, r3
 8010754:	bd10      	pop	{r4, pc}
 8010756:	4610      	mov	r0, r2
 8010758:	e7fc      	b.n	8010754 <strncmp+0x1e>

0801075a <strstr>:
 801075a:	780a      	ldrb	r2, [r1, #0]
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	b96a      	cbnz	r2, 801077c <strstr+0x22>
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	429a      	cmp	r2, r3
 8010764:	d109      	bne.n	801077a <strstr+0x20>
 8010766:	460c      	mov	r4, r1
 8010768:	4605      	mov	r5, r0
 801076a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801076e:	2b00      	cmp	r3, #0
 8010770:	d0f6      	beq.n	8010760 <strstr+0x6>
 8010772:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010776:	429e      	cmp	r6, r3
 8010778:	d0f7      	beq.n	801076a <strstr+0x10>
 801077a:	3001      	adds	r0, #1
 801077c:	7803      	ldrb	r3, [r0, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1ef      	bne.n	8010762 <strstr+0x8>
 8010782:	4618      	mov	r0, r3
 8010784:	e7ec      	b.n	8010760 <strstr+0x6>
	...

08010788 <_close_r>:
 8010788:	b538      	push	{r3, r4, r5, lr}
 801078a:	4d06      	ldr	r5, [pc, #24]	@ (80107a4 <_close_r+0x1c>)
 801078c:	2300      	movs	r3, #0
 801078e:	4604      	mov	r4, r0
 8010790:	4608      	mov	r0, r1
 8010792:	602b      	str	r3, [r5, #0]
 8010794:	f7f0 fe6a 	bl	800146c <_close>
 8010798:	1c43      	adds	r3, r0, #1
 801079a:	d102      	bne.n	80107a2 <_close_r+0x1a>
 801079c:	682b      	ldr	r3, [r5, #0]
 801079e:	b103      	cbz	r3, 80107a2 <_close_r+0x1a>
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	bd38      	pop	{r3, r4, r5, pc}
 80107a4:	2000dd6c 	.word	0x2000dd6c

080107a8 <_lseek_r>:
 80107a8:	b538      	push	{r3, r4, r5, lr}
 80107aa:	4d07      	ldr	r5, [pc, #28]	@ (80107c8 <_lseek_r+0x20>)
 80107ac:	4604      	mov	r4, r0
 80107ae:	4608      	mov	r0, r1
 80107b0:	4611      	mov	r1, r2
 80107b2:	2200      	movs	r2, #0
 80107b4:	602a      	str	r2, [r5, #0]
 80107b6:	461a      	mov	r2, r3
 80107b8:	f7f0 fe7f 	bl	80014ba <_lseek>
 80107bc:	1c43      	adds	r3, r0, #1
 80107be:	d102      	bne.n	80107c6 <_lseek_r+0x1e>
 80107c0:	682b      	ldr	r3, [r5, #0]
 80107c2:	b103      	cbz	r3, 80107c6 <_lseek_r+0x1e>
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	bd38      	pop	{r3, r4, r5, pc}
 80107c8:	2000dd6c 	.word	0x2000dd6c

080107cc <_read_r>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	4d07      	ldr	r5, [pc, #28]	@ (80107ec <_read_r+0x20>)
 80107d0:	4604      	mov	r4, r0
 80107d2:	4608      	mov	r0, r1
 80107d4:	4611      	mov	r1, r2
 80107d6:	2200      	movs	r2, #0
 80107d8:	602a      	str	r2, [r5, #0]
 80107da:	461a      	mov	r2, r3
 80107dc:	f7f0 fe0d 	bl	80013fa <_read>
 80107e0:	1c43      	adds	r3, r0, #1
 80107e2:	d102      	bne.n	80107ea <_read_r+0x1e>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	b103      	cbz	r3, 80107ea <_read_r+0x1e>
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	bd38      	pop	{r3, r4, r5, pc}
 80107ec:	2000dd6c 	.word	0x2000dd6c

080107f0 <_sbrk_r>:
 80107f0:	b538      	push	{r3, r4, r5, lr}
 80107f2:	4d06      	ldr	r5, [pc, #24]	@ (801080c <_sbrk_r+0x1c>)
 80107f4:	2300      	movs	r3, #0
 80107f6:	4604      	mov	r4, r0
 80107f8:	4608      	mov	r0, r1
 80107fa:	602b      	str	r3, [r5, #0]
 80107fc:	f7f0 fe6a 	bl	80014d4 <_sbrk>
 8010800:	1c43      	adds	r3, r0, #1
 8010802:	d102      	bne.n	801080a <_sbrk_r+0x1a>
 8010804:	682b      	ldr	r3, [r5, #0]
 8010806:	b103      	cbz	r3, 801080a <_sbrk_r+0x1a>
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	bd38      	pop	{r3, r4, r5, pc}
 801080c:	2000dd6c 	.word	0x2000dd6c

08010810 <_write_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4d07      	ldr	r5, [pc, #28]	@ (8010830 <_write_r+0x20>)
 8010814:	4604      	mov	r4, r0
 8010816:	4608      	mov	r0, r1
 8010818:	4611      	mov	r1, r2
 801081a:	2200      	movs	r2, #0
 801081c:	602a      	str	r2, [r5, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	f7f0 fe08 	bl	8001434 <_write>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_write_r+0x1e>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_write_r+0x1e>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	2000dd6c 	.word	0x2000dd6c

08010834 <__errno>:
 8010834:	4b01      	ldr	r3, [pc, #4]	@ (801083c <__errno+0x8>)
 8010836:	6818      	ldr	r0, [r3, #0]
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	200001e4 	.word	0x200001e4

08010840 <__libc_init_array>:
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	4d0d      	ldr	r5, [pc, #52]	@ (8010878 <__libc_init_array+0x38>)
 8010844:	4c0d      	ldr	r4, [pc, #52]	@ (801087c <__libc_init_array+0x3c>)
 8010846:	1b64      	subs	r4, r4, r5
 8010848:	10a4      	asrs	r4, r4, #2
 801084a:	2600      	movs	r6, #0
 801084c:	42a6      	cmp	r6, r4
 801084e:	d109      	bne.n	8010864 <__libc_init_array+0x24>
 8010850:	4d0b      	ldr	r5, [pc, #44]	@ (8010880 <__libc_init_array+0x40>)
 8010852:	4c0c      	ldr	r4, [pc, #48]	@ (8010884 <__libc_init_array+0x44>)
 8010854:	f000 ff12 	bl	801167c <_init>
 8010858:	1b64      	subs	r4, r4, r5
 801085a:	10a4      	asrs	r4, r4, #2
 801085c:	2600      	movs	r6, #0
 801085e:	42a6      	cmp	r6, r4
 8010860:	d105      	bne.n	801086e <__libc_init_array+0x2e>
 8010862:	bd70      	pop	{r4, r5, r6, pc}
 8010864:	f855 3b04 	ldr.w	r3, [r5], #4
 8010868:	4798      	blx	r3
 801086a:	3601      	adds	r6, #1
 801086c:	e7ee      	b.n	801084c <__libc_init_array+0xc>
 801086e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010872:	4798      	blx	r3
 8010874:	3601      	adds	r6, #1
 8010876:	e7f2      	b.n	801085e <__libc_init_array+0x1e>
 8010878:	080122b8 	.word	0x080122b8
 801087c:	080122b8 	.word	0x080122b8
 8010880:	080122b8 	.word	0x080122b8
 8010884:	080122c0 	.word	0x080122c0

08010888 <__retarget_lock_init_recursive>:
 8010888:	4770      	bx	lr

0801088a <__retarget_lock_acquire_recursive>:
 801088a:	4770      	bx	lr

0801088c <__retarget_lock_release_recursive>:
 801088c:	4770      	bx	lr

0801088e <strcpy>:
 801088e:	4603      	mov	r3, r0
 8010890:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010894:	f803 2b01 	strb.w	r2, [r3], #1
 8010898:	2a00      	cmp	r2, #0
 801089a:	d1f9      	bne.n	8010890 <strcpy+0x2>
 801089c:	4770      	bx	lr

0801089e <memcpy>:
 801089e:	440a      	add	r2, r1
 80108a0:	4291      	cmp	r1, r2
 80108a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80108a6:	d100      	bne.n	80108aa <memcpy+0xc>
 80108a8:	4770      	bx	lr
 80108aa:	b510      	push	{r4, lr}
 80108ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108b4:	4291      	cmp	r1, r2
 80108b6:	d1f9      	bne.n	80108ac <memcpy+0xe>
 80108b8:	bd10      	pop	{r4, pc}
	...

080108bc <__assert_func>:
 80108bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108be:	4614      	mov	r4, r2
 80108c0:	461a      	mov	r2, r3
 80108c2:	4b09      	ldr	r3, [pc, #36]	@ (80108e8 <__assert_func+0x2c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4605      	mov	r5, r0
 80108c8:	68d8      	ldr	r0, [r3, #12]
 80108ca:	b954      	cbnz	r4, 80108e2 <__assert_func+0x26>
 80108cc:	4b07      	ldr	r3, [pc, #28]	@ (80108ec <__assert_func+0x30>)
 80108ce:	461c      	mov	r4, r3
 80108d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108d4:	9100      	str	r1, [sp, #0]
 80108d6:	462b      	mov	r3, r5
 80108d8:	4905      	ldr	r1, [pc, #20]	@ (80108f0 <__assert_func+0x34>)
 80108da:	f000 fd3f 	bl	801135c <fiprintf>
 80108de:	f000 fdfd 	bl	80114dc <abort>
 80108e2:	4b04      	ldr	r3, [pc, #16]	@ (80108f4 <__assert_func+0x38>)
 80108e4:	e7f4      	b.n	80108d0 <__assert_func+0x14>
 80108e6:	bf00      	nop
 80108e8:	200001e4 	.word	0x200001e4
 80108ec:	0801227b 	.word	0x0801227b
 80108f0:	0801224d 	.word	0x0801224d
 80108f4:	08012240 	.word	0x08012240

080108f8 <__env_lock>:
 80108f8:	4801      	ldr	r0, [pc, #4]	@ (8010900 <__env_lock+0x8>)
 80108fa:	f7ff bfc6 	b.w	801088a <__retarget_lock_acquire_recursive>
 80108fe:	bf00      	nop
 8010900:	2000dd70 	.word	0x2000dd70

08010904 <__env_unlock>:
 8010904:	4801      	ldr	r0, [pc, #4]	@ (801090c <__env_unlock+0x8>)
 8010906:	f7ff bfc1 	b.w	801088c <__retarget_lock_release_recursive>
 801090a:	bf00      	nop
 801090c:	2000dd70 	.word	0x2000dd70

08010910 <_free_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4605      	mov	r5, r0
 8010914:	2900      	cmp	r1, #0
 8010916:	d041      	beq.n	801099c <_free_r+0x8c>
 8010918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801091c:	1f0c      	subs	r4, r1, #4
 801091e:	2b00      	cmp	r3, #0
 8010920:	bfb8      	it	lt
 8010922:	18e4      	addlt	r4, r4, r3
 8010924:	f7ff fc48 	bl	80101b8 <__malloc_lock>
 8010928:	4a1d      	ldr	r2, [pc, #116]	@ (80109a0 <_free_r+0x90>)
 801092a:	6813      	ldr	r3, [r2, #0]
 801092c:	b933      	cbnz	r3, 801093c <_free_r+0x2c>
 801092e:	6063      	str	r3, [r4, #4]
 8010930:	6014      	str	r4, [r2, #0]
 8010932:	4628      	mov	r0, r5
 8010934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010938:	f7ff bc44 	b.w	80101c4 <__malloc_unlock>
 801093c:	42a3      	cmp	r3, r4
 801093e:	d908      	bls.n	8010952 <_free_r+0x42>
 8010940:	6820      	ldr	r0, [r4, #0]
 8010942:	1821      	adds	r1, r4, r0
 8010944:	428b      	cmp	r3, r1
 8010946:	bf01      	itttt	eq
 8010948:	6819      	ldreq	r1, [r3, #0]
 801094a:	685b      	ldreq	r3, [r3, #4]
 801094c:	1809      	addeq	r1, r1, r0
 801094e:	6021      	streq	r1, [r4, #0]
 8010950:	e7ed      	b.n	801092e <_free_r+0x1e>
 8010952:	461a      	mov	r2, r3
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	b10b      	cbz	r3, 801095c <_free_r+0x4c>
 8010958:	42a3      	cmp	r3, r4
 801095a:	d9fa      	bls.n	8010952 <_free_r+0x42>
 801095c:	6811      	ldr	r1, [r2, #0]
 801095e:	1850      	adds	r0, r2, r1
 8010960:	42a0      	cmp	r0, r4
 8010962:	d10b      	bne.n	801097c <_free_r+0x6c>
 8010964:	6820      	ldr	r0, [r4, #0]
 8010966:	4401      	add	r1, r0
 8010968:	1850      	adds	r0, r2, r1
 801096a:	4283      	cmp	r3, r0
 801096c:	6011      	str	r1, [r2, #0]
 801096e:	d1e0      	bne.n	8010932 <_free_r+0x22>
 8010970:	6818      	ldr	r0, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	6053      	str	r3, [r2, #4]
 8010976:	4408      	add	r0, r1
 8010978:	6010      	str	r0, [r2, #0]
 801097a:	e7da      	b.n	8010932 <_free_r+0x22>
 801097c:	d902      	bls.n	8010984 <_free_r+0x74>
 801097e:	230c      	movs	r3, #12
 8010980:	602b      	str	r3, [r5, #0]
 8010982:	e7d6      	b.n	8010932 <_free_r+0x22>
 8010984:	6820      	ldr	r0, [r4, #0]
 8010986:	1821      	adds	r1, r4, r0
 8010988:	428b      	cmp	r3, r1
 801098a:	bf04      	itt	eq
 801098c:	6819      	ldreq	r1, [r3, #0]
 801098e:	685b      	ldreq	r3, [r3, #4]
 8010990:	6063      	str	r3, [r4, #4]
 8010992:	bf04      	itt	eq
 8010994:	1809      	addeq	r1, r1, r0
 8010996:	6021      	streq	r1, [r4, #0]
 8010998:	6054      	str	r4, [r2, #4]
 801099a:	e7ca      	b.n	8010932 <_free_r+0x22>
 801099c:	bd38      	pop	{r3, r4, r5, pc}
 801099e:	bf00      	nop
 80109a0:	2000dc2c 	.word	0x2000dc2c

080109a4 <_malloc_usable_size_r>:
 80109a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109a8:	1f18      	subs	r0, r3, #4
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bfbc      	itt	lt
 80109ae:	580b      	ldrlt	r3, [r1, r0]
 80109b0:	18c0      	addlt	r0, r0, r3
 80109b2:	4770      	bx	lr

080109b4 <__ssputs_r>:
 80109b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b8:	688e      	ldr	r6, [r1, #8]
 80109ba:	461f      	mov	r7, r3
 80109bc:	42be      	cmp	r6, r7
 80109be:	680b      	ldr	r3, [r1, #0]
 80109c0:	4682      	mov	sl, r0
 80109c2:	460c      	mov	r4, r1
 80109c4:	4690      	mov	r8, r2
 80109c6:	d82d      	bhi.n	8010a24 <__ssputs_r+0x70>
 80109c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80109d0:	d026      	beq.n	8010a20 <__ssputs_r+0x6c>
 80109d2:	6965      	ldr	r5, [r4, #20]
 80109d4:	6909      	ldr	r1, [r1, #16]
 80109d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109da:	eba3 0901 	sub.w	r9, r3, r1
 80109de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109e2:	1c7b      	adds	r3, r7, #1
 80109e4:	444b      	add	r3, r9
 80109e6:	106d      	asrs	r5, r5, #1
 80109e8:	429d      	cmp	r5, r3
 80109ea:	bf38      	it	cc
 80109ec:	461d      	movcc	r5, r3
 80109ee:	0553      	lsls	r3, r2, #21
 80109f0:	d527      	bpl.n	8010a42 <__ssputs_r+0x8e>
 80109f2:	4629      	mov	r1, r5
 80109f4:	f7ff fb60 	bl	80100b8 <_malloc_r>
 80109f8:	4606      	mov	r6, r0
 80109fa:	b360      	cbz	r0, 8010a56 <__ssputs_r+0xa2>
 80109fc:	6921      	ldr	r1, [r4, #16]
 80109fe:	464a      	mov	r2, r9
 8010a00:	f7ff ff4d 	bl	801089e <memcpy>
 8010a04:	89a3      	ldrh	r3, [r4, #12]
 8010a06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a0e:	81a3      	strh	r3, [r4, #12]
 8010a10:	6126      	str	r6, [r4, #16]
 8010a12:	6165      	str	r5, [r4, #20]
 8010a14:	444e      	add	r6, r9
 8010a16:	eba5 0509 	sub.w	r5, r5, r9
 8010a1a:	6026      	str	r6, [r4, #0]
 8010a1c:	60a5      	str	r5, [r4, #8]
 8010a1e:	463e      	mov	r6, r7
 8010a20:	42be      	cmp	r6, r7
 8010a22:	d900      	bls.n	8010a26 <__ssputs_r+0x72>
 8010a24:	463e      	mov	r6, r7
 8010a26:	6820      	ldr	r0, [r4, #0]
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4641      	mov	r1, r8
 8010a2c:	f000 fd3c 	bl	80114a8 <memmove>
 8010a30:	68a3      	ldr	r3, [r4, #8]
 8010a32:	1b9b      	subs	r3, r3, r6
 8010a34:	60a3      	str	r3, [r4, #8]
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	4433      	add	r3, r6
 8010a3a:	6023      	str	r3, [r4, #0]
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a42:	462a      	mov	r2, r5
 8010a44:	f7ff fc38 	bl	80102b8 <_realloc_r>
 8010a48:	4606      	mov	r6, r0
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d1e0      	bne.n	8010a10 <__ssputs_r+0x5c>
 8010a4e:	6921      	ldr	r1, [r4, #16]
 8010a50:	4650      	mov	r0, sl
 8010a52:	f7ff ff5d 	bl	8010910 <_free_r>
 8010a56:	230c      	movs	r3, #12
 8010a58:	f8ca 3000 	str.w	r3, [sl]
 8010a5c:	89a3      	ldrh	r3, [r4, #12]
 8010a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a68:	e7e9      	b.n	8010a3e <__ssputs_r+0x8a>
	...

08010a6c <_svfiprintf_r>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	4698      	mov	r8, r3
 8010a72:	898b      	ldrh	r3, [r1, #12]
 8010a74:	061b      	lsls	r3, r3, #24
 8010a76:	b09d      	sub	sp, #116	@ 0x74
 8010a78:	4607      	mov	r7, r0
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	d510      	bpl.n	8010aa2 <_svfiprintf_r+0x36>
 8010a80:	690b      	ldr	r3, [r1, #16]
 8010a82:	b973      	cbnz	r3, 8010aa2 <_svfiprintf_r+0x36>
 8010a84:	2140      	movs	r1, #64	@ 0x40
 8010a86:	f7ff fb17 	bl	80100b8 <_malloc_r>
 8010a8a:	6028      	str	r0, [r5, #0]
 8010a8c:	6128      	str	r0, [r5, #16]
 8010a8e:	b930      	cbnz	r0, 8010a9e <_svfiprintf_r+0x32>
 8010a90:	230c      	movs	r3, #12
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a98:	b01d      	add	sp, #116	@ 0x74
 8010a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9e:	2340      	movs	r3, #64	@ 0x40
 8010aa0:	616b      	str	r3, [r5, #20]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aa6:	2320      	movs	r3, #32
 8010aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ab0:	2330      	movs	r3, #48	@ 0x30
 8010ab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010c50 <_svfiprintf_r+0x1e4>
 8010ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010aba:	f04f 0901 	mov.w	r9, #1
 8010abe:	4623      	mov	r3, r4
 8010ac0:	469a      	mov	sl, r3
 8010ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac6:	b10a      	cbz	r2, 8010acc <_svfiprintf_r+0x60>
 8010ac8:	2a25      	cmp	r2, #37	@ 0x25
 8010aca:	d1f9      	bne.n	8010ac0 <_svfiprintf_r+0x54>
 8010acc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ad0:	d00b      	beq.n	8010aea <_svfiprintf_r+0x7e>
 8010ad2:	465b      	mov	r3, fp
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4638      	mov	r0, r7
 8010ada:	f7ff ff6b 	bl	80109b4 <__ssputs_r>
 8010ade:	3001      	adds	r0, #1
 8010ae0:	f000 80a7 	beq.w	8010c32 <_svfiprintf_r+0x1c6>
 8010ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae6:	445a      	add	r2, fp
 8010ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010aea:	f89a 3000 	ldrb.w	r3, [sl]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 809f 	beq.w	8010c32 <_svfiprintf_r+0x1c6>
 8010af4:	2300      	movs	r3, #0
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010afe:	f10a 0a01 	add.w	sl, sl, #1
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	9307      	str	r3, [sp, #28]
 8010b06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b0c:	4654      	mov	r4, sl
 8010b0e:	2205      	movs	r2, #5
 8010b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b14:	484e      	ldr	r0, [pc, #312]	@ (8010c50 <_svfiprintf_r+0x1e4>)
 8010b16:	f7ef fb7b 	bl	8000210 <memchr>
 8010b1a:	9a04      	ldr	r2, [sp, #16]
 8010b1c:	b9d8      	cbnz	r0, 8010b56 <_svfiprintf_r+0xea>
 8010b1e:	06d0      	lsls	r0, r2, #27
 8010b20:	bf44      	itt	mi
 8010b22:	2320      	movmi	r3, #32
 8010b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b28:	0711      	lsls	r1, r2, #28
 8010b2a:	bf44      	itt	mi
 8010b2c:	232b      	movmi	r3, #43	@ 0x2b
 8010b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b32:	f89a 3000 	ldrb.w	r3, [sl]
 8010b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b38:	d015      	beq.n	8010b66 <_svfiprintf_r+0xfa>
 8010b3a:	9a07      	ldr	r2, [sp, #28]
 8010b3c:	4654      	mov	r4, sl
 8010b3e:	2000      	movs	r0, #0
 8010b40:	f04f 0c0a 	mov.w	ip, #10
 8010b44:	4621      	mov	r1, r4
 8010b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b4a:	3b30      	subs	r3, #48	@ 0x30
 8010b4c:	2b09      	cmp	r3, #9
 8010b4e:	d94b      	bls.n	8010be8 <_svfiprintf_r+0x17c>
 8010b50:	b1b0      	cbz	r0, 8010b80 <_svfiprintf_r+0x114>
 8010b52:	9207      	str	r2, [sp, #28]
 8010b54:	e014      	b.n	8010b80 <_svfiprintf_r+0x114>
 8010b56:	eba0 0308 	sub.w	r3, r0, r8
 8010b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	46a2      	mov	sl, r4
 8010b64:	e7d2      	b.n	8010b0c <_svfiprintf_r+0xa0>
 8010b66:	9b03      	ldr	r3, [sp, #12]
 8010b68:	1d19      	adds	r1, r3, #4
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	9103      	str	r1, [sp, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	bfbb      	ittet	lt
 8010b72:	425b      	neglt	r3, r3
 8010b74:	f042 0202 	orrlt.w	r2, r2, #2
 8010b78:	9307      	strge	r3, [sp, #28]
 8010b7a:	9307      	strlt	r3, [sp, #28]
 8010b7c:	bfb8      	it	lt
 8010b7e:	9204      	strlt	r2, [sp, #16]
 8010b80:	7823      	ldrb	r3, [r4, #0]
 8010b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b84:	d10a      	bne.n	8010b9c <_svfiprintf_r+0x130>
 8010b86:	7863      	ldrb	r3, [r4, #1]
 8010b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b8a:	d132      	bne.n	8010bf2 <_svfiprintf_r+0x186>
 8010b8c:	9b03      	ldr	r3, [sp, #12]
 8010b8e:	1d1a      	adds	r2, r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	9203      	str	r2, [sp, #12]
 8010b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b98:	3402      	adds	r4, #2
 8010b9a:	9305      	str	r3, [sp, #20]
 8010b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c60 <_svfiprintf_r+0x1f4>
 8010ba0:	7821      	ldrb	r1, [r4, #0]
 8010ba2:	2203      	movs	r2, #3
 8010ba4:	4650      	mov	r0, sl
 8010ba6:	f7ef fb33 	bl	8000210 <memchr>
 8010baa:	b138      	cbz	r0, 8010bbc <_svfiprintf_r+0x150>
 8010bac:	9b04      	ldr	r3, [sp, #16]
 8010bae:	eba0 000a 	sub.w	r0, r0, sl
 8010bb2:	2240      	movs	r2, #64	@ 0x40
 8010bb4:	4082      	lsls	r2, r0
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	3401      	adds	r4, #1
 8010bba:	9304      	str	r3, [sp, #16]
 8010bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc0:	4824      	ldr	r0, [pc, #144]	@ (8010c54 <_svfiprintf_r+0x1e8>)
 8010bc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010bc6:	2206      	movs	r2, #6
 8010bc8:	f7ef fb22 	bl	8000210 <memchr>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d036      	beq.n	8010c3e <_svfiprintf_r+0x1d2>
 8010bd0:	4b21      	ldr	r3, [pc, #132]	@ (8010c58 <_svfiprintf_r+0x1ec>)
 8010bd2:	bb1b      	cbnz	r3, 8010c1c <_svfiprintf_r+0x1b0>
 8010bd4:	9b03      	ldr	r3, [sp, #12]
 8010bd6:	3307      	adds	r3, #7
 8010bd8:	f023 0307 	bic.w	r3, r3, #7
 8010bdc:	3308      	adds	r3, #8
 8010bde:	9303      	str	r3, [sp, #12]
 8010be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be2:	4433      	add	r3, r6
 8010be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010be6:	e76a      	b.n	8010abe <_svfiprintf_r+0x52>
 8010be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bec:	460c      	mov	r4, r1
 8010bee:	2001      	movs	r0, #1
 8010bf0:	e7a8      	b.n	8010b44 <_svfiprintf_r+0xd8>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	3401      	adds	r4, #1
 8010bf6:	9305      	str	r3, [sp, #20]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	f04f 0c0a 	mov.w	ip, #10
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c04:	3a30      	subs	r2, #48	@ 0x30
 8010c06:	2a09      	cmp	r2, #9
 8010c08:	d903      	bls.n	8010c12 <_svfiprintf_r+0x1a6>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d0c6      	beq.n	8010b9c <_svfiprintf_r+0x130>
 8010c0e:	9105      	str	r1, [sp, #20]
 8010c10:	e7c4      	b.n	8010b9c <_svfiprintf_r+0x130>
 8010c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c16:	4604      	mov	r4, r0
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e7f0      	b.n	8010bfe <_svfiprintf_r+0x192>
 8010c1c:	ab03      	add	r3, sp, #12
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	462a      	mov	r2, r5
 8010c22:	4b0e      	ldr	r3, [pc, #56]	@ (8010c5c <_svfiprintf_r+0x1f0>)
 8010c24:	a904      	add	r1, sp, #16
 8010c26:	4638      	mov	r0, r7
 8010c28:	f3af 8000 	nop.w
 8010c2c:	1c42      	adds	r2, r0, #1
 8010c2e:	4606      	mov	r6, r0
 8010c30:	d1d6      	bne.n	8010be0 <_svfiprintf_r+0x174>
 8010c32:	89ab      	ldrh	r3, [r5, #12]
 8010c34:	065b      	lsls	r3, r3, #25
 8010c36:	f53f af2d 	bmi.w	8010a94 <_svfiprintf_r+0x28>
 8010c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c3c:	e72c      	b.n	8010a98 <_svfiprintf_r+0x2c>
 8010c3e:	ab03      	add	r3, sp, #12
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	462a      	mov	r2, r5
 8010c44:	4b05      	ldr	r3, [pc, #20]	@ (8010c5c <_svfiprintf_r+0x1f0>)
 8010c46:	a904      	add	r1, sp, #16
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f000 f9bb 	bl	8010fc4 <_printf_i>
 8010c4e:	e7ed      	b.n	8010c2c <_svfiprintf_r+0x1c0>
 8010c50:	0801227c 	.word	0x0801227c
 8010c54:	08012286 	.word	0x08012286
 8010c58:	00000000 	.word	0x00000000
 8010c5c:	080109b5 	.word	0x080109b5
 8010c60:	08012282 	.word	0x08012282

08010c64 <__sfputc_r>:
 8010c64:	6893      	ldr	r3, [r2, #8]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	b410      	push	{r4}
 8010c6c:	6093      	str	r3, [r2, #8]
 8010c6e:	da08      	bge.n	8010c82 <__sfputc_r+0x1e>
 8010c70:	6994      	ldr	r4, [r2, #24]
 8010c72:	42a3      	cmp	r3, r4
 8010c74:	db01      	blt.n	8010c7a <__sfputc_r+0x16>
 8010c76:	290a      	cmp	r1, #10
 8010c78:	d103      	bne.n	8010c82 <__sfputc_r+0x1e>
 8010c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c7e:	f000 bb7f 	b.w	8011380 <__swbuf_r>
 8010c82:	6813      	ldr	r3, [r2, #0]
 8010c84:	1c58      	adds	r0, r3, #1
 8010c86:	6010      	str	r0, [r2, #0]
 8010c88:	7019      	strb	r1, [r3, #0]
 8010c8a:	4608      	mov	r0, r1
 8010c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <__sfputs_r>:
 8010c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c94:	4606      	mov	r6, r0
 8010c96:	460f      	mov	r7, r1
 8010c98:	4614      	mov	r4, r2
 8010c9a:	18d5      	adds	r5, r2, r3
 8010c9c:	42ac      	cmp	r4, r5
 8010c9e:	d101      	bne.n	8010ca4 <__sfputs_r+0x12>
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	e007      	b.n	8010cb4 <__sfputs_r+0x22>
 8010ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ca8:	463a      	mov	r2, r7
 8010caa:	4630      	mov	r0, r6
 8010cac:	f7ff ffda 	bl	8010c64 <__sfputc_r>
 8010cb0:	1c43      	adds	r3, r0, #1
 8010cb2:	d1f3      	bne.n	8010c9c <__sfputs_r+0xa>
 8010cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cb8 <_vfiprintf_r>:
 8010cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	460d      	mov	r5, r1
 8010cbe:	b09d      	sub	sp, #116	@ 0x74
 8010cc0:	4614      	mov	r4, r2
 8010cc2:	4698      	mov	r8, r3
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	b118      	cbz	r0, 8010cd0 <_vfiprintf_r+0x18>
 8010cc8:	6a03      	ldr	r3, [r0, #32]
 8010cca:	b90b      	cbnz	r3, 8010cd0 <_vfiprintf_r+0x18>
 8010ccc:	f7ff fc26 	bl	801051c <__sinit>
 8010cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cd2:	07d9      	lsls	r1, r3, #31
 8010cd4:	d405      	bmi.n	8010ce2 <_vfiprintf_r+0x2a>
 8010cd6:	89ab      	ldrh	r3, [r5, #12]
 8010cd8:	059a      	lsls	r2, r3, #22
 8010cda:	d402      	bmi.n	8010ce2 <_vfiprintf_r+0x2a>
 8010cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cde:	f7ff fdd4 	bl	801088a <__retarget_lock_acquire_recursive>
 8010ce2:	89ab      	ldrh	r3, [r5, #12]
 8010ce4:	071b      	lsls	r3, r3, #28
 8010ce6:	d501      	bpl.n	8010cec <_vfiprintf_r+0x34>
 8010ce8:	692b      	ldr	r3, [r5, #16]
 8010cea:	b99b      	cbnz	r3, 8010d14 <_vfiprintf_r+0x5c>
 8010cec:	4629      	mov	r1, r5
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f000 fb84 	bl	80113fc <__swsetup_r>
 8010cf4:	b170      	cbz	r0, 8010d14 <_vfiprintf_r+0x5c>
 8010cf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cf8:	07dc      	lsls	r4, r3, #31
 8010cfa:	d504      	bpl.n	8010d06 <_vfiprintf_r+0x4e>
 8010cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d00:	b01d      	add	sp, #116	@ 0x74
 8010d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d06:	89ab      	ldrh	r3, [r5, #12]
 8010d08:	0598      	lsls	r0, r3, #22
 8010d0a:	d4f7      	bmi.n	8010cfc <_vfiprintf_r+0x44>
 8010d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d0e:	f7ff fdbd 	bl	801088c <__retarget_lock_release_recursive>
 8010d12:	e7f3      	b.n	8010cfc <_vfiprintf_r+0x44>
 8010d14:	2300      	movs	r3, #0
 8010d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d18:	2320      	movs	r3, #32
 8010d1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d22:	2330      	movs	r3, #48	@ 0x30
 8010d24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ed4 <_vfiprintf_r+0x21c>
 8010d28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d2c:	f04f 0901 	mov.w	r9, #1
 8010d30:	4623      	mov	r3, r4
 8010d32:	469a      	mov	sl, r3
 8010d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d38:	b10a      	cbz	r2, 8010d3e <_vfiprintf_r+0x86>
 8010d3a:	2a25      	cmp	r2, #37	@ 0x25
 8010d3c:	d1f9      	bne.n	8010d32 <_vfiprintf_r+0x7a>
 8010d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d42:	d00b      	beq.n	8010d5c <_vfiprintf_r+0xa4>
 8010d44:	465b      	mov	r3, fp
 8010d46:	4622      	mov	r2, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7ff ffa1 	bl	8010c92 <__sfputs_r>
 8010d50:	3001      	adds	r0, #1
 8010d52:	f000 80a7 	beq.w	8010ea4 <_vfiprintf_r+0x1ec>
 8010d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d58:	445a      	add	r2, fp
 8010d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 809f 	beq.w	8010ea4 <_vfiprintf_r+0x1ec>
 8010d66:	2300      	movs	r3, #0
 8010d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d70:	f10a 0a01 	add.w	sl, sl, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	9307      	str	r3, [sp, #28]
 8010d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d7e:	4654      	mov	r4, sl
 8010d80:	2205      	movs	r2, #5
 8010d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d86:	4853      	ldr	r0, [pc, #332]	@ (8010ed4 <_vfiprintf_r+0x21c>)
 8010d88:	f7ef fa42 	bl	8000210 <memchr>
 8010d8c:	9a04      	ldr	r2, [sp, #16]
 8010d8e:	b9d8      	cbnz	r0, 8010dc8 <_vfiprintf_r+0x110>
 8010d90:	06d1      	lsls	r1, r2, #27
 8010d92:	bf44      	itt	mi
 8010d94:	2320      	movmi	r3, #32
 8010d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d9a:	0713      	lsls	r3, r2, #28
 8010d9c:	bf44      	itt	mi
 8010d9e:	232b      	movmi	r3, #43	@ 0x2b
 8010da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010da4:	f89a 3000 	ldrb.w	r3, [sl]
 8010da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010daa:	d015      	beq.n	8010dd8 <_vfiprintf_r+0x120>
 8010dac:	9a07      	ldr	r2, [sp, #28]
 8010dae:	4654      	mov	r4, sl
 8010db0:	2000      	movs	r0, #0
 8010db2:	f04f 0c0a 	mov.w	ip, #10
 8010db6:	4621      	mov	r1, r4
 8010db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dbc:	3b30      	subs	r3, #48	@ 0x30
 8010dbe:	2b09      	cmp	r3, #9
 8010dc0:	d94b      	bls.n	8010e5a <_vfiprintf_r+0x1a2>
 8010dc2:	b1b0      	cbz	r0, 8010df2 <_vfiprintf_r+0x13a>
 8010dc4:	9207      	str	r2, [sp, #28]
 8010dc6:	e014      	b.n	8010df2 <_vfiprintf_r+0x13a>
 8010dc8:	eba0 0308 	sub.w	r3, r0, r8
 8010dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	9304      	str	r3, [sp, #16]
 8010dd4:	46a2      	mov	sl, r4
 8010dd6:	e7d2      	b.n	8010d7e <_vfiprintf_r+0xc6>
 8010dd8:	9b03      	ldr	r3, [sp, #12]
 8010dda:	1d19      	adds	r1, r3, #4
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	9103      	str	r1, [sp, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	bfbb      	ittet	lt
 8010de4:	425b      	neglt	r3, r3
 8010de6:	f042 0202 	orrlt.w	r2, r2, #2
 8010dea:	9307      	strge	r3, [sp, #28]
 8010dec:	9307      	strlt	r3, [sp, #28]
 8010dee:	bfb8      	it	lt
 8010df0:	9204      	strlt	r2, [sp, #16]
 8010df2:	7823      	ldrb	r3, [r4, #0]
 8010df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010df6:	d10a      	bne.n	8010e0e <_vfiprintf_r+0x156>
 8010df8:	7863      	ldrb	r3, [r4, #1]
 8010dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dfc:	d132      	bne.n	8010e64 <_vfiprintf_r+0x1ac>
 8010dfe:	9b03      	ldr	r3, [sp, #12]
 8010e00:	1d1a      	adds	r2, r3, #4
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	9203      	str	r2, [sp, #12]
 8010e06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e0a:	3402      	adds	r4, #2
 8010e0c:	9305      	str	r3, [sp, #20]
 8010e0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ee4 <_vfiprintf_r+0x22c>
 8010e12:	7821      	ldrb	r1, [r4, #0]
 8010e14:	2203      	movs	r2, #3
 8010e16:	4650      	mov	r0, sl
 8010e18:	f7ef f9fa 	bl	8000210 <memchr>
 8010e1c:	b138      	cbz	r0, 8010e2e <_vfiprintf_r+0x176>
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	eba0 000a 	sub.w	r0, r0, sl
 8010e24:	2240      	movs	r2, #64	@ 0x40
 8010e26:	4082      	lsls	r2, r0
 8010e28:	4313      	orrs	r3, r2
 8010e2a:	3401      	adds	r4, #1
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e32:	4829      	ldr	r0, [pc, #164]	@ (8010ed8 <_vfiprintf_r+0x220>)
 8010e34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e38:	2206      	movs	r2, #6
 8010e3a:	f7ef f9e9 	bl	8000210 <memchr>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d03f      	beq.n	8010ec2 <_vfiprintf_r+0x20a>
 8010e42:	4b26      	ldr	r3, [pc, #152]	@ (8010edc <_vfiprintf_r+0x224>)
 8010e44:	bb1b      	cbnz	r3, 8010e8e <_vfiprintf_r+0x1d6>
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	3307      	adds	r3, #7
 8010e4a:	f023 0307 	bic.w	r3, r3, #7
 8010e4e:	3308      	adds	r3, #8
 8010e50:	9303      	str	r3, [sp, #12]
 8010e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e54:	443b      	add	r3, r7
 8010e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e58:	e76a      	b.n	8010d30 <_vfiprintf_r+0x78>
 8010e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e5e:	460c      	mov	r4, r1
 8010e60:	2001      	movs	r0, #1
 8010e62:	e7a8      	b.n	8010db6 <_vfiprintf_r+0xfe>
 8010e64:	2300      	movs	r3, #0
 8010e66:	3401      	adds	r4, #1
 8010e68:	9305      	str	r3, [sp, #20]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	f04f 0c0a 	mov.w	ip, #10
 8010e70:	4620      	mov	r0, r4
 8010e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e76:	3a30      	subs	r2, #48	@ 0x30
 8010e78:	2a09      	cmp	r2, #9
 8010e7a:	d903      	bls.n	8010e84 <_vfiprintf_r+0x1cc>
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d0c6      	beq.n	8010e0e <_vfiprintf_r+0x156>
 8010e80:	9105      	str	r1, [sp, #20]
 8010e82:	e7c4      	b.n	8010e0e <_vfiprintf_r+0x156>
 8010e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e88:	4604      	mov	r4, r0
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e7f0      	b.n	8010e70 <_vfiprintf_r+0x1b8>
 8010e8e:	ab03      	add	r3, sp, #12
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	462a      	mov	r2, r5
 8010e94:	4b12      	ldr	r3, [pc, #72]	@ (8010ee0 <_vfiprintf_r+0x228>)
 8010e96:	a904      	add	r1, sp, #16
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f3af 8000 	nop.w
 8010e9e:	4607      	mov	r7, r0
 8010ea0:	1c78      	adds	r0, r7, #1
 8010ea2:	d1d6      	bne.n	8010e52 <_vfiprintf_r+0x19a>
 8010ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ea6:	07d9      	lsls	r1, r3, #31
 8010ea8:	d405      	bmi.n	8010eb6 <_vfiprintf_r+0x1fe>
 8010eaa:	89ab      	ldrh	r3, [r5, #12]
 8010eac:	059a      	lsls	r2, r3, #22
 8010eae:	d402      	bmi.n	8010eb6 <_vfiprintf_r+0x1fe>
 8010eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010eb2:	f7ff fceb 	bl	801088c <__retarget_lock_release_recursive>
 8010eb6:	89ab      	ldrh	r3, [r5, #12]
 8010eb8:	065b      	lsls	r3, r3, #25
 8010eba:	f53f af1f 	bmi.w	8010cfc <_vfiprintf_r+0x44>
 8010ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ec0:	e71e      	b.n	8010d00 <_vfiprintf_r+0x48>
 8010ec2:	ab03      	add	r3, sp, #12
 8010ec4:	9300      	str	r3, [sp, #0]
 8010ec6:	462a      	mov	r2, r5
 8010ec8:	4b05      	ldr	r3, [pc, #20]	@ (8010ee0 <_vfiprintf_r+0x228>)
 8010eca:	a904      	add	r1, sp, #16
 8010ecc:	4630      	mov	r0, r6
 8010ece:	f000 f879 	bl	8010fc4 <_printf_i>
 8010ed2:	e7e4      	b.n	8010e9e <_vfiprintf_r+0x1e6>
 8010ed4:	0801227c 	.word	0x0801227c
 8010ed8:	08012286 	.word	0x08012286
 8010edc:	00000000 	.word	0x00000000
 8010ee0:	08010c93 	.word	0x08010c93
 8010ee4:	08012282 	.word	0x08012282

08010ee8 <_printf_common>:
 8010ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eec:	4616      	mov	r6, r2
 8010eee:	4698      	mov	r8, r3
 8010ef0:	688a      	ldr	r2, [r1, #8]
 8010ef2:	690b      	ldr	r3, [r1, #16]
 8010ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	bfb8      	it	lt
 8010efc:	4613      	movlt	r3, r2
 8010efe:	6033      	str	r3, [r6, #0]
 8010f00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f04:	4607      	mov	r7, r0
 8010f06:	460c      	mov	r4, r1
 8010f08:	b10a      	cbz	r2, 8010f0e <_printf_common+0x26>
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	6033      	str	r3, [r6, #0]
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	0699      	lsls	r1, r3, #26
 8010f12:	bf42      	ittt	mi
 8010f14:	6833      	ldrmi	r3, [r6, #0]
 8010f16:	3302      	addmi	r3, #2
 8010f18:	6033      	strmi	r3, [r6, #0]
 8010f1a:	6825      	ldr	r5, [r4, #0]
 8010f1c:	f015 0506 	ands.w	r5, r5, #6
 8010f20:	d106      	bne.n	8010f30 <_printf_common+0x48>
 8010f22:	f104 0a19 	add.w	sl, r4, #25
 8010f26:	68e3      	ldr	r3, [r4, #12]
 8010f28:	6832      	ldr	r2, [r6, #0]
 8010f2a:	1a9b      	subs	r3, r3, r2
 8010f2c:	42ab      	cmp	r3, r5
 8010f2e:	dc26      	bgt.n	8010f7e <_printf_common+0x96>
 8010f30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	3b00      	subs	r3, #0
 8010f38:	bf18      	it	ne
 8010f3a:	2301      	movne	r3, #1
 8010f3c:	0692      	lsls	r2, r2, #26
 8010f3e:	d42b      	bmi.n	8010f98 <_printf_common+0xb0>
 8010f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f44:	4641      	mov	r1, r8
 8010f46:	4638      	mov	r0, r7
 8010f48:	47c8      	blx	r9
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	d01e      	beq.n	8010f8c <_printf_common+0xa4>
 8010f4e:	6823      	ldr	r3, [r4, #0]
 8010f50:	6922      	ldr	r2, [r4, #16]
 8010f52:	f003 0306 	and.w	r3, r3, #6
 8010f56:	2b04      	cmp	r3, #4
 8010f58:	bf02      	ittt	eq
 8010f5a:	68e5      	ldreq	r5, [r4, #12]
 8010f5c:	6833      	ldreq	r3, [r6, #0]
 8010f5e:	1aed      	subeq	r5, r5, r3
 8010f60:	68a3      	ldr	r3, [r4, #8]
 8010f62:	bf0c      	ite	eq
 8010f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f68:	2500      	movne	r5, #0
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	bfc4      	itt	gt
 8010f6e:	1a9b      	subgt	r3, r3, r2
 8010f70:	18ed      	addgt	r5, r5, r3
 8010f72:	2600      	movs	r6, #0
 8010f74:	341a      	adds	r4, #26
 8010f76:	42b5      	cmp	r5, r6
 8010f78:	d11a      	bne.n	8010fb0 <_printf_common+0xc8>
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	e008      	b.n	8010f90 <_printf_common+0xa8>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	4652      	mov	r2, sl
 8010f82:	4641      	mov	r1, r8
 8010f84:	4638      	mov	r0, r7
 8010f86:	47c8      	blx	r9
 8010f88:	3001      	adds	r0, #1
 8010f8a:	d103      	bne.n	8010f94 <_printf_common+0xac>
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f94:	3501      	adds	r5, #1
 8010f96:	e7c6      	b.n	8010f26 <_printf_common+0x3e>
 8010f98:	18e1      	adds	r1, r4, r3
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	2030      	movs	r0, #48	@ 0x30
 8010f9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fa2:	4422      	add	r2, r4
 8010fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fac:	3302      	adds	r3, #2
 8010fae:	e7c7      	b.n	8010f40 <_printf_common+0x58>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	4641      	mov	r1, r8
 8010fb6:	4638      	mov	r0, r7
 8010fb8:	47c8      	blx	r9
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d0e6      	beq.n	8010f8c <_printf_common+0xa4>
 8010fbe:	3601      	adds	r6, #1
 8010fc0:	e7d9      	b.n	8010f76 <_printf_common+0x8e>
	...

08010fc4 <_printf_i>:
 8010fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc8:	7e0f      	ldrb	r7, [r1, #24]
 8010fca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fcc:	2f78      	cmp	r7, #120	@ 0x78
 8010fce:	4691      	mov	r9, r2
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	469a      	mov	sl, r3
 8010fd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fda:	d807      	bhi.n	8010fec <_printf_i+0x28>
 8010fdc:	2f62      	cmp	r7, #98	@ 0x62
 8010fde:	d80a      	bhi.n	8010ff6 <_printf_i+0x32>
 8010fe0:	2f00      	cmp	r7, #0
 8010fe2:	f000 80d2 	beq.w	801118a <_printf_i+0x1c6>
 8010fe6:	2f58      	cmp	r7, #88	@ 0x58
 8010fe8:	f000 80b9 	beq.w	801115e <_printf_i+0x19a>
 8010fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ff4:	e03a      	b.n	801106c <_printf_i+0xa8>
 8010ff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ffa:	2b15      	cmp	r3, #21
 8010ffc:	d8f6      	bhi.n	8010fec <_printf_i+0x28>
 8010ffe:	a101      	add	r1, pc, #4	@ (adr r1, 8011004 <_printf_i+0x40>)
 8011000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011004:	0801105d 	.word	0x0801105d
 8011008:	08011071 	.word	0x08011071
 801100c:	08010fed 	.word	0x08010fed
 8011010:	08010fed 	.word	0x08010fed
 8011014:	08010fed 	.word	0x08010fed
 8011018:	08010fed 	.word	0x08010fed
 801101c:	08011071 	.word	0x08011071
 8011020:	08010fed 	.word	0x08010fed
 8011024:	08010fed 	.word	0x08010fed
 8011028:	08010fed 	.word	0x08010fed
 801102c:	08010fed 	.word	0x08010fed
 8011030:	08011171 	.word	0x08011171
 8011034:	0801109b 	.word	0x0801109b
 8011038:	0801112b 	.word	0x0801112b
 801103c:	08010fed 	.word	0x08010fed
 8011040:	08010fed 	.word	0x08010fed
 8011044:	08011193 	.word	0x08011193
 8011048:	08010fed 	.word	0x08010fed
 801104c:	0801109b 	.word	0x0801109b
 8011050:	08010fed 	.word	0x08010fed
 8011054:	08010fed 	.word	0x08010fed
 8011058:	08011133 	.word	0x08011133
 801105c:	6833      	ldr	r3, [r6, #0]
 801105e:	1d1a      	adds	r2, r3, #4
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	6032      	str	r2, [r6, #0]
 8011064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801106c:	2301      	movs	r3, #1
 801106e:	e09d      	b.n	80111ac <_printf_i+0x1e8>
 8011070:	6833      	ldr	r3, [r6, #0]
 8011072:	6820      	ldr	r0, [r4, #0]
 8011074:	1d19      	adds	r1, r3, #4
 8011076:	6031      	str	r1, [r6, #0]
 8011078:	0606      	lsls	r6, r0, #24
 801107a:	d501      	bpl.n	8011080 <_printf_i+0xbc>
 801107c:	681d      	ldr	r5, [r3, #0]
 801107e:	e003      	b.n	8011088 <_printf_i+0xc4>
 8011080:	0645      	lsls	r5, r0, #25
 8011082:	d5fb      	bpl.n	801107c <_printf_i+0xb8>
 8011084:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011088:	2d00      	cmp	r5, #0
 801108a:	da03      	bge.n	8011094 <_printf_i+0xd0>
 801108c:	232d      	movs	r3, #45	@ 0x2d
 801108e:	426d      	negs	r5, r5
 8011090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011094:	4859      	ldr	r0, [pc, #356]	@ (80111fc <_printf_i+0x238>)
 8011096:	230a      	movs	r3, #10
 8011098:	e011      	b.n	80110be <_printf_i+0xfa>
 801109a:	6821      	ldr	r1, [r4, #0]
 801109c:	6833      	ldr	r3, [r6, #0]
 801109e:	0608      	lsls	r0, r1, #24
 80110a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80110a4:	d402      	bmi.n	80110ac <_printf_i+0xe8>
 80110a6:	0649      	lsls	r1, r1, #25
 80110a8:	bf48      	it	mi
 80110aa:	b2ad      	uxthmi	r5, r5
 80110ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80110ae:	4853      	ldr	r0, [pc, #332]	@ (80111fc <_printf_i+0x238>)
 80110b0:	6033      	str	r3, [r6, #0]
 80110b2:	bf14      	ite	ne
 80110b4:	230a      	movne	r3, #10
 80110b6:	2308      	moveq	r3, #8
 80110b8:	2100      	movs	r1, #0
 80110ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110be:	6866      	ldr	r6, [r4, #4]
 80110c0:	60a6      	str	r6, [r4, #8]
 80110c2:	2e00      	cmp	r6, #0
 80110c4:	bfa2      	ittt	ge
 80110c6:	6821      	ldrge	r1, [r4, #0]
 80110c8:	f021 0104 	bicge.w	r1, r1, #4
 80110cc:	6021      	strge	r1, [r4, #0]
 80110ce:	b90d      	cbnz	r5, 80110d4 <_printf_i+0x110>
 80110d0:	2e00      	cmp	r6, #0
 80110d2:	d04b      	beq.n	801116c <_printf_i+0x1a8>
 80110d4:	4616      	mov	r6, r2
 80110d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80110da:	fb03 5711 	mls	r7, r3, r1, r5
 80110de:	5dc7      	ldrb	r7, [r0, r7]
 80110e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110e4:	462f      	mov	r7, r5
 80110e6:	42bb      	cmp	r3, r7
 80110e8:	460d      	mov	r5, r1
 80110ea:	d9f4      	bls.n	80110d6 <_printf_i+0x112>
 80110ec:	2b08      	cmp	r3, #8
 80110ee:	d10b      	bne.n	8011108 <_printf_i+0x144>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	07df      	lsls	r7, r3, #31
 80110f4:	d508      	bpl.n	8011108 <_printf_i+0x144>
 80110f6:	6923      	ldr	r3, [r4, #16]
 80110f8:	6861      	ldr	r1, [r4, #4]
 80110fa:	4299      	cmp	r1, r3
 80110fc:	bfde      	ittt	le
 80110fe:	2330      	movle	r3, #48	@ 0x30
 8011100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011104:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011108:	1b92      	subs	r2, r2, r6
 801110a:	6122      	str	r2, [r4, #16]
 801110c:	f8cd a000 	str.w	sl, [sp]
 8011110:	464b      	mov	r3, r9
 8011112:	aa03      	add	r2, sp, #12
 8011114:	4621      	mov	r1, r4
 8011116:	4640      	mov	r0, r8
 8011118:	f7ff fee6 	bl	8010ee8 <_printf_common>
 801111c:	3001      	adds	r0, #1
 801111e:	d14a      	bne.n	80111b6 <_printf_i+0x1f2>
 8011120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011124:	b004      	add	sp, #16
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	f043 0320 	orr.w	r3, r3, #32
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	4833      	ldr	r0, [pc, #204]	@ (8011200 <_printf_i+0x23c>)
 8011134:	2778      	movs	r7, #120	@ 0x78
 8011136:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801113a:	6823      	ldr	r3, [r4, #0]
 801113c:	6831      	ldr	r1, [r6, #0]
 801113e:	061f      	lsls	r7, r3, #24
 8011140:	f851 5b04 	ldr.w	r5, [r1], #4
 8011144:	d402      	bmi.n	801114c <_printf_i+0x188>
 8011146:	065f      	lsls	r7, r3, #25
 8011148:	bf48      	it	mi
 801114a:	b2ad      	uxthmi	r5, r5
 801114c:	6031      	str	r1, [r6, #0]
 801114e:	07d9      	lsls	r1, r3, #31
 8011150:	bf44      	itt	mi
 8011152:	f043 0320 	orrmi.w	r3, r3, #32
 8011156:	6023      	strmi	r3, [r4, #0]
 8011158:	b11d      	cbz	r5, 8011162 <_printf_i+0x19e>
 801115a:	2310      	movs	r3, #16
 801115c:	e7ac      	b.n	80110b8 <_printf_i+0xf4>
 801115e:	4827      	ldr	r0, [pc, #156]	@ (80111fc <_printf_i+0x238>)
 8011160:	e7e9      	b.n	8011136 <_printf_i+0x172>
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	f023 0320 	bic.w	r3, r3, #32
 8011168:	6023      	str	r3, [r4, #0]
 801116a:	e7f6      	b.n	801115a <_printf_i+0x196>
 801116c:	4616      	mov	r6, r2
 801116e:	e7bd      	b.n	80110ec <_printf_i+0x128>
 8011170:	6833      	ldr	r3, [r6, #0]
 8011172:	6825      	ldr	r5, [r4, #0]
 8011174:	6961      	ldr	r1, [r4, #20]
 8011176:	1d18      	adds	r0, r3, #4
 8011178:	6030      	str	r0, [r6, #0]
 801117a:	062e      	lsls	r6, r5, #24
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	d501      	bpl.n	8011184 <_printf_i+0x1c0>
 8011180:	6019      	str	r1, [r3, #0]
 8011182:	e002      	b.n	801118a <_printf_i+0x1c6>
 8011184:	0668      	lsls	r0, r5, #25
 8011186:	d5fb      	bpl.n	8011180 <_printf_i+0x1bc>
 8011188:	8019      	strh	r1, [r3, #0]
 801118a:	2300      	movs	r3, #0
 801118c:	6123      	str	r3, [r4, #16]
 801118e:	4616      	mov	r6, r2
 8011190:	e7bc      	b.n	801110c <_printf_i+0x148>
 8011192:	6833      	ldr	r3, [r6, #0]
 8011194:	1d1a      	adds	r2, r3, #4
 8011196:	6032      	str	r2, [r6, #0]
 8011198:	681e      	ldr	r6, [r3, #0]
 801119a:	6862      	ldr	r2, [r4, #4]
 801119c:	2100      	movs	r1, #0
 801119e:	4630      	mov	r0, r6
 80111a0:	f7ef f836 	bl	8000210 <memchr>
 80111a4:	b108      	cbz	r0, 80111aa <_printf_i+0x1e6>
 80111a6:	1b80      	subs	r0, r0, r6
 80111a8:	6060      	str	r0, [r4, #4]
 80111aa:	6863      	ldr	r3, [r4, #4]
 80111ac:	6123      	str	r3, [r4, #16]
 80111ae:	2300      	movs	r3, #0
 80111b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111b4:	e7aa      	b.n	801110c <_printf_i+0x148>
 80111b6:	6923      	ldr	r3, [r4, #16]
 80111b8:	4632      	mov	r2, r6
 80111ba:	4649      	mov	r1, r9
 80111bc:	4640      	mov	r0, r8
 80111be:	47d0      	blx	sl
 80111c0:	3001      	adds	r0, #1
 80111c2:	d0ad      	beq.n	8011120 <_printf_i+0x15c>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	079b      	lsls	r3, r3, #30
 80111c8:	d413      	bmi.n	80111f2 <_printf_i+0x22e>
 80111ca:	68e0      	ldr	r0, [r4, #12]
 80111cc:	9b03      	ldr	r3, [sp, #12]
 80111ce:	4298      	cmp	r0, r3
 80111d0:	bfb8      	it	lt
 80111d2:	4618      	movlt	r0, r3
 80111d4:	e7a6      	b.n	8011124 <_printf_i+0x160>
 80111d6:	2301      	movs	r3, #1
 80111d8:	4632      	mov	r2, r6
 80111da:	4649      	mov	r1, r9
 80111dc:	4640      	mov	r0, r8
 80111de:	47d0      	blx	sl
 80111e0:	3001      	adds	r0, #1
 80111e2:	d09d      	beq.n	8011120 <_printf_i+0x15c>
 80111e4:	3501      	adds	r5, #1
 80111e6:	68e3      	ldr	r3, [r4, #12]
 80111e8:	9903      	ldr	r1, [sp, #12]
 80111ea:	1a5b      	subs	r3, r3, r1
 80111ec:	42ab      	cmp	r3, r5
 80111ee:	dcf2      	bgt.n	80111d6 <_printf_i+0x212>
 80111f0:	e7eb      	b.n	80111ca <_printf_i+0x206>
 80111f2:	2500      	movs	r5, #0
 80111f4:	f104 0619 	add.w	r6, r4, #25
 80111f8:	e7f5      	b.n	80111e6 <_printf_i+0x222>
 80111fa:	bf00      	nop
 80111fc:	0801228d 	.word	0x0801228d
 8011200:	0801229e 	.word	0x0801229e

08011204 <__sflush_r>:
 8011204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120c:	0716      	lsls	r6, r2, #28
 801120e:	4605      	mov	r5, r0
 8011210:	460c      	mov	r4, r1
 8011212:	d454      	bmi.n	80112be <__sflush_r+0xba>
 8011214:	684b      	ldr	r3, [r1, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	dc02      	bgt.n	8011220 <__sflush_r+0x1c>
 801121a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801121c:	2b00      	cmp	r3, #0
 801121e:	dd48      	ble.n	80112b2 <__sflush_r+0xae>
 8011220:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011222:	2e00      	cmp	r6, #0
 8011224:	d045      	beq.n	80112b2 <__sflush_r+0xae>
 8011226:	2300      	movs	r3, #0
 8011228:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801122c:	682f      	ldr	r7, [r5, #0]
 801122e:	6a21      	ldr	r1, [r4, #32]
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	d030      	beq.n	8011296 <__sflush_r+0x92>
 8011234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011236:	89a3      	ldrh	r3, [r4, #12]
 8011238:	0759      	lsls	r1, r3, #29
 801123a:	d505      	bpl.n	8011248 <__sflush_r+0x44>
 801123c:	6863      	ldr	r3, [r4, #4]
 801123e:	1ad2      	subs	r2, r2, r3
 8011240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011242:	b10b      	cbz	r3, 8011248 <__sflush_r+0x44>
 8011244:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011246:	1ad2      	subs	r2, r2, r3
 8011248:	2300      	movs	r3, #0
 801124a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801124c:	6a21      	ldr	r1, [r4, #32]
 801124e:	4628      	mov	r0, r5
 8011250:	47b0      	blx	r6
 8011252:	1c43      	adds	r3, r0, #1
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	d106      	bne.n	8011266 <__sflush_r+0x62>
 8011258:	6829      	ldr	r1, [r5, #0]
 801125a:	291d      	cmp	r1, #29
 801125c:	d82b      	bhi.n	80112b6 <__sflush_r+0xb2>
 801125e:	4a2a      	ldr	r2, [pc, #168]	@ (8011308 <__sflush_r+0x104>)
 8011260:	410a      	asrs	r2, r1
 8011262:	07d6      	lsls	r6, r2, #31
 8011264:	d427      	bmi.n	80112b6 <__sflush_r+0xb2>
 8011266:	2200      	movs	r2, #0
 8011268:	6062      	str	r2, [r4, #4]
 801126a:	04d9      	lsls	r1, r3, #19
 801126c:	6922      	ldr	r2, [r4, #16]
 801126e:	6022      	str	r2, [r4, #0]
 8011270:	d504      	bpl.n	801127c <__sflush_r+0x78>
 8011272:	1c42      	adds	r2, r0, #1
 8011274:	d101      	bne.n	801127a <__sflush_r+0x76>
 8011276:	682b      	ldr	r3, [r5, #0]
 8011278:	b903      	cbnz	r3, 801127c <__sflush_r+0x78>
 801127a:	6560      	str	r0, [r4, #84]	@ 0x54
 801127c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801127e:	602f      	str	r7, [r5, #0]
 8011280:	b1b9      	cbz	r1, 80112b2 <__sflush_r+0xae>
 8011282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011286:	4299      	cmp	r1, r3
 8011288:	d002      	beq.n	8011290 <__sflush_r+0x8c>
 801128a:	4628      	mov	r0, r5
 801128c:	f7ff fb40 	bl	8010910 <_free_r>
 8011290:	2300      	movs	r3, #0
 8011292:	6363      	str	r3, [r4, #52]	@ 0x34
 8011294:	e00d      	b.n	80112b2 <__sflush_r+0xae>
 8011296:	2301      	movs	r3, #1
 8011298:	4628      	mov	r0, r5
 801129a:	47b0      	blx	r6
 801129c:	4602      	mov	r2, r0
 801129e:	1c50      	adds	r0, r2, #1
 80112a0:	d1c9      	bne.n	8011236 <__sflush_r+0x32>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d0c6      	beq.n	8011236 <__sflush_r+0x32>
 80112a8:	2b1d      	cmp	r3, #29
 80112aa:	d001      	beq.n	80112b0 <__sflush_r+0xac>
 80112ac:	2b16      	cmp	r3, #22
 80112ae:	d11e      	bne.n	80112ee <__sflush_r+0xea>
 80112b0:	602f      	str	r7, [r5, #0]
 80112b2:	2000      	movs	r0, #0
 80112b4:	e022      	b.n	80112fc <__sflush_r+0xf8>
 80112b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ba:	b21b      	sxth	r3, r3
 80112bc:	e01b      	b.n	80112f6 <__sflush_r+0xf2>
 80112be:	690f      	ldr	r7, [r1, #16]
 80112c0:	2f00      	cmp	r7, #0
 80112c2:	d0f6      	beq.n	80112b2 <__sflush_r+0xae>
 80112c4:	0793      	lsls	r3, r2, #30
 80112c6:	680e      	ldr	r6, [r1, #0]
 80112c8:	bf08      	it	eq
 80112ca:	694b      	ldreq	r3, [r1, #20]
 80112cc:	600f      	str	r7, [r1, #0]
 80112ce:	bf18      	it	ne
 80112d0:	2300      	movne	r3, #0
 80112d2:	eba6 0807 	sub.w	r8, r6, r7
 80112d6:	608b      	str	r3, [r1, #8]
 80112d8:	f1b8 0f00 	cmp.w	r8, #0
 80112dc:	dde9      	ble.n	80112b2 <__sflush_r+0xae>
 80112de:	6a21      	ldr	r1, [r4, #32]
 80112e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112e2:	4643      	mov	r3, r8
 80112e4:	463a      	mov	r2, r7
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b0      	blx	r6
 80112ea:	2800      	cmp	r0, #0
 80112ec:	dc08      	bgt.n	8011300 <__sflush_r+0xfc>
 80112ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112f6:	81a3      	strh	r3, [r4, #12]
 80112f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	4407      	add	r7, r0
 8011302:	eba8 0800 	sub.w	r8, r8, r0
 8011306:	e7e7      	b.n	80112d8 <__sflush_r+0xd4>
 8011308:	dfbffffe 	.word	0xdfbffffe

0801130c <_fflush_r>:
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	690b      	ldr	r3, [r1, #16]
 8011310:	4605      	mov	r5, r0
 8011312:	460c      	mov	r4, r1
 8011314:	b913      	cbnz	r3, 801131c <_fflush_r+0x10>
 8011316:	2500      	movs	r5, #0
 8011318:	4628      	mov	r0, r5
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	b118      	cbz	r0, 8011326 <_fflush_r+0x1a>
 801131e:	6a03      	ldr	r3, [r0, #32]
 8011320:	b90b      	cbnz	r3, 8011326 <_fflush_r+0x1a>
 8011322:	f7ff f8fb 	bl	801051c <__sinit>
 8011326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d0f3      	beq.n	8011316 <_fflush_r+0xa>
 801132e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011330:	07d0      	lsls	r0, r2, #31
 8011332:	d404      	bmi.n	801133e <_fflush_r+0x32>
 8011334:	0599      	lsls	r1, r3, #22
 8011336:	d402      	bmi.n	801133e <_fflush_r+0x32>
 8011338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801133a:	f7ff faa6 	bl	801088a <__retarget_lock_acquire_recursive>
 801133e:	4628      	mov	r0, r5
 8011340:	4621      	mov	r1, r4
 8011342:	f7ff ff5f 	bl	8011204 <__sflush_r>
 8011346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011348:	07da      	lsls	r2, r3, #31
 801134a:	4605      	mov	r5, r0
 801134c:	d4e4      	bmi.n	8011318 <_fflush_r+0xc>
 801134e:	89a3      	ldrh	r3, [r4, #12]
 8011350:	059b      	lsls	r3, r3, #22
 8011352:	d4e1      	bmi.n	8011318 <_fflush_r+0xc>
 8011354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011356:	f7ff fa99 	bl	801088c <__retarget_lock_release_recursive>
 801135a:	e7dd      	b.n	8011318 <_fflush_r+0xc>

0801135c <fiprintf>:
 801135c:	b40e      	push	{r1, r2, r3}
 801135e:	b503      	push	{r0, r1, lr}
 8011360:	4601      	mov	r1, r0
 8011362:	ab03      	add	r3, sp, #12
 8011364:	4805      	ldr	r0, [pc, #20]	@ (801137c <fiprintf+0x20>)
 8011366:	f853 2b04 	ldr.w	r2, [r3], #4
 801136a:	6800      	ldr	r0, [r0, #0]
 801136c:	9301      	str	r3, [sp, #4]
 801136e:	f7ff fca3 	bl	8010cb8 <_vfiprintf_r>
 8011372:	b002      	add	sp, #8
 8011374:	f85d eb04 	ldr.w	lr, [sp], #4
 8011378:	b003      	add	sp, #12
 801137a:	4770      	bx	lr
 801137c:	200001e4 	.word	0x200001e4

08011380 <__swbuf_r>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	460e      	mov	r6, r1
 8011384:	4614      	mov	r4, r2
 8011386:	4605      	mov	r5, r0
 8011388:	b118      	cbz	r0, 8011392 <__swbuf_r+0x12>
 801138a:	6a03      	ldr	r3, [r0, #32]
 801138c:	b90b      	cbnz	r3, 8011392 <__swbuf_r+0x12>
 801138e:	f7ff f8c5 	bl	801051c <__sinit>
 8011392:	69a3      	ldr	r3, [r4, #24]
 8011394:	60a3      	str	r3, [r4, #8]
 8011396:	89a3      	ldrh	r3, [r4, #12]
 8011398:	071a      	lsls	r2, r3, #28
 801139a:	d501      	bpl.n	80113a0 <__swbuf_r+0x20>
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	b943      	cbnz	r3, 80113b2 <__swbuf_r+0x32>
 80113a0:	4621      	mov	r1, r4
 80113a2:	4628      	mov	r0, r5
 80113a4:	f000 f82a 	bl	80113fc <__swsetup_r>
 80113a8:	b118      	cbz	r0, 80113b2 <__swbuf_r+0x32>
 80113aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80113ae:	4638      	mov	r0, r7
 80113b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b2:	6823      	ldr	r3, [r4, #0]
 80113b4:	6922      	ldr	r2, [r4, #16]
 80113b6:	1a98      	subs	r0, r3, r2
 80113b8:	6963      	ldr	r3, [r4, #20]
 80113ba:	b2f6      	uxtb	r6, r6
 80113bc:	4283      	cmp	r3, r0
 80113be:	4637      	mov	r7, r6
 80113c0:	dc05      	bgt.n	80113ce <__swbuf_r+0x4e>
 80113c2:	4621      	mov	r1, r4
 80113c4:	4628      	mov	r0, r5
 80113c6:	f7ff ffa1 	bl	801130c <_fflush_r>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d1ed      	bne.n	80113aa <__swbuf_r+0x2a>
 80113ce:	68a3      	ldr	r3, [r4, #8]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	60a3      	str	r3, [r4, #8]
 80113d4:	6823      	ldr	r3, [r4, #0]
 80113d6:	1c5a      	adds	r2, r3, #1
 80113d8:	6022      	str	r2, [r4, #0]
 80113da:	701e      	strb	r6, [r3, #0]
 80113dc:	6962      	ldr	r2, [r4, #20]
 80113de:	1c43      	adds	r3, r0, #1
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d004      	beq.n	80113ee <__swbuf_r+0x6e>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	07db      	lsls	r3, r3, #31
 80113e8:	d5e1      	bpl.n	80113ae <__swbuf_r+0x2e>
 80113ea:	2e0a      	cmp	r6, #10
 80113ec:	d1df      	bne.n	80113ae <__swbuf_r+0x2e>
 80113ee:	4621      	mov	r1, r4
 80113f0:	4628      	mov	r0, r5
 80113f2:	f7ff ff8b 	bl	801130c <_fflush_r>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0d9      	beq.n	80113ae <__swbuf_r+0x2e>
 80113fa:	e7d6      	b.n	80113aa <__swbuf_r+0x2a>

080113fc <__swsetup_r>:
 80113fc:	b538      	push	{r3, r4, r5, lr}
 80113fe:	4b29      	ldr	r3, [pc, #164]	@ (80114a4 <__swsetup_r+0xa8>)
 8011400:	4605      	mov	r5, r0
 8011402:	6818      	ldr	r0, [r3, #0]
 8011404:	460c      	mov	r4, r1
 8011406:	b118      	cbz	r0, 8011410 <__swsetup_r+0x14>
 8011408:	6a03      	ldr	r3, [r0, #32]
 801140a:	b90b      	cbnz	r3, 8011410 <__swsetup_r+0x14>
 801140c:	f7ff f886 	bl	801051c <__sinit>
 8011410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011414:	0719      	lsls	r1, r3, #28
 8011416:	d422      	bmi.n	801145e <__swsetup_r+0x62>
 8011418:	06da      	lsls	r2, r3, #27
 801141a:	d407      	bmi.n	801142c <__swsetup_r+0x30>
 801141c:	2209      	movs	r2, #9
 801141e:	602a      	str	r2, [r5, #0]
 8011420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801142a:	e033      	b.n	8011494 <__swsetup_r+0x98>
 801142c:	0758      	lsls	r0, r3, #29
 801142e:	d512      	bpl.n	8011456 <__swsetup_r+0x5a>
 8011430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011432:	b141      	cbz	r1, 8011446 <__swsetup_r+0x4a>
 8011434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011438:	4299      	cmp	r1, r3
 801143a:	d002      	beq.n	8011442 <__swsetup_r+0x46>
 801143c:	4628      	mov	r0, r5
 801143e:	f7ff fa67 	bl	8010910 <_free_r>
 8011442:	2300      	movs	r3, #0
 8011444:	6363      	str	r3, [r4, #52]	@ 0x34
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	2300      	movs	r3, #0
 8011450:	6063      	str	r3, [r4, #4]
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	6023      	str	r3, [r4, #0]
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	f043 0308 	orr.w	r3, r3, #8
 801145c:	81a3      	strh	r3, [r4, #12]
 801145e:	6923      	ldr	r3, [r4, #16]
 8011460:	b94b      	cbnz	r3, 8011476 <__swsetup_r+0x7a>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801146c:	d003      	beq.n	8011476 <__swsetup_r+0x7a>
 801146e:	4621      	mov	r1, r4
 8011470:	4628      	mov	r0, r5
 8011472:	f000 f860 	bl	8011536 <__smakebuf_r>
 8011476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147a:	f013 0201 	ands.w	r2, r3, #1
 801147e:	d00a      	beq.n	8011496 <__swsetup_r+0x9a>
 8011480:	2200      	movs	r2, #0
 8011482:	60a2      	str	r2, [r4, #8]
 8011484:	6962      	ldr	r2, [r4, #20]
 8011486:	4252      	negs	r2, r2
 8011488:	61a2      	str	r2, [r4, #24]
 801148a:	6922      	ldr	r2, [r4, #16]
 801148c:	b942      	cbnz	r2, 80114a0 <__swsetup_r+0xa4>
 801148e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011492:	d1c5      	bne.n	8011420 <__swsetup_r+0x24>
 8011494:	bd38      	pop	{r3, r4, r5, pc}
 8011496:	0799      	lsls	r1, r3, #30
 8011498:	bf58      	it	pl
 801149a:	6962      	ldrpl	r2, [r4, #20]
 801149c:	60a2      	str	r2, [r4, #8]
 801149e:	e7f4      	b.n	801148a <__swsetup_r+0x8e>
 80114a0:	2000      	movs	r0, #0
 80114a2:	e7f7      	b.n	8011494 <__swsetup_r+0x98>
 80114a4:	200001e4 	.word	0x200001e4

080114a8 <memmove>:
 80114a8:	4288      	cmp	r0, r1
 80114aa:	b510      	push	{r4, lr}
 80114ac:	eb01 0402 	add.w	r4, r1, r2
 80114b0:	d902      	bls.n	80114b8 <memmove+0x10>
 80114b2:	4284      	cmp	r4, r0
 80114b4:	4623      	mov	r3, r4
 80114b6:	d807      	bhi.n	80114c8 <memmove+0x20>
 80114b8:	1e43      	subs	r3, r0, #1
 80114ba:	42a1      	cmp	r1, r4
 80114bc:	d008      	beq.n	80114d0 <memmove+0x28>
 80114be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114c6:	e7f8      	b.n	80114ba <memmove+0x12>
 80114c8:	4402      	add	r2, r0
 80114ca:	4601      	mov	r1, r0
 80114cc:	428a      	cmp	r2, r1
 80114ce:	d100      	bne.n	80114d2 <memmove+0x2a>
 80114d0:	bd10      	pop	{r4, pc}
 80114d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114da:	e7f7      	b.n	80114cc <memmove+0x24>

080114dc <abort>:
 80114dc:	b508      	push	{r3, lr}
 80114de:	2006      	movs	r0, #6
 80114e0:	f000 f88e 	bl	8011600 <raise>
 80114e4:	2001      	movs	r0, #1
 80114e6:	f7ef ff7d 	bl	80013e4 <_exit>

080114ea <__swhatbuf_r>:
 80114ea:	b570      	push	{r4, r5, r6, lr}
 80114ec:	460c      	mov	r4, r1
 80114ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114f2:	2900      	cmp	r1, #0
 80114f4:	b096      	sub	sp, #88	@ 0x58
 80114f6:	4615      	mov	r5, r2
 80114f8:	461e      	mov	r6, r3
 80114fa:	da0d      	bge.n	8011518 <__swhatbuf_r+0x2e>
 80114fc:	89a3      	ldrh	r3, [r4, #12]
 80114fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011502:	f04f 0100 	mov.w	r1, #0
 8011506:	bf14      	ite	ne
 8011508:	2340      	movne	r3, #64	@ 0x40
 801150a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801150e:	2000      	movs	r0, #0
 8011510:	6031      	str	r1, [r6, #0]
 8011512:	602b      	str	r3, [r5, #0]
 8011514:	b016      	add	sp, #88	@ 0x58
 8011516:	bd70      	pop	{r4, r5, r6, pc}
 8011518:	466a      	mov	r2, sp
 801151a:	f000 f879 	bl	8011610 <_fstat_r>
 801151e:	2800      	cmp	r0, #0
 8011520:	dbec      	blt.n	80114fc <__swhatbuf_r+0x12>
 8011522:	9901      	ldr	r1, [sp, #4]
 8011524:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011528:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801152c:	4259      	negs	r1, r3
 801152e:	4159      	adcs	r1, r3
 8011530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011534:	e7eb      	b.n	801150e <__swhatbuf_r+0x24>

08011536 <__smakebuf_r>:
 8011536:	898b      	ldrh	r3, [r1, #12]
 8011538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801153a:	079d      	lsls	r5, r3, #30
 801153c:	4606      	mov	r6, r0
 801153e:	460c      	mov	r4, r1
 8011540:	d507      	bpl.n	8011552 <__smakebuf_r+0x1c>
 8011542:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011546:	6023      	str	r3, [r4, #0]
 8011548:	6123      	str	r3, [r4, #16]
 801154a:	2301      	movs	r3, #1
 801154c:	6163      	str	r3, [r4, #20]
 801154e:	b003      	add	sp, #12
 8011550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011552:	ab01      	add	r3, sp, #4
 8011554:	466a      	mov	r2, sp
 8011556:	f7ff ffc8 	bl	80114ea <__swhatbuf_r>
 801155a:	9f00      	ldr	r7, [sp, #0]
 801155c:	4605      	mov	r5, r0
 801155e:	4639      	mov	r1, r7
 8011560:	4630      	mov	r0, r6
 8011562:	f7fe fda9 	bl	80100b8 <_malloc_r>
 8011566:	b948      	cbnz	r0, 801157c <__smakebuf_r+0x46>
 8011568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801156c:	059a      	lsls	r2, r3, #22
 801156e:	d4ee      	bmi.n	801154e <__smakebuf_r+0x18>
 8011570:	f023 0303 	bic.w	r3, r3, #3
 8011574:	f043 0302 	orr.w	r3, r3, #2
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	e7e2      	b.n	8011542 <__smakebuf_r+0xc>
 801157c:	89a3      	ldrh	r3, [r4, #12]
 801157e:	6020      	str	r0, [r4, #0]
 8011580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011584:	81a3      	strh	r3, [r4, #12]
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801158c:	b15b      	cbz	r3, 80115a6 <__smakebuf_r+0x70>
 801158e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011592:	4630      	mov	r0, r6
 8011594:	f000 f84e 	bl	8011634 <_isatty_r>
 8011598:	b128      	cbz	r0, 80115a6 <__smakebuf_r+0x70>
 801159a:	89a3      	ldrh	r3, [r4, #12]
 801159c:	f023 0303 	bic.w	r3, r3, #3
 80115a0:	f043 0301 	orr.w	r3, r3, #1
 80115a4:	81a3      	strh	r3, [r4, #12]
 80115a6:	89a3      	ldrh	r3, [r4, #12]
 80115a8:	431d      	orrs	r5, r3
 80115aa:	81a5      	strh	r5, [r4, #12]
 80115ac:	e7cf      	b.n	801154e <__smakebuf_r+0x18>

080115ae <_raise_r>:
 80115ae:	291f      	cmp	r1, #31
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4605      	mov	r5, r0
 80115b4:	460c      	mov	r4, r1
 80115b6:	d904      	bls.n	80115c2 <_raise_r+0x14>
 80115b8:	2316      	movs	r3, #22
 80115ba:	6003      	str	r3, [r0, #0]
 80115bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115c0:	bd38      	pop	{r3, r4, r5, pc}
 80115c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115c4:	b112      	cbz	r2, 80115cc <_raise_r+0x1e>
 80115c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115ca:	b94b      	cbnz	r3, 80115e0 <_raise_r+0x32>
 80115cc:	4628      	mov	r0, r5
 80115ce:	f000 f853 	bl	8011678 <_getpid_r>
 80115d2:	4622      	mov	r2, r4
 80115d4:	4601      	mov	r1, r0
 80115d6:	4628      	mov	r0, r5
 80115d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115dc:	f000 b83a 	b.w	8011654 <_kill_r>
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d00a      	beq.n	80115fa <_raise_r+0x4c>
 80115e4:	1c59      	adds	r1, r3, #1
 80115e6:	d103      	bne.n	80115f0 <_raise_r+0x42>
 80115e8:	2316      	movs	r3, #22
 80115ea:	6003      	str	r3, [r0, #0]
 80115ec:	2001      	movs	r0, #1
 80115ee:	e7e7      	b.n	80115c0 <_raise_r+0x12>
 80115f0:	2100      	movs	r1, #0
 80115f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115f6:	4620      	mov	r0, r4
 80115f8:	4798      	blx	r3
 80115fa:	2000      	movs	r0, #0
 80115fc:	e7e0      	b.n	80115c0 <_raise_r+0x12>
	...

08011600 <raise>:
 8011600:	4b02      	ldr	r3, [pc, #8]	@ (801160c <raise+0xc>)
 8011602:	4601      	mov	r1, r0
 8011604:	6818      	ldr	r0, [r3, #0]
 8011606:	f7ff bfd2 	b.w	80115ae <_raise_r>
 801160a:	bf00      	nop
 801160c:	200001e4 	.word	0x200001e4

08011610 <_fstat_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4d07      	ldr	r5, [pc, #28]	@ (8011630 <_fstat_r+0x20>)
 8011614:	2300      	movs	r3, #0
 8011616:	4604      	mov	r4, r0
 8011618:	4608      	mov	r0, r1
 801161a:	4611      	mov	r1, r2
 801161c:	602b      	str	r3, [r5, #0]
 801161e:	f7ef ff31 	bl	8001484 <_fstat>
 8011622:	1c43      	adds	r3, r0, #1
 8011624:	d102      	bne.n	801162c <_fstat_r+0x1c>
 8011626:	682b      	ldr	r3, [r5, #0]
 8011628:	b103      	cbz	r3, 801162c <_fstat_r+0x1c>
 801162a:	6023      	str	r3, [r4, #0]
 801162c:	bd38      	pop	{r3, r4, r5, pc}
 801162e:	bf00      	nop
 8011630:	2000dd6c 	.word	0x2000dd6c

08011634 <_isatty_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4d06      	ldr	r5, [pc, #24]	@ (8011650 <_isatty_r+0x1c>)
 8011638:	2300      	movs	r3, #0
 801163a:	4604      	mov	r4, r0
 801163c:	4608      	mov	r0, r1
 801163e:	602b      	str	r3, [r5, #0]
 8011640:	f7ef ff30 	bl	80014a4 <_isatty>
 8011644:	1c43      	adds	r3, r0, #1
 8011646:	d102      	bne.n	801164e <_isatty_r+0x1a>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	b103      	cbz	r3, 801164e <_isatty_r+0x1a>
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	2000dd6c 	.word	0x2000dd6c

08011654 <_kill_r>:
 8011654:	b538      	push	{r3, r4, r5, lr}
 8011656:	4d07      	ldr	r5, [pc, #28]	@ (8011674 <_kill_r+0x20>)
 8011658:	2300      	movs	r3, #0
 801165a:	4604      	mov	r4, r0
 801165c:	4608      	mov	r0, r1
 801165e:	4611      	mov	r1, r2
 8011660:	602b      	str	r3, [r5, #0]
 8011662:	f7ef feaf 	bl	80013c4 <_kill>
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	d102      	bne.n	8011670 <_kill_r+0x1c>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	b103      	cbz	r3, 8011670 <_kill_r+0x1c>
 801166e:	6023      	str	r3, [r4, #0]
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	bf00      	nop
 8011674:	2000dd6c 	.word	0x2000dd6c

08011678 <_getpid_r>:
 8011678:	f7ef be9c 	b.w	80013b4 <_getpid>

0801167c <_init>:
 801167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167e:	bf00      	nop
 8011680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011682:	bc08      	pop	{r3}
 8011684:	469e      	mov	lr, r3
 8011686:	4770      	bx	lr

08011688 <_fini>:
 8011688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168a:	bf00      	nop
 801168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801168e:	bc08      	pop	{r3}
 8011690:	469e      	mov	lr, r3
 8011692:	4770      	bx	lr
