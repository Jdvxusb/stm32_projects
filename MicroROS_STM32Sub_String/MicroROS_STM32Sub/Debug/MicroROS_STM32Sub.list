
MicroROS_STM32Sub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014358  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  080144f8  080144f8  000154f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015330  08015330  00017110  2**0
                  CONTENTS
  4 .ARM          00000008  08015330  08015330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015338  08015338  00017110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015338  08015338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015340  08015340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08015344  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db00  20000110  08015454  00017110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc10  08015454  00017c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001561c  00000000  00000000  00017140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362e  00000000  00000000  0002c75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  00030e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000834c  00000000  00000000  00031af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014778  00000000  00000000  00039e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b04e  00000000  00000000  0004e5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000e9604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005258  00000000  00000000  000e967c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ee8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080144e0 	.word	0x080144e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	080144e0 	.word	0x080144e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f005 f806 	bl	800565c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f004 ff75 	bl	8005678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003d34 	.word	0x20003d34
 80007c0:	20003d40 	.word	0x20003d40
 80007c4:	20003d38 	.word	0x20003d38
 80007c8:	20003d2c 	.word	0x20003d2c
 80007cc:	20003d3c 	.word	0x20003d3c

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f004 fefe 	bl	800565c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f004 ff00 	bl	8005678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d40 	.word	0x20003d40
 8000884:	20003d38 	.word	0x20003d38

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d40 	.word	0x20003d40

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f004 fec5 	bl	800565c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f012 ffaa 	bl	801385e <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f004 feb2 	bl	8005678 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f004 fe98 	bl	800565c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f004 fe8e 	bl	8005678 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	20003d2c 	.word	0x20003d2c
 8000a1c:	20003d34 	.word	0x20003d34
 8000a20:	20003d3c 	.word	0x20003d3c
 8000a24:	20003d38 	.word	0x20003d38
 8000a28:	20003d40 	.word	0x20003d40

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003d2c 	.word	0x20003d2c
 8000adc:	20003d34 	.word	0x20003d34

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fe4a 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81c 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d8 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 f8ae 	bl	8000c50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 f882 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 fc92 	bl	8004420 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000afc:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <main+0x38>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <main+0x3c>)
 8000b02:	f003 fcd7 	bl	80044b4 <osThreadNew>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <main+0x40>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f003 fcac 	bl	8004468 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  StartDefaultTask(NULL);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f945 	bl	8000da0 <StartDefaultTask>
 8000b16:	e7fb      	b.n	8000b10 <main+0x30>
 8000b18:	0801457c 	.word	0x0801457c
 8000b1c:	08000da1 	.word	0x08000da1
 8000b20:	20003e4c 	.word	0x20003e4c

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	@ 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	@ 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f012 fdca 	bl	80136cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	4a28      	ldr	r2, [pc, #160]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <SystemClock_Config+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fd08 	bl	80025c4 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bba:	f000 f99b 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 ff6a 	bl	8002ab4 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000be6:	f000 f985 	bl	8000ef4 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	@ 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 f95e 	bl	8002ef4 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f959 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20003d44 	.word	0x20003d44
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <MX_DMA_Init+0x4c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <MX_DMA_Init+0x4c>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <MX_DMA_Init+0x4c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2010      	movs	r0, #16
 8000c78:	f000 fecd 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c7c:	2010      	movs	r0, #16
 8000c7e:	f000 fee6 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	2011      	movs	r0, #17
 8000c88:	f000 fec5 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c8c:	2011      	movs	r0, #17
 8000c8e:	f000 fede 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a25      	ldr	r2, [pc, #148]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <MX_GPIO_Init+0xd4>)
 8000d2c:	f001 fc30 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_GPIO_Init+0xd8>)
 8000d48:	f001 fa9e 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_GPIO_Init+0xd4>)
 8000d64:	f001 fa90 	bl	8002288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020800 	.word	0x40020800

08000d7c <subscription_callback>:

void (* rclc_subscription_callback)(const void *);



void subscription_callback(const void * msgin){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	const std_msgs__msg__String * msg= (const std_msgs__msg__String *)msgin;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60fb      	str	r3, [r7, #12]
	    // Process message
	        // Turn ON GPIOA5 (set the pin high)
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <subscription_callback+0x20>)
 8000d8e:	f001 fbff 	bl	8002590 <HAL_GPIO_WritePin>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020000 	.word	0x40020000

08000da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b0ca      	sub	sp, #296	@ 0x128
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dae:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8000db0:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <StartDefaultTask+0x11c>)
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <StartDefaultTask+0x120>)
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <StartDefaultTask+0x124>)
 8000dba:	4a43      	ldr	r2, [pc, #268]	@ (8000ec8 <StartDefaultTask+0x128>)
 8000dbc:	4943      	ldr	r1, [pc, #268]	@ (8000ecc <StartDefaultTask+0x12c>)
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f007 f87e 	bl	8007ec0 <rmw_uros_set_custom_transport>
	        cubemx_transport_open,
	        cubemx_transport_close,
	        cubemx_transport_write,
	        cubemx_transport_read);

	    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000dc4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f006 ffaf 	bl	8007d2c <rcutils_get_zero_initialized_allocator>
	    freeRTOS_allocator.allocate = microros_allocate;
 8000dce:	4b40      	ldr	r3, [pc, #256]	@ (8000ed0 <StartDefaultTask+0x130>)
 8000dd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	    freeRTOS_allocator.deallocate = microros_deallocate;
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed4 <StartDefaultTask+0x134>)
 8000dd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	    freeRTOS_allocator.reallocate = microros_reallocate;
 8000dda:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <StartDefaultTask+0x138>)
 8000ddc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	    freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8000de0:	4b3e      	ldr	r3, [pc, #248]	@ (8000edc <StartDefaultTask+0x13c>)
 8000de2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000de6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 ffac 	bl	8007d48 <rcutils_set_default_allocator>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <StartDefaultTask+0x66>
	        printf("Error on default allocators (line %d)\n", __LINE__);
 8000dfc:	f240 1161 	movw	r1, #353	@ 0x161
 8000e00:	4837      	ldr	r0, [pc, #220]	@ (8000ee0 <StartDefaultTask+0x140>)
 8000e02:	f012 fae3 	bl	80133cc <iprintf>
	    rclc_support_t support;
	    rclc_executor_t executor;
	    rcl_allocator_t allocator;
	    rcl_node_t node;

	    allocator = rcl_get_default_allocator();
 8000e06:	463b      	mov	r3, r7
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 ffbb 	bl	8007d84 <rcutils_get_default_allocator>
 8000e0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e16:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	6023      	str	r3, [r4, #0]

	    // create init_options
	    rclc_support_init(&support, 0, NULL, &allocator);
 8000e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e28:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f006 feba 	bl	8007ba8 <rclc_support_init>
	    rclc_executor_init(&executor, &support.context, 1, &allocator);
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8000e3c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e40:	2201      	movs	r2, #1
 8000e42:	f006 fbe1 	bl	8007608 <rclc_executor_init>

	    std_msgs__msg__String__init(&msg);
 8000e46:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f007 f84e 	bl	8007eec <std_msgs__msg__String__init>
	    msg.data.data = (char*)allocator.reallocate(msg.data.data, 50, allocator.state);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e52:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8000e56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e58:	2132      	movs	r1, #50	@ 0x32
 8000e5a:	4798      	blx	r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	    msg.data.capacity = 50;
 8000e62:	2332      	movs	r3, #50	@ 0x32
 8000e64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

	    // create node
	    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000e68:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e6c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000e70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <StartDefaultTask+0x144>)
 8000e72:	491d      	ldr	r1, [pc, #116]	@ (8000ee8 <StartDefaultTask+0x148>)
 8000e74:	f006 fee2 	bl	8007c3c <rclc_node_init_default>

	    // create subscription
	    rclc_subscription_init_default(
 8000e78:	f007 f84e 	bl	8007f18 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <StartDefaultTask+0x14c>)
 8000e88:	f006 ff14 	bl	8007cb4 <rclc_subscription_init_default>
	        &subscriber,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	        "stm32_topic");
	    rclc_executor_add_subscription(
 8000e8c:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 8000e90:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000e94:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <StartDefaultTask+0x150>)
 8000e9e:	f006 fc23 	bl	80076e8 <rclc_executor_add_subscription>
	      &executor, &subscriber, &msg,
	      &subscription_callback, ON_NEW_DATA);
	    // Spin and wait for messages
    	//rclc_executor_spin(&executor);
	    	rclc_executor_spin(&executor);
 8000ea2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 fe3e 	bl	8007b28 <rclc_executor_spin>
	        osDelay(10);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f003 fb93 	bl	80045d8 <osDelay>
  /* USER CODE END 5 */
}
 8000eb2:	bf00      	nop
 8000eb4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebc:	08001681 	.word	0x08001681
 8000ec0:	08001619 	.word	0x08001619
 8000ec4:	080015f9 	.word	0x080015f9
 8000ec8:	080015cd 	.word	0x080015cd
 8000ecc:	20003d44 	.word	0x20003d44
 8000ed0:	08000f01 	.word	0x08000f01
 8000ed4:	08000f45 	.word	0x08000f45
 8000ed8:	08000f7d 	.word	0x08000f7d
 8000edc:	08000fe9 	.word	0x08000fe9
 8000ee0:	08014504 	.word	0x08014504
 8000ee4:	0801452c 	.word	0x0801452c
 8000ee8:	08014530 	.word	0x08014530
 8000eec:	0801453c 	.word	0x0801453c
 8000ef0:	08000d7d 	.word	0x08000d7d

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <microros_allocate+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <microros_allocate+0x3c>)
 8000f18:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <microros_allocate+0x40>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <microros_allocate+0x40>)
 8000f28:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fb88 	bl	8000640 <pvPortMallocMicroROS>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20003e50 	.word	0x20003e50
 8000f40:	20003e54 	.word	0x20003e54

08000f44 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00c      	beq.n	8000f6e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fc97 	bl	8000888 <getBlockSize>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <microros_deallocate+0x34>)
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <microros_deallocate+0x34>)
 8000f66:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fc31 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20003e54 	.word	0x20003e54

08000f7c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <microros_reallocate+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <microros_reallocate+0x64>)
 8000f96:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <microros_reallocate+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <microros_reallocate+0x68>)
 8000fa6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d104      	bne.n	8000fb8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000fae:	68b8      	ldr	r0, [r7, #8]
 8000fb0:	f7ff fb46 	bl	8000640 <pvPortMallocMicroROS>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	e00e      	b.n	8000fd6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fc65 	bl	8000888 <getBlockSize>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <microros_reallocate+0x68>)
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <microros_reallocate+0x68>)
 8000fca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fc78 	bl	80008c4 <pvPortReallocMicroROS>
 8000fd4:	4603      	mov	r3, r0
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20003e50 	.word	0x20003e50
 8000fe4:	20003e54 	.word	0x20003e54

08000fe8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <microros_zero_allocate+0x48>)
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4413      	add	r3, r2
 8001002:	461a      	mov	r2, r3
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <microros_zero_allocate+0x48>)
 8001006:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <microros_zero_allocate+0x4c>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4413      	add	r3, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <microros_zero_allocate+0x4c>)
 800101a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff fc7d 	bl	800091e <pvPortCallocMicroROS>
 8001024:	4603      	mov	r3, r0
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20003e50 	.word	0x20003e50
 8001034:	20003e54 	.word	0x20003e54

08001038 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800104a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800104e:	a320      	add	r3, pc, #128	@ (adr r3, 80010d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff f92c 	bl	80002b0 <__aeabi_ldivmod>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001066:	a31a      	add	r3, pc, #104	@ (adr r3, 80010d0 <UTILS_NanosecondsToTimespec+0x98>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f920 	bl	80002b0 <__aeabi_ldivmod>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da20      	bge.n	80010be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <UTILS_NanosecondsToTimespec+0x90>)
 8001082:	fb82 1203 	smull	r1, r2, r2, r3
 8001086:	1712      	asrs	r2, r2, #28
 8001088:	17db      	asrs	r3, r3, #31
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	17c8      	asrs	r0, r1, #31
 800109a:	460c      	mov	r4, r1
 800109c:	4605      	mov	r5, r0
 800109e:	ebb2 0804 	subs.w	r8, r2, r4
 80010a2:	eb63 0905 	sbc.w	r9, r3, r5
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4906      	ldr	r1, [pc, #24]	@ (80010cc <UTILS_NanosecondsToTimespec+0x94>)
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	441a      	add	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
    }
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010c8:	44b82fa1 	.word	0x44b82fa1
 80010cc:	3b9aca00 	.word	0x3b9aca00
 80010d0:	3b9aca00 	.word	0x3b9aca00
 80010d4:	00000000 	.word	0x00000000

080010d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80010d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010dc:	b08e      	sub	sp, #56	@ 0x38
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80010e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80010e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010e8:	2300      	movs	r3, #0
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80010fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fd36 	bl	8005b70 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001106:	17da      	asrs	r2, r3, #31
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	61fa      	str	r2, [r7, #28]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	69b9      	ldr	r1, [r7, #24]
 8001116:	000b      	movs	r3, r1
 8001118:	2200      	movs	r2, #0
 800111a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800111e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001120:	2200      	movs	r2, #0
 8001122:	461c      	mov	r4, r3
 8001124:	4615      	mov	r5, r2
 8001126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800112a:	1911      	adds	r1, r2, r4
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	416b      	adcs	r3, r5
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001136:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800113a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f04f 0400 	mov.w	r4, #0
 8001146:	f04f 0500 	mov.w	r5, #0
 800114a:	015d      	lsls	r5, r3, #5
 800114c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001150:	0154      	lsls	r4, r2, #5
 8001152:	4622      	mov	r2, r4
 8001154:	462b      	mov	r3, r5
 8001156:	ebb2 0800 	subs.w	r8, r2, r0
 800115a:	eb63 0901 	sbc.w	r9, r3, r1
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800116a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800116e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001172:	4690      	mov	r8, r2
 8001174:	4699      	mov	r9, r3
 8001176:	eb18 0a00 	adds.w	sl, r8, r0
 800117a:	eb49 0b01 	adc.w	fp, r9, r1
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800118a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800118e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001192:	ebb2 040a 	subs.w	r4, r2, sl
 8001196:	603c      	str	r4, [r7, #0]
 8001198:	eb63 030b 	sbc.w	r3, r3, fp
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011a2:	4623      	mov	r3, r4
 80011a4:	181b      	adds	r3, r3, r0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	462b      	mov	r3, r5
 80011aa:	eb41 0303 	adc.w	r3, r1, r3
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	6a3a      	ldr	r2, [r7, #32]
 80011b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011b6:	f7ff ff3f 	bl	8001038 <UTILS_NanosecondsToTimespec>

    return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	3738      	adds	r7, #56	@ 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_MspInit+0x54>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_MspInit+0x54>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_MspInit+0x54>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_MspInit+0x54>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_MspInit+0x54>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_MspInit+0x54>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	210f      	movs	r1, #15
 800120a:	f06f 0001 	mvn.w	r0, #1
 800120e:	f000 fc02 	bl	8001a16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_UART_MspInit+0x154>)
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 8093 	bne.w	800136a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a4a      	ldr	r2, [pc, #296]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800124e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b48      	ldr	r3, [pc, #288]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <HAL_UART_MspInit+0x158>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <HAL_UART_MspInit+0x158>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800127c:	230c      	movs	r3, #12
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4839      	ldr	r0, [pc, #228]	@ (800137c <HAL_UART_MspInit+0x15c>)
 8001298:	f000 fff6 	bl	8002288 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800129c:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <HAL_UART_MspInit+0x160>)
 800129e:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_UART_MspInit+0x164>)
 80012a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012a2:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b0:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b6:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012be:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012e0:	4827      	ldr	r0, [pc, #156]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012e2:	f000 fbcf 	bl	8001a84 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80012ec:	f7ff fe02 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a23      	ldr	r2, [pc, #140]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f6:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <HAL_UART_MspInit+0x160>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_UART_MspInit+0x168>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_UART_MspInit+0x16c>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001304:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001308:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001332:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001336:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <HAL_UART_MspInit+0x168>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800133e:	4812      	ldr	r0, [pc, #72]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001340:	f000 fba0 	bl	8001a84 <HAL_DMA_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800134a:	f7ff fdd3 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001352:	639a      	str	r2, [r3, #56]	@ 0x38
 8001354:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <HAL_UART_MspInit+0x168>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2105      	movs	r1, #5
 800135e:	2026      	movs	r0, #38	@ 0x26
 8001360:	f000 fb59 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001364:	2026      	movs	r0, #38	@ 0x26
 8001366:	f000 fb72 	bl	8001a4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004400 	.word	0x40004400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000
 8001380:	20003d8c 	.word	0x20003d8c
 8001384:	40026088 	.word	0x40026088
 8001388:	20003dec 	.word	0x20003dec
 800138c:	400260a0 	.word	0x400260a0

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 fa29 	bl	8001820 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ce:	f004 fd53 	bl	8005e78 <xTaskGetSchedulerState>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d001      	beq.n	80013dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013d8:	f005 fb4e 	bl	8006a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Stream5_IRQHandler+0x10>)
 80013e6:	f000 fce5 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20003d8c 	.word	0x20003d8c

080013f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Stream6_IRQHandler+0x10>)
 80013fa:	f000 fcdb 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20003dec 	.word	0x20003dec

08001408 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <USART2_IRQHandler+0x10>)
 800140e:	f001 fed5 	bl	80031bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20003d44 	.word	0x20003d44

0800141c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_kill>:

int _kill(int pid, int sig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001436:	f012 f9dd 	bl	80137f4 <__errno>
 800143a:	4603      	mov	r3, r0
 800143c:	2216      	movs	r2, #22
 800143e:	601a      	str	r2, [r3, #0]
  return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_exit>:

void _exit (int status)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001454:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffe7 	bl	800142c <_kill>
  while (1) {}    /* Make sure we hang here */
 800145e:	bf00      	nop
 8001460:	e7fd      	b.n	800145e <_exit+0x12>

08001462 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e00a      	b.n	800148a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001474:	f3af 8000 	nop.w
 8001478:	4601      	mov	r1, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	b2ca      	uxtb	r2, r1
 8001482:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf0      	blt.n	8001474 <_read+0x12>
  }

  return len;
 8001492:	687b      	ldr	r3, [r7, #4]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e009      	b.n	80014c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf1      	blt.n	80014ae <_write+0x12>
  }
  return len;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_close>:

int _close(int file)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_isatty>:

int _isatty(int file)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f012 f942 	bl	80137f4 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20018000 	.word	0x20018000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20003e5c 	.word	0x20003e5c
 80015a4:	2000dc10 	.word	0x2000dc10

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80015dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015e0:	4904      	ldr	r1, [pc, #16]	@ (80015f4 <cubemx_transport_open+0x28>)
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f001 fd46 	bl	8003074 <HAL_UART_Receive_DMA>
    return true;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20003e60 	.word	0x20003e60

080015f8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001606:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f001 fd58 	bl	80030be <HAL_UART_DMAStop>
    return true;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800162c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b20      	cmp	r3, #32
 8001638:	d11c      	bne.n	8001674 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f001 fca6 	bl	8002f94 <HAL_UART_Transmit_DMA>
 8001648:	4603      	mov	r3, r0
 800164a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800164c:	e002      	b.n	8001654 <cubemx_transport_write+0x3c>
            osDelay(1);
 800164e:	2001      	movs	r0, #1
 8001650:	f002 ffc2 	bl	80045d8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <cubemx_transport_write+0x4e>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	d1f3      	bne.n	800164e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001666:	7cfb      	ldrb	r3, [r7, #19]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <cubemx_transport_write+0x58>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	e002      	b.n	8001676 <cubemx_transport_write+0x5e>
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001674:	2300      	movs	r3, #0
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001694:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
}
 800169c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <cubemx_transport_read+0x9c>)
 80016ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ae:	b662      	cpsie	i
}
 80016b0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f002 ff8d 	bl	80045d8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <cubemx_transport_read+0xa0>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <cubemx_transport_read+0x9c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d103      	bne.n	80016d2 <cubemx_transport_read+0x52>
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbe3      	blt.n	800169a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016d6:	e011      	b.n	80016fc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <cubemx_transport_read+0xa0>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	440b      	add	r3, r1
 80016e2:	4910      	ldr	r1, [pc, #64]	@ (8001724 <cubemx_transport_read+0xa4>)
 80016e4:	5c8a      	ldrb	r2, [r1, r2]
 80016e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <cubemx_transport_read+0xa0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <cubemx_transport_read+0xa0>)
 80016f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <cubemx_transport_read+0xa0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <cubemx_transport_read+0x9c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d003      	beq.n	8001710 <cubemx_transport_read+0x90>
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3e3      	bcc.n	80016d8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001710:	69bb      	ldr	r3, [r7, #24]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20004664 	.word	0x20004664
 8001720:	20004660 	.word	0x20004660
 8001724:	20003e60 	.word	0x20003e60

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800172c:	f7ff ff3c 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001756:	f012 f853 	bl	8013800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff f9c1 	bl	8000ae0 <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800176c:	08015344 	.word	0x08015344
  ldr r2, =_sbss
 8001770:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001774:	2000dc10 	.word	0x2000dc10

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f92b 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fd0a 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f943 	bl	8001a6a <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017fc:	f000 f90b 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000004 	.word	0x20000004
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20004668 	.word	0x20004668

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20004668 	.word	0x20004668

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	@ (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff feda 	bl	8001848 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e099      	b.n	8001bd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	e00f      	b.n	8001ae2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fec1 	bl	8001848 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d908      	bls.n	8001ae2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e078      	b.n	8001bd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e8      	bne.n	8001ac2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <HAL_DMA_Init+0x158>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	4313      	orrs	r3, r2
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d117      	bne.n	8001ba6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb01 	bl	8002190 <DMA_CheckFifoParam>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2240      	movs	r2, #64	@ 0x40
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e016      	b.n	8001bd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fab8 	bl	8002124 <DMA_CalcBaseAndBitshift>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	223f      	movs	r2, #63	@ 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	f010803f 	.word	0xf010803f

08001be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Start_IT+0x26>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e040      	b.n	8001c88 <HAL_DMA_Start_IT+0xa8>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12f      	bne.n	8001c7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa4a 	bl	80020c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	223f      	movs	r2, #63	@ 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0216 	orr.w	r2, r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e005      	b.n	8001c86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c9e:	f7ff fdd3 	bl	8001848 <HAL_GetTick>
 8001ca2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d008      	beq.n	8001cc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e052      	b.n	8001d68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0216 	bic.w	r2, r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_DMA_Abort+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	e013      	b.n	8001d3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d14:	f7ff fd98 	bl	8001848 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d90c      	bls.n	8001d3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e015      	b.n	8001d68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1e4      	bne.n	8001d14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4e:	223f      	movs	r2, #63	@ 0x3f
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00c      	b.n	8001da8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2205      	movs	r2, #5
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001ffc <HAL_DMA_IRQHandler+0x248>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a8e      	ldr	r2, [pc, #568]	@ (8002000 <HAL_DMA_IRQHandler+0x24c>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dde:	2208      	movs	r2, #8
 8001de0:	409a      	lsls	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0204 	bic.w	r2, r2, #4
 8001e06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	2201      	movs	r2, #1
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00b      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e78:	2204      	movs	r2, #4
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f043 0204 	orr.w	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	2210      	movs	r2, #16
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d043      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	2210      	movs	r2, #16
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d018      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	e01f      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
 8001ef4:	e016      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0208 	bic.w	r2, r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	2220      	movs	r2, #32
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 808f 	beq.w	8002054 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8087 	beq.w	8002054 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d136      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0216 	bic.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x1da>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	223f      	movs	r2, #63	@ 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07e      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
        }
        return;
 8001fca:	e079      	b.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01d      	beq.n	8002016 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e02c      	b.n	8002054 <HAL_DMA_IRQHandler+0x2a0>
 8001ffa:	bf00      	nop
 8001ffc:	20000004 	.word	0x20000004
 8002000:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d023      	beq.n	8002054 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
 8002014:	e01e      	b.n	8002054 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10f      	bne.n	8002044 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0210 	bic.w	r2, r2, #16
 8002032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	2b00      	cmp	r3, #0
 800205a:	d032      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d022      	beq.n	80020ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2205      	movs	r2, #5
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3301      	adds	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	d307      	bcc.n	800209c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f2      	bne.n	8002080 <HAL_DMA_IRQHandler+0x2cc>
 800209a:	e000      	b.n	800209e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800209c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
 80020be:	e000      	b.n	80020c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020c0:	bf00      	nop
    }
  }
}
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d108      	bne.n	8002108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002106:	e007      	b.n	8002118 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b10      	subs	r3, #16
 8002134:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <DMA_CalcBaseAndBitshift+0x64>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800213e:	4a13      	ldr	r2, [pc, #76]	@ (800218c <DMA_CalcBaseAndBitshift+0x68>)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d909      	bls.n	8002166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	@ 0x58
 8002164:	e007      	b.n	8002176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	080145b8 	.word	0x080145b8

08002190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d856      	bhi.n	800225e <DMA_CheckFifoParam+0xce>
 80021b0:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <DMA_CheckFifoParam+0x28>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021db 	.word	0x080021db
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	0800225f 	.word	0x0800225f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d046      	beq.n	8002262 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d8:	e043      	b.n	8002262 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021e2:	d140      	bne.n	8002266 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e03d      	b.n	8002266 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f2:	d121      	bne.n	8002238 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d837      	bhi.n	800226a <DMA_CheckFifoParam+0xda>
 80021fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <DMA_CheckFifoParam+0x70>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002217 	.word	0x08002217
 8002208:	08002211 	.word	0x08002211
 800220c:	08002229 	.word	0x08002229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e030      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d025      	beq.n	800226e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002226:	e022      	b.n	800226e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002230:	d11f      	bne.n	8002272 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002236:	e01c      	b.n	8002272 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d903      	bls.n	8002246 <DMA_CheckFifoParam+0xb6>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002244:	e018      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      break;
 800224a:	e015      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e00b      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 800225e:	bf00      	nop
 8002260:	e00a      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e008      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e006      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
 800226c:	e004      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
 8002270:	e002      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;   
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
    }
  } 
  
  return status; 
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e159      	b.n	8002558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8148 	bne.w	8002552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a2 	beq.w	8002552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a56      	ldr	r2, [pc, #344]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b54      	ldr	r3, [pc, #336]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a52      	ldr	r2, [pc, #328]	@ (8002574 <HAL_GPIO_Init+0x2ec>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <HAL_GPIO_Init+0x2f0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x202>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a48      	ldr	r2, [pc, #288]	@ (800257c <HAL_GPIO_Init+0x2f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x1fe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a47      	ldr	r2, [pc, #284]	@ (8002580 <HAL_GPIO_Init+0x2f8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x1fa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <HAL_GPIO_Init+0x2fc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x1f6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a45      	ldr	r2, [pc, #276]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x1f2>
 8002476:	2304      	movs	r3, #4
 8002478:	e008      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247a:	2307      	movs	r3, #7
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247e:	2303      	movs	r3, #3
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x204>
 800248a:	2300      	movs	r3, #0
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249c:	4935      	ldr	r1, [pc, #212]	@ (8002574 <HAL_GPIO_Init+0x2ec>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024aa:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ce:	4a2f      	ldr	r2, [pc, #188]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f8:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_GPIO_Init+0x304>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002522:	4a1a      	ldr	r2, [pc, #104]	@ (800258c <HAL_GPIO_Init+0x304>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_GPIO_Init+0x304>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254c:	4a0f      	ldr	r2, [pc, #60]	@ (800258c <HAL_GPIO_Init+0x304>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	f67f aea2 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40013800 	.word	0x40013800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020400 	.word	0x40020400
 8002580:	40020800 	.word	0x40020800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e267      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025e2:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b85      	ldr	r3, [pc, #532]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b82      	ldr	r3, [pc, #520]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b7e      	ldr	r3, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e242      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b76      	ldr	r3, [pc, #472]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b70      	ldr	r3, [pc, #448]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6f      	ldr	r2, [pc, #444]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6c      	ldr	r2, [pc, #432]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f8e4 	bl	8001848 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f8e0 	bl	8001848 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	@ 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e207      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff f8d0 	bl	8001848 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f8cc 	bl	8001848 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1f3      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026da:	4b4a      	ldr	r3, [pc, #296]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b47      	ldr	r3, [pc, #284]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b44      	ldr	r3, [pc, #272]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c7      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4937      	ldr	r1, [pc, #220]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_OscConfig+0x244>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff f885 	bl	8001848 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff f881 	bl	8001848 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a8      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2b      	ldr	r3, [pc, #172]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4925      	ldr	r1, [pc, #148]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_RCC_OscConfig+0x244>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff f864 	bl	8001848 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff f860 	bl	8001848 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e187      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d036      	beq.n	800281c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_RCC_OscConfig+0x248>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff f844 	bl	8001848 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff f840 	bl	8001848 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e167      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_OscConfig+0x240>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e01b      	b.n	800281c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_RCC_OscConfig+0x248>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f82d 	bl	8001848 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e00e      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff f829 	bl	8001848 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d907      	bls.n	8002810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e150      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ea      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8097 	beq.w	8002958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b81      	ldr	r3, [pc, #516]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a7c      	ldr	r2, [pc, #496]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b77      	ldr	r3, [pc, #476]	@ (8002a38 <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b74      	ldr	r3, [pc, #464]	@ (8002a38 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	@ (8002a38 <HAL_RCC_OscConfig+0x474>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe ffe9 	bl	8001848 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe ffe5 	bl	8001848 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e10c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <HAL_RCC_OscConfig+0x474>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x2ea>
 80028a0:	4b64      	ldr	r3, [pc, #400]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a4:	4a63      	ldr	r2, [pc, #396]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x30c>
 80028b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028d0:	4b58      	ldr	r3, [pc, #352]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	4a57      	ldr	r2, [pc, #348]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	@ 0x70
 80028dc:	4b55      	ldr	r3, [pc, #340]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	4a54      	ldr	r2, [pc, #336]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe ffaa 	bl	8001848 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe ffa6 	bl	8001848 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0cb      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCC_OscConfig+0x334>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7fe ff94 	bl	8001848 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe ff90 	bl	8001848 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0b5      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b39      	ldr	r3, [pc, #228]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a38      	ldr	r2, [pc, #224]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002956:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80a1 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002962:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d05c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d141      	bne.n	80029fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <HAL_RCC_OscConfig+0x478>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe ff64 	bl	8001848 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe ff60 	bl	8001848 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e087      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	491b      	ldr	r1, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff39 	bl	8001848 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe ff35 	bl	8001848 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e05c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x416>
 80029f8:	e054      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff22 	bl	8001848 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff1e 	bl	8001848 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e045      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
 8002a26:	e03d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e038      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d121      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cc      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b68      	ldr	r3, [pc, #416]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a52      	ldr	r2, [pc, #328]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b37      	ldr	r3, [pc, #220]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4934      	ldr	r1, [pc, #208]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fe50 	bl	8001848 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fe fe4c 	bl	8001848 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20c      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b22      	ldr	r3, [pc, #136]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fdb0 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	080145a0 	.word	0x080145a0
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b094      	sub	sp, #80	@ 0x50
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c98:	4b79      	ldr	r3, [pc, #484]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f200 80e1 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb2:	e0db      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b73      	ldr	r3, [pc, #460]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cb8:	e0db      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b73      	ldr	r3, [pc, #460]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cbe:	e0d8      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cca:	4b6d      	ldr	r3, [pc, #436]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ce0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	6139      	str	r1, [r7, #16]
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d24:	4659      	mov	r1, fp
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4651      	mov	r1, sl
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4651      	mov	r1, sl
 8002d34:	ebb2 0801 	subs.w	r8, r2, r1
 8002d38:	4659      	mov	r1, fp
 8002d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb18 0303 	adds.w	r3, r8, r3
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	eb49 0303 	adc.w	r3, r9, r3
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d72:	4629      	mov	r1, r5
 8002d74:	024b      	lsls	r3, r1, #9
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	024a      	lsls	r2, r1, #9
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d90:	f7fd fade 	bl	8000350 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d9c:	e058      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	4611      	mov	r1, r2
 8002daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002df0:	ebb2 040a 	subs.w	r4, r2, sl
 8002df4:	eb63 050b 	sbc.w	r5, r3, fp
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	61fa      	str	r2, [r7, #28]
 8002e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e44:	f7fd fa84 	bl	8000350 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3750      	adds	r7, #80	@ 0x50
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a9b      	lsrs	r3, r3, #10
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	@ (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	080145b0 	.word	0x080145b0

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffdc 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0b5b      	lsrs	r3, r3, #13
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	@ (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	080145b0 	.word	0x080145b0

08002ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e042      	b.n	8002f8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f980 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	@ 0x24
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 ffc9 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	@ 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d156      	bne.n	800305c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_Transmit_DMA+0x26>
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e04f      	b.n	800305e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	@ 0x21
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	4a21      	ldr	r2, [pc, #132]	@ (8003068 <HAL_UART_Transmit_DMA+0xd4>)
 8002fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	4a20      	ldr	r2, [pc, #128]	@ (800306c <HAL_UART_Transmit_DMA+0xd8>)
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_UART_Transmit_DMA+0xdc>)
 8002ff4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3304      	adds	r3, #4
 8003012:	461a      	mov	r2, r3
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f7fe fde3 	bl	8001be0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003022:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	617b      	str	r3, [r7, #20]
   return(result);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003044:	627a      	str	r2, [r7, #36]	@ 0x24
 8003046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	61fb      	str	r3, [r7, #28]
   return(result);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3730      	adds	r7, #48	@ 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	0800375d 	.word	0x0800375d
 800306c:	080037f7 	.word	0x080037f7
 8003070:	0800397b 	.word	0x0800397b

08003074 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	d112      	bne.n	80030b4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_Receive_DMA+0x26>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e00b      	b.n	80030b6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fcb0 	bl	8003a10 <UART_Start_Receive_DMA>
 80030b0:	4603      	mov	r3, r0
 80030b2:	e000      	b.n	80030b6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b090      	sub	sp, #64	@ 0x40
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d4:	2b80      	cmp	r3, #128	@ 0x80
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b21      	cmp	r3, #33	@ 0x21
 80030ea:	d128      	bne.n	800313e <HAL_UART_DMAStop+0x80>
 80030ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d025      	beq.n	800313e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	623b      	str	r3, [r7, #32]
   return(result);
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003112:	633a      	str	r2, [r7, #48]	@ 0x30
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fdac 	bl	8001c90 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fd03 	bl	8003b44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b22      	cmp	r3, #34	@ 0x22
 800315e:	d128      	bne.n	80031b2 <HAL_UART_DMAStop+0xf4>
 8003160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d025      	beq.n	80031b2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3314      	adds	r3, #20
 800316c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	60fb      	str	r3, [r7, #12]
   return(result);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003186:	61fa      	str	r2, [r7, #28]
 8003188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	617b      	str	r3, [r7, #20]
   return(result);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fd72 	bl	8001c90 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fcf1 	bl	8003b94 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3740      	adds	r7, #64	@ 0x40
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0ba      	sub	sp, #232	@ 0xe8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_UART_IRQHandler+0x66>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fd99 	bl	8003d52 <UART_Receive_IT>
      return;
 8003220:	e25b      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80de 	beq.w	80033e8 <HAL_UART_IRQHandler+0x22c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80d1 	beq.w	80033e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xae>
 8003252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xd2>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
 800329a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f043 0204 	orr.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d011      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
 80032be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 81f2 	beq.w	80036d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_UART_IRQHandler+0x14e>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fd24 	bl	8003d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_UART_IRQHandler+0x17a>
 800332e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04f      	beq.n	80033d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fc2c 	bl	8003b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d141      	bne.n	80033ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800337a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800338e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d9      	bne.n	800334a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	4a7e      	ldr	r2, [pc, #504]	@ (800359c <HAL_UART_IRQHandler+0x3e0>)
 80033a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fce0 	bl	8001d70 <HAL_DMA_Abort_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c0:	4610      	mov	r0, r2
 80033c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00e      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9b2 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e00a      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9ae 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e006      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f9aa 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033e2:	e175      	b.n	80036d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	bf00      	nop
    return;
 80033e6:	e173      	b.n	80036d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	f040 814f 	bne.w	8003690 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8148 	beq.w	8003690 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8141 	beq.w	8003690 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342e:	2b40      	cmp	r3, #64	@ 0x40
 8003430:	f040 80b6 	bne.w	80035a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8145 	beq.w	80036d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003452:	429a      	cmp	r2, r3
 8003454:	f080 813e 	bcs.w	80036d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800345e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346a:	f000 8088 	beq.w	800357e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800349a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1d9      	bne.n	800346e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3314      	adds	r3, #20
 80034da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e1      	bne.n	80034ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800351a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800351c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e3      	bne.n	80034f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800354c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354e:	f023 0310 	bic.w	r3, r3, #16
 8003552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003560:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003562:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800356e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e3      	bne.n	800353c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fb89 	bl	8001c90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b29b      	uxth	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8d5 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359a:	e09b      	b.n	80036d4 <HAL_UART_IRQHandler+0x518>
 800359c:	08003c5b 	.word	0x08003c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808e 	beq.w	80036d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8089 	beq.w	80036d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	623b      	str	r3, [r7, #32]
   return(result);
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003622:	633a      	str	r2, [r7, #48]	@ 0x30
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e3      	bne.n	80035fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60fb      	str	r3, [r7, #12]
   return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	617b      	str	r3, [r7, #20]
   return(result);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e3      	bne.n	8003644 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f85b 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800368e:	e023      	b.n	80036d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_UART_IRQHandler+0x4f4>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 faea 	bl	8003c82 <UART_Transmit_IT>
    return;
 80036ae:	e014      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <HAL_UART_IRQHandler+0x51e>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb2a 	bl	8003d22 <UART_EndTransmit_IT>
    return;
 80036ce:	e004      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
    return;
 80036d0:	bf00      	nop
 80036d2:	e002      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
      return;
 80036d4:	bf00      	nop
 80036d6:	e000      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
      return;
 80036d8:	bf00      	nop
  }
}
 80036da:	37e8      	adds	r7, #232	@ 0xe8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b090      	sub	sp, #64	@ 0x40
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d137      	bne.n	80037e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	2200      	movs	r2, #0
 800377c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800379e:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	330c      	adds	r3, #12
 80037b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037d2:	61fa      	str	r2, [r7, #28]
 80037d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	69b9      	ldr	r1, [r7, #24]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	617b      	str	r3, [r7, #20]
   return(result);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e5      	bne.n	80037b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037e6:	e002      	b.n	80037ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037ea:	f7ff ff79 	bl	80036e0 <HAL_UART_TxCpltCallback>
}
 80037ee:	bf00      	nop
 80037f0:	3740      	adds	r7, #64	@ 0x40
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff ff75 	bl	80036f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b09c      	sub	sp, #112	@ 0x70
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d172      	bne.n	8003914 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800382e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003830:	2200      	movs	r2, #0
 8003832:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800384c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003854:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003856:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800385a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003888:	647a      	str	r2, [r7, #68]	@ 0x44
 800388a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800388e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d119      	bne.n	8003914 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0310 	bic.w	r3, r3, #16
 80038f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	617b      	str	r3, [r7, #20]
   return(result);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003924:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003926:	4619      	mov	r1, r3
 8003928:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800392a:	f7ff ff0b 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800392e:	e002      	b.n	8003936 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003930:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003932:	f7ff fee9 	bl	8003708 <HAL_UART_RxCpltCallback>
}
 8003936:	bf00      	nop
 8003938:	3770      	adds	r7, #112	@ 0x70
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b01      	cmp	r3, #1
 8003958:	d108      	bne.n	800396c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff feed 	bl	8003744 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800396a:	e002      	b.n	8003972 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff fed5 	bl	800371c <HAL_UART_RxHalfCpltCallback>
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b21      	cmp	r3, #33	@ 0x21
 80039ac:	d108      	bne.n	80039c0 <UART_DMAError+0x46>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f000 f8c2 	bl	8003b44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b22      	cmp	r3, #34	@ 0x22
 80039e0:	d108      	bne.n	80039f4 <UART_DMAError+0x7a>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f000 f8d0 	bl	8003b94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f7ff fe95 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b098      	sub	sp, #96	@ 0x60
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2222      	movs	r2, #34	@ 0x22
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b38 <UART_Start_Receive_DMA+0x128>)
 8003a3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	4a3d      	ldr	r2, [pc, #244]	@ (8003b3c <UART_Start_Receive_DMA+0x12c>)
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b40 <UART_Start_Receive_DMA+0x130>)
 8003a4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	2200      	movs	r2, #0
 8003a56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	f7fe f8b6 	bl	8001be0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d019      	beq.n	8003ac6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ab2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ae6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e5      	bne.n	8003ac6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3760      	adds	r7, #96	@ 0x60
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	08003813 	.word	0x08003813
 8003b3c:	0800393f 	.word	0x0800393f
 8003b40:	0800397b 	.word	0x0800397b

08003b44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	@ 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	61ba      	str	r2, [r7, #24]
 8003b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b88:	bf00      	nop
 8003b8a:	3724      	adds	r7, #36	@ 0x24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b095      	sub	sp, #84	@ 0x54
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c2c:	61ba      	str	r2, [r7, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	@ 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fd5b 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b21      	cmp	r3, #33	@ 0x21
 8003c94:	d13e      	bne.n	8003d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	d114      	bne.n	8003cca <UART_Transmit_IT+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d110      	bne.n	8003cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	e008      	b.n	8003cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6211      	str	r1, [r2, #32]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10f      	bne.n	8003d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fccc 	bl	80036e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08c      	sub	sp, #48	@ 0x30
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b22      	cmp	r3, #34	@ 0x22
 8003d64:	f040 80ae 	bne.w	8003ec4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d70:	d117      	bne.n	8003da2 <UART_Receive_IT+0x50>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d113      	bne.n	8003da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da0:	e026      	b.n	8003df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db4:	d007      	beq.n	8003dc6 <UART_Receive_IT+0x74>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <UART_Receive_IT+0x82>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e008      	b.n	8003de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d15d      	bne.n	8003ec0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0220 	bic.w	r2, r2, #32
 8003e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d135      	bne.n	8003eb6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e70:	623a      	str	r2, [r7, #32]
 8003e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69f9      	ldr	r1, [r7, #28]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d10a      	bne.n	8003ea8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fc48 	bl	8003744 <HAL_UARTEx_RxEventCallback>
 8003eb4:	e002      	b.n	8003ebc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fc26 	bl	8003708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e002      	b.n	8003ec6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3730      	adds	r7, #48	@ 0x30
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b0c0      	sub	sp, #256	@ 0x100
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	ea40 0301 	orr.w	r3, r0, r1
 8003ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f28:	f021 010c 	bic.w	r1, r1, #12
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f36:	430b      	orrs	r3, r1
 8003f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4a:	6999      	ldr	r1, [r3, #24]
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	ea40 0301 	orr.w	r3, r0, r1
 8003f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <UART_SetConfig+0x2cc>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d005      	beq.n	8003f70 <UART_SetConfig+0xa0>
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80041a0 <UART_SetConfig+0x2d0>)
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d104      	bne.n	8003f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe ffac 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8003f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f78:	e003      	b.n	8003f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f7a:	f7fe ff93 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8c:	f040 810c 	bne.w	80041a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003faa:	415b      	adcs	r3, r3
 8003fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	eb12 0801 	adds.w	r8, r2, r1
 8003fb8:	4629      	mov	r1, r5
 8003fba:	eb43 0901 	adc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	eb49 0303 	adc.w	r3, r9, r3
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ffe:	460b      	mov	r3, r1
 8004000:	18db      	adds	r3, r3, r3
 8004002:	653b      	str	r3, [r7, #80]	@ 0x50
 8004004:	4613      	mov	r3, r2
 8004006:	eb42 0303 	adc.w	r3, r2, r3
 800400a:	657b      	str	r3, [r7, #84]	@ 0x54
 800400c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004014:	f7fc f99c 	bl	8000350 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4b61      	ldr	r3, [pc, #388]	@ (80041a4 <UART_SetConfig+0x2d4>)
 800401e:	fba3 2302 	umull	r2, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	011c      	lsls	r4, r3, #4
 8004026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	1891      	adds	r1, r2, r2
 800403e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004040:	415b      	adcs	r3, r3
 8004042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004048:	4641      	mov	r1, r8
 800404a:	eb12 0a01 	adds.w	sl, r2, r1
 800404e:	4649      	mov	r1, r9
 8004050:	eb43 0b01 	adc.w	fp, r3, r1
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004068:	4692      	mov	sl, r2
 800406a:	469b      	mov	fp, r3
 800406c:	4643      	mov	r3, r8
 800406e:	eb1a 0303 	adds.w	r3, sl, r3
 8004072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004076:	464b      	mov	r3, r9
 8004078:	eb4b 0303 	adc.w	r3, fp, r3
 800407c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800408c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004094:	460b      	mov	r3, r1
 8004096:	18db      	adds	r3, r3, r3
 8004098:	643b      	str	r3, [r7, #64]	@ 0x40
 800409a:	4613      	mov	r3, r2
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040aa:	f7fc f951 	bl	8000350 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <UART_SetConfig+0x2d4>)
 80040b6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2264      	movs	r2, #100	@ 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	1acb      	subs	r3, r1, r3
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ca:	4b36      	ldr	r3, [pc, #216]	@ (80041a4 <UART_SetConfig+0x2d4>)
 80040cc:	fba3 2302 	umull	r2, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040d8:	441c      	add	r4, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040f4:	415b      	adcs	r3, r3
 80040f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6339      	str	r1, [r7, #48]	@ 0x30
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	637b      	str	r3, [r7, #52]	@ 0x34
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800414c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004150:	460b      	mov	r3, r1
 8004152:	18db      	adds	r3, r3, r3
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004156:	4613      	mov	r3, r2
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800415e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004166:	f7fc f8f3 	bl	8000350 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <UART_SetConfig+0x2d4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	@ 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	@ 0x32
 8004182:	4a08      	ldr	r2, [pc, #32]	@ (80041a4 <UART_SetConfig+0x2d4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4422      	add	r2, r4
 8004196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004198:	e106      	b.n	80043a8 <UART_SetConfig+0x4d8>
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40011400 	.word	0x40011400
 80041a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041ba:	4642      	mov	r2, r8
 80041bc:	464b      	mov	r3, r9
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	6239      	str	r1, [r7, #32]
 80041c2:	415b      	adcs	r3, r3
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ca:	4641      	mov	r1, r8
 80041cc:	1854      	adds	r4, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb43 0501 	adc.w	r5, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041f0:	464b      	mov	r3, r9
 80041f2:	eb45 0303 	adc.w	r3, r5, r3
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004216:	4629      	mov	r1, r5
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004220:	4621      	mov	r1, r4
 8004222:	008a      	lsls	r2, r1, #2
 8004224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004228:	f7fc f892 	bl	8000350 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b60      	ldr	r3, [pc, #384]	@ (80043b4 <UART_SetConfig+0x4e4>)
 8004232:	fba3 2302 	umull	r2, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	011c      	lsls	r4, r3, #4
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800424c:	4642      	mov	r2, r8
 800424e:	464b      	mov	r3, r9
 8004250:	1891      	adds	r1, r2, r2
 8004252:	61b9      	str	r1, [r7, #24]
 8004254:	415b      	adcs	r3, r3
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425c:	4641      	mov	r1, r8
 800425e:	1851      	adds	r1, r2, r1
 8004260:	6139      	str	r1, [r7, #16]
 8004262:	4649      	mov	r1, r9
 8004264:	414b      	adcs	r3, r1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004274:	4659      	mov	r1, fp
 8004276:	00cb      	lsls	r3, r1, #3
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427e:	4651      	mov	r1, sl
 8004280:	00ca      	lsls	r2, r1, #3
 8004282:	4610      	mov	r0, r2
 8004284:	4619      	mov	r1, r3
 8004286:	4603      	mov	r3, r0
 8004288:	4642      	mov	r2, r8
 800428a:	189b      	adds	r3, r3, r2
 800428c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004290:	464b      	mov	r3, r9
 8004292:	460a      	mov	r2, r1
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042c6:	f7fc f843 	bl	8000350 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	4b38      	ldr	r3, [pc, #224]	@ (80043b4 <UART_SetConfig+0x4e4>)
 80042d2:	fba3 2301 	umull	r2, r3, r3, r1
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2264      	movs	r2, #100	@ 0x64
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	1acb      	subs	r3, r1, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	@ 0x32
 80042e4:	4a33      	ldr	r2, [pc, #204]	@ (80043b4 <UART_SetConfig+0x4e4>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f0:	441c      	add	r4, r3
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80042fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	415b      	adcs	r3, r3
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6039      	str	r1, [r7, #0]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004342:	464b      	mov	r3, r9
 8004344:	460a      	mov	r2, r1
 8004346:	eb42 0303 	adc.w	r3, r2, r3
 800434a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	663b      	str	r3, [r7, #96]	@ 0x60
 8004356:	667a      	str	r2, [r7, #100]	@ 0x64
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004364:	4649      	mov	r1, r9
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	4641      	mov	r1, r8
 800436a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436e:	4641      	mov	r1, r8
 8004370:	008a      	lsls	r2, r1, #2
 8004372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004376:	f7fb ffeb 	bl	8000350 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <UART_SetConfig+0x4e4>)
 8004380:	fba3 1302 	umull	r1, r3, r3, r2
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2164      	movs	r1, #100	@ 0x64
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	3332      	adds	r3, #50	@ 0x32
 8004392:	4a08      	ldr	r2, [pc, #32]	@ (80043b4 <UART_SetConfig+0x4e4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4422      	add	r2, r4
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b4:	51eb851f 	.word	0x51eb851f

080043b8 <__NVIC_SetPriority>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	@ (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	@ (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004410:	2100      	movs	r1, #0
 8004412:	f06f 0004 	mvn.w	r0, #4
 8004416:	f7ff ffcf 	bl	80043b8 <__NVIC_SetPriority>
#endif
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004426:	f3ef 8305 	mrs	r3, IPSR
 800442a:	603b      	str	r3, [r7, #0]
  return(result);
 800442c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004432:	f06f 0305 	mvn.w	r3, #5
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	e00c      	b.n	8004454 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <osKernelInitialize+0x44>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004442:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <osKernelInitialize+0x44>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004448:	2300      	movs	r3, #0
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e002      	b.n	8004454 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004454:	687b      	ldr	r3, [r7, #4]
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000466c 	.word	0x2000466c

08004468 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	603b      	str	r3, [r7, #0]
  return(result);
 8004474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <osKernelStart+0x1a>
    stat = osErrorISR;
 800447a:	f06f 0305 	mvn.w	r3, #5
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e010      	b.n	80044a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <osKernelStart+0x48>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d109      	bne.n	800449e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800448a:	f7ff ffbf 	bl	800440c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800448e:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <osKernelStart+0x48>)
 8004490:	2202      	movs	r2, #2
 8004492:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004494:	f001 f87a 	bl	800558c <vTaskStartScheduler>
      stat = osOK;
 8004498:	2300      	movs	r3, #0
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	e002      	b.n	80044a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044a4:	687b      	ldr	r3, [r7, #4]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000466c 	.word	0x2000466c

080044b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	@ 0x38
 80044b8:	af04      	add	r7, sp, #16
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c4:	f3ef 8305 	mrs	r3, IPSR
 80044c8:	617b      	str	r3, [r7, #20]
  return(result);
 80044ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d17e      	bne.n	80045ce <osThreadNew+0x11a>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d07b      	beq.n	80045ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044da:	2318      	movs	r3, #24
 80044dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d045      	beq.n	800457a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <osThreadNew+0x48>
        name = attr->name;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <osThreadNew+0x6e>
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b38      	cmp	r3, #56	@ 0x38
 8004514:	d805      	bhi.n	8004522 <osThreadNew+0x6e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <osThreadNew+0x72>
        return (NULL);
 8004522:	2300      	movs	r3, #0
 8004524:	e054      	b.n	80045d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <osThreadNew+0xa8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b5b      	cmp	r3, #91	@ 0x5b
 8004544:	d90a      	bls.n	800455c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <osThreadNew+0xa8>
        mem = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e010      	b.n	800457e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10c      	bne.n	800457e <osThreadNew+0xca>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d108      	bne.n	800457e <osThreadNew+0xca>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <osThreadNew+0xca>
          mem = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e001      	b.n	800457e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d110      	bne.n	80045a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800458c:	9202      	str	r2, [sp, #8]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fe1a 	bl	80051d4 <xTaskCreateStatic>
 80045a0:	4603      	mov	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	e013      	b.n	80045ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	f107 0310 	add.w	r3, r7, #16
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fe68 	bl	8005294 <xTaskCreate>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <osThreadNew+0x11a>
            hTask = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045ce:	693b      	ldr	r3, [r7, #16]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3728      	adds	r7, #40	@ 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e0:	f3ef 8305 	mrs	r3, IPSR
 80045e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <osDelay+0x1c>
    stat = osErrorISR;
 80045ec:	f06f 0305 	mvn.w	r3, #5
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e007      	b.n	8004604 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 ff8e 	bl	8005520 <vTaskDelay>
    }
  }

  return (stat);
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a07      	ldr	r2, [pc, #28]	@ (800463c <vApplicationGetIdleTaskMemory+0x2c>)
 8004620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a06      	ldr	r2, [pc, #24]	@ (8004640 <vApplicationGetIdleTaskMemory+0x30>)
 8004626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2280      	movs	r2, #128	@ 0x80
 800462c:	601a      	str	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20004670 	.word	0x20004670
 8004640:	200046cc 	.word	0x200046cc

08004644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a07      	ldr	r2, [pc, #28]	@ (8004670 <vApplicationGetTimerTaskMemory+0x2c>)
 8004654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a06      	ldr	r2, [pc, #24]	@ (8004674 <vApplicationGetTimerTaskMemory+0x30>)
 800465a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	200048cc 	.word	0x200048cc
 8004674:	20004928 	.word	0x20004928

08004678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f103 0208 	add.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f103 0208 	add.w	r2, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f103 0208 	add.w	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004730:	d103      	bne.n	800473a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e00c      	b.n	8004754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3308      	adds	r3, #8
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e002      	b.n	8004748 <vListInsert+0x2e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d2f6      	bcs.n	8004742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6892      	ldr	r2, [r2, #8]
 80047a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6852      	ldr	r2, [r2, #4]
 80047ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d103      	bne.n	80047c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	1e5a      	subs	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xQueueGenericReset+0x2c>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60bb      	str	r3, [r7, #8]
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800480c:	f002 f8a4 	bl	8006958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	3b01      	subs	r3, #1
 800483e:	68f9      	ldr	r1, [r7, #12]
 8004840:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	441a      	add	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	22ff      	movs	r2, #255	@ 0xff
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	22ff      	movs	r2, #255	@ 0xff
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d114      	bne.n	800488c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01a      	beq.n	80048a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3310      	adds	r3, #16
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f91a 	bl	8005aa8 <xTaskRemoveFromEventList>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d012      	beq.n	80048a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800487a:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <xQueueGenericReset+0xd0>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	e009      	b.n	80048a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3310      	adds	r3, #16
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fef1 	bl	8004678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3324      	adds	r3, #36	@ 0x24
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff feec 	bl	8004678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048a0:	f002 f88c 	bl	80069bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	@ 0x38
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <xQueueGenericCreateStatic+0x56>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <xQueueGenericCreateStatic+0x5a>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <xQueueGenericCreateStatic+0x5c>
 800490e:	2300      	movs	r3, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	623b      	str	r3, [r7, #32]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <xQueueGenericCreateStatic+0x84>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <xQueueGenericCreateStatic+0x88>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <xQueueGenericCreateStatic+0x8a>
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	61fb      	str	r3, [r7, #28]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800495a:	2350      	movs	r3, #80	@ 0x50
 800495c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b50      	cmp	r3, #80	@ 0x50
 8004962:	d00b      	beq.n	800497c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	61bb      	str	r3, [r7, #24]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800497c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004990:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f805 	bl	80049ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3730      	adds	r7, #48	@ 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049dc:	2101      	movs	r1, #1
 80049de:	69b8      	ldr	r0, [r7, #24]
 80049e0:	f7ff fefe 	bl	80047e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	@ 0x38
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a02:	2300      	movs	r3, #0
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xQueueGenericSend+0x34>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSend+0x42>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSend+0x46>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSend+0x48>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xQueueGenericSend+0x64>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x72>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSend+0x76>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSend+0x78>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericSend+0x94>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a88:	f001 f9f6 	bl	8005e78 <xTaskGetSchedulerState>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <xQueueGenericSend+0xa4>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <xQueueGenericSend+0xa8>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <xQueueGenericSend+0xaa>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <xQueueGenericSend+0xc6>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61fb      	str	r3, [r7, #28]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aba:	f001 ff4d 	bl	8006958 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xQueueGenericSend+0xdc>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d129      	bne.n	8004b24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ad6:	f000 fa0f 	bl	8004ef8 <prvCopyDataToQueue>
 8004ada:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	3324      	adds	r3, #36	@ 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 ffdd 	bl	8005aa8 <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf4 <xQueueGenericSend+0x200>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	e00a      	b.n	8004b1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b0c:	4b39      	ldr	r3, [pc, #228]	@ (8004bf4 <xQueueGenericSend+0x200>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b1c:	f001 ff4e 	bl	80069bc <vPortExitCritical>
				return pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e063      	b.n	8004bec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b2a:	f001 ff47 	bl	80069bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e05c      	b.n	8004bec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 f83f 	bl	8005bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b46:	f001 ff39 	bl	80069bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4a:	f000 fd87 	bl	800565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b4e:	f001 ff03 	bl	8006958 <vPortEnterCritical>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b5e:	d103      	bne.n	8004b68 <xQueueGenericSend+0x174>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x18a>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b7e:	f001 ff1d 	bl	80069bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b82:	1d3a      	adds	r2, r7, #4
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f82e 	bl	8005bec <xTaskCheckForTimeOut>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d124      	bne.n	8004be0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b98:	f000 faa6 	bl	80050e8 <prvIsQueueFull>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 ff2a 	bl	8005a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bb2:	f000 fa31 	bl	8005018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bb6:	f000 fd5f 	bl	8005678 <xTaskResumeAll>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f47f af7c 	bne.w	8004aba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <xQueueGenericSend+0x200>)
 8004bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	e772      	b.n	8004aba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bd6:	f000 fa1f 	bl	8005018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bda:	f000 fd4d 	bl	8005678 <xTaskResumeAll>
 8004bde:	e76c      	b.n	8004aba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004be0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004be2:	f000 fa19 	bl	8005018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be6:	f000 fd47 	bl	8005678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3738      	adds	r7, #56	@ 0x38
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b090      	sub	sp, #64	@ 0x40
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSendFromISR+0x3e>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <xQueueGenericSendFromISR+0x42>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericSendFromISR+0x44>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSendFromISR+0x6e>
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSendFromISR+0x72>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSendFromISR+0x74>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	623b      	str	r3, [r7, #32]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c88:	f001 ff46 	bl	8006b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c8c:	f3ef 8211 	mrs	r2, BASEPRI
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d302      	bcc.n	8004cba <xQueueGenericSendFromISR+0xc2>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d12f      	bne.n	8004d1a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cd0:	f000 f912 	bl	8004ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cd4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cdc:	d112      	bne.n	8004d04 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	3324      	adds	r3, #36	@ 0x24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fedc 	bl	8005aa8 <xTaskRemoveFromEventList>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e007      	b.n	8004d14 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	b25a      	sxtb	r2, r3
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d14:	2301      	movs	r3, #1
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d18:	e001      	b.n	8004d1e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d20:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3740      	adds	r7, #64	@ 0x40
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08c      	sub	sp, #48	@ 0x30
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <xQueueReceive+0x32>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	623b      	str	r3, [r7, #32]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <xQueueReceive+0x40>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <xQueueReceive+0x44>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <xQueueReceive+0x46>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <xQueueReceive+0x62>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d96:	f001 f86f 	bl	8005e78 <xTaskGetSchedulerState>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <xQueueReceive+0x72>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <xQueueReceive+0x76>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueReceive+0x78>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <xQueueReceive+0x94>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61bb      	str	r3, [r7, #24]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dc8:	f001 fdc6 	bl	8006958 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01f      	beq.n	8004e18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ddc:	f000 f8f6 	bl	8004fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	3310      	adds	r3, #16
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fe57 	bl	8005aa8 <xTaskRemoveFromEventList>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e00:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef4 <xQueueReceive+0x1c0>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e10:	f001 fdd4 	bl	80069bc <vPortExitCritical>
				return pdPASS;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e069      	b.n	8004eec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e1e:	f001 fdcd 	bl	80069bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e062      	b.n	8004eec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fec5 	bl	8005bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e3a:	f001 fdbf 	bl	80069bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e3e:	f000 fc0d 	bl	800565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e42:	f001 fd89 	bl	8006958 <vPortEnterCritical>
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e52:	d103      	bne.n	8004e5c <xQueueReceive+0x128>
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e68:	d103      	bne.n	8004e72 <xQueueReceive+0x13e>
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e72:	f001 fda3 	bl	80069bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e76:	1d3a      	adds	r2, r7, #4
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 feb4 	bl	8005bec <xTaskCheckForTimeOut>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d123      	bne.n	8004ed2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e8c:	f000 f916 	bl	80050bc <prvIsQueueEmpty>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fdb0 	bl	8005a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea6:	f000 f8b7 	bl	8005018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eaa:	f000 fbe5 	bl	8005678 <xTaskResumeAll>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d189      	bne.n	8004dc8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <xQueueReceive+0x1c0>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	e780      	b.n	8004dc8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec8:	f000 f8a6 	bl	8005018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ecc:	f000 fbd4 	bl	8005678 <xTaskResumeAll>
 8004ed0:	e77a      	b.n	8004dc8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed4:	f000 f8a0 	bl	8005018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed8:	f000 fbce 	bl	8005678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004edc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ede:	f000 f8ed 	bl	80050bc <prvIsQueueEmpty>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f43f af6f 	beq.w	8004dc8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3730      	adds	r7, #48	@ 0x30
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	e000ed04 	.word	0xe000ed04

08004ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d14d      	bne.n	8004fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ffc6 	bl	8005eb4 <xTaskPriorityDisinherit>
 8004f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	e043      	b.n	8004fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d119      	bne.n	8004f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6858      	ldr	r0, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	461a      	mov	r2, r3
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	f00e fc8b 	bl	801385e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d32b      	bcc.n	8004fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	e026      	b.n	8004fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68d8      	ldr	r0, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f74:	461a      	mov	r2, r3
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	f00e fc71 	bl	801385e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f84:	425b      	negs	r3, r3
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d207      	bcs.n	8004fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	441a      	add	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d105      	bne.n	8004fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	441a      	add	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d303      	bcc.n	8005000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	461a      	mov	r2, r3
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f00e fc27 	bl	801385e <memcpy>
	}
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005020:	f001 fc9a 	bl	8006958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800502a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800502c:	e011      	b.n	8005052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d012      	beq.n	800505c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	@ 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fd34 	bl	8005aa8 <xTaskRemoveFromEventList>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005046:	f000 fe35 	bl	8005cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	3b01      	subs	r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	dce9      	bgt.n	800502e <prvUnlockQueue+0x16>
 800505a:	e000      	b.n	800505e <prvUnlockQueue+0x46>
					break;
 800505c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	22ff      	movs	r2, #255	@ 0xff
 8005062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005066:	f001 fca9 	bl	80069bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800506a:	f001 fc75 	bl	8006958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005076:	e011      	b.n	800509c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d012      	beq.n	80050a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3310      	adds	r3, #16
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fd0f 	bl	8005aa8 <xTaskRemoveFromEventList>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005090:	f000 fe10 	bl	8005cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005094:	7bbb      	ldrb	r3, [r7, #14]
 8005096:	3b01      	subs	r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800509c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dce9      	bgt.n	8005078 <prvUnlockQueue+0x60>
 80050a4:	e000      	b.n	80050a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	22ff      	movs	r2, #255	@ 0xff
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050b0:	f001 fc84 	bl	80069bc <vPortExitCritical>
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c4:	f001 fc48 	bl	8006958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e001      	b.n	80050da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050da:	f001 fc6f 	bl	80069bc <vPortExitCritical>

	return xReturn;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f0:	f001 fc32 	bl	8006958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d102      	bne.n	8005106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e001      	b.n	800510a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800510a:	f001 fc57 	bl	80069bc <vPortExitCritical>

	return xReturn;
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e014      	b.n	8005152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005128:	4a0f      	ldr	r2, [pc, #60]	@ (8005168 <vQueueAddToRegistry+0x50>)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005134:	490c      	ldr	r1, [pc, #48]	@ (8005168 <vQueueAddToRegistry+0x50>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800513e:	4a0a      	ldr	r2, [pc, #40]	@ (8005168 <vQueueAddToRegistry+0x50>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800514a:	e006      	b.n	800515a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b07      	cmp	r3, #7
 8005156:	d9e7      	bls.n	8005128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20004d28 	.word	0x20004d28

0800516c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800517c:	f001 fbec 	bl	8006958 <vPortEnterCritical>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005186:	b25b      	sxtb	r3, r3
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518c:	d103      	bne.n	8005196 <vQueueWaitForMessageRestricted+0x2a>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800519c:	b25b      	sxtb	r3, r3
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a2:	d103      	bne.n	80051ac <vQueueWaitForMessageRestricted+0x40>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ac:	f001 fc06 	bl	80069bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3324      	adds	r3, #36	@ 0x24
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fc45 	bl	8005a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7ff ff26 	bl	8005018 <prvUnlockQueue>
	}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08e      	sub	sp, #56	@ 0x38
 80051d8:	af04      	add	r7, sp, #16
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <xTaskCreateStatic+0x2c>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	623b      	str	r3, [r7, #32]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61fb      	str	r3, [r7, #28]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800521e:	235c      	movs	r3, #92	@ 0x5c
 8005220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b5c      	cmp	r3, #92	@ 0x5c
 8005226:	d00b      	beq.n	8005240 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61bb      	str	r3, [r7, #24]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005240:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01e      	beq.n	8005286 <xTaskCreateStatic+0xb2>
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005260:	2300      	movs	r3, #0
 8005262:	9303      	str	r3, [sp, #12]
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f850 	bl	800531e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800527e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005280:	f000 f8de 	bl	8005440 <prvAddNewTaskToReadyList>
 8005284:	e001      	b.n	800528a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800528a:	697b      	ldr	r3, [r7, #20]
	}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	@ 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	@ 0x30
 8005298:	af04      	add	r7, sp, #16
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fc77 	bl	8006b9c <pvPortMalloc>
 80052ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00e      	beq.n	80052d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052b6:	205c      	movs	r0, #92	@ 0x5c
 80052b8:	f001 fc70 	bl	8006b9c <pvPortMalloc>
 80052bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ca:	e005      	b.n	80052d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f001 fd33 	bl	8006d38 <vPortFree>
 80052d2:	e001      	b.n	80052d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f80e 	bl	800531e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005302:	69f8      	ldr	r0, [r7, #28]
 8005304:	f000 f89c 	bl	8005440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005308:	2301      	movs	r3, #1
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e002      	b.n	8005314 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005312:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005314:	69bb      	ldr	r3, [r7, #24]
	}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	461a      	mov	r2, r3
 8005336:	21a5      	movs	r1, #165	@ 0xa5
 8005338:	f00e f9c8 	bl	80136cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005346:	3b01      	subs	r3, #1
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f023 0307 	bic.w	r3, r3, #7
 8005354:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	617b      	str	r3, [r7, #20]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01f      	beq.n	80053be <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e012      	b.n	80053aa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	7819      	ldrb	r1, [r3, #0]
 800538c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	3334      	adds	r3, #52	@ 0x34
 8005394:	460a      	mov	r2, r1
 8005396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b0f      	cmp	r3, #15
 80053ae:	d9e9      	bls.n	8005384 <prvInitialiseNewTask+0x66>
 80053b0:	e000      	b.n	80053b4 <prvInitialiseNewTask+0x96>
			{
				break;
 80053b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053bc:	e003      	b.n	80053c6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	2b37      	cmp	r3, #55	@ 0x37
 80053ca:	d901      	bls.n	80053d0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053cc:	2337      	movs	r3, #55	@ 0x37
 80053ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	2200      	movs	r2, #0
 80053e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff f966 	bl	80046b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ee:	3318      	adds	r3, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f961 	bl	80046b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	69b8      	ldr	r0, [r7, #24]
 8005420:	f001 f966 	bl	80066f0 <pxPortInitialiseStack>
 8005424:	4602      	mov	r2, r0
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005436:	bf00      	nop
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005448:	f001 fa86 	bl	8006958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800544c:	4b2d      	ldr	r3, [pc, #180]	@ (8005504 <prvAddNewTaskToReadyList+0xc4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a2c      	ldr	r2, [pc, #176]	@ (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005456:	4b2c      	ldr	r3, [pc, #176]	@ (8005508 <prvAddNewTaskToReadyList+0xc8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800545e:	4a2a      	ldr	r2, [pc, #168]	@ (8005508 <prvAddNewTaskToReadyList+0xc8>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005464:	4b27      	ldr	r3, [pc, #156]	@ (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d110      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800546c:	f000 fc46 	bl	8005cfc <prvInitialiseTaskLists>
 8005470:	e00d      	b.n	800548e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005472:	4b26      	ldr	r3, [pc, #152]	@ (800550c <prvAddNewTaskToReadyList+0xcc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800547a:	4b23      	ldr	r3, [pc, #140]	@ (8005508 <prvAddNewTaskToReadyList+0xc8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d802      	bhi.n	800548e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005488:	4a1f      	ldr	r2, [pc, #124]	@ (8005508 <prvAddNewTaskToReadyList+0xc8>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800548e:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <prvAddNewTaskToReadyList+0xd0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <prvAddNewTaskToReadyList+0xd0>)
 8005496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <prvAddNewTaskToReadyList+0xd0>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005514 <prvAddNewTaskToReadyList+0xd4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <prvAddNewTaskToReadyList+0x74>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	4a18      	ldr	r2, [pc, #96]	@ (8005514 <prvAddNewTaskToReadyList+0xd4>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <prvAddNewTaskToReadyList+0xd8>)
 80054c2:	441a      	add	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7ff f901 	bl	80046d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054d0:	f001 fa74 	bl	80069bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054d4:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <prvAddNewTaskToReadyList+0xcc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <prvAddNewTaskToReadyList+0xc8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d207      	bcs.n	80054fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ea:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <prvAddNewTaskToReadyList+0xdc>)
 80054ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2000523c 	.word	0x2000523c
 8005508:	20004d68 	.word	0x20004d68
 800550c:	20005248 	.word	0x20005248
 8005510:	20005258 	.word	0x20005258
 8005514:	20005244 	.word	0x20005244
 8005518:	20004d6c 	.word	0x20004d6c
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005532:	4b14      	ldr	r3, [pc, #80]	@ (8005584 <vTaskDelay+0x64>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <vTaskDelay+0x32>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60bb      	str	r3, [r7, #8]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005552:	f000 f883 	bl	800565c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005556:	2100      	movs	r1, #0
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fd1b 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800555e:	f000 f88b 	bl	8005678 <xTaskResumeAll>
 8005562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800556a:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <vTaskDelay+0x68>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20005264 	.word	0x20005264
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	@ 0x28
 8005590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800559a:	463a      	mov	r2, r7
 800559c:	1d39      	adds	r1, r7, #4
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f834 	bl	8004610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	9202      	str	r2, [sp, #8]
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2300      	movs	r3, #0
 80055b8:	460a      	mov	r2, r1
 80055ba:	4922      	ldr	r1, [pc, #136]	@ (8005644 <vTaskStartScheduler+0xb8>)
 80055bc:	4822      	ldr	r0, [pc, #136]	@ (8005648 <vTaskStartScheduler+0xbc>)
 80055be:	f7ff fe09 	bl	80051d4 <xTaskCreateStatic>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4a21      	ldr	r2, [pc, #132]	@ (800564c <vTaskStartScheduler+0xc0>)
 80055c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055c8:	4b20      	ldr	r3, [pc, #128]	@ (800564c <vTaskStartScheduler+0xc0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055d0:	2301      	movs	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e001      	b.n	80055da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055e0:	f000 fd2c 	bl	800603c <xTimerCreateTimerTask>
 80055e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d116      	bne.n	800561a <vTaskStartScheduler+0x8e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	613b      	str	r3, [r7, #16]
}
 80055fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005600:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <vTaskStartScheduler+0xc4>)
 8005602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005606:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005608:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <vTaskStartScheduler+0xc8>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <vTaskStartScheduler+0xcc>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005614:	f001 f8fc 	bl	8006810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005618:	e00f      	b.n	800563a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005620:	d10b      	bne.n	800563a <vTaskStartScheduler+0xae>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60fb      	str	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <vTaskStartScheduler+0xaa>
}
 800563a:	bf00      	nop
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	08014548 	.word	0x08014548
 8005648:	08005ccd 	.word	0x08005ccd
 800564c:	20005260 	.word	0x20005260
 8005650:	2000525c 	.word	0x2000525c
 8005654:	20005248 	.word	0x20005248
 8005658:	20005240 	.word	0x20005240

0800565c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005660:	4b04      	ldr	r3, [pc, #16]	@ (8005674 <vTaskSuspendAll+0x18>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a03      	ldr	r2, [pc, #12]	@ (8005674 <vTaskSuspendAll+0x18>)
 8005668:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800566a:	bf00      	nop
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20005264 	.word	0x20005264

08005678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005686:	4b42      	ldr	r3, [pc, #264]	@ (8005790 <xTaskResumeAll+0x118>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	603b      	str	r3, [r7, #0]
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056a6:	f001 f957 	bl	8006958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056aa:	4b39      	ldr	r3, [pc, #228]	@ (8005790 <xTaskResumeAll+0x118>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	4a37      	ldr	r2, [pc, #220]	@ (8005790 <xTaskResumeAll+0x118>)
 80056b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b4:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <xTaskResumeAll+0x118>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d162      	bne.n	8005782 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056bc:	4b35      	ldr	r3, [pc, #212]	@ (8005794 <xTaskResumeAll+0x11c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d05e      	beq.n	8005782 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c4:	e02f      	b.n	8005726 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c6:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <xTaskResumeAll+0x120>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3318      	adds	r3, #24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f85a 	bl	800478c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff f855 	bl	800478c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e6:	4b2d      	ldr	r3, [pc, #180]	@ (800579c <xTaskResumeAll+0x124>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d903      	bls.n	80056f6 <xTaskResumeAll+0x7e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	4a2a      	ldr	r2, [pc, #168]	@ (800579c <xTaskResumeAll+0x124>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a27      	ldr	r2, [pc, #156]	@ (80057a0 <xTaskResumeAll+0x128>)
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fe ffe0 	bl	80046d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005716:	4b23      	ldr	r3, [pc, #140]	@ (80057a4 <xTaskResumeAll+0x12c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005720:	4b21      	ldr	r3, [pc, #132]	@ (80057a8 <xTaskResumeAll+0x130>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005726:	4b1c      	ldr	r3, [pc, #112]	@ (8005798 <xTaskResumeAll+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1cb      	bne.n	80056c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005734:	f000 fb80 	bl	8005e38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005738:	4b1c      	ldr	r3, [pc, #112]	@ (80057ac <xTaskResumeAll+0x134>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005744:	f000 f846 	bl	80057d4 <xTaskIncrementTick>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800574e:	4b16      	ldr	r3, [pc, #88]	@ (80057a8 <xTaskResumeAll+0x130>)
 8005750:	2201      	movs	r2, #1
 8005752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3b01      	subs	r3, #1
 8005758:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f1      	bne.n	8005744 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005760:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <xTaskResumeAll+0x134>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <xTaskResumeAll+0x130>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800576e:	2301      	movs	r3, #1
 8005770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005772:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <xTaskResumeAll+0x138>)
 8005774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005782:	f001 f91b 	bl	80069bc <vPortExitCritical>

	return xAlreadyYielded;
 8005786:	68bb      	ldr	r3, [r7, #8]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20005264 	.word	0x20005264
 8005794:	2000523c 	.word	0x2000523c
 8005798:	200051fc 	.word	0x200051fc
 800579c:	20005244 	.word	0x20005244
 80057a0:	20004d6c 	.word	0x20004d6c
 80057a4:	20004d68 	.word	0x20004d68
 80057a8:	20005250 	.word	0x20005250
 80057ac:	2000524c 	.word	0x2000524c
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057ba:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <xTaskGetTickCount+0x1c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057c0:	687b      	ldr	r3, [r7, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20005240 	.word	0x20005240

080057d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057de:	4b4f      	ldr	r3, [pc, #316]	@ (800591c <xTaskIncrementTick+0x148>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 8090 	bne.w	8005908 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005920 <xTaskIncrementTick+0x14c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005920 <xTaskIncrementTick+0x14c>)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d121      	bne.n	8005840 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057fc:	4b49      	ldr	r3, [pc, #292]	@ (8005924 <xTaskIncrementTick+0x150>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	603b      	str	r3, [r7, #0]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <xTaskIncrementTick+0x46>
 800581e:	4b41      	ldr	r3, [pc, #260]	@ (8005924 <xTaskIncrementTick+0x150>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	4b40      	ldr	r3, [pc, #256]	@ (8005928 <xTaskIncrementTick+0x154>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3e      	ldr	r2, [pc, #248]	@ (8005924 <xTaskIncrementTick+0x150>)
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4a3e      	ldr	r2, [pc, #248]	@ (8005928 <xTaskIncrementTick+0x154>)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	4b3e      	ldr	r3, [pc, #248]	@ (800592c <xTaskIncrementTick+0x158>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	4a3c      	ldr	r2, [pc, #240]	@ (800592c <xTaskIncrementTick+0x158>)
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	f000 fafc 	bl	8005e38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005840:	4b3b      	ldr	r3, [pc, #236]	@ (8005930 <xTaskIncrementTick+0x15c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	429a      	cmp	r2, r3
 8005848:	d349      	bcc.n	80058de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800584a:	4b36      	ldr	r3, [pc, #216]	@ (8005924 <xTaskIncrementTick+0x150>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <xTaskIncrementTick+0x15c>)
 8005856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800585a:	601a      	str	r2, [r3, #0]
					break;
 800585c:	e03f      	b.n	80058de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585e:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <xTaskIncrementTick+0x150>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005876:	4a2e      	ldr	r2, [pc, #184]	@ (8005930 <xTaskIncrementTick+0x15c>)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800587c:	e02f      	b.n	80058de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe ff82 	bl	800478c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3318      	adds	r3, #24
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe ff79 	bl	800478c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589e:	4b25      	ldr	r3, [pc, #148]	@ (8005934 <xTaskIncrementTick+0x160>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d903      	bls.n	80058ae <xTaskIncrementTick+0xda>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	4a22      	ldr	r2, [pc, #136]	@ (8005934 <xTaskIncrementTick+0x160>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <xTaskIncrementTick+0x164>)
 80058bc:	441a      	add	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f7fe ff04 	bl	80046d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <xTaskIncrementTick+0x168>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3b8      	bcc.n	800584a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058dc:	e7b5      	b.n	800584a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058de:	4b17      	ldr	r3, [pc, #92]	@ (800593c <xTaskIncrementTick+0x168>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	4914      	ldr	r1, [pc, #80]	@ (8005938 <xTaskIncrementTick+0x164>)
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d901      	bls.n	80058fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80058f6:	2301      	movs	r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058fa:	4b11      	ldr	r3, [pc, #68]	@ (8005940 <xTaskIncrementTick+0x16c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005902:	2301      	movs	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e004      	b.n	8005912 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005908:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <xTaskIncrementTick+0x170>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	4a0d      	ldr	r2, [pc, #52]	@ (8005944 <xTaskIncrementTick+0x170>)
 8005910:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005912:	697b      	ldr	r3, [r7, #20]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20005264 	.word	0x20005264
 8005920:	20005240 	.word	0x20005240
 8005924:	200051f4 	.word	0x200051f4
 8005928:	200051f8 	.word	0x200051f8
 800592c:	20005254 	.word	0x20005254
 8005930:	2000525c 	.word	0x2000525c
 8005934:	20005244 	.word	0x20005244
 8005938:	20004d6c 	.word	0x20004d6c
 800593c:	20004d68 	.word	0x20004d68
 8005940:	20005250 	.word	0x20005250
 8005944:	2000524c 	.word	0x2000524c

08005948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800594e:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <vTaskSwitchContext+0xa8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005956:	4b27      	ldr	r3, [pc, #156]	@ (80059f4 <vTaskSwitchContext+0xac>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800595c:	e042      	b.n	80059e4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800595e:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <vTaskSwitchContext+0xac>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005964:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <vTaskSwitchContext+0xb0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e011      	b.n	8005990 <vTaskSwitchContext+0x48>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <vTaskSwitchContext+0x42>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	607b      	str	r3, [r7, #4]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <vTaskSwitchContext+0x3e>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b01      	subs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	491a      	ldr	r1, [pc, #104]	@ (80059fc <vTaskSwitchContext+0xb4>)
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0e3      	beq.n	800596c <vTaskSwitchContext+0x24>
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4a13      	ldr	r2, [pc, #76]	@ (80059fc <vTaskSwitchContext+0xb4>)
 80059b0:	4413      	add	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3308      	adds	r3, #8
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d104      	bne.n	80059d4 <vTaskSwitchContext+0x8c>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <vTaskSwitchContext+0xb8>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4a06      	ldr	r2, [pc, #24]	@ (80059f8 <vTaskSwitchContext+0xb0>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20005264 	.word	0x20005264
 80059f4:	20005250 	.word	0x20005250
 80059f8:	20005244 	.word	0x20005244
 80059fc:	20004d6c 	.word	0x20004d6c
 8005a00:	20004d68 	.word	0x20004d68

08005a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10b      	bne.n	8005a2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a2c:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <vTaskPlaceOnEventList+0x48>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3318      	adds	r3, #24
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fe fe70 	bl	800471a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	6838      	ldr	r0, [r7, #0]
 8005a3e:	f000 faa9 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20004d68 	.word	0x20004d68

08005a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	617b      	str	r3, [r7, #20]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3318      	adds	r3, #24
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7fe fe25 	bl	80046d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	f000 fa7c 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
	}
 8005a9c:	bf00      	nop
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20004d68 	.word	0x20004d68

08005aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	60fb      	str	r3, [r7, #12]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3318      	adds	r3, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fe56 	bl	800478c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b58 <xTaskRemoveFromEventList+0xb0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11d      	bne.n	8005b24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fe4d 	bl	800478c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af6:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <xTaskRemoveFromEventList+0xb4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d903      	bls.n	8005b06 <xTaskRemoveFromEventList+0x5e>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <xTaskRemoveFromEventList+0xb4>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4a13      	ldr	r2, [pc, #76]	@ (8005b60 <xTaskRemoveFromEventList+0xb8>)
 8005b14:	441a      	add	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fe fdd8 	bl	80046d2 <vListInsertEnd>
 8005b22:	e005      	b.n	8005b30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3318      	adds	r3, #24
 8005b28:	4619      	mov	r1, r3
 8005b2a:	480e      	ldr	r0, [pc, #56]	@ (8005b64 <xTaskRemoveFromEventList+0xbc>)
 8005b2c:	f7fe fdd1 	bl	80046d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b34:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <xTaskRemoveFromEventList+0xc0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d905      	bls.n	8005b4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b42:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <xTaskRemoveFromEventList+0xc4>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e001      	b.n	8005b4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b4e:	697b      	ldr	r3, [r7, #20]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20005264 	.word	0x20005264
 8005b5c:	20005244 	.word	0x20005244
 8005b60:	20004d6c 	.word	0x20004d6c
 8005b64:	200051fc 	.word	0x200051fc
 8005b68:	20004d68 	.word	0x20004d68
 8005b6c:	20005250 	.word	0x20005250

08005b70 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005b96:	f000 fedf 	bl	8006958 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <vTaskSetTimeOutState+0x48>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <vTaskSetTimeOutState+0x4c>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005baa:	f000 ff07 	bl	80069bc <vPortExitCritical>
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20005254 	.word	0x20005254
 8005bbc:	20005240 	.word	0x20005240

08005bc0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <vTaskInternalSetTimeOutState+0x24>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	@ (8005be8 <vTaskInternalSetTimeOutState+0x28>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20005254 	.word	0x20005254
 8005be8:	20005240 	.word	0x20005240

08005bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10b      	bne.n	8005c14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	613b      	str	r3, [r7, #16]
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c32:	f000 fe91 	bl	8006958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c36:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <xTaskCheckForTimeOut+0xc0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c4e:	d102      	bne.n	8005c56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e023      	b.n	8005c9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <xTaskCheckForTimeOut+0xc4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d007      	beq.n	8005c72 <xTaskCheckForTimeOut+0x86>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d302      	bcc.n	8005c72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e015      	b.n	8005c9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d20b      	bcs.n	8005c94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff99 	bl	8005bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	e004      	b.n	8005c9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c9e:	f000 fe8d 	bl	80069bc <vPortExitCritical>

	return xReturn;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20005240 	.word	0x20005240
 8005cb0:	20005254 	.word	0x20005254

08005cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cb8:	4b03      	ldr	r3, [pc, #12]	@ (8005cc8 <vTaskMissedYield+0x14>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20005250 	.word	0x20005250

08005ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cd4:	f000 f852 	bl	8005d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <prvIdleTask+0x28>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d9f9      	bls.n	8005cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <prvIdleTask+0x2c>)
 8005ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cf0:	e7f0      	b.n	8005cd4 <prvIdleTask+0x8>
 8005cf2:	bf00      	nop
 8005cf4:	20004d6c 	.word	0x20004d6c
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	e00c      	b.n	8005d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a12      	ldr	r2, [pc, #72]	@ (8005d5c <prvInitialiseTaskLists+0x60>)
 8005d14:	4413      	add	r3, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fcae 	bl	8004678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b37      	cmp	r3, #55	@ 0x37
 8005d26:	d9ef      	bls.n	8005d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d28:	480d      	ldr	r0, [pc, #52]	@ (8005d60 <prvInitialiseTaskLists+0x64>)
 8005d2a:	f7fe fca5 	bl	8004678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d2e:	480d      	ldr	r0, [pc, #52]	@ (8005d64 <prvInitialiseTaskLists+0x68>)
 8005d30:	f7fe fca2 	bl	8004678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d34:	480c      	ldr	r0, [pc, #48]	@ (8005d68 <prvInitialiseTaskLists+0x6c>)
 8005d36:	f7fe fc9f 	bl	8004678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d3a:	480c      	ldr	r0, [pc, #48]	@ (8005d6c <prvInitialiseTaskLists+0x70>)
 8005d3c:	f7fe fc9c 	bl	8004678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d40:	480b      	ldr	r0, [pc, #44]	@ (8005d70 <prvInitialiseTaskLists+0x74>)
 8005d42:	f7fe fc99 	bl	8004678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d46:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <prvInitialiseTaskLists+0x78>)
 8005d48:	4a05      	ldr	r2, [pc, #20]	@ (8005d60 <prvInitialiseTaskLists+0x64>)
 8005d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <prvInitialiseTaskLists+0x7c>)
 8005d4e:	4a05      	ldr	r2, [pc, #20]	@ (8005d64 <prvInitialiseTaskLists+0x68>)
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20004d6c 	.word	0x20004d6c
 8005d60:	200051cc 	.word	0x200051cc
 8005d64:	200051e0 	.word	0x200051e0
 8005d68:	200051fc 	.word	0x200051fc
 8005d6c:	20005210 	.word	0x20005210
 8005d70:	20005228 	.word	0x20005228
 8005d74:	200051f4 	.word	0x200051f4
 8005d78:	200051f8 	.word	0x200051f8

08005d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d82:	e019      	b.n	8005db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d84:	f000 fde8 	bl	8006958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	4b10      	ldr	r3, [pc, #64]	@ (8005dcc <prvCheckTasksWaitingTermination+0x50>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fcf9 	bl	800478c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <prvCheckTasksWaitingTermination+0x54>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	4a0b      	ldr	r2, [pc, #44]	@ (8005dd0 <prvCheckTasksWaitingTermination+0x54>)
 8005da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <prvCheckTasksWaitingTermination+0x58>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd4 <prvCheckTasksWaitingTermination+0x58>)
 8005dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dae:	f000 fe05 	bl	80069bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f810 	bl	8005dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005db8:	4b06      	ldr	r3, [pc, #24]	@ (8005dd4 <prvCheckTasksWaitingTermination+0x58>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e1      	bne.n	8005d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20005210 	.word	0x20005210
 8005dd0:	2000523c 	.word	0x2000523c
 8005dd4:	20005224 	.word	0x20005224

08005dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d108      	bne.n	8005dfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 ffa2 	bl	8006d38 <vPortFree>
				vPortFree( pxTCB );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 ff9f 	bl	8006d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dfa:	e019      	b.n	8005e30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d103      	bne.n	8005e0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 ff96 	bl	8006d38 <vPortFree>
	}
 8005e0c:	e010      	b.n	8005e30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d00b      	beq.n	8005e30 <prvDeleteTCB+0x58>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <prvDeleteTCB+0x54>
	}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <prvResetNextTaskUnblockTime+0x38>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <prvResetNextTaskUnblockTime+0x3c>)
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e50:	e008      	b.n	8005e64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e52:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <prvResetNextTaskUnblockTime+0x38>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a04      	ldr	r2, [pc, #16]	@ (8005e74 <prvResetNextTaskUnblockTime+0x3c>)
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	200051f4 	.word	0x200051f4
 8005e74:	2000525c 	.word	0x2000525c

08005e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <xTaskGetSchedulerState+0x34>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e86:	2301      	movs	r3, #1
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e008      	b.n	8005e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e8c:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <xTaskGetSchedulerState+0x38>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e94:	2302      	movs	r3, #2
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	e001      	b.n	8005e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e9e:	687b      	ldr	r3, [r7, #4]
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20005248 	.word	0x20005248
 8005eb0:	20005264 	.word	0x20005264

08005eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d058      	beq.n	8005f7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eca:	4b2f      	ldr	r3, [pc, #188]	@ (8005f88 <xTaskPriorityDisinherit+0xd4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d00b      	beq.n	8005eec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60fb      	str	r3, [r7, #12]
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60bb      	str	r3, [r7, #8]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f10:	1e5a      	subs	r2, r3, #1
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d02c      	beq.n	8005f7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d128      	bne.n	8005f7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fc2c 	bl	800478c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f8c <xTaskPriorityDisinherit+0xd8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <xTaskPriorityDisinherit+0xa8>
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a0c      	ldr	r2, [pc, #48]	@ (8005f8c <xTaskPriorityDisinherit+0xd8>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <xTaskPriorityDisinherit+0xdc>)
 8005f6a:	441a      	add	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fe fbad 	bl	80046d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f7c:	697b      	ldr	r3, [r7, #20]
	}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20004d68 	.word	0x20004d68
 8005f8c:	20005244 	.word	0x20005244
 8005f90:	20004d6c 	.word	0x20004d6c

08005f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f9e:	4b21      	ldr	r3, [pc, #132]	@ (8006024 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa4:	4b20      	ldr	r3, [pc, #128]	@ (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fbee 	bl	800478c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb6:	d10a      	bne.n	8005fce <prvAddCurrentTaskToDelayedList+0x3a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4819      	ldr	r0, [pc, #100]	@ (800602c <prvAddCurrentTaskToDelayedList+0x98>)
 8005fc8:	f7fe fb83 	bl	80046d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fcc:	e026      	b.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fd6:	4b14      	ldr	r3, [pc, #80]	@ (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d209      	bcs.n	8005ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fb91 	bl	800471a <vListInsert>
}
 8005ff8:	e010      	b.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8006034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fe fb87 	bl	800471a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800600c:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	d202      	bcs.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006016:	4a08      	ldr	r2, [pc, #32]	@ (8006038 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6013      	str	r3, [r2, #0]
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20005240 	.word	0x20005240
 8006028:	20004d68 	.word	0x20004d68
 800602c:	20005228 	.word	0x20005228
 8006030:	200051f8 	.word	0x200051f8
 8006034:	200051f4 	.word	0x200051f4
 8006038:	2000525c 	.word	0x2000525c

0800603c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	@ 0x28
 8006040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006046:	f000 fb13 	bl	8006670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800604a:	4b1d      	ldr	r3, [pc, #116]	@ (80060c0 <xTimerCreateTimerTask+0x84>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d021      	beq.n	8006096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800605a:	1d3a      	adds	r2, r7, #4
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe faed 	bl	8004644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	9202      	str	r2, [sp, #8]
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	2302      	movs	r3, #2
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	460a      	mov	r2, r1
 800607c:	4911      	ldr	r1, [pc, #68]	@ (80060c4 <xTimerCreateTimerTask+0x88>)
 800607e:	4812      	ldr	r0, [pc, #72]	@ (80060c8 <xTimerCreateTimerTask+0x8c>)
 8006080:	f7ff f8a8 	bl	80051d4 <xTaskCreateStatic>
 8006084:	4603      	mov	r3, r0
 8006086:	4a11      	ldr	r2, [pc, #68]	@ (80060cc <xTimerCreateTimerTask+0x90>)
 8006088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800608a:	4b10      	ldr	r3, [pc, #64]	@ (80060cc <xTimerCreateTimerTask+0x90>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	613b      	str	r3, [r7, #16]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060b4:	697b      	ldr	r3, [r7, #20]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20005298 	.word	0x20005298
 80060c4:	08014550 	.word	0x08014550
 80060c8:	08006209 	.word	0x08006209
 80060cc:	2000529c 	.word	0x2000529c

080060d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	@ 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060de:	2300      	movs	r3, #0
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <xTimerGenericCommand+0x30>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	623b      	str	r3, [r7, #32]
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006100:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <xTimerGenericCommand+0x98>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02a      	beq.n	800615e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b05      	cmp	r3, #5
 8006118:	dc18      	bgt.n	800614c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800611a:	f7ff fead 	bl	8005e78 <xTaskGetSchedulerState>
 800611e:	4603      	mov	r3, r0
 8006120:	2b02      	cmp	r3, #2
 8006122:	d109      	bne.n	8006138 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006124:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <xTimerGenericCommand+0x98>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	f107 0110 	add.w	r1, r7, #16
 800612c:	2300      	movs	r3, #0
 800612e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006130:	f7fe fc60 	bl	80049f4 <xQueueGenericSend>
 8006134:	6278      	str	r0, [r7, #36]	@ 0x24
 8006136:	e012      	b.n	800615e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <xTimerGenericCommand+0x98>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	f107 0110 	add.w	r1, r7, #16
 8006140:	2300      	movs	r3, #0
 8006142:	2200      	movs	r2, #0
 8006144:	f7fe fc56 	bl	80049f4 <xQueueGenericSend>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24
 800614a:	e008      	b.n	800615e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <xTimerGenericCommand+0x98>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	f107 0110 	add.w	r1, r7, #16
 8006154:	2300      	movs	r3, #0
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	f7fe fd4e 	bl	8004bf8 <xQueueGenericSendFromISR>
 800615c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006160:	4618      	mov	r0, r3
 8006162:	3728      	adds	r7, #40	@ 0x28
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20005298 	.word	0x20005298

0800616c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006176:	4b23      	ldr	r3, [pc, #140]	@ (8006204 <prvProcessExpiredTimer+0x98>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fb01 	bl	800478c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d023      	beq.n	80061e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	18d1      	adds	r1, r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	6978      	ldr	r0, [r7, #20]
 80061a6:	f000 f8d5 	bl	8006354 <prvInsertTimerInActiveList>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	6978      	ldr	r0, [r7, #20]
 80061bc:	f7ff ff88 	bl	80060d0 <xTimerGenericCommand>
 80061c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d114      	bne.n	80061f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	4798      	blx	r3
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20005290 	.word	0x20005290

08006208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4618      	mov	r0, r3
 8006216:	f000 f859 	bl	80062cc <prvGetNextExpireTime>
 800621a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f805 	bl	8006230 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006226:	f000 f8d7 	bl	80063d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800622a:	bf00      	nop
 800622c:	e7f0      	b.n	8006210 <prvTimerTask+0x8>
	...

08006230 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800623a:	f7ff fa0f 	bl	800565c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f866 	bl	8006314 <prvSampleTimeNow>
 8006248:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d130      	bne.n	80062b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <prvProcessTimerOrBlockTask+0x3c>
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	429a      	cmp	r2, r3
 800625c:	d806      	bhi.n	800626c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800625e:	f7ff fa0b 	bl	8005678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ff81 	bl	800616c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800626a:	e024      	b.n	80062b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006272:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <prvProcessTimerOrBlockTask+0x90>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <prvProcessTimerOrBlockTask+0x50>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <prvProcessTimerOrBlockTask+0x52>
 8006280:	2300      	movs	r3, #0
 8006282:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <prvProcessTimerOrBlockTask+0x94>)
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	f7fe ff6b 	bl	800516c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006296:	f7ff f9ef 	bl	8005678 <xTaskResumeAll>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062a0:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <prvProcessTimerOrBlockTask+0x98>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
}
 80062b0:	e001      	b.n	80062b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062b2:	f7ff f9e1 	bl	8005678 <xTaskResumeAll>
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20005294 	.word	0x20005294
 80062c4:	20005298 	.word	0x20005298
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006310 <prvGetNextExpireTime+0x44>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <prvGetNextExpireTime+0x16>
 80062de:	2201      	movs	r2, #1
 80062e0:	e000      	b.n	80062e4 <prvGetNextExpireTime+0x18>
 80062e2:	2200      	movs	r2, #0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <prvGetNextExpireTime+0x44>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e001      	b.n	8006300 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006300:	68fb      	ldr	r3, [r7, #12]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20005290 	.word	0x20005290

08006314 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800631c:	f7ff fa4a 	bl	80057b4 <xTaskGetTickCount>
 8006320:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006322:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <prvSampleTimeNow+0x3c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	429a      	cmp	r2, r3
 800632a:	d205      	bcs.n	8006338 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800632c:	f000 f93a 	bl	80065a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e002      	b.n	800633e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800633e:	4a04      	ldr	r2, [pc, #16]	@ (8006350 <prvSampleTimeNow+0x3c>)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200052a0 	.word	0x200052a0

08006354 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d812      	bhi.n	80063a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e01b      	b.n	80063c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800638e:	4b10      	ldr	r3, [pc, #64]	@ (80063d0 <prvInsertTimerInActiveList+0x7c>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fe f9be 	bl	800471a <vListInsert>
 800639e:	e012      	b.n	80063c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d206      	bcs.n	80063b6 <prvInsertTimerInActiveList+0x62>
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e007      	b.n	80063c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063b6:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <prvInsertTimerInActiveList+0x80>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fe f9aa 	bl	800471a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063c6:	697b      	ldr	r3, [r7, #20]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20005294 	.word	0x20005294
 80063d4:	20005290 	.word	0x20005290

080063d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	@ 0x38
 80063dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063de:	e0ce      	b.n	800657e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da19      	bge.n	800641a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	3304      	adds	r3, #4
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <prvProcessReceivedCommands+0x32>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	61fb      	str	r3, [r7, #28]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006410:	6850      	ldr	r0, [r2, #4]
 8006412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006414:	6892      	ldr	r2, [r2, #8]
 8006416:	4611      	mov	r1, r2
 8006418:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f2c0 80ae 	blt.w	800657e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe f9aa 	bl	800478c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006438:	463b      	mov	r3, r7
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff6a 	bl	8006314 <prvSampleTimeNow>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b09      	cmp	r3, #9
 8006446:	f200 8097 	bhi.w	8006578 <prvProcessReceivedCommands+0x1a0>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <prvProcessReceivedCommands+0x78>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006479 	.word	0x08006479
 8006454:	08006479 	.word	0x08006479
 8006458:	08006479 	.word	0x08006479
 800645c:	080064ef 	.word	0x080064ef
 8006460:	08006503 	.word	0x08006503
 8006464:	0800654f 	.word	0x0800654f
 8006468:	08006479 	.word	0x08006479
 800646c:	08006479 	.word	0x08006479
 8006470:	080064ef 	.word	0x080064ef
 8006474:	08006503 	.word	0x08006503
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	18d1      	adds	r1, r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006498:	f7ff ff5c 	bl	8006354 <prvInsertTimerInActiveList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d06c      	beq.n	800657c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d061      	beq.n	800657c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	441a      	add	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	2100      	movs	r1, #0
 80064c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ca:	f7ff fe01 	bl	80060d0 <xTimerGenericCommand>
 80064ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d152      	bne.n	800657c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	61bb      	str	r3, [r7, #24]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006500:	e03d      	b.n	800657e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	617b      	str	r3, [r7, #20]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	18d1      	adds	r1, r2, r3
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006548:	f7ff ff04 	bl	8006354 <prvInsertTimerInActiveList>
					break;
 800654c:	e017      	b.n	800657e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800655c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800655e:	f000 fbeb 	bl	8006d38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006562:	e00c      	b.n	800657e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006576:	e002      	b.n	800657e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <prvProcessReceivedCommands+0x1a6>
					break;
 800657c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800657e:	4b08      	ldr	r3, [pc, #32]	@ (80065a0 <prvProcessReceivedCommands+0x1c8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1d39      	adds	r1, r7, #4
 8006584:	2200      	movs	r2, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fbd4 	bl	8004d34 <xQueueReceive>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	f47f af26 	bne.w	80063e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3730      	adds	r7, #48	@ 0x30
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20005298 	.word	0x20005298

080065a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065aa:	e049      	b.n	8006640 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe f8e1 	bl	800478c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02f      	beq.n	8006640 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d90e      	bls.n	8006610 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7fe f886 	bl	800471a <vListInsert>
 800660e:	e017      	b.n	8006640 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006610:	2300      	movs	r3, #0
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff fd58 	bl	80060d0 <xTimerGenericCommand>
 8006620:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	603b      	str	r3, [r7, #0]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006640:	4b09      	ldr	r3, [pc, #36]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1b0      	bne.n	80065ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800664a:	4b07      	ldr	r3, [pc, #28]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006650:	4b06      	ldr	r3, [pc, #24]	@ (800666c <prvSwitchTimerLists+0xc8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a04      	ldr	r2, [pc, #16]	@ (8006668 <prvSwitchTimerLists+0xc4>)
 8006656:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006658:	4a04      	ldr	r2, [pc, #16]	@ (800666c <prvSwitchTimerLists+0xc8>)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6013      	str	r3, [r2, #0]
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20005290 	.word	0x20005290
 800666c:	20005294 	.word	0x20005294

08006670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006676:	f000 f96f 	bl	8006958 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800667a:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <prvCheckForValidListAndQueue+0x60>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d120      	bne.n	80066c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006682:	4814      	ldr	r0, [pc, #80]	@ (80066d4 <prvCheckForValidListAndQueue+0x64>)
 8006684:	f7fd fff8 	bl	8004678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006688:	4813      	ldr	r0, [pc, #76]	@ (80066d8 <prvCheckForValidListAndQueue+0x68>)
 800668a:	f7fd fff5 	bl	8004678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800668e:	4b13      	ldr	r3, [pc, #76]	@ (80066dc <prvCheckForValidListAndQueue+0x6c>)
 8006690:	4a10      	ldr	r2, [pc, #64]	@ (80066d4 <prvCheckForValidListAndQueue+0x64>)
 8006692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006694:	4b12      	ldr	r3, [pc, #72]	@ (80066e0 <prvCheckForValidListAndQueue+0x70>)
 8006696:	4a10      	ldr	r2, [pc, #64]	@ (80066d8 <prvCheckForValidListAndQueue+0x68>)
 8006698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800669a:	2300      	movs	r3, #0
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4b11      	ldr	r3, [pc, #68]	@ (80066e4 <prvCheckForValidListAndQueue+0x74>)
 80066a0:	4a11      	ldr	r2, [pc, #68]	@ (80066e8 <prvCheckForValidListAndQueue+0x78>)
 80066a2:	2110      	movs	r1, #16
 80066a4:	200a      	movs	r0, #10
 80066a6:	f7fe f905 	bl	80048b4 <xQueueGenericCreateStatic>
 80066aa:	4603      	mov	r3, r0
 80066ac:	4a08      	ldr	r2, [pc, #32]	@ (80066d0 <prvCheckForValidListAndQueue+0x60>)
 80066ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066b0:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <prvCheckForValidListAndQueue+0x60>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <prvCheckForValidListAndQueue+0x60>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	490b      	ldr	r1, [pc, #44]	@ (80066ec <prvCheckForValidListAndQueue+0x7c>)
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fd2a 	bl	8005118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066c4:	f000 f97a 	bl	80069bc <vPortExitCritical>
}
 80066c8:	bf00      	nop
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20005298 	.word	0x20005298
 80066d4:	20005268 	.word	0x20005268
 80066d8:	2000527c 	.word	0x2000527c
 80066dc:	20005290 	.word	0x20005290
 80066e0:	20005294 	.word	0x20005294
 80066e4:	20005344 	.word	0x20005344
 80066e8:	200052a4 	.word	0x200052a4
 80066ec:	08014558 	.word	0x08014558

080066f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3b04      	subs	r3, #4
 8006700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b04      	subs	r3, #4
 800670e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f023 0201 	bic.w	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3b04      	subs	r3, #4
 800671e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006720:	4a0c      	ldr	r2, [pc, #48]	@ (8006754 <pxPortInitialiseStack+0x64>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3b14      	subs	r3, #20
 800672a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b04      	subs	r3, #4
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f06f 0202 	mvn.w	r2, #2
 800673e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3b20      	subs	r3, #32
 8006744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006746:	68fb      	ldr	r3, [r7, #12]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	08006759 	.word	0x08006759

08006758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006762:	4b13      	ldr	r3, [pc, #76]	@ (80067b0 <prvTaskExitError+0x58>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800676a:	d00b      	beq.n	8006784 <prvTaskExitError+0x2c>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60fb      	str	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	e7fd      	b.n	8006780 <prvTaskExitError+0x28>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60bb      	str	r3, [r7, #8]
}
 8006796:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006798:	bf00      	nop
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0fc      	beq.n	800679a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000010 	.word	0x20000010
	...

080067c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067c0:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <pxCurrentTCBConst2>)
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	6808      	ldr	r0, [r1, #0]
 80067c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	f380 8809 	msr	PSP, r0
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	4770      	bx	lr
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst2>:
 80067e0:	20004d68 	.word	0x20004d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067e8:	4808      	ldr	r0, [pc, #32]	@ (800680c <prvPortStartFirstTask+0x24>)
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f380 8808 	msr	MSP, r0
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8814 	msr	CONTROL, r0
 80067fa:	b662      	cpsie	i
 80067fc:	b661      	cpsie	f
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	df00      	svc	0
 8006808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800680a:	bf00      	nop
 800680c:	e000ed08 	.word	0xe000ed08

08006810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006816:	4b47      	ldr	r3, [pc, #284]	@ (8006934 <xPortStartScheduler+0x124>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a47      	ldr	r2, [pc, #284]	@ (8006938 <xPortStartScheduler+0x128>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10b      	bne.n	8006838 <xPortStartScheduler+0x28>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006838:	4b3e      	ldr	r3, [pc, #248]	@ (8006934 <xPortStartScheduler+0x124>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a3f      	ldr	r2, [pc, #252]	@ (800693c <xPortStartScheduler+0x12c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10b      	bne.n	800685a <xPortStartScheduler+0x4a>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800685a:	4b39      	ldr	r3, [pc, #228]	@ (8006940 <xPortStartScheduler+0x130>)
 800685c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	22ff      	movs	r2, #255	@ 0xff
 800686a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <xPortStartScheduler+0x134>)
 8006880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006882:	4b31      	ldr	r3, [pc, #196]	@ (8006948 <xPortStartScheduler+0x138>)
 8006884:	2207      	movs	r2, #7
 8006886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006888:	e009      	b.n	800689e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800688a:	4b2f      	ldr	r3, [pc, #188]	@ (8006948 <xPortStartScheduler+0x138>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	4a2d      	ldr	r2, [pc, #180]	@ (8006948 <xPortStartScheduler+0x138>)
 8006892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a6:	2b80      	cmp	r3, #128	@ 0x80
 80068a8:	d0ef      	beq.n	800688a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068aa:	4b27      	ldr	r3, [pc, #156]	@ (8006948 <xPortStartScheduler+0x138>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f1c3 0307 	rsb	r3, r3, #7
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00b      	beq.n	80068ce <xPortStartScheduler+0xbe>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006948 <xPortStartScheduler+0x138>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006948 <xPortStartScheduler+0x138>)
 80068d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <xPortStartScheduler+0x138>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068e0:	4a19      	ldr	r2, [pc, #100]	@ (8006948 <xPortStartScheduler+0x138>)
 80068e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068ec:	4b17      	ldr	r3, [pc, #92]	@ (800694c <xPortStartScheduler+0x13c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a16      	ldr	r2, [pc, #88]	@ (800694c <xPortStartScheduler+0x13c>)
 80068f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f8:	4b14      	ldr	r3, [pc, #80]	@ (800694c <xPortStartScheduler+0x13c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a13      	ldr	r2, [pc, #76]	@ (800694c <xPortStartScheduler+0x13c>)
 80068fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006904:	f000 f8da 	bl	8006abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006908:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <xPortStartScheduler+0x140>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800690e:	f000 f8f9 	bl	8006b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006912:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <xPortStartScheduler+0x144>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a0f      	ldr	r2, [pc, #60]	@ (8006954 <xPortStartScheduler+0x144>)
 8006918:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800691c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800691e:	f7ff ff63 	bl	80067e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006922:	f7ff f811 	bl	8005948 <vTaskSwitchContext>
	prvTaskExitError();
 8006926:	f7ff ff17 	bl	8006758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	e000ed00 	.word	0xe000ed00
 8006938:	410fc271 	.word	0x410fc271
 800693c:	410fc270 	.word	0x410fc270
 8006940:	e000e400 	.word	0xe000e400
 8006944:	20005394 	.word	0x20005394
 8006948:	20005398 	.word	0x20005398
 800694c:	e000ed20 	.word	0xe000ed20
 8006950:	20000010 	.word	0x20000010
 8006954:	e000ef34 	.word	0xe000ef34

08006958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
}
 8006970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <vPortEnterCritical+0x5c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a0e      	ldr	r2, [pc, #56]	@ (80069b4 <vPortEnterCritical+0x5c>)
 800697a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800697c:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <vPortEnterCritical+0x5c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d110      	bne.n	80069a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <vPortEnterCritical+0x60>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	603b      	str	r3, [r7, #0]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vPortEnterCritical+0x4a>
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000010 	.word	0x20000010
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069c2:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <vPortExitCritical+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <vPortExitCritical+0x26>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	607b      	str	r3, [r7, #4]
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	e7fd      	b.n	80069de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <vPortExitCritical+0x50>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4a08      	ldr	r2, [pc, #32]	@ (8006a0c <vPortExitCritical+0x50>)
 80069ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069ec:	4b07      	ldr	r3, [pc, #28]	@ (8006a0c <vPortExitCritical+0x50>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <vPortExitCritical+0x44>
 80069f4:	2300      	movs	r3, #0
 80069f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	20000010 	.word	0x20000010

08006a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4b15      	ldr	r3, [pc, #84]	@ (8006a70 <pxCurrentTCBConst>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f01e 0f10 	tst.w	lr, #16
 8006a20:	bf08      	it	eq
 8006a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a34:	f380 8811 	msr	BASEPRI, r0
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f7fe ff82 	bl	8005948 <vTaskSwitchContext>
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f380 8811 	msr	BASEPRI, r0
 8006a4c:	bc09      	pop	{r0, r3}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	f01e 0f10 	tst.w	lr, #16
 8006a5a:	bf08      	it	eq
 8006a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a60:	f380 8809 	msr	PSP, r0
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst>:
 8006a70:	20004d68 	.word	0x20004d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f7fe fe9f 	bl	80057d4 <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <xPortSysTickHandler+0x40>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <vPortSetupTimerInterrupt+0x38>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <vPortSetupTimerInterrupt+0x3c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <vPortSetupTimerInterrupt+0x40>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	4a09      	ldr	r2, [pc, #36]	@ (8006b00 <vPortSetupTimerInterrupt+0x44>)
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ade:	4b04      	ldr	r3, [pc, #16]	@ (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e010 	.word	0xe000e010
 8006af4:	e000e018 	.word	0xe000e018
 8006af8:	20000004 	.word	0x20000004
 8006afc:	10624dd3 	.word	0x10624dd3
 8006b00:	e000e014 	.word	0xe000e014

08006b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b14 <vPortEnableVFP+0x10>
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b0e:	6001      	str	r1, [r0, #0]
 8006b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b12:	bf00      	nop
 8006b14:	e000ed88 	.word	0xe000ed88

08006b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b1e:	f3ef 8305 	mrs	r3, IPSR
 8006b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d915      	bls.n	8006b56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b2a:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <vPortValidateInterruptPriority+0x74>)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b34:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <vPortValidateInterruptPriority+0x78>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	7afa      	ldrb	r2, [r7, #11]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d20b      	bcs.n	8006b56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b56:	4b0f      	ldr	r3, [pc, #60]	@ (8006b94 <vPortValidateInterruptPriority+0x7c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b98 <vPortValidateInterruptPriority+0x80>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90b      	bls.n	8006b7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	603b      	str	r3, [r7, #0]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <vPortValidateInterruptPriority+0x62>
	}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	e000e3f0 	.word	0xe000e3f0
 8006b90:	20005394 	.word	0x20005394
 8006b94:	e000ed0c 	.word	0xe000ed0c
 8006b98:	20005398 	.word	0x20005398

08006b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	@ 0x28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba8:	f7fe fd58 	bl	800565c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bac:	4b5c      	ldr	r3, [pc, #368]	@ (8006d20 <pvPortMalloc+0x184>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb4:	f000 f924 	bl	8006e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d24 <pvPortMalloc+0x188>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 8095 	bne.w	8006cf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01e      	beq.n	8006c0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bcc:	2208      	movs	r2, #8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d015      	beq.n	8006c0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	3308      	adds	r3, #8
 8006be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <pvPortMalloc+0x6e>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	617b      	str	r3, [r7, #20]
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d06f      	beq.n	8006cf0 <pvPortMalloc+0x154>
 8006c10:	4b45      	ldr	r3, [pc, #276]	@ (8006d28 <pvPortMalloc+0x18c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d86a      	bhi.n	8006cf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c1a:	4b44      	ldr	r3, [pc, #272]	@ (8006d2c <pvPortMalloc+0x190>)
 8006c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c1e:	4b43      	ldr	r3, [pc, #268]	@ (8006d2c <pvPortMalloc+0x190>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c24:	e004      	b.n	8006c30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <pvPortMalloc+0xa6>
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f1      	bne.n	8006c26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c42:	4b37      	ldr	r3, [pc, #220]	@ (8006d20 <pvPortMalloc+0x184>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d051      	beq.n	8006cf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	4413      	add	r3, r2
 8006c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	2308      	movs	r3, #8
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d920      	bls.n	8006cb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4413      	add	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <pvPortMalloc+0xfc>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006caa:	69b8      	ldr	r0, [r7, #24]
 8006cac:	f000 f90a 	bl	8006ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d28 <pvPortMalloc+0x18c>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <pvPortMalloc+0x18c>)
 8006cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d28 <pvPortMalloc+0x18c>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <pvPortMalloc+0x194>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d203      	bcs.n	8006cd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cca:	4b17      	ldr	r3, [pc, #92]	@ (8006d28 <pvPortMalloc+0x18c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <pvPortMalloc+0x194>)
 8006cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4b13      	ldr	r3, [pc, #76]	@ (8006d24 <pvPortMalloc+0x188>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <pvPortMalloc+0x198>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <pvPortMalloc+0x198>)
 8006cee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cf0:	f7fe fcc2 	bl	8005678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <pvPortMalloc+0x17a>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <pvPortMalloc+0x176>
	return pvReturn;
 8006d16:	69fb      	ldr	r3, [r7, #28]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3728      	adds	r7, #40	@ 0x28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20008fa4 	.word	0x20008fa4
 8006d24:	20008fb8 	.word	0x20008fb8
 8006d28:	20008fa8 	.word	0x20008fa8
 8006d2c:	20008f9c 	.word	0x20008f9c
 8006d30:	20008fac 	.word	0x20008fac
 8006d34:	20008fb0 	.word	0x20008fb0

08006d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04f      	beq.n	8006dea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	425b      	negs	r3, r3
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4413      	add	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <vPortFree+0xbc>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <vPortFree+0x46>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60fb      	str	r3, [r7, #12]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <vPortFree+0x66>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60bb      	str	r3, [r7, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4b14      	ldr	r3, [pc, #80]	@ (8006df4 <vPortFree+0xbc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01e      	beq.n	8006dea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d11a      	bne.n	8006dea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	4b0e      	ldr	r3, [pc, #56]	@ (8006df4 <vPortFree+0xbc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc4:	f7fe fc4a 	bl	800565c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <vPortFree+0xc0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4a09      	ldr	r2, [pc, #36]	@ (8006df8 <vPortFree+0xc0>)
 8006dd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f000 f874 	bl	8006ec4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <vPortFree+0xc4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3301      	adds	r3, #1
 8006de2:	4a06      	ldr	r2, [pc, #24]	@ (8006dfc <vPortFree+0xc4>)
 8006de4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006de6:	f7fe fc47 	bl	8005678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dea:	bf00      	nop
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20008fb8 	.word	0x20008fb8
 8006df8:	20008fa8 	.word	0x20008fa8
 8006dfc:	20008fb4 	.word	0x20008fb4

08006e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e0c:	4b27      	ldr	r3, [pc, #156]	@ (8006eac <prvHeapInit+0xac>)
 8006e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eac <prvHeapInit+0xac>)
 8006e30:	4413      	add	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e38:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <prvHeapInit+0xb0>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb0 <prvHeapInit+0xb0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <prvHeapInit+0xb4>)
 8006e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e62:	4b14      	ldr	r3, [pc, #80]	@ (8006eb4 <prvHeapInit+0xb4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6a:	4b12      	ldr	r3, [pc, #72]	@ (8006eb4 <prvHeapInit+0xb4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e80:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <prvHeapInit+0xb4>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb8 <prvHeapInit+0xb8>)
 8006e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4a09      	ldr	r2, [pc, #36]	@ (8006ebc <prvHeapInit+0xbc>)
 8006e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e98:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <prvHeapInit+0xc0>)
 8006e9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	2000539c 	.word	0x2000539c
 8006eb0:	20008f9c 	.word	0x20008f9c
 8006eb4:	20008fa4 	.word	0x20008fa4
 8006eb8:	20008fac 	.word	0x20008fac
 8006ebc:	20008fa8 	.word	0x20008fa8
 8006ec0:	20008fb8 	.word	0x20008fb8

08006ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ecc:	4b28      	ldr	r3, [pc, #160]	@ (8006f70 <prvInsertBlockIntoFreeList+0xac>)
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e002      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x14>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d8f7      	bhi.n	8006ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d108      	bne.n	8006f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	441a      	add	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d118      	bne.n	8006f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <prvInsertBlockIntoFreeList+0xb0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d00d      	beq.n	8006f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e008      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f42:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <prvInsertBlockIntoFreeList+0xb0>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e003      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d002      	beq.n	8006f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20008f9c 	.word	0x20008f9c
 8006f74:	20008fa4 	.word	0x20008fa4

08006f78 <_rclc_check_for_new_data>:
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d046      	beq.n	800700a <_rclc_check_for_new_data+0x92>
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	7802      	ldrb	r2, [r0, #0]
 8006f80:	b084      	sub	sp, #16
 8006f82:	4603      	mov	r3, r0
 8006f84:	2a0a      	cmp	r2, #10
 8006f86:	d842      	bhi.n	800700e <_rclc_check_for_new_data+0x96>
 8006f88:	e8df f002 	tbb	[pc, r2]
 8006f8c:	14181212 	.word	0x14181212
 8006f90:	06060614 	.word	0x06060614
 8006f94:	2e1a      	.short	0x2e1a
 8006f96:	16          	.byte	0x16
 8006f97:	00          	.byte	0x00
 8006f98:	6a0a      	ldr	r2, [r1, #32]
 8006f9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006f9c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	1a12      	subs	r2, r2, r0
 8006fa4:	bf18      	it	ne
 8006fa6:	2201      	movne	r2, #1
 8006fa8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8006fac:	b004      	add	sp, #16
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	680a      	ldr	r2, [r1, #0]
 8006fb2:	e7f2      	b.n	8006f9a <_rclc_check_for_new_data+0x22>
 8006fb4:	698a      	ldr	r2, [r1, #24]
 8006fb6:	e7f0      	b.n	8006f9a <_rclc_check_for_new_data+0x22>
 8006fb8:	688a      	ldr	r2, [r1, #8]
 8006fba:	e7ee      	b.n	8006f9a <_rclc_check_for_new_data+0x22>
 8006fbc:	690a      	ldr	r2, [r1, #16]
 8006fbe:	e7ec      	b.n	8006f9a <_rclc_check_for_new_data+0x22>
 8006fc0:	685c      	ldr	r4, [r3, #4]
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8006fc8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8006fcc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8006fd0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8006fda:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8006fde:	f104 0110 	add.w	r1, r4, #16
 8006fe2:	f003 fad9 	bl	800a598 <rcl_action_client_wait_set_get_entities_ready>
 8006fe6:	e7e1      	b.n	8006fac <_rclc_check_for_new_data+0x34>
 8006fe8:	685c      	ldr	r4, [r3, #4]
 8006fea:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8006fee:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8006ff2:	e9cd 3200 	strd	r3, r2, [sp]
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8006ffc:	f104 0220 	add.w	r2, r4, #32
 8007000:	f104 0110 	add.w	r1, r4, #16
 8007004:	f003 fce0 	bl	800a9c8 <rcl_action_server_wait_set_get_entities_ready>
 8007008:	e7d0      	b.n	8006fac <_rclc_check_for_new_data+0x34>
 800700a:	200b      	movs	r0, #11
 800700c:	4770      	bx	lr
 800700e:	2001      	movs	r0, #1
 8007010:	e7cc      	b.n	8006fac <_rclc_check_for_new_data+0x34>
 8007012:	bf00      	nop

08007014 <_rclc_take_new_data>:
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b09b      	sub	sp, #108	@ 0x6c
 8007018:	2800      	cmp	r0, #0
 800701a:	f000 8088 	beq.w	800712e <_rclc_take_new_data+0x11a>
 800701e:	7803      	ldrb	r3, [r0, #0]
 8007020:	4604      	mov	r4, r0
 8007022:	2b0a      	cmp	r3, #10
 8007024:	f200 8167 	bhi.w	80072f6 <_rclc_take_new_data+0x2e2>
 8007028:	e8df f003 	tbb	[pc, r3]
 800702c:	44152d2d 	.word	0x44152d2d
 8007030:	19191944 	.word	0x19191944
 8007034:	065a      	.short	0x065a
 8007036:	15          	.byte	0x15
 8007037:	00          	.byte	0x00
 8007038:	6840      	ldr	r0, [r0, #4]
 800703a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 80b2 	bne.w	80071a8 <_rclc_take_new_data+0x194>
 8007044:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 80e4 	bne.w	8007216 <_rclc_take_new_data+0x202>
 800704e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007052:	2b00      	cmp	r3, #0
 8007054:	d16f      	bne.n	8007136 <_rclc_take_new_data+0x122>
 8007056:	2500      	movs	r5, #0
 8007058:	4628      	mov	r0, r5
 800705a:	b01b      	add	sp, #108	@ 0x6c
 800705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007060:	6a0b      	ldr	r3, [r1, #32]
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f5      	beq.n	8007056 <_rclc_take_new_data+0x42>
 800706a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800706e:	f104 0110 	add.w	r1, r4, #16
 8007072:	f001 ff6d 	bl	8008f50 <rcl_take_request>
 8007076:	4605      	mov	r5, r0
 8007078:	2800      	cmp	r0, #0
 800707a:	d0ec      	beq.n	8007056 <_rclc_take_new_data+0x42>
 800707c:	f240 2359 	movw	r3, #601	@ 0x259
 8007080:	4298      	cmp	r0, r3
 8007082:	d013      	beq.n	80070ac <_rclc_take_new_data+0x98>
 8007084:	e029      	b.n	80070da <_rclc_take_new_data+0xc6>
 8007086:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8007088:	680b      	ldr	r3, [r1, #0]
 800708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0e1      	beq.n	8007056 <_rclc_take_new_data+0x42>
 8007092:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007096:	2300      	movs	r3, #0
 8007098:	aa0a      	add	r2, sp, #40	@ 0x28
 800709a:	f002 f897 	bl	80091cc <rcl_take>
 800709e:	4605      	mov	r5, r0
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0d9      	beq.n	8007058 <_rclc_take_new_data+0x44>
 80070a4:	f240 1391 	movw	r3, #401	@ 0x191
 80070a8:	4298      	cmp	r0, r3
 80070aa:	d116      	bne.n	80070da <_rclc_take_new_data+0xc6>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80070b2:	e7d1      	b.n	8007058 <_rclc_take_new_data+0x44>
 80070b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80070b6:	698b      	ldr	r3, [r1, #24]
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0ca      	beq.n	8007056 <_rclc_take_new_data+0x42>
 80070c0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80070c4:	f104 0110 	add.w	r1, r4, #16
 80070c8:	f001 f90e 	bl	80082e8 <rcl_take_response>
 80070cc:	4605      	mov	r5, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0c1      	beq.n	8007056 <_rclc_take_new_data+0x42>
 80070d2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80070d6:	4298      	cmp	r0, r3
 80070d8:	d0be      	beq.n	8007058 <_rclc_take_new_data+0x44>
 80070da:	f000 fe85 	bl	8007de8 <rcutils_reset_error>
 80070de:	e7bb      	b.n	8007058 <_rclc_take_new_data+0x44>
 80070e0:	6840      	ldr	r0, [r0, #4]
 80070e2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d17d      	bne.n	80071e6 <_rclc_take_new_data+0x1d2>
 80070ea:	69c3      	ldr	r3, [r0, #28]
 80070ec:	b11b      	cbz	r3, 80070f6 <_rclc_take_new_data+0xe2>
 80070ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d144      	bne.n	8007180 <_rclc_take_new_data+0x16c>
 80070f6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 80ac 	bne.w	8007258 <_rclc_take_new_data+0x244>
 8007100:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0a6      	beq.n	8007056 <_rclc_take_new_data+0x42>
 8007108:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800710a:	a90a      	add	r1, sp, #40	@ 0x28
 800710c:	3010      	adds	r0, #16
 800710e:	f003 f91b 	bl	800a348 <rcl_action_take_result_response>
 8007112:	4605      	mov	r5, r0
 8007114:	2800      	cmp	r0, #0
 8007116:	d1e0      	bne.n	80070da <_rclc_take_new_data+0xc6>
 8007118:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800711c:	6860      	ldr	r0, [r4, #4]
 800711e:	f003 fd77 	bl	800ac10 <rclc_action_find_handle_by_result_request_sequence_number>
 8007122:	2800      	cmp	r0, #0
 8007124:	d098      	beq.n	8007058 <_rclc_take_new_data+0x44>
 8007126:	2301      	movs	r3, #1
 8007128:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800712c:	e794      	b.n	8007058 <_rclc_take_new_data+0x44>
 800712e:	250b      	movs	r5, #11
 8007130:	4628      	mov	r0, r5
 8007132:	b01b      	add	sp, #108	@ 0x6c
 8007134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007136:	ae04      	add	r6, sp, #16
 8007138:	aa0a      	add	r2, sp, #40	@ 0x28
 800713a:	3010      	adds	r0, #16
 800713c:	4631      	mov	r1, r6
 800713e:	f003 fb77 	bl	800a830 <rcl_action_take_cancel_request>
 8007142:	4605      	mov	r5, r0
 8007144:	2800      	cmp	r0, #0
 8007146:	d1c8      	bne.n	80070da <_rclc_take_new_data+0xc6>
 8007148:	6860      	ldr	r0, [r4, #4]
 800714a:	a90a      	add	r1, sp, #40	@ 0x28
 800714c:	f003 fd1e 	bl	800ab8c <rclc_action_find_goal_handle_by_uuid>
 8007150:	4607      	mov	r7, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	f000 80bb 	beq.w	80072ce <_rclc_take_new_data+0x2ba>
 8007158:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800715c:	2101      	movs	r1, #1
 800715e:	f003 fc9f 	bl	800aaa0 <rcl_action_transition_goal_state>
 8007162:	2803      	cmp	r0, #3
 8007164:	4684      	mov	ip, r0
 8007166:	f040 80a7 	bne.w	80072b8 <_rclc_take_new_data+0x2a4>
 800716a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800716c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8007170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007172:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007176:	e884 0003 	stmia.w	r4, {r0, r1}
 800717a:	f887 c008 	strb.w	ip, [r7, #8]
 800717e:	e76b      	b.n	8007058 <_rclc_take_new_data+0x44>
 8007180:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007182:	3010      	adds	r0, #16
 8007184:	f003 f960 	bl	800a448 <rcl_action_take_feedback>
 8007188:	4605      	mov	r5, r0
 800718a:	2800      	cmp	r0, #0
 800718c:	d1a5      	bne.n	80070da <_rclc_take_new_data+0xc6>
 800718e:	6860      	ldr	r0, [r4, #4]
 8007190:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8007192:	f003 fcfb 	bl	800ab8c <rclc_action_find_goal_handle_by_uuid>
 8007196:	4603      	mov	r3, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	f000 80a3 	beq.w	80072e4 <_rclc_take_new_data+0x2d0>
 800719e:	2201      	movs	r2, #1
 80071a0:	6860      	ldr	r0, [r4, #4]
 80071a2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80071a6:	e7a6      	b.n	80070f6 <_rclc_take_new_data+0xe2>
 80071a8:	f003 fcca 	bl	800ab40 <rclc_action_take_goal_handle>
 80071ac:	4606      	mov	r6, r0
 80071ae:	6860      	ldr	r0, [r4, #4]
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	f43f af47 	beq.w	8007044 <_rclc_take_new_data+0x30>
 80071b6:	6070      	str	r0, [r6, #4]
 80071b8:	69f2      	ldr	r2, [r6, #28]
 80071ba:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80071be:	3010      	adds	r0, #16
 80071c0:	f003 fa7e 	bl	800a6c0 <rcl_action_take_goal_request>
 80071c4:	4605      	mov	r5, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f040 808e 	bne.w	80072e8 <_rclc_take_new_data+0x2d4>
 80071cc:	69f7      	ldr	r7, [r6, #28]
 80071ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80071d0:	7235      	strb	r5, [r6, #8]
 80071d2:	f8c6 0009 	str.w	r0, [r6, #9]
 80071d6:	f8c6 100d 	str.w	r1, [r6, #13]
 80071da:	6860      	ldr	r0, [r4, #4]
 80071dc:	f8c6 2011 	str.w	r2, [r6, #17]
 80071e0:	f8c6 3015 	str.w	r3, [r6, #21]
 80071e4:	e72e      	b.n	8007044 <_rclc_take_new_data+0x30>
 80071e6:	aa04      	add	r2, sp, #16
 80071e8:	a90a      	add	r1, sp, #40	@ 0x28
 80071ea:	3010      	adds	r0, #16
 80071ec:	f003 f834 	bl	800a258 <rcl_action_take_goal_response>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f47f af71 	bne.w	80070da <_rclc_take_new_data+0xc6>
 80071f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071fc:	6860      	ldr	r0, [r4, #4]
 80071fe:	f003 fcf5 	bl	800abec <rclc_action_find_handle_by_goal_request_sequence_number>
 8007202:	b130      	cbz	r0, 8007212 <_rclc_take_new_data+0x1fe>
 8007204:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007208:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800720c:	2201      	movs	r2, #1
 800720e:	f880 2020 	strb.w	r2, [r0, #32]
 8007212:	6860      	ldr	r0, [r4, #4]
 8007214:	e769      	b.n	80070ea <_rclc_take_new_data+0xd6>
 8007216:	aa04      	add	r2, sp, #16
 8007218:	3010      	adds	r0, #16
 800721a:	a90a      	add	r1, sp, #40	@ 0x28
 800721c:	f003 fac8 	bl	800a7b0 <rcl_action_take_result_request>
 8007220:	4605      	mov	r5, r0
 8007222:	2800      	cmp	r0, #0
 8007224:	f47f af59 	bne.w	80070da <_rclc_take_new_data+0xc6>
 8007228:	6860      	ldr	r0, [r4, #4]
 800722a:	a904      	add	r1, sp, #16
 800722c:	f003 fcae 	bl	800ab8c <rclc_action_find_goal_handle_by_uuid>
 8007230:	4607      	mov	r7, r0
 8007232:	b160      	cbz	r0, 800724e <_rclc_take_new_data+0x23a>
 8007234:	ad0a      	add	r5, sp, #40	@ 0x28
 8007236:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800723a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800723c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800723e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007242:	f04f 0c02 	mov.w	ip, #2
 8007246:	e886 0003 	stmia.w	r6, {r0, r1}
 800724a:	f887 c008 	strb.w	ip, [r7, #8]
 800724e:	6860      	ldr	r0, [r4, #4]
 8007250:	2300      	movs	r3, #0
 8007252:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8007256:	e6fa      	b.n	800704e <_rclc_take_new_data+0x3a>
 8007258:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800725c:	a90a      	add	r1, sp, #40	@ 0x28
 800725e:	3010      	adds	r0, #16
 8007260:	f003 f8b2 	bl	800a3c8 <rcl_action_take_cancel_response>
 8007264:	4605      	mov	r5, r0
 8007266:	2800      	cmp	r0, #0
 8007268:	f47f af37 	bne.w	80070da <_rclc_take_new_data+0xc6>
 800726c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007270:	6860      	ldr	r0, [r4, #4]
 8007272:	f003 fcdf 	bl	800ac34 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8007276:	4606      	mov	r6, r0
 8007278:	6860      	ldr	r0, [r4, #4]
 800727a:	2e00      	cmp	r6, #0
 800727c:	f43f af40 	beq.w	8007100 <_rclc_take_new_data+0xec>
 8007280:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007282:	2701      	movs	r7, #1
 8007284:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	f43f af3a 	beq.w	8007100 <_rclc_take_new_data+0xec>
 800728c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800728e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007292:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007296:	f003 fc79 	bl	800ab8c <rclc_action_find_goal_handle_by_uuid>
 800729a:	b138      	cbz	r0, 80072ac <_rclc_take_new_data+0x298>
 800729c:	6860      	ldr	r0, [r4, #4]
 800729e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80072a0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80072a4:	3501      	adds	r5, #1
 80072a6:	42ab      	cmp	r3, r5
 80072a8:	d8f0      	bhi.n	800728c <_rclc_take_new_data+0x278>
 80072aa:	e729      	b.n	8007100 <_rclc_take_new_data+0xec>
 80072ac:	6860      	ldr	r0, [r4, #4]
 80072ae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80072b0:	3501      	adds	r5, #1
 80072b2:	42ab      	cmp	r3, r5
 80072b4:	d8ea      	bhi.n	800728c <_rclc_take_new_data+0x278>
 80072b6:	e723      	b.n	8007100 <_rclc_take_new_data+0xec>
 80072b8:	ab06      	add	r3, sp, #24
 80072ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80072c0:	2103      	movs	r1, #3
 80072c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80072c6:	6860      	ldr	r0, [r4, #4]
 80072c8:	f003 fd2a 	bl	800ad20 <rclc_action_server_goal_cancel_reject>
 80072cc:	e6c4      	b.n	8007058 <_rclc_take_new_data+0x44>
 80072ce:	ab06      	add	r3, sp, #24
 80072d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80072d6:	2102      	movs	r1, #2
 80072d8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80072dc:	6860      	ldr	r0, [r4, #4]
 80072de:	f003 fd1f 	bl	800ad20 <rclc_action_server_goal_cancel_reject>
 80072e2:	e6b9      	b.n	8007058 <_rclc_take_new_data+0x44>
 80072e4:	6860      	ldr	r0, [r4, #4]
 80072e6:	e706      	b.n	80070f6 <_rclc_take_new_data+0xe2>
 80072e8:	6860      	ldr	r0, [r4, #4]
 80072ea:	4631      	mov	r1, r6
 80072ec:	f003 fc38 	bl	800ab60 <rclc_action_remove_used_goal_handle>
 80072f0:	f000 fd7a 	bl	8007de8 <rcutils_reset_error>
 80072f4:	e6b0      	b.n	8007058 <_rclc_take_new_data+0x44>
 80072f6:	2501      	movs	r5, #1
 80072f8:	e6ae      	b.n	8007058 <_rclc_take_new_data+0x44>
 80072fa:	bf00      	nop

080072fc <_rclc_execute.part.0>:
 80072fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fe:	7803      	ldrb	r3, [r0, #0]
 8007300:	b087      	sub	sp, #28
 8007302:	4604      	mov	r4, r0
 8007304:	2b0a      	cmp	r3, #10
 8007306:	f200 8136 	bhi.w	8007576 <_rclc_execute.part.0+0x27a>
 800730a:	e8df f003 	tbb	[pc, r3]
 800730e:	435e      	.short	0x435e
 8007310:	06a1664f 	.word	0x06a1664f
 8007314:	6c1e0606 	.word	0x6c1e0606
 8007318:	59          	.byte	0x59
 8007319:	00          	.byte	0x00
 800731a:	2b06      	cmp	r3, #6
 800731c:	f000 8122 	beq.w	8007564 <_rclc_execute.part.0+0x268>
 8007320:	2b07      	cmp	r3, #7
 8007322:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007324:	f040 8118 	bne.w	8007558 <_rclc_execute.part.0+0x25c>
 8007328:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800732c:	6880      	ldr	r0, [r0, #8]
 800732e:	4798      	blx	r3
 8007330:	f104 0110 	add.w	r1, r4, #16
 8007334:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007336:	6860      	ldr	r0, [r4, #4]
 8007338:	f001 fe4a 	bl	8008fd0 <rcl_send_response>
 800733c:	2800      	cmp	r0, #0
 800733e:	d033      	beq.n	80073a8 <_rclc_execute.part.0+0xac>
 8007340:	9005      	str	r0, [sp, #20]
 8007342:	f000 fd51 	bl	8007de8 <rcutils_reset_error>
 8007346:	9805      	ldr	r0, [sp, #20]
 8007348:	e02e      	b.n	80073a8 <_rclc_execute.part.0+0xac>
 800734a:	6840      	ldr	r0, [r0, #4]
 800734c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8086 	beq.w	8007462 <_rclc_execute.part.0+0x166>
 8007356:	2600      	movs	r6, #0
 8007358:	2701      	movs	r7, #1
 800735a:	e004      	b.n	8007366 <_rclc_execute.part.0+0x6a>
 800735c:	f003 fbca 	bl	800aaf4 <rclc_action_send_result_request>
 8007360:	b998      	cbnz	r0, 800738a <_rclc_execute.part.0+0x8e>
 8007362:	722f      	strb	r7, [r5, #8]
 8007364:	6860      	ldr	r0, [r4, #4]
 8007366:	f003 fc77 	bl	800ac58 <rclc_action_find_first_handle_with_goal_response>
 800736a:	4605      	mov	r5, r0
 800736c:	2800      	cmp	r0, #0
 800736e:	d077      	beq.n	8007460 <_rclc_execute.part.0+0x164>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800737a:	f885 6020 	strb.w	r6, [r5, #32]
 800737e:	4798      	blx	r3
 8007380:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8007384:	4628      	mov	r0, r5
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e8      	bne.n	800735c <_rclc_execute.part.0+0x60>
 800738a:	6860      	ldr	r0, [r4, #4]
 800738c:	4629      	mov	r1, r5
 800738e:	f003 fbe7 	bl	800ab60 <rclc_action_remove_used_goal_handle>
 8007392:	e7e7      	b.n	8007364 <_rclc_execute.part.0+0x68>
 8007394:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8007398:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800739c:	2d00      	cmp	r5, #0
 800739e:	f000 80c9 	beq.w	8007534 <_rclc_execute.part.0+0x238>
 80073a2:	6880      	ldr	r0, [r0, #8]
 80073a4:	4798      	blx	r3
 80073a6:	2000      	movs	r0, #0
 80073a8:	b007      	add	sp, #28
 80073aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ac:	6840      	ldr	r0, [r0, #4]
 80073ae:	f002 f811 	bl	80093d4 <rcl_timer_call>
 80073b2:	f240 3321 	movw	r3, #801	@ 0x321
 80073b6:	4298      	cmp	r0, r3
 80073b8:	d004      	beq.n	80073c4 <_rclc_execute.part.0+0xc8>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d0f4      	beq.n	80073a8 <_rclc_execute.part.0+0xac>
 80073be:	e7bf      	b.n	8007340 <_rclc_execute.part.0+0x44>
 80073c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073c2:	4798      	blx	r3
 80073c4:	2000      	movs	r0, #0
 80073c6:	b007      	add	sp, #28
 80073c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ca:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80073ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073d0:	b925      	cbnz	r5, 80073dc <_rclc_execute.part.0+0xe0>
 80073d2:	4628      	mov	r0, r5
 80073d4:	4798      	blx	r3
 80073d6:	4628      	mov	r0, r5
 80073d8:	e7e6      	b.n	80073a8 <_rclc_execute.part.0+0xac>
 80073da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073dc:	68a0      	ldr	r0, [r4, #8]
 80073de:	4798      	blx	r3
 80073e0:	2000      	movs	r0, #0
 80073e2:	b007      	add	sp, #28
 80073e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e6:	6840      	ldr	r0, [r0, #4]
 80073e8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80073ec:	bb3b      	cbnz	r3, 800743e <_rclc_execute.part.0+0x142>
 80073ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d07b      	beq.n	80074ee <_rclc_execute.part.0+0x1f2>
 80073f6:	f640 0634 	movw	r6, #2100	@ 0x834
 80073fa:	2701      	movs	r7, #1
 80073fc:	e007      	b.n	800740e <_rclc_execute.part.0+0x112>
 80073fe:	4628      	mov	r0, r5
 8007400:	f003 fc42 	bl	800ac88 <rclc_action_server_response_goal_request>
 8007404:	6860      	ldr	r0, [r4, #4]
 8007406:	4629      	mov	r1, r5
 8007408:	f003 fbaa 	bl	800ab60 <rclc_action_remove_used_goal_handle>
 800740c:	6860      	ldr	r0, [r4, #4]
 800740e:	2100      	movs	r1, #0
 8007410:	f003 fbd4 	bl	800abbc <rclc_action_find_first_handle_by_status>
 8007414:	4605      	mov	r5, r0
 8007416:	2800      	cmp	r0, #0
 8007418:	d066      	beq.n	80074e8 <_rclc_execute.part.0+0x1ec>
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4798      	blx	r3
 8007422:	42b0      	cmp	r0, r6
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	d1e9      	bne.n	80073fe <_rclc_execute.part.0+0x102>
 800742a:	2101      	movs	r1, #1
 800742c:	4628      	mov	r0, r5
 800742e:	f003 fc2b 	bl	800ac88 <rclc_action_server_response_goal_request>
 8007432:	722f      	strb	r7, [r5, #8]
 8007434:	e7ea      	b.n	800740c <_rclc_execute.part.0+0x110>
 8007436:	6848      	ldr	r0, [r1, #4]
 8007438:	f003 fb92 	bl	800ab60 <rclc_action_remove_used_goal_handle>
 800743c:	6860      	ldr	r0, [r4, #4]
 800743e:	f003 fbc9 	bl	800abd4 <rclc_action_find_first_terminated_handle>
 8007442:	4601      	mov	r1, r0
 8007444:	2800      	cmp	r0, #0
 8007446:	d1f6      	bne.n	8007436 <_rclc_execute.part.0+0x13a>
 8007448:	6860      	ldr	r0, [r4, #4]
 800744a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800744e:	e7ce      	b.n	80073ee <_rclc_execute.part.0+0xf2>
 8007450:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007452:	6880      	ldr	r0, [r0, #8]
 8007454:	f104 0110 	add.w	r1, r4, #16
 8007458:	4798      	blx	r3
 800745a:	2000      	movs	r0, #0
 800745c:	b007      	add	sp, #28
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007460:	6860      	ldr	r0, [r4, #4]
 8007462:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007466:	b18b      	cbz	r3, 800748c <_rclc_execute.part.0+0x190>
 8007468:	68c5      	ldr	r5, [r0, #12]
 800746a:	b32d      	cbz	r5, 80074b8 <_rclc_execute.part.0+0x1bc>
 800746c:	2600      	movs	r6, #0
 800746e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8007472:	b143      	cbz	r3, 8007486 <_rclc_execute.part.0+0x18a>
 8007474:	69c3      	ldr	r3, [r0, #28]
 8007476:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800747a:	b123      	cbz	r3, 8007486 <_rclc_execute.part.0+0x18a>
 800747c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800747e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007480:	4628      	mov	r0, r5
 8007482:	4798      	blx	r3
 8007484:	6860      	ldr	r0, [r4, #4]
 8007486:	682d      	ldr	r5, [r5, #0]
 8007488:	2d00      	cmp	r5, #0
 800748a:	d1f0      	bne.n	800746e <_rclc_execute.part.0+0x172>
 800748c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8007490:	b193      	cbz	r3, 80074b8 <_rclc_execute.part.0+0x1bc>
 8007492:	68c5      	ldr	r5, [r0, #12]
 8007494:	b185      	cbz	r5, 80074b8 <_rclc_execute.part.0+0x1bc>
 8007496:	2600      	movs	r6, #0
 8007498:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800749c:	b14b      	cbz	r3, 80074b2 <_rclc_execute.part.0+0x1b6>
 800749e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80074a0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80074a4:	b12b      	cbz	r3, 80074b2 <_rclc_execute.part.0+0x1b6>
 80074a6:	4628      	mov	r0, r5
 80074a8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80074ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80074ae:	4798      	blx	r3
 80074b0:	6860      	ldr	r0, [r4, #4]
 80074b2:	682d      	ldr	r5, [r5, #0]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	d1ef      	bne.n	8007498 <_rclc_execute.part.0+0x19c>
 80074b8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d081      	beq.n	80073c4 <_rclc_execute.part.0+0xc8>
 80074c0:	2700      	movs	r7, #0
 80074c2:	e00b      	b.n	80074dc <_rclc_execute.part.0+0x1e0>
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80074c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80074ca:	6a1e      	ldr	r6, [r3, #32]
 80074cc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80074d0:	47b0      	blx	r6
 80074d2:	6860      	ldr	r0, [r4, #4]
 80074d4:	4629      	mov	r1, r5
 80074d6:	f003 fb43 	bl	800ab60 <rclc_action_remove_used_goal_handle>
 80074da:	6860      	ldr	r0, [r4, #4]
 80074dc:	f003 fbc8 	bl	800ac70 <rclc_action_find_first_handle_with_result_response>
 80074e0:	4605      	mov	r5, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d1ee      	bne.n	80074c4 <_rclc_execute.part.0+0x1c8>
 80074e6:	e76d      	b.n	80073c4 <_rclc_execute.part.0+0xc8>
 80074e8:	6860      	ldr	r0, [r4, #4]
 80074ea:	f880 5020 	strb.w	r5, [r0, #32]
 80074ee:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f43f af66 	beq.w	80073c4 <_rclc_execute.part.0+0xc8>
 80074f8:	68c5      	ldr	r5, [r0, #12]
 80074fa:	b1b5      	cbz	r5, 800752a <_rclc_execute.part.0+0x22e>
 80074fc:	2602      	movs	r6, #2
 80074fe:	e001      	b.n	8007504 <_rclc_execute.part.0+0x208>
 8007500:	682d      	ldr	r5, [r5, #0]
 8007502:	b195      	cbz	r5, 800752a <_rclc_execute.part.0+0x22e>
 8007504:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d1f9      	bne.n	8007500 <_rclc_execute.part.0+0x204>
 800750c:	69c3      	ldr	r3, [r0, #28]
 800750e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007510:	4628      	mov	r0, r5
 8007512:	4798      	blx	r3
 8007514:	4603      	mov	r3, r0
 8007516:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800751a:	4628      	mov	r0, r5
 800751c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8007520:	b163      	cbz	r3, 800753c <_rclc_execute.part.0+0x240>
 8007522:	f003 fbd1 	bl	800acc8 <rclc_action_server_goal_cancel_accept>
 8007526:	6860      	ldr	r0, [r4, #4]
 8007528:	e7ea      	b.n	8007500 <_rclc_execute.part.0+0x204>
 800752a:	2300      	movs	r3, #0
 800752c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8007530:	4618      	mov	r0, r3
 8007532:	e739      	b.n	80073a8 <_rclc_execute.part.0+0xac>
 8007534:	4628      	mov	r0, r5
 8007536:	4798      	blx	r3
 8007538:	4628      	mov	r0, r5
 800753a:	e735      	b.n	80073a8 <_rclc_execute.part.0+0xac>
 800753c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800753e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8007542:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8007546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754a:	6860      	ldr	r0, [r4, #4]
 800754c:	2101      	movs	r1, #1
 800754e:	f003 fbe7 	bl	800ad20 <rclc_action_server_goal_cancel_reject>
 8007552:	722e      	strb	r6, [r5, #8]
 8007554:	6860      	ldr	r0, [r4, #4]
 8007556:	e7d3      	b.n	8007500 <_rclc_execute.part.0+0x204>
 8007558:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800755a:	6880      	ldr	r0, [r0, #8]
 800755c:	4798      	blx	r3
 800755e:	f104 0110 	add.w	r1, r4, #16
 8007562:	e6e7      	b.n	8007334 <_rclc_execute.part.0+0x38>
 8007564:	f100 0110 	add.w	r1, r0, #16
 8007568:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800756a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800756c:	6880      	ldr	r0, [r0, #8]
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	4798      	blx	r3
 8007572:	9905      	ldr	r1, [sp, #20]
 8007574:	e6de      	b.n	8007334 <_rclc_execute.part.0+0x38>
 8007576:	2001      	movs	r0, #1
 8007578:	e716      	b.n	80073a8 <_rclc_execute.part.0+0xac>
 800757a:	bf00      	nop

0800757c <rclc_executor_trigger_any>:
 800757c:	2800      	cmp	r0, #0
 800757e:	d03f      	beq.n	8007600 <rclc_executor_trigger_any+0x84>
 8007580:	2900      	cmp	r1, #0
 8007582:	d03e      	beq.n	8007602 <rclc_executor_trigger_any+0x86>
 8007584:	4603      	mov	r3, r0
 8007586:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800758a:	2200      	movs	r2, #0
 800758c:	2800      	cmp	r0, #0
 800758e:	d037      	beq.n	8007600 <rclc_executor_trigger_any+0x84>
 8007590:	b430      	push	{r4, r5}
 8007592:	f893 c000 	ldrb.w	ip, [r3]
 8007596:	f1bc 0f08 	cmp.w	ip, #8
 800759a:	d11e      	bne.n	80075da <rclc_executor_trigger_any+0x5e>
 800759c:	685c      	ldr	r4, [r3, #4]
 800759e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80075a0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80075a4:	d105      	bne.n	80075b2 <rclc_executor_trigger_any+0x36>
 80075a6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80075aa:	b910      	cbnz	r0, 80075b2 <rclc_executor_trigger_any+0x36>
 80075ac:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 80075b0:	b128      	cbz	r0, 80075be <rclc_executor_trigger_any+0x42>
 80075b2:	bc30      	pop	{r4, r5}
 80075b4:	4770      	bx	lr
 80075b6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d1f9      	bne.n	80075b2 <rclc_executor_trigger_any+0x36>
 80075be:	3201      	adds	r2, #1
 80075c0:	4291      	cmp	r1, r2
 80075c2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80075c6:	d018      	beq.n	80075fa <rclc_executor_trigger_any+0x7e>
 80075c8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d0f0      	beq.n	80075b2 <rclc_executor_trigger_any+0x36>
 80075d0:	f893 c000 	ldrb.w	ip, [r3]
 80075d4:	f1bc 0f08 	cmp.w	ip, #8
 80075d8:	d0e0      	beq.n	800759c <rclc_executor_trigger_any+0x20>
 80075da:	f1bc 0f09 	cmp.w	ip, #9
 80075de:	d1ea      	bne.n	80075b6 <rclc_executor_trigger_any+0x3a>
 80075e0:	685c      	ldr	r4, [r3, #4]
 80075e2:	6a25      	ldr	r5, [r4, #32]
 80075e4:	2d00      	cmp	r5, #0
 80075e6:	d1e4      	bne.n	80075b2 <rclc_executor_trigger_any+0x36>
 80075e8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1e0      	bne.n	80075b2 <rclc_executor_trigger_any+0x36>
 80075f0:	3201      	adds	r2, #1
 80075f2:	4291      	cmp	r1, r2
 80075f4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80075f8:	d1e6      	bne.n	80075c8 <rclc_executor_trigger_any+0x4c>
 80075fa:	2000      	movs	r0, #0
 80075fc:	bc30      	pop	{r4, r5}
 80075fe:	4770      	bx	lr
 8007600:	4770      	bx	lr
 8007602:	4608      	mov	r0, r1
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop

08007608 <rclc_executor_init>:
 8007608:	2800      	cmp	r0, #0
 800760a:	d05f      	beq.n	80076cc <rclc_executor_init+0xc4>
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	b0b0      	sub	sp, #192	@ 0xc0
 8007614:	2900      	cmp	r1, #0
 8007616:	d051      	beq.n	80076bc <rclc_executor_init+0xb4>
 8007618:	4605      	mov	r5, r0
 800761a:	4618      	mov	r0, r3
 800761c:	4616      	mov	r6, r2
 800761e:	461f      	mov	r7, r3
 8007620:	f000 fbbe 	bl	8007da0 <rcutils_allocator_is_valid>
 8007624:	2800      	cmp	r0, #0
 8007626:	d049      	beq.n	80076bc <rclc_executor_init+0xb4>
 8007628:	2e00      	cmp	r6, #0
 800762a:	d047      	beq.n	80076bc <rclc_executor_init+0xb4>
 800762c:	492c      	ldr	r1, [pc, #176]	@ (80076e0 <rclc_executor_init+0xd8>)
 800762e:	2288      	movs	r2, #136	@ 0x88
 8007630:	a80e      	add	r0, sp, #56	@ 0x38
 8007632:	f00c f914 	bl	801385e <memcpy>
 8007636:	a90e      	add	r1, sp, #56	@ 0x38
 8007638:	2288      	movs	r2, #136	@ 0x88
 800763a:	4628      	mov	r0, r5
 800763c:	f00c f90f 	bl	801385e <memcpy>
 8007640:	602c      	str	r4, [r5, #0]
 8007642:	4668      	mov	r0, sp
 8007644:	60ae      	str	r6, [r5, #8]
 8007646:	466c      	mov	r4, sp
 8007648:	f002 f836 	bl	80096b8 <rcl_get_zero_initialized_wait_set>
 800764c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800764e:	f105 0c14 	add.w	ip, r5, #20
 8007652:	f8d7 8000 	ldr.w	r8, [r7]
 8007656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800765a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800765c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007666:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80076d8 <rclc_executor_init+0xd0>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	f8cc 3000 	str.w	r3, [ip]
 8007670:	6939      	ldr	r1, [r7, #16]
 8007672:	612f      	str	r7, [r5, #16]
 8007674:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8007678:	01b0      	lsls	r0, r6, #6
 800767a:	47c0      	blx	r8
 800767c:	6068      	str	r0, [r5, #4]
 800767e:	b338      	cbz	r0, 80076d0 <rclc_executor_init+0xc8>
 8007680:	2400      	movs	r4, #0
 8007682:	e000      	b.n	8007686 <rclc_executor_init+0x7e>
 8007684:	6868      	ldr	r0, [r5, #4]
 8007686:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800768a:	4631      	mov	r1, r6
 800768c:	3401      	adds	r4, #1
 800768e:	f000 fa73 	bl	8007b78 <rclc_executor_handle_init>
 8007692:	42a6      	cmp	r6, r4
 8007694:	d1f6      	bne.n	8007684 <rclc_executor_init+0x7c>
 8007696:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800769a:	f000 fa63 	bl	8007b64 <rclc_executor_handle_counters_zero_init>
 800769e:	4a11      	ldr	r2, [pc, #68]	@ (80076e4 <rclc_executor_init+0xdc>)
 80076a0:	686b      	ldr	r3, [r5, #4]
 80076a2:	2000      	movs	r0, #0
 80076a4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80076a8:	b163      	cbz	r3, 80076c4 <rclc_executor_init+0xbc>
 80076aa:	692b      	ldr	r3, [r5, #16]
 80076ac:	b153      	cbz	r3, 80076c4 <rclc_executor_init+0xbc>
 80076ae:	68ab      	ldr	r3, [r5, #8]
 80076b0:	b143      	cbz	r3, 80076c4 <rclc_executor_init+0xbc>
 80076b2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 80076b6:	b030      	add	sp, #192	@ 0xc0
 80076b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076bc:	200b      	movs	r0, #11
 80076be:	b030      	add	sp, #192	@ 0xc0
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	4618      	mov	r0, r3
 80076c6:	b030      	add	sp, #192	@ 0xc0
 80076c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076cc:	200b      	movs	r0, #11
 80076ce:	4770      	bx	lr
 80076d0:	200a      	movs	r0, #10
 80076d2:	e7f4      	b.n	80076be <rclc_executor_init+0xb6>
 80076d4:	f3af 8000 	nop.w
 80076d8:	3b9aca00 	.word	0x3b9aca00
 80076dc:	00000000 	.word	0x00000000
 80076e0:	080145c0 	.word	0x080145c0
 80076e4:	0800757d 	.word	0x0800757d

080076e8 <rclc_executor_add_subscription>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	f89d e018 	ldrb.w	lr, [sp, #24]
 80076ee:	b338      	cbz	r0, 8007740 <rclc_executor_add_subscription+0x58>
 80076f0:	b331      	cbz	r1, 8007740 <rclc_executor_add_subscription+0x58>
 80076f2:	b32a      	cbz	r2, 8007740 <rclc_executor_add_subscription+0x58>
 80076f4:	b323      	cbz	r3, 8007740 <rclc_executor_add_subscription+0x58>
 80076f6:	4604      	mov	r4, r0
 80076f8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 80076fc:	42a8      	cmp	r0, r5
 80076fe:	d301      	bcc.n	8007704 <rclc_executor_add_subscription+0x1c>
 8007700:	2001      	movs	r0, #1
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	6866      	ldr	r6, [r4, #4]
 8007706:	0187      	lsls	r7, r0, #6
 8007708:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800770c:	2500      	movs	r5, #0
 800770e:	55f5      	strb	r5, [r6, r7]
 8007710:	3001      	adds	r0, #1
 8007712:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8007716:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800771a:	2301      	movs	r3, #1
 800771c:	f104 0514 	add.w	r5, r4, #20
 8007720:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8007724:	f88c e001 	strb.w	lr, [ip, #1]
 8007728:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800772c:	60e0      	str	r0, [r4, #12]
 800772e:	4628      	mov	r0, r5
 8007730:	f001 ffd6 	bl	80096e0 <rcl_wait_set_is_valid>
 8007734:	b930      	cbnz	r0, 8007744 <rclc_executor_add_subscription+0x5c>
 8007736:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007738:	3301      	adds	r3, #1
 800773a:	2000      	movs	r0, #0
 800773c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007740:	200b      	movs	r0, #11
 8007742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007744:	4628      	mov	r0, r5
 8007746:	f001 ffd1 	bl	80096ec <rcl_wait_set_fini>
 800774a:	2800      	cmp	r0, #0
 800774c:	d0f3      	beq.n	8007736 <rclc_executor_add_subscription+0x4e>
 800774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007750 <rclc_executor_prepare>:
 8007750:	2800      	cmp	r0, #0
 8007752:	d044      	beq.n	80077de <rclc_executor_prepare+0x8e>
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	f100 0514 	add.w	r5, r0, #20
 800775a:	b09b      	sub	sp, #108	@ 0x6c
 800775c:	4604      	mov	r4, r0
 800775e:	4628      	mov	r0, r5
 8007760:	f001 ffbe 	bl	80096e0 <rcl_wait_set_is_valid>
 8007764:	b110      	cbz	r0, 800776c <rclc_executor_prepare+0x1c>
 8007766:	2000      	movs	r0, #0
 8007768:	b01b      	add	sp, #108	@ 0x6c
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	4628      	mov	r0, r5
 800776e:	f001 ffbd 	bl	80096ec <rcl_wait_set_fini>
 8007772:	2800      	cmp	r0, #0
 8007774:	d130      	bne.n	80077d8 <rclc_executor_prepare+0x88>
 8007776:	a80c      	add	r0, sp, #48	@ 0x30
 8007778:	f001 ff9e 	bl	80096b8 <rcl_get_zero_initialized_wait_set>
 800777c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8007780:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007784:	46ae      	mov	lr, r5
 8007786:	6927      	ldr	r7, [r4, #16]
 8007788:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800778c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007790:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007794:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007798:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800779c:	f8dc 3000 	ldr.w	r3, [ip]
 80077a0:	f8ce 3000 	str.w	r3, [lr]
 80077a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80077a6:	ae04      	add	r6, sp, #16
 80077a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6822      	ldr	r2, [r4, #0]
 80077ae:	6033      	str	r3, [r6, #0]
 80077b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80077b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80077b8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80077bc:	e9cd 2100 	strd	r2, r1, [sp]
 80077c0:	4628      	mov	r0, r5
 80077c2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80077c4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077c6:	f002 fa8f 	bl	8009ce8 <rcl_wait_set_init>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0cc      	beq.n	8007768 <rclc_executor_prepare+0x18>
 80077ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 80077d0:	f000 fb0a 	bl	8007de8 <rcutils_reset_error>
 80077d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077d6:	e7c7      	b.n	8007768 <rclc_executor_prepare+0x18>
 80077d8:	f000 fb06 	bl	8007de8 <rcutils_reset_error>
 80077dc:	e7cb      	b.n	8007776 <rclc_executor_prepare+0x26>
 80077de:	200b      	movs	r0, #11
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <rclc_executor_spin_some.part.0>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	f100 0614 	add.w	r6, r0, #20
 80077ec:	b083      	sub	sp, #12
 80077ee:	4691      	mov	r9, r2
 80077f0:	4698      	mov	r8, r3
 80077f2:	4605      	mov	r5, r0
 80077f4:	f7ff ffac 	bl	8007750 <rclc_executor_prepare>
 80077f8:	4630      	mov	r0, r6
 80077fa:	f002 f843 	bl	8009884 <rcl_wait_set_clear>
 80077fe:	4607      	mov	r7, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	f040 80ed 	bne.w	80079e0 <rclc_executor_spin_some.part.0+0x1fc>
 8007806:	68ab      	ldr	r3, [r5, #8]
 8007808:	4604      	mov	r4, r0
 800780a:	b303      	cbz	r3, 800784e <rclc_executor_spin_some.part.0+0x6a>
 800780c:	6869      	ldr	r1, [r5, #4]
 800780e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8007812:	01a2      	lsls	r2, r4, #6
 8007814:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8007818:	b1cb      	cbz	r3, 800784e <rclc_executor_spin_some.part.0+0x6a>
 800781a:	5c8b      	ldrb	r3, [r1, r2]
 800781c:	2b0a      	cmp	r3, #10
 800781e:	f200 80d8 	bhi.w	80079d2 <rclc_executor_spin_some.part.0+0x1ee>
 8007822:	e8df f003 	tbb	[pc, r3]
 8007826:	9c9c      	.short	0x9c9c
 8007828:	068c8ca7 	.word	0x068c8ca7
 800782c:	bdc90606 	.word	0xbdc90606
 8007830:	b2          	.byte	0xb2
 8007831:	00          	.byte	0x00
 8007832:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007836:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800783a:	4630      	mov	r0, r6
 800783c:	f002 fb6a 	bl	8009f14 <rcl_wait_set_add_service>
 8007840:	2800      	cmp	r0, #0
 8007842:	f040 8086 	bne.w	8007952 <rclc_executor_spin_some.part.0+0x16e>
 8007846:	68ab      	ldr	r3, [r5, #8]
 8007848:	3401      	adds	r4, #1
 800784a:	429c      	cmp	r4, r3
 800784c:	d3de      	bcc.n	800780c <rclc_executor_spin_some.part.0+0x28>
 800784e:	4643      	mov	r3, r8
 8007850:	464a      	mov	r2, r9
 8007852:	4630      	mov	r0, r6
 8007854:	f002 fb8c 	bl	8009f70 <rcl_wait>
 8007858:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80c7 	beq.w	80079f0 <rclc_executor_spin_some.part.0+0x20c>
 8007862:	2b01      	cmp	r3, #1
 8007864:	f040 80b5 	bne.w	80079d2 <rclc_executor_spin_some.part.0+0x1ee>
 8007868:	68ab      	ldr	r3, [r5, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8159 	beq.w	8007b22 <rclc_executor_spin_some.part.0+0x33e>
 8007870:	2400      	movs	r4, #0
 8007872:	46a0      	mov	r8, r4
 8007874:	f240 1991 	movw	r9, #401	@ 0x191
 8007878:	e00a      	b.n	8007890 <rclc_executor_spin_some.part.0+0xac>
 800787a:	f7ff fb7d 	bl	8006f78 <_rclc_check_for_new_data>
 800787e:	4604      	mov	r4, r0
 8007880:	b110      	cbz	r0, 8007888 <rclc_executor_spin_some.part.0+0xa4>
 8007882:	4548      	cmp	r0, r9
 8007884:	f040 80b2 	bne.w	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007888:	68ab      	ldr	r3, [r5, #8]
 800788a:	4598      	cmp	r8, r3
 800788c:	f080 8126 	bcs.w	8007adc <rclc_executor_spin_some.part.0+0x2f8>
 8007890:	686a      	ldr	r2, [r5, #4]
 8007892:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8007896:	4631      	mov	r1, r6
 8007898:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	f1bc 0f00 	cmp.w	ip, #0
 80078a4:	d1e9      	bne.n	800787a <rclc_executor_spin_some.part.0+0x96>
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80078ae:	4798      	blx	r3
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f000 809b 	beq.w	80079ec <rclc_executor_spin_some.part.0+0x208>
 80078b6:	68ab      	ldr	r3, [r5, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8097 	beq.w	80079ec <rclc_executor_spin_some.part.0+0x208>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	f240 1991 	movw	r9, #401	@ 0x191
 80078c6:	e009      	b.n	80078dc <rclc_executor_spin_some.part.0+0xf8>
 80078c8:	f7ff fba4 	bl	8007014 <_rclc_take_new_data>
 80078cc:	4604      	mov	r4, r0
 80078ce:	b110      	cbz	r0, 80078d6 <rclc_executor_spin_some.part.0+0xf2>
 80078d0:	4548      	cmp	r0, r9
 80078d2:	f040 808b 	bne.w	80079ec <rclc_executor_spin_some.part.0+0x208>
 80078d6:	68ab      	ldr	r3, [r5, #8]
 80078d8:	4598      	cmp	r8, r3
 80078da:	d209      	bcs.n	80078f0 <rclc_executor_spin_some.part.0+0x10c>
 80078dc:	6868      	ldr	r0, [r5, #4]
 80078de:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80078e2:	4631      	mov	r1, r6
 80078e4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80078e8:	f108 0801 	add.w	r8, r8, #1
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d1eb      	bne.n	80078c8 <rclc_executor_spin_some.part.0+0xe4>
 80078f0:	2600      	movs	r6, #0
 80078f2:	b97b      	cbnz	r3, 8007914 <rclc_executor_spin_some.part.0+0x130>
 80078f4:	e07a      	b.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 80078f6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80078fa:	2a08      	cmp	r2, #8
 80078fc:	f000 80fd 	beq.w	8007afa <rclc_executor_spin_some.part.0+0x316>
 8007900:	2a09      	cmp	r2, #9
 8007902:	f000 80ef 	beq.w	8007ae4 <rclc_executor_spin_some.part.0+0x300>
 8007906:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800790a:	b98a      	cbnz	r2, 8007930 <rclc_executor_spin_some.part.0+0x14c>
 800790c:	3601      	adds	r6, #1
 800790e:	429e      	cmp	r6, r3
 8007910:	d262      	bcs.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 8007912:	2400      	movs	r4, #0
 8007914:	686a      	ldr	r2, [r5, #4]
 8007916:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800791a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800791e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8007922:	2900      	cmp	r1, #0
 8007924:	d062      	beq.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007926:	7841      	ldrb	r1, [r0, #1]
 8007928:	2900      	cmp	r1, #0
 800792a:	d0e4      	beq.n	80078f6 <rclc_executor_spin_some.part.0+0x112>
 800792c:	2901      	cmp	r1, #1
 800792e:	d1ed      	bne.n	800790c <rclc_executor_spin_some.part.0+0x128>
 8007930:	f7ff fce4 	bl	80072fc <_rclc_execute.part.0>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 80b6 	bne.w	8007aa6 <rclc_executor_spin_some.part.0+0x2c2>
 800793a:	68ab      	ldr	r3, [r5, #8]
 800793c:	e7e6      	b.n	800790c <rclc_executor_spin_some.part.0+0x128>
 800793e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007942:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007946:	4630      	mov	r0, r6
 8007948:	f002 fab8 	bl	8009ebc <rcl_wait_set_add_client>
 800794c:	2800      	cmp	r0, #0
 800794e:	f43f af7a 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 8007952:	9001      	str	r0, [sp, #4]
 8007954:	f000 fa48 	bl	8007de8 <rcutils_reset_error>
 8007958:	9801      	ldr	r0, [sp, #4]
 800795a:	4607      	mov	r7, r0
 800795c:	e03c      	b.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 800795e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007962:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007966:	4630      	mov	r0, r6
 8007968:	f001 ff60 	bl	800982c <rcl_wait_set_add_subscription>
 800796c:	2800      	cmp	r0, #0
 800796e:	f43f af6a 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 8007972:	e7ee      	b.n	8007952 <rclc_executor_spin_some.part.0+0x16e>
 8007974:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007978:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800797c:	4630      	mov	r0, r6
 800797e:	f002 fa6d 	bl	8009e5c <rcl_wait_set_add_timer>
 8007982:	2800      	cmp	r0, #0
 8007984:	f43f af5f 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 8007988:	e7e3      	b.n	8007952 <rclc_executor_spin_some.part.0+0x16e>
 800798a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800798e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8007992:	4630      	mov	r0, r6
 8007994:	f002 fa36 	bl	8009e04 <rcl_wait_set_add_guard_condition>
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f af54 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 800799e:	e7d8      	b.n	8007952 <rclc_executor_spin_some.part.0+0x16e>
 80079a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80079a4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80079a8:	3110      	adds	r1, #16
 80079aa:	4630      	mov	r0, r6
 80079ac:	f002 ffb8 	bl	800a920 <rcl_action_wait_set_add_action_server>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f af48 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 80079b6:	e7cc      	b.n	8007952 <rclc_executor_spin_some.part.0+0x16e>
 80079b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80079bc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80079c0:	3110      	adds	r1, #16
 80079c2:	2300      	movs	r3, #0
 80079c4:	4630      	mov	r0, r6
 80079c6:	f002 fd83 	bl	800a4d0 <rcl_action_wait_set_add_action_client>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f43f af3b 	beq.w	8007846 <rclc_executor_spin_some.part.0+0x62>
 80079d0:	e7bf      	b.n	8007952 <rclc_executor_spin_some.part.0+0x16e>
 80079d2:	f000 fa09 	bl	8007de8 <rcutils_reset_error>
 80079d6:	2701      	movs	r7, #1
 80079d8:	4638      	mov	r0, r7
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e0:	f000 fa02 	bl	8007de8 <rcutils_reset_error>
 80079e4:	4638      	mov	r0, r7
 80079e6:	b003      	add	sp, #12
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	4627      	mov	r7, r4
 80079ee:	e7f3      	b.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 80079f0:	68ab      	ldr	r3, [r5, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 8092 	beq.w	8007b1c <rclc_executor_spin_some.part.0+0x338>
 80079f8:	2400      	movs	r4, #0
 80079fa:	46a0      	mov	r8, r4
 80079fc:	f240 1991 	movw	r9, #401	@ 0x191
 8007a00:	e008      	b.n	8007a14 <rclc_executor_spin_some.part.0+0x230>
 8007a02:	f7ff fab9 	bl	8006f78 <_rclc_check_for_new_data>
 8007a06:	4604      	mov	r4, r0
 8007a08:	b108      	cbz	r0, 8007a0e <rclc_executor_spin_some.part.0+0x22a>
 8007a0a:	4548      	cmp	r0, r9
 8007a0c:	d1ee      	bne.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007a0e:	68ab      	ldr	r3, [r5, #8]
 8007a10:	4598      	cmp	r8, r3
 8007a12:	d265      	bcs.n	8007ae0 <rclc_executor_spin_some.part.0+0x2fc>
 8007a14:	686a      	ldr	r2, [r5, #4]
 8007a16:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8007a20:	f108 0801 	add.w	r8, r8, #1
 8007a24:	f1bc 0f00 	cmp.w	ip, #0
 8007a28:	d1eb      	bne.n	8007a02 <rclc_executor_spin_some.part.0+0x21e>
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8007a32:	4798      	blx	r3
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d0d9      	beq.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007a38:	68ab      	ldr	r3, [r5, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0d6      	beq.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	f240 1991 	movw	r9, #401	@ 0x191
 8007a46:	f240 2a59 	movw	sl, #601	@ 0x259
 8007a4a:	e00e      	b.n	8007a6a <rclc_executor_spin_some.part.0+0x286>
 8007a4c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d033      	beq.n	8007abc <rclc_executor_spin_some.part.0+0x2d8>
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d028      	beq.n	8007aaa <rclc_executor_spin_some.part.0+0x2c6>
 8007a58:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8007a5c:	b9fb      	cbnz	r3, 8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007a5e:	68ab      	ldr	r3, [r5, #8]
 8007a60:	f108 0801 	add.w	r8, r8, #1
 8007a64:	4598      	cmp	r8, r3
 8007a66:	d2b7      	bcs.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 8007a68:	2400      	movs	r4, #0
 8007a6a:	6868      	ldr	r0, [r5, #4]
 8007a6c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8007a70:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8007a74:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0b7      	beq.n	80079ec <rclc_executor_spin_some.part.0+0x208>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	f7ff fac9 	bl	8007014 <_rclc_take_new_data>
 8007a82:	b118      	cbz	r0, 8007a8c <rclc_executor_spin_some.part.0+0x2a8>
 8007a84:	4548      	cmp	r0, r9
 8007a86:	d001      	beq.n	8007a8c <rclc_executor_spin_some.part.0+0x2a8>
 8007a88:	4550      	cmp	r0, sl
 8007a8a:	d10c      	bne.n	8007aa6 <rclc_executor_spin_some.part.0+0x2c2>
 8007a8c:	686b      	ldr	r3, [r5, #4]
 8007a8e:	eb13 000b 	adds.w	r0, r3, fp
 8007a92:	d021      	beq.n	8007ad8 <rclc_executor_spin_some.part.0+0x2f4>
 8007a94:	7842      	ldrb	r2, [r0, #1]
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	d0d8      	beq.n	8007a4c <rclc_executor_spin_some.part.0+0x268>
 8007a9a:	2a01      	cmp	r2, #1
 8007a9c:	d1df      	bne.n	8007a5e <rclc_executor_spin_some.part.0+0x27a>
 8007a9e:	f7ff fc2d 	bl	80072fc <_rclc_execute.part.0>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d0db      	beq.n	8007a5e <rclc_executor_spin_some.part.0+0x27a>
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	e796      	b.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 8007aaa:	6843      	ldr	r3, [r0, #4]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	d1f5      	bne.n	8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0d1      	beq.n	8007a5e <rclc_executor_spin_some.part.0+0x27a>
 8007aba:	e7f0      	b.n	8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007abc:	6843      	ldr	r3, [r0, #4]
 8007abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ac0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8007ac4:	d1eb      	bne.n	8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007ac6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1e7      	bne.n	8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007ace:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0c3      	beq.n	8007a5e <rclc_executor_spin_some.part.0+0x27a>
 8007ad6:	e7e2      	b.n	8007a9e <rclc_executor_spin_some.part.0+0x2ba>
 8007ad8:	270b      	movs	r7, #11
 8007ada:	e77d      	b.n	80079d8 <rclc_executor_spin_some.part.0+0x1f4>
 8007adc:	686a      	ldr	r2, [r5, #4]
 8007ade:	e6e2      	b.n	80078a6 <rclc_executor_spin_some.part.0+0xc2>
 8007ae0:	686a      	ldr	r2, [r5, #4]
 8007ae2:	e7a2      	b.n	8007a2a <rclc_executor_spin_some.part.0+0x246>
 8007ae4:	6842      	ldr	r2, [r0, #4]
 8007ae6:	6a11      	ldr	r1, [r2, #32]
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	f47f af21 	bne.w	8007930 <rclc_executor_spin_some.part.0+0x14c>
 8007aee:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	f43f af0a 	beq.w	800790c <rclc_executor_spin_some.part.0+0x128>
 8007af8:	e71a      	b.n	8007930 <rclc_executor_spin_some.part.0+0x14c>
 8007afa:	6842      	ldr	r2, [r0, #4]
 8007afc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8007afe:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8007b02:	f47f af15 	bne.w	8007930 <rclc_executor_spin_some.part.0+0x14c>
 8007b06:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	f47f af10 	bne.w	8007930 <rclc_executor_spin_some.part.0+0x14c>
 8007b10:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	f43f aef9 	beq.w	800790c <rclc_executor_spin_some.part.0+0x128>
 8007b1a:	e709      	b.n	8007930 <rclc_executor_spin_some.part.0+0x14c>
 8007b1c:	686a      	ldr	r2, [r5, #4]
 8007b1e:	461c      	mov	r4, r3
 8007b20:	e783      	b.n	8007a2a <rclc_executor_spin_some.part.0+0x246>
 8007b22:	686a      	ldr	r2, [r5, #4]
 8007b24:	461c      	mov	r4, r3
 8007b26:	e6be      	b.n	80078a6 <rclc_executor_spin_some.part.0+0xc2>

08007b28 <rclc_executor_spin>:
 8007b28:	b1d0      	cbz	r0, 8007b60 <rclc_executor_spin+0x38>
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	b082      	sub	sp, #8
 8007b30:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	e9cd 2300 	strd	r2, r3, [sp]
 8007b3a:	f000 fc31 	bl	80083a0 <rcl_context_is_valid>
 8007b3e:	4601      	mov	r1, r0
 8007b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b44:	4620      	mov	r0, r4
 8007b46:	b131      	cbz	r1, 8007b56 <rclc_executor_spin+0x2e>
 8007b48:	f7ff fe4c 	bl	80077e4 <rclc_executor_spin_some.part.0>
 8007b4c:	f030 0302 	bics.w	r3, r0, #2
 8007b50:	d0ee      	beq.n	8007b30 <rclc_executor_spin+0x8>
 8007b52:	b002      	add	sp, #8
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	f000 f947 	bl	8007de8 <rcutils_reset_error>
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	200b      	movs	r0, #11
 8007b62:	4770      	bx	lr

08007b64 <rclc_executor_handle_counters_zero_init>:
 8007b64:	b130      	cbz	r0, 8007b74 <rclc_executor_handle_counters_zero_init+0x10>
 8007b66:	b508      	push	{r3, lr}
 8007b68:	2220      	movs	r2, #32
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	f00b fdae 	bl	80136cc <memset>
 8007b70:	2000      	movs	r0, #0
 8007b72:	bd08      	pop	{r3, pc}
 8007b74:	200b      	movs	r0, #11
 8007b76:	4770      	bx	lr

08007b78 <rclc_executor_handle_init>:
 8007b78:	b168      	cbz	r0, 8007b96 <rclc_executor_handle_init+0x1e>
 8007b7a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8007ba0 <rclc_executor_handle_init+0x28>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	220b      	movs	r2, #11
 8007b82:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8007b86:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8007b8a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8007b8e:	8002      	strh	r2, [r0, #0]
 8007b90:	8703      	strh	r3, [r0, #56]	@ 0x38
 8007b92:	4618      	mov	r0, r3
 8007b94:	4770      	bx	lr
 8007b96:	200b      	movs	r0, #11
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w
	...

08007ba8 <rclc_support_init>:
 8007ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	b3b8      	cbz	r0, 8007c20 <rclc_support_init+0x78>
 8007bb0:	461c      	mov	r4, r3
 8007bb2:	b3ab      	cbz	r3, 8007c20 <rclc_support_init+0x78>
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	4690      	mov	r8, r2
 8007bb8:	4606      	mov	r6, r0
 8007bba:	f000 fd5b 	bl	8008674 <rcl_get_zero_initialized_init_options>
 8007bbe:	f104 030c 	add.w	r3, r4, #12
 8007bc2:	9005      	str	r0, [sp, #20]
 8007bc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bc8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007bcc:	a805      	add	r0, sp, #20
 8007bce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007bd2:	f000 fd51 	bl	8008678 <rcl_init_options_init>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b9e0      	cbnz	r0, 8007c14 <rclc_support_init+0x6c>
 8007bda:	ad02      	add	r5, sp, #8
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 fbd5 	bl	800838c <rcl_get_zero_initialized_context>
 8007be2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007be6:	4633      	mov	r3, r6
 8007be8:	e886 0003 	stmia.w	r6, {r0, r1}
 8007bec:	aa05      	add	r2, sp, #20
 8007bee:	4641      	mov	r1, r8
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f000 fc3b 	bl	800846c <rcl_init>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	b9b8      	cbnz	r0, 8007c2a <rclc_support_init+0x82>
 8007bfa:	60b4      	str	r4, [r6, #8]
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	f106 010c 	add.w	r1, r6, #12
 8007c02:	2003      	movs	r0, #3
 8007c04:	f001 fb62 	bl	80092cc <rcl_clock_init>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	b970      	cbnz	r0, 8007c2a <rclc_support_init+0x82>
 8007c0c:	a805      	add	r0, sp, #20
 8007c0e:	f000 fd99 	bl	8008744 <rcl_init_options_fini>
 8007c12:	b108      	cbz	r0, 8007c18 <rclc_support_init+0x70>
 8007c14:	f000 f8e8 	bl	8007de8 <rcutils_reset_error>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	b006      	add	sp, #24
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	250b      	movs	r5, #11
 8007c22:	4628      	mov	r0, r5
 8007c24:	b006      	add	sp, #24
 8007c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2a:	f000 f8dd 	bl	8007de8 <rcutils_reset_error>
 8007c2e:	a805      	add	r0, sp, #20
 8007c30:	f000 fd88 	bl	8008744 <rcl_init_options_fini>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0ef      	beq.n	8007c18 <rclc_support_init+0x70>
 8007c38:	e7ec      	b.n	8007c14 <rclc_support_init+0x6c>
 8007c3a:	bf00      	nop

08007c3c <rclc_node_init_default>:
 8007c3c:	b3b8      	cbz	r0, 8007cae <rclc_node_init_default+0x72>
 8007c3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c42:	460d      	mov	r5, r1
 8007c44:	b0a1      	sub	sp, #132	@ 0x84
 8007c46:	b329      	cbz	r1, 8007c94 <rclc_node_init_default+0x58>
 8007c48:	4616      	mov	r6, r2
 8007c4a:	b31a      	cbz	r2, 8007c94 <rclc_node_init_default+0x58>
 8007c4c:	461f      	mov	r7, r3
 8007c4e:	b30b      	cbz	r3, 8007c94 <rclc_node_init_default+0x58>
 8007c50:	f10d 0810 	add.w	r8, sp, #16
 8007c54:	4604      	mov	r4, r0
 8007c56:	4640      	mov	r0, r8
 8007c58:	f000 fe2c 	bl	80088b4 <rcl_get_zero_initialized_node>
 8007c5c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c60:	f10d 0918 	add.w	r9, sp, #24
 8007c64:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c68:	4648      	mov	r0, r9
 8007c6a:	f000 ff9b 	bl	8008ba4 <rcl_node_get_default_options>
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f000 fe20 	bl	80088b4 <rcl_get_zero_initialized_node>
 8007c74:	f8cd 9000 	str.w	r9, [sp]
 8007c78:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c82:	4632      	mov	r2, r6
 8007c84:	4629      	mov	r1, r5
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fe1e 	bl	80088c8 <rcl_node_init>
 8007c8c:	b930      	cbnz	r0, 8007c9c <rclc_node_init_default+0x60>
 8007c8e:	b021      	add	sp, #132	@ 0x84
 8007c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c94:	200b      	movs	r0, #11
 8007c96:	b021      	add	sp, #132	@ 0x84
 8007c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c9c:	9003      	str	r0, [sp, #12]
 8007c9e:	f000 f8a3 	bl	8007de8 <rcutils_reset_error>
 8007ca2:	f000 f8a1 	bl	8007de8 <rcutils_reset_error>
 8007ca6:	9803      	ldr	r0, [sp, #12]
 8007ca8:	b021      	add	sp, #132	@ 0x84
 8007caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cae:	200b      	movs	r0, #11
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <rclc_subscription_init_default>:
 8007cb4:	b368      	cbz	r0, 8007d12 <rclc_subscription_init_default+0x5e>
 8007cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cba:	460d      	mov	r5, r1
 8007cbc:	b0a0      	sub	sp, #128	@ 0x80
 8007cbe:	b321      	cbz	r1, 8007d0a <rclc_subscription_init_default+0x56>
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	b312      	cbz	r2, 8007d0a <rclc_subscription_init_default+0x56>
 8007cc4:	461f      	mov	r7, r3
 8007cc6:	b303      	cbz	r3, 8007d0a <rclc_subscription_init_default+0x56>
 8007cc8:	4604      	mov	r4, r0
 8007cca:	f001 f9a3 	bl	8009014 <rcl_get_zero_initialized_subscription>
 8007cce:	f10d 0810 	add.w	r8, sp, #16
 8007cd2:	6020      	str	r0, [r4, #0]
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	f001 fa4b 	bl	8009170 <rcl_subscription_get_default_options>
 8007cda:	490f      	ldr	r1, [pc, #60]	@ (8007d18 <rclc_subscription_init_default+0x64>)
 8007cdc:	2250      	movs	r2, #80	@ 0x50
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f00b fdbd 	bl	801385e <memcpy>
 8007ce4:	f8cd 8000 	str.w	r8, [sp]
 8007ce8:	463b      	mov	r3, r7
 8007cea:	4632      	mov	r2, r6
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f001 f996 	bl	8009020 <rcl_subscription_init>
 8007cf4:	b910      	cbnz	r0, 8007cfc <rclc_subscription_init_default+0x48>
 8007cf6:	b020      	add	sp, #128	@ 0x80
 8007cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfc:	9003      	str	r0, [sp, #12]
 8007cfe:	f000 f873 	bl	8007de8 <rcutils_reset_error>
 8007d02:	9803      	ldr	r0, [sp, #12]
 8007d04:	b020      	add	sp, #128	@ 0x80
 8007d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0a:	200b      	movs	r0, #11
 8007d0c:	b020      	add	sp, #128	@ 0x80
 8007d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d12:	200b      	movs	r0, #11
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	08014648 	.word	0x08014648

08007d1c <__default_zero_allocate>:
 8007d1c:	f00a bfec 	b.w	8012cf8 <calloc>

08007d20 <__default_reallocate>:
 8007d20:	f00b b98a 	b.w	8013038 <realloc>

08007d24 <__default_deallocate>:
 8007d24:	f00b b866 	b.w	8012df4 <free>

08007d28 <__default_allocate>:
 8007d28:	f00b b85c 	b.w	8012de4 <malloc>

08007d2c <rcutils_get_zero_initialized_allocator>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	4c05      	ldr	r4, [pc, #20]	@ (8007d44 <rcutils_get_zero_initialized_allocator+0x18>)
 8007d30:	4686      	mov	lr, r0
 8007d32:	4684      	mov	ip, r0
 8007d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f8cc 3000 	str.w	r3, [ip]
 8007d40:	4670      	mov	r0, lr
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	08014698 	.word	0x08014698

08007d48 <rcutils_set_default_allocator>:
 8007d48:	b1a8      	cbz	r0, 8007d76 <rcutils_set_default_allocator+0x2e>
 8007d4a:	6802      	ldr	r2, [r0, #0]
 8007d4c:	b1a2      	cbz	r2, 8007d78 <rcutils_set_default_allocator+0x30>
 8007d4e:	6841      	ldr	r1, [r0, #4]
 8007d50:	b1a1      	cbz	r1, 8007d7c <rcutils_set_default_allocator+0x34>
 8007d52:	b410      	push	{r4}
 8007d54:	68c4      	ldr	r4, [r0, #12]
 8007d56:	b164      	cbz	r4, 8007d72 <rcutils_set_default_allocator+0x2a>
 8007d58:	6880      	ldr	r0, [r0, #8]
 8007d5a:	b138      	cbz	r0, 8007d6c <rcutils_set_default_allocator+0x24>
 8007d5c:	4b08      	ldr	r3, [pc, #32]	@ (8007d80 <rcutils_set_default_allocator+0x38>)
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	2200      	movs	r2, #0
 8007d62:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007d66:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	4620      	mov	r0, r4
 8007d74:	e7fa      	b.n	8007d6c <rcutils_set_default_allocator+0x24>
 8007d76:	4770      	bx	lr
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4770      	bx	lr
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4770      	bx	lr
 8007d80:	20000014 	.word	0x20000014

08007d84 <rcutils_get_default_allocator>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4c05      	ldr	r4, [pc, #20]	@ (8007d9c <rcutils_get_default_allocator+0x18>)
 8007d88:	4686      	mov	lr, r0
 8007d8a:	4684      	mov	ip, r0
 8007d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	f8cc 3000 	str.w	r3, [ip]
 8007d98:	4670      	mov	r0, lr
 8007d9a:	bd10      	pop	{r4, pc}
 8007d9c:	20000014 	.word	0x20000014

08007da0 <rcutils_allocator_is_valid>:
 8007da0:	b158      	cbz	r0, 8007dba <rcutils_allocator_is_valid+0x1a>
 8007da2:	6803      	ldr	r3, [r0, #0]
 8007da4:	b143      	cbz	r3, 8007db8 <rcutils_allocator_is_valid+0x18>
 8007da6:	6843      	ldr	r3, [r0, #4]
 8007da8:	b133      	cbz	r3, 8007db8 <rcutils_allocator_is_valid+0x18>
 8007daa:	68c3      	ldr	r3, [r0, #12]
 8007dac:	b123      	cbz	r3, 8007db8 <rcutils_allocator_is_valid+0x18>
 8007dae:	6880      	ldr	r0, [r0, #8]
 8007db0:	3800      	subs	r0, #0
 8007db2:	bf18      	it	ne
 8007db4:	2001      	movne	r0, #1
 8007db6:	4770      	bx	lr
 8007db8:	4618      	mov	r0, r3
 8007dba:	4770      	bx	lr

08007dbc <rcutils_get_error_string>:
 8007dbc:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <rcutils_get_error_string+0x1c>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	b13b      	cbz	r3, 8007dd2 <rcutils_get_error_string+0x16>
 8007dc2:	4b06      	ldr	r3, [pc, #24]	@ (8007ddc <rcutils_get_error_string+0x20>)
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	b90a      	cbnz	r2, 8007dcc <rcutils_get_error_string+0x10>
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	4b04      	ldr	r3, [pc, #16]	@ (8007de0 <rcutils_get_error_string+0x24>)
 8007dce:	7818      	ldrb	r0, [r3, #0]
 8007dd0:	4770      	bx	lr
 8007dd2:	4b04      	ldr	r3, [pc, #16]	@ (8007de4 <rcutils_get_error_string+0x28>)
 8007dd4:	7818      	ldrb	r0, [r3, #0]
 8007dd6:	4770      	bx	lr
 8007dd8:	20008fbc 	.word	0x20008fbc
 8007ddc:	20008fd1 	.word	0x20008fd1
 8007de0:	20008fd0 	.word	0x20008fd0
 8007de4:	080146ac 	.word	0x080146ac

08007de8 <rcutils_reset_error>:
 8007de8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007e08 <rcutils_reset_error+0x20>
 8007dec:	4a08      	ldr	r2, [pc, #32]	@ (8007e10 <rcutils_reset_error+0x28>)
 8007dee:	4809      	ldr	r0, [pc, #36]	@ (8007e14 <rcutils_reset_error+0x2c>)
 8007df0:	4909      	ldr	r1, [pc, #36]	@ (8007e18 <rcutils_reset_error+0x30>)
 8007df2:	2300      	movs	r3, #0
 8007df4:	8013      	strh	r3, [r2, #0]
 8007df6:	ed82 7b02 	vstr	d7, [r2, #8]
 8007dfa:	4a08      	ldr	r2, [pc, #32]	@ (8007e1c <rcutils_reset_error+0x34>)
 8007dfc:	7003      	strb	r3, [r0, #0]
 8007dfe:	700b      	strb	r3, [r1, #0]
 8007e00:	7013      	strb	r3, [r2, #0]
 8007e02:	4770      	bx	lr
 8007e04:	f3af 8000 	nop.w
	...
 8007e10:	20008fc0 	.word	0x20008fc0
 8007e14:	20008fd1 	.word	0x20008fd1
 8007e18:	20008fd0 	.word	0x20008fd0
 8007e1c:	20008fbc 	.word	0x20008fbc

08007e20 <rcutils_system_time_now>:
 8007e20:	b308      	cbz	r0, 8007e66 <rcutils_system_time_now+0x46>
 8007e22:	b570      	push	{r4, r5, r6, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	4604      	mov	r4, r0
 8007e28:	4669      	mov	r1, sp
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	f7f9 f954 	bl	80010d8 <clock_gettime>
 8007e30:	e9dd 3500 	ldrd	r3, r5, [sp]
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	db13      	blt.n	8007e60 <rcutils_system_time_now+0x40>
 8007e38:	9902      	ldr	r1, [sp, #8]
 8007e3a:	2900      	cmp	r1, #0
 8007e3c:	db0d      	blt.n	8007e5a <rcutils_system_time_now+0x3a>
 8007e3e:	4e0b      	ldr	r6, [pc, #44]	@ (8007e6c <rcutils_system_time_now+0x4c>)
 8007e40:	fba3 3206 	umull	r3, r2, r3, r6
 8007e44:	185b      	adds	r3, r3, r1
 8007e46:	fb06 2205 	mla	r2, r6, r5, r2
 8007e4a:	f04f 0000 	mov.w	r0, #0
 8007e4e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8007e52:	e9c4 3200 	strd	r3, r2, [r4]
 8007e56:	b004      	add	sp, #16
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	ea53 0205 	orrs.w	r2, r3, r5
 8007e5e:	d1ee      	bne.n	8007e3e <rcutils_system_time_now+0x1e>
 8007e60:	2002      	movs	r0, #2
 8007e62:	b004      	add	sp, #16
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	200b      	movs	r0, #11
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	3b9aca00 	.word	0x3b9aca00

08007e70 <rcutils_steady_time_now>:
 8007e70:	b308      	cbz	r0, 8007eb6 <rcutils_steady_time_now+0x46>
 8007e72:	b570      	push	{r4, r5, r6, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	4604      	mov	r4, r0
 8007e78:	4669      	mov	r1, sp
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7f9 f92c 	bl	80010d8 <clock_gettime>
 8007e80:	e9dd 3500 	ldrd	r3, r5, [sp]
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	db13      	blt.n	8007eb0 <rcutils_steady_time_now+0x40>
 8007e88:	9902      	ldr	r1, [sp, #8]
 8007e8a:	2900      	cmp	r1, #0
 8007e8c:	db0d      	blt.n	8007eaa <rcutils_steady_time_now+0x3a>
 8007e8e:	4e0b      	ldr	r6, [pc, #44]	@ (8007ebc <rcutils_steady_time_now+0x4c>)
 8007e90:	fba3 3206 	umull	r3, r2, r3, r6
 8007e94:	185b      	adds	r3, r3, r1
 8007e96:	fb06 2205 	mla	r2, r6, r5, r2
 8007e9a:	f04f 0000 	mov.w	r0, #0
 8007e9e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8007ea2:	e9c4 3200 	strd	r3, r2, [r4]
 8007ea6:	b004      	add	sp, #16
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	ea53 0205 	orrs.w	r2, r3, r5
 8007eae:	d1ee      	bne.n	8007e8e <rcutils_steady_time_now+0x1e>
 8007eb0:	2002      	movs	r0, #2
 8007eb2:	b004      	add	sp, #16
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	200b      	movs	r0, #11
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	3b9aca00 	.word	0x3b9aca00

08007ec0 <rmw_uros_set_custom_transport>:
 8007ec0:	b470      	push	{r4, r5, r6}
 8007ec2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8007ec6:	b162      	cbz	r2, 8007ee2 <rmw_uros_set_custom_transport+0x22>
 8007ec8:	b15b      	cbz	r3, 8007ee2 <rmw_uros_set_custom_transport+0x22>
 8007eca:	b155      	cbz	r5, 8007ee2 <rmw_uros_set_custom_transport+0x22>
 8007ecc:	b14e      	cbz	r6, 8007ee2 <rmw_uros_set_custom_transport+0x22>
 8007ece:	4c06      	ldr	r4, [pc, #24]	@ (8007ee8 <rmw_uros_set_custom_transport+0x28>)
 8007ed0:	7020      	strb	r0, [r4, #0]
 8007ed2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007ed6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007eda:	6166      	str	r6, [r4, #20]
 8007edc:	2000      	movs	r0, #0
 8007ede:	bc70      	pop	{r4, r5, r6}
 8007ee0:	4770      	bx	lr
 8007ee2:	200b      	movs	r0, #11
 8007ee4:	bc70      	pop	{r4, r5, r6}
 8007ee6:	4770      	bx	lr
 8007ee8:	20008fd4 	.word	0x20008fd4

08007eec <std_msgs__msg__String__init>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b128      	cbz	r0, 8007efe <std_msgs__msg__String__init+0x12>
 8007ef2:	f005 f87d 	bl	800cff0 <rosidl_runtime_c__String__init>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b120      	cbz	r0, 8007f04 <std_msgs__msg__String__init+0x18>
 8007efa:	4628      	mov	r0, r5
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	4605      	mov	r5, r0
 8007f00:	4628      	mov	r0, r5
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	4620      	mov	r0, r4
 8007f06:	f005 f889 	bl	800d01c <rosidl_runtime_c__String__fini>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop

08007f10 <std_msgs__msg__String__fini>:
 8007f10:	b108      	cbz	r0, 8007f16 <std_msgs__msg__String__fini+0x6>
 8007f12:	f005 b883 	b.w	800d01c <rosidl_runtime_c__String__fini>
 8007f16:	4770      	bx	lr

08007f18 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8007f18:	4b04      	ldr	r3, [pc, #16]	@ (8007f2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	b10a      	cbz	r2, 8007f22 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8007f1e:	4803      	ldr	r0, [pc, #12]	@ (8007f2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f20:	4770      	bx	lr
 8007f22:	4a03      	ldr	r2, [pc, #12]	@ (8007f30 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	4770      	bx	lr
 8007f2c:	20000030 	.word	0x20000030
 8007f30:	200000ac 	.word	0x200000ac

08007f34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8007f34:	4a02      	ldr	r2, [pc, #8]	@ (8007f40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8007f36:	4b03      	ldr	r3, [pc, #12]	@ (8007f44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	200000ac 	.word	0x200000ac
 8007f44:	20000030 	.word	0x20000030

08007f48 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8007f48:	f7ff bfd0 	b.w	8007eec <std_msgs__msg__String__init>

08007f4c <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8007f4c:	f7ff bfe0 	b.w	8007f10 <std_msgs__msg__String__fini>

08007f50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8007f50:	4b04      	ldr	r3, [pc, #16]	@ (8007f64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	b10a      	cbz	r2, 8007f5a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8007f56:	4803      	ldr	r0, [pc, #12]	@ (8007f64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f58:	4770      	bx	lr
 8007f5a:	4a03      	ldr	r2, [pc, #12]	@ (8007f68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8007f5c:	4801      	ldr	r0, [pc, #4]	@ (8007f64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	4770      	bx	lr
 8007f64:	20000078 	.word	0x20000078
 8007f68:	200000b0 	.word	0x200000b0

08007f6c <_String__max_serialized_size>:
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	4770      	bx	lr

08007f70 <_String__cdr_serialize>:
 8007f70:	b1c0      	cbz	r0, 8007fa4 <_String__cdr_serialize+0x34>
 8007f72:	b570      	push	{r4, r5, r6, lr}
 8007f74:	6806      	ldr	r6, [r0, #0]
 8007f76:	460d      	mov	r5, r1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	b156      	cbz	r6, 8007f92 <_String__cdr_serialize+0x22>
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7f8 f939 	bl	80001f4 <strlen>
 8007f82:	4631      	mov	r1, r6
 8007f84:	6060      	str	r0, [r4, #4]
 8007f86:	1c42      	adds	r2, r0, #1
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f8e:	f000 b917 	b.w	80081c0 <ucdr_serialize_sequence_char>
 8007f92:	4630      	mov	r0, r6
 8007f94:	6060      	str	r0, [r4, #4]
 8007f96:	4632      	mov	r2, r6
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fa0:	f000 b90e 	b.w	80081c0 <ucdr_serialize_sequence_char>
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop

08007fa8 <get_serialized_size_std_msgs__msg__String>:
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	4604      	mov	r4, r0
 8007fac:	b138      	cbz	r0, 8007fbe <get_serialized_size_std_msgs__msg__String+0x16>
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	2104      	movs	r1, #4
 8007fb4:	f000 f898 	bl	80080e8 <ucdr_alignment>
 8007fb8:	6863      	ldr	r3, [r4, #4]
 8007fba:	3305      	adds	r3, #5
 8007fbc:	4418      	add	r0, r3
 8007fbe:	bd10      	pop	{r4, pc}

08007fc0 <_String__cdr_deserialize>:
 8007fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	b1a1      	cbz	r1, 8007ff2 <_String__cdr_deserialize+0x32>
 8007fc8:	688f      	ldr	r7, [r1, #8]
 8007fca:	6809      	ldr	r1, [r1, #0]
 8007fcc:	ab01      	add	r3, sp, #4
 8007fce:	463a      	mov	r2, r7
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	f000 f907 	bl	80081e4 <ucdr_deserialize_sequence_char>
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	4605      	mov	r5, r0
 8007fda:	b920      	cbnz	r0, 8007fe6 <_String__cdr_deserialize+0x26>
 8007fdc:	429f      	cmp	r7, r3
 8007fde:	d30c      	bcc.n	8007ffa <_String__cdr_deserialize+0x3a>
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	b003      	add	sp, #12
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	b103      	cbz	r3, 8007fea <_String__cdr_deserialize+0x2a>
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	4628      	mov	r0, r5
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	b003      	add	sp, #12
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	b003      	add	sp, #12
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	75b0      	strb	r0, [r6, #22]
 8007ffe:	7571      	strb	r1, [r6, #21]
 8008000:	4630      	mov	r0, r6
 8008002:	6065      	str	r5, [r4, #4]
 8008004:	f000 f886 	bl	8008114 <ucdr_align_to>
 8008008:	4630      	mov	r0, r6
 800800a:	9901      	ldr	r1, [sp, #4]
 800800c:	f000 f8b8 	bl	8008180 <ucdr_advance_buffer>
 8008010:	4628      	mov	r0, r5
 8008012:	b003      	add	sp, #12
 8008014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008016:	bf00      	nop

08008018 <_String__get_serialized_size>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	b130      	cbz	r0, 800802c <_String__get_serialized_size+0x14>
 800801e:	2104      	movs	r1, #4
 8008020:	2000      	movs	r0, #0
 8008022:	f000 f861 	bl	80080e8 <ucdr_alignment>
 8008026:	6863      	ldr	r3, [r4, #4]
 8008028:	3305      	adds	r3, #5
 800802a:	4418      	add	r0, r3
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop

08008030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8008030:	4800      	ldr	r0, [pc, #0]	@ (8008034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8008032:	4770      	bx	lr
 8008034:	20000084 	.word	0x20000084

08008038 <ucdr_check_buffer_available_for>:
 8008038:	7d83      	ldrb	r3, [r0, #22]
 800803a:	b93b      	cbnz	r3, 800804c <ucdr_check_buffer_available_for+0x14>
 800803c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008040:	4419      	add	r1, r3
 8008042:	4288      	cmp	r0, r1
 8008044:	bf34      	ite	cc
 8008046:	2000      	movcc	r0, #0
 8008048:	2001      	movcs	r0, #1
 800804a:	4770      	bx	lr
 800804c:	2000      	movs	r0, #0
 800804e:	4770      	bx	lr

08008050 <ucdr_check_final_buffer_behavior>:
 8008050:	7d83      	ldrb	r3, [r0, #22]
 8008052:	b943      	cbnz	r3, 8008066 <ucdr_check_final_buffer_behavior+0x16>
 8008054:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008058:	4291      	cmp	r1, r2
 800805a:	b510      	push	{r4, lr}
 800805c:	4604      	mov	r4, r0
 800805e:	d205      	bcs.n	800806c <ucdr_check_final_buffer_behavior+0x1c>
 8008060:	2301      	movs	r3, #1
 8008062:	4618      	mov	r0, r3
 8008064:	bd10      	pop	{r4, pc}
 8008066:	2300      	movs	r3, #0
 8008068:	4618      	mov	r0, r3
 800806a:	4770      	bx	lr
 800806c:	6982      	ldr	r2, [r0, #24]
 800806e:	b13a      	cbz	r2, 8008080 <ucdr_check_final_buffer_behavior+0x30>
 8008070:	69c1      	ldr	r1, [r0, #28]
 8008072:	4790      	blx	r2
 8008074:	f080 0301 	eor.w	r3, r0, #1
 8008078:	b2db      	uxtb	r3, r3
 800807a:	75a0      	strb	r0, [r4, #22]
 800807c:	4618      	mov	r0, r3
 800807e:	bd10      	pop	{r4, pc}
 8008080:	2001      	movs	r0, #1
 8008082:	75a0      	strb	r0, [r4, #22]
 8008084:	e7fa      	b.n	800807c <ucdr_check_final_buffer_behavior+0x2c>
 8008086:	bf00      	nop

08008088 <ucdr_set_on_full_buffer_callback>:
 8008088:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <ucdr_init_buffer_origin_offset_endian>:
 8008090:	b410      	push	{r4}
 8008092:	9c01      	ldr	r4, [sp, #4]
 8008094:	6001      	str	r1, [r0, #0]
 8008096:	440a      	add	r2, r1
 8008098:	6042      	str	r2, [r0, #4]
 800809a:	190a      	adds	r2, r1, r4
 800809c:	441c      	add	r4, r3
 800809e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80080a2:	6082      	str	r2, [r0, #8]
 80080a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80080a8:	7503      	strb	r3, [r0, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80080b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b4:	7542      	strb	r2, [r0, #21]
 80080b6:	7582      	strb	r2, [r0, #22]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <ucdr_init_buffer_origin_offset>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	9c04      	ldr	r4, [sp, #16]
 80080c2:	9400      	str	r4, [sp, #0]
 80080c4:	2401      	movs	r4, #1
 80080c6:	9401      	str	r4, [sp, #4]
 80080c8:	f7ff ffe2 	bl	8008090 <ucdr_init_buffer_origin_offset_endian>
 80080cc:	b002      	add	sp, #8
 80080ce:	bd10      	pop	{r4, pc}

080080d0 <ucdr_init_buffer_origin>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	2400      	movs	r4, #0
 80080d6:	9400      	str	r4, [sp, #0]
 80080d8:	f7ff fff0 	bl	80080bc <ucdr_init_buffer_origin_offset>
 80080dc:	b002      	add	sp, #8
 80080de:	bd10      	pop	{r4, pc}

080080e0 <ucdr_init_buffer>:
 80080e0:	2300      	movs	r3, #0
 80080e2:	f7ff bff5 	b.w	80080d0 <ucdr_init_buffer_origin>
 80080e6:	bf00      	nop

080080e8 <ucdr_alignment>:
 80080e8:	fbb0 f3f1 	udiv	r3, r0, r1
 80080ec:	fb03 0011 	mls	r0, r3, r1, r0
 80080f0:	1a08      	subs	r0, r1, r0
 80080f2:	3901      	subs	r1, #1
 80080f4:	4008      	ands	r0, r1
 80080f6:	4770      	bx	lr

080080f8 <ucdr_buffer_alignment>:
 80080f8:	7d43      	ldrb	r3, [r0, #21]
 80080fa:	428b      	cmp	r3, r1
 80080fc:	d208      	bcs.n	8008110 <ucdr_buffer_alignment+0x18>
 80080fe:	6900      	ldr	r0, [r0, #16]
 8008100:	fbb0 f3f1 	udiv	r3, r0, r1
 8008104:	fb01 0013 	mls	r0, r1, r3, r0
 8008108:	1a08      	subs	r0, r1, r0
 800810a:	3901      	subs	r1, #1
 800810c:	4008      	ands	r0, r1
 800810e:	4770      	bx	lr
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr

08008114 <ucdr_align_to>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4604      	mov	r4, r0
 8008118:	460d      	mov	r5, r1
 800811a:	f7ff ffed 	bl	80080f8 <ucdr_buffer_alignment>
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	6921      	ldr	r1, [r4, #16]
 8008122:	7565      	strb	r5, [r4, #21]
 8008124:	181a      	adds	r2, r3, r0
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	4293      	cmp	r3, r2
 800812a:	4408      	add	r0, r1
 800812c:	bf28      	it	cs
 800812e:	4613      	movcs	r3, r2
 8008130:	6120      	str	r0, [r4, #16]
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	bf00      	nop

08008138 <ucdr_buffer_length>:
 8008138:	6882      	ldr	r2, [r0, #8]
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	1a10      	subs	r0, r2, r0
 800813e:	4770      	bx	lr

08008140 <ucdr_buffer_remaining>:
 8008140:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008144:	1a10      	subs	r0, r2, r0
 8008146:	4770      	bx	lr

08008148 <ucdr_check_final_buffer_behavior_array>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	7d83      	ldrb	r3, [r0, #22]
 800814c:	b963      	cbnz	r3, 8008168 <ucdr_check_final_buffer_behavior_array+0x20>
 800814e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	d308      	bcc.n	800816c <ucdr_check_final_buffer_behavior_array+0x24>
 800815a:	b139      	cbz	r1, 800816c <ucdr_check_final_buffer_behavior_array+0x24>
 800815c:	6983      	ldr	r3, [r0, #24]
 800815e:	b163      	cbz	r3, 800817a <ucdr_check_final_buffer_behavior_array+0x32>
 8008160:	69c1      	ldr	r1, [r0, #28]
 8008162:	4798      	blx	r3
 8008164:	75a0      	strb	r0, [r4, #22]
 8008166:	b108      	cbz	r0, 800816c <ucdr_check_final_buffer_behavior_array+0x24>
 8008168:	2000      	movs	r0, #0
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff ffe7 	bl	8008140 <ucdr_buffer_remaining>
 8008172:	42a8      	cmp	r0, r5
 8008174:	bf28      	it	cs
 8008176:	4628      	movcs	r0, r5
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	2301      	movs	r3, #1
 800817c:	7583      	strb	r3, [r0, #22]
 800817e:	e7f3      	b.n	8008168 <ucdr_check_final_buffer_behavior_array+0x20>

08008180 <ucdr_advance_buffer>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	f7ff ff57 	bl	8008038 <ucdr_check_buffer_available_for>
 800818a:	b178      	cbz	r0, 80081ac <ucdr_advance_buffer+0x2c>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	68a2      	ldr	r2, [r4, #8]
 8008190:	442b      	add	r3, r5
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	2301      	movs	r3, #1
 8008196:	442a      	add	r2, r5
 8008198:	7563      	strb	r3, [r4, #21]
 800819a:	60a2      	str	r2, [r4, #8]
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	68a2      	ldr	r2, [r4, #8]
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	4402      	add	r2, r0
 80081a4:	4403      	add	r3, r0
 80081a6:	1a2d      	subs	r5, r5, r0
 80081a8:	60a2      	str	r2, [r4, #8]
 80081aa:	6123      	str	r3, [r4, #16]
 80081ac:	4629      	mov	r1, r5
 80081ae:	2201      	movs	r2, #1
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff ffc9 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d1f1      	bne.n	800819e <ucdr_advance_buffer+0x1e>
 80081ba:	2301      	movs	r3, #1
 80081bc:	7563      	strb	r3, [r4, #21]
 80081be:	bd38      	pop	{r3, r4, r5, pc}

080081c0 <ucdr_serialize_sequence_char>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4615      	mov	r5, r2
 80081c4:	460e      	mov	r6, r1
 80081c6:	7d01      	ldrb	r1, [r0, #20]
 80081c8:	4604      	mov	r4, r0
 80081ca:	f005 fba5 	bl	800d918 <ucdr_serialize_endian_uint32_t>
 80081ce:	b90d      	cbnz	r5, 80081d4 <ucdr_serialize_sequence_char+0x14>
 80081d0:	2001      	movs	r0, #1
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	7d21      	ldrb	r1, [r4, #20]
 80081d6:	462b      	mov	r3, r5
 80081d8:	4632      	mov	r2, r6
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e0:	f004 bf92 	b.w	800d108 <ucdr_serialize_endian_array_char>

080081e4 <ucdr_deserialize_sequence_char>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	461d      	mov	r5, r3
 80081ea:	4616      	mov	r6, r2
 80081ec:	460f      	mov	r7, r1
 80081ee:	461a      	mov	r2, r3
 80081f0:	7d01      	ldrb	r1, [r0, #20]
 80081f2:	4604      	mov	r4, r0
 80081f4:	f005 fcb8 	bl	800db68 <ucdr_deserialize_endian_uint32_t>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	429e      	cmp	r6, r3
 80081fc:	bf3c      	itt	cc
 80081fe:	2201      	movcc	r2, #1
 8008200:	75a2      	strbcc	r2, [r4, #22]
 8008202:	b913      	cbnz	r3, 800820a <ucdr_deserialize_sequence_char+0x26>
 8008204:	2001      	movs	r0, #1
 8008206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820a:	7d21      	ldrb	r1, [r4, #20]
 800820c:	463a      	mov	r2, r7
 800820e:	4620      	mov	r0, r4
 8008210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	f004 bfaa 	b.w	800d16c <ucdr_deserialize_endian_array_char>

08008218 <ucdr_serialize_sequence_uint8_t>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4615      	mov	r5, r2
 800821c:	460e      	mov	r6, r1
 800821e:	7d01      	ldrb	r1, [r0, #20]
 8008220:	4604      	mov	r4, r0
 8008222:	f005 fb79 	bl	800d918 <ucdr_serialize_endian_uint32_t>
 8008226:	b90d      	cbnz	r5, 800822c <ucdr_serialize_sequence_uint8_t+0x14>
 8008228:	2001      	movs	r0, #1
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	7d21      	ldrb	r1, [r4, #20]
 800822e:	462b      	mov	r3, r5
 8008230:	4632      	mov	r2, r6
 8008232:	4620      	mov	r0, r4
 8008234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008238:	f004 bffc 	b.w	800d234 <ucdr_serialize_endian_array_uint8_t>

0800823c <ucdr_deserialize_sequence_uint8_t>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	461d      	mov	r5, r3
 8008242:	4616      	mov	r6, r2
 8008244:	460f      	mov	r7, r1
 8008246:	461a      	mov	r2, r3
 8008248:	7d01      	ldrb	r1, [r0, #20]
 800824a:	4604      	mov	r4, r0
 800824c:	f005 fc8c 	bl	800db68 <ucdr_deserialize_endian_uint32_t>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	429e      	cmp	r6, r3
 8008254:	bf3c      	itt	cc
 8008256:	2201      	movcc	r2, #1
 8008258:	75a2      	strbcc	r2, [r4, #22]
 800825a:	b913      	cbnz	r3, 8008262 <ucdr_deserialize_sequence_uint8_t+0x26>
 800825c:	2001      	movs	r0, #1
 800825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008262:	7d21      	ldrb	r1, [r4, #20]
 8008264:	463a      	mov	r2, r7
 8008266:	4620      	mov	r0, r4
 8008268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	f005 b846 	b.w	800d2fc <ucdr_deserialize_endian_array_uint8_t>

08008270 <rcl_client_get_rmw_handle>:
 8008270:	b118      	cbz	r0, 800827a <rcl_client_get_rmw_handle+0xa>
 8008272:	6800      	ldr	r0, [r0, #0]
 8008274:	b108      	cbz	r0, 800827a <rcl_client_get_rmw_handle+0xa>
 8008276:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800827a:	4770      	bx	lr

0800827c <rcl_send_request>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	b1e8      	cbz	r0, 80082be <rcl_send_request+0x42>
 8008282:	4604      	mov	r4, r0
 8008284:	6800      	ldr	r0, [r0, #0]
 8008286:	b1d0      	cbz	r0, 80082be <rcl_send_request+0x42>
 8008288:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800828c:	b1bb      	cbz	r3, 80082be <rcl_send_request+0x42>
 800828e:	460e      	mov	r6, r1
 8008290:	b1d1      	cbz	r1, 80082c8 <rcl_send_request+0x4c>
 8008292:	4615      	mov	r5, r2
 8008294:	b1c2      	cbz	r2, 80082c8 <rcl_send_request+0x4c>
 8008296:	2105      	movs	r1, #5
 8008298:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800829c:	f002 fd60 	bl	800ad60 <__atomic_load_8>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	e9c5 0100 	strd	r0, r1, [r5]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4631      	mov	r1, r6
 80082aa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80082ae:	f003 fe43 	bl	800bf38 <rmw_send_request>
 80082b2:	4606      	mov	r6, r0
 80082b4:	b160      	cbz	r0, 80082d0 <rcl_send_request+0x54>
 80082b6:	2601      	movs	r6, #1
 80082b8:	4630      	mov	r0, r6
 80082ba:	b002      	add	sp, #8
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80082c2:	4630      	mov	r0, r6
 80082c4:	b002      	add	sp, #8
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	260b      	movs	r6, #11
 80082ca:	4630      	mov	r0, r6
 80082cc:	b002      	add	sp, #8
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	2105      	movs	r1, #5
 80082d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082d8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80082dc:	9100      	str	r1, [sp, #0]
 80082de:	f002 fdab 	bl	800ae38 <__atomic_exchange_8>
 80082e2:	4630      	mov	r0, r6
 80082e4:	b002      	add	sp, #8
 80082e6:	bd70      	pop	{r4, r5, r6, pc}

080082e8 <rcl_take_response>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	468e      	mov	lr, r1
 80082ec:	460c      	mov	r4, r1
 80082ee:	4616      	mov	r6, r2
 80082f0:	4605      	mov	r5, r0
 80082f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80082f6:	b08c      	sub	sp, #48	@ 0x30
 80082f8:	f10d 0c18 	add.w	ip, sp, #24
 80082fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008300:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008304:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008308:	b35d      	cbz	r5, 8008362 <rcl_take_response+0x7a>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	b34b      	cbz	r3, 8008362 <rcl_take_response+0x7a>
 800830e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8008312:	b330      	cbz	r0, 8008362 <rcl_take_response+0x7a>
 8008314:	b346      	cbz	r6, 8008368 <rcl_take_response+0x80>
 8008316:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8008370 <rcl_take_response+0x88>
 800831a:	2300      	movs	r3, #0
 800831c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008320:	4632      	mov	r2, r6
 8008322:	f10d 0307 	add.w	r3, sp, #7
 8008326:	a902      	add	r1, sp, #8
 8008328:	ed8d 7b02 	vstr	d7, [sp, #8]
 800832c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008330:	f003 ff0a 	bl	800c148 <rmw_take_response>
 8008334:	4605      	mov	r5, r0
 8008336:	b9c8      	cbnz	r0, 800836c <rcl_take_response+0x84>
 8008338:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800833c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8008340:	2a00      	cmp	r2, #0
 8008342:	bf08      	it	eq
 8008344:	461d      	moveq	r5, r3
 8008346:	f10d 0e18 	add.w	lr, sp, #24
 800834a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800834e:	46a4      	mov	ip, r4
 8008350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008354:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008358:	e88c 0003 	stmia.w	ip, {r0, r1}
 800835c:	4628      	mov	r0, r5
 800835e:	b00c      	add	sp, #48	@ 0x30
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8008366:	e7ee      	b.n	8008346 <rcl_take_response+0x5e>
 8008368:	250b      	movs	r5, #11
 800836a:	e7ec      	b.n	8008346 <rcl_take_response+0x5e>
 800836c:	2501      	movs	r5, #1
 800836e:	e7ea      	b.n	8008346 <rcl_take_response+0x5e>
	...

08008378 <rcl_client_is_valid>:
 8008378:	b130      	cbz	r0, 8008388 <rcl_client_is_valid+0x10>
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	b120      	cbz	r0, 8008388 <rcl_client_is_valid+0x10>
 800837e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8008382:	3800      	subs	r0, #0
 8008384:	bf18      	it	ne
 8008386:	2001      	movne	r0, #1
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop

0800838c <rcl_get_zero_initialized_context>:
 800838c:	4a03      	ldr	r2, [pc, #12]	@ (800839c <rcl_get_zero_initialized_context+0x10>)
 800838e:	4603      	mov	r3, r0
 8008390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008394:	e883 0003 	stmia.w	r3, {r0, r1}
 8008398:	4618      	mov	r0, r3
 800839a:	4770      	bx	lr
 800839c:	08014824 	.word	0x08014824

080083a0 <rcl_context_is_valid>:
 80083a0:	b118      	cbz	r0, 80083aa <rcl_context_is_valid+0xa>
 80083a2:	6840      	ldr	r0, [r0, #4]
 80083a4:	3800      	subs	r0, #0
 80083a6:	bf18      	it	ne
 80083a8:	2001      	movne	r0, #1
 80083aa:	4770      	bx	lr

080083ac <__cleanup_context>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	4606      	mov	r6, r0
 80083b2:	6800      	ldr	r0, [r0, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	6073      	str	r3, [r6, #4]
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d049      	beq.n	8008450 <__cleanup_context+0xa4>
 80083bc:	6947      	ldr	r7, [r0, #20]
 80083be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80083c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80083c6:	b137      	cbz	r7, 80083d6 <__cleanup_context+0x2a>
 80083c8:	3014      	adds	r0, #20
 80083ca:	f000 f9bb 	bl	8008744 <rcl_init_options_fini>
 80083ce:	4607      	mov	r7, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d144      	bne.n	800845e <__cleanup_context+0xb2>
 80083d4:	6830      	ldr	r0, [r6, #0]
 80083d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80083d8:	b143      	cbz	r3, 80083ec <__cleanup_context+0x40>
 80083da:	3028      	adds	r0, #40	@ 0x28
 80083dc:	f003 fc14 	bl	800bc08 <rmw_context_fini>
 80083e0:	b118      	cbz	r0, 80083ea <__cleanup_context+0x3e>
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d03e      	beq.n	8008464 <__cleanup_context+0xb8>
 80083e6:	f7ff fcff 	bl	8007de8 <rcutils_reset_error>
 80083ea:	6830      	ldr	r0, [r6, #0]
 80083ec:	6a03      	ldr	r3, [r0, #32]
 80083ee:	b1db      	cbz	r3, 8008428 <__cleanup_context+0x7c>
 80083f0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80083f4:	2a01      	cmp	r2, #1
 80083f6:	f17c 0100 	sbcs.w	r1, ip, #0
 80083fa:	db11      	blt.n	8008420 <__cleanup_context+0x74>
 80083fc:	2400      	movs	r4, #0
 80083fe:	4625      	mov	r5, r4
 8008400:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008404:	4649      	mov	r1, r9
 8008406:	b1b8      	cbz	r0, 8008438 <__cleanup_context+0x8c>
 8008408:	47c0      	blx	r8
 800840a:	6833      	ldr	r3, [r6, #0]
 800840c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8008410:	3401      	adds	r4, #1
 8008412:	f145 0500 	adc.w	r5, r5, #0
 8008416:	4294      	cmp	r4, r2
 8008418:	eb75 010c 	sbcs.w	r1, r5, ip
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	dbef      	blt.n	8008400 <__cleanup_context+0x54>
 8008420:	4618      	mov	r0, r3
 8008422:	4649      	mov	r1, r9
 8008424:	47c0      	blx	r8
 8008426:	6830      	ldr	r0, [r6, #0]
 8008428:	4649      	mov	r1, r9
 800842a:	47c0      	blx	r8
 800842c:	2300      	movs	r3, #0
 800842e:	e9c6 3300 	strd	r3, r3, [r6]
 8008432:	4638      	mov	r0, r7
 8008434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008438:	3401      	adds	r4, #1
 800843a:	f145 0500 	adc.w	r5, r5, #0
 800843e:	4294      	cmp	r4, r2
 8008440:	eb75 010c 	sbcs.w	r1, r5, ip
 8008444:	dbdc      	blt.n	8008400 <__cleanup_context+0x54>
 8008446:	4618      	mov	r0, r3
 8008448:	4649      	mov	r1, r9
 800844a:	47c0      	blx	r8
 800844c:	6830      	ldr	r0, [r6, #0]
 800844e:	e7eb      	b.n	8008428 <__cleanup_context+0x7c>
 8008450:	4607      	mov	r7, r0
 8008452:	2300      	movs	r3, #0
 8008454:	e9c6 3300 	strd	r3, r3, [r6]
 8008458:	4638      	mov	r0, r7
 800845a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845e:	f7ff fcc3 	bl	8007de8 <rcutils_reset_error>
 8008462:	e7b7      	b.n	80083d4 <__cleanup_context+0x28>
 8008464:	f009 f936 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8008468:	4607      	mov	r7, r0
 800846a:	e7bc      	b.n	80083e6 <__cleanup_context+0x3a>

0800846c <rcl_init>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	1e05      	subs	r5, r0, #0
 8008472:	b09e      	sub	sp, #120	@ 0x78
 8008474:	460e      	mov	r6, r1
 8008476:	4690      	mov	r8, r2
 8008478:	461f      	mov	r7, r3
 800847a:	f340 809c 	ble.w	80085b6 <rcl_init+0x14a>
 800847e:	2900      	cmp	r1, #0
 8008480:	f000 809c 	beq.w	80085bc <rcl_init+0x150>
 8008484:	f1a1 0e04 	sub.w	lr, r1, #4
 8008488:	f04f 0c00 	mov.w	ip, #0
 800848c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8008490:	f10c 0c01 	add.w	ip, ip, #1
 8008494:	2c00      	cmp	r4, #0
 8008496:	f000 8091 	beq.w	80085bc <rcl_init+0x150>
 800849a:	4565      	cmp	r5, ip
 800849c:	d1f6      	bne.n	800848c <rcl_init+0x20>
 800849e:	f1b8 0f00 	cmp.w	r8, #0
 80084a2:	f000 808b 	beq.w	80085bc <rcl_init+0x150>
 80084a6:	f8d8 4000 	ldr.w	r4, [r8]
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	f000 8086 	beq.w	80085bc <rcl_init+0x150>
 80084b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084b2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80084b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	f8cc 3000 	str.w	r3, [ip]
 80084c0:	a819      	add	r0, sp, #100	@ 0x64
 80084c2:	f7ff fc6d 	bl	8007da0 <rcutils_allocator_is_valid>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d078      	beq.n	80085bc <rcl_init+0x150>
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d076      	beq.n	80085bc <rcl_init+0x150>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d178      	bne.n	80085c6 <rcl_init+0x15a>
 80084d4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80084d8:	2178      	movs	r1, #120	@ 0x78
 80084da:	2001      	movs	r0, #1
 80084dc:	4798      	blx	r3
 80084de:	4604      	mov	r4, r0
 80084e0:	6038      	str	r0, [r7, #0]
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f000 80b6 	beq.w	8008654 <rcl_init+0x1e8>
 80084e8:	a802      	add	r0, sp, #8
 80084ea:	f002 ff89 	bl	800b400 <rmw_get_zero_initialized_context>
 80084ee:	a902      	add	r1, sp, #8
 80084f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80084f4:	2250      	movs	r2, #80	@ 0x50
 80084f6:	ac19      	add	r4, sp, #100	@ 0x64
 80084f8:	f00b f9b1 	bl	801385e <memcpy>
 80084fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084fe:	f8d7 e000 	ldr.w	lr, [r7]
 8008502:	46f4      	mov	ip, lr
 8008504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	f8cc 3000 	str.w	r3, [ip]
 800850e:	f10e 0114 	add.w	r1, lr, #20
 8008512:	4640      	mov	r0, r8
 8008514:	f000 f940 	bl	8008798 <rcl_init_options_copy>
 8008518:	4604      	mov	r4, r0
 800851a:	2800      	cmp	r0, #0
 800851c:	d144      	bne.n	80085a8 <rcl_init+0x13c>
 800851e:	f8d7 9000 	ldr.w	r9, [r7]
 8008522:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8008526:	f8c9 0020 	str.w	r0, [r9, #32]
 800852a:	f8c9 5018 	str.w	r5, [r9, #24]
 800852e:	f8c9 801c 	str.w	r8, [r9, #28]
 8008532:	2d00      	cmp	r5, #0
 8008534:	d04e      	beq.n	80085d4 <rcl_init+0x168>
 8008536:	2e00      	cmp	r6, #0
 8008538:	d04c      	beq.n	80085d4 <rcl_init+0x168>
 800853a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800853e:	2104      	movs	r1, #4
 8008540:	4628      	mov	r0, r5
 8008542:	4798      	blx	r3
 8008544:	f8c9 0020 	str.w	r0, [r9, #32]
 8008548:	f8d7 9000 	ldr.w	r9, [r7]
 800854c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8008550:	46ca      	mov	sl, r9
 8008552:	b343      	cbz	r3, 80085a6 <rcl_init+0x13a>
 8008554:	2d01      	cmp	r5, #1
 8008556:	f178 0300 	sbcs.w	r3, r8, #0
 800855a:	db3b      	blt.n	80085d4 <rcl_init+0x168>
 800855c:	2400      	movs	r4, #0
 800855e:	3e04      	subs	r6, #4
 8008560:	46a1      	mov	r9, r4
 8008562:	e00b      	b.n	800857c <rcl_init+0x110>
 8008564:	6831      	ldr	r1, [r6, #0]
 8008566:	f00b f97a 	bl	801385e <memcpy>
 800856a:	3401      	adds	r4, #1
 800856c:	f149 0900 	adc.w	r9, r9, #0
 8008570:	45c8      	cmp	r8, r9
 8008572:	bf08      	it	eq
 8008574:	42a5      	cmpeq	r5, r4
 8008576:	d02b      	beq.n	80085d0 <rcl_init+0x164>
 8008578:	f8d7 a000 	ldr.w	sl, [r7]
 800857c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8008580:	f7f7 fe38 	bl	80001f4 <strlen>
 8008584:	1c42      	adds	r2, r0, #1
 8008586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008588:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800858a:	f8da a020 	ldr.w	sl, [sl, #32]
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	9a01      	ldr	r2, [sp, #4]
 800859e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1de      	bne.n	8008564 <rcl_init+0xf8>
 80085a6:	240a      	movs	r4, #10
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff feff 	bl	80083ac <__cleanup_context>
 80085ae:	4620      	mov	r0, r4
 80085b0:	b01e      	add	sp, #120	@ 0x78
 80085b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b6:	2900      	cmp	r1, #0
 80085b8:	f43f af71 	beq.w	800849e <rcl_init+0x32>
 80085bc:	240b      	movs	r4, #11
 80085be:	4620      	mov	r0, r4
 80085c0:	b01e      	add	sp, #120	@ 0x78
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	2464      	movs	r4, #100	@ 0x64
 80085c8:	4620      	mov	r0, r4
 80085ca:	b01e      	add	sp, #120	@ 0x78
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d0:	f8d7 9000 	ldr.w	r9, [r7]
 80085d4:	4926      	ldr	r1, [pc, #152]	@ (8008670 <rcl_init+0x204>)
 80085d6:	680b      	ldr	r3, [r1, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	d036      	beq.n	800864a <rcl_init+0x1de>
 80085dc:	600b      	str	r3, [r1, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	2400      	movs	r4, #0
 80085e2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80085ea:	3301      	adds	r3, #1
 80085ec:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80085f0:	d034      	beq.n	800865c <rcl_init+0x1f0>
 80085f2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80085f6:	b93b      	cbnz	r3, 8008608 <rcl_init+0x19c>
 80085f8:	3030      	adds	r0, #48	@ 0x30
 80085fa:	f000 f939 	bl	8008870 <rcl_get_localhost_only>
 80085fe:	4604      	mov	r4, r0
 8008600:	2800      	cmp	r0, #0
 8008602:	d1d1      	bne.n	80085a8 <rcl_init+0x13c>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	6958      	ldr	r0, [r3, #20]
 8008608:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800860a:	aa18      	add	r2, sp, #96	@ 0x60
 800860c:	a917      	add	r1, sp, #92	@ 0x5c
 800860e:	f001 f841 	bl	8009694 <rcl_validate_enclave_name>
 8008612:	4604      	mov	r4, r0
 8008614:	2800      	cmp	r0, #0
 8008616:	d1c7      	bne.n	80085a8 <rcl_init+0x13c>
 8008618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800861a:	b9eb      	cbnz	r3, 8008658 <rcl_init+0x1ec>
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	694b      	ldr	r3, [r1, #20]
 8008620:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008622:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008626:	f000 fc3d 	bl	8008ea4 <rcl_get_security_options_from_environment>
 800862a:	4604      	mov	r4, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	d1bb      	bne.n	80085a8 <rcl_init+0x13c>
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6948      	ldr	r0, [r1, #20]
 8008634:	3128      	adds	r1, #40	@ 0x28
 8008636:	3018      	adds	r0, #24
 8008638:	f003 f9b0 	bl	800b99c <rmw_init>
 800863c:	4604      	mov	r4, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d0bd      	beq.n	80085be <rcl_init+0x152>
 8008642:	f009 f847 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8008646:	4604      	mov	r4, r0
 8008648:	e7ae      	b.n	80085a8 <rcl_init+0x13c>
 800864a:	2201      	movs	r2, #1
 800864c:	461c      	mov	r4, r3
 800864e:	600a      	str	r2, [r1, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	e7c6      	b.n	80085e2 <rcl_init+0x176>
 8008654:	240a      	movs	r4, #10
 8008656:	e7b2      	b.n	80085be <rcl_init+0x152>
 8008658:	2401      	movs	r4, #1
 800865a:	e7a5      	b.n	80085a8 <rcl_init+0x13c>
 800865c:	3024      	adds	r0, #36	@ 0x24
 800865e:	f009 f84d 	bl	80116fc <rcl_get_default_domain_id>
 8008662:	4604      	mov	r4, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d19f      	bne.n	80085a8 <rcl_init+0x13c>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	6958      	ldr	r0, [r3, #20]
 800866c:	e7c1      	b.n	80085f2 <rcl_init+0x186>
 800866e:	bf00      	nop
 8008670:	20008ff0 	.word	0x20008ff0

08008674 <rcl_get_zero_initialized_init_options>:
 8008674:	2000      	movs	r0, #0
 8008676:	4770      	bx	lr

08008678 <rcl_init_options_init>:
 8008678:	b084      	sub	sp, #16
 800867a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800867c:	b097      	sub	sp, #92	@ 0x5c
 800867e:	ae1d      	add	r6, sp, #116	@ 0x74
 8008680:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8008684:	2800      	cmp	r0, #0
 8008686:	d058      	beq.n	800873a <rcl_init_options_init+0xc2>
 8008688:	6803      	ldr	r3, [r0, #0]
 800868a:	4605      	mov	r5, r0
 800868c:	b133      	cbz	r3, 800869c <rcl_init_options_init+0x24>
 800868e:	2464      	movs	r4, #100	@ 0x64
 8008690:	4620      	mov	r0, r4
 8008692:	b017      	add	sp, #92	@ 0x5c
 8008694:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008698:	b004      	add	sp, #16
 800869a:	4770      	bx	lr
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fb7f 	bl	8007da0 <rcutils_allocator_is_valid>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d049      	beq.n	800873a <rcl_init_options_init+0xc2>
 80086a6:	46b4      	mov	ip, r6
 80086a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80086ac:	ac11      	add	r4, sp, #68	@ 0x44
 80086ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086b0:	f8dc 3000 	ldr.w	r3, [ip]
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80086b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086ba:	2050      	movs	r0, #80	@ 0x50
 80086bc:	4798      	blx	r3
 80086be:	4604      	mov	r4, r0
 80086c0:	6028      	str	r0, [r5, #0]
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d03b      	beq.n	800873e <rcl_init_options_init+0xc6>
 80086c6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80086ca:	4686      	mov	lr, r0
 80086cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80086d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80086d4:	f8dc 3000 	ldr.w	r3, [ip]
 80086d8:	f8ce 3000 	str.w	r3, [lr]
 80086dc:	a802      	add	r0, sp, #8
 80086de:	f002 fe9f 	bl	800b420 <rmw_get_zero_initialized_init_options>
 80086e2:	f10d 0e08 	add.w	lr, sp, #8
 80086e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80086ea:	f104 0c18 	add.w	ip, r4, #24
 80086ee:	682f      	ldr	r7, [r5, #0]
 80086f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80086f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008704:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008708:	ac20      	add	r4, sp, #128	@ 0x80
 800870a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800870e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008712:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008716:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800871a:	f107 0018 	add.w	r0, r7, #24
 800871e:	f003 f845 	bl	800b7ac <rmw_init_options_init>
 8008722:	4604      	mov	r4, r0
 8008724:	2800      	cmp	r0, #0
 8008726:	d0b3      	beq.n	8008690 <rcl_init_options_init+0x18>
 8008728:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800872a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800872c:	6828      	ldr	r0, [r5, #0]
 800872e:	4798      	blx	r3
 8008730:	4620      	mov	r0, r4
 8008732:	f008 ffcf 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8008736:	4604      	mov	r4, r0
 8008738:	e7aa      	b.n	8008690 <rcl_init_options_init+0x18>
 800873a:	240b      	movs	r4, #11
 800873c:	e7a8      	b.n	8008690 <rcl_init_options_init+0x18>
 800873e:	240a      	movs	r4, #10
 8008740:	e7a6      	b.n	8008690 <rcl_init_options_init+0x18>
 8008742:	bf00      	nop

08008744 <rcl_init_options_fini>:
 8008744:	b530      	push	{r4, r5, lr}
 8008746:	b087      	sub	sp, #28
 8008748:	b1f0      	cbz	r0, 8008788 <rcl_init_options_fini+0x44>
 800874a:	6803      	ldr	r3, [r0, #0]
 800874c:	4604      	mov	r4, r0
 800874e:	b1db      	cbz	r3, 8008788 <rcl_init_options_fini+0x44>
 8008750:	469c      	mov	ip, r3
 8008752:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008756:	f10d 0e04 	add.w	lr, sp, #4
 800875a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800875e:	f8dc 3000 	ldr.w	r3, [ip]
 8008762:	f8ce 3000 	str.w	r3, [lr]
 8008766:	a801      	add	r0, sp, #4
 8008768:	f7ff fb1a 	bl	8007da0 <rcutils_allocator_is_valid>
 800876c:	b160      	cbz	r0, 8008788 <rcl_init_options_fini+0x44>
 800876e:	6820      	ldr	r0, [r4, #0]
 8008770:	3018      	adds	r0, #24
 8008772:	f003 f8cb 	bl	800b90c <rmw_init_options_fini>
 8008776:	4605      	mov	r5, r0
 8008778:	b950      	cbnz	r0, 8008790 <rcl_init_options_fini+0x4c>
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	9905      	ldr	r1, [sp, #20]
 8008780:	4798      	blx	r3
 8008782:	4628      	mov	r0, r5
 8008784:	b007      	add	sp, #28
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	250b      	movs	r5, #11
 800878a:	4628      	mov	r0, r5
 800878c:	b007      	add	sp, #28
 800878e:	bd30      	pop	{r4, r5, pc}
 8008790:	f008 ffa0 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8008794:	4605      	mov	r5, r0
 8008796:	e7f8      	b.n	800878a <rcl_init_options_fini+0x46>

08008798 <rcl_init_options_copy>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	b094      	sub	sp, #80	@ 0x50
 800879e:	2800      	cmp	r0, #0
 80087a0:	d058      	beq.n	8008854 <rcl_init_options_copy+0xbc>
 80087a2:	4604      	mov	r4, r0
 80087a4:	6800      	ldr	r0, [r0, #0]
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d054      	beq.n	8008854 <rcl_init_options_copy+0xbc>
 80087aa:	460e      	mov	r6, r1
 80087ac:	f7ff faf8 	bl	8007da0 <rcutils_allocator_is_valid>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d04f      	beq.n	8008854 <rcl_init_options_copy+0xbc>
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	d04d      	beq.n	8008854 <rcl_init_options_copy+0xbc>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	b123      	cbz	r3, 80087c6 <rcl_init_options_copy+0x2e>
 80087bc:	2464      	movs	r4, #100	@ 0x64
 80087be:	4620      	mov	r0, r4
 80087c0:	b014      	add	sp, #80	@ 0x50
 80087c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c6:	6827      	ldr	r7, [r4, #0]
 80087c8:	46bc      	mov	ip, r7
 80087ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80087ce:	ad0f      	add	r5, sp, #60	@ 0x3c
 80087d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087d2:	f8dc 3000 	ldr.w	r3, [ip]
 80087d6:	f8d7 8000 	ldr.w	r8, [r7]
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	2050      	movs	r0, #80	@ 0x50
 80087e0:	47c0      	blx	r8
 80087e2:	4605      	mov	r5, r0
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	b3d0      	cbz	r0, 800885e <rcl_init_options_copy+0xc6>
 80087e8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80087ec:	4686      	mov	lr, r0
 80087ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80087f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80087f6:	f8dc 3000 	ldr.w	r3, [ip]
 80087fa:	f8ce 3000 	str.w	r3, [lr]
 80087fe:	4668      	mov	r0, sp
 8008800:	f002 fe0e 	bl	800b420 <rmw_get_zero_initialized_init_options>
 8008804:	46ee      	mov	lr, sp
 8008806:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800880a:	f105 0c18 	add.w	ip, r5, #24
 800880e:	6824      	ldr	r4, [r4, #0]
 8008810:	6835      	ldr	r5, [r6, #0]
 8008812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008816:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800881a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800881e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008826:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800882a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800882e:	f104 0018 	add.w	r0, r4, #24
 8008832:	f105 0118 	add.w	r1, r5, #24
 8008836:	f003 f821 	bl	800b87c <rmw_init_options_copy>
 800883a:	4604      	mov	r4, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d0be      	beq.n	80087be <rcl_init_options_copy+0x26>
 8008840:	f7ff fabc 	bl	8007dbc <rcutils_get_error_string>
 8008844:	f7ff fad0 	bl	8007de8 <rcutils_reset_error>
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff ff7b 	bl	8008744 <rcl_init_options_fini>
 800884e:	b140      	cbz	r0, 8008862 <rcl_init_options_copy+0xca>
 8008850:	4604      	mov	r4, r0
 8008852:	e7b4      	b.n	80087be <rcl_init_options_copy+0x26>
 8008854:	240b      	movs	r4, #11
 8008856:	4620      	mov	r0, r4
 8008858:	b014      	add	sp, #80	@ 0x50
 800885a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885e:	240a      	movs	r4, #10
 8008860:	e7ad      	b.n	80087be <rcl_init_options_copy+0x26>
 8008862:	4620      	mov	r0, r4
 8008864:	b014      	add	sp, #80	@ 0x50
 8008866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	f008 bf33 	b.w	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800886e:	bf00      	nop

08008870 <rcl_get_localhost_only>:
 8008870:	b510      	push	{r4, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	2300      	movs	r3, #0
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	b1b8      	cbz	r0, 80088aa <rcl_get_localhost_only+0x3a>
 800887a:	4604      	mov	r4, r0
 800887c:	a901      	add	r1, sp, #4
 800887e:	480c      	ldr	r0, [pc, #48]	@ (80088b0 <rcl_get_localhost_only+0x40>)
 8008880:	f002 fb12 	bl	800aea8 <rcutils_get_env>
 8008884:	b110      	cbz	r0, 800888c <rcl_get_localhost_only+0x1c>
 8008886:	2001      	movs	r0, #1
 8008888:	b002      	add	sp, #8
 800888a:	bd10      	pop	{r4, pc}
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	b113      	cbz	r3, 8008896 <rcl_get_localhost_only+0x26>
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	2a31      	cmp	r2, #49	@ 0x31
 8008894:	d004      	beq.n	80088a0 <rcl_get_localhost_only+0x30>
 8008896:	2302      	movs	r3, #2
 8008898:	2000      	movs	r0, #0
 800889a:	7023      	strb	r3, [r4, #0]
 800889c:	b002      	add	sp, #8
 800889e:	bd10      	pop	{r4, pc}
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f7      	bne.n	8008896 <rcl_get_localhost_only+0x26>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7f6      	b.n	8008898 <rcl_get_localhost_only+0x28>
 80088aa:	200b      	movs	r0, #11
 80088ac:	b002      	add	sp, #8
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	0801482c 	.word	0x0801482c

080088b4 <rcl_get_zero_initialized_node>:
 80088b4:	4a03      	ldr	r2, [pc, #12]	@ (80088c4 <rcl_get_zero_initialized_node+0x10>)
 80088b6:	4603      	mov	r3, r0
 80088b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80088c0:	4618      	mov	r0, r3
 80088c2:	4770      	bx	lr
 80088c4:	0801485c 	.word	0x0801485c

080088c8 <rcl_node_init>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	b0a9      	sub	sp, #164	@ 0xa4
 80088ce:	4604      	mov	r4, r0
 80088d0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80088d4:	a823      	add	r0, sp, #140	@ 0x8c
 80088d6:	460e      	mov	r6, r1
 80088d8:	4615      	mov	r5, r2
 80088da:	461f      	mov	r7, r3
 80088dc:	f009 f936 	bl	8011b4c <rcl_guard_condition_get_default_options>
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	f000 80e6 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 80088e8:	4640      	mov	r0, r8
 80088ea:	f7ff fa59 	bl	8007da0 <rcutils_allocator_is_valid>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f000 80e0 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 80088f4:	2e00      	cmp	r6, #0
 80088f6:	f000 80dd 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	f000 80da 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 8008900:	2c00      	cmp	r4, #0
 8008902:	f000 80d7 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 8008906:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	f040 80fd 	bne.w	8008b0c <rcl_node_init+0x244>
 8008912:	2f00      	cmp	r7, #0
 8008914:	f000 80ce 	beq.w	8008ab4 <rcl_node_init+0x1ec>
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fd41 	bl	80083a0 <rcl_context_is_valid>
 800891e:	4682      	mov	sl, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	f000 80cd 	beq.w	8008ac0 <rcl_node_init+0x1f8>
 8008926:	464a      	mov	r2, r9
 8008928:	a922      	add	r1, sp, #136	@ 0x88
 800892a:	4630      	mov	r0, r6
 800892c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8008930:	f002 fe94 	bl	800b65c <rmw_validate_node_name>
 8008934:	4681      	mov	r9, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	f040 80be 	bne.w	8008ab8 <rcl_node_init+0x1f0>
 800893c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800893e:	2800      	cmp	r0, #0
 8008940:	f040 80f0 	bne.w	8008b24 <rcl_node_init+0x25c>
 8008944:	4628      	mov	r0, r5
 8008946:	f7f7 fc55 	bl	80001f4 <strlen>
 800894a:	2800      	cmp	r0, #0
 800894c:	f040 80bb 	bne.w	8008ac6 <rcl_node_init+0x1fe>
 8008950:	4d7c      	ldr	r5, [pc, #496]	@ (8008b44 <rcl_node_init+0x27c>)
 8008952:	a922      	add	r1, sp, #136	@ 0x88
 8008954:	2200      	movs	r2, #0
 8008956:	4628      	mov	r0, r5
 8008958:	f002 fe62 	bl	800b620 <rmw_validate_namespace>
 800895c:	4681      	mov	r9, r0
 800895e:	2800      	cmp	r0, #0
 8008960:	f040 80aa 	bne.w	8008ab8 <rcl_node_init+0x1f0>
 8008964:	4682      	mov	sl, r0
 8008966:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8008968:	2800      	cmp	r0, #0
 800896a:	f040 80e0 	bne.w	8008b2e <rcl_node_init+0x266>
 800896e:	f8d8 3000 	ldr.w	r3, [r8]
 8008972:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008976:	2078      	movs	r0, #120	@ 0x78
 8008978:	4798      	blx	r3
 800897a:	4681      	mov	r9, r0
 800897c:	6060      	str	r0, [r4, #4]
 800897e:	2800      	cmp	r0, #0
 8008980:	f000 80ca 	beq.w	8008b18 <rcl_node_init+0x250>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800898c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8008990:	a808      	add	r0, sp, #32
 8008992:	f000 f907 	bl	8008ba4 <rcl_node_get_default_options>
 8008996:	a908      	add	r1, sp, #32
 8008998:	4648      	mov	r0, r9
 800899a:	2268      	movs	r2, #104	@ 0x68
 800899c:	f00a ff5f 	bl	801385e <memcpy>
 80089a0:	6861      	ldr	r1, [r4, #4]
 80089a2:	6027      	str	r7, [r4, #0]
 80089a4:	4640      	mov	r0, r8
 80089a6:	f000 f90b 	bl	8008bc0 <rcl_node_options_copy>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d158      	bne.n	8008a60 <rcl_node_init+0x198>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f7f7 fc20 	bl	80001f4 <strlen>
 80089b4:	4428      	add	r0, r5
 80089b6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80089ba:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80089be:	2b2f      	cmp	r3, #47	@ 0x2f
 80089c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	bf0c      	ite	eq
 80089c8:	4b5f      	ldreq	r3, [pc, #380]	@ (8008b48 <rcl_node_init+0x280>)
 80089ca:	4b60      	ldrne	r3, [pc, #384]	@ (8008b4c <rcl_node_init+0x284>)
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80089d8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80089dc:	f002 fa8c 	bl	800aef8 <rcutils_format_string_limit>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	4631      	mov	r1, r6
 80089ea:	3028      	adds	r0, #40	@ 0x28
 80089ec:	462a      	mov	r2, r5
 80089ee:	6866      	ldr	r6, [r4, #4]
 80089f0:	f003 f9b6 	bl	800bd60 <rmw_create_node>
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	66b0      	str	r0, [r6, #104]	@ 0x68
 80089f8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d032      	beq.n	8008a64 <rcl_node_init+0x19c>
 80089fe:	f003 fa43 	bl	800be88 <rmw_node_get_graph_guard_condition>
 8008a02:	4681      	mov	r9, r0
 8008a04:	b360      	cbz	r0, 8008a60 <rcl_node_init+0x198>
 8008a06:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008a0e:	6866      	ldr	r6, [r4, #4]
 8008a10:	2008      	movs	r0, #8
 8008a12:	4798      	blx	r3
 8008a14:	6863      	ldr	r3, [r4, #4]
 8008a16:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8008a18:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8008a1c:	f1bb 0f00 	cmp.w	fp, #0
 8008a20:	d020      	beq.n	8008a64 <rcl_node_init+0x19c>
 8008a22:	a806      	add	r0, sp, #24
 8008a24:	f009 f802 	bl	8011a2c <rcl_get_zero_initialized_guard_condition>
 8008a28:	a806      	add	r0, sp, #24
 8008a2a:	c803      	ldmia	r0, {r0, r1}
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	46c4      	mov	ip, r8
 8008a30:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8008a34:	e88b 0003 	stmia.w	fp, {r0, r1}
 8008a38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008a3c:	ae23      	add	r6, sp, #140	@ 0x8c
 8008a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008a40:	f8dc 3000 	ldr.w	r3, [ip]
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	ab28      	add	r3, sp, #160	@ 0xa0
 8008a48:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8008a4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008a50:	4649      	mov	r1, r9
 8008a52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a54:	463a      	mov	r2, r7
 8008a56:	4670      	mov	r0, lr
 8008a58:	f008 fff2 	bl	8011a40 <rcl_guard_condition_init_from_rmw>
 8008a5c:	4681      	mov	r9, r0
 8008a5e:	b328      	cbz	r0, 8008aac <rcl_node_init+0x1e4>
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	b1f3      	cbz	r3, 8008aa2 <rcl_node_init+0x1da>
 8008a64:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008a66:	b128      	cbz	r0, 8008a74 <rcl_node_init+0x1ac>
 8008a68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a6c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008a70:	4798      	blx	r3
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8008a76:	b110      	cbz	r0, 8008a7e <rcl_node_init+0x1b6>
 8008a78:	f003 f98a 	bl	800bd90 <rmw_destroy_node>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8008a80:	b148      	cbz	r0, 8008a96 <rcl_node_init+0x1ce>
 8008a82:	f009 f83d 	bl	8011b00 <rcl_guard_condition_fini>
 8008a86:	6863      	ldr	r3, [r4, #4]
 8008a88:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008a8c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8008a8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a92:	4798      	blx	r3
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008aa0:	4798      	blx	r3
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e9c4 3300 	strd	r3, r3, [r4]
 8008aa8:	f04f 0901 	mov.w	r9, #1
 8008aac:	f1ba 0f00 	cmp.w	sl, #0
 8008ab0:	d125      	bne.n	8008afe <rcl_node_init+0x236>
 8008ab2:	e001      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008ab4:	f04f 090b 	mov.w	r9, #11
 8008ab8:	4648      	mov	r0, r9
 8008aba:	b029      	add	sp, #164	@ 0xa4
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8008ac4:	e7f8      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008ac6:	782b      	ldrb	r3, [r5, #0]
 8008ac8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008aca:	f43f af42 	beq.w	8008952 <rcl_node_init+0x8a>
 8008ace:	9503      	str	r5, [sp, #12]
 8008ad0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b50 <rcl_node_init+0x288>)
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8008ae4:	f002 fa08 	bl	800aef8 <rcutils_format_string_limit>
 8008ae8:	4605      	mov	r5, r0
 8008aea:	b340      	cbz	r0, 8008b3e <rcl_node_init+0x276>
 8008aec:	2200      	movs	r2, #0
 8008aee:	a922      	add	r1, sp, #136	@ 0x88
 8008af0:	9222      	str	r2, [sp, #136]	@ 0x88
 8008af2:	f002 fd95 	bl	800b620 <rmw_validate_namespace>
 8008af6:	4681      	mov	r9, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f43f af34 	beq.w	8008966 <rcl_node_init+0x9e>
 8008afe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008b06:	4628      	mov	r0, r5
 8008b08:	4798      	blx	r3
 8008b0a:	e7d5      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008b0c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8008b10:	4648      	mov	r0, r9
 8008b12:	b029      	add	sp, #164	@ 0xa4
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	f04f 090a 	mov.w	r9, #10
 8008b1c:	f1ba 0f00 	cmp.w	sl, #0
 8008b20:	d1ed      	bne.n	8008afe <rcl_node_init+0x236>
 8008b22:	e7c9      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008b24:	f002 fdec 	bl	800b700 <rmw_node_name_validation_result_string>
 8008b28:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8008b2c:	e7c4      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008b2e:	f002 fd89 	bl	800b644 <rmw_namespace_validation_result_string>
 8008b32:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8008b36:	f1ba 0f00 	cmp.w	sl, #0
 8008b3a:	d1e0      	bne.n	8008afe <rcl_node_init+0x236>
 8008b3c:	e7bc      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008b3e:	f04f 090a 	mov.w	r9, #10
 8008b42:	e7b9      	b.n	8008ab8 <rcl_node_init+0x1f0>
 8008b44:	08014844 	.word	0x08014844
 8008b48:	0801484c 	.word	0x0801484c
 8008b4c:	08014854 	.word	0x08014854
 8008b50:	08014848 	.word	0x08014848

08008b54 <rcl_node_is_valid>:
 8008b54:	b130      	cbz	r0, 8008b64 <rcl_node_is_valid+0x10>
 8008b56:	6843      	ldr	r3, [r0, #4]
 8008b58:	b123      	cbz	r3, 8008b64 <rcl_node_is_valid+0x10>
 8008b5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b5c:	b113      	cbz	r3, 8008b64 <rcl_node_is_valid+0x10>
 8008b5e:	6800      	ldr	r0, [r0, #0]
 8008b60:	f7ff bc1e 	b.w	80083a0 <rcl_context_is_valid>
 8008b64:	2000      	movs	r0, #0
 8008b66:	4770      	bx	lr

08008b68 <rcl_node_get_name>:
 8008b68:	b120      	cbz	r0, 8008b74 <rcl_node_get_name+0xc>
 8008b6a:	6840      	ldr	r0, [r0, #4]
 8008b6c:	b110      	cbz	r0, 8008b74 <rcl_node_get_name+0xc>
 8008b6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008b70:	b100      	cbz	r0, 8008b74 <rcl_node_get_name+0xc>
 8008b72:	6880      	ldr	r0, [r0, #8]
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop

08008b78 <rcl_node_get_namespace>:
 8008b78:	b120      	cbz	r0, 8008b84 <rcl_node_get_namespace+0xc>
 8008b7a:	6840      	ldr	r0, [r0, #4]
 8008b7c:	b110      	cbz	r0, 8008b84 <rcl_node_get_namespace+0xc>
 8008b7e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008b80:	b100      	cbz	r0, 8008b84 <rcl_node_get_namespace+0xc>
 8008b82:	68c0      	ldr	r0, [r0, #12]
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop

08008b88 <rcl_node_get_options>:
 8008b88:	b128      	cbz	r0, 8008b96 <rcl_node_get_options+0xe>
 8008b8a:	6840      	ldr	r0, [r0, #4]
 8008b8c:	b118      	cbz	r0, 8008b96 <rcl_node_get_options+0xe>
 8008b8e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf08      	it	eq
 8008b94:	2000      	moveq	r0, #0
 8008b96:	4770      	bx	lr

08008b98 <rcl_node_get_rmw_handle>:
 8008b98:	b110      	cbz	r0, 8008ba0 <rcl_node_get_rmw_handle+0x8>
 8008b9a:	6840      	ldr	r0, [r0, #4]
 8008b9c:	b100      	cbz	r0, 8008ba0 <rcl_node_get_rmw_handle+0x8>
 8008b9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop

08008ba4 <rcl_node_get_default_options>:
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	2268      	movs	r2, #104	@ 0x68
 8008ba8:	4604      	mov	r4, r0
 8008baa:	2100      	movs	r1, #0
 8008bac:	f00a fd8e 	bl	80136cc <memset>
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7ff f8e7 	bl	8007d84 <rcutils_get_default_allocator>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	7523      	strb	r3, [r4, #20]
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop

08008bc0 <rcl_node_options_copy>:
 8008bc0:	b1d0      	cbz	r0, 8008bf8 <rcl_node_options_copy+0x38>
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	b1a9      	cbz	r1, 8008bf4 <rcl_node_options_copy+0x34>
 8008bc8:	4288      	cmp	r0, r1
 8008bca:	4684      	mov	ip, r0
 8008bcc:	d012      	beq.n	8008bf4 <rcl_node_options_copy+0x34>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	8a86      	ldrh	r6, [r0, #20]
 8008bd2:	468e      	mov	lr, r1
 8008bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	f8ce 3000 	str.w	r3, [lr]
 8008be0:	f10c 0118 	add.w	r1, ip, #24
 8008be4:	2250      	movs	r2, #80	@ 0x50
 8008be6:	82a6      	strh	r6, [r4, #20]
 8008be8:	f104 0018 	add.w	r0, r4, #24
 8008bec:	f00a fe37 	bl	801385e <memcpy>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	200b      	movs	r0, #11
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	200b      	movs	r0, #11
 8008bfa:	4770      	bx	lr

08008bfc <rcl_node_resolve_name>:
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c02:	b091      	sub	sp, #68	@ 0x44
 8008c04:	ac1a      	add	r4, sp, #104	@ 0x68
 8008c06:	e884 000c 	stmia.w	r4, {r2, r3}
 8008c0a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d03b      	beq.n	8008c8a <rcl_node_resolve_name+0x8e>
 8008c12:	460c      	mov	r4, r1
 8008c14:	4605      	mov	r5, r0
 8008c16:	f7ff ffb7 	bl	8008b88 <rcl_node_get_options>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d037      	beq.n	8008c8e <rcl_node_resolve_name+0x92>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7ff ffa2 	bl	8008b68 <rcl_node_get_name>
 8008c24:	4606      	mov	r6, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f7ff ffa6 	bl	8008b78 <rcl_node_get_namespace>
 8008c2c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8008c30:	4681      	mov	r9, r0
 8008c32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c36:	ad0b      	add	r5, sp, #44	@ 0x2c
 8008c38:	46ac      	mov	ip, r5
 8008c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c3e:	f8de 3000 	ldr.w	r3, [lr]
 8008c42:	f8cc 3000 	str.w	r3, [ip]
 8008c46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c48:	b1fb      	cbz	r3, 8008c8a <rcl_node_resolve_name+0x8e>
 8008c4a:	468a      	mov	sl, r1
 8008c4c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8008c50:	f002 faaa 	bl	800b1a8 <rcutils_get_zero_initialized_string_map>
 8008c54:	ab10      	add	r3, sp, #64	@ 0x40
 8008c56:	9008      	str	r0, [sp, #32]
 8008c58:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008c5c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008c60:	2100      	movs	r1, #0
 8008c62:	e895 000c 	ldmia.w	r5, {r2, r3}
 8008c66:	a808      	add	r0, sp, #32
 8008c68:	f002 fb16 	bl	800b298 <rcutils_string_map_init>
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	b180      	cbz	r0, 8008c92 <rcl_node_resolve_name+0x96>
 8008c70:	f7ff f8a4 	bl	8007dbc <rcutils_get_error_string>
 8008c74:	f7ff f8b8 	bl	8007de8 <rcutils_reset_error>
 8008c78:	2f0a      	cmp	r7, #10
 8008c7a:	bf18      	it	ne
 8008c7c:	2701      	movne	r7, #1
 8008c7e:	4638      	mov	r0, r7
 8008c80:	b011      	add	sp, #68	@ 0x44
 8008c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	b002      	add	sp, #8
 8008c88:	4770      	bx	lr
 8008c8a:	270b      	movs	r7, #11
 8008c8c:	e7f7      	b.n	8008c7e <rcl_node_resolve_name+0x82>
 8008c8e:	2701      	movs	r7, #1
 8008c90:	e7f5      	b.n	8008c7e <rcl_node_resolve_name+0x82>
 8008c92:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c94:	9007      	str	r0, [sp, #28]
 8008c96:	a808      	add	r0, sp, #32
 8008c98:	f008 fec2 	bl	8011a20 <rcl_get_default_topic_name_substitutions>
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	b1a8      	cbz	r0, 8008ccc <rcl_node_resolve_name+0xd0>
 8008ca0:	280a      	cmp	r0, #10
 8008ca2:	9c07      	ldr	r4, [sp, #28]
 8008ca4:	d000      	beq.n	8008ca8 <rcl_node_resolve_name+0xac>
 8008ca6:	2701      	movs	r7, #1
 8008ca8:	a808      	add	r0, sp, #32
 8008caa:	f002 fb35 	bl	800b318 <rcutils_string_map_fini>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d13d      	bne.n	8008d2e <rcl_node_resolve_name+0x132>
 8008cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	47d0      	blx	sl
 8008cb8:	4659      	mov	r1, fp
 8008cba:	4620      	mov	r0, r4
 8008cbc:	47d0      	blx	sl
 8008cbe:	f1b8 0f00 	cmp.w	r8, #0
 8008cc2:	d0dc      	beq.n	8008c7e <rcl_node_resolve_name+0x82>
 8008cc4:	2f67      	cmp	r7, #103	@ 0x67
 8008cc6:	bf08      	it	eq
 8008cc8:	2768      	moveq	r7, #104	@ 0x68
 8008cca:	e7d8      	b.n	8008c7e <rcl_node_resolve_name+0x82>
 8008ccc:	ab09      	add	r3, sp, #36	@ 0x24
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cd2:	46ec      	mov	ip, sp
 8008cd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	f8cc 3000 	str.w	r3, [ip]
 8008cde:	464a      	mov	r2, r9
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	ab08      	add	r3, sp, #32
 8008ce6:	f008 fd3d 	bl	8011764 <rcl_expand_topic_name>
 8008cea:	4607      	mov	r7, r0
 8008cec:	b9b8      	cbnz	r0, 8008d1e <rcl_node_resolve_name+0x122>
 8008cee:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008cf0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	a90a      	add	r1, sp, #40	@ 0x28
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f002 fbce 	bl	800b498 <rmw_validate_full_topic_name>
 8008cfc:	b988      	cbnz	r0, 8008d22 <rcl_node_resolve_name+0x126>
 8008cfe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008d00:	b9d5      	cbnz	r5, 8008d38 <rcl_node_resolve_name+0x13c>
 8008d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d04:	a808      	add	r0, sp, #32
 8008d06:	601c      	str	r4, [r3, #0]
 8008d08:	f002 fb06 	bl	800b318 <rcutils_string_map_fini>
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	b1a8      	cbz	r0, 8008d3c <rcl_node_resolve_name+0x140>
 8008d10:	f7ff f854 	bl	8007dbc <rcutils_get_error_string>
 8008d14:	462c      	mov	r4, r5
 8008d16:	f7ff f867 	bl	8007de8 <rcutils_reset_error>
 8008d1a:	2701      	movs	r7, #1
 8008d1c:	e7c9      	b.n	8008cb2 <rcl_node_resolve_name+0xb6>
 8008d1e:	9c07      	ldr	r4, [sp, #28]
 8008d20:	e7c2      	b.n	8008ca8 <rcl_node_resolve_name+0xac>
 8008d22:	f7ff f84b 	bl	8007dbc <rcutils_get_error_string>
 8008d26:	2701      	movs	r7, #1
 8008d28:	f7ff f85e 	bl	8007de8 <rcutils_reset_error>
 8008d2c:	e7bc      	b.n	8008ca8 <rcl_node_resolve_name+0xac>
 8008d2e:	f7ff f845 	bl	8007dbc <rcutils_get_error_string>
 8008d32:	f7ff f859 	bl	8007de8 <rcutils_reset_error>
 8008d36:	e7bc      	b.n	8008cb2 <rcl_node_resolve_name+0xb6>
 8008d38:	2767      	movs	r7, #103	@ 0x67
 8008d3a:	e7b5      	b.n	8008ca8 <rcl_node_resolve_name+0xac>
 8008d3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d3e:	4659      	mov	r1, fp
 8008d40:	47d0      	blx	sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	4638      	mov	r0, r7
 8008d46:	47d0      	blx	sl
 8008d48:	e799      	b.n	8008c7e <rcl_node_resolve_name+0x82>
 8008d4a:	bf00      	nop

08008d4c <exact_match_lookup>:
 8008d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4e:	f102 0708 	add.w	r7, r2, #8
 8008d52:	460b      	mov	r3, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	4606      	mov	r6, r0
 8008d58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008d62:	4618      	mov	r0, r3
 8008d64:	4919      	ldr	r1, [pc, #100]	@ (8008dcc <exact_match_lookup+0x80>)
 8008d66:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008d6a:	f002 f8b7 	bl	800aedc <rcutils_join_path>
 8008d6e:	7833      	ldrb	r3, [r6, #0]
 8008d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d72:	4605      	mov	r5, r0
 8008d74:	d023      	beq.n	8008dbe <exact_match_lookup+0x72>
 8008d76:	f104 030c 	add.w	r3, r4, #12
 8008d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008d82:	1c70      	adds	r0, r6, #1
 8008d84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008d88:	f002 f8ae 	bl	800aee8 <rcutils_to_native_path>
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008d92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008d96:	4631      	mov	r1, r6
 8008d98:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f002 f89d 	bl	800aedc <rcutils_join_path>
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	6921      	ldr	r1, [r4, #16]
 8008da6:	4603      	mov	r3, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	461e      	mov	r6, r3
 8008dac:	4790      	blx	r2
 8008dae:	4628      	mov	r0, r5
 8008db0:	6863      	ldr	r3, [r4, #4]
 8008db2:	6921      	ldr	r1, [r4, #16]
 8008db4:	4798      	blx	r3
 8008db6:	4635      	mov	r5, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	b005      	add	sp, #20
 8008dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dbe:	7873      	ldrb	r3, [r6, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1d8      	bne.n	8008d76 <exact_match_lookup+0x2a>
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	b005      	add	sp, #20
 8008dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	080148a0 	.word	0x080148a0

08008dd0 <rcl_get_secure_root>:
 8008dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	b168      	cbz	r0, 8008df4 <rcl_get_secure_root+0x24>
 8008dd8:	4607      	mov	r7, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	460c      	mov	r4, r1
 8008dde:	f7fe ffdf 	bl	8007da0 <rcutils_allocator_is_valid>
 8008de2:	b138      	cbz	r0, 8008df4 <rcl_get_secure_root+0x24>
 8008de4:	2300      	movs	r3, #0
 8008de6:	482d      	ldr	r0, [pc, #180]	@ (8008e9c <rcl_get_secure_root+0xcc>)
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	a903      	add	r1, sp, #12
 8008dec:	f002 f85c 	bl	800aea8 <rcutils_get_env>
 8008df0:	4605      	mov	r5, r0
 8008df2:	b120      	cbz	r0, 8008dfe <rcl_get_secure_root+0x2e>
 8008df4:	2500      	movs	r5, #0
 8008df6:	4628      	mov	r0, r5
 8008df8:	b005      	add	sp, #20
 8008dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d0f6      	beq.n	8008df4 <rcl_get_secure_root+0x24>
 8008e06:	f104 090c 	add.w	r9, r4, #12
 8008e0a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008e0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008e12:	4618      	mov	r0, r3
 8008e14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008e18:	f002 f988 	bl	800b12c <rcutils_strdup>
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d0e8      	beq.n	8008df4 <rcl_get_secure_root+0x24>
 8008e22:	481f      	ldr	r0, [pc, #124]	@ (8008ea0 <rcl_get_secure_root+0xd0>)
 8008e24:	9503      	str	r5, [sp, #12]
 8008e26:	a903      	add	r1, sp, #12
 8008e28:	f002 f83e 	bl	800aea8 <rcutils_get_env>
 8008e2c:	b160      	cbz	r0, 8008e48 <rcl_get_secure_root+0x78>
 8008e2e:	2600      	movs	r6, #0
 8008e30:	6863      	ldr	r3, [r4, #4]
 8008e32:	6921      	ldr	r1, [r4, #16]
 8008e34:	4630      	mov	r0, r6
 8008e36:	4798      	blx	r3
 8008e38:	4640      	mov	r0, r8
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	6921      	ldr	r1, [r4, #16]
 8008e3e:	4798      	blx	r3
 8008e40:	4628      	mov	r0, r5
 8008e42:	b005      	add	sp, #20
 8008e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	781e      	ldrb	r6, [r3, #0]
 8008e4c:	b1f6      	cbz	r6, 8008e8c <rcl_get_secure_root+0xbc>
 8008e4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008e52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008e56:	4618      	mov	r0, r3
 8008e58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008e5c:	f002 f966 	bl	800b12c <rcutils_strdup>
 8008e60:	4606      	mov	r6, r0
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d0e3      	beq.n	8008e2e <rcl_get_secure_root+0x5e>
 8008e66:	4622      	mov	r2, r4
 8008e68:	4641      	mov	r1, r8
 8008e6a:	f7ff ff6f 	bl	8008d4c <exact_match_lookup>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	d0dd      	beq.n	8008e30 <rcl_get_secure_root+0x60>
 8008e74:	4628      	mov	r0, r5
 8008e76:	f002 f82f 	bl	800aed8 <rcutils_is_directory>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1d7      	bne.n	8008e30 <rcl_get_secure_root+0x60>
 8008e80:	4628      	mov	r0, r5
 8008e82:	6921      	ldr	r1, [r4, #16]
 8008e84:	461d      	mov	r5, r3
 8008e86:	6863      	ldr	r3, [r4, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	e7d1      	b.n	8008e30 <rcl_get_secure_root+0x60>
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	4641      	mov	r1, r8
 8008e92:	f7ff ff5b 	bl	8008d4c <exact_match_lookup>
 8008e96:	4605      	mov	r5, r0
 8008e98:	e7ea      	b.n	8008e70 <rcl_get_secure_root+0xa0>
 8008e9a:	bf00      	nop
 8008e9c:	080148ac 	.word	0x080148ac
 8008ea0:	080148c4 	.word	0x080148c4

08008ea4 <rcl_get_security_options_from_environment>:
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	4820      	ldr	r0, [pc, #128]	@ (8008f34 <rcl_get_security_options_from_environment+0x90>)
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	4690      	mov	r8, r2
 8008eb8:	f001 fff6 	bl	800aea8 <rcutils_get_env>
 8008ebc:	b120      	cbz	r0, 8008ec8 <rcl_get_security_options_from_environment+0x24>
 8008ebe:	2501      	movs	r5, #1
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	b002      	add	sp, #8
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec8:	491b      	ldr	r1, [pc, #108]	@ (8008f38 <rcl_get_security_options_from_environment+0x94>)
 8008eca:	4604      	mov	r4, r0
 8008ecc:	9801      	ldr	r0, [sp, #4]
 8008ece:	f7f7 f987 	bl	80001e0 <strcmp>
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b9e8      	cbnz	r0, 8008f12 <rcl_get_security_options_from_environment+0x6e>
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	d020      	beq.n	8008f20 <rcl_get_security_options_from_environment+0x7c>
 8008ede:	4817      	ldr	r0, [pc, #92]	@ (8008f3c <rcl_get_security_options_from_environment+0x98>)
 8008ee0:	a901      	add	r1, sp, #4
 8008ee2:	f001 ffe1 	bl	800aea8 <rcutils_get_env>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d1e9      	bne.n	8008ebe <rcl_get_security_options_from_environment+0x1a>
 8008eea:	4915      	ldr	r1, [pc, #84]	@ (8008f40 <rcl_get_security_options_from_environment+0x9c>)
 8008eec:	9801      	ldr	r0, [sp, #4]
 8008eee:	f7f7 f977 	bl	80001e0 <strcmp>
 8008ef2:	fab0 f080 	clz	r0, r0
 8008ef6:	0940      	lsrs	r0, r0, #5
 8008ef8:	f888 0000 	strb.w	r0, [r8]
 8008efc:	4639      	mov	r1, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff66 	bl	8008dd0 <rcl_get_secure_root>
 8008f04:	b170      	cbz	r0, 8008f24 <rcl_get_security_options_from_environment+0x80>
 8008f06:	f8c8 0004 	str.w	r0, [r8, #4]
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	b002      	add	sp, #8
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f12:	4625      	mov	r5, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f888 4000 	strb.w	r4, [r8]
 8008f1a:	b002      	add	sp, #8
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	250b      	movs	r5, #11
 8008f22:	e7cd      	b.n	8008ec0 <rcl_get_security_options_from_environment+0x1c>
 8008f24:	f898 5000 	ldrb.w	r5, [r8]
 8008f28:	f1a5 0501 	sub.w	r5, r5, #1
 8008f2c:	fab5 f585 	clz	r5, r5
 8008f30:	096d      	lsrs	r5, r5, #5
 8008f32:	e7c5      	b.n	8008ec0 <rcl_get_security_options_from_environment+0x1c>
 8008f34:	08014864 	.word	0x08014864
 8008f38:	08014878 	.word	0x08014878
 8008f3c:	08014880 	.word	0x08014880
 8008f40:	08014898 	.word	0x08014898

08008f44 <rcl_service_get_rmw_handle>:
 8008f44:	b118      	cbz	r0, 8008f4e <rcl_service_get_rmw_handle+0xa>
 8008f46:	6800      	ldr	r0, [r0, #0]
 8008f48:	b108      	cbz	r0, 8008f4e <rcl_service_get_rmw_handle+0xa>
 8008f4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8008f4e:	4770      	bx	lr

08008f50 <rcl_take_request>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	468e      	mov	lr, r1
 8008f54:	460c      	mov	r4, r1
 8008f56:	4616      	mov	r6, r2
 8008f58:	4605      	mov	r5, r0
 8008f5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008f5e:	b08c      	sub	sp, #48	@ 0x30
 8008f60:	f10d 0c18 	add.w	ip, sp, #24
 8008f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008f6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008f70:	b30d      	cbz	r5, 8008fb6 <rcl_take_request+0x66>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b1fb      	cbz	r3, 8008fb6 <rcl_take_request+0x66>
 8008f76:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8008f7a:	b1e0      	cbz	r0, 8008fb6 <rcl_take_request+0x66>
 8008f7c:	b336      	cbz	r6, 8008fcc <rcl_take_request+0x7c>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f88d 3007 	strb.w	r3, [sp, #7]
 8008f84:	4632      	mov	r2, r6
 8008f86:	f10d 0307 	add.w	r3, sp, #7
 8008f8a:	a902      	add	r1, sp, #8
 8008f8c:	f003 f822 	bl	800bfd4 <rmw_take_request>
 8008f90:	4605      	mov	r5, r0
 8008f92:	b198      	cbz	r0, 8008fbc <rcl_take_request+0x6c>
 8008f94:	280a      	cmp	r0, #10
 8008f96:	bf18      	it	ne
 8008f98:	2501      	movne	r5, #1
 8008f9a:	f10d 0e18 	add.w	lr, sp, #24
 8008f9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008fa2:	46a4      	mov	ip, r4
 8008fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008fa8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8008fac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	b00c      	add	sp, #48	@ 0x30
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8008fba:	e7ee      	b.n	8008f9a <rcl_take_request+0x4a>
 8008fbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008fc0:	f240 2359 	movw	r3, #601	@ 0x259
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	bf08      	it	eq
 8008fc8:	461d      	moveq	r5, r3
 8008fca:	e7e6      	b.n	8008f9a <rcl_take_request+0x4a>
 8008fcc:	250b      	movs	r5, #11
 8008fce:	e7e4      	b.n	8008f9a <rcl_take_request+0x4a>

08008fd0 <rcl_send_response>:
 8008fd0:	b170      	cbz	r0, 8008ff0 <rcl_send_response+0x20>
 8008fd2:	6800      	ldr	r0, [r0, #0]
 8008fd4:	b160      	cbz	r0, 8008ff0 <rcl_send_response+0x20>
 8008fd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8008fda:	b148      	cbz	r0, 8008ff0 <rcl_send_response+0x20>
 8008fdc:	b159      	cbz	r1, 8008ff6 <rcl_send_response+0x26>
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	b15a      	cbz	r2, 8008ffa <rcl_send_response+0x2a>
 8008fe2:	f003 f855 	bl	800c090 <rmw_send_response>
 8008fe6:	b110      	cbz	r0, 8008fee <rcl_send_response+0x1e>
 8008fe8:	2802      	cmp	r0, #2
 8008fea:	bf18      	it	ne
 8008fec:	2001      	movne	r0, #1
 8008fee:	bd10      	pop	{r4, pc}
 8008ff0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8008ff4:	4770      	bx	lr
 8008ff6:	200b      	movs	r0, #11
 8008ff8:	4770      	bx	lr
 8008ffa:	200b      	movs	r0, #11
 8008ffc:	bd10      	pop	{r4, pc}
 8008ffe:	bf00      	nop

08009000 <rcl_service_is_valid>:
 8009000:	b130      	cbz	r0, 8009010 <rcl_service_is_valid+0x10>
 8009002:	6800      	ldr	r0, [r0, #0]
 8009004:	b120      	cbz	r0, 8009010 <rcl_service_is_valid+0x10>
 8009006:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800900a:	3800      	subs	r0, #0
 800900c:	bf18      	it	ne
 800900e:	2001      	movne	r0, #1
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop

08009014 <rcl_get_zero_initialized_subscription>:
 8009014:	4b01      	ldr	r3, [pc, #4]	@ (800901c <rcl_get_zero_initialized_subscription+0x8>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	080148e4 	.word	0x080148e4

08009020 <rcl_subscription_init>:
 8009020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009024:	b089      	sub	sp, #36	@ 0x24
 8009026:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009028:	b1d6      	cbz	r6, 8009060 <rcl_subscription_init+0x40>
 800902a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800902e:	4604      	mov	r4, r0
 8009030:	4648      	mov	r0, r9
 8009032:	460d      	mov	r5, r1
 8009034:	4690      	mov	r8, r2
 8009036:	461f      	mov	r7, r3
 8009038:	f7fe feb2 	bl	8007da0 <rcutils_allocator_is_valid>
 800903c:	b180      	cbz	r0, 8009060 <rcl_subscription_init+0x40>
 800903e:	b17c      	cbz	r4, 8009060 <rcl_subscription_init+0x40>
 8009040:	4628      	mov	r0, r5
 8009042:	f7ff fd87 	bl	8008b54 <rcl_node_is_valid>
 8009046:	2800      	cmp	r0, #0
 8009048:	d054      	beq.n	80090f4 <rcl_subscription_init+0xd4>
 800904a:	f1b8 0f00 	cmp.w	r8, #0
 800904e:	d007      	beq.n	8009060 <rcl_subscription_init+0x40>
 8009050:	b137      	cbz	r7, 8009060 <rcl_subscription_init+0x40>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	b14b      	cbz	r3, 800906a <rcl_subscription_init+0x4a>
 8009056:	2764      	movs	r7, #100	@ 0x64
 8009058:	4638      	mov	r0, r7
 800905a:	b009      	add	sp, #36	@ 0x24
 800905c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009060:	270b      	movs	r7, #11
 8009062:	4638      	mov	r0, r7
 8009064:	b009      	add	sp, #36	@ 0x24
 8009066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800906a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800906e:	aa07      	add	r2, sp, #28
 8009070:	9205      	str	r2, [sp, #20]
 8009072:	9307      	str	r3, [sp, #28]
 8009074:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8009078:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800907c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009080:	4639      	mov	r1, r7
 8009082:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009086:	4628      	mov	r0, r5
 8009088:	f7ff fdb8 	bl	8008bfc <rcl_node_resolve_name>
 800908c:	4607      	mov	r7, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d15f      	bne.n	8009152 <rcl_subscription_init+0x132>
 8009092:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8009096:	21c8      	movs	r1, #200	@ 0xc8
 8009098:	2001      	movs	r0, #1
 800909a:	4798      	blx	r3
 800909c:	6020      	str	r0, [r4, #0]
 800909e:	2800      	cmp	r0, #0
 80090a0:	d05d      	beq.n	800915e <rcl_subscription_init+0x13e>
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7ff fd78 	bl	8008b98 <rcl_node_get_rmw_handle>
 80090a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	9a07      	ldr	r2, [sp, #28]
 80090b0:	6827      	ldr	r7, [r4, #0]
 80090b2:	4641      	mov	r1, r8
 80090b4:	4633      	mov	r3, r6
 80090b6:	f003 f8d5 	bl	800c264 <rmw_create_subscription>
 80090ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80090be:	6827      	ldr	r7, [r4, #0]
 80090c0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80090c4:	b348      	cbz	r0, 800911a <rcl_subscription_init+0xfa>
 80090c6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80090ca:	f003 f9ad 	bl	800c428 <rmw_subscription_get_actual_qos>
 80090ce:	4607      	mov	r7, r0
 80090d0:	b9a8      	cbnz	r0, 80090fe <rcl_subscription_init+0xde>
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80090d8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80090dc:	2270      	movs	r2, #112	@ 0x70
 80090de:	4631      	mov	r1, r6
 80090e0:	f00a fbbd 	bl	801385e <memcpy>
 80090e4:	9807      	ldr	r0, [sp, #28]
 80090e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80090e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80090ea:	4798      	blx	r3
 80090ec:	4638      	mov	r0, r7
 80090ee:	b009      	add	sp, #36	@ 0x24
 80090f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090f4:	27c8      	movs	r7, #200	@ 0xc8
 80090f6:	4638      	mov	r0, r7
 80090f8:	b009      	add	sp, #36	@ 0x24
 80090fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090fe:	6827      	ldr	r7, [r4, #0]
 8009100:	b32f      	cbz	r7, 800914e <rcl_subscription_init+0x12e>
 8009102:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009106:	b14b      	cbz	r3, 800911c <rcl_subscription_init+0xfc>
 8009108:	4628      	mov	r0, r5
 800910a:	f7ff fd45 	bl	8008b98 <rcl_node_get_rmw_handle>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009114:	f003 f998 	bl	800c448 <rmw_destroy_subscription>
 8009118:	6827      	ldr	r7, [r4, #0]
 800911a:	b197      	cbz	r7, 8009142 <rcl_subscription_init+0x122>
 800911c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8009120:	4628      	mov	r0, r5
 8009122:	f7fe fe3d 	bl	8007da0 <rcutils_allocator_is_valid>
 8009126:	b158      	cbz	r0, 8009140 <rcl_subscription_init+0x120>
 8009128:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800912a:	b148      	cbz	r0, 8009140 <rcl_subscription_init+0x120>
 800912c:	4629      	mov	r1, r5
 800912e:	f002 f98b 	bl	800b448 <rmw_subscription_content_filter_options_fini>
 8009132:	4605      	mov	r5, r0
 8009134:	b9b8      	cbnz	r0, 8009166 <rcl_subscription_init+0x146>
 8009136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009138:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800913a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800913c:	4798      	blx	r3
 800913e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8009140:	6827      	ldr	r7, [r4, #0]
 8009142:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009144:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009146:	4638      	mov	r0, r7
 8009148:	4798      	blx	r3
 800914a:	2300      	movs	r3, #0
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	2701      	movs	r7, #1
 8009150:	e7c8      	b.n	80090e4 <rcl_subscription_init+0xc4>
 8009152:	2867      	cmp	r0, #103	@ 0x67
 8009154:	d0c6      	beq.n	80090e4 <rcl_subscription_init+0xc4>
 8009156:	2869      	cmp	r0, #105	@ 0x69
 8009158:	d003      	beq.n	8009162 <rcl_subscription_init+0x142>
 800915a:	280a      	cmp	r0, #10
 800915c:	d1f7      	bne.n	800914e <rcl_subscription_init+0x12e>
 800915e:	270a      	movs	r7, #10
 8009160:	e7c0      	b.n	80090e4 <rcl_subscription_init+0xc4>
 8009162:	2767      	movs	r7, #103	@ 0x67
 8009164:	e7be      	b.n	80090e4 <rcl_subscription_init+0xc4>
 8009166:	f008 fab5 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800916a:	6827      	ldr	r7, [r4, #0]
 800916c:	e7e9      	b.n	8009142 <rcl_subscription_init+0x122>
 800916e:	bf00      	nop

08009170 <rcl_subscription_get_default_options>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4d14      	ldr	r5, [pc, #80]	@ (80091c4 <rcl_subscription_get_default_options+0x54>)
 8009174:	4914      	ldr	r1, [pc, #80]	@ (80091c8 <rcl_subscription_get_default_options+0x58>)
 8009176:	b08a      	sub	sp, #40	@ 0x28
 8009178:	4604      	mov	r4, r0
 800917a:	2250      	movs	r2, #80	@ 0x50
 800917c:	4628      	mov	r0, r5
 800917e:	f00a fb6e 	bl	801385e <memcpy>
 8009182:	a804      	add	r0, sp, #16
 8009184:	f7fe fdfe 	bl	8007d84 <rcutils_get_default_allocator>
 8009188:	f10d 0c10 	add.w	ip, sp, #16
 800918c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009190:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009194:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009198:	466e      	mov	r6, sp
 800919a:	f8dc 3000 	ldr.w	r3, [ip]
 800919e:	f8ce 3000 	str.w	r3, [lr]
 80091a2:	4630      	mov	r0, r6
 80091a4:	f002 f96a 	bl	800b47c <rmw_get_default_subscription_options>
 80091a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80091ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80091b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80091b4:	2270      	movs	r2, #112	@ 0x70
 80091b6:	4629      	mov	r1, r5
 80091b8:	4620      	mov	r0, r4
 80091ba:	f00a fb50 	bl	801385e <memcpy>
 80091be:	4620      	mov	r0, r4
 80091c0:	b00a      	add	sp, #40	@ 0x28
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	20008ff8 	.word	0x20008ff8
 80091c8:	080148e8 	.word	0x080148e8

080091cc <rcl_take>:
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d04a      	beq.n	8009266 <rcl_take+0x9a>
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	b0a4      	sub	sp, #144	@ 0x90
 80091da:	2800      	cmp	r0, #0
 80091dc:	d03b      	beq.n	8009256 <rcl_take+0x8a>
 80091de:	461f      	mov	r7, r3
 80091e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d036      	beq.n	8009256 <rcl_take+0x8a>
 80091e8:	460e      	mov	r6, r1
 80091ea:	2900      	cmp	r1, #0
 80091ec:	d039      	beq.n	8009262 <rcl_take+0x96>
 80091ee:	4615      	mov	r5, r2
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	d03c      	beq.n	800926e <rcl_take+0xa2>
 80091f4:	a802      	add	r0, sp, #8
 80091f6:	f002 f947 	bl	800b488 <rmw_get_zero_initialized_message_info>
 80091fa:	f10d 0c08 	add.w	ip, sp, #8
 80091fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009202:	46ae      	mov	lr, r5
 8009204:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009208:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800920c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009214:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009218:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800921c:	f04f 0800 	mov.w	r8, #0
 8009220:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009224:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	462b      	mov	r3, r5
 800922c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8009230:	9700      	str	r7, [sp, #0]
 8009232:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8009236:	4631      	mov	r1, r6
 8009238:	f003 f966 	bl	800c508 <rmw_take_with_info>
 800923c:	4603      	mov	r3, r0
 800923e:	b9c0      	cbnz	r0, 8009272 <rcl_take+0xa6>
 8009240:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8009244:	f240 1291 	movw	r2, #401	@ 0x191
 8009248:	2900      	cmp	r1, #0
 800924a:	bf08      	it	eq
 800924c:	4613      	moveq	r3, r2
 800924e:	4618      	mov	r0, r3
 8009250:	b024      	add	sp, #144	@ 0x90
 8009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009256:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800925a:	4618      	mov	r0, r3
 800925c:	b024      	add	sp, #144	@ 0x90
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009262:	230b      	movs	r3, #11
 8009264:	e7f3      	b.n	800924e <rcl_take+0x82>
 8009266:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800926a:	4618      	mov	r0, r3
 800926c:	4770      	bx	lr
 800926e:	ad14      	add	r5, sp, #80	@ 0x50
 8009270:	e7c0      	b.n	80091f4 <rcl_take+0x28>
 8009272:	f008 fa2f 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 8009276:	4603      	mov	r3, r0
 8009278:	e7e9      	b.n	800924e <rcl_take+0x82>
 800927a:	bf00      	nop

0800927c <rcl_subscription_get_rmw_handle>:
 800927c:	b118      	cbz	r0, 8009286 <rcl_subscription_get_rmw_handle+0xa>
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	b108      	cbz	r0, 8009286 <rcl_subscription_get_rmw_handle+0xa>
 8009282:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8009286:	4770      	bx	lr

08009288 <rcl_subscription_is_valid>:
 8009288:	b130      	cbz	r0, 8009298 <rcl_subscription_is_valid+0x10>
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	b120      	cbz	r0, 8009298 <rcl_subscription_is_valid+0x10>
 800928e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8009292:	3800      	subs	r0, #0
 8009294:	bf18      	it	ne
 8009296:	2001      	movne	r0, #1
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop

0800929c <rcl_get_system_time>:
 800929c:	4608      	mov	r0, r1
 800929e:	f7fe bdbf 	b.w	8007e20 <rcutils_system_time_now>
 80092a2:	bf00      	nop

080092a4 <rcl_get_steady_time>:
 80092a4:	4608      	mov	r0, r1
 80092a6:	f7fe bde3 	b.w	8007e70 <rcutils_steady_time_now>
 80092aa:	bf00      	nop

080092ac <rcl_get_ros_time>:
 80092ac:	7a03      	ldrb	r3, [r0, #8]
 80092ae:	b510      	push	{r4, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	b133      	cbz	r3, 80092c2 <rcl_get_ros_time+0x16>
 80092b4:	2105      	movs	r1, #5
 80092b6:	f001 fd53 	bl	800ad60 <__atomic_load_8>
 80092ba:	e9c4 0100 	strd	r0, r1, [r4]
 80092be:	2000      	movs	r0, #0
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c6:	4608      	mov	r0, r1
 80092c8:	f7fe bdaa 	b.w	8007e20 <rcutils_system_time_now>

080092cc <rcl_clock_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	4605      	mov	r5, r0
 80092d0:	4610      	mov	r0, r2
 80092d2:	4614      	mov	r4, r2
 80092d4:	460e      	mov	r6, r1
 80092d6:	f7fe fd63 	bl	8007da0 <rcutils_allocator_is_valid>
 80092da:	b128      	cbz	r0, 80092e8 <rcl_clock_init+0x1c>
 80092dc:	2d03      	cmp	r5, #3
 80092de:	d803      	bhi.n	80092e8 <rcl_clock_init+0x1c>
 80092e0:	e8df f005 	tbb	[pc, r5]
 80092e4:	06532e1d 	.word	0x06532e1d
 80092e8:	f04f 0c0b 	mov.w	ip, #11
 80092ec:	4660      	mov	r0, ip
 80092ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	d0f9      	beq.n	80092e8 <rcl_clock_init+0x1c>
 80092f4:	2c00      	cmp	r4, #0
 80092f6:	d0f7      	beq.n	80092e8 <rcl_clock_init+0x1c>
 80092f8:	2300      	movs	r3, #0
 80092fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80092fe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80093b4 <rcl_clock_init+0xe8>
 8009302:	6133      	str	r3, [r6, #16]
 8009304:	f106 0514 	add.w	r5, r6, #20
 8009308:	469c      	mov	ip, r3
 800930a:	2703      	movs	r7, #3
 800930c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800930e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	7037      	strb	r7, [r6, #0]
 8009316:	f8c6 e00c 	str.w	lr, [r6, #12]
 800931a:	4660      	mov	r0, ip
 800931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931e:	2e00      	cmp	r6, #0
 8009320:	d0e2      	beq.n	80092e8 <rcl_clock_init+0x1c>
 8009322:	2300      	movs	r3, #0
 8009324:	7033      	strb	r3, [r6, #0]
 8009326:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800932a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800932e:	469c      	mov	ip, r3
 8009330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009332:	f106 0514 	add.w	r5, r6, #20
 8009336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	4660      	mov	r0, ip
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009340:	2e00      	cmp	r6, #0
 8009342:	d0d1      	beq.n	80092e8 <rcl_clock_init+0x1c>
 8009344:	2c00      	cmp	r4, #0
 8009346:	d0cf      	beq.n	80092e8 <rcl_clock_init+0x1c>
 8009348:	2700      	movs	r7, #0
 800934a:	7037      	strb	r7, [r6, #0]
 800934c:	46a4      	mov	ip, r4
 800934e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009352:	f106 0514 	add.w	r5, r6, #20
 8009356:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800935a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800935e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009360:	f8dc 3000 	ldr.w	r3, [ip]
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	6921      	ldr	r1, [r4, #16]
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	2010      	movs	r0, #16
 800936c:	4798      	blx	r3
 800936e:	6130      	str	r0, [r6, #16]
 8009370:	b1d0      	cbz	r0, 80093a8 <rcl_clock_init+0xdc>
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	e9c0 2300 	strd	r2, r3, [r0]
 800937a:	2301      	movs	r3, #1
 800937c:	7207      	strb	r7, [r0, #8]
 800937e:	4a0c      	ldr	r2, [pc, #48]	@ (80093b0 <rcl_clock_init+0xe4>)
 8009380:	7033      	strb	r3, [r6, #0]
 8009382:	46bc      	mov	ip, r7
 8009384:	60f2      	str	r2, [r6, #12]
 8009386:	4660      	mov	r0, ip
 8009388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938a:	2e00      	cmp	r6, #0
 800938c:	d0ac      	beq.n	80092e8 <rcl_clock_init+0x1c>
 800938e:	2c00      	cmp	r4, #0
 8009390:	d0aa      	beq.n	80092e8 <rcl_clock_init+0x1c>
 8009392:	2300      	movs	r3, #0
 8009394:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8009398:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80093b8 <rcl_clock_init+0xec>
 800939c:	6133      	str	r3, [r6, #16]
 800939e:	f106 0514 	add.w	r5, r6, #20
 80093a2:	469c      	mov	ip, r3
 80093a4:	2702      	movs	r7, #2
 80093a6:	e7b1      	b.n	800930c <rcl_clock_init+0x40>
 80093a8:	f04f 0c0a 	mov.w	ip, #10
 80093ac:	e79e      	b.n	80092ec <rcl_clock_init+0x20>
 80093ae:	bf00      	nop
 80093b0:	080092ad 	.word	0x080092ad
 80093b4:	080092a5 	.word	0x080092a5
 80093b8:	0800929d 	.word	0x0800929d

080093bc <rcl_clock_get_now>:
 80093bc:	b140      	cbz	r0, 80093d0 <rcl_clock_get_now+0x14>
 80093be:	b139      	cbz	r1, 80093d0 <rcl_clock_get_now+0x14>
 80093c0:	7803      	ldrb	r3, [r0, #0]
 80093c2:	b11b      	cbz	r3, 80093cc <rcl_clock_get_now+0x10>
 80093c4:	68c3      	ldr	r3, [r0, #12]
 80093c6:	b10b      	cbz	r3, 80093cc <rcl_clock_get_now+0x10>
 80093c8:	6900      	ldr	r0, [r0, #16]
 80093ca:	4718      	bx	r3
 80093cc:	2001      	movs	r0, #1
 80093ce:	4770      	bx	lr
 80093d0:	200b      	movs	r0, #11
 80093d2:	4770      	bx	lr

080093d4 <rcl_timer_call>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	b087      	sub	sp, #28
 80093da:	2800      	cmp	r0, #0
 80093dc:	d06d      	beq.n	80094ba <rcl_timer_call+0xe6>
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d063      	beq.n	80094ae <rcl_timer_call+0xda>
 80093e6:	f3bf 8f5b 	dmb	ish
 80093ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093ee:	f3bf 8f5b 	dmb	ish
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d150      	bne.n	8009498 <rcl_timer_call+0xc4>
 80093f6:	6803      	ldr	r3, [r0, #0]
 80093f8:	a904      	add	r1, sp, #16
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	f7ff ffde 	bl	80093bc <rcl_clock_get_now>
 8009400:	4605      	mov	r5, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d14a      	bne.n	800949c <rcl_timer_call+0xc8>
 8009406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	db4a      	blt.n	80094a4 <rcl_timer_call+0xd0>
 800940e:	6820      	ldr	r0, [r4, #0]
 8009410:	f04f 0a05 	mov.w	sl, #5
 8009414:	f8cd a000 	str.w	sl, [sp]
 8009418:	3020      	adds	r0, #32
 800941a:	f001 fd0d 	bl	800ae38 <__atomic_exchange_8>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f3bf 8f5b 	dmb	ish
 8009424:	4680      	mov	r8, r0
 8009426:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800942a:	f3bf 8f5b 	dmb	ish
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	4689      	mov	r9, r1
 8009432:	3028      	adds	r0, #40	@ 0x28
 8009434:	4651      	mov	r1, sl
 8009436:	f001 fc93 	bl	800ad60 <__atomic_load_8>
 800943a:	4606      	mov	r6, r0
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	460f      	mov	r7, r1
 8009440:	3018      	adds	r0, #24
 8009442:	4651      	mov	r1, sl
 8009444:	f001 fc8c 	bl	800ad60 <__atomic_load_8>
 8009448:	1836      	adds	r6, r6, r0
 800944a:	4602      	mov	r2, r0
 800944c:	4682      	mov	sl, r0
 800944e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8009452:	eb47 0701 	adc.w	r7, r7, r1
 8009456:	4286      	cmp	r6, r0
 8009458:	460b      	mov	r3, r1
 800945a:	eb77 010c 	sbcs.w	r1, r7, ip
 800945e:	da04      	bge.n	800946a <rcl_timer_call+0x96>
 8009460:	ea53 0102 	orrs.w	r1, r3, r2
 8009464:	d12e      	bne.n	80094c4 <rcl_timer_call+0xf0>
 8009466:	4606      	mov	r6, r0
 8009468:	4667      	mov	r7, ip
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	2105      	movs	r1, #5
 800946e:	4632      	mov	r2, r6
 8009470:	463b      	mov	r3, r7
 8009472:	3028      	adds	r0, #40	@ 0x28
 8009474:	9100      	str	r1, [sp, #0]
 8009476:	f001 fca9 	bl	800adcc <__atomic_store_8>
 800947a:	f1bb 0f00 	cmp.w	fp, #0
 800947e:	d00d      	beq.n	800949c <rcl_timer_call+0xc8>
 8009480:	9a04      	ldr	r2, [sp, #16]
 8009482:	9b05      	ldr	r3, [sp, #20]
 8009484:	ebb2 0208 	subs.w	r2, r2, r8
 8009488:	4620      	mov	r0, r4
 800948a:	eb63 0309 	sbc.w	r3, r3, r9
 800948e:	47d8      	blx	fp
 8009490:	4628      	mov	r0, r5
 8009492:	b007      	add	sp, #28
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	f240 3521 	movw	r5, #801	@ 0x321
 800949c:	4628      	mov	r0, r5
 800949e:	b007      	add	sp, #28
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	2501      	movs	r5, #1
 80094a6:	4628      	mov	r0, r5
 80094a8:	b007      	add	sp, #28
 80094aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ae:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80094b2:	4628      	mov	r0, r5
 80094b4:	b007      	add	sp, #28
 80094b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ba:	250b      	movs	r5, #11
 80094bc:	4628      	mov	r0, r5
 80094be:	b007      	add	sp, #28
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	1b80      	subs	r0, r0, r6
 80094c6:	eb6c 0107 	sbc.w	r1, ip, r7
 80094ca:	3801      	subs	r0, #1
 80094cc:	f161 0100 	sbc.w	r1, r1, #0
 80094d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80094d4:	f7f6 feec 	bl	80002b0 <__aeabi_ldivmod>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	3001      	adds	r0, #1
 80094dc:	f141 0100 	adc.w	r1, r1, #0
 80094e0:	fb00 f303 	mul.w	r3, r0, r3
 80094e4:	fb01 330a 	mla	r3, r1, sl, r3
 80094e8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80094ec:	1986      	adds	r6, r0, r6
 80094ee:	4453      	add	r3, sl
 80094f0:	eb43 0707 	adc.w	r7, r3, r7
 80094f4:	e7b9      	b.n	800946a <rcl_timer_call+0x96>
 80094f6:	bf00      	nop

080094f8 <rcl_timer_is_ready>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	b378      	cbz	r0, 800955e <rcl_timer_is_ready+0x66>
 80094fe:	6803      	ldr	r3, [r0, #0]
 8009500:	4604      	mov	r4, r0
 8009502:	b383      	cbz	r3, 8009566 <rcl_timer_is_ready+0x6e>
 8009504:	460d      	mov	r5, r1
 8009506:	b351      	cbz	r1, 800955e <rcl_timer_is_ready+0x66>
 8009508:	f3bf 8f5b 	dmb	ish
 800950c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009510:	f3bf 8f5b 	dmb	ish
 8009514:	b953      	cbnz	r3, 800952c <rcl_timer_is_ready+0x34>
 8009516:	6803      	ldr	r3, [r0, #0]
 8009518:	4669      	mov	r1, sp
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	f7ff ff4e 	bl	80093bc <rcl_clock_get_now>
 8009520:	4606      	mov	r6, r0
 8009522:	b140      	cbz	r0, 8009536 <rcl_timer_is_ready+0x3e>
 8009524:	f240 3321 	movw	r3, #801	@ 0x321
 8009528:	4298      	cmp	r0, r3
 800952a:	d101      	bne.n	8009530 <rcl_timer_is_ready+0x38>
 800952c:	2600      	movs	r6, #0
 800952e:	702e      	strb	r6, [r5, #0]
 8009530:	4630      	mov	r0, r6
 8009532:	b002      	add	sp, #8
 8009534:	bd70      	pop	{r4, r5, r6, pc}
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	2105      	movs	r1, #5
 800953a:	3028      	adds	r0, #40	@ 0x28
 800953c:	f001 fc10 	bl	800ad60 <__atomic_load_8>
 8009540:	9b00      	ldr	r3, [sp, #0]
 8009542:	1ac0      	subs	r0, r0, r3
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	eb61 0103 	sbc.w	r1, r1, r3
 800954a:	2801      	cmp	r0, #1
 800954c:	f171 0300 	sbcs.w	r3, r1, #0
 8009550:	bfb4      	ite	lt
 8009552:	2301      	movlt	r3, #1
 8009554:	2300      	movge	r3, #0
 8009556:	4630      	mov	r0, r6
 8009558:	702b      	strb	r3, [r5, #0]
 800955a:	b002      	add	sp, #8
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	260b      	movs	r6, #11
 8009560:	4630      	mov	r0, r6
 8009562:	b002      	add	sp, #8
 8009564:	bd70      	pop	{r4, r5, r6, pc}
 8009566:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800956a:	e7e1      	b.n	8009530 <rcl_timer_is_ready+0x38>

0800956c <rcl_timer_get_time_until_next_call>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	b330      	cbz	r0, 80095c0 <rcl_timer_get_time_until_next_call+0x54>
 8009572:	6803      	ldr	r3, [r0, #0]
 8009574:	4604      	mov	r4, r0
 8009576:	b33b      	cbz	r3, 80095c8 <rcl_timer_get_time_until_next_call+0x5c>
 8009578:	460d      	mov	r5, r1
 800957a:	b309      	cbz	r1, 80095c0 <rcl_timer_get_time_until_next_call+0x54>
 800957c:	f3bf 8f5b 	dmb	ish
 8009580:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009584:	f3bf 8f5b 	dmb	ish
 8009588:	b9ab      	cbnz	r3, 80095b6 <rcl_timer_get_time_until_next_call+0x4a>
 800958a:	6803      	ldr	r3, [r0, #0]
 800958c:	4669      	mov	r1, sp
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	f7ff ff14 	bl	80093bc <rcl_clock_get_now>
 8009594:	4606      	mov	r6, r0
 8009596:	b958      	cbnz	r0, 80095b0 <rcl_timer_get_time_until_next_call+0x44>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	2105      	movs	r1, #5
 800959c:	3028      	adds	r0, #40	@ 0x28
 800959e:	f001 fbdf 	bl	800ad60 <__atomic_load_8>
 80095a2:	9b00      	ldr	r3, [sp, #0]
 80095a4:	1ac0      	subs	r0, r0, r3
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	6028      	str	r0, [r5, #0]
 80095aa:	eb61 0103 	sbc.w	r1, r1, r3
 80095ae:	6069      	str	r1, [r5, #4]
 80095b0:	4630      	mov	r0, r6
 80095b2:	b002      	add	sp, #8
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	f240 3621 	movw	r6, #801	@ 0x321
 80095ba:	4630      	mov	r0, r6
 80095bc:	b002      	add	sp, #8
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	260b      	movs	r6, #11
 80095c2:	4630      	mov	r0, r6
 80095c4:	b002      	add	sp, #8
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80095cc:	e7f0      	b.n	80095b0 <rcl_timer_get_time_until_next_call+0x44>
 80095ce:	bf00      	nop

080095d0 <rcl_timer_get_guard_condition>:
 80095d0:	b130      	cbz	r0, 80095e0 <rcl_timer_get_guard_condition+0x10>
 80095d2:	6800      	ldr	r0, [r0, #0]
 80095d4:	b120      	cbz	r0, 80095e0 <rcl_timer_get_guard_condition+0x10>
 80095d6:	68c3      	ldr	r3, [r0, #12]
 80095d8:	b10b      	cbz	r3, 80095de <rcl_timer_get_guard_condition+0xe>
 80095da:	3008      	adds	r0, #8
 80095dc:	4770      	bx	lr
 80095de:	4618      	mov	r0, r3
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop

080095e4 <rcl_validate_enclave_name_with_size>:
 80095e4:	b378      	cbz	r0, 8009646 <rcl_validate_enclave_name_with_size+0x62>
 80095e6:	b570      	push	{r4, r5, r6, lr}
 80095e8:	4615      	mov	r5, r2
 80095ea:	b0c2      	sub	sp, #264	@ 0x108
 80095ec:	b302      	cbz	r2, 8009630 <rcl_validate_enclave_name_with_size+0x4c>
 80095ee:	461e      	mov	r6, r3
 80095f0:	466a      	mov	r2, sp
 80095f2:	ab01      	add	r3, sp, #4
 80095f4:	460c      	mov	r4, r1
 80095f6:	f001 ffc5 	bl	800b584 <rmw_validate_namespace_with_size>
 80095fa:	4684      	mov	ip, r0
 80095fc:	b9e8      	cbnz	r0, 800963a <rcl_validate_enclave_name_with_size+0x56>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	b923      	cbnz	r3, 800960c <rcl_validate_enclave_name_with_size+0x28>
 8009602:	2300      	movs	r3, #0
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	4660      	mov	r0, ip
 8009608:	b042      	add	sp, #264	@ 0x108
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	2b07      	cmp	r3, #7
 800960e:	d007      	beq.n	8009620 <rcl_validate_enclave_name_with_size+0x3c>
 8009610:	1e5a      	subs	r2, r3, #1
 8009612:	2a05      	cmp	r2, #5
 8009614:	d833      	bhi.n	800967e <rcl_validate_enclave_name_with_size+0x9a>
 8009616:	e8df f002 	tbb	[pc, r2]
 800961a:	2c2f      	.short	0x2c2f
 800961c:	1a232629 	.word	0x1a232629
 8009620:	2cff      	cmp	r4, #255	@ 0xff
 8009622:	d9ee      	bls.n	8009602 <rcl_validate_enclave_name_with_size+0x1e>
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	2e00      	cmp	r6, #0
 8009628:	d0ed      	beq.n	8009606 <rcl_validate_enclave_name_with_size+0x22>
 800962a:	23fe      	movs	r3, #254	@ 0xfe
 800962c:	6033      	str	r3, [r6, #0]
 800962e:	e7ea      	b.n	8009606 <rcl_validate_enclave_name_with_size+0x22>
 8009630:	f04f 0c0b 	mov.w	ip, #11
 8009634:	4660      	mov	r0, ip
 8009636:	b042      	add	sp, #264	@ 0x108
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	f008 f84b 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 800963e:	4684      	mov	ip, r0
 8009640:	4660      	mov	r0, ip
 8009642:	b042      	add	sp, #264	@ 0x108
 8009644:	bd70      	pop	{r4, r5, r6, pc}
 8009646:	f04f 0c0b 	mov.w	ip, #11
 800964a:	4660      	mov	r0, ip
 800964c:	4770      	bx	lr
 800964e:	2306      	movs	r3, #6
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	2e00      	cmp	r6, #0
 8009654:	d0d7      	beq.n	8009606 <rcl_validate_enclave_name_with_size+0x22>
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	4660      	mov	r0, ip
 800965c:	b042      	add	sp, #264	@ 0x108
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	2305      	movs	r3, #5
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	e7f5      	b.n	8009652 <rcl_validate_enclave_name_with_size+0x6e>
 8009666:	2304      	movs	r3, #4
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	e7f2      	b.n	8009652 <rcl_validate_enclave_name_with_size+0x6e>
 800966c:	2303      	movs	r3, #3
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	e7ef      	b.n	8009652 <rcl_validate_enclave_name_with_size+0x6e>
 8009672:	2302      	movs	r3, #2
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	e7ec      	b.n	8009652 <rcl_validate_enclave_name_with_size+0x6e>
 8009678:	2301      	movs	r3, #1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	e7e9      	b.n	8009652 <rcl_validate_enclave_name_with_size+0x6e>
 800967e:	4a04      	ldr	r2, [pc, #16]	@ (8009690 <rcl_validate_enclave_name_with_size+0xac>)
 8009680:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009684:	a802      	add	r0, sp, #8
 8009686:	f001 fd25 	bl	800b0d4 <rcutils_snprintf>
 800968a:	f04f 0c01 	mov.w	ip, #1
 800968e:	e7ba      	b.n	8009606 <rcl_validate_enclave_name_with_size+0x22>
 8009690:	08014938 	.word	0x08014938

08009694 <rcl_validate_enclave_name>:
 8009694:	b168      	cbz	r0, 80096b2 <rcl_validate_enclave_name+0x1e>
 8009696:	b570      	push	{r4, r5, r6, lr}
 8009698:	460d      	mov	r5, r1
 800969a:	4616      	mov	r6, r2
 800969c:	4604      	mov	r4, r0
 800969e:	f7f6 fda9 	bl	80001f4 <strlen>
 80096a2:	4633      	mov	r3, r6
 80096a4:	4601      	mov	r1, r0
 80096a6:	462a      	mov	r2, r5
 80096a8:	4620      	mov	r0, r4
 80096aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096ae:	f7ff bf99 	b.w	80095e4 <rcl_validate_enclave_name_with_size>
 80096b2:	200b      	movs	r0, #11
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop

080096b8 <rcl_get_zero_initialized_wait_set>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	4c08      	ldr	r4, [pc, #32]	@ (80096dc <rcl_get_zero_initialized_wait_set+0x24>)
 80096bc:	4686      	mov	lr, r0
 80096be:	4684      	mov	ip, r0
 80096c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	f8cc 3000 	str.w	r3, [ip]
 80096d8:	4670      	mov	r0, lr
 80096da:	bd10      	pop	{r4, pc}
 80096dc:	08014998 	.word	0x08014998

080096e0 <rcl_wait_set_is_valid>:
 80096e0:	b118      	cbz	r0, 80096ea <rcl_wait_set_is_valid+0xa>
 80096e2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80096e4:	3800      	subs	r0, #0
 80096e6:	bf18      	it	ne
 80096e8:	2001      	movne	r0, #1
 80096ea:	4770      	bx	lr

080096ec <rcl_wait_set_fini>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f000 8095 	beq.w	8009822 <rcl_wait_set_fini+0x136>
 80096f8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80096fa:	4604      	mov	r4, r0
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	f000 808c 	beq.w	800981a <rcl_wait_set_fini+0x12e>
 8009702:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8009704:	f003 f8ee 	bl	800c8e4 <rmw_destroy_wait_set>
 8009708:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800970a:	1e06      	subs	r6, r0, #0
 800970c:	bf18      	it	ne
 800970e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8009712:	2d00      	cmp	r5, #0
 8009714:	f000 8081 	beq.w	800981a <rcl_wait_set_fini+0x12e>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800971e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009720:	2700      	movs	r7, #0
 8009722:	6067      	str	r7, [r4, #4]
 8009724:	602f      	str	r7, [r5, #0]
 8009726:	b120      	cbz	r0, 8009732 <rcl_wait_set_fini+0x46>
 8009728:	9101      	str	r1, [sp, #4]
 800972a:	47c0      	blx	r8
 800972c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800972e:	9901      	ldr	r1, [sp, #4]
 8009730:	6027      	str	r7, [r4, #0]
 8009732:	68a8      	ldr	r0, [r5, #8]
 8009734:	b120      	cbz	r0, 8009740 <rcl_wait_set_fini+0x54>
 8009736:	47c0      	blx	r8
 8009738:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800973a:	2300      	movs	r3, #0
 800973c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8009740:	68a0      	ldr	r0, [r4, #8]
 8009742:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8009744:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	f8c4 800c 	str.w	r8, [r4, #12]
 800974e:	f8c5 800c 	str.w	r8, [r5, #12]
 8009752:	b128      	cbz	r0, 8009760 <rcl_wait_set_fini+0x74>
 8009754:	47b8      	blx	r7
 8009756:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8009758:	f8c4 8008 	str.w	r8, [r4, #8]
 800975c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800975e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009760:	6968      	ldr	r0, [r5, #20]
 8009762:	f04f 0800 	mov.w	r8, #0
 8009766:	f8c5 8010 	str.w	r8, [r5, #16]
 800976a:	b128      	cbz	r0, 8009778 <rcl_wait_set_fini+0x8c>
 800976c:	47b8      	blx	r7
 800976e:	f8c5 8014 	str.w	r8, [r5, #20]
 8009772:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8009774:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8009776:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009778:	6920      	ldr	r0, [r4, #16]
 800977a:	f04f 0800 	mov.w	r8, #0
 800977e:	f8c4 8014 	str.w	r8, [r4, #20]
 8009782:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8009786:	b128      	cbz	r0, 8009794 <rcl_wait_set_fini+0xa8>
 8009788:	47b8      	blx	r7
 800978a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800978c:	f8c4 8010 	str.w	r8, [r4, #16]
 8009790:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8009792:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009794:	69a0      	ldr	r0, [r4, #24]
 8009796:	f04f 0800 	mov.w	r8, #0
 800979a:	f8c4 801c 	str.w	r8, [r4, #28]
 800979e:	f8c5 8018 	str.w	r8, [r5, #24]
 80097a2:	b128      	cbz	r0, 80097b0 <rcl_wait_set_fini+0xc4>
 80097a4:	9101      	str	r1, [sp, #4]
 80097a6:	47b8      	blx	r7
 80097a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80097aa:	9901      	ldr	r1, [sp, #4]
 80097ac:	f8c4 8018 	str.w	r8, [r4, #24]
 80097b0:	6a28      	ldr	r0, [r5, #32]
 80097b2:	b120      	cbz	r0, 80097be <rcl_wait_set_fini+0xd2>
 80097b4:	47b8      	blx	r7
 80097b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80097b8:	2300      	movs	r3, #0
 80097ba:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80097be:	6a20      	ldr	r0, [r4, #32]
 80097c0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80097c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80097c6:	2700      	movs	r7, #0
 80097c8:	6267      	str	r7, [r4, #36]	@ 0x24
 80097ca:	626f      	str	r7, [r5, #36]	@ 0x24
 80097cc:	b120      	cbz	r0, 80097d8 <rcl_wait_set_fini+0xec>
 80097ce:	9101      	str	r1, [sp, #4]
 80097d0:	47c0      	blx	r8
 80097d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80097d4:	9901      	ldr	r1, [sp, #4]
 80097d6:	6227      	str	r7, [r4, #32]
 80097d8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80097da:	b120      	cbz	r0, 80097e6 <rcl_wait_set_fini+0xfa>
 80097dc:	47c0      	blx	r8
 80097de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80097e0:	2300      	movs	r3, #0
 80097e2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80097e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80097e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80097ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80097ee:	2700      	movs	r7, #0
 80097f0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80097f2:	632f      	str	r7, [r5, #48]	@ 0x30
 80097f4:	b120      	cbz	r0, 8009800 <rcl_wait_set_fini+0x114>
 80097f6:	9101      	str	r1, [sp, #4]
 80097f8:	47c0      	blx	r8
 80097fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80097fc:	9901      	ldr	r1, [sp, #4]
 80097fe:	62a7      	str	r7, [r4, #40]	@ 0x28
 8009800:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8009802:	b120      	cbz	r0, 800980e <rcl_wait_set_fini+0x122>
 8009804:	47c0      	blx	r8
 8009806:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8009808:	2300      	movs	r3, #0
 800980a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800980e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8009810:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8009812:	4628      	mov	r0, r5
 8009814:	4798      	blx	r3
 8009816:	2300      	movs	r3, #0
 8009818:	6323      	str	r3, [r4, #48]	@ 0x30
 800981a:	4630      	mov	r0, r6
 800981c:	b002      	add	sp, #8
 800981e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009822:	260b      	movs	r6, #11
 8009824:	4630      	mov	r0, r6
 8009826:	b002      	add	sp, #8
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800982c <rcl_wait_set_add_subscription>:
 800982c:	b318      	cbz	r0, 8009876 <rcl_wait_set_add_subscription+0x4a>
 800982e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4604      	mov	r4, r0
 8009834:	b30b      	cbz	r3, 800987a <rcl_wait_set_add_subscription+0x4e>
 8009836:	b319      	cbz	r1, 8009880 <rcl_wait_set_add_subscription+0x54>
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	6840      	ldr	r0, [r0, #4]
 800983c:	4285      	cmp	r5, r0
 800983e:	d217      	bcs.n	8009870 <rcl_wait_set_add_subscription+0x44>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	1c6e      	adds	r6, r5, #1
 8009844:	601e      	str	r6, [r3, #0]
 8009846:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800984a:	b102      	cbz	r2, 800984e <rcl_wait_set_add_subscription+0x22>
 800984c:	6015      	str	r5, [r2, #0]
 800984e:	4608      	mov	r0, r1
 8009850:	f7ff fd14 	bl	800927c <rcl_subscription_get_rmw_handle>
 8009854:	b150      	cbz	r0, 800986c <rcl_wait_set_add_subscription+0x40>
 8009856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009858:	6842      	ldr	r2, [r0, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009860:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009862:	6853      	ldr	r3, [r2, #4]
 8009864:	3301      	adds	r3, #1
 8009866:	2000      	movs	r0, #0
 8009868:	6053      	str	r3, [r2, #4]
 800986a:	bd70      	pop	{r4, r5, r6, pc}
 800986c:	2001      	movs	r0, #1
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	f240 3086 	movw	r0, #902	@ 0x386
 8009874:	bd70      	pop	{r4, r5, r6, pc}
 8009876:	200b      	movs	r0, #11
 8009878:	4770      	bx	lr
 800987a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	200b      	movs	r0, #11
 8009882:	bd70      	pop	{r4, r5, r6, pc}

08009884 <rcl_wait_set_clear>:
 8009884:	2800      	cmp	r0, #0
 8009886:	d073      	beq.n	8009970 <rcl_wait_set_clear+0xec>
 8009888:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800988a:	b510      	push	{r4, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d070      	beq.n	8009974 <rcl_wait_set_clear+0xf0>
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	b138      	cbz	r0, 80098a6 <rcl_wait_set_clear+0x22>
 8009896:	6862      	ldr	r2, [r4, #4]
 8009898:	2100      	movs	r1, #0
 800989a:	0092      	lsls	r2, r2, #2
 800989c:	f009 ff16 	bl	80136cc <memset>
 80098a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	68a0      	ldr	r0, [r4, #8]
 80098a8:	b138      	cbz	r0, 80098ba <rcl_wait_set_clear+0x36>
 80098aa:	68e2      	ldr	r2, [r4, #12]
 80098ac:	2100      	movs	r1, #0
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	f009 ff0c 	bl	80136cc <memset>
 80098b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098b6:	2200      	movs	r2, #0
 80098b8:	60da      	str	r2, [r3, #12]
 80098ba:	69a0      	ldr	r0, [r4, #24]
 80098bc:	b138      	cbz	r0, 80098ce <rcl_wait_set_clear+0x4a>
 80098be:	69e2      	ldr	r2, [r4, #28]
 80098c0:	2100      	movs	r1, #0
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	f009 ff02 	bl	80136cc <memset>
 80098c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098ca:	2200      	movs	r2, #0
 80098cc:	619a      	str	r2, [r3, #24]
 80098ce:	6a20      	ldr	r0, [r4, #32]
 80098d0:	b138      	cbz	r0, 80098e2 <rcl_wait_set_clear+0x5e>
 80098d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80098d4:	2100      	movs	r1, #0
 80098d6:	0092      	lsls	r2, r2, #2
 80098d8:	f009 fef8 	bl	80136cc <memset>
 80098dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098de:	2200      	movs	r2, #0
 80098e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80098e2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80098e4:	b138      	cbz	r0, 80098f6 <rcl_wait_set_clear+0x72>
 80098e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80098e8:	2100      	movs	r1, #0
 80098ea:	0092      	lsls	r2, r2, #2
 80098ec:	f009 feee 	bl	80136cc <memset>
 80098f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098f2:	2200      	movs	r2, #0
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80098f6:	6920      	ldr	r0, [r4, #16]
 80098f8:	b138      	cbz	r0, 800990a <rcl_wait_set_clear+0x86>
 80098fa:	6962      	ldr	r2, [r4, #20]
 80098fc:	2100      	movs	r1, #0
 80098fe:	0092      	lsls	r2, r2, #2
 8009900:	f009 fee4 	bl	80136cc <memset>
 8009904:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009906:	2200      	movs	r2, #0
 8009908:	641a      	str	r2, [r3, #64]	@ 0x40
 800990a:	6898      	ldr	r0, [r3, #8]
 800990c:	b138      	cbz	r0, 800991e <rcl_wait_set_clear+0x9a>
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	2100      	movs	r1, #0
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	f009 feda 	bl	80136cc <memset>
 8009918:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800991a:	2200      	movs	r2, #0
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	6958      	ldr	r0, [r3, #20]
 8009920:	b138      	cbz	r0, 8009932 <rcl_wait_set_clear+0xae>
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	2100      	movs	r1, #0
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	f009 fed0 	bl	80136cc <memset>
 800992c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	611a      	str	r2, [r3, #16]
 8009932:	6a18      	ldr	r0, [r3, #32]
 8009934:	b138      	cbz	r0, 8009946 <rcl_wait_set_clear+0xc2>
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	2100      	movs	r1, #0
 800993a:	0092      	lsls	r2, r2, #2
 800993c:	f009 fec6 	bl	80136cc <memset>
 8009940:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009942:	2200      	movs	r2, #0
 8009944:	61da      	str	r2, [r3, #28]
 8009946:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009948:	b138      	cbz	r0, 800995a <rcl_wait_set_clear+0xd6>
 800994a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800994c:	2100      	movs	r1, #0
 800994e:	0092      	lsls	r2, r2, #2
 8009950:	f009 febc 	bl	80136cc <memset>
 8009954:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009956:	2200      	movs	r2, #0
 8009958:	629a      	str	r2, [r3, #40]	@ 0x28
 800995a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800995c:	b138      	cbz	r0, 800996e <rcl_wait_set_clear+0xea>
 800995e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009960:	2100      	movs	r1, #0
 8009962:	0092      	lsls	r2, r2, #2
 8009964:	f009 feb2 	bl	80136cc <memset>
 8009968:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800996a:	2000      	movs	r0, #0
 800996c:	6358      	str	r0, [r3, #52]	@ 0x34
 800996e:	bd10      	pop	{r4, pc}
 8009970:	200b      	movs	r0, #11
 8009972:	4770      	bx	lr
 8009974:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009978:	bd10      	pop	{r4, pc}
 800997a:	bf00      	nop

0800997c <rcl_wait_set_resize>:
 800997c:	2800      	cmp	r0, #0
 800997e:	f000 8185 	beq.w	8009c8c <rcl_wait_set_resize+0x310>
 8009982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009986:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009988:	b083      	sub	sp, #12
 800998a:	4605      	mov	r5, r0
 800998c:	2c00      	cmp	r4, #0
 800998e:	f000 817f 	beq.w	8009c90 <rcl_wait_set_resize+0x314>
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800999a:	461f      	mov	r7, r3
 800999c:	4688      	mov	r8, r1
 800999e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80099a2:	4616      	mov	r6, r2
 80099a4:	f8c0 9004 	str.w	r9, [r0, #4]
 80099a8:	f8c4 9000 	str.w	r9, [r4]
 80099ac:	2900      	cmp	r1, #0
 80099ae:	f000 80bd 	beq.w	8009b2c <rcl_wait_set_resize+0x1b0>
 80099b2:	008c      	lsls	r4, r1, #2
 80099b4:	6800      	ldr	r0, [r0, #0]
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	4652      	mov	r2, sl
 80099ba:	4621      	mov	r1, r4
 80099bc:	4798      	blx	r3
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	6028      	str	r0, [r5, #0]
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f000 80cb 	beq.w	8009b5e <rcl_wait_set_resize+0x1e2>
 80099c8:	4622      	mov	r2, r4
 80099ca:	4649      	mov	r1, r9
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	f009 fe7d 	bl	80136cc <memset>
 80099d2:	f8c5 8004 	str.w	r8, [r5, #4]
 80099d6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80099da:	9b01      	ldr	r3, [sp, #4]
 80099dc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80099e0:	f8c8 9004 	str.w	r9, [r8, #4]
 80099e4:	4652      	mov	r2, sl
 80099e6:	4621      	mov	r1, r4
 80099e8:	4798      	blx	r3
 80099ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80099ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80ac 	beq.w	8009b50 <rcl_wait_set_resize+0x1d4>
 80099f8:	4622      	mov	r2, r4
 80099fa:	4649      	mov	r1, r9
 80099fc:	4618      	mov	r0, r3
 80099fe:	f009 fe65 	bl	80136cc <memset>
 8009a02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a04:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009a08:	f04f 0800 	mov.w	r8, #0
 8009a0c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8009a10:	f8c5 800c 	str.w	r8, [r5, #12]
 8009a14:	f8c4 800c 	str.w	r8, [r4, #12]
 8009a18:	2e00      	cmp	r6, #0
 8009a1a:	f040 80a4 	bne.w	8009b66 <rcl_wait_set_resize+0x1ea>
 8009a1e:	68a8      	ldr	r0, [r5, #8]
 8009a20:	b128      	cbz	r0, 8009a2e <rcl_wait_set_resize+0xb2>
 8009a22:	4649      	mov	r1, r9
 8009a24:	4790      	blx	r2
 8009a26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a28:	60ae      	str	r6, [r5, #8]
 8009a2a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	19f6      	adds	r6, r6, r7
 8009a34:	f8c4 8010 	str.w	r8, [r4, #16]
 8009a38:	f040 80ac 	bne.w	8009b94 <rcl_wait_set_resize+0x218>
 8009a3c:	6960      	ldr	r0, [r4, #20]
 8009a3e:	b130      	cbz	r0, 8009a4e <rcl_wait_set_resize+0xd2>
 8009a40:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009a42:	4649      	mov	r1, r9
 8009a44:	4798      	blx	r3
 8009a46:	6166      	str	r6, [r4, #20]
 8009a48:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a4a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009a4e:	2600      	movs	r6, #0
 8009a50:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8009a54:	616e      	str	r6, [r5, #20]
 8009a56:	6426      	str	r6, [r4, #64]	@ 0x40
 8009a58:	2f00      	cmp	r7, #0
 8009a5a:	f040 80ad 	bne.w	8009bb8 <rcl_wait_set_resize+0x23c>
 8009a5e:	6928      	ldr	r0, [r5, #16]
 8009a60:	b138      	cbz	r0, 8009a72 <rcl_wait_set_resize+0xf6>
 8009a62:	4649      	mov	r1, r9
 8009a64:	47d0      	blx	sl
 8009a66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a68:	612f      	str	r7, [r5, #16]
 8009a6a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8009a6e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009a72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a74:	2600      	movs	r6, #0
 8009a76:	61ee      	str	r6, [r5, #28]
 8009a78:	61a6      	str	r6, [r4, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f040 80af 	bne.w	8009bde <rcl_wait_set_resize+0x262>
 8009a80:	69a8      	ldr	r0, [r5, #24]
 8009a82:	b120      	cbz	r0, 8009a8e <rcl_wait_set_resize+0x112>
 8009a84:	4649      	mov	r1, r9
 8009a86:	47d0      	blx	sl
 8009a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a8c:	61ab      	str	r3, [r5, #24]
 8009a8e:	6a20      	ldr	r0, [r4, #32]
 8009a90:	b128      	cbz	r0, 8009a9e <rcl_wait_set_resize+0x122>
 8009a92:	4649      	mov	r1, r9
 8009a94:	47d0      	blx	sl
 8009a96:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009aa0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8009aa8:	626e      	str	r6, [r5, #36]	@ 0x24
 8009aaa:	6266      	str	r6, [r4, #36]	@ 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 80b6 	beq.w	8009c1e <rcl_wait_set_resize+0x2a2>
 8009ab2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8009ab6:	6a28      	ldr	r0, [r5, #32]
 8009ab8:	463a      	mov	r2, r7
 8009aba:	4651      	mov	r1, sl
 8009abc:	47c8      	blx	r9
 8009abe:	6228      	str	r0, [r5, #32]
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d04c      	beq.n	8009b5e <rcl_wait_set_resize+0x1e2>
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	f009 fe00 	bl	80136cc <memset>
 8009acc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ad0:	626b      	str	r3, [r5, #36]	@ 0x24
 8009ad2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009ad4:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	4651      	mov	r1, sl
 8009ada:	47c8      	blx	r9
 8009adc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009ade:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8009ae0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	f000 80f0 	beq.w	8009cc8 <rcl_wait_set_resize+0x34c>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4652      	mov	r2, sl
 8009aec:	4631      	mov	r1, r6
 8009aee:	f009 fded 	bl	80136cc <memset>
 8009af2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8009af8:	2600      	movs	r6, #0
 8009afa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8009afe:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8009b00:	6326      	str	r6, [r4, #48]	@ 0x30
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 809d 	bne.w	8009c42 <rcl_wait_set_resize+0x2c6>
 8009b08:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8009b0a:	b120      	cbz	r0, 8009b16 <rcl_wait_set_resize+0x19a>
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	47c0      	blx	r8
 8009b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009b14:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009b16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8009b18:	b310      	cbz	r0, 8009b60 <rcl_wait_set_resize+0x1e4>
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	47c0      	blx	r8
 8009b1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009b20:	2000      	movs	r0, #0
 8009b22:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8009b26:	b003      	add	sp, #12
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	b120      	cbz	r0, 8009b3a <rcl_wait_set_resize+0x1be>
 8009b30:	4651      	mov	r1, sl
 8009b32:	47d8      	blx	fp
 8009b34:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009b36:	f8c5 8000 	str.w	r8, [r5]
 8009b3a:	68a0      	ldr	r0, [r4, #8]
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f af61 	beq.w	8009a04 <rcl_wait_set_resize+0x88>
 8009b42:	4651      	mov	r1, sl
 8009b44:	47d8      	blx	fp
 8009b46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8009b4e:	e759      	b.n	8009a04 <rcl_wait_set_resize+0x88>
 8009b50:	6828      	ldr	r0, [r5, #0]
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	4651      	mov	r1, sl
 8009b56:	47d8      	blx	fp
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	e9c5 3300 	strd	r3, r3, [r5]
 8009b5e:	200a      	movs	r0, #10
 8009b60:	b003      	add	sp, #12
 8009b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b66:	00b4      	lsls	r4, r6, #2
 8009b68:	68a8      	ldr	r0, [r5, #8]
 8009b6a:	464a      	mov	r2, r9
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4798      	blx	r3
 8009b70:	60a8      	str	r0, [r5, #8]
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0f3      	beq.n	8009b5e <rcl_wait_set_resize+0x1e2>
 8009b76:	4622      	mov	r2, r4
 8009b78:	4641      	mov	r1, r8
 8009b7a:	f009 fda7 	bl	80136cc <memset>
 8009b7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009b80:	60ee      	str	r6, [r5, #12]
 8009b82:	f04f 0800 	mov.w	r8, #0
 8009b86:	19f6      	adds	r6, r6, r7
 8009b88:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009b8c:	f8c4 8010 	str.w	r8, [r4, #16]
 8009b90:	f43f af54 	beq.w	8009a3c <rcl_wait_set_resize+0xc0>
 8009b94:	00b6      	lsls	r6, r6, #2
 8009b96:	464a      	mov	r2, r9
 8009b98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009b9a:	6960      	ldr	r0, [r4, #20]
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4798      	blx	r3
 8009ba0:	4681      	mov	r9, r0
 8009ba2:	6160      	str	r0, [r4, #20]
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d076      	beq.n	8009c96 <rcl_wait_set_resize+0x31a>
 8009ba8:	4632      	mov	r2, r6
 8009baa:	4641      	mov	r1, r8
 8009bac:	f009 fd8e 	bl	80136cc <memset>
 8009bb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009bb2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009bb6:	e74a      	b.n	8009a4e <rcl_wait_set_resize+0xd2>
 8009bb8:	00bc      	lsls	r4, r7, #2
 8009bba:	6928      	ldr	r0, [r5, #16]
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	47c0      	blx	r8
 8009bc2:	6128      	str	r0, [r5, #16]
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d0ca      	beq.n	8009b5e <rcl_wait_set_resize+0x1e2>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4631      	mov	r1, r6
 8009bcc:	f009 fd7e 	bl	80136cc <memset>
 8009bd0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009bd2:	616f      	str	r7, [r5, #20]
 8009bd4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8009bd8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8009bdc:	e749      	b.n	8009a72 <rcl_wait_set_resize+0xf6>
 8009bde:	009c      	lsls	r4, r3, #2
 8009be0:	69a8      	ldr	r0, [r5, #24]
 8009be2:	464a      	mov	r2, r9
 8009be4:	4621      	mov	r1, r4
 8009be6:	47c0      	blx	r8
 8009be8:	61a8      	str	r0, [r5, #24]
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d0b7      	beq.n	8009b5e <rcl_wait_set_resize+0x1e2>
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	f009 fd6b 	bl	80136cc <memset>
 8009bf6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8009bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bfa:	61eb      	str	r3, [r5, #28]
 8009bfc:	6a38      	ldr	r0, [r7, #32]
 8009bfe:	61fe      	str	r6, [r7, #28]
 8009c00:	464a      	mov	r2, r9
 8009c02:	4621      	mov	r1, r4
 8009c04:	47c0      	blx	r8
 8009c06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009c08:	6238      	str	r0, [r7, #32]
 8009c0a:	6a1f      	ldr	r7, [r3, #32]
 8009c0c:	2f00      	cmp	r7, #0
 8009c0e:	d054      	beq.n	8009cba <rcl_wait_set_resize+0x33e>
 8009c10:	4622      	mov	r2, r4
 8009c12:	4631      	mov	r1, r6
 8009c14:	4638      	mov	r0, r7
 8009c16:	f009 fd59 	bl	80136cc <memset>
 8009c1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009c1c:	e73f      	b.n	8009a9e <rcl_wait_set_resize+0x122>
 8009c1e:	6a28      	ldr	r0, [r5, #32]
 8009c20:	b120      	cbz	r0, 8009c2c <rcl_wait_set_resize+0x2b0>
 8009c22:	4639      	mov	r1, r7
 8009c24:	47c0      	blx	r8
 8009c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009c2a:	622b      	str	r3, [r5, #32]
 8009c2c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f af60 	beq.w	8009af4 <rcl_wait_set_resize+0x178>
 8009c34:	4639      	mov	r1, r7
 8009c36:	47c0      	blx	r8
 8009c38:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8009c40:	e758      	b.n	8009af4 <rcl_wait_set_resize+0x178>
 8009c42:	009c      	lsls	r4, r3, #2
 8009c44:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8009c46:	463a      	mov	r2, r7
 8009c48:	4621      	mov	r1, r4
 8009c4a:	47c8      	blx	r9
 8009c4c:	62a8      	str	r0, [r5, #40]	@ 0x28
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d085      	beq.n	8009b5e <rcl_wait_set_resize+0x1e2>
 8009c52:	4622      	mov	r2, r4
 8009c54:	4631      	mov	r1, r6
 8009c56:	f009 fd39 	bl	80136cc <memset>
 8009c5a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8009c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c60:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009c62:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8009c66:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8009c6a:	463a      	mov	r2, r7
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	47c8      	blx	r9
 8009c70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009c72:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	b36b      	cbz	r3, 8009cd6 <rcl_wait_set_resize+0x35a>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f009 fd24 	bl	80136cc <memset>
 8009c84:	4630      	mov	r0, r6
 8009c86:	b003      	add	sp, #12
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	200b      	movs	r0, #11
 8009c8e:	4770      	bx	lr
 8009c90:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009c94:	e764      	b.n	8009b60 <rcl_wait_set_resize+0x1e4>
 8009c96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009c98:	68a8      	ldr	r0, [r5, #8]
 8009c9a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c9e:	4798      	blx	r3
 8009ca0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009ca2:	6928      	ldr	r0, [r5, #16]
 8009ca4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ca6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009ca8:	f8c5 900c 	str.w	r9, [r5, #12]
 8009cac:	f8c5 9008 	str.w	r9, [r5, #8]
 8009cb0:	4790      	blx	r2
 8009cb2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8009cb6:	200a      	movs	r0, #10
 8009cb8:	e752      	b.n	8009b60 <rcl_wait_set_resize+0x1e4>
 8009cba:	69a8      	ldr	r0, [r5, #24]
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	47d0      	blx	sl
 8009cc0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8009cc4:	200a      	movs	r0, #10
 8009cc6:	e74b      	b.n	8009b60 <rcl_wait_set_resize+0x1e4>
 8009cc8:	6a28      	ldr	r0, [r5, #32]
 8009cca:	4639      	mov	r1, r7
 8009ccc:	47c0      	blx	r8
 8009cce:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8009cd2:	200a      	movs	r0, #10
 8009cd4:	e744      	b.n	8009b60 <rcl_wait_set_resize+0x1e4>
 8009cd6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	4639      	mov	r1, r7
 8009cdc:	47c0      	blx	r8
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	200a      	movs	r0, #10
 8009ce2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8009ce6:	e73b      	b.n	8009b60 <rcl_wait_set_resize+0x1e4>

08009ce8 <rcl_wait_set_init>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	4604      	mov	r4, r0
 8009cf0:	a810      	add	r0, sp, #64	@ 0x40
 8009cf2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	4690      	mov	r8, r2
 8009cfa:	4699      	mov	r9, r3
 8009cfc:	f7fe f850 	bl	8007da0 <rcutils_allocator_is_valid>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d06b      	beq.n	8009ddc <rcl_wait_set_init+0xf4>
 8009d04:	2c00      	cmp	r4, #0
 8009d06:	d069      	beq.n	8009ddc <rcl_wait_set_init+0xf4>
 8009d08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8009d0a:	b125      	cbz	r5, 8009d16 <rcl_wait_set_init+0x2e>
 8009d0c:	2564      	movs	r5, #100	@ 0x64
 8009d0e:	4628      	mov	r0, r5
 8009d10:	b004      	add	sp, #16
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	f1ba 0f00 	cmp.w	sl, #0
 8009d1a:	d05f      	beq.n	8009ddc <rcl_wait_set_init+0xf4>
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f7fe fb3f 	bl	80083a0 <rcl_context_is_valid>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d067      	beq.n	8009df6 <rcl_wait_set_init+0x10e>
 8009d26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d28:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8009d2a:	205c      	movs	r0, #92	@ 0x5c
 8009d2c:	4798      	blx	r3
 8009d2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d062      	beq.n	8009dfa <rcl_wait_set_init+0x112>
 8009d34:	4629      	mov	r1, r5
 8009d36:	225c      	movs	r2, #92	@ 0x5c
 8009d38:	f009 fcc8 	bl	80136cc <memset>
 8009d3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8009d40:	eb03 0e02 	add.w	lr, r3, r2
 8009d44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d46:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009d48:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8009d4c:	449e      	add	lr, r3
 8009d4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d52:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8009d56:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8009d5a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8009d5e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8009d62:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8009d66:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8009d6a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8009d6e:	f8da a000 	ldr.w	sl, [sl]
 8009d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d74:	44c6      	add	lr, r8
 8009d76:	f8dc 3000 	ldr.w	r3, [ip]
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8009d80:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8009d84:	f002 fda4 	bl	800c8d0 <rmw_create_wait_set>
 8009d88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d8a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8009d8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009d8e:	b350      	cbz	r0, 8009de6 <rcl_wait_set_init+0xfe>
 8009d90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	4639      	mov	r1, r7
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fdea 	bl	800997c <rcl_wait_set_resize>
 8009da8:	4605      	mov	r5, r0
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0af      	beq.n	8009d0e <rcl_wait_set_init+0x26>
 8009dae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009db0:	bb2b      	cbnz	r3, 8009dfe <rcl_wait_set_init+0x116>
 8009db2:	2600      	movs	r6, #0
 8009db4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8009db8:	9600      	str	r6, [sp, #0]
 8009dba:	4633      	mov	r3, r6
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff fddb 	bl	800997c <rcl_wait_set_resize>
 8009dc6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0a0      	beq.n	8009d0e <rcl_wait_set_init+0x26>
 8009dcc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009dce:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8009dd0:	4798      	blx	r3
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	6326      	str	r6, [r4, #48]	@ 0x30
 8009dd6:	b004      	add	sp, #16
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ddc:	250b      	movs	r5, #11
 8009dde:	4628      	mov	r0, r5
 8009de0:	b004      	add	sp, #16
 8009de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de6:	2501      	movs	r5, #1
 8009de8:	f002 fd7c 	bl	800c8e4 <rmw_destroy_wait_set>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	bf18      	it	ne
 8009df0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8009df4:	e7dd      	b.n	8009db2 <rcl_wait_set_init+0xca>
 8009df6:	2565      	movs	r5, #101	@ 0x65
 8009df8:	e789      	b.n	8009d0e <rcl_wait_set_init+0x26>
 8009dfa:	250a      	movs	r5, #10
 8009dfc:	e787      	b.n	8009d0e <rcl_wait_set_init+0x26>
 8009dfe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009e00:	e7f2      	b.n	8009de8 <rcl_wait_set_init+0x100>
 8009e02:	bf00      	nop

08009e04 <rcl_wait_set_add_guard_condition>:
 8009e04:	b318      	cbz	r0, 8009e4e <rcl_wait_set_add_guard_condition+0x4a>
 8009e06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	b30b      	cbz	r3, 8009e52 <rcl_wait_set_add_guard_condition+0x4e>
 8009e0e:	b319      	cbz	r1, 8009e58 <rcl_wait_set_add_guard_condition+0x54>
 8009e10:	68dd      	ldr	r5, [r3, #12]
 8009e12:	68c0      	ldr	r0, [r0, #12]
 8009e14:	4285      	cmp	r5, r0
 8009e16:	d217      	bcs.n	8009e48 <rcl_wait_set_add_guard_condition+0x44>
 8009e18:	68a0      	ldr	r0, [r4, #8]
 8009e1a:	1c6e      	adds	r6, r5, #1
 8009e1c:	60de      	str	r6, [r3, #12]
 8009e1e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8009e22:	b102      	cbz	r2, 8009e26 <rcl_wait_set_add_guard_condition+0x22>
 8009e24:	6015      	str	r5, [r2, #0]
 8009e26:	4608      	mov	r0, r1
 8009e28:	f007 feac 	bl	8011b84 <rcl_guard_condition_get_rmw_handle>
 8009e2c:	b150      	cbz	r0, 8009e44 <rcl_wait_set_add_guard_condition+0x40>
 8009e2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e30:	6842      	ldr	r2, [r0, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e38:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e3a:	6913      	ldr	r3, [r2, #16]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	2000      	movs	r0, #0
 8009e40:	6113      	str	r3, [r2, #16]
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	2001      	movs	r0, #1
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f240 3086 	movw	r0, #902	@ 0x386
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	200b      	movs	r0, #11
 8009e50:	4770      	bx	lr
 8009e52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	200b      	movs	r0, #11
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}

08009e5c <rcl_wait_set_add_timer>:
 8009e5c:	b328      	cbz	r0, 8009eaa <rcl_wait_set_add_timer+0x4e>
 8009e5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	4604      	mov	r4, r0
 8009e64:	b31b      	cbz	r3, 8009eae <rcl_wait_set_add_timer+0x52>
 8009e66:	b329      	cbz	r1, 8009eb4 <rcl_wait_set_add_timer+0x58>
 8009e68:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009e6a:	6965      	ldr	r5, [r4, #20]
 8009e6c:	42a8      	cmp	r0, r5
 8009e6e:	d219      	bcs.n	8009ea4 <rcl_wait_set_add_timer+0x48>
 8009e70:	6925      	ldr	r5, [r4, #16]
 8009e72:	1c46      	adds	r6, r0, #1
 8009e74:	641e      	str	r6, [r3, #64]	@ 0x40
 8009e76:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8009e7a:	b102      	cbz	r2, 8009e7e <rcl_wait_set_add_timer+0x22>
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	4608      	mov	r0, r1
 8009e80:	f7ff fba6 	bl	80095d0 <rcl_timer_get_guard_condition>
 8009e84:	b168      	cbz	r0, 8009ea2 <rcl_wait_set_add_timer+0x46>
 8009e86:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e88:	68e3      	ldr	r3, [r4, #12]
 8009e8a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	441d      	add	r5, r3
 8009e90:	f007 fe78 	bl	8011b84 <rcl_guard_condition_get_rmw_handle>
 8009e94:	b180      	cbz	r0, 8009eb8 <rcl_wait_set_add_timer+0x5c>
 8009e96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e98:	6842      	ldr	r2, [r0, #4]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	f240 3086 	movw	r0, #902	@ 0x386
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	200b      	movs	r0, #11
 8009eac:	4770      	bx	lr
 8009eae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	200b      	movs	r0, #11
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	2001      	movs	r0, #1
 8009eba:	bd70      	pop	{r4, r5, r6, pc}

08009ebc <rcl_wait_set_add_client>:
 8009ebc:	b318      	cbz	r0, 8009f06 <rcl_wait_set_add_client+0x4a>
 8009ebe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	b30b      	cbz	r3, 8009f0a <rcl_wait_set_add_client+0x4e>
 8009ec6:	b319      	cbz	r1, 8009f10 <rcl_wait_set_add_client+0x54>
 8009ec8:	699d      	ldr	r5, [r3, #24]
 8009eca:	69c0      	ldr	r0, [r0, #28]
 8009ecc:	4285      	cmp	r5, r0
 8009ece:	d217      	bcs.n	8009f00 <rcl_wait_set_add_client+0x44>
 8009ed0:	69a0      	ldr	r0, [r4, #24]
 8009ed2:	1c6e      	adds	r6, r5, #1
 8009ed4:	619e      	str	r6, [r3, #24]
 8009ed6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8009eda:	b102      	cbz	r2, 8009ede <rcl_wait_set_add_client+0x22>
 8009edc:	6015      	str	r5, [r2, #0]
 8009ede:	4608      	mov	r0, r1
 8009ee0:	f7fe f9c6 	bl	8008270 <rcl_client_get_rmw_handle>
 8009ee4:	b150      	cbz	r0, 8009efc <rcl_wait_set_add_client+0x40>
 8009ee6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009ee8:	6842      	ldr	r2, [r0, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ef0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009ef2:	69d3      	ldr	r3, [r2, #28]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	61d3      	str	r3, [r2, #28]
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	2001      	movs	r0, #1
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f240 3086 	movw	r0, #902	@ 0x386
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	200b      	movs	r0, #11
 8009f08:	4770      	bx	lr
 8009f0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	200b      	movs	r0, #11
 8009f12:	bd70      	pop	{r4, r5, r6, pc}

08009f14 <rcl_wait_set_add_service>:
 8009f14:	b318      	cbz	r0, 8009f5e <rcl_wait_set_add_service+0x4a>
 8009f16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	b30b      	cbz	r3, 8009f62 <rcl_wait_set_add_service+0x4e>
 8009f1e:	b319      	cbz	r1, 8009f68 <rcl_wait_set_add_service+0x54>
 8009f20:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8009f22:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8009f24:	4285      	cmp	r5, r0
 8009f26:	d217      	bcs.n	8009f58 <rcl_wait_set_add_service+0x44>
 8009f28:	6a20      	ldr	r0, [r4, #32]
 8009f2a:	1c6e      	adds	r6, r5, #1
 8009f2c:	625e      	str	r6, [r3, #36]	@ 0x24
 8009f2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8009f32:	b102      	cbz	r2, 8009f36 <rcl_wait_set_add_service+0x22>
 8009f34:	6015      	str	r5, [r2, #0]
 8009f36:	4608      	mov	r0, r1
 8009f38:	f7ff f804 	bl	8008f44 <rcl_service_get_rmw_handle>
 8009f3c:	b150      	cbz	r0, 8009f54 <rcl_wait_set_add_service+0x40>
 8009f3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009f40:	6842      	ldr	r2, [r0, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f48:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009f4a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	2000      	movs	r0, #0
 8009f50:	6293      	str	r3, [r2, #40]	@ 0x28
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	2001      	movs	r0, #1
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	f240 3086 	movw	r0, #902	@ 0x386
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	200b      	movs	r0, #11
 8009f60:	4770      	bx	lr
 8009f62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	200b      	movs	r0, #11
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	0000      	movs	r0, r0
	...

08009f70 <rcl_wait>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	ed2d 8b02 	vpush	{d8}
 8009f78:	b08d      	sub	sp, #52	@ 0x34
 8009f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f000 8143 	beq.w	800a20a <rcl_wait+0x29a>
 8009f84:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8009f86:	4605      	mov	r5, r0
 8009f88:	2e00      	cmp	r6, #0
 8009f8a:	f000 8112 	beq.w	800a1b2 <rcl_wait+0x242>
 8009f8e:	6843      	ldr	r3, [r0, #4]
 8009f90:	b983      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009f92:	68eb      	ldr	r3, [r5, #12]
 8009f94:	b973      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009f96:	696b      	ldr	r3, [r5, #20]
 8009f98:	b963      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009f9a:	69eb      	ldr	r3, [r5, #28]
 8009f9c:	b953      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009f9e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009fa0:	b943      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009fa2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009fa4:	b933      	cbnz	r3, 8009fb4 <rcl_wait+0x44>
 8009fa6:	f240 3085 	movw	r0, #901	@ 0x385
 8009faa:	b00d      	add	sp, #52	@ 0x34
 8009fac:	ecbd 8b02 	vpop	{d8}
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	9b05      	ldr	r3, [sp, #20]
 8009fbc:	f173 0300 	sbcs.w	r3, r3, #0
 8009fc0:	f2c0 80f0 	blt.w	800a1a4 <rcl_wait+0x234>
 8009fc4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8009fc8:	4643      	mov	r3, r8
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	f000 8133 	beq.w	800a236 <rcl_wait+0x2c6>
 8009fd0:	2400      	movs	r4, #0
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800a248 <rcl_wait+0x2d8>
 8009fd8:	46a2      	mov	sl, r4
 8009fda:	46a3      	mov	fp, r4
 8009fdc:	f240 3921 	movw	r9, #801	@ 0x321
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	e014      	b.n	800a00e <rcl_wait+0x9e>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d1e0      	bne.n	8009faa <rcl_wait+0x3a>
 8009fe8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fec:	4542      	cmp	r2, r8
 8009fee:	eb73 0107 	sbcs.w	r1, r3, r7
 8009ff2:	da03      	bge.n	8009ffc <rcl_wait+0x8c>
 8009ff4:	4690      	mov	r8, r2
 8009ff6:	461f      	mov	r7, r3
 8009ff8:	f04f 0b01 	mov.w	fp, #1
 8009ffc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8009ffe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a000:	3401      	adds	r4, #1
 800a002:	f14a 0a00 	adc.w	sl, sl, #0
 800a006:	429c      	cmp	r4, r3
 800a008:	f17a 0100 	sbcs.w	r1, sl, #0
 800a00c:	d228      	bcs.n	800a060 <rcl_wait+0xf0>
 800a00e:	6928      	ldr	r0, [r5, #16]
 800a010:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a014:	a908      	add	r1, sp, #32
 800a016:	00a6      	lsls	r6, r4, #2
 800a018:	2800      	cmp	r0, #0
 800a01a:	d0f1      	beq.n	800a000 <rcl_wait+0x90>
 800a01c:	68eb      	ldr	r3, [r5, #12]
 800a01e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800a022:	4423      	add	r3, r4
 800a024:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800a028:	f1be 0f00 	cmp.w	lr, #0
 800a02c:	d006      	beq.n	800a03c <rcl_wait+0xcc>
 800a02e:	6913      	ldr	r3, [r2, #16]
 800a030:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800a034:	3301      	adds	r3, #1
 800a036:	6113      	str	r3, [r2, #16]
 800a038:	692b      	ldr	r3, [r5, #16]
 800a03a:	5998      	ldr	r0, [r3, r6]
 800a03c:	ed8d 8b08 	vstr	d8, [sp, #32]
 800a040:	f7ff fa94 	bl	800956c <rcl_timer_get_time_until_next_call>
 800a044:	4548      	cmp	r0, r9
 800a046:	d1cd      	bne.n	8009fe4 <rcl_wait+0x74>
 800a048:	692b      	ldr	r3, [r5, #16]
 800a04a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800a04c:	2100      	movs	r1, #0
 800a04e:	5199      	str	r1, [r3, r6]
 800a050:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a052:	3401      	adds	r4, #1
 800a054:	f14a 0a00 	adc.w	sl, sl, #0
 800a058:	429c      	cmp	r4, r3
 800a05a:	f17a 0100 	sbcs.w	r1, sl, #0
 800a05e:	d3d6      	bcc.n	800a00e <rcl_wait+0x9e>
 800a060:	4616      	mov	r6, r2
 800a062:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	46d9      	mov	r9, fp
 800a06a:	f040 80a9 	bne.w	800a1c0 <rcl_wait+0x250>
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a076:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800a07a:	ab08      	add	r3, sp, #32
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800a080:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800a084:	e9cd 3200 	strd	r3, r2, [sp]
 800a088:	f106 0110 	add.w	r1, r6, #16
 800a08c:	f106 031c 	add.w	r3, r6, #28
 800a090:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800a094:	1d30      	adds	r0, r6, #4
 800a096:	f002 faa3 	bl	800c5e0 <rmw_wait>
 800a09a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a09c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a09e:	4680      	mov	r8, r0
 800a0a0:	b1ca      	cbz	r2, 800a0d6 <rcl_wait+0x166>
 800a0a2:	2400      	movs	r4, #0
 800a0a4:	4627      	mov	r7, r4
 800a0a6:	692a      	ldr	r2, [r5, #16]
 800a0a8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800a0ac:	f10d 011f 	add.w	r1, sp, #31
 800a0b0:	00a6      	lsls	r6, r4, #2
 800a0b2:	b160      	cbz	r0, 800a0ce <rcl_wait+0x15e>
 800a0b4:	f88d 701f 	strb.w	r7, [sp, #31]
 800a0b8:	f7ff fa1e 	bl	80094f8 <rcl_timer_is_ready>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f47f af74 	bne.w	8009faa <rcl_wait+0x3a>
 800a0c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800a0c6:	b90b      	cbnz	r3, 800a0cc <rcl_wait+0x15c>
 800a0c8:	692a      	ldr	r2, [r5, #16]
 800a0ca:	5193      	str	r3, [r2, r6]
 800a0cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a0ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0d0:	3401      	adds	r4, #1
 800a0d2:	42a2      	cmp	r2, r4
 800a0d4:	d8e7      	bhi.n	800a0a6 <rcl_wait+0x136>
 800a0d6:	f038 0002 	bics.w	r0, r8, #2
 800a0da:	f040 8090 	bne.w	800a1fe <rcl_wait+0x28e>
 800a0de:	686e      	ldr	r6, [r5, #4]
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	b91e      	cbnz	r6, 800a0ec <rcl_wait+0x17c>
 800a0e4:	e00d      	b.n	800a102 <rcl_wait+0x192>
 800a0e6:	3201      	adds	r2, #1
 800a0e8:	42b2      	cmp	r2, r6
 800a0ea:	d00a      	beq.n	800a102 <rcl_wait+0x192>
 800a0ec:	6899      	ldr	r1, [r3, #8]
 800a0ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d1f7      	bne.n	800a0e6 <rcl_wait+0x176>
 800a0f6:	682c      	ldr	r4, [r5, #0]
 800a0f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a0fc:	3201      	adds	r2, #1
 800a0fe:	42b2      	cmp	r2, r6
 800a100:	d1f4      	bne.n	800a0ec <rcl_wait+0x17c>
 800a102:	68ee      	ldr	r6, [r5, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	b91e      	cbnz	r6, 800a110 <rcl_wait+0x1a0>
 800a108:	e00d      	b.n	800a126 <rcl_wait+0x1b6>
 800a10a:	3201      	adds	r2, #1
 800a10c:	42b2      	cmp	r2, r6
 800a10e:	d00a      	beq.n	800a126 <rcl_wait+0x1b6>
 800a110:	6959      	ldr	r1, [r3, #20]
 800a112:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a116:	2900      	cmp	r1, #0
 800a118:	d1f7      	bne.n	800a10a <rcl_wait+0x19a>
 800a11a:	68ac      	ldr	r4, [r5, #8]
 800a11c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a120:	3201      	adds	r2, #1
 800a122:	42b2      	cmp	r2, r6
 800a124:	d1f4      	bne.n	800a110 <rcl_wait+0x1a0>
 800a126:	69ee      	ldr	r6, [r5, #28]
 800a128:	2200      	movs	r2, #0
 800a12a:	b91e      	cbnz	r6, 800a134 <rcl_wait+0x1c4>
 800a12c:	e00d      	b.n	800a14a <rcl_wait+0x1da>
 800a12e:	3201      	adds	r2, #1
 800a130:	42b2      	cmp	r2, r6
 800a132:	d00a      	beq.n	800a14a <rcl_wait+0x1da>
 800a134:	6a19      	ldr	r1, [r3, #32]
 800a136:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a13a:	2900      	cmp	r1, #0
 800a13c:	d1f7      	bne.n	800a12e <rcl_wait+0x1be>
 800a13e:	69ac      	ldr	r4, [r5, #24]
 800a140:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a144:	3201      	adds	r2, #1
 800a146:	42b2      	cmp	r2, r6
 800a148:	d1f4      	bne.n	800a134 <rcl_wait+0x1c4>
 800a14a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800a14c:	2200      	movs	r2, #0
 800a14e:	b91e      	cbnz	r6, 800a158 <rcl_wait+0x1e8>
 800a150:	e00d      	b.n	800a16e <rcl_wait+0x1fe>
 800a152:	3201      	adds	r2, #1
 800a154:	4296      	cmp	r6, r2
 800a156:	d00a      	beq.n	800a16e <rcl_wait+0x1fe>
 800a158:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a15a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a15e:	2900      	cmp	r1, #0
 800a160:	d1f7      	bne.n	800a152 <rcl_wait+0x1e2>
 800a162:	6a2c      	ldr	r4, [r5, #32]
 800a164:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a168:	3201      	adds	r2, #1
 800a16a:	4296      	cmp	r6, r2
 800a16c:	d1f4      	bne.n	800a158 <rcl_wait+0x1e8>
 800a16e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800a170:	2200      	movs	r2, #0
 800a172:	b91e      	cbnz	r6, 800a17c <rcl_wait+0x20c>
 800a174:	e00d      	b.n	800a192 <rcl_wait+0x222>
 800a176:	3201      	adds	r2, #1
 800a178:	42b2      	cmp	r2, r6
 800a17a:	d00a      	beq.n	800a192 <rcl_wait+0x222>
 800a17c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800a17e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800a182:	2900      	cmp	r1, #0
 800a184:	d1f7      	bne.n	800a176 <rcl_wait+0x206>
 800a186:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800a188:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800a18c:	3201      	adds	r2, #1
 800a18e:	42b2      	cmp	r2, r6
 800a190:	d1f4      	bne.n	800a17c <rcl_wait+0x20c>
 800a192:	f1b8 0f02 	cmp.w	r8, #2
 800a196:	f47f af08 	bne.w	8009faa <rcl_wait+0x3a>
 800a19a:	464b      	mov	r3, r9
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	bf08      	it	eq
 800a1a0:	2002      	moveq	r0, #2
 800a1a2:	e702      	b.n	8009faa <rcl_wait+0x3a>
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	d03a      	beq.n	800a21e <rcl_wait+0x2ae>
 800a1a8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a1ac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800a1b0:	e70e      	b.n	8009fd0 <rcl_wait+0x60>
 800a1b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a1b6:	b00d      	add	sp, #52	@ 0x34
 800a1b8:	ecbd 8b02 	vpop	{d8}
 800a1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	9b05      	ldr	r3, [sp, #20]
 800a1c6:	f173 0300 	sbcs.w	r3, r3, #0
 800a1ca:	db24      	blt.n	800a216 <rcl_wait+0x2a6>
 800a1cc:	2f00      	cmp	r7, #0
 800a1ce:	bfbc      	itt	lt
 800a1d0:	f04f 0800 	movlt.w	r8, #0
 800a1d4:	4647      	movlt	r7, r8
 800a1d6:	a31e      	add	r3, pc, #120	@ (adr r3, 800a250 <rcl_wait+0x2e0>)
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	4640      	mov	r0, r8
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f7f6 f866 	bl	80002b0 <__aeabi_ldivmod>
 800a1e4:	a31a      	add	r3, pc, #104	@ (adr r3, 800a250 <rcl_wait+0x2e0>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 f85d 	bl	80002b0 <__aeabi_ldivmod>
 800a1f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800a1fa:	ab08      	add	r3, sp, #32
 800a1fc:	e73e      	b.n	800a07c <rcl_wait+0x10c>
 800a1fe:	2001      	movs	r0, #1
 800a200:	b00d      	add	sp, #52	@ 0x34
 800a202:	ecbd 8b02 	vpop	{d8}
 800a206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20a:	200b      	movs	r0, #11
 800a20c:	b00d      	add	sp, #52	@ 0x34
 800a20e:	ecbd 8b02 	vpop	{d8}
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	465b      	mov	r3, fp
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1d7      	bne.n	800a1cc <rcl_wait+0x25c>
 800a21c:	e72e      	b.n	800a07c <rcl_wait+0x10c>
 800a21e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800a222:	430b      	orrs	r3, r1
 800a224:	bf08      	it	eq
 800a226:	4691      	moveq	r9, r2
 800a228:	f43f af21 	beq.w	800a06e <rcl_wait+0xfe>
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a232:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800a236:	2b01      	cmp	r3, #1
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	f173 0300 	sbcs.w	r3, r3, #0
 800a23e:	f04f 0300 	mov.w	r3, #0
 800a242:	4699      	mov	r9, r3
 800a244:	dac2      	bge.n	800a1cc <rcl_wait+0x25c>
 800a246:	e719      	b.n	800a07c <rcl_wait+0x10c>
 800a248:	ffffffff 	.word	0xffffffff
 800a24c:	7fffffff 	.word	0x7fffffff
 800a250:	3b9aca00 	.word	0x3b9aca00
 800a254:	00000000 	.word	0x00000000

0800a258 <rcl_action_take_goal_response>:
 800a258:	2800      	cmp	r0, #0
 800a25a:	d039      	beq.n	800a2d0 <rcl_action_take_goal_response+0x78>
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4604      	mov	r4, r0
 800a260:	6800      	ldr	r0, [r0, #0]
 800a262:	b380      	cbz	r0, 800a2c6 <rcl_action_take_goal_response+0x6e>
 800a264:	460d      	mov	r5, r1
 800a266:	4616      	mov	r6, r2
 800a268:	f7fe f886 	bl	8008378 <rcl_client_is_valid>
 800a26c:	b330      	cbz	r0, 800a2bc <rcl_action_take_goal_response+0x64>
 800a26e:	6820      	ldr	r0, [r4, #0]
 800a270:	3004      	adds	r0, #4
 800a272:	f7fe f881 	bl	8008378 <rcl_client_is_valid>
 800a276:	b308      	cbz	r0, 800a2bc <rcl_action_take_goal_response+0x64>
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	3008      	adds	r0, #8
 800a27c:	f7fe f87c 	bl	8008378 <rcl_client_is_valid>
 800a280:	b1e0      	cbz	r0, 800a2bc <rcl_action_take_goal_response+0x64>
 800a282:	6820      	ldr	r0, [r4, #0]
 800a284:	300c      	adds	r0, #12
 800a286:	f7fe ffff 	bl	8009288 <rcl_subscription_is_valid>
 800a28a:	b1b8      	cbz	r0, 800a2bc <rcl_action_take_goal_response+0x64>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	3010      	adds	r0, #16
 800a290:	f7fe fffa 	bl	8009288 <rcl_subscription_is_valid>
 800a294:	b190      	cbz	r0, 800a2bc <rcl_action_take_goal_response+0x64>
 800a296:	b1cd      	cbz	r5, 800a2cc <rcl_action_take_goal_response+0x74>
 800a298:	b1c6      	cbz	r6, 800a2cc <rcl_action_take_goal_response+0x74>
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	4632      	mov	r2, r6
 800a29e:	4629      	mov	r1, r5
 800a2a0:	f7fe f822 	bl	80082e8 <rcl_take_response>
 800a2a4:	b148      	cbz	r0, 800a2ba <rcl_action_take_goal_response+0x62>
 800a2a6:	280a      	cmp	r0, #10
 800a2a8:	d007      	beq.n	800a2ba <rcl_action_take_goal_response+0x62>
 800a2aa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800a2ae:	f640 0337 	movw	r3, #2103	@ 0x837
 800a2b2:	4290      	cmp	r0, r2
 800a2b4:	bf0c      	ite	eq
 800a2b6:	4618      	moveq	r0, r3
 800a2b8:	2001      	movne	r0, #1
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	f7fd fd94 	bl	8007de8 <rcutils_reset_error>
 800a2c0:	f640 0036 	movw	r0, #2102	@ 0x836
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	f640 0036 	movw	r0, #2102	@ 0x836
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	200b      	movs	r0, #11
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	f640 0036 	movw	r0, #2102	@ 0x836
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop

0800a2d8 <rcl_action_send_result_request>:
 800a2d8:	b390      	cbz	r0, 800a340 <rcl_action_send_result_request+0x68>
 800a2da:	b570      	push	{r4, r5, r6, lr}
 800a2dc:	4604      	mov	r4, r0
 800a2de:	6800      	ldr	r0, [r0, #0]
 800a2e0:	b348      	cbz	r0, 800a336 <rcl_action_send_result_request+0x5e>
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	4616      	mov	r6, r2
 800a2e6:	f7fe f847 	bl	8008378 <rcl_client_is_valid>
 800a2ea:	b1f8      	cbz	r0, 800a32c <rcl_action_send_result_request+0x54>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	3004      	adds	r0, #4
 800a2f0:	f7fe f842 	bl	8008378 <rcl_client_is_valid>
 800a2f4:	b1d0      	cbz	r0, 800a32c <rcl_action_send_result_request+0x54>
 800a2f6:	6820      	ldr	r0, [r4, #0]
 800a2f8:	3008      	adds	r0, #8
 800a2fa:	f7fe f83d 	bl	8008378 <rcl_client_is_valid>
 800a2fe:	b1a8      	cbz	r0, 800a32c <rcl_action_send_result_request+0x54>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	300c      	adds	r0, #12
 800a304:	f7fe ffc0 	bl	8009288 <rcl_subscription_is_valid>
 800a308:	b180      	cbz	r0, 800a32c <rcl_action_send_result_request+0x54>
 800a30a:	6820      	ldr	r0, [r4, #0]
 800a30c:	3010      	adds	r0, #16
 800a30e:	f7fe ffbb 	bl	8009288 <rcl_subscription_is_valid>
 800a312:	b158      	cbz	r0, 800a32c <rcl_action_send_result_request+0x54>
 800a314:	b195      	cbz	r5, 800a33c <rcl_action_send_result_request+0x64>
 800a316:	b18e      	cbz	r6, 800a33c <rcl_action_send_result_request+0x64>
 800a318:	6820      	ldr	r0, [r4, #0]
 800a31a:	4632      	mov	r2, r6
 800a31c:	4629      	mov	r1, r5
 800a31e:	3008      	adds	r0, #8
 800a320:	f7fd ffac 	bl	800827c <rcl_send_request>
 800a324:	3800      	subs	r0, #0
 800a326:	bf18      	it	ne
 800a328:	2001      	movne	r0, #1
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	f7fd fd5c 	bl	8007de8 <rcutils_reset_error>
 800a330:	f640 0036 	movw	r0, #2102	@ 0x836
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	f640 0036 	movw	r0, #2102	@ 0x836
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	200b      	movs	r0, #11
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	f640 0036 	movw	r0, #2102	@ 0x836
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop

0800a348 <rcl_action_take_result_response>:
 800a348:	2800      	cmp	r0, #0
 800a34a:	d03a      	beq.n	800a3c2 <rcl_action_take_result_response+0x7a>
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4604      	mov	r4, r0
 800a350:	6800      	ldr	r0, [r0, #0]
 800a352:	b388      	cbz	r0, 800a3b8 <rcl_action_take_result_response+0x70>
 800a354:	460d      	mov	r5, r1
 800a356:	4616      	mov	r6, r2
 800a358:	f7fe f80e 	bl	8008378 <rcl_client_is_valid>
 800a35c:	b338      	cbz	r0, 800a3ae <rcl_action_take_result_response+0x66>
 800a35e:	6820      	ldr	r0, [r4, #0]
 800a360:	3004      	adds	r0, #4
 800a362:	f7fe f809 	bl	8008378 <rcl_client_is_valid>
 800a366:	b310      	cbz	r0, 800a3ae <rcl_action_take_result_response+0x66>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	3008      	adds	r0, #8
 800a36c:	f7fe f804 	bl	8008378 <rcl_client_is_valid>
 800a370:	b1e8      	cbz	r0, 800a3ae <rcl_action_take_result_response+0x66>
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	300c      	adds	r0, #12
 800a376:	f7fe ff87 	bl	8009288 <rcl_subscription_is_valid>
 800a37a:	b1c0      	cbz	r0, 800a3ae <rcl_action_take_result_response+0x66>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	3010      	adds	r0, #16
 800a380:	f7fe ff82 	bl	8009288 <rcl_subscription_is_valid>
 800a384:	b198      	cbz	r0, 800a3ae <rcl_action_take_result_response+0x66>
 800a386:	b1d5      	cbz	r5, 800a3be <rcl_action_take_result_response+0x76>
 800a388:	b1ce      	cbz	r6, 800a3be <rcl_action_take_result_response+0x76>
 800a38a:	6820      	ldr	r0, [r4, #0]
 800a38c:	4632      	mov	r2, r6
 800a38e:	4629      	mov	r1, r5
 800a390:	3008      	adds	r0, #8
 800a392:	f7fd ffa9 	bl	80082e8 <rcl_take_response>
 800a396:	b148      	cbz	r0, 800a3ac <rcl_action_take_result_response+0x64>
 800a398:	280a      	cmp	r0, #10
 800a39a:	d007      	beq.n	800a3ac <rcl_action_take_result_response+0x64>
 800a39c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800a3a0:	f640 0337 	movw	r3, #2103	@ 0x837
 800a3a4:	4290      	cmp	r0, r2
 800a3a6:	bf0c      	ite	eq
 800a3a8:	4618      	moveq	r0, r3
 800a3aa:	2001      	movne	r0, #1
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	f7fd fd1b 	bl	8007de8 <rcutils_reset_error>
 800a3b2:	f640 0036 	movw	r0, #2102	@ 0x836
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	f640 0036 	movw	r0, #2102	@ 0x836
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	200b      	movs	r0, #11
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	f640 0036 	movw	r0, #2102	@ 0x836
 800a3c6:	4770      	bx	lr

0800a3c8 <rcl_action_take_cancel_response>:
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d03a      	beq.n	800a442 <rcl_action_take_cancel_response+0x7a>
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	6800      	ldr	r0, [r0, #0]
 800a3d2:	b388      	cbz	r0, 800a438 <rcl_action_take_cancel_response+0x70>
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	4616      	mov	r6, r2
 800a3d8:	f7fd ffce 	bl	8008378 <rcl_client_is_valid>
 800a3dc:	b338      	cbz	r0, 800a42e <rcl_action_take_cancel_response+0x66>
 800a3de:	6820      	ldr	r0, [r4, #0]
 800a3e0:	3004      	adds	r0, #4
 800a3e2:	f7fd ffc9 	bl	8008378 <rcl_client_is_valid>
 800a3e6:	b310      	cbz	r0, 800a42e <rcl_action_take_cancel_response+0x66>
 800a3e8:	6820      	ldr	r0, [r4, #0]
 800a3ea:	3008      	adds	r0, #8
 800a3ec:	f7fd ffc4 	bl	8008378 <rcl_client_is_valid>
 800a3f0:	b1e8      	cbz	r0, 800a42e <rcl_action_take_cancel_response+0x66>
 800a3f2:	6820      	ldr	r0, [r4, #0]
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	f7fe ff47 	bl	8009288 <rcl_subscription_is_valid>
 800a3fa:	b1c0      	cbz	r0, 800a42e <rcl_action_take_cancel_response+0x66>
 800a3fc:	6820      	ldr	r0, [r4, #0]
 800a3fe:	3010      	adds	r0, #16
 800a400:	f7fe ff42 	bl	8009288 <rcl_subscription_is_valid>
 800a404:	b198      	cbz	r0, 800a42e <rcl_action_take_cancel_response+0x66>
 800a406:	b1d5      	cbz	r5, 800a43e <rcl_action_take_cancel_response+0x76>
 800a408:	b1ce      	cbz	r6, 800a43e <rcl_action_take_cancel_response+0x76>
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	4632      	mov	r2, r6
 800a40e:	4629      	mov	r1, r5
 800a410:	3004      	adds	r0, #4
 800a412:	f7fd ff69 	bl	80082e8 <rcl_take_response>
 800a416:	b148      	cbz	r0, 800a42c <rcl_action_take_cancel_response+0x64>
 800a418:	280a      	cmp	r0, #10
 800a41a:	d007      	beq.n	800a42c <rcl_action_take_cancel_response+0x64>
 800a41c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800a420:	f640 0337 	movw	r3, #2103	@ 0x837
 800a424:	4290      	cmp	r0, r2
 800a426:	bf0c      	ite	eq
 800a428:	4618      	moveq	r0, r3
 800a42a:	2001      	movne	r0, #1
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
 800a42e:	f7fd fcdb 	bl	8007de8 <rcutils_reset_error>
 800a432:	f640 0036 	movw	r0, #2102	@ 0x836
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	f640 0036 	movw	r0, #2102	@ 0x836
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
 800a43e:	200b      	movs	r0, #11
 800a440:	bd70      	pop	{r4, r5, r6, pc}
 800a442:	f640 0036 	movw	r0, #2102	@ 0x836
 800a446:	4770      	bx	lr

0800a448 <rcl_action_take_feedback>:
 800a448:	2800      	cmp	r0, #0
 800a44a:	d038      	beq.n	800a4be <rcl_action_take_feedback+0x76>
 800a44c:	b530      	push	{r4, r5, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	6800      	ldr	r0, [r0, #0]
 800a452:	b091      	sub	sp, #68	@ 0x44
 800a454:	b378      	cbz	r0, 800a4b6 <rcl_action_take_feedback+0x6e>
 800a456:	460d      	mov	r5, r1
 800a458:	f7fd ff8e 	bl	8008378 <rcl_client_is_valid>
 800a45c:	b328      	cbz	r0, 800a4aa <rcl_action_take_feedback+0x62>
 800a45e:	6820      	ldr	r0, [r4, #0]
 800a460:	3004      	adds	r0, #4
 800a462:	f7fd ff89 	bl	8008378 <rcl_client_is_valid>
 800a466:	b300      	cbz	r0, 800a4aa <rcl_action_take_feedback+0x62>
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	3008      	adds	r0, #8
 800a46c:	f7fd ff84 	bl	8008378 <rcl_client_is_valid>
 800a470:	b1d8      	cbz	r0, 800a4aa <rcl_action_take_feedback+0x62>
 800a472:	6820      	ldr	r0, [r4, #0]
 800a474:	300c      	adds	r0, #12
 800a476:	f7fe ff07 	bl	8009288 <rcl_subscription_is_valid>
 800a47a:	b1b0      	cbz	r0, 800a4aa <rcl_action_take_feedback+0x62>
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	3010      	adds	r0, #16
 800a480:	f7fe ff02 	bl	8009288 <rcl_subscription_is_valid>
 800a484:	b188      	cbz	r0, 800a4aa <rcl_action_take_feedback+0x62>
 800a486:	b1ed      	cbz	r5, 800a4c4 <rcl_action_take_feedback+0x7c>
 800a488:	6820      	ldr	r0, [r4, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	466a      	mov	r2, sp
 800a48e:	4629      	mov	r1, r5
 800a490:	300c      	adds	r0, #12
 800a492:	f7fe fe9b 	bl	80091cc <rcl_take>
 800a496:	b160      	cbz	r0, 800a4b2 <rcl_action_take_feedback+0x6a>
 800a498:	f240 1391 	movw	r3, #401	@ 0x191
 800a49c:	4298      	cmp	r0, r3
 800a49e:	d014      	beq.n	800a4ca <rcl_action_take_feedback+0x82>
 800a4a0:	280a      	cmp	r0, #10
 800a4a2:	bf18      	it	ne
 800a4a4:	2001      	movne	r0, #1
 800a4a6:	b011      	add	sp, #68	@ 0x44
 800a4a8:	bd30      	pop	{r4, r5, pc}
 800a4aa:	f7fd fc9d 	bl	8007de8 <rcutils_reset_error>
 800a4ae:	f640 0036 	movw	r0, #2102	@ 0x836
 800a4b2:	b011      	add	sp, #68	@ 0x44
 800a4b4:	bd30      	pop	{r4, r5, pc}
 800a4b6:	f640 0036 	movw	r0, #2102	@ 0x836
 800a4ba:	b011      	add	sp, #68	@ 0x44
 800a4bc:	bd30      	pop	{r4, r5, pc}
 800a4be:	f640 0036 	movw	r0, #2102	@ 0x836
 800a4c2:	4770      	bx	lr
 800a4c4:	200b      	movs	r0, #11
 800a4c6:	b011      	add	sp, #68	@ 0x44
 800a4c8:	bd30      	pop	{r4, r5, pc}
 800a4ca:	f640 0037 	movw	r0, #2103	@ 0x837
 800a4ce:	e7f0      	b.n	800a4b2 <rcl_action_take_feedback+0x6a>

0800a4d0 <rcl_action_wait_set_add_action_client>:
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d048      	beq.n	800a566 <rcl_action_wait_set_add_action_client+0x96>
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	d03c      	beq.n	800a556 <rcl_action_wait_set_add_action_client+0x86>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	6808      	ldr	r0, [r1, #0]
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d038      	beq.n	800a556 <rcl_action_wait_set_add_action_client+0x86>
 800a4e4:	4617      	mov	r7, r2
 800a4e6:	461e      	mov	r6, r3
 800a4e8:	f7fd ff46 	bl	8008378 <rcl_client_is_valid>
 800a4ec:	b3b0      	cbz	r0, 800a55c <rcl_action_wait_set_add_action_client+0x8c>
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	3004      	adds	r0, #4
 800a4f2:	f7fd ff41 	bl	8008378 <rcl_client_is_valid>
 800a4f6:	b388      	cbz	r0, 800a55c <rcl_action_wait_set_add_action_client+0x8c>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	3008      	adds	r0, #8
 800a4fc:	f7fd ff3c 	bl	8008378 <rcl_client_is_valid>
 800a500:	b360      	cbz	r0, 800a55c <rcl_action_wait_set_add_action_client+0x8c>
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	300c      	adds	r0, #12
 800a506:	f7fe febf 	bl	8009288 <rcl_subscription_is_valid>
 800a50a:	b338      	cbz	r0, 800a55c <rcl_action_wait_set_add_action_client+0x8c>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	3010      	adds	r0, #16
 800a510:	f7fe feba 	bl	8009288 <rcl_subscription_is_valid>
 800a514:	b310      	cbz	r0, 800a55c <rcl_action_wait_set_add_action_client+0x8c>
 800a516:	6821      	ldr	r1, [r4, #0]
 800a518:	4628      	mov	r0, r5
 800a51a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800a51e:	f7ff fccd 	bl	8009ebc <rcl_wait_set_add_client>
 800a522:	b9b8      	cbnz	r0, 800a554 <rcl_action_wait_set_add_action_client+0x84>
 800a524:	6821      	ldr	r1, [r4, #0]
 800a526:	4628      	mov	r0, r5
 800a528:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800a52c:	3104      	adds	r1, #4
 800a52e:	f7ff fcc5 	bl	8009ebc <rcl_wait_set_add_client>
 800a532:	b978      	cbnz	r0, 800a554 <rcl_action_wait_set_add_action_client+0x84>
 800a534:	6821      	ldr	r1, [r4, #0]
 800a536:	4628      	mov	r0, r5
 800a538:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800a53c:	3108      	adds	r1, #8
 800a53e:	f7ff fcbd 	bl	8009ebc <rcl_wait_set_add_client>
 800a542:	b938      	cbnz	r0, 800a554 <rcl_action_wait_set_add_action_client+0x84>
 800a544:	6821      	ldr	r1, [r4, #0]
 800a546:	4628      	mov	r0, r5
 800a548:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800a54c:	310c      	adds	r1, #12
 800a54e:	f7ff f96d 	bl	800982c <rcl_wait_set_add_subscription>
 800a552:	b158      	cbz	r0, 800a56c <rcl_action_wait_set_add_action_client+0x9c>
 800a554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a556:	f640 0036 	movw	r0, #2102	@ 0x836
 800a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55c:	f7fd fc44 	bl	8007de8 <rcutils_reset_error>
 800a560:	f640 0036 	movw	r0, #2102	@ 0x836
 800a564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a566:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a56a:	4770      	bx	lr
 800a56c:	6821      	ldr	r1, [r4, #0]
 800a56e:	4628      	mov	r0, r5
 800a570:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800a574:	3110      	adds	r1, #16
 800a576:	f7ff f959 	bl	800982c <rcl_wait_set_add_subscription>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d1ea      	bne.n	800a554 <rcl_action_wait_set_add_action_client+0x84>
 800a57e:	b11f      	cbz	r7, 800a588 <rcl_action_wait_set_add_action_client+0xb8>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	2e00      	cmp	r6, #0
 800a58a:	d0e3      	beq.n	800a554 <rcl_action_wait_set_add_action_client+0x84>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800a592:	6033      	str	r3, [r6, #0]
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a596:	bf00      	nop

0800a598 <rcl_action_client_wait_set_get_entities_ready>:
 800a598:	2800      	cmp	r0, #0
 800a59a:	f000 808d 	beq.w	800a6b8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	d077      	beq.n	800a698 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	6808      	ldr	r0, [r1, #0]
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d073      	beq.n	800a698 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	461f      	mov	r7, r3
 800a5b4:	f7fd fee0 	bl	8008378 <rcl_client_is_valid>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d071      	beq.n	800a6a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	3004      	adds	r0, #4
 800a5c0:	f7fd feda 	bl	8008378 <rcl_client_is_valid>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d06b      	beq.n	800a6a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	3008      	adds	r0, #8
 800a5cc:	f7fd fed4 	bl	8008378 <rcl_client_is_valid>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d065      	beq.n	800a6a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	300c      	adds	r0, #12
 800a5d8:	f7fe fe56 	bl	8009288 <rcl_subscription_is_valid>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d05f      	beq.n	800a6a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	3010      	adds	r0, #16
 800a5e4:	f7fe fe50 	bl	8009288 <rcl_subscription_is_valid>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d059      	beq.n	800a6a0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800a5ec:	2e00      	cmp	r6, #0
 800a5ee:	d060      	beq.n	800a6b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	d05e      	beq.n	800a6b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800a5f4:	9b06      	ldr	r3, [sp, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d05b      	beq.n	800a6b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800a5fa:	9b07      	ldr	r3, [sp, #28]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d058      	beq.n	800a6b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d055      	beq.n	800a6b2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	686a      	ldr	r2, [r5, #4]
 800a60a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800a60e:	428a      	cmp	r2, r1
 800a610:	d94c      	bls.n	800a6ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 800a612:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800a616:	4282      	cmp	r2, r0
 800a618:	d948      	bls.n	800a6ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 800a61a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800a61e:	69ea      	ldr	r2, [r5, #28]
 800a620:	42a2      	cmp	r2, r4
 800a622:	d943      	bls.n	800a6ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 800a624:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800a628:	4562      	cmp	r2, ip
 800a62a:	d93f      	bls.n	800a6ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 800a62c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800a630:	4572      	cmp	r2, lr
 800a632:	d93b      	bls.n	800a6ac <rcl_action_client_wait_set_get_entities_ready+0x114>
 800a634:	69aa      	ldr	r2, [r5, #24]
 800a636:	682d      	ldr	r5, [r5, #0]
 800a638:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800a63c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a640:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800a644:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800a648:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a64c:	f103 0c0c 	add.w	ip, r3, #12
 800a650:	eba5 050c 	sub.w	r5, r5, ip
 800a654:	fab5 f585 	clz	r5, r5
 800a658:	096d      	lsrs	r5, r5, #5
 800a65a:	7035      	strb	r5, [r6, #0]
 800a65c:	f103 0510 	add.w	r5, r3, #16
 800a660:	1b64      	subs	r4, r4, r5
 800a662:	fab4 f484 	clz	r4, r4
 800a666:	0964      	lsrs	r4, r4, #5
 800a668:	703c      	strb	r4, [r7, #0]
 800a66a:	eba3 0008 	sub.w	r0, r3, r8
 800a66e:	1d1c      	adds	r4, r3, #4
 800a670:	3308      	adds	r3, #8
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	fab0 f080 	clz	r0, r0
 800a678:	9a06      	ldr	r2, [sp, #24]
 800a67a:	0940      	lsrs	r0, r0, #5
 800a67c:	1b09      	subs	r1, r1, r4
 800a67e:	7010      	strb	r0, [r2, #0]
 800a680:	fab1 f181 	clz	r1, r1
 800a684:	9a07      	ldr	r2, [sp, #28]
 800a686:	0949      	lsrs	r1, r1, #5
 800a688:	7011      	strb	r1, [r2, #0]
 800a68a:	fab3 f383 	clz	r3, r3
 800a68e:	9a08      	ldr	r2, [sp, #32]
 800a690:	095b      	lsrs	r3, r3, #5
 800a692:	2000      	movs	r0, #0
 800a694:	7013      	strb	r3, [r2, #0]
 800a696:	e001      	b.n	800a69c <rcl_action_client_wait_set_get_entities_ready+0x104>
 800a698:	f640 0036 	movw	r0, #2102	@ 0x836
 800a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a0:	f7fd fba2 	bl	8007de8 <rcutils_reset_error>
 800a6a4:	f640 0036 	movw	r0, #2102	@ 0x836
 800a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b2:	200b      	movs	r0, #11
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop

0800a6c0 <rcl_action_take_goal_request>:
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d039      	beq.n	800a738 <rcl_action_take_goal_request+0x78>
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	6800      	ldr	r0, [r0, #0]
 800a6ca:	b380      	cbz	r0, 800a72e <rcl_action_take_goal_request+0x6e>
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	f7fe fc96 	bl	8009000 <rcl_service_is_valid>
 800a6d4:	b330      	cbz	r0, 800a724 <rcl_action_take_goal_request+0x64>
 800a6d6:	6820      	ldr	r0, [r4, #0]
 800a6d8:	3004      	adds	r0, #4
 800a6da:	f7fe fc91 	bl	8009000 <rcl_service_is_valid>
 800a6de:	b308      	cbz	r0, 800a724 <rcl_action_take_goal_request+0x64>
 800a6e0:	6820      	ldr	r0, [r4, #0]
 800a6e2:	3008      	adds	r0, #8
 800a6e4:	f7fe fc8c 	bl	8009000 <rcl_service_is_valid>
 800a6e8:	b1e0      	cbz	r0, 800a724 <rcl_action_take_goal_request+0x64>
 800a6ea:	6820      	ldr	r0, [r4, #0]
 800a6ec:	300c      	adds	r0, #12
 800a6ee:	f007 fa4f 	bl	8011b90 <rcl_publisher_is_valid>
 800a6f2:	b1b8      	cbz	r0, 800a724 <rcl_action_take_goal_request+0x64>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	3010      	adds	r0, #16
 800a6f8:	f007 fa4a 	bl	8011b90 <rcl_publisher_is_valid>
 800a6fc:	b190      	cbz	r0, 800a724 <rcl_action_take_goal_request+0x64>
 800a6fe:	b1cd      	cbz	r5, 800a734 <rcl_action_take_goal_request+0x74>
 800a700:	b1c6      	cbz	r6, 800a734 <rcl_action_take_goal_request+0x74>
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	4632      	mov	r2, r6
 800a706:	4629      	mov	r1, r5
 800a708:	f7fe fc22 	bl	8008f50 <rcl_take_request>
 800a70c:	b148      	cbz	r0, 800a722 <rcl_action_take_goal_request+0x62>
 800a70e:	280a      	cmp	r0, #10
 800a710:	d007      	beq.n	800a722 <rcl_action_take_goal_request+0x62>
 800a712:	f240 2259 	movw	r2, #601	@ 0x259
 800a716:	f640 0399 	movw	r3, #2201	@ 0x899
 800a71a:	4290      	cmp	r0, r2
 800a71c:	bf0c      	ite	eq
 800a71e:	4618      	moveq	r0, r3
 800a720:	2001      	movne	r0, #1
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	f7fd fb60 	bl	8007de8 <rcutils_reset_error>
 800a728:	f640 0098 	movw	r0, #2200	@ 0x898
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
 800a72e:	f640 0098 	movw	r0, #2200	@ 0x898
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	200b      	movs	r0, #11
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	f640 0098 	movw	r0, #2200	@ 0x898
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop

0800a740 <rcl_action_send_goal_response>:
 800a740:	b390      	cbz	r0, 800a7a8 <rcl_action_send_goal_response+0x68>
 800a742:	b570      	push	{r4, r5, r6, lr}
 800a744:	4604      	mov	r4, r0
 800a746:	6800      	ldr	r0, [r0, #0]
 800a748:	b348      	cbz	r0, 800a79e <rcl_action_send_goal_response+0x5e>
 800a74a:	460d      	mov	r5, r1
 800a74c:	4616      	mov	r6, r2
 800a74e:	f7fe fc57 	bl	8009000 <rcl_service_is_valid>
 800a752:	b1f8      	cbz	r0, 800a794 <rcl_action_send_goal_response+0x54>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	3004      	adds	r0, #4
 800a758:	f7fe fc52 	bl	8009000 <rcl_service_is_valid>
 800a75c:	b1d0      	cbz	r0, 800a794 <rcl_action_send_goal_response+0x54>
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	3008      	adds	r0, #8
 800a762:	f7fe fc4d 	bl	8009000 <rcl_service_is_valid>
 800a766:	b1a8      	cbz	r0, 800a794 <rcl_action_send_goal_response+0x54>
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	300c      	adds	r0, #12
 800a76c:	f007 fa10 	bl	8011b90 <rcl_publisher_is_valid>
 800a770:	b180      	cbz	r0, 800a794 <rcl_action_send_goal_response+0x54>
 800a772:	6820      	ldr	r0, [r4, #0]
 800a774:	3010      	adds	r0, #16
 800a776:	f007 fa0b 	bl	8011b90 <rcl_publisher_is_valid>
 800a77a:	b158      	cbz	r0, 800a794 <rcl_action_send_goal_response+0x54>
 800a77c:	b195      	cbz	r5, 800a7a4 <rcl_action_send_goal_response+0x64>
 800a77e:	b18e      	cbz	r6, 800a7a4 <rcl_action_send_goal_response+0x64>
 800a780:	6820      	ldr	r0, [r4, #0]
 800a782:	4632      	mov	r2, r6
 800a784:	4629      	mov	r1, r5
 800a786:	f7fe fc23 	bl	8008fd0 <rcl_send_response>
 800a78a:	b110      	cbz	r0, 800a792 <rcl_action_send_goal_response+0x52>
 800a78c:	2802      	cmp	r0, #2
 800a78e:	bf18      	it	ne
 800a790:	2001      	movne	r0, #1
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f7fd fb28 	bl	8007de8 <rcutils_reset_error>
 800a798:	f640 0098 	movw	r0, #2200	@ 0x898
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	f640 0098 	movw	r0, #2200	@ 0x898
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	200b      	movs	r0, #11
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	f640 0098 	movw	r0, #2200	@ 0x898
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <rcl_action_take_result_request>:
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d03a      	beq.n	800a82a <rcl_action_take_result_request+0x7a>
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	6800      	ldr	r0, [r0, #0]
 800a7ba:	b388      	cbz	r0, 800a820 <rcl_action_take_result_request+0x70>
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4616      	mov	r6, r2
 800a7c0:	f7fe fc1e 	bl	8009000 <rcl_service_is_valid>
 800a7c4:	b338      	cbz	r0, 800a816 <rcl_action_take_result_request+0x66>
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	3004      	adds	r0, #4
 800a7ca:	f7fe fc19 	bl	8009000 <rcl_service_is_valid>
 800a7ce:	b310      	cbz	r0, 800a816 <rcl_action_take_result_request+0x66>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	3008      	adds	r0, #8
 800a7d4:	f7fe fc14 	bl	8009000 <rcl_service_is_valid>
 800a7d8:	b1e8      	cbz	r0, 800a816 <rcl_action_take_result_request+0x66>
 800a7da:	6820      	ldr	r0, [r4, #0]
 800a7dc:	300c      	adds	r0, #12
 800a7de:	f007 f9d7 	bl	8011b90 <rcl_publisher_is_valid>
 800a7e2:	b1c0      	cbz	r0, 800a816 <rcl_action_take_result_request+0x66>
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	3010      	adds	r0, #16
 800a7e8:	f007 f9d2 	bl	8011b90 <rcl_publisher_is_valid>
 800a7ec:	b198      	cbz	r0, 800a816 <rcl_action_take_result_request+0x66>
 800a7ee:	b1d5      	cbz	r5, 800a826 <rcl_action_take_result_request+0x76>
 800a7f0:	b1ce      	cbz	r6, 800a826 <rcl_action_take_result_request+0x76>
 800a7f2:	6820      	ldr	r0, [r4, #0]
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	3008      	adds	r0, #8
 800a7fa:	f7fe fba9 	bl	8008f50 <rcl_take_request>
 800a7fe:	b148      	cbz	r0, 800a814 <rcl_action_take_result_request+0x64>
 800a800:	280a      	cmp	r0, #10
 800a802:	d007      	beq.n	800a814 <rcl_action_take_result_request+0x64>
 800a804:	f240 2259 	movw	r2, #601	@ 0x259
 800a808:	f640 0399 	movw	r3, #2201	@ 0x899
 800a80c:	4290      	cmp	r0, r2
 800a80e:	bf0c      	ite	eq
 800a810:	4618      	moveq	r0, r3
 800a812:	2001      	movne	r0, #1
 800a814:	bd70      	pop	{r4, r5, r6, pc}
 800a816:	f7fd fae7 	bl	8007de8 <rcutils_reset_error>
 800a81a:	f640 0098 	movw	r0, #2200	@ 0x898
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	f640 0098 	movw	r0, #2200	@ 0x898
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	200b      	movs	r0, #11
 800a828:	bd70      	pop	{r4, r5, r6, pc}
 800a82a:	f640 0098 	movw	r0, #2200	@ 0x898
 800a82e:	4770      	bx	lr

0800a830 <rcl_action_take_cancel_request>:
 800a830:	2800      	cmp	r0, #0
 800a832:	d03a      	beq.n	800a8aa <rcl_action_take_cancel_request+0x7a>
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	4604      	mov	r4, r0
 800a838:	6800      	ldr	r0, [r0, #0]
 800a83a:	b388      	cbz	r0, 800a8a0 <rcl_action_take_cancel_request+0x70>
 800a83c:	460d      	mov	r5, r1
 800a83e:	4616      	mov	r6, r2
 800a840:	f7fe fbde 	bl	8009000 <rcl_service_is_valid>
 800a844:	b338      	cbz	r0, 800a896 <rcl_action_take_cancel_request+0x66>
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	3004      	adds	r0, #4
 800a84a:	f7fe fbd9 	bl	8009000 <rcl_service_is_valid>
 800a84e:	b310      	cbz	r0, 800a896 <rcl_action_take_cancel_request+0x66>
 800a850:	6820      	ldr	r0, [r4, #0]
 800a852:	3008      	adds	r0, #8
 800a854:	f7fe fbd4 	bl	8009000 <rcl_service_is_valid>
 800a858:	b1e8      	cbz	r0, 800a896 <rcl_action_take_cancel_request+0x66>
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	300c      	adds	r0, #12
 800a85e:	f007 f997 	bl	8011b90 <rcl_publisher_is_valid>
 800a862:	b1c0      	cbz	r0, 800a896 <rcl_action_take_cancel_request+0x66>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	3010      	adds	r0, #16
 800a868:	f007 f992 	bl	8011b90 <rcl_publisher_is_valid>
 800a86c:	b198      	cbz	r0, 800a896 <rcl_action_take_cancel_request+0x66>
 800a86e:	b1d5      	cbz	r5, 800a8a6 <rcl_action_take_cancel_request+0x76>
 800a870:	b1ce      	cbz	r6, 800a8a6 <rcl_action_take_cancel_request+0x76>
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	4632      	mov	r2, r6
 800a876:	4629      	mov	r1, r5
 800a878:	3004      	adds	r0, #4
 800a87a:	f7fe fb69 	bl	8008f50 <rcl_take_request>
 800a87e:	b148      	cbz	r0, 800a894 <rcl_action_take_cancel_request+0x64>
 800a880:	280a      	cmp	r0, #10
 800a882:	d007      	beq.n	800a894 <rcl_action_take_cancel_request+0x64>
 800a884:	f240 2259 	movw	r2, #601	@ 0x259
 800a888:	f640 0399 	movw	r3, #2201	@ 0x899
 800a88c:	4290      	cmp	r0, r2
 800a88e:	bf0c      	ite	eq
 800a890:	4618      	moveq	r0, r3
 800a892:	2001      	movne	r0, #1
 800a894:	bd70      	pop	{r4, r5, r6, pc}
 800a896:	f7fd faa7 	bl	8007de8 <rcutils_reset_error>
 800a89a:	f640 0098 	movw	r0, #2200	@ 0x898
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	f640 0098 	movw	r0, #2200	@ 0x898
 800a8a4:	bd70      	pop	{r4, r5, r6, pc}
 800a8a6:	200b      	movs	r0, #11
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}
 800a8aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800a8ae:	4770      	bx	lr

0800a8b0 <rcl_action_send_cancel_response>:
 800a8b0:	b398      	cbz	r0, 800a91a <rcl_action_send_cancel_response+0x6a>
 800a8b2:	b570      	push	{r4, r5, r6, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	6800      	ldr	r0, [r0, #0]
 800a8b8:	b350      	cbz	r0, 800a910 <rcl_action_send_cancel_response+0x60>
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	4616      	mov	r6, r2
 800a8be:	f7fe fb9f 	bl	8009000 <rcl_service_is_valid>
 800a8c2:	b300      	cbz	r0, 800a906 <rcl_action_send_cancel_response+0x56>
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	3004      	adds	r0, #4
 800a8c8:	f7fe fb9a 	bl	8009000 <rcl_service_is_valid>
 800a8cc:	b1d8      	cbz	r0, 800a906 <rcl_action_send_cancel_response+0x56>
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	3008      	adds	r0, #8
 800a8d2:	f7fe fb95 	bl	8009000 <rcl_service_is_valid>
 800a8d6:	b1b0      	cbz	r0, 800a906 <rcl_action_send_cancel_response+0x56>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	300c      	adds	r0, #12
 800a8dc:	f007 f958 	bl	8011b90 <rcl_publisher_is_valid>
 800a8e0:	b188      	cbz	r0, 800a906 <rcl_action_send_cancel_response+0x56>
 800a8e2:	6820      	ldr	r0, [r4, #0]
 800a8e4:	3010      	adds	r0, #16
 800a8e6:	f007 f953 	bl	8011b90 <rcl_publisher_is_valid>
 800a8ea:	b160      	cbz	r0, 800a906 <rcl_action_send_cancel_response+0x56>
 800a8ec:	b19d      	cbz	r5, 800a916 <rcl_action_send_cancel_response+0x66>
 800a8ee:	b196      	cbz	r6, 800a916 <rcl_action_send_cancel_response+0x66>
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	3004      	adds	r0, #4
 800a8f8:	f7fe fb6a 	bl	8008fd0 <rcl_send_response>
 800a8fc:	b110      	cbz	r0, 800a904 <rcl_action_send_cancel_response+0x54>
 800a8fe:	2802      	cmp	r0, #2
 800a900:	bf18      	it	ne
 800a902:	2001      	movne	r0, #1
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	f7fd fa6f 	bl	8007de8 <rcutils_reset_error>
 800a90a:	f640 0098 	movw	r0, #2200	@ 0x898
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
 800a910:	f640 0098 	movw	r0, #2200	@ 0x898
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	200b      	movs	r0, #11
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	f640 0098 	movw	r0, #2200	@ 0x898
 800a91e:	4770      	bx	lr

0800a920 <rcl_action_wait_set_add_action_server>:
 800a920:	2800      	cmp	r0, #0
 800a922:	d04d      	beq.n	800a9c0 <rcl_action_wait_set_add_action_server+0xa0>
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	460c      	mov	r4, r1
 800a928:	b159      	cbz	r1, 800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a92a:	4605      	mov	r5, r0
 800a92c:	6808      	ldr	r0, [r1, #0]
 800a92e:	b140      	cbz	r0, 800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a930:	4616      	mov	r6, r2
 800a932:	f7fe fb65 	bl	8009000 <rcl_service_is_valid>
 800a936:	b120      	cbz	r0, 800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	3004      	adds	r0, #4
 800a93c:	f7fe fb60 	bl	8009000 <rcl_service_is_valid>
 800a940:	b910      	cbnz	r0, 800a948 <rcl_action_wait_set_add_action_server+0x28>
 800a942:	f640 0098 	movw	r0, #2200	@ 0x898
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	6820      	ldr	r0, [r4, #0]
 800a94a:	3008      	adds	r0, #8
 800a94c:	f7fe fb58 	bl	8009000 <rcl_service_is_valid>
 800a950:	2800      	cmp	r0, #0
 800a952:	d0f6      	beq.n	800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	300c      	adds	r0, #12
 800a958:	f007 f932 	bl	8011bc0 <rcl_publisher_is_valid_except_context>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d0f0      	beq.n	800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a960:	6820      	ldr	r0, [r4, #0]
 800a962:	3010      	adds	r0, #16
 800a964:	f007 f92c 	bl	8011bc0 <rcl_publisher_is_valid_except_context>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0ea      	beq.n	800a942 <rcl_action_wait_set_add_action_server+0x22>
 800a96c:	6821      	ldr	r1, [r4, #0]
 800a96e:	4628      	mov	r0, r5
 800a970:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800a974:	f7ff face 	bl	8009f14 <rcl_wait_set_add_service>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1e4      	bne.n	800a946 <rcl_action_wait_set_add_action_server+0x26>
 800a97c:	6821      	ldr	r1, [r4, #0]
 800a97e:	4628      	mov	r0, r5
 800a980:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800a984:	3104      	adds	r1, #4
 800a986:	f7ff fac5 	bl	8009f14 <rcl_wait_set_add_service>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d1db      	bne.n	800a946 <rcl_action_wait_set_add_action_server+0x26>
 800a98e:	6821      	ldr	r1, [r4, #0]
 800a990:	4628      	mov	r0, r5
 800a992:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800a996:	3108      	adds	r1, #8
 800a998:	f7ff fabc 	bl	8009f14 <rcl_wait_set_add_service>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d1d2      	bne.n	800a946 <rcl_action_wait_set_add_action_server+0x26>
 800a9a0:	6821      	ldr	r1, [r4, #0]
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800a9a8:	3114      	adds	r1, #20
 800a9aa:	f7ff fa57 	bl	8009e5c <rcl_wait_set_add_timer>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1c9      	bne.n	800a946 <rcl_action_wait_set_add_action_server+0x26>
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	d0c7      	beq.n	800a946 <rcl_action_wait_set_add_action_server+0x26>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800a9bc:	6033      	str	r3, [r6, #0]
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop

0800a9c8 <rcl_action_server_wait_set_get_entities_ready>:
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d05a      	beq.n	800aa82 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b161      	cbz	r1, 800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	b148      	cbz	r0, 800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800a9d8:	4616      	mov	r6, r2
 800a9da:	461f      	mov	r7, r3
 800a9dc:	f7fe fb10 	bl	8009000 <rcl_service_is_valid>
 800a9e0:	b120      	cbz	r0, 800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800a9e2:	6820      	ldr	r0, [r4, #0]
 800a9e4:	3004      	adds	r0, #4
 800a9e6:	f7fe fb0b 	bl	8009000 <rcl_service_is_valid>
 800a9ea:	b910      	cbnz	r0, 800a9f2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800a9ec:	f640 0098 	movw	r0, #2200	@ 0x898
 800a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	3008      	adds	r0, #8
 800a9f6:	f7fe fb03 	bl	8009000 <rcl_service_is_valid>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0f6      	beq.n	800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	300c      	adds	r0, #12
 800aa02:	f007 f8dd 	bl	8011bc0 <rcl_publisher_is_valid_except_context>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d0f0      	beq.n	800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800aa0a:	6820      	ldr	r0, [r4, #0]
 800aa0c:	3010      	adds	r0, #16
 800aa0e:	f007 f8d7 	bl	8011bc0 <rcl_publisher_is_valid_except_context>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d0ea      	beq.n	800a9ec <rcl_action_server_wait_set_get_entities_ready+0x24>
 800aa16:	b3be      	cbz	r6, 800aa88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800aa18:	b3b7      	cbz	r7, 800aa88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800aa1a:	9b06      	ldr	r3, [sp, #24]
 800aa1c:	b3a3      	cbz	r3, 800aa88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800aa1e:	9b07      	ldr	r3, [sp, #28]
 800aa20:	b393      	cbz	r3, 800aa88 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800aa22:	6821      	ldr	r1, [r4, #0]
 800aa24:	692a      	ldr	r2, [r5, #16]
 800aa26:	6a2c      	ldr	r4, [r5, #32]
 800aa28:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800aa2c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800aa30:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800aa34:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800aa38:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800aa3c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800aa40:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa44:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800aa48:	1a64      	subs	r4, r4, r1
 800aa4a:	fab4 f484 	clz	r4, r4
 800aa4e:	0964      	lsrs	r4, r4, #5
 800aa50:	7034      	strb	r4, [r6, #0]
 800aa52:	1d0c      	adds	r4, r1, #4
 800aa54:	1b1b      	subs	r3, r3, r4
 800aa56:	fab3 f383 	clz	r3, r3
 800aa5a:	095b      	lsrs	r3, r3, #5
 800aa5c:	f101 0408 	add.w	r4, r1, #8
 800aa60:	703b      	strb	r3, [r7, #0]
 800aa62:	f101 0314 	add.w	r3, r1, #20
 800aa66:	1b01      	subs	r1, r0, r4
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	fab1 f181 	clz	r1, r1
 800aa6e:	9a06      	ldr	r2, [sp, #24]
 800aa70:	0949      	lsrs	r1, r1, #5
 800aa72:	7011      	strb	r1, [r2, #0]
 800aa74:	fab3 f383 	clz	r3, r3
 800aa78:	9a07      	ldr	r2, [sp, #28]
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	7013      	strb	r3, [r2, #0]
 800aa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800aa86:	4770      	bx	lr
 800aa88:	200b      	movs	r0, #11
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa8c <_execute_event_handler>:
 800aa8c:	2002      	movs	r0, #2
 800aa8e:	4770      	bx	lr

0800aa90 <_cancel_goal_event_handler>:
 800aa90:	2003      	movs	r0, #3
 800aa92:	4770      	bx	lr

0800aa94 <_succeed_event_handler>:
 800aa94:	2004      	movs	r0, #4
 800aa96:	4770      	bx	lr

0800aa98 <_abort_event_handler>:
 800aa98:	2006      	movs	r0, #6
 800aa9a:	4770      	bx	lr

0800aa9c <_canceled_event_handler>:
 800aa9c:	2005      	movs	r0, #5
 800aa9e:	4770      	bx	lr

0800aaa0 <rcl_action_transition_goal_state>:
 800aaa0:	b2c2      	uxtb	r2, r0
 800aaa2:	2a06      	cmp	r2, #6
 800aaa4:	d80c      	bhi.n	800aac0 <rcl_action_transition_goal_state+0x20>
 800aaa6:	2904      	cmp	r1, #4
 800aaa8:	d80a      	bhi.n	800aac0 <rcl_action_transition_goal_state+0x20>
 800aaaa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800aaae:	b410      	push	{r4}
 800aab0:	1853      	adds	r3, r2, r1
 800aab2:	4c06      	ldr	r4, [pc, #24]	@ (800aacc <rcl_action_transition_goal_state+0x2c>)
 800aab4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aab8:	b123      	cbz	r3, 800aac4 <rcl_action_transition_goal_state+0x24>
 800aaba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabe:	4718      	bx	r3
 800aac0:	2000      	movs	r0, #0
 800aac2:	4770      	bx	lr
 800aac4:	2000      	movs	r0, #0
 800aac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	080149cc 	.word	0x080149cc

0800aad0 <rcl_action_get_zero_initialized_cancel_response>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	4c07      	ldr	r4, [pc, #28]	@ (800aaf0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800aad4:	4686      	mov	lr, r0
 800aad6:	4684      	mov	ip, r0
 800aad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	f8cc 3000 	str.w	r3, [ip]
 800aaea:	4670      	mov	r0, lr
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	bf00      	nop
 800aaf0:	08014a58 	.word	0x08014a58

0800aaf4 <rclc_action_send_result_request>:
 800aaf4:	b1d0      	cbz	r0, 800ab2c <rclc_action_send_result_request+0x38>
 800aaf6:	b500      	push	{lr}
 800aaf8:	4684      	mov	ip, r0
 800aafa:	b087      	sub	sp, #28
 800aafc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800ab00:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800ab04:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800ab08:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800ab0c:	f10d 0e08 	add.w	lr, sp, #8
 800ab10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ab14:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800ab18:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800ab1c:	a902      	add	r1, sp, #8
 800ab1e:	3010      	adds	r0, #16
 800ab20:	f7ff fbda 	bl	800a2d8 <rcl_action_send_result_request>
 800ab24:	b920      	cbnz	r0, 800ab30 <rclc_action_send_result_request+0x3c>
 800ab26:	b007      	add	sp, #28
 800ab28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab2c:	200b      	movs	r0, #11
 800ab2e:	4770      	bx	lr
 800ab30:	9001      	str	r0, [sp, #4]
 800ab32:	f7fd f959 	bl	8007de8 <rcutils_reset_error>
 800ab36:	9801      	ldr	r0, [sp, #4]
 800ab38:	b007      	add	sp, #28
 800ab3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab3e:	bf00      	nop

0800ab40 <rclc_action_take_goal_handle>:
 800ab40:	b160      	cbz	r0, 800ab5c <rclc_action_take_goal_handle+0x1c>
 800ab42:	6883      	ldr	r3, [r0, #8]
 800ab44:	b143      	cbz	r3, 800ab58 <rclc_action_take_goal_handle+0x18>
 800ab46:	6819      	ldr	r1, [r3, #0]
 800ab48:	6081      	str	r1, [r0, #8]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	721a      	strb	r2, [r3, #8]
 800ab4e:	68c1      	ldr	r1, [r0, #12]
 800ab50:	6019      	str	r1, [r3, #0]
 800ab52:	621a      	str	r2, [r3, #32]
 800ab54:	849a      	strh	r2, [r3, #36]	@ 0x24
 800ab56:	60c3      	str	r3, [r0, #12]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4770      	bx	lr
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	e7fb      	b.n	800ab58 <rclc_action_take_goal_handle+0x18>

0800ab60 <rclc_action_remove_used_goal_handle>:
 800ab60:	b180      	cbz	r0, 800ab84 <rclc_action_remove_used_goal_handle+0x24>
 800ab62:	b179      	cbz	r1, 800ab84 <rclc_action_remove_used_goal_handle+0x24>
 800ab64:	68c3      	ldr	r3, [r0, #12]
 800ab66:	4299      	cmp	r1, r3
 800ab68:	d00d      	beq.n	800ab86 <rclc_action_remove_used_goal_handle+0x26>
 800ab6a:	b12b      	cbz	r3, 800ab78 <rclc_action_remove_used_goal_handle+0x18>
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4291      	cmp	r1, r2
 800ab70:	d003      	beq.n	800ab7a <rclc_action_remove_used_goal_handle+0x1a>
 800ab72:	4613      	mov	r3, r2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1f9      	bne.n	800ab6c <rclc_action_remove_used_goal_handle+0xc>
 800ab78:	4770      	bx	lr
 800ab7a:	680a      	ldr	r2, [r1, #0]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	6883      	ldr	r3, [r0, #8]
 800ab80:	600b      	str	r3, [r1, #0]
 800ab82:	6081      	str	r1, [r0, #8]
 800ab84:	4770      	bx	lr
 800ab86:	680b      	ldr	r3, [r1, #0]
 800ab88:	60c3      	str	r3, [r0, #12]
 800ab8a:	e7f8      	b.n	800ab7e <rclc_action_remove_used_goal_handle+0x1e>

0800ab8c <rclc_action_find_goal_handle_by_uuid>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	b180      	cbz	r0, 800abb2 <rclc_action_find_goal_handle_by_uuid+0x26>
 800ab90:	460d      	mov	r5, r1
 800ab92:	b181      	cbz	r1, 800abb6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800ab94:	68c4      	ldr	r4, [r0, #12]
 800ab96:	b914      	cbnz	r4, 800ab9e <rclc_action_find_goal_handle_by_uuid+0x12>
 800ab98:	e009      	b.n	800abae <rclc_action_find_goal_handle_by_uuid+0x22>
 800ab9a:	6824      	ldr	r4, [r4, #0]
 800ab9c:	b13c      	cbz	r4, 800abae <rclc_action_find_goal_handle_by_uuid+0x22>
 800ab9e:	f104 0009 	add.w	r0, r4, #9
 800aba2:	2210      	movs	r2, #16
 800aba4:	4629      	mov	r1, r5
 800aba6:	f008 fd67 	bl	8013678 <memcmp>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d1f5      	bne.n	800ab9a <rclc_action_find_goal_handle_by_uuid+0xe>
 800abae:	4620      	mov	r0, r4
 800abb0:	bd38      	pop	{r3, r4, r5, pc}
 800abb2:	4604      	mov	r4, r0
 800abb4:	e7fb      	b.n	800abae <rclc_action_find_goal_handle_by_uuid+0x22>
 800abb6:	460c      	mov	r4, r1
 800abb8:	e7f9      	b.n	800abae <rclc_action_find_goal_handle_by_uuid+0x22>
 800abba:	bf00      	nop

0800abbc <rclc_action_find_first_handle_by_status>:
 800abbc:	b140      	cbz	r0, 800abd0 <rclc_action_find_first_handle_by_status+0x14>
 800abbe:	68c0      	ldr	r0, [r0, #12]
 800abc0:	b910      	cbnz	r0, 800abc8 <rclc_action_find_first_handle_by_status+0xc>
 800abc2:	e005      	b.n	800abd0 <rclc_action_find_first_handle_by_status+0x14>
 800abc4:	6800      	ldr	r0, [r0, #0]
 800abc6:	b118      	cbz	r0, 800abd0 <rclc_action_find_first_handle_by_status+0x14>
 800abc8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800abcc:	428b      	cmp	r3, r1
 800abce:	d1f9      	bne.n	800abc4 <rclc_action_find_first_handle_by_status+0x8>
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop

0800abd4 <rclc_action_find_first_terminated_handle>:
 800abd4:	b140      	cbz	r0, 800abe8 <rclc_action_find_first_terminated_handle+0x14>
 800abd6:	68c0      	ldr	r0, [r0, #12]
 800abd8:	b910      	cbnz	r0, 800abe0 <rclc_action_find_first_terminated_handle+0xc>
 800abda:	e005      	b.n	800abe8 <rclc_action_find_first_terminated_handle+0x14>
 800abdc:	6800      	ldr	r0, [r0, #0]
 800abde:	b118      	cbz	r0, 800abe8 <rclc_action_find_first_terminated_handle+0x14>
 800abe0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	ddf9      	ble.n	800abdc <rclc_action_find_first_terminated_handle+0x8>
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop

0800abec <rclc_action_find_handle_by_goal_request_sequence_number>:
 800abec:	b170      	cbz	r0, 800ac0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800abee:	68c0      	ldr	r0, [r0, #12]
 800abf0:	b160      	cbz	r0, 800ac0c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800abf2:	b410      	push	{r4}
 800abf4:	e001      	b.n	800abfa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800abf6:	6800      	ldr	r0, [r0, #0]
 800abf8:	b128      	cbz	r0, 800ac06 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800abfa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800abfe:	4299      	cmp	r1, r3
 800ac00:	bf08      	it	eq
 800ac02:	4294      	cmpeq	r4, r2
 800ac04:	d1f7      	bne.n	800abf6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800ac06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop

0800ac10 <rclc_action_find_handle_by_result_request_sequence_number>:
 800ac10:	b170      	cbz	r0, 800ac30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800ac12:	68c0      	ldr	r0, [r0, #12]
 800ac14:	b160      	cbz	r0, 800ac30 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800ac16:	b410      	push	{r4}
 800ac18:	e001      	b.n	800ac1e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800ac1a:	6800      	ldr	r0, [r0, #0]
 800ac1c:	b128      	cbz	r0, 800ac2a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800ac1e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800ac22:	4299      	cmp	r1, r3
 800ac24:	bf08      	it	eq
 800ac26:	4294      	cmpeq	r4, r2
 800ac28:	d1f7      	bne.n	800ac1a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800ac2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop

0800ac34 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800ac34:	b170      	cbz	r0, 800ac54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800ac36:	68c0      	ldr	r0, [r0, #12]
 800ac38:	b160      	cbz	r0, 800ac54 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800ac3a:	b410      	push	{r4}
 800ac3c:	e001      	b.n	800ac42 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800ac3e:	6800      	ldr	r0, [r0, #0]
 800ac40:	b128      	cbz	r0, 800ac4e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800ac42:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800ac46:	4299      	cmp	r1, r3
 800ac48:	bf08      	it	eq
 800ac4a:	4294      	cmpeq	r4, r2
 800ac4c:	d1f7      	bne.n	800ac3e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800ac4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop

0800ac58 <rclc_action_find_first_handle_with_goal_response>:
 800ac58:	b140      	cbz	r0, 800ac6c <rclc_action_find_first_handle_with_goal_response+0x14>
 800ac5a:	68c0      	ldr	r0, [r0, #12]
 800ac5c:	b910      	cbnz	r0, 800ac64 <rclc_action_find_first_handle_with_goal_response+0xc>
 800ac5e:	e005      	b.n	800ac6c <rclc_action_find_first_handle_with_goal_response+0x14>
 800ac60:	6800      	ldr	r0, [r0, #0]
 800ac62:	b118      	cbz	r0, 800ac6c <rclc_action_find_first_handle_with_goal_response+0x14>
 800ac64:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0f9      	beq.n	800ac60 <rclc_action_find_first_handle_with_goal_response+0x8>
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop

0800ac70 <rclc_action_find_first_handle_with_result_response>:
 800ac70:	b140      	cbz	r0, 800ac84 <rclc_action_find_first_handle_with_result_response+0x14>
 800ac72:	68c0      	ldr	r0, [r0, #12]
 800ac74:	b910      	cbnz	r0, 800ac7c <rclc_action_find_first_handle_with_result_response+0xc>
 800ac76:	e005      	b.n	800ac84 <rclc_action_find_first_handle_with_result_response+0x14>
 800ac78:	6800      	ldr	r0, [r0, #0]
 800ac7a:	b118      	cbz	r0, 800ac84 <rclc_action_find_first_handle_with_result_response+0x14>
 800ac7c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0f9      	beq.n	800ac78 <rclc_action_find_first_handle_with_result_response+0x8>
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <rclc_action_server_response_goal_request>:
 800ac88:	b198      	cbz	r0, 800acb2 <rclc_action_server_response_goal_request+0x2a>
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	6844      	ldr	r4, [r0, #4]
 800ac8e:	b086      	sub	sp, #24
 800ac90:	2200      	movs	r2, #0
 800ac92:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800ac96:	460b      	mov	r3, r1
 800ac98:	9205      	str	r2, [sp, #20]
 800ac9a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800ac9e:	aa03      	add	r2, sp, #12
 800aca0:	f104 0010 	add.w	r0, r4, #16
 800aca4:	f88d 300c 	strb.w	r3, [sp, #12]
 800aca8:	f7ff fd4a 	bl	800a740 <rcl_action_send_goal_response>
 800acac:	b918      	cbnz	r0, 800acb6 <rclc_action_server_response_goal_request+0x2e>
 800acae:	b006      	add	sp, #24
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	200b      	movs	r0, #11
 800acb4:	4770      	bx	lr
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	f7fd f896 	bl	8007de8 <rcutils_reset_error>
 800acbc:	9801      	ldr	r0, [sp, #4]
 800acbe:	b006      	add	sp, #24
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	0000      	movs	r0, r0
	...

0800acc8 <rclc_action_server_goal_cancel_accept>:
 800acc8:	b310      	cbz	r0, 800ad10 <rclc_action_server_goal_cancel_accept+0x48>
 800acca:	b510      	push	{r4, lr}
 800accc:	b090      	sub	sp, #64	@ 0x40
 800acce:	4604      	mov	r4, r0
 800acd0:	a806      	add	r0, sp, #24
 800acd2:	f7ff fefd 	bl	800aad0 <rcl_action_get_zero_initialized_cancel_response>
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800acdc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800ace0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800ace4:	f88d 3018 	strb.w	r3, [sp, #24]
 800ace8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800acec:	f8cd d01c 	str.w	sp, [sp, #28]
 800acf0:	46ec      	mov	ip, sp
 800acf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800acf6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800ad18 <rclc_action_server_goal_cancel_accept+0x50>
 800acfa:	6860      	ldr	r0, [r4, #4]
 800acfc:	aa06      	add	r2, sp, #24
 800acfe:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800ad02:	3010      	adds	r0, #16
 800ad04:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ad08:	f7ff fdd2 	bl	800a8b0 <rcl_action_send_cancel_response>
 800ad0c:	b010      	add	sp, #64	@ 0x40
 800ad0e:	bd10      	pop	{r4, pc}
 800ad10:	200b      	movs	r0, #11
 800ad12:	4770      	bx	lr
 800ad14:	f3af 8000 	nop.w
 800ad18:	00000001 	.word	0x00000001
 800ad1c:	00000001 	.word	0x00000001

0800ad20 <rclc_action_server_goal_cancel_reject>:
 800ad20:	b082      	sub	sp, #8
 800ad22:	b530      	push	{r4, r5, lr}
 800ad24:	b08b      	sub	sp, #44	@ 0x2c
 800ad26:	ac0e      	add	r4, sp, #56	@ 0x38
 800ad28:	e884 000c 	stmia.w	r4, {r2, r3}
 800ad2c:	b188      	cbz	r0, 800ad52 <rclc_action_server_goal_cancel_reject+0x32>
 800ad2e:	4604      	mov	r4, r0
 800ad30:	a801      	add	r0, sp, #4
 800ad32:	460d      	mov	r5, r1
 800ad34:	f7ff fecc 	bl	800aad0 <rcl_action_get_zero_initialized_cancel_response>
 800ad38:	aa01      	add	r2, sp, #4
 800ad3a:	a90e      	add	r1, sp, #56	@ 0x38
 800ad3c:	f104 0010 	add.w	r0, r4, #16
 800ad40:	f88d 5004 	strb.w	r5, [sp, #4]
 800ad44:	f7ff fdb4 	bl	800a8b0 <rcl_action_send_cancel_response>
 800ad48:	b00b      	add	sp, #44	@ 0x2c
 800ad4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad4e:	b002      	add	sp, #8
 800ad50:	4770      	bx	lr
 800ad52:	200b      	movs	r0, #11
 800ad54:	b00b      	add	sp, #44	@ 0x2c
 800ad56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad5a:	b002      	add	sp, #8
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop

0800ad60 <__atomic_load_8>:
 800ad60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ad64:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ad68:	4a15      	ldr	r2, [pc, #84]	@ (800adc0 <__atomic_load_8+0x60>)
 800ad6a:	4b16      	ldr	r3, [pc, #88]	@ (800adc4 <__atomic_load_8+0x64>)
 800ad6c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ad70:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ad74:	fb02 f101 	mul.w	r1, r2, r1
 800ad78:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ad7c:	fba3 2301 	umull	r2, r3, r3, r1
 800ad80:	091b      	lsrs	r3, r3, #4
 800ad82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ad86:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ad8a:	b4d0      	push	{r4, r6, r7}
 800ad8c:	4c0e      	ldr	r4, [pc, #56]	@ (800adc8 <__atomic_load_8+0x68>)
 800ad8e:	1ac9      	subs	r1, r1, r3
 800ad90:	1862      	adds	r2, r4, r1
 800ad92:	f04f 0c01 	mov.w	ip, #1
 800ad96:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ad9a:	e8c2 cf46 	strexb	r6, ip, [r2]
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d1f9      	bne.n	800ad96 <__atomic_load_8+0x36>
 800ada2:	f3bf 8f5b 	dmb	ish
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f4      	bne.n	800ad96 <__atomic_load_8+0x36>
 800adac:	e9d0 6700 	ldrd	r6, r7, [r0]
 800adb0:	f3bf 8f5b 	dmb	ish
 800adb4:	5463      	strb	r3, [r4, r1]
 800adb6:	4630      	mov	r0, r6
 800adb8:	4639      	mov	r1, r7
 800adba:	bcd0      	pop	{r4, r6, r7}
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	27d4eb2d 	.word	0x27d4eb2d
 800adc4:	b21642c9 	.word	0xb21642c9
 800adc8:	20009068 	.word	0x20009068

0800adcc <__atomic_store_8>:
 800adcc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800add0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800adda:	4c14      	ldr	r4, [pc, #80]	@ (800ae2c <__atomic_store_8+0x60>)
 800addc:	4d14      	ldr	r5, [pc, #80]	@ (800ae30 <__atomic_store_8+0x64>)
 800adde:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ade2:	fb04 f101 	mul.w	r1, r4, r1
 800ade6:	4c13      	ldr	r4, [pc, #76]	@ (800ae34 <__atomic_store_8+0x68>)
 800ade8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800adec:	fba4 4e01 	umull	r4, lr, r4, r1
 800adf0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800adf4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800adf8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800adfc:	eba1 0e0e 	sub.w	lr, r1, lr
 800ae00:	eb05 0c0e 	add.w	ip, r5, lr
 800ae04:	f04f 0401 	mov.w	r4, #1
 800ae08:	e8dc 1f4f 	ldrexb	r1, [ip]
 800ae0c:	e8cc 4f46 	strexb	r6, r4, [ip]
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	d1f9      	bne.n	800ae08 <__atomic_store_8+0x3c>
 800ae14:	f3bf 8f5b 	dmb	ish
 800ae18:	b2c9      	uxtb	r1, r1
 800ae1a:	2900      	cmp	r1, #0
 800ae1c:	d1f4      	bne.n	800ae08 <__atomic_store_8+0x3c>
 800ae1e:	e9c0 2300 	strd	r2, r3, [r0]
 800ae22:	f3bf 8f5b 	dmb	ish
 800ae26:	f805 100e 	strb.w	r1, [r5, lr]
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	27d4eb2d 	.word	0x27d4eb2d
 800ae30:	20009068 	.word	0x20009068
 800ae34:	b21642c9 	.word	0xb21642c9

0800ae38 <__atomic_exchange_8>:
 800ae38:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800ae3c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800ae40:	4916      	ldr	r1, [pc, #88]	@ (800ae9c <__atomic_exchange_8+0x64>)
 800ae42:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800ae46:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800ae4a:	fb01 fc0c 	mul.w	ip, r1, ip
 800ae4e:	4914      	ldr	r1, [pc, #80]	@ (800aea0 <__atomic_exchange_8+0x68>)
 800ae50:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4605      	mov	r5, r0
 800ae58:	fba1 010c 	umull	r0, r1, r1, ip
 800ae5c:	0909      	lsrs	r1, r1, #4
 800ae5e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800ae62:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800ae66:	4e0f      	ldr	r6, [pc, #60]	@ (800aea4 <__atomic_exchange_8+0x6c>)
 800ae68:	ebac 0c01 	sub.w	ip, ip, r1
 800ae6c:	eb06 010c 	add.w	r1, r6, ip
 800ae70:	f04f 0e01 	mov.w	lr, #1
 800ae74:	e8d1 4f4f 	ldrexb	r4, [r1]
 800ae78:	e8c1 ef40 	strexb	r0, lr, [r1]
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d1f9      	bne.n	800ae74 <__atomic_exchange_8+0x3c>
 800ae80:	f3bf 8f5b 	dmb	ish
 800ae84:	b2e4      	uxtb	r4, r4
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	d1f4      	bne.n	800ae74 <__atomic_exchange_8+0x3c>
 800ae8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ae8e:	e9c5 2300 	strd	r2, r3, [r5]
 800ae92:	f3bf 8f5b 	dmb	ish
 800ae96:	f806 400c 	strb.w	r4, [r6, ip]
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	27d4eb2d 	.word	0x27d4eb2d
 800aea0:	b21642c9 	.word	0xb21642c9
 800aea4:	20009068 	.word	0x20009068

0800aea8 <rcutils_get_env>:
 800aea8:	b168      	cbz	r0, 800aec6 <rcutils_get_env+0x1e>
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	460c      	mov	r4, r1
 800aeae:	b129      	cbz	r1, 800aebc <rcutils_get_env+0x14>
 800aeb0:	f007 ff50 	bl	8012d54 <getenv>
 800aeb4:	b120      	cbz	r0, 800aec0 <rcutils_get_env+0x18>
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	2000      	movs	r0, #0
 800aeba:	bd10      	pop	{r4, pc}
 800aebc:	4803      	ldr	r0, [pc, #12]	@ (800aecc <rcutils_get_env+0x24>)
 800aebe:	bd10      	pop	{r4, pc}
 800aec0:	4b03      	ldr	r3, [pc, #12]	@ (800aed0 <rcutils_get_env+0x28>)
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	bd10      	pop	{r4, pc}
 800aec6:	4803      	ldr	r0, [pc, #12]	@ (800aed4 <rcutils_get_env+0x2c>)
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	08014a98 	.word	0x08014a98
 800aed0:	08014e38 	.word	0x08014e38
 800aed4:	08014a7c 	.word	0x08014a7c

0800aed8 <rcutils_is_directory>:
 800aed8:	2000      	movs	r0, #0
 800aeda:	4770      	bx	lr

0800aedc <rcutils_join_path>:
 800aedc:	b082      	sub	sp, #8
 800aede:	e88d 000c 	stmia.w	sp, {r2, r3}
 800aee2:	2000      	movs	r0, #0
 800aee4:	b002      	add	sp, #8
 800aee6:	4770      	bx	lr

0800aee8 <rcutils_to_native_path>:
 800aee8:	b084      	sub	sp, #16
 800aeea:	a801      	add	r0, sp, #4
 800aeec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800aef0:	b004      	add	sp, #16
 800aef2:	2000      	movs	r0, #0
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop

0800aef8 <rcutils_format_string_limit>:
 800aef8:	b40f      	push	{r0, r1, r2, r3}
 800aefa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefc:	b083      	sub	sp, #12
 800aefe:	ac08      	add	r4, sp, #32
 800af00:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800af02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af06:	b34e      	cbz	r6, 800af5c <rcutils_format_string_limit+0x64>
 800af08:	a808      	add	r0, sp, #32
 800af0a:	f7fc ff49 	bl	8007da0 <rcutils_allocator_is_valid>
 800af0e:	b328      	cbz	r0, 800af5c <rcutils_format_string_limit+0x64>
 800af10:	2100      	movs	r1, #0
 800af12:	ab0f      	add	r3, sp, #60	@ 0x3c
 800af14:	4632      	mov	r2, r6
 800af16:	4608      	mov	r0, r1
 800af18:	e9cd 3300 	strd	r3, r3, [sp]
 800af1c:	f000 f8f4 	bl	800b108 <rcutils_vsnprintf>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	4605      	mov	r5, r0
 800af24:	d01a      	beq.n	800af5c <rcutils_format_string_limit+0x64>
 800af26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af2a:	1c47      	adds	r7, r0, #1
 800af2c:	429f      	cmp	r7, r3
 800af2e:	bf84      	itt	hi
 800af30:	461f      	movhi	r7, r3
 800af32:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800af36:	4638      	mov	r0, r7
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	4798      	blx	r3
 800af3c:	4604      	mov	r4, r0
 800af3e:	b168      	cbz	r0, 800af5c <rcutils_format_string_limit+0x64>
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	4632      	mov	r2, r6
 800af44:	4639      	mov	r1, r7
 800af46:	f000 f8df 	bl	800b108 <rcutils_vsnprintf>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	db02      	blt.n	800af54 <rcutils_format_string_limit+0x5c>
 800af4e:	2300      	movs	r3, #0
 800af50:	5563      	strb	r3, [r4, r5]
 800af52:	e004      	b.n	800af5e <rcutils_format_string_limit+0x66>
 800af54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af58:	4620      	mov	r0, r4
 800af5a:	4798      	blx	r3
 800af5c:	2400      	movs	r4, #0
 800af5e:	4620      	mov	r0, r4
 800af60:	b003      	add	sp, #12
 800af62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800af66:	b004      	add	sp, #16
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop

0800af6c <rcutils_repl_str>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	ed2d 8b02 	vpush	{d8}
 800af74:	b087      	sub	sp, #28
 800af76:	4680      	mov	r8, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	f8cd 8004 	str.w	r8, [sp, #4]
 800af7e:	ee08 2a10 	vmov	s16, r2
 800af82:	468a      	mov	sl, r1
 800af84:	4699      	mov	r9, r3
 800af86:	f7f5 f935 	bl	80001f4 <strlen>
 800af8a:	2600      	movs	r6, #0
 800af8c:	4647      	mov	r7, r8
 800af8e:	9002      	str	r0, [sp, #8]
 800af90:	46b3      	mov	fp, r6
 800af92:	2510      	movs	r5, #16
 800af94:	46b0      	mov	r8, r6
 800af96:	e01d      	b.n	800afd4 <rcutils_repl_str+0x68>
 800af98:	f10b 0b01 	add.w	fp, fp, #1
 800af9c:	455e      	cmp	r6, fp
 800af9e:	d211      	bcs.n	800afc4 <rcutils_repl_str+0x58>
 800afa0:	442e      	add	r6, r5
 800afa2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800afa6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800afaa:	00b1      	lsls	r1, r6, #2
 800afac:	4798      	blx	r3
 800afae:	2800      	cmp	r0, #0
 800afb0:	f000 8088 	beq.w	800b0c4 <rcutils_repl_str+0x158>
 800afb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afb8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800afbc:	4680      	mov	r8, r0
 800afbe:	bf28      	it	cs
 800afc0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800afc4:	9a01      	ldr	r2, [sp, #4]
 800afc6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800afca:	1aa2      	subs	r2, r4, r2
 800afcc:	f843 2c04 	str.w	r2, [r3, #-4]
 800afd0:	9b02      	ldr	r3, [sp, #8]
 800afd2:	18e7      	adds	r7, r4, r3
 800afd4:	4651      	mov	r1, sl
 800afd6:	4638      	mov	r0, r7
 800afd8:	f008 fb9f 	bl	801371a <strstr>
 800afdc:	4604      	mov	r4, r0
 800afde:	4640      	mov	r0, r8
 800afe0:	2c00      	cmp	r4, #0
 800afe2:	d1d9      	bne.n	800af98 <rcutils_repl_str+0x2c>
 800afe4:	46b8      	mov	r8, r7
 800afe6:	4607      	mov	r7, r0
 800afe8:	4640      	mov	r0, r8
 800afea:	f7f5 f903 	bl	80001f4 <strlen>
 800afee:	9b01      	ldr	r3, [sp, #4]
 800aff0:	eba8 0303 	sub.w	r3, r8, r3
 800aff4:	181c      	adds	r4, r3, r0
 800aff6:	9404      	str	r4, [sp, #16]
 800aff8:	f1bb 0f00 	cmp.w	fp, #0
 800affc:	d04a      	beq.n	800b094 <rcutils_repl_str+0x128>
 800affe:	ee18 0a10 	vmov	r0, s16
 800b002:	f7f5 f8f7 	bl	80001f4 <strlen>
 800b006:	9b02      	ldr	r3, [sp, #8]
 800b008:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b00c:	1ac3      	subs	r3, r0, r3
 800b00e:	fb0b 4303 	mla	r3, fp, r3, r4
 800b012:	461a      	mov	r2, r3
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	4606      	mov	r6, r0
 800b018:	f8d9 3000 	ldr.w	r3, [r9]
 800b01c:	1c50      	adds	r0, r2, #1
 800b01e:	4798      	blx	r3
 800b020:	9003      	str	r0, [sp, #12]
 800b022:	2800      	cmp	r0, #0
 800b024:	d04f      	beq.n	800b0c6 <rcutils_repl_str+0x15a>
 800b026:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	4641      	mov	r1, r8
 800b02e:	f008 fc16 	bl	801385e <memcpy>
 800b032:	683d      	ldr	r5, [r7, #0]
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	9701      	str	r7, [sp, #4]
 800b038:	46ba      	mov	sl, r7
 800b03a:	441d      	add	r5, r3
 800b03c:	9f02      	ldr	r7, [sp, #8]
 800b03e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b042:	2401      	movs	r4, #1
 800b044:	46d1      	mov	r9, sl
 800b046:	ee18 aa10 	vmov	sl, s16
 800b04a:	e00a      	b.n	800b062 <rcutils_repl_str+0xf6>
 800b04c:	f8d9 5000 	ldr.w	r5, [r9]
 800b050:	1aaa      	subs	r2, r5, r2
 800b052:	1885      	adds	r5, r0, r2
 800b054:	f008 fc03 	bl	801385e <memcpy>
 800b058:	45a3      	cmp	fp, r4
 800b05a:	f104 0201 	add.w	r2, r4, #1
 800b05e:	d935      	bls.n	800b0cc <rcutils_repl_str+0x160>
 800b060:	4614      	mov	r4, r2
 800b062:	4632      	mov	r2, r6
 800b064:	4651      	mov	r1, sl
 800b066:	4628      	mov	r0, r5
 800b068:	f008 fbf9 	bl	801385e <memcpy>
 800b06c:	f859 2b04 	ldr.w	r2, [r9], #4
 800b070:	45a3      	cmp	fp, r4
 800b072:	443a      	add	r2, r7
 800b074:	eb05 0006 	add.w	r0, r5, r6
 800b078:	eb08 0102 	add.w	r1, r8, r2
 800b07c:	d1e6      	bne.n	800b04c <rcutils_repl_str+0xe0>
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	1a9a      	subs	r2, r3, r2
 800b082:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b086:	f008 fbea 	bl	801385e <memcpy>
 800b08a:	9a03      	ldr	r2, [sp, #12]
 800b08c:	9905      	ldr	r1, [sp, #20]
 800b08e:	2300      	movs	r3, #0
 800b090:	5453      	strb	r3, [r2, r1]
 800b092:	e00b      	b.n	800b0ac <rcutils_repl_str+0x140>
 800b094:	4620      	mov	r0, r4
 800b096:	f8d9 3000 	ldr.w	r3, [r9]
 800b09a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b09e:	3001      	adds	r0, #1
 800b0a0:	4798      	blx	r3
 800b0a2:	9003      	str	r0, [sp, #12]
 800b0a4:	b110      	cbz	r0, 800b0ac <rcutils_repl_str+0x140>
 800b0a6:	9901      	ldr	r1, [sp, #4]
 800b0a8:	f008 fbd1 	bl	801384e <strcpy>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b0b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b0b6:	4798      	blx	r3
 800b0b8:	9803      	ldr	r0, [sp, #12]
 800b0ba:	b007      	add	sp, #28
 800b0bc:	ecbd 8b02 	vpop	{d8}
 800b0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c4:	4647      	mov	r7, r8
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	e7ef      	b.n	800b0ac <rcutils_repl_str+0x140>
 800b0cc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b0d0:	e7db      	b.n	800b08a <rcutils_repl_str+0x11e>
 800b0d2:	bf00      	nop

0800b0d4 <rcutils_snprintf>:
 800b0d4:	b40c      	push	{r2, r3}
 800b0d6:	b530      	push	{r4, r5, lr}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	ab06      	add	r3, sp, #24
 800b0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	b152      	cbz	r2, 800b0fa <rcutils_snprintf+0x26>
 800b0e4:	b138      	cbz	r0, 800b0f6 <rcutils_snprintf+0x22>
 800b0e6:	b141      	cbz	r1, 800b0fa <rcutils_snprintf+0x26>
 800b0e8:	f008 fa24 	bl	8013534 <vsniprintf>
 800b0ec:	b003      	add	sp, #12
 800b0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f2:	b002      	add	sp, #8
 800b0f4:	4770      	bx	lr
 800b0f6:	2900      	cmp	r1, #0
 800b0f8:	d0f6      	beq.n	800b0e8 <rcutils_snprintf+0x14>
 800b0fa:	f008 fb7b 	bl	80137f4 <__errno>
 800b0fe:	2316      	movs	r3, #22
 800b100:	6003      	str	r3, [r0, #0]
 800b102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b106:	e7f1      	b.n	800b0ec <rcutils_snprintf+0x18>

0800b108 <rcutils_vsnprintf>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	b13a      	cbz	r2, 800b11c <rcutils_vsnprintf+0x14>
 800b10c:	b120      	cbz	r0, 800b118 <rcutils_vsnprintf+0x10>
 800b10e:	b129      	cbz	r1, 800b11c <rcutils_vsnprintf+0x14>
 800b110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b114:	f008 ba0e 	b.w	8013534 <vsniprintf>
 800b118:	2900      	cmp	r1, #0
 800b11a:	d0f9      	beq.n	800b110 <rcutils_vsnprintf+0x8>
 800b11c:	f008 fb6a 	bl	80137f4 <__errno>
 800b120:	2316      	movs	r3, #22
 800b122:	6003      	str	r3, [r0, #0]
 800b124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b128:	bd70      	pop	{r4, r5, r6, pc}
 800b12a:	bf00      	nop

0800b12c <rcutils_strdup>:
 800b12c:	b084      	sub	sp, #16
 800b12e:	b570      	push	{r4, r5, r6, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	ac07      	add	r4, sp, #28
 800b134:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b138:	4605      	mov	r5, r0
 800b13a:	b1b0      	cbz	r0, 800b16a <rcutils_strdup+0x3e>
 800b13c:	f7f5 f85a 	bl	80001f4 <strlen>
 800b140:	1c42      	adds	r2, r0, #1
 800b142:	9b07      	ldr	r3, [sp, #28]
 800b144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b146:	9201      	str	r2, [sp, #4]
 800b148:	4606      	mov	r6, r0
 800b14a:	4610      	mov	r0, r2
 800b14c:	4798      	blx	r3
 800b14e:	4604      	mov	r4, r0
 800b150:	b128      	cbz	r0, 800b15e <rcutils_strdup+0x32>
 800b152:	9a01      	ldr	r2, [sp, #4]
 800b154:	4629      	mov	r1, r5
 800b156:	f008 fb82 	bl	801385e <memcpy>
 800b15a:	2300      	movs	r3, #0
 800b15c:	55a3      	strb	r3, [r4, r6]
 800b15e:	4620      	mov	r0, r4
 800b160:	b002      	add	sp, #8
 800b162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b166:	b004      	add	sp, #16
 800b168:	4770      	bx	lr
 800b16a:	4604      	mov	r4, r0
 800b16c:	e7f7      	b.n	800b15e <rcutils_strdup+0x32>
 800b16e:	bf00      	nop

0800b170 <rcutils_strndup>:
 800b170:	b082      	sub	sp, #8
 800b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b174:	ac06      	add	r4, sp, #24
 800b176:	e884 000c 	stmia.w	r4, {r2, r3}
 800b17a:	4605      	mov	r5, r0
 800b17c:	b188      	cbz	r0, 800b1a2 <rcutils_strndup+0x32>
 800b17e:	1c4f      	adds	r7, r1, #1
 800b180:	460e      	mov	r6, r1
 800b182:	4638      	mov	r0, r7
 800b184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b186:	4790      	blx	r2
 800b188:	4604      	mov	r4, r0
 800b18a:	b128      	cbz	r0, 800b198 <rcutils_strndup+0x28>
 800b18c:	463a      	mov	r2, r7
 800b18e:	4629      	mov	r1, r5
 800b190:	f008 fb65 	bl	801385e <memcpy>
 800b194:	2300      	movs	r3, #0
 800b196:	55a3      	strb	r3, [r4, r6]
 800b198:	4620      	mov	r0, r4
 800b19a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b19e:	b002      	add	sp, #8
 800b1a0:	4770      	bx	lr
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	e7f8      	b.n	800b198 <rcutils_strndup+0x28>
 800b1a6:	bf00      	nop

0800b1a8 <rcutils_get_zero_initialized_string_map>:
 800b1a8:	4b01      	ldr	r3, [pc, #4]	@ (800b1b0 <rcutils_get_zero_initialized_string_map+0x8>)
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	6018      	str	r0, [r3, #0]
 800b1ae:	4770      	bx	lr
 800b1b0:	20009080 	.word	0x20009080

0800b1b4 <rcutils_string_map_reserve>:
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d05f      	beq.n	800b278 <rcutils_string_map_reserve+0xc4>
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	6801      	ldr	r1, [r0, #0]
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	b129      	cbz	r1, 800b1d2 <rcutils_string_map_reserve+0x1e>
 800b1c6:	68cb      	ldr	r3, [r1, #12]
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d906      	bls.n	800b1da <rcutils_string_map_reserve+0x26>
 800b1cc:	461c      	mov	r4, r3
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d1f9      	bne.n	800b1c6 <rcutils_string_map_reserve+0x12>
 800b1d2:	201f      	movs	r0, #31
 800b1d4:	b002      	add	sp, #8
 800b1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1da:	688b      	ldr	r3, [r1, #8]
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d047      	beq.n	800b270 <rcutils_string_map_reserve+0xbc>
 800b1e0:	6a0e      	ldr	r6, [r1, #32]
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	d034      	beq.n	800b250 <rcutils_string_map_reserve+0x9c>
 800b1e6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b1ea:	d243      	bcs.n	800b274 <rcutils_string_map_reserve+0xc0>
 800b1ec:	00a7      	lsls	r7, r4, #2
 800b1ee:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800b1f2:	6808      	ldr	r0, [r1, #0]
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	47c0      	blx	r8
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d03a      	beq.n	800b274 <rcutils_string_map_reserve+0xc0>
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	4632      	mov	r2, r6
 800b202:	6018      	str	r0, [r3, #0]
 800b204:	4639      	mov	r1, r7
 800b206:	6858      	ldr	r0, [r3, #4]
 800b208:	47c0      	blx	r8
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d032      	beq.n	800b274 <rcutils_string_map_reserve+0xc0>
 800b20e:	682d      	ldr	r5, [r5, #0]
 800b210:	68ab      	ldr	r3, [r5, #8]
 800b212:	6068      	str	r0, [r5, #4]
 800b214:	42a3      	cmp	r3, r4
 800b216:	d226      	bcs.n	800b266 <rcutils_string_map_reserve+0xb2>
 800b218:	682a      	ldr	r2, [r5, #0]
 800b21a:	eb00 0c07 	add.w	ip, r0, r7
 800b21e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800b222:	45e6      	cmp	lr, ip
 800b224:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800b228:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800b22c:	d203      	bcs.n	800b236 <rcutils_string_map_reserve+0x82>
 800b22e:	eb02 0c07 	add.w	ip, r2, r7
 800b232:	4566      	cmp	r6, ip
 800b234:	d322      	bcc.n	800b27c <rcutils_string_map_reserve+0xc8>
 800b236:	1ae3      	subs	r3, r4, r3
 800b238:	009a      	lsls	r2, r3, #2
 800b23a:	4670      	mov	r0, lr
 800b23c:	2100      	movs	r1, #0
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	f008 fa44 	bl	80136cc <memset>
 800b244:	9a01      	ldr	r2, [sp, #4]
 800b246:	2100      	movs	r1, #0
 800b248:	4630      	mov	r0, r6
 800b24a:	f008 fa3f 	bl	80136cc <memset>
 800b24e:	e00a      	b.n	800b266 <rcutils_string_map_reserve+0xb2>
 800b250:	694f      	ldr	r7, [r1, #20]
 800b252:	6808      	ldr	r0, [r1, #0]
 800b254:	4631      	mov	r1, r6
 800b256:	47b8      	blx	r7
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	4631      	mov	r1, r6
 800b25c:	6858      	ldr	r0, [r3, #4]
 800b25e:	601c      	str	r4, [r3, #0]
 800b260:	47b8      	blx	r7
 800b262:	682d      	ldr	r5, [r5, #0]
 800b264:	606c      	str	r4, [r5, #4]
 800b266:	2000      	movs	r0, #0
 800b268:	60ac      	str	r4, [r5, #8]
 800b26a:	b002      	add	sp, #8
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	2000      	movs	r0, #0
 800b272:	e7af      	b.n	800b1d4 <rcutils_string_map_reserve+0x20>
 800b274:	200a      	movs	r0, #10
 800b276:	e7ad      	b.n	800b1d4 <rcutils_string_map_reserve+0x20>
 800b278:	200b      	movs	r0, #11
 800b27a:	4770      	bx	lr
 800b27c:	1f0b      	subs	r3, r1, #4
 800b27e:	4418      	add	r0, r3
 800b280:	4413      	add	r3, r2
 800b282:	3a04      	subs	r2, #4
 800b284:	4417      	add	r7, r2
 800b286:	2200      	movs	r2, #0
 800b288:	f843 2f04 	str.w	r2, [r3, #4]!
 800b28c:	42bb      	cmp	r3, r7
 800b28e:	f840 2f04 	str.w	r2, [r0, #4]!
 800b292:	d1f9      	bne.n	800b288 <rcutils_string_map_reserve+0xd4>
 800b294:	e7e7      	b.n	800b266 <rcutils_string_map_reserve+0xb2>
 800b296:	bf00      	nop

0800b298 <rcutils_string_map_init>:
 800b298:	b082      	sub	sp, #8
 800b29a:	b570      	push	{r4, r5, r6, lr}
 800b29c:	ac04      	add	r4, sp, #16
 800b29e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b2a2:	b380      	cbz	r0, 800b306 <rcutils_string_map_init+0x6e>
 800b2a4:	6806      	ldr	r6, [r0, #0]
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	b12e      	cbz	r6, 800b2b6 <rcutils_string_map_init+0x1e>
 800b2aa:	251e      	movs	r5, #30
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2b2:	b002      	add	sp, #8
 800b2b4:	4770      	bx	lr
 800b2b6:	a804      	add	r0, sp, #16
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	f7fc fd71 	bl	8007da0 <rcutils_allocator_is_valid>
 800b2be:	b310      	cbz	r0, 800b306 <rcutils_string_map_init+0x6e>
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	9908      	ldr	r1, [sp, #32]
 800b2c4:	2024      	movs	r0, #36	@ 0x24
 800b2c6:	4798      	blx	r3
 800b2c8:	6020      	str	r0, [r4, #0]
 800b2ca:	b310      	cbz	r0, 800b312 <rcutils_string_map_init+0x7a>
 800b2cc:	f10d 0e10 	add.w	lr, sp, #16
 800b2d0:	e9c0 6600 	strd	r6, r6, [r0]
 800b2d4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800b2d8:	f100 0c10 	add.w	ip, r0, #16
 800b2dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b2e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b2e4:	f8de 3000 	ldr.w	r3, [lr]
 800b2e8:	f8cc 3000 	str.w	r3, [ip]
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff ff60 	bl	800b1b4 <rcutils_string_map_reserve>
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0d8      	beq.n	800b2ac <rcutils_string_map_init+0x14>
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	9908      	ldr	r1, [sp, #32]
 800b2fe:	6820      	ldr	r0, [r4, #0]
 800b300:	4798      	blx	r3
 800b302:	6026      	str	r6, [r4, #0]
 800b304:	e7d2      	b.n	800b2ac <rcutils_string_map_init+0x14>
 800b306:	250b      	movs	r5, #11
 800b308:	4628      	mov	r0, r5
 800b30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30e:	b002      	add	sp, #8
 800b310:	4770      	bx	lr
 800b312:	250a      	movs	r5, #10
 800b314:	e7ca      	b.n	800b2ac <rcutils_string_map_init+0x14>
 800b316:	bf00      	nop

0800b318 <rcutils_string_map_fini>:
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	2800      	cmp	r0, #0
 800b320:	d03a      	beq.n	800b398 <rcutils_string_map_fini+0x80>
 800b322:	6804      	ldr	r4, [r0, #0]
 800b324:	4606      	mov	r6, r0
 800b326:	2c00      	cmp	r4, #0
 800b328:	d032      	beq.n	800b390 <rcutils_string_map_fini+0x78>
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	b32b      	cbz	r3, 800b37a <rcutils_string_map_fini+0x62>
 800b32e:	2500      	movs	r5, #0
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	462f      	mov	r7, r5
 800b334:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b338:	b1e0      	cbz	r0, 800b374 <rcutils_string_map_fini+0x5c>
 800b33a:	6a21      	ldr	r1, [r4, #32]
 800b33c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800b340:	9101      	str	r1, [sp, #4]
 800b342:	47c0      	blx	r8
 800b344:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b348:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800b34c:	9901      	ldr	r1, [sp, #4]
 800b34e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b352:	47c0      	blx	r8
 800b354:	68e3      	ldr	r3, [r4, #12]
 800b356:	6862      	ldr	r2, [r4, #4]
 800b358:	3b01      	subs	r3, #1
 800b35a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800b35e:	60e3      	str	r3, [r4, #12]
 800b360:	6834      	ldr	r4, [r6, #0]
 800b362:	68a3      	ldr	r3, [r4, #8]
 800b364:	3501      	adds	r5, #1
 800b366:	429d      	cmp	r5, r3
 800b368:	d207      	bcs.n	800b37a <rcutils_string_map_fini+0x62>
 800b36a:	6822      	ldr	r2, [r4, #0]
 800b36c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b370:	2800      	cmp	r0, #0
 800b372:	d1e2      	bne.n	800b33a <rcutils_string_map_fini+0x22>
 800b374:	3501      	adds	r5, #1
 800b376:	429d      	cmp	r5, r3
 800b378:	d3dc      	bcc.n	800b334 <rcutils_string_map_fini+0x1c>
 800b37a:	2100      	movs	r1, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff ff19 	bl	800b1b4 <rcutils_string_map_reserve>
 800b382:	4604      	mov	r4, r0
 800b384:	b920      	cbnz	r0, 800b390 <rcutils_string_map_fini+0x78>
 800b386:	6830      	ldr	r0, [r6, #0]
 800b388:	6943      	ldr	r3, [r0, #20]
 800b38a:	6a01      	ldr	r1, [r0, #32]
 800b38c:	4798      	blx	r3
 800b38e:	6034      	str	r4, [r6, #0]
 800b390:	4620      	mov	r0, r4
 800b392:	b002      	add	sp, #8
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	240b      	movs	r4, #11
 800b39a:	4620      	mov	r0, r4
 800b39c:	b002      	add	sp, #8
 800b39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a2:	bf00      	nop

0800b3a4 <rcutils_string_map_getn>:
 800b3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	b300      	cbz	r0, 800b3ec <rcutils_string_map_getn+0x48>
 800b3aa:	6807      	ldr	r7, [r0, #0]
 800b3ac:	b1ff      	cbz	r7, 800b3ee <rcutils_string_map_getn+0x4a>
 800b3ae:	4688      	mov	r8, r1
 800b3b0:	b1e1      	cbz	r1, 800b3ec <rcutils_string_map_getn+0x48>
 800b3b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b3b6:	683e      	ldr	r6, [r7, #0]
 800b3b8:	f1ba 0f00 	cmp.w	sl, #0
 800b3bc:	d016      	beq.n	800b3ec <rcutils_string_map_getn+0x48>
 800b3be:	4691      	mov	r9, r2
 800b3c0:	3e04      	subs	r6, #4
 800b3c2:	2400      	movs	r4, #0
 800b3c4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800b3c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	3401      	adds	r4, #1
 800b3d0:	b155      	cbz	r5, 800b3e8 <rcutils_string_map_getn+0x44>
 800b3d2:	f7f4 ff0f 	bl	80001f4 <strlen>
 800b3d6:	4548      	cmp	r0, r9
 800b3d8:	4602      	mov	r2, r0
 800b3da:	4629      	mov	r1, r5
 800b3dc:	bf38      	it	cc
 800b3de:	464a      	movcc	r2, r9
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	f008 f988 	bl	80136f6 <strncmp>
 800b3e6:	b128      	cbz	r0, 800b3f4 <rcutils_string_map_getn+0x50>
 800b3e8:	45a2      	cmp	sl, r4
 800b3ea:	d1eb      	bne.n	800b3c4 <rcutils_string_map_getn+0x20>
 800b3ec:	2700      	movs	r7, #0
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f853 700b 	ldr.w	r7, [r3, fp]
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b400 <rmw_get_zero_initialized_context>:
 800b400:	b510      	push	{r4, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	3010      	adds	r0, #16
 800b406:	f000 f80b 	bl	800b420 <rmw_get_zero_initialized_init_options>
 800b40a:	2300      	movs	r3, #0
 800b40c:	2000      	movs	r0, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	e9c4 0100 	strd	r0, r1, [r4]
 800b414:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800b418:	60a3      	str	r3, [r4, #8]
 800b41a:	4620      	mov	r0, r4
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	bf00      	nop

0800b420 <rmw_get_zero_initialized_init_options>:
 800b420:	b510      	push	{r4, lr}
 800b422:	2238      	movs	r2, #56	@ 0x38
 800b424:	4604      	mov	r4, r0
 800b426:	2100      	movs	r1, #0
 800b428:	f008 f950 	bl	80136cc <memset>
 800b42c:	f104 0010 	add.w	r0, r4, #16
 800b430:	f000 f806 	bl	800b440 <rmw_get_default_security_options>
 800b434:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b438:	60e3      	str	r3, [r4, #12]
 800b43a:	4620      	mov	r0, r4
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop

0800b440 <rmw_get_default_security_options>:
 800b440:	2200      	movs	r2, #0
 800b442:	7002      	strb	r2, [r0, #0]
 800b444:	6042      	str	r2, [r0, #4]
 800b446:	4770      	bx	lr

0800b448 <rmw_subscription_content_filter_options_fini>:
 800b448:	b1b0      	cbz	r0, 800b478 <rmw_subscription_content_filter_options_fini+0x30>
 800b44a:	b538      	push	{r3, r4, r5, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	4608      	mov	r0, r1
 800b450:	460d      	mov	r5, r1
 800b452:	f7fc fca5 	bl	8007da0 <rcutils_allocator_is_valid>
 800b456:	b168      	cbz	r0, 800b474 <rmw_subscription_content_filter_options_fini+0x2c>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	b120      	cbz	r0, 800b466 <rmw_subscription_content_filter_options_fini+0x1e>
 800b45c:	686b      	ldr	r3, [r5, #4]
 800b45e:	6929      	ldr	r1, [r5, #16]
 800b460:	4798      	blx	r3
 800b462:	2300      	movs	r3, #0
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	1d20      	adds	r0, r4, #4
 800b468:	f006 fc86 	bl	8011d78 <rcutils_string_array_fini>
 800b46c:	3800      	subs	r0, #0
 800b46e:	bf18      	it	ne
 800b470:	2001      	movne	r0, #1
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	200b      	movs	r0, #11
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	200b      	movs	r0, #11
 800b47a:	4770      	bx	lr

0800b47c <rmw_get_default_subscription_options>:
 800b47c:	2200      	movs	r2, #0
 800b47e:	e9c0 2200 	strd	r2, r2, [r0]
 800b482:	6082      	str	r2, [r0, #8]
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop

0800b488 <rmw_get_zero_initialized_message_info>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	2240      	movs	r2, #64	@ 0x40
 800b48c:	4604      	mov	r4, r0
 800b48e:	2100      	movs	r1, #0
 800b490:	f008 f91c 	bl	80136cc <memset>
 800b494:	4620      	mov	r0, r4
 800b496:	bd10      	pop	{r4, pc}

0800b498 <rmw_validate_full_topic_name>:
 800b498:	2800      	cmp	r0, #0
 800b49a:	d057      	beq.n	800b54c <rmw_validate_full_topic_name+0xb4>
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	d054      	beq.n	800b550 <rmw_validate_full_topic_name+0xb8>
 800b4a6:	4616      	mov	r6, r2
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	f7f4 fea3 	bl	80001f4 <strlen>
 800b4ae:	b148      	cbz	r0, 800b4c4 <rmw_validate_full_topic_name+0x2c>
 800b4b0:	7823      	ldrb	r3, [r4, #0]
 800b4b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4b4:	d00d      	beq.n	800b4d2 <rmw_validate_full_topic_name+0x3a>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	b13e      	cbz	r6, 800b4cc <rmw_validate_full_topic_name+0x34>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	6030      	str	r0, [r6, #0]
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	602b      	str	r3, [r5, #0]
 800b4c8:	2e00      	cmp	r6, #0
 800b4ca:	d1f7      	bne.n	800b4bc <rmw_validate_full_topic_name+0x24>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d2:	1e43      	subs	r3, r0, #1
 800b4d4:	5ce2      	ldrb	r2, [r4, r3]
 800b4d6:	2a2f      	cmp	r2, #47	@ 0x2f
 800b4d8:	d03c      	beq.n	800b554 <rmw_validate_full_topic_name+0xbc>
 800b4da:	1e63      	subs	r3, r4, #1
 800b4dc:	eb03 0800 	add.w	r8, r3, r0
 800b4e0:	f1c4 0e01 	rsb	lr, r4, #1
 800b4e4:	eb0e 0703 	add.w	r7, lr, r3
 800b4e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b4ec:	f021 0220 	bic.w	r2, r1, #32
 800b4f0:	3a41      	subs	r2, #65	@ 0x41
 800b4f2:	2a19      	cmp	r2, #25
 800b4f4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800b4f8:	d90b      	bls.n	800b512 <rmw_validate_full_topic_name+0x7a>
 800b4fa:	295f      	cmp	r1, #95	@ 0x5f
 800b4fc:	d009      	beq.n	800b512 <rmw_validate_full_topic_name+0x7a>
 800b4fe:	f1bc 0f0a 	cmp.w	ip, #10
 800b502:	d906      	bls.n	800b512 <rmw_validate_full_topic_name+0x7a>
 800b504:	2304      	movs	r3, #4
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	2e00      	cmp	r6, #0
 800b50a:	d0df      	beq.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b50c:	6037      	str	r7, [r6, #0]
 800b50e:	2000      	movs	r0, #0
 800b510:	e7d6      	b.n	800b4c0 <rmw_validate_full_topic_name+0x28>
 800b512:	4543      	cmp	r3, r8
 800b514:	d1e6      	bne.n	800b4e4 <rmw_validate_full_topic_name+0x4c>
 800b516:	4f1a      	ldr	r7, [pc, #104]	@ (800b580 <rmw_validate_full_topic_name+0xe8>)
 800b518:	2301      	movs	r3, #1
 800b51a:	e004      	b.n	800b526 <rmw_validate_full_topic_name+0x8e>
 800b51c:	4298      	cmp	r0, r3
 800b51e:	f104 0401 	add.w	r4, r4, #1
 800b522:	d91c      	bls.n	800b55e <rmw_validate_full_topic_name+0xc6>
 800b524:	4613      	mov	r3, r2
 800b526:	4298      	cmp	r0, r3
 800b528:	f103 0201 	add.w	r2, r3, #1
 800b52c:	d0f6      	beq.n	800b51c <rmw_validate_full_topic_name+0x84>
 800b52e:	7821      	ldrb	r1, [r4, #0]
 800b530:	292f      	cmp	r1, #47	@ 0x2f
 800b532:	d1f3      	bne.n	800b51c <rmw_validate_full_topic_name+0x84>
 800b534:	7861      	ldrb	r1, [r4, #1]
 800b536:	292f      	cmp	r1, #47	@ 0x2f
 800b538:	d01c      	beq.n	800b574 <rmw_validate_full_topic_name+0xdc>
 800b53a:	5dc9      	ldrb	r1, [r1, r7]
 800b53c:	0749      	lsls	r1, r1, #29
 800b53e:	d5ed      	bpl.n	800b51c <rmw_validate_full_topic_name+0x84>
 800b540:	2206      	movs	r2, #6
 800b542:	602a      	str	r2, [r5, #0]
 800b544:	2e00      	cmp	r6, #0
 800b546:	d0c1      	beq.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b548:	6033      	str	r3, [r6, #0]
 800b54a:	e7bf      	b.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b54c:	200b      	movs	r0, #11
 800b54e:	4770      	bx	lr
 800b550:	200b      	movs	r0, #11
 800b552:	e7b5      	b.n	800b4c0 <rmw_validate_full_topic_name+0x28>
 800b554:	2203      	movs	r2, #3
 800b556:	602a      	str	r2, [r5, #0]
 800b558:	2e00      	cmp	r6, #0
 800b55a:	d1f5      	bne.n	800b548 <rmw_validate_full_topic_name+0xb0>
 800b55c:	e7b6      	b.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b55e:	28f7      	cmp	r0, #247	@ 0xf7
 800b560:	d802      	bhi.n	800b568 <rmw_validate_full_topic_name+0xd0>
 800b562:	2000      	movs	r0, #0
 800b564:	6028      	str	r0, [r5, #0]
 800b566:	e7ab      	b.n	800b4c0 <rmw_validate_full_topic_name+0x28>
 800b568:	2307      	movs	r3, #7
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	d0ad      	beq.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b570:	23f6      	movs	r3, #246	@ 0xf6
 800b572:	e7e9      	b.n	800b548 <rmw_validate_full_topic_name+0xb0>
 800b574:	2205      	movs	r2, #5
 800b576:	602a      	str	r2, [r5, #0]
 800b578:	2e00      	cmp	r6, #0
 800b57a:	d1e5      	bne.n	800b548 <rmw_validate_full_topic_name+0xb0>
 800b57c:	e7a6      	b.n	800b4cc <rmw_validate_full_topic_name+0x34>
 800b57e:	bf00      	nop
 800b580:	080151c0 	.word	0x080151c0

0800b584 <rmw_validate_namespace_with_size>:
 800b584:	b340      	cbz	r0, 800b5d8 <rmw_validate_namespace_with_size+0x54>
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	4614      	mov	r4, r2
 800b58a:	b0c2      	sub	sp, #264	@ 0x108
 800b58c:	b332      	cbz	r2, 800b5dc <rmw_validate_namespace_with_size+0x58>
 800b58e:	2901      	cmp	r1, #1
 800b590:	460d      	mov	r5, r1
 800b592:	461e      	mov	r6, r3
 800b594:	d102      	bne.n	800b59c <rmw_validate_namespace_with_size+0x18>
 800b596:	7803      	ldrb	r3, [r0, #0]
 800b598:	2b2f      	cmp	r3, #47	@ 0x2f
 800b59a:	d012      	beq.n	800b5c2 <rmw_validate_namespace_with_size+0x3e>
 800b59c:	aa01      	add	r2, sp, #4
 800b59e:	4669      	mov	r1, sp
 800b5a0:	f7ff ff7a 	bl	800b498 <rmw_validate_full_topic_name>
 800b5a4:	b978      	cbnz	r0, 800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5a6:	9b00      	ldr	r3, [sp, #0]
 800b5a8:	b14b      	cbz	r3, 800b5be <rmw_validate_namespace_with_size+0x3a>
 800b5aa:	2b07      	cmp	r3, #7
 800b5ac:	d007      	beq.n	800b5be <rmw_validate_namespace_with_size+0x3a>
 800b5ae:	1e5a      	subs	r2, r3, #1
 800b5b0:	2a05      	cmp	r2, #5
 800b5b2:	d82b      	bhi.n	800b60c <rmw_validate_namespace_with_size+0x88>
 800b5b4:	e8df f002 	tbb	[pc, r2]
 800b5b8:	1e212427 	.word	0x1e212427
 800b5bc:	141b      	.short	0x141b
 800b5be:	2df5      	cmp	r5, #245	@ 0xf5
 800b5c0:	d803      	bhi.n	800b5ca <rmw_validate_namespace_with_size+0x46>
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	6020      	str	r0, [r4, #0]
 800b5c6:	b042      	add	sp, #264	@ 0x108
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ca:	2307      	movs	r3, #7
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d0f9      	beq.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5d2:	23f4      	movs	r3, #244	@ 0xf4
 800b5d4:	6033      	str	r3, [r6, #0]
 800b5d6:	e7f6      	b.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5d8:	200b      	movs	r0, #11
 800b5da:	4770      	bx	lr
 800b5dc:	200b      	movs	r0, #11
 800b5de:	e7f2      	b.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5e0:	2306      	movs	r3, #6
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	d0ee      	beq.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	6033      	str	r3, [r6, #0]
 800b5ec:	e7eb      	b.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b5ee:	2305      	movs	r3, #5
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	e7f7      	b.n	800b5e4 <rmw_validate_namespace_with_size+0x60>
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	e7f4      	b.n	800b5e4 <rmw_validate_namespace_with_size+0x60>
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	e7f1      	b.n	800b5e4 <rmw_validate_namespace_with_size+0x60>
 800b600:	2302      	movs	r3, #2
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	e7ee      	b.n	800b5e4 <rmw_validate_namespace_with_size+0x60>
 800b606:	2301      	movs	r3, #1
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	e7eb      	b.n	800b5e4 <rmw_validate_namespace_with_size+0x60>
 800b60c:	4a03      	ldr	r2, [pc, #12]	@ (800b61c <rmw_validate_namespace_with_size+0x98>)
 800b60e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b612:	a802      	add	r0, sp, #8
 800b614:	f7ff fd5e 	bl	800b0d4 <rcutils_snprintf>
 800b618:	2001      	movs	r0, #1
 800b61a:	e7d4      	b.n	800b5c6 <rmw_validate_namespace_with_size+0x42>
 800b61c:	08014ab4 	.word	0x08014ab4

0800b620 <rmw_validate_namespace>:
 800b620:	b168      	cbz	r0, 800b63e <rmw_validate_namespace+0x1e>
 800b622:	b570      	push	{r4, r5, r6, lr}
 800b624:	460d      	mov	r5, r1
 800b626:	4616      	mov	r6, r2
 800b628:	4604      	mov	r4, r0
 800b62a:	f7f4 fde3 	bl	80001f4 <strlen>
 800b62e:	4633      	mov	r3, r6
 800b630:	4601      	mov	r1, r0
 800b632:	462a      	mov	r2, r5
 800b634:	4620      	mov	r0, r4
 800b636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b63a:	f7ff bfa3 	b.w	800b584 <rmw_validate_namespace_with_size>
 800b63e:	200b      	movs	r0, #11
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop

0800b644 <rmw_namespace_validation_result_string>:
 800b644:	2807      	cmp	r0, #7
 800b646:	bf9a      	itte	ls
 800b648:	4b02      	ldrls	r3, [pc, #8]	@ (800b654 <rmw_namespace_validation_result_string+0x10>)
 800b64a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b64e:	4802      	ldrhi	r0, [pc, #8]	@ (800b658 <rmw_namespace_validation_result_string+0x14>)
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	08014cac 	.word	0x08014cac
 800b658:	08014b04 	.word	0x08014b04

0800b65c <rmw_validate_node_name>:
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d03b      	beq.n	800b6d8 <rmw_validate_node_name+0x7c>
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	460d      	mov	r5, r1
 800b666:	2900      	cmp	r1, #0
 800b668:	d038      	beq.n	800b6dc <rmw_validate_node_name+0x80>
 800b66a:	4616      	mov	r6, r2
 800b66c:	4604      	mov	r4, r0
 800b66e:	f7f4 fdc1 	bl	80001f4 <strlen>
 800b672:	b1e0      	cbz	r0, 800b6ae <rmw_validate_node_name+0x52>
 800b674:	1e63      	subs	r3, r4, #1
 800b676:	eb03 0800 	add.w	r8, r3, r0
 800b67a:	f1c4 0101 	rsb	r1, r4, #1
 800b67e:	18cf      	adds	r7, r1, r3
 800b680:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800b684:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800b688:	f02e 0c20 	bic.w	ip, lr, #32
 800b68c:	2a09      	cmp	r2, #9
 800b68e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800b692:	d914      	bls.n	800b6be <rmw_validate_node_name+0x62>
 800b694:	f1bc 0f19 	cmp.w	ip, #25
 800b698:	d911      	bls.n	800b6be <rmw_validate_node_name+0x62>
 800b69a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800b69e:	d00e      	beq.n	800b6be <rmw_validate_node_name+0x62>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	b106      	cbz	r6, 800b6a8 <rmw_validate_node_name+0x4c>
 800b6a6:	6037      	str	r7, [r6, #0]
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	2e00      	cmp	r6, #0
 800b6b4:	d0f8      	beq.n	800b6a8 <rmw_validate_node_name+0x4c>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	6030      	str	r0, [r6, #0]
 800b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6be:	4543      	cmp	r3, r8
 800b6c0:	d1dd      	bne.n	800b67e <rmw_validate_node_name+0x22>
 800b6c2:	7822      	ldrb	r2, [r4, #0]
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b6fc <rmw_validate_node_name+0xa0>)
 800b6c6:	5cd3      	ldrb	r3, [r2, r3]
 800b6c8:	f013 0304 	ands.w	r3, r3, #4
 800b6cc:	d110      	bne.n	800b6f0 <rmw_validate_node_name+0x94>
 800b6ce:	28ff      	cmp	r0, #255	@ 0xff
 800b6d0:	d806      	bhi.n	800b6e0 <rmw_validate_node_name+0x84>
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	e7e8      	b.n	800b6aa <rmw_validate_node_name+0x4e>
 800b6d8:	200b      	movs	r0, #11
 800b6da:	4770      	bx	lr
 800b6dc:	200b      	movs	r0, #11
 800b6de:	e7e4      	b.n	800b6aa <rmw_validate_node_name+0x4e>
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	602a      	str	r2, [r5, #0]
 800b6e4:	2e00      	cmp	r6, #0
 800b6e6:	d0df      	beq.n	800b6a8 <rmw_validate_node_name+0x4c>
 800b6e8:	22fe      	movs	r2, #254	@ 0xfe
 800b6ea:	6032      	str	r2, [r6, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	e7dc      	b.n	800b6aa <rmw_validate_node_name+0x4e>
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	602b      	str	r3, [r5, #0]
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	d1de      	bne.n	800b6b6 <rmw_validate_node_name+0x5a>
 800b6f8:	e7d6      	b.n	800b6a8 <rmw_validate_node_name+0x4c>
 800b6fa:	bf00      	nop
 800b6fc:	080151c0 	.word	0x080151c0

0800b700 <rmw_node_name_validation_result_string>:
 800b700:	2804      	cmp	r0, #4
 800b702:	bf9a      	itte	ls
 800b704:	4b02      	ldrls	r3, [pc, #8]	@ (800b710 <rmw_node_name_validation_result_string+0x10>)
 800b706:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b70a:	4802      	ldrhi	r0, [pc, #8]	@ (800b714 <rmw_node_name_validation_result_string+0x14>)
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	08014db8 	.word	0x08014db8
 800b714:	08014ccc 	.word	0x08014ccc

0800b718 <rmw_destroy_client>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	b128      	cbz	r0, 800b728 <rmw_destroy_client+0x10>
 800b71c:	4604      	mov	r4, r0
 800b71e:	6800      	ldr	r0, [r0, #0]
 800b720:	460d      	mov	r5, r1
 800b722:	f001 fc4b 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800b726:	b910      	cbnz	r0, 800b72e <rmw_destroy_client+0x16>
 800b728:	2401      	movs	r4, #1
 800b72a:	4620      	mov	r0, r4
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0f9      	beq.n	800b728 <rmw_destroy_client+0x10>
 800b734:	2d00      	cmp	r5, #0
 800b736:	d0f7      	beq.n	800b728 <rmw_destroy_client+0x10>
 800b738:	6828      	ldr	r0, [r5, #0]
 800b73a:	f001 fc3f 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d0f2      	beq.n	800b728 <rmw_destroy_client+0x10>
 800b742:	686e      	ldr	r6, [r5, #4]
 800b744:	2e00      	cmp	r6, #0
 800b746:	d0ef      	beq.n	800b728 <rmw_destroy_client+0x10>
 800b748:	6864      	ldr	r4, [r4, #4]
 800b74a:	6932      	ldr	r2, [r6, #16]
 800b74c:	6920      	ldr	r0, [r4, #16]
 800b74e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b752:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b756:	6819      	ldr	r1, [r3, #0]
 800b758:	f003 f810 	bl	800e77c <uxr_buffer_cancel_data>
 800b75c:	4602      	mov	r2, r0
 800b75e:	6920      	ldr	r0, [r4, #16]
 800b760:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b764:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b768:	f001 fba8 	bl	800cebc <run_xrce_session>
 800b76c:	6920      	ldr	r0, [r4, #16]
 800b76e:	6932      	ldr	r2, [r6, #16]
 800b770:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b774:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	f002 fd77 	bl	800e26c <uxr_buffer_delete_entity>
 800b77e:	4602      	mov	r2, r0
 800b780:	6920      	ldr	r0, [r4, #16]
 800b782:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b786:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b78a:	f001 fb97 	bl	800cebc <run_xrce_session>
 800b78e:	2800      	cmp	r0, #0
 800b790:	4628      	mov	r0, r5
 800b792:	bf14      	ite	ne
 800b794:	2400      	movne	r4, #0
 800b796:	2402      	moveq	r4, #2
 800b798:	f001 fa78 	bl	800cc8c <rmw_uxrce_fini_client_memory>
 800b79c:	e7c5      	b.n	800b72a <rmw_destroy_client+0x12>
 800b79e:	bf00      	nop

0800b7a0 <rmw_get_implementation_identifier>:
 800b7a0:	4b01      	ldr	r3, [pc, #4]	@ (800b7a8 <rmw_get_implementation_identifier+0x8>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	0801514c 	.word	0x0801514c

0800b7ac <rmw_init_options_init>:
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	ad09      	add	r5, sp, #36	@ 0x24
 800b7b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b7b8:	b130      	cbz	r0, 800b7c8 <rmw_init_options_init+0x1c>
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f7fc faef 	bl	8007da0 <rcutils_allocator_is_valid>
 800b7c2:	b108      	cbz	r0, 800b7c8 <rmw_init_options_init+0x1c>
 800b7c4:	68a6      	ldr	r6, [r4, #8]
 800b7c6:	b12e      	cbz	r6, 800b7d4 <rmw_init_options_init+0x28>
 800b7c8:	200b      	movs	r0, #11
 800b7ca:	b003      	add	sp, #12
 800b7cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b7d0:	b004      	add	sp, #16
 800b7d2:	4770      	bx	lr
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e9c4 2300 	strd	r2, r3, [r4]
 800b7dc:	4b22      	ldr	r3, [pc, #136]	@ (800b868 <rmw_init_options_init+0xbc>)
 800b7de:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b878 <rmw_init_options_init+0xcc>
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60a3      	str	r3, [r4, #8]
 800b7e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7e8:	f104 0c20 	add.w	ip, r4, #32
 800b7ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7f0:	466f      	mov	r7, sp
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	f8cc 3000 	str.w	r3, [ip]
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b7fe:	60e6      	str	r6, [r4, #12]
 800b800:	f7ff fe1e 	bl	800b440 <rmw_get_default_security_options>
 800b804:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b808:	f104 0310 	add.w	r3, r4, #16
 800b80c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b810:	2203      	movs	r2, #3
 800b812:	4816      	ldr	r0, [pc, #88]	@ (800b86c <rmw_init_options_init+0xc0>)
 800b814:	4916      	ldr	r1, [pc, #88]	@ (800b870 <rmw_init_options_init+0xc4>)
 800b816:	7626      	strb	r6, [r4, #24]
 800b818:	f001 f978 	bl	800cb0c <rmw_uxrce_init_init_options_impl_memory>
 800b81c:	4813      	ldr	r0, [pc, #76]	@ (800b86c <rmw_init_options_init+0xc0>)
 800b81e:	f006 fc3f 	bl	80120a0 <get_memory>
 800b822:	b1f0      	cbz	r0, 800b862 <rmw_init_options_init+0xb6>
 800b824:	4a13      	ldr	r2, [pc, #76]	@ (800b874 <rmw_init_options_init+0xc8>)
 800b826:	6883      	ldr	r3, [r0, #8]
 800b828:	6851      	ldr	r1, [r2, #4]
 800b82a:	7810      	ldrb	r0, [r2, #0]
 800b82c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b82e:	7418      	strb	r0, [r3, #16]
 800b830:	6159      	str	r1, [r3, #20]
 800b832:	68d1      	ldr	r1, [r2, #12]
 800b834:	61d9      	str	r1, [r3, #28]
 800b836:	6911      	ldr	r1, [r2, #16]
 800b838:	6219      	str	r1, [r3, #32]
 800b83a:	6951      	ldr	r1, [r2, #20]
 800b83c:	6892      	ldr	r2, [r2, #8]
 800b83e:	619a      	str	r2, [r3, #24]
 800b840:	6259      	str	r1, [r3, #36]	@ 0x24
 800b842:	f004 ff4f 	bl	80106e4 <uxr_nanos>
 800b846:	f007 fb8b 	bl	8012f60 <srand>
 800b84a:	f007 fbb7 	bl	8012fbc <rand>
 800b84e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b850:	6298      	str	r0, [r3, #40]	@ 0x28
 800b852:	2800      	cmp	r0, #0
 800b854:	d0f9      	beq.n	800b84a <rmw_init_options_init+0x9e>
 800b856:	2000      	movs	r0, #0
 800b858:	b003      	add	sp, #12
 800b85a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b85e:	b004      	add	sp, #16
 800b860:	4770      	bx	lr
 800b862:	2001      	movs	r0, #1
 800b864:	e7b1      	b.n	800b7ca <rmw_init_options_init+0x1e>
 800b866:	bf00      	nop
 800b868:	0801514c 	.word	0x0801514c
 800b86c:	2000d97c 	.word	0x2000d97c
 800b870:	20009218 	.word	0x20009218
 800b874:	20008fd4 	.word	0x20008fd4
 800b878:	08014844 	.word	0x08014844

0800b87c <rmw_init_options_copy>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	b158      	cbz	r0, 800b898 <rmw_init_options_copy+0x1c>
 800b880:	460d      	mov	r5, r1
 800b882:	b149      	cbz	r1, 800b898 <rmw_init_options_copy+0x1c>
 800b884:	4604      	mov	r4, r0
 800b886:	6880      	ldr	r0, [r0, #8]
 800b888:	b120      	cbz	r0, 800b894 <rmw_init_options_copy+0x18>
 800b88a:	4b1e      	ldr	r3, [pc, #120]	@ (800b904 <rmw_init_options_copy+0x88>)
 800b88c:	6819      	ldr	r1, [r3, #0]
 800b88e:	f7f4 fca7 	bl	80001e0 <strcmp>
 800b892:	bb90      	cbnz	r0, 800b8fa <rmw_init_options_copy+0x7e>
 800b894:	68ab      	ldr	r3, [r5, #8]
 800b896:	b113      	cbz	r3, 800b89e <rmw_init_options_copy+0x22>
 800b898:	250b      	movs	r5, #11
 800b89a:	4628      	mov	r0, r5
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	4623      	mov	r3, r4
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b8a6:	f8d3 c000 	ldr.w	ip, [r3]
 800b8aa:	6858      	ldr	r0, [r3, #4]
 800b8ac:	6899      	ldr	r1, [r3, #8]
 800b8ae:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b8b2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b8b6:	3310      	adds	r3, #16
 800b8b8:	42b3      	cmp	r3, r6
 800b8ba:	f8c2 c000 	str.w	ip, [r2]
 800b8be:	6050      	str	r0, [r2, #4]
 800b8c0:	6091      	str	r1, [r2, #8]
 800b8c2:	f102 0210 	add.w	r2, r2, #16
 800b8c6:	d1ee      	bne.n	800b8a6 <rmw_init_options_copy+0x2a>
 800b8c8:	6819      	ldr	r1, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	480e      	ldr	r0, [pc, #56]	@ (800b908 <rmw_init_options_copy+0x8c>)
 800b8ce:	6053      	str	r3, [r2, #4]
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	f006 fbe5 	bl	80120a0 <get_memory>
 800b8d6:	b198      	cbz	r0, 800b900 <rmw_init_options_copy+0x84>
 800b8d8:	6883      	ldr	r3, [r0, #8]
 800b8da:	636b      	str	r3, [r5, #52]	@ 0x34
 800b8dc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b8de:	f102 0c10 	add.w	ip, r2, #16
 800b8e2:	f103 0410 	add.w	r4, r3, #16
 800b8e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	bd70      	pop	{r4, r5, r6, pc}
 800b8fa:	250c      	movs	r5, #12
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	2501      	movs	r5, #1
 800b902:	e7ca      	b.n	800b89a <rmw_init_options_copy+0x1e>
 800b904:	0801514c 	.word	0x0801514c
 800b908:	2000d97c 	.word	0x2000d97c

0800b90c <rmw_init_options_fini>:
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d03d      	beq.n	800b98c <rmw_init_options_fini+0x80>
 800b910:	b510      	push	{r4, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	b08e      	sub	sp, #56	@ 0x38
 800b916:	3020      	adds	r0, #32
 800b918:	f7fc fa42 	bl	8007da0 <rcutils_allocator_is_valid>
 800b91c:	b360      	cbz	r0, 800b978 <rmw_init_options_fini+0x6c>
 800b91e:	68a0      	ldr	r0, [r4, #8]
 800b920:	b120      	cbz	r0, 800b92c <rmw_init_options_fini+0x20>
 800b922:	4b1c      	ldr	r3, [pc, #112]	@ (800b994 <rmw_init_options_fini+0x88>)
 800b924:	6819      	ldr	r1, [r3, #0]
 800b926:	f7f4 fc5b 	bl	80001e0 <strcmp>
 800b92a:	bb68      	cbnz	r0, 800b988 <rmw_init_options_fini+0x7c>
 800b92c:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <rmw_init_options_fini+0x8c>)
 800b92e:	6819      	ldr	r1, [r3, #0]
 800b930:	b331      	cbz	r1, 800b980 <rmw_init_options_fini+0x74>
 800b932:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b934:	e001      	b.n	800b93a <rmw_init_options_fini+0x2e>
 800b936:	6849      	ldr	r1, [r1, #4]
 800b938:	b311      	cbz	r1, 800b980 <rmw_init_options_fini+0x74>
 800b93a:	688b      	ldr	r3, [r1, #8]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d1fa      	bne.n	800b936 <rmw_init_options_fini+0x2a>
 800b940:	4815      	ldr	r0, [pc, #84]	@ (800b998 <rmw_init_options_fini+0x8c>)
 800b942:	f006 fbbd 	bl	80120c0 <put_memory>
 800b946:	4668      	mov	r0, sp
 800b948:	f7ff fd6a 	bl	800b420 <rmw_get_zero_initialized_init_options>
 800b94c:	46ee      	mov	lr, sp
 800b94e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b952:	46a4      	mov	ip, r4
 800b954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b958:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b95c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b960:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b968:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b96c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b970:	2300      	movs	r3, #0
 800b972:	4618      	mov	r0, r3
 800b974:	b00e      	add	sp, #56	@ 0x38
 800b976:	bd10      	pop	{r4, pc}
 800b978:	230b      	movs	r3, #11
 800b97a:	4618      	mov	r0, r3
 800b97c:	b00e      	add	sp, #56	@ 0x38
 800b97e:	bd10      	pop	{r4, pc}
 800b980:	2301      	movs	r3, #1
 800b982:	4618      	mov	r0, r3
 800b984:	b00e      	add	sp, #56	@ 0x38
 800b986:	bd10      	pop	{r4, pc}
 800b988:	230c      	movs	r3, #12
 800b98a:	e7f2      	b.n	800b972 <rmw_init_options_fini+0x66>
 800b98c:	230b      	movs	r3, #11
 800b98e:	4618      	mov	r0, r3
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	0801514c 	.word	0x0801514c
 800b998:	2000d97c 	.word	0x2000d97c

0800b99c <rmw_init>:
 800b99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f000 80d3 	beq.w	800bb4e <rmw_init+0x1b2>
 800b9a8:	460e      	mov	r6, r1
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	f000 80cf 	beq.w	800bb4e <rmw_init+0x1b2>
 800b9b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 80ca 	beq.w	800bb4e <rmw_init+0x1b2>
 800b9ba:	4b78      	ldr	r3, [pc, #480]	@ (800bb9c <rmw_init+0x200>)
 800b9bc:	6880      	ldr	r0, [r0, #8]
 800b9be:	681f      	ldr	r7, [r3, #0]
 800b9c0:	b128      	cbz	r0, 800b9ce <rmw_init+0x32>
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f4 fc0c 	bl	80001e0 <strcmp>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	f040 80ca 	bne.w	800bb62 <rmw_init+0x1c6>
 800b9ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9d2:	4c73      	ldr	r4, [pc, #460]	@ (800bba0 <rmw_init+0x204>)
 800b9d4:	4973      	ldr	r1, [pc, #460]	@ (800bba4 <rmw_init+0x208>)
 800b9d6:	4874      	ldr	r0, [pc, #464]	@ (800bba8 <rmw_init+0x20c>)
 800b9d8:	60b7      	str	r7, [r6, #8]
 800b9da:	e9c6 2300 	strd	r2, r3, [r6]
 800b9de:	68eb      	ldr	r3, [r5, #12]
 800b9e0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f001 f832 	bl	800ca4c <rmw_uxrce_init_session_memory>
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4970      	ldr	r1, [pc, #448]	@ (800bbac <rmw_init+0x210>)
 800b9ec:	2204      	movs	r2, #4
 800b9ee:	f001 f86d 	bl	800cacc <rmw_uxrce_init_static_input_buffer_memory>
 800b9f2:	f04f 0800 	mov.w	r8, #0
 800b9f6:	486c      	ldr	r0, [pc, #432]	@ (800bba8 <rmw_init+0x20c>)
 800b9f8:	f884 800d 	strb.w	r8, [r4, #13]
 800b9fc:	f006 fb50 	bl	80120a0 <get_memory>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	f000 80a9 	beq.w	800bb58 <rmw_init+0x1bc>
 800ba06:	6884      	ldr	r4, [r0, #8]
 800ba08:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ba0a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ba0c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ba10:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ba14:	9101      	str	r1, [sp, #4]
 800ba16:	6a00      	ldr	r0, [r0, #32]
 800ba18:	9000      	str	r0, [sp, #0]
 800ba1a:	f104 0910 	add.w	r9, r4, #16
 800ba1e:	4661      	mov	r1, ip
 800ba20:	4648      	mov	r0, r9
 800ba22:	f002 fdfb 	bl	800e61c <uxr_set_custom_transport_callbacks>
 800ba26:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ba2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba2e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ba32:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ba36:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ba3a:	495d      	ldr	r1, [pc, #372]	@ (800bbb0 <rmw_init+0x214>)
 800ba3c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ba40:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ba44:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ba48:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ba4c:	4859      	ldr	r0, [pc, #356]	@ (800bbb4 <rmw_init+0x218>)
 800ba4e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ba52:	2201      	movs	r2, #1
 800ba54:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ba56:	f000 ffd9 	bl	800ca0c <rmw_uxrce_init_node_memory>
 800ba5a:	4957      	ldr	r1, [pc, #348]	@ (800bbb8 <rmw_init+0x21c>)
 800ba5c:	4857      	ldr	r0, [pc, #348]	@ (800bbbc <rmw_init+0x220>)
 800ba5e:	2205      	movs	r2, #5
 800ba60:	f000 ffb4 	bl	800c9cc <rmw_uxrce_init_subscription_memory>
 800ba64:	4956      	ldr	r1, [pc, #344]	@ (800bbc0 <rmw_init+0x224>)
 800ba66:	4857      	ldr	r0, [pc, #348]	@ (800bbc4 <rmw_init+0x228>)
 800ba68:	220a      	movs	r2, #10
 800ba6a:	f000 ff8f 	bl	800c98c <rmw_uxrce_init_publisher_memory>
 800ba6e:	4956      	ldr	r1, [pc, #344]	@ (800bbc8 <rmw_init+0x22c>)
 800ba70:	4856      	ldr	r0, [pc, #344]	@ (800bbcc <rmw_init+0x230>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	f000 ff4a 	bl	800c90c <rmw_uxrce_init_service_memory>
 800ba78:	4955      	ldr	r1, [pc, #340]	@ (800bbd0 <rmw_init+0x234>)
 800ba7a:	4856      	ldr	r0, [pc, #344]	@ (800bbd4 <rmw_init+0x238>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f000 ff65 	bl	800c94c <rmw_uxrce_init_client_memory>
 800ba82:	4955      	ldr	r1, [pc, #340]	@ (800bbd8 <rmw_init+0x23c>)
 800ba84:	4855      	ldr	r0, [pc, #340]	@ (800bbdc <rmw_init+0x240>)
 800ba86:	220f      	movs	r2, #15
 800ba88:	f001 f800 	bl	800ca8c <rmw_uxrce_init_topic_memory>
 800ba8c:	4954      	ldr	r1, [pc, #336]	@ (800bbe0 <rmw_init+0x244>)
 800ba8e:	4855      	ldr	r0, [pc, #340]	@ (800bbe4 <rmw_init+0x248>)
 800ba90:	2203      	movs	r2, #3
 800ba92:	f001 f83b 	bl	800cb0c <rmw_uxrce_init_init_options_impl_memory>
 800ba96:	4954      	ldr	r1, [pc, #336]	@ (800bbe8 <rmw_init+0x24c>)
 800ba98:	4854      	ldr	r0, [pc, #336]	@ (800bbec <rmw_init+0x250>)
 800ba9a:	2204      	movs	r2, #4
 800ba9c:	f001 f856 	bl	800cb4c <rmw_uxrce_init_wait_set_memory>
 800baa0:	4953      	ldr	r1, [pc, #332]	@ (800bbf0 <rmw_init+0x254>)
 800baa2:	4854      	ldr	r0, [pc, #336]	@ (800bbf4 <rmw_init+0x258>)
 800baa4:	2204      	movs	r2, #4
 800baa6:	f001 f871 	bl	800cb8c <rmw_uxrce_init_guard_condition_memory>
 800baaa:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800baac:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800baae:	4642      	mov	r2, r8
 800bab0:	f000 fd7e 	bl	800c5b0 <rmw_uxrce_transport_init>
 800bab4:	4607      	mov	r7, r0
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d158      	bne.n	800bb6c <rmw_init+0x1d0>
 800baba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800babc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bac2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bac6:	4628      	mov	r0, r5
 800bac8:	f002 ffde 	bl	800ea88 <uxr_init_session>
 800bacc:	494a      	ldr	r1, [pc, #296]	@ (800bbf8 <rmw_init+0x25c>)
 800bace:	4622      	mov	r2, r4
 800bad0:	4628      	mov	r0, r5
 800bad2:	f002 fffd 	bl	800ead0 <uxr_set_topic_callback>
 800bad6:	4949      	ldr	r1, [pc, #292]	@ (800bbfc <rmw_init+0x260>)
 800bad8:	463a      	mov	r2, r7
 800bada:	4628      	mov	r0, r5
 800badc:	f002 fff4 	bl	800eac8 <uxr_set_status_callback>
 800bae0:	4947      	ldr	r1, [pc, #284]	@ (800bc00 <rmw_init+0x264>)
 800bae2:	463a      	mov	r2, r7
 800bae4:	4628      	mov	r0, r5
 800bae6:	f002 fff7 	bl	800ead8 <uxr_set_request_callback>
 800baea:	4946      	ldr	r1, [pc, #280]	@ (800bc04 <rmw_init+0x268>)
 800baec:	463a      	mov	r2, r7
 800baee:	4628      	mov	r0, r5
 800baf0:	f002 fff6 	bl	800eae0 <uxr_set_reply_callback>
 800baf4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800baf8:	2304      	movs	r3, #4
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bb00:	4628      	mov	r0, r5
 800bb02:	f003 f82b 	bl	800eb5c <uxr_create_input_reliable_stream>
 800bb06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bb0a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bb0e:	0092      	lsls	r2, r2, #2
 800bb10:	2304      	movs	r3, #4
 800bb12:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bb16:	4628      	mov	r0, r5
 800bb18:	f002 fff8 	bl	800eb0c <uxr_create_output_reliable_stream>
 800bb1c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bb20:	4628      	mov	r0, r5
 800bb22:	f003 f815 	bl	800eb50 <uxr_create_input_best_effort_stream>
 800bb26:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bb2a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bb2e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bb32:	3114      	adds	r1, #20
 800bb34:	4628      	mov	r0, r5
 800bb36:	f002 ffd7 	bl	800eae8 <uxr_create_output_best_effort_stream>
 800bb3a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f003 fd62 	bl	800f608 <uxr_create_session>
 800bb44:	b1f8      	cbz	r0, 800bb86 <rmw_init+0x1ea>
 800bb46:	4638      	mov	r0, r7
 800bb48:	b003      	add	sp, #12
 800bb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	270b      	movs	r7, #11
 800bb50:	4638      	mov	r0, r7
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb58:	2701      	movs	r7, #1
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	b003      	add	sp, #12
 800bb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb62:	270c      	movs	r7, #12
 800bb64:	4638      	mov	r0, r7
 800bb66:	b003      	add	sp, #12
 800bb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f002 fd97 	bl	800e6a0 <uxr_close_custom_transport>
 800bb72:	480d      	ldr	r0, [pc, #52]	@ (800bba8 <rmw_init+0x20c>)
 800bb74:	4621      	mov	r1, r4
 800bb76:	f006 faa3 	bl	80120c0 <put_memory>
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800bb80:	b003      	add	sp, #12
 800bb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb86:	4648      	mov	r0, r9
 800bb88:	f002 fd8a 	bl	800e6a0 <uxr_close_custom_transport>
 800bb8c:	4806      	ldr	r0, [pc, #24]	@ (800bba8 <rmw_init+0x20c>)
 800bb8e:	4621      	mov	r1, r4
 800bb90:	f006 fa96 	bl	80120c0 <put_memory>
 800bb94:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800bb96:	2701      	movs	r7, #1
 800bb98:	e7d5      	b.n	800bb46 <rmw_init+0x1aa>
 800bb9a:	bf00      	nop
 800bb9c:	0801514c 	.word	0x0801514c
 800bba0:	2000d9cc 	.word	0x2000d9cc
 800bba4:	20009c78 	.word	0x20009c78
 800bba8:	2000d9bc 	.word	0x2000d9bc
 800bbac:	2000b220 	.word	0x2000b220
 800bbb0:	2000929c 	.word	0x2000929c
 800bbb4:	2000d98c 	.word	0x2000d98c
 800bbb8:	2000d320 	.word	0x2000d320
 800bbbc:	2000d9dc 	.word	0x2000d9dc
 800bbc0:	20009340 	.word	0x20009340
 800bbc4:	2000d99c 	.word	0x2000d99c
 800bbc8:	20009bb0 	.word	0x20009bb0
 800bbcc:	2000d9ac 	.word	0x2000d9ac
 800bbd0:	200090d0 	.word	0x200090d0
 800bbd4:	200090c0 	.word	0x200090c0
 800bbd8:	2000d758 	.word	0x2000d758
 800bbdc:	2000d9ec 	.word	0x2000d9ec
 800bbe0:	20009218 	.word	0x20009218
 800bbe4:	2000d97c 	.word	0x2000d97c
 800bbe8:	2000d8fc 	.word	0x2000d8fc
 800bbec:	2000d9fc 	.word	0x2000d9fc
 800bbf0:	20009198 	.word	0x20009198
 800bbf4:	2000d96c 	.word	0x2000d96c
 800bbf8:	08011ed9 	.word	0x08011ed9
 800bbfc:	08011ed1 	.word	0x08011ed1
 800bc00:	08011f71 	.word	0x08011f71
 800bc04:	0801200d 	.word	0x0801200d

0800bc08 <rmw_context_fini>:
 800bc08:	4b17      	ldr	r3, [pc, #92]	@ (800bc68 <rmw_context_fini+0x60>)
 800bc0a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	681c      	ldr	r4, [r3, #0]
 800bc10:	4605      	mov	r5, r0
 800bc12:	b334      	cbz	r4, 800bc62 <rmw_context_fini+0x5a>
 800bc14:	2600      	movs	r6, #0
 800bc16:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800bc1a:	6902      	ldr	r2, [r0, #16]
 800bc1c:	428a      	cmp	r2, r1
 800bc1e:	d018      	beq.n	800bc52 <rmw_context_fini+0x4a>
 800bc20:	2c00      	cmp	r4, #0
 800bc22:	d1f8      	bne.n	800bc16 <rmw_context_fini+0xe>
 800bc24:	b189      	cbz	r1, 800bc4a <rmw_context_fini+0x42>
 800bc26:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800bc2a:	789b      	ldrb	r3, [r3, #2]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800bc32:	bf14      	ite	ne
 800bc34:	210a      	movne	r1, #10
 800bc36:	2100      	moveq	r1, #0
 800bc38:	f003 fcbe 	bl	800f5b8 <uxr_delete_session_retries>
 800bc3c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bc3e:	f000 ffc5 	bl	800cbcc <rmw_uxrce_fini_session_memory>
 800bc42:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bc44:	3010      	adds	r0, #16
 800bc46:	f002 fd2b 	bl	800e6a0 <uxr_close_custom_transport>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800bc4e:	4630      	mov	r0, r6
 800bc50:	bd70      	pop	{r4, r5, r6, pc}
 800bc52:	3018      	adds	r0, #24
 800bc54:	f000 f89c 	bl	800bd90 <rmw_destroy_node>
 800bc58:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	d1da      	bne.n	800bc16 <rmw_context_fini+0xe>
 800bc60:	e7e0      	b.n	800bc24 <rmw_context_fini+0x1c>
 800bc62:	4626      	mov	r6, r4
 800bc64:	e7de      	b.n	800bc24 <rmw_context_fini+0x1c>
 800bc66:	bf00      	nop
 800bc68:	2000d98c 	.word	0x2000d98c

0800bc6c <create_node>:
 800bc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc70:	b083      	sub	sp, #12
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d05f      	beq.n	800bd36 <create_node+0xca>
 800bc76:	4606      	mov	r6, r0
 800bc78:	4835      	ldr	r0, [pc, #212]	@ (800bd50 <create_node+0xe4>)
 800bc7a:	460f      	mov	r7, r1
 800bc7c:	4690      	mov	r8, r2
 800bc7e:	461d      	mov	r5, r3
 800bc80:	f006 fa0e 	bl	80120a0 <get_memory>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d056      	beq.n	800bd36 <create_node+0xca>
 800bc88:	6884      	ldr	r4, [r0, #8]
 800bc8a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bc8c:	6123      	str	r3, [r4, #16]
 800bc8e:	f7ff fd87 	bl	800b7a0 <rmw_get_implementation_identifier>
 800bc92:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bc96:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bc9a:	f8c4 9020 	str.w	r9, [r4, #32]
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7f4 faa8 	bl	80001f4 <strlen>
 800bca4:	1c42      	adds	r2, r0, #1
 800bca6:	2a3c      	cmp	r2, #60	@ 0x3c
 800bca8:	f104 0518 	add.w	r5, r4, #24
 800bcac:	d840      	bhi.n	800bd30 <create_node+0xc4>
 800bcae:	4648      	mov	r0, r9
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bcb6:	f007 fdd2 	bl	801385e <memcpy>
 800bcba:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	f7f4 fa98 	bl	80001f4 <strlen>
 800bcc4:	1c42      	adds	r2, r0, #1
 800bcc6:	2a3c      	cmp	r2, #60	@ 0x3c
 800bcc8:	d832      	bhi.n	800bd30 <create_node+0xc4>
 800bcca:	4639      	mov	r1, r7
 800bccc:	4648      	mov	r0, r9
 800bcce:	f007 fdc6 	bl	801385e <memcpy>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcd8:	2101      	movs	r1, #1
 800bcda:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bcde:	1842      	adds	r2, r0, r1
 800bce0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bce4:	f002 fce0 	bl	800e6a8 <uxr_object_id>
 800bce8:	6160      	str	r0, [r4, #20]
 800bcea:	783b      	ldrb	r3, [r7, #0]
 800bcec:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcee:	d127      	bne.n	800bd40 <create_node+0xd4>
 800bcf0:	787b      	ldrb	r3, [r7, #1]
 800bcf2:	bb2b      	cbnz	r3, 800bd40 <create_node+0xd4>
 800bcf4:	4a17      	ldr	r2, [pc, #92]	@ (800bd54 <create_node+0xe8>)
 800bcf6:	4818      	ldr	r0, [pc, #96]	@ (800bd58 <create_node+0xec>)
 800bcf8:	4633      	mov	r3, r6
 800bcfa:	213c      	movs	r1, #60	@ 0x3c
 800bcfc:	f007 fb78 	bl	80133f0 <sniprintf>
 800bd00:	6920      	ldr	r0, [r4, #16]
 800bd02:	4915      	ldr	r1, [pc, #84]	@ (800bd58 <create_node+0xec>)
 800bd04:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bd08:	9100      	str	r1, [sp, #0]
 800bd0a:	2106      	movs	r1, #6
 800bd0c:	9101      	str	r1, [sp, #4]
 800bd0e:	6811      	ldr	r1, [r2, #0]
 800bd10:	6962      	ldr	r2, [r4, #20]
 800bd12:	fa1f f388 	uxth.w	r3, r8
 800bd16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bd1a:	f002 faf3 	bl	800e304 <uxr_buffer_create_participant_bin>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	6920      	ldr	r0, [r4, #16]
 800bd22:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bd26:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bd2a:	f001 f8c7 	bl	800cebc <run_xrce_session>
 800bd2e:	b918      	cbnz	r0, 800bd38 <create_node+0xcc>
 800bd30:	4628      	mov	r0, r5
 800bd32:	f000 ff51 	bl	800cbd8 <rmw_uxrce_fini_node_memory>
 800bd36:	2500      	movs	r5, #0
 800bd38:	4628      	mov	r0, r5
 800bd3a:	b003      	add	sp, #12
 800bd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd40:	4a06      	ldr	r2, [pc, #24]	@ (800bd5c <create_node+0xf0>)
 800bd42:	9600      	str	r6, [sp, #0]
 800bd44:	463b      	mov	r3, r7
 800bd46:	213c      	movs	r1, #60	@ 0x3c
 800bd48:	4803      	ldr	r0, [pc, #12]	@ (800bd58 <create_node+0xec>)
 800bd4a:	f007 fb51 	bl	80133f0 <sniprintf>
 800bd4e:	e7d7      	b.n	800bd00 <create_node+0x94>
 800bd50:	2000d98c 	.word	0x2000d98c
 800bd54:	08014ddc 	.word	0x08014ddc
 800bd58:	20009084 	.word	0x20009084
 800bd5c:	08014854 	.word	0x08014854

0800bd60 <rmw_create_node>:
 800bd60:	b199      	cbz	r1, 800bd8a <rmw_create_node+0x2a>
 800bd62:	780b      	ldrb	r3, [r1, #0]
 800bd64:	468c      	mov	ip, r1
 800bd66:	b183      	cbz	r3, 800bd8a <rmw_create_node+0x2a>
 800bd68:	b410      	push	{r4}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	b14a      	cbz	r2, 800bd82 <rmw_create_node+0x22>
 800bd6e:	7813      	ldrb	r3, [r2, #0]
 800bd70:	b13b      	cbz	r3, 800bd82 <rmw_create_node+0x22>
 800bd72:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800bd74:	4603      	mov	r3, r0
 800bd76:	4621      	mov	r1, r4
 800bd78:	4660      	mov	r0, ip
 800bd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd7e:	f7ff bf75 	b.w	800bc6c <create_node>
 800bd82:	2000      	movs	r0, #0
 800bd84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop

0800bd90 <rmw_destroy_node>:
 800bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd92:	b328      	cbz	r0, 800bde0 <rmw_destroy_node+0x50>
 800bd94:	4607      	mov	r7, r0
 800bd96:	6800      	ldr	r0, [r0, #0]
 800bd98:	b120      	cbz	r0, 800bda4 <rmw_destroy_node+0x14>
 800bd9a:	4b36      	ldr	r3, [pc, #216]	@ (800be74 <rmw_destroy_node+0xe4>)
 800bd9c:	6819      	ldr	r1, [r3, #0]
 800bd9e:	f7f4 fa1f 	bl	80001e0 <strcmp>
 800bda2:	b9e8      	cbnz	r0, 800bde0 <rmw_destroy_node+0x50>
 800bda4:	687d      	ldr	r5, [r7, #4]
 800bda6:	b1dd      	cbz	r5, 800bde0 <rmw_destroy_node+0x50>
 800bda8:	4b33      	ldr	r3, [pc, #204]	@ (800be78 <rmw_destroy_node+0xe8>)
 800bdaa:	681c      	ldr	r4, [r3, #0]
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	d05f      	beq.n	800be70 <rmw_destroy_node+0xe0>
 800bdb0:	2600      	movs	r6, #0
 800bdb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bdb6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800bdba:	429d      	cmp	r5, r3
 800bdbc:	d013      	beq.n	800bde6 <rmw_destroy_node+0x56>
 800bdbe:	2c00      	cmp	r4, #0
 800bdc0:	d1f7      	bne.n	800bdb2 <rmw_destroy_node+0x22>
 800bdc2:	4b2e      	ldr	r3, [pc, #184]	@ (800be7c <rmw_destroy_node+0xec>)
 800bdc4:	681c      	ldr	r4, [r3, #0]
 800bdc6:	b1c4      	cbz	r4, 800bdfa <rmw_destroy_node+0x6a>
 800bdc8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bdcc:	6a0b      	ldr	r3, [r1, #32]
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	d1f9      	bne.n	800bdc6 <rmw_destroy_node+0x36>
 800bdd2:	317c      	adds	r1, #124	@ 0x7c
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f000 fb37 	bl	800c448 <rmw_destroy_subscription>
 800bdda:	2801      	cmp	r0, #1
 800bddc:	4606      	mov	r6, r0
 800bdde:	d1f2      	bne.n	800bdc6 <rmw_destroy_node+0x36>
 800bde0:	2601      	movs	r6, #1
 800bde2:	4630      	mov	r0, r6
 800bde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde6:	3184      	adds	r1, #132	@ 0x84
 800bde8:	4638      	mov	r0, r7
 800bdea:	f000 f853 	bl	800be94 <rmw_destroy_publisher>
 800bdee:	2801      	cmp	r0, #1
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	d0f5      	beq.n	800bde0 <rmw_destroy_node+0x50>
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	d1dc      	bne.n	800bdb2 <rmw_destroy_node+0x22>
 800bdf8:	e7e3      	b.n	800bdc2 <rmw_destroy_node+0x32>
 800bdfa:	4b21      	ldr	r3, [pc, #132]	@ (800be80 <rmw_destroy_node+0xf0>)
 800bdfc:	681c      	ldr	r4, [r3, #0]
 800bdfe:	b16c      	cbz	r4, 800be1c <rmw_destroy_node+0x8c>
 800be00:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800be04:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800be06:	429d      	cmp	r5, r3
 800be08:	d1f9      	bne.n	800bdfe <rmw_destroy_node+0x6e>
 800be0a:	317c      	adds	r1, #124	@ 0x7c
 800be0c:	4638      	mov	r0, r7
 800be0e:	f000 f9e5 	bl	800c1dc <rmw_destroy_service>
 800be12:	2801      	cmp	r0, #1
 800be14:	4606      	mov	r6, r0
 800be16:	d0e3      	beq.n	800bde0 <rmw_destroy_node+0x50>
 800be18:	2c00      	cmp	r4, #0
 800be1a:	d1f1      	bne.n	800be00 <rmw_destroy_node+0x70>
 800be1c:	4b19      	ldr	r3, [pc, #100]	@ (800be84 <rmw_destroy_node+0xf4>)
 800be1e:	681c      	ldr	r4, [r3, #0]
 800be20:	b16c      	cbz	r4, 800be3e <rmw_destroy_node+0xae>
 800be22:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800be26:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800be28:	429d      	cmp	r5, r3
 800be2a:	d1f9      	bne.n	800be20 <rmw_destroy_node+0x90>
 800be2c:	317c      	adds	r1, #124	@ 0x7c
 800be2e:	4638      	mov	r0, r7
 800be30:	f7ff fc72 	bl	800b718 <rmw_destroy_client>
 800be34:	2801      	cmp	r0, #1
 800be36:	4606      	mov	r6, r0
 800be38:	d0d2      	beq.n	800bde0 <rmw_destroy_node+0x50>
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	d1f1      	bne.n	800be22 <rmw_destroy_node+0x92>
 800be3e:	6928      	ldr	r0, [r5, #16]
 800be40:	696a      	ldr	r2, [r5, #20]
 800be42:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be4a:	6819      	ldr	r1, [r3, #0]
 800be4c:	f002 fa0e 	bl	800e26c <uxr_buffer_delete_entity>
 800be50:	4602      	mov	r2, r0
 800be52:	6928      	ldr	r0, [r5, #16]
 800be54:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be58:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be5c:	f001 f82e 	bl	800cebc <run_xrce_session>
 800be60:	2800      	cmp	r0, #0
 800be62:	bf08      	it	eq
 800be64:	2602      	moveq	r6, #2
 800be66:	4638      	mov	r0, r7
 800be68:	f000 feb6 	bl	800cbd8 <rmw_uxrce_fini_node_memory>
 800be6c:	4630      	mov	r0, r6
 800be6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be70:	4626      	mov	r6, r4
 800be72:	e7a6      	b.n	800bdc2 <rmw_destroy_node+0x32>
 800be74:	0801514c 	.word	0x0801514c
 800be78:	2000d99c 	.word	0x2000d99c
 800be7c:	2000d9dc 	.word	0x2000d9dc
 800be80:	2000d9ac 	.word	0x2000d9ac
 800be84:	200090c0 	.word	0x200090c0

0800be88 <rmw_node_get_graph_guard_condition>:
 800be88:	6843      	ldr	r3, [r0, #4]
 800be8a:	6918      	ldr	r0, [r3, #16]
 800be8c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop

0800be94 <rmw_destroy_publisher>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	b128      	cbz	r0, 800bea4 <rmw_destroy_publisher+0x10>
 800be98:	4604      	mov	r4, r0
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	460d      	mov	r5, r1
 800be9e:	f001 f88d 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800bea2:	b910      	cbnz	r0, 800beaa <rmw_destroy_publisher+0x16>
 800bea4:	2401      	movs	r4, #1
 800bea6:	4620      	mov	r0, r4
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beaa:	6863      	ldr	r3, [r4, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0f9      	beq.n	800bea4 <rmw_destroy_publisher+0x10>
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	d0f7      	beq.n	800bea4 <rmw_destroy_publisher+0x10>
 800beb4:	6828      	ldr	r0, [r5, #0]
 800beb6:	f001 f881 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d0f2      	beq.n	800bea4 <rmw_destroy_publisher+0x10>
 800bebe:	686c      	ldr	r4, [r5, #4]
 800bec0:	2c00      	cmp	r4, #0
 800bec2:	d0ef      	beq.n	800bea4 <rmw_destroy_publisher+0x10>
 800bec4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bec6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800beca:	f006 f985 	bl	80121d8 <destroy_topic>
 800bece:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bed2:	6962      	ldr	r2, [r4, #20]
 800bed4:	6918      	ldr	r0, [r3, #16]
 800bed6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800beda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bede:	6819      	ldr	r1, [r3, #0]
 800bee0:	f002 f9c4 	bl	800e26c <uxr_buffer_delete_entity>
 800bee4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bef0:	4604      	mov	r4, r0
 800bef2:	6809      	ldr	r1, [r1, #0]
 800bef4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bef8:	f002 f9b8 	bl	800e26c <uxr_buffer_delete_entity>
 800befc:	693e      	ldr	r6, [r7, #16]
 800befe:	4622      	mov	r2, r4
 800bf00:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bf04:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 ffd6 	bl	800cebc <run_xrce_session>
 800bf10:	693e      	ldr	r6, [r7, #16]
 800bf12:	4622      	mov	r2, r4
 800bf14:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bf18:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f000 ffcc 	bl	800cebc <run_xrce_session>
 800bf24:	b12c      	cbz	r4, 800bf32 <rmw_destroy_publisher+0x9e>
 800bf26:	b120      	cbz	r0, 800bf32 <rmw_destroy_publisher+0x9e>
 800bf28:	2400      	movs	r4, #0
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f000 fe6c 	bl	800cc08 <rmw_uxrce_fini_publisher_memory>
 800bf30:	e7b9      	b.n	800bea6 <rmw_destroy_publisher+0x12>
 800bf32:	2402      	movs	r4, #2
 800bf34:	e7f9      	b.n	800bf2a <rmw_destroy_publisher+0x96>
 800bf36:	bf00      	nop

0800bf38 <rmw_send_request>:
 800bf38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	6800      	ldr	r0, [r0, #0]
 800bf40:	b08b      	sub	sp, #44	@ 0x2c
 800bf42:	460e      	mov	r6, r1
 800bf44:	4615      	mov	r5, r2
 800bf46:	b128      	cbz	r0, 800bf54 <rmw_send_request+0x1c>
 800bf48:	4b21      	ldr	r3, [pc, #132]	@ (800bfd0 <rmw_send_request+0x98>)
 800bf4a:	6819      	ldr	r1, [r3, #0]
 800bf4c:	f7f4 f948 	bl	80001e0 <strcmp>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d139      	bne.n	800bfc8 <rmw_send_request+0x90>
 800bf54:	6864      	ldr	r4, [r4, #4]
 800bf56:	6963      	ldr	r3, [r4, #20]
 800bf58:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	4798      	blx	r3
 800bf60:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800bf64:	4630      	mov	r0, r6
 800bf66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf6a:	4798      	blx	r3
 800bf6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf70:	9000      	str	r0, [sp, #0]
 800bf72:	6922      	ldr	r2, [r4, #16]
 800bf74:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800bf76:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bf7a:	ab02      	add	r3, sp, #8
 800bf7c:	f004 fbc8 	bl	8010710 <uxr_prepare_output_stream>
 800bf80:	2700      	movs	r7, #0
 800bf82:	6028      	str	r0, [r5, #0]
 800bf84:	606f      	str	r7, [r5, #4]
 800bf86:	b198      	cbz	r0, 800bfb0 <rmw_send_request+0x78>
 800bf88:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bf8c:	a902      	add	r1, sp, #8
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4798      	blx	r3
 800bf92:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800bf96:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d00c      	beq.n	800bfb8 <rmw_send_request+0x80>
 800bf9e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800bfa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfa4:	f003 f9c0 	bl	800f328 <uxr_run_session_until_confirm_delivery>
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	b00b      	add	sp, #44	@ 0x2c
 800bfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	b00b      	add	sp, #44	@ 0x2c
 800bfb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfbc:	f002 fdf4 	bl	800eba8 <uxr_flash_output_streams>
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	b00b      	add	sp, #44	@ 0x2c
 800bfc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfc8:	200c      	movs	r0, #12
 800bfca:	b00b      	add	sp, #44	@ 0x2c
 800bfcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	0801514c 	.word	0x0801514c

0800bfd4 <rmw_take_request>:
 800bfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	4605      	mov	r5, r0
 800bfda:	6800      	ldr	r0, [r0, #0]
 800bfdc:	b089      	sub	sp, #36	@ 0x24
 800bfde:	460c      	mov	r4, r1
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	461e      	mov	r6, r3
 800bfe4:	b128      	cbz	r0, 800bff2 <rmw_take_request+0x1e>
 800bfe6:	4b28      	ldr	r3, [pc, #160]	@ (800c088 <rmw_take_request+0xb4>)
 800bfe8:	6819      	ldr	r1, [r3, #0]
 800bfea:	f7f4 f8f9 	bl	80001e0 <strcmp>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d146      	bne.n	800c080 <rmw_take_request+0xac>
 800bff2:	b10e      	cbz	r6, 800bff8 <rmw_take_request+0x24>
 800bff4:	2300      	movs	r3, #0
 800bff6:	7033      	strb	r3, [r6, #0]
 800bff8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800bffc:	f000 fee0 	bl	800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c000:	4648      	mov	r0, r9
 800c002:	f000 feb5 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c006:	4607      	mov	r7, r0
 800c008:	b3b0      	cbz	r0, 800c078 <rmw_take_request+0xa4>
 800c00a:	6885      	ldr	r5, [r0, #8]
 800c00c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800c010:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800c014:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c018:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800c01c:	7423      	strb	r3, [r4, #16]
 800c01e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800c022:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800c026:	74e2      	strb	r2, [r4, #19]
 800c028:	f8a4 3011 	strh.w	r3, [r4, #17]
 800c02c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800c030:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800c034:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800c038:	61e1      	str	r1, [r4, #28]
 800c03a:	6162      	str	r2, [r4, #20]
 800c03c:	61a3      	str	r3, [r4, #24]
 800c03e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	4798      	blx	r3
 800c046:	6844      	ldr	r4, [r0, #4]
 800c048:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800c04c:	f105 0110 	add.w	r1, r5, #16
 800c050:	4668      	mov	r0, sp
 800c052:	f7fc f845 	bl	80080e0 <ucdr_init_buffer>
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	4641      	mov	r1, r8
 800c05a:	4668      	mov	r0, sp
 800c05c:	4798      	blx	r3
 800c05e:	4639      	mov	r1, r7
 800c060:	4604      	mov	r4, r0
 800c062:	480a      	ldr	r0, [pc, #40]	@ (800c08c <rmw_take_request+0xb8>)
 800c064:	f006 f82c 	bl	80120c0 <put_memory>
 800c068:	b106      	cbz	r6, 800c06c <rmw_take_request+0x98>
 800c06a:	7034      	strb	r4, [r6, #0]
 800c06c:	f084 0001 	eor.w	r0, r4, #1
 800c070:	b2c0      	uxtb	r0, r0
 800c072:	b009      	add	sp, #36	@ 0x24
 800c074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c078:	2001      	movs	r0, #1
 800c07a:	b009      	add	sp, #36	@ 0x24
 800c07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c080:	200c      	movs	r0, #12
 800c082:	b009      	add	sp, #36	@ 0x24
 800c084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c088:	0801514c 	.word	0x0801514c
 800c08c:	2000d9cc 	.word	0x2000d9cc

0800c090 <rmw_send_response>:
 800c090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	6800      	ldr	r0, [r0, #0]
 800c096:	b091      	sub	sp, #68	@ 0x44
 800c098:	460c      	mov	r4, r1
 800c09a:	4616      	mov	r6, r2
 800c09c:	b128      	cbz	r0, 800c0aa <rmw_send_response+0x1a>
 800c09e:	4b29      	ldr	r3, [pc, #164]	@ (800c144 <rmw_send_response+0xb4>)
 800c0a0:	6819      	ldr	r1, [r3, #0]
 800c0a2:	f7f4 f89d 	bl	80001e0 <strcmp>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d141      	bne.n	800c12e <rmw_send_response+0x9e>
 800c0aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800c0ae:	9306      	str	r3, [sp, #24]
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	9207      	str	r2, [sp, #28]
 800c0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0b8:	686d      	ldr	r5, [r5, #4]
 800c0ba:	789b      	ldrb	r3, [r3, #2]
 800c0bc:	68a1      	ldr	r1, [r4, #8]
 800c0be:	f88d 2017 	strb.w	r2, [sp, #23]
 800c0c2:	f88d 3016 	strb.w	r3, [sp, #22]
 800c0c6:	68e2      	ldr	r2, [r4, #12]
 800c0c8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800c0cc:	6860      	ldr	r0, [r4, #4]
 800c0ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0d2:	ab02      	add	r3, sp, #8
 800c0d4:	c307      	stmia	r3!, {r0, r1, r2}
 800c0d6:	696b      	ldr	r3, [r5, #20]
 800c0d8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	4798      	blx	r3
 800c0de:	6844      	ldr	r4, [r0, #4]
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	4798      	blx	r3
 800c0e6:	f100 0318 	add.w	r3, r0, #24
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	692a      	ldr	r2, [r5, #16]
 800c0f0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800c0f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c0f6:	ab08      	add	r3, sp, #32
 800c0f8:	f004 fb0a 	bl	8010710 <uxr_prepare_output_stream>
 800c0fc:	b910      	cbnz	r0, 800c104 <rmw_send_response+0x74>
 800c0fe:	2001      	movs	r0, #1
 800c100:	b011      	add	sp, #68	@ 0x44
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c104:	a902      	add	r1, sp, #8
 800c106:	a808      	add	r0, sp, #32
 800c108:	f005 fa94 	bl	8011634 <uxr_serialize_SampleIdentity>
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	a908      	add	r1, sp, #32
 800c110:	4630      	mov	r0, r6
 800c112:	4798      	blx	r3
 800c114:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800c118:	6938      	ldr	r0, [r7, #16]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d00a      	beq.n	800c134 <rmw_send_response+0xa4>
 800c11e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800c120:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c124:	f003 f900 	bl	800f328 <uxr_run_session_until_confirm_delivery>
 800c128:	2000      	movs	r0, #0
 800c12a:	b011      	add	sp, #68	@ 0x44
 800c12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12e:	200c      	movs	r0, #12
 800c130:	b011      	add	sp, #68	@ 0x44
 800c132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c134:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c138:	f002 fd36 	bl	800eba8 <uxr_flash_output_streams>
 800c13c:	2000      	movs	r0, #0
 800c13e:	b011      	add	sp, #68	@ 0x44
 800c140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c142:	bf00      	nop
 800c144:	0801514c 	.word	0x0801514c

0800c148 <rmw_take_response>:
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	4604      	mov	r4, r0
 800c14e:	6800      	ldr	r0, [r0, #0]
 800c150:	b088      	sub	sp, #32
 800c152:	4688      	mov	r8, r1
 800c154:	4617      	mov	r7, r2
 800c156:	461d      	mov	r5, r3
 800c158:	b120      	cbz	r0, 800c164 <rmw_take_response+0x1c>
 800c15a:	4b1e      	ldr	r3, [pc, #120]	@ (800c1d4 <rmw_take_response+0x8c>)
 800c15c:	6819      	ldr	r1, [r3, #0]
 800c15e:	f7f4 f83f 	bl	80001e0 <strcmp>
 800c162:	bb78      	cbnz	r0, 800c1c4 <rmw_take_response+0x7c>
 800c164:	b10d      	cbz	r5, 800c16a <rmw_take_response+0x22>
 800c166:	2300      	movs	r3, #0
 800c168:	702b      	strb	r3, [r5, #0]
 800c16a:	6864      	ldr	r4, [r4, #4]
 800c16c:	f000 fe28 	bl	800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fdfd 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c176:	4606      	mov	r6, r0
 800c178:	b340      	cbz	r0, 800c1cc <rmw_take_response+0x84>
 800c17a:	6963      	ldr	r3, [r4, #20]
 800c17c:	6884      	ldr	r4, [r0, #8]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800c184:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800c188:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800c18c:	4798      	blx	r3
 800c18e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c192:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800c196:	f104 0110 	add.w	r1, r4, #16
 800c19a:	4668      	mov	r0, sp
 800c19c:	f7fb ffa0 	bl	80080e0 <ucdr_init_buffer>
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1a6:	4668      	mov	r0, sp
 800c1a8:	4798      	blx	r3
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	480a      	ldr	r0, [pc, #40]	@ (800c1d8 <rmw_take_response+0x90>)
 800c1b0:	f005 ff86 	bl	80120c0 <put_memory>
 800c1b4:	b105      	cbz	r5, 800c1b8 <rmw_take_response+0x70>
 800c1b6:	702c      	strb	r4, [r5, #0]
 800c1b8:	f084 0001 	eor.w	r0, r4, #1
 800c1bc:	b2c0      	uxtb	r0, r0
 800c1be:	b008      	add	sp, #32
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	200c      	movs	r0, #12
 800c1c6:	b008      	add	sp, #32
 800c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	b008      	add	sp, #32
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d4:	0801514c 	.word	0x0801514c
 800c1d8:	2000d9cc 	.word	0x2000d9cc

0800c1dc <rmw_destroy_service>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	b128      	cbz	r0, 800c1ec <rmw_destroy_service+0x10>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	6800      	ldr	r0, [r0, #0]
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	f000 fee9 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800c1ea:	b910      	cbnz	r0, 800c1f2 <rmw_destroy_service+0x16>
 800c1ec:	2401      	movs	r4, #1
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	bd70      	pop	{r4, r5, r6, pc}
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0f9      	beq.n	800c1ec <rmw_destroy_service+0x10>
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	d0f7      	beq.n	800c1ec <rmw_destroy_service+0x10>
 800c1fc:	6828      	ldr	r0, [r5, #0]
 800c1fe:	f000 fedd 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800c202:	2800      	cmp	r0, #0
 800c204:	d0f2      	beq.n	800c1ec <rmw_destroy_service+0x10>
 800c206:	686e      	ldr	r6, [r5, #4]
 800c208:	2e00      	cmp	r6, #0
 800c20a:	d0ef      	beq.n	800c1ec <rmw_destroy_service+0x10>
 800c20c:	6864      	ldr	r4, [r4, #4]
 800c20e:	6932      	ldr	r2, [r6, #16]
 800c210:	6920      	ldr	r0, [r4, #16]
 800c212:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c216:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c21a:	6819      	ldr	r1, [r3, #0]
 800c21c:	f002 faae 	bl	800e77c <uxr_buffer_cancel_data>
 800c220:	4602      	mov	r2, r0
 800c222:	6920      	ldr	r0, [r4, #16]
 800c224:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c228:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c22c:	f000 fe46 	bl	800cebc <run_xrce_session>
 800c230:	6920      	ldr	r0, [r4, #16]
 800c232:	6932      	ldr	r2, [r6, #16]
 800c234:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c238:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c23c:	6819      	ldr	r1, [r3, #0]
 800c23e:	f002 f815 	bl	800e26c <uxr_buffer_delete_entity>
 800c242:	4602      	mov	r2, r0
 800c244:	6920      	ldr	r0, [r4, #16]
 800c246:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c24a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c24e:	f000 fe35 	bl	800cebc <run_xrce_session>
 800c252:	2800      	cmp	r0, #0
 800c254:	4628      	mov	r0, r5
 800c256:	bf14      	ite	ne
 800c258:	2400      	movne	r4, #0
 800c25a:	2402      	moveq	r4, #2
 800c25c:	f000 fd00 	bl	800cc60 <rmw_uxrce_fini_service_memory>
 800c260:	e7c5      	b.n	800c1ee <rmw_destroy_service+0x12>
 800c262:	bf00      	nop

0800c264 <rmw_create_subscription>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	b08d      	sub	sp, #52	@ 0x34
 800c26a:	2800      	cmp	r0, #0
 800c26c:	f000 80d1 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c270:	460e      	mov	r6, r1
 800c272:	2900      	cmp	r1, #0
 800c274:	f000 80cd 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c278:	4604      	mov	r4, r0
 800c27a:	6800      	ldr	r0, [r0, #0]
 800c27c:	4615      	mov	r5, r2
 800c27e:	4698      	mov	r8, r3
 800c280:	f000 fe9c 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800c284:	2800      	cmp	r0, #0
 800c286:	f000 80c4 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c28a:	2d00      	cmp	r5, #0
 800c28c:	f000 80c1 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c290:	782b      	ldrb	r3, [r5, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80bd 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c298:	f1b8 0f00 	cmp.w	r8, #0
 800c29c:	f000 80b9 	beq.w	800c412 <rmw_create_subscription+0x1ae>
 800c2a0:	485e      	ldr	r0, [pc, #376]	@ (800c41c <rmw_create_subscription+0x1b8>)
 800c2a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2a6:	f005 fefb 	bl	80120a0 <get_memory>
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	f000 80b1 	beq.w	800c414 <rmw_create_subscription+0x1b0>
 800c2b2:	6887      	ldr	r7, [r0, #8]
 800c2b4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c2b8:	f7ff fa72 	bl	800b7a0 <rmw_get_implementation_identifier>
 800c2bc:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c2c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c2c2:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f7f3 ff94 	bl	80001f4 <strlen>
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	283c      	cmp	r0, #60	@ 0x3c
 800c2d0:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c2d4:	f200 8096 	bhi.w	800c404 <rmw_create_subscription+0x1a0>
 800c2d8:	4a51      	ldr	r2, [pc, #324]	@ (800c420 <rmw_create_subscription+0x1bc>)
 800c2da:	462b      	mov	r3, r5
 800c2dc:	213c      	movs	r1, #60	@ 0x3c
 800c2de:	4650      	mov	r0, sl
 800c2e0:	f007 f886 	bl	80133f0 <sniprintf>
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	f8c7 9020 	str.w	r9, [r7, #32]
 800c2ea:	2250      	movs	r2, #80	@ 0x50
 800c2ec:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c2f0:	f007 fab5 	bl	801385e <memcpy>
 800c2f4:	494b      	ldr	r1, [pc, #300]	@ (800c424 <rmw_create_subscription+0x1c0>)
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f000 fe6e 	bl	800cfd8 <get_message_typesupport_handle>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	f000 8081 	beq.w	800c404 <rmw_create_subscription+0x1a0>
 800c302:	6842      	ldr	r2, [r0, #4]
 800c304:	61ba      	str	r2, [r7, #24]
 800c306:	2a00      	cmp	r2, #0
 800c308:	d07c      	beq.n	800c404 <rmw_create_subscription+0x1a0>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4643      	mov	r3, r8
 800c30e:	4648      	mov	r0, r9
 800c310:	f005 ff12 	bl	8012138 <create_topic>
 800c314:	61f8      	str	r0, [r7, #28]
 800c316:	2800      	cmp	r0, #0
 800c318:	d078      	beq.n	800c40c <rmw_create_subscription+0x1a8>
 800c31a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c31e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c322:	2104      	movs	r1, #4
 800c324:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c328:	1c42      	adds	r2, r0, #1
 800c32a:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c32e:	f002 f9bb 	bl	800e6a8 <uxr_object_id>
 800c332:	6138      	str	r0, [r7, #16]
 800c334:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c338:	2506      	movs	r5, #6
 800c33a:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c33e:	9500      	str	r5, [sp, #0]
 800c340:	6819      	ldr	r1, [r3, #0]
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c348:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c34c:	f002 f842 	bl	800e3d4 <uxr_buffer_create_subscriber_bin>
 800c350:	4602      	mov	r2, r0
 800c352:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c356:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c35a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c35e:	f000 fdad 	bl	800cebc <run_xrce_session>
 800c362:	2800      	cmp	r0, #0
 800c364:	d04e      	beq.n	800c404 <rmw_create_subscription+0x1a0>
 800c366:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c36e:	4629      	mov	r1, r5
 800c370:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c374:	1c42      	adds	r2, r0, #1
 800c376:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c37a:	f002 f995 	bl	800e6a8 <uxr_object_id>
 800c37e:	ae08      	add	r6, sp, #32
 800c380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	6178      	str	r0, [r7, #20]
 800c388:	4641      	mov	r1, r8
 800c38a:	4630      	mov	r0, r6
 800c38c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c390:	9305      	str	r3, [sp, #20]
 800c392:	f000 fdaf 	bl	800cef4 <convert_qos_profile>
 800c396:	9503      	str	r5, [sp, #12]
 800c398:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c39c:	9b05      	ldr	r3, [sp, #20]
 800c39e:	9001      	str	r0, [sp, #4]
 800c3a0:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c3ac:	f8db 1000 	ldr.w	r1, [fp]
 800c3b0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c3b4:	f002 f83e 	bl	800e434 <uxr_buffer_create_datareader_bin>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3be:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c3c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3c6:	f000 fd79 	bl	800cebc <run_xrce_session>
 800c3ca:	b1d8      	cbz	r0, 800c404 <rmw_create_subscription+0x1a0>
 800c3cc:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c3d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	bf0c      	ite	eq
 800c3d8:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c3dc:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c3e0:	9307      	str	r3, [sp, #28]
 800c3e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c3ec:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	6809      	ldr	r1, [r1, #0]
 800c3fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3fe:	f002 f983 	bl	800e708 <uxr_buffer_request_data>
 800c402:	e007      	b.n	800c414 <rmw_create_subscription+0x1b0>
 800c404:	69f8      	ldr	r0, [r7, #28]
 800c406:	b108      	cbz	r0, 800c40c <rmw_create_subscription+0x1a8>
 800c408:	f000 fc56 	bl	800ccb8 <rmw_uxrce_fini_topic_memory>
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fc11 	bl	800cc34 <rmw_uxrce_fini_subscription_memory>
 800c412:	2400      	movs	r4, #0
 800c414:	4620      	mov	r0, r4
 800c416:	b00d      	add	sp, #52	@ 0x34
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41c:	2000d9dc 	.word	0x2000d9dc
 800c420:	08014ddc 	.word	0x08014ddc
 800c424:	08014798 	.word	0x08014798

0800c428 <rmw_subscription_get_actual_qos>:
 800c428:	b150      	cbz	r0, 800c440 <rmw_subscription_get_actual_qos+0x18>
 800c42a:	b508      	push	{r3, lr}
 800c42c:	460b      	mov	r3, r1
 800c42e:	b149      	cbz	r1, 800c444 <rmw_subscription_get_actual_qos+0x1c>
 800c430:	6841      	ldr	r1, [r0, #4]
 800c432:	2250      	movs	r2, #80	@ 0x50
 800c434:	3128      	adds	r1, #40	@ 0x28
 800c436:	4618      	mov	r0, r3
 800c438:	f007 fa11 	bl	801385e <memcpy>
 800c43c:	2000      	movs	r0, #0
 800c43e:	bd08      	pop	{r3, pc}
 800c440:	200b      	movs	r0, #11
 800c442:	4770      	bx	lr
 800c444:	200b      	movs	r0, #11
 800c446:	bd08      	pop	{r3, pc}

0800c448 <rmw_destroy_subscription>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	b128      	cbz	r0, 800c458 <rmw_destroy_subscription+0x10>
 800c44c:	4604      	mov	r4, r0
 800c44e:	6800      	ldr	r0, [r0, #0]
 800c450:	460d      	mov	r5, r1
 800c452:	f000 fdb3 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800c456:	b910      	cbnz	r0, 800c45e <rmw_destroy_subscription+0x16>
 800c458:	2401      	movs	r4, #1
 800c45a:	4620      	mov	r0, r4
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d0f9      	beq.n	800c458 <rmw_destroy_subscription+0x10>
 800c464:	2d00      	cmp	r5, #0
 800c466:	d0f7      	beq.n	800c458 <rmw_destroy_subscription+0x10>
 800c468:	6828      	ldr	r0, [r5, #0]
 800c46a:	f000 fda7 	bl	800cfbc <is_uxrce_rmw_identifier_valid>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d0f2      	beq.n	800c458 <rmw_destroy_subscription+0x10>
 800c472:	686c      	ldr	r4, [r5, #4]
 800c474:	2c00      	cmp	r4, #0
 800c476:	d0ef      	beq.n	800c458 <rmw_destroy_subscription+0x10>
 800c478:	6a26      	ldr	r6, [r4, #32]
 800c47a:	6962      	ldr	r2, [r4, #20]
 800c47c:	6930      	ldr	r0, [r6, #16]
 800c47e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c486:	6819      	ldr	r1, [r3, #0]
 800c488:	f002 f978 	bl	800e77c <uxr_buffer_cancel_data>
 800c48c:	4602      	mov	r2, r0
 800c48e:	6930      	ldr	r0, [r6, #16]
 800c490:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c494:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c498:	f000 fd10 	bl	800cebc <run_xrce_session>
 800c49c:	69e0      	ldr	r0, [r4, #28]
 800c49e:	f005 fe9b 	bl	80121d8 <destroy_topic>
 800c4a2:	6a23      	ldr	r3, [r4, #32]
 800c4a4:	6962      	ldr	r2, [r4, #20]
 800c4a6:	6918      	ldr	r0, [r3, #16]
 800c4a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4b0:	6819      	ldr	r1, [r3, #0]
 800c4b2:	f001 fedb 	bl	800e26c <uxr_buffer_delete_entity>
 800c4b6:	6a23      	ldr	r3, [r4, #32]
 800c4b8:	6922      	ldr	r2, [r4, #16]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	6809      	ldr	r1, [r1, #0]
 800c4c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c4c8:	f001 fed0 	bl	800e26c <uxr_buffer_delete_entity>
 800c4cc:	6937      	ldr	r7, [r6, #16]
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c4d4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f000 fcee 	bl	800cebc <run_xrce_session>
 800c4e0:	6936      	ldr	r6, [r6, #16]
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c4e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f000 fce4 	bl	800cebc <run_xrce_session>
 800c4f4:	b12c      	cbz	r4, 800c502 <rmw_destroy_subscription+0xba>
 800c4f6:	b120      	cbz	r0, 800c502 <rmw_destroy_subscription+0xba>
 800c4f8:	2400      	movs	r4, #0
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f000 fb9a 	bl	800cc34 <rmw_uxrce_fini_subscription_memory>
 800c500:	e7ab      	b.n	800c45a <rmw_destroy_subscription+0x12>
 800c502:	2402      	movs	r4, #2
 800c504:	e7f9      	b.n	800c4fa <rmw_destroy_subscription+0xb2>
 800c506:	bf00      	nop

0800c508 <rmw_take_with_info>:
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	4604      	mov	r4, r0
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	b089      	sub	sp, #36	@ 0x24
 800c510:	460f      	mov	r7, r1
 800c512:	4615      	mov	r5, r2
 800c514:	b128      	cbz	r0, 800c522 <rmw_take_with_info+0x1a>
 800c516:	4b24      	ldr	r3, [pc, #144]	@ (800c5a8 <rmw_take_with_info+0xa0>)
 800c518:	6819      	ldr	r1, [r3, #0]
 800c51a:	f7f3 fe61 	bl	80001e0 <strcmp>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d13e      	bne.n	800c5a0 <rmw_take_with_info+0x98>
 800c522:	b305      	cbz	r5, 800c566 <rmw_take_with_info+0x5e>
 800c524:	6864      	ldr	r4, [r4, #4]
 800c526:	2300      	movs	r3, #0
 800c528:	702b      	strb	r3, [r5, #0]
 800c52a:	f000 fc49 	bl	800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 fc1e 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c534:	4606      	mov	r6, r0
 800c536:	b1f0      	cbz	r0, 800c576 <rmw_take_with_info+0x6e>
 800c538:	6881      	ldr	r1, [r0, #8]
 800c53a:	4668      	mov	r0, sp
 800c53c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c540:	3110      	adds	r1, #16
 800c542:	f7fb fdcd 	bl	80080e0 <ucdr_init_buffer>
 800c546:	69a3      	ldr	r3, [r4, #24]
 800c548:	4639      	mov	r1, r7
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	4668      	mov	r0, sp
 800c54e:	4798      	blx	r3
 800c550:	4631      	mov	r1, r6
 800c552:	4604      	mov	r4, r0
 800c554:	4815      	ldr	r0, [pc, #84]	@ (800c5ac <rmw_take_with_info+0xa4>)
 800c556:	f005 fdb3 	bl	80120c0 <put_memory>
 800c55a:	702c      	strb	r4, [r5, #0]
 800c55c:	f084 0001 	eor.w	r0, r4, #1
 800c560:	b2c0      	uxtb	r0, r0
 800c562:	b009      	add	sp, #36	@ 0x24
 800c564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c566:	6864      	ldr	r4, [r4, #4]
 800c568:	f000 fc2a 	bl	800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 fbff 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c572:	4605      	mov	r5, r0
 800c574:	b910      	cbnz	r0, 800c57c <rmw_take_with_info+0x74>
 800c576:	2001      	movs	r0, #1
 800c578:	b009      	add	sp, #36	@ 0x24
 800c57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c57c:	68a9      	ldr	r1, [r5, #8]
 800c57e:	4668      	mov	r0, sp
 800c580:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c584:	3110      	adds	r1, #16
 800c586:	f7fb fdab 	bl	80080e0 <ucdr_init_buffer>
 800c58a:	69a3      	ldr	r3, [r4, #24]
 800c58c:	4639      	mov	r1, r7
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	4668      	mov	r0, sp
 800c592:	4798      	blx	r3
 800c594:	4629      	mov	r1, r5
 800c596:	4604      	mov	r4, r0
 800c598:	4804      	ldr	r0, [pc, #16]	@ (800c5ac <rmw_take_with_info+0xa4>)
 800c59a:	f005 fd91 	bl	80120c0 <put_memory>
 800c59e:	e7dd      	b.n	800c55c <rmw_take_with_info+0x54>
 800c5a0:	200c      	movs	r0, #12
 800c5a2:	b009      	add	sp, #36	@ 0x24
 800c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0801514c 	.word	0x0801514c
 800c5ac:	2000d9cc 	.word	0x2000d9cc

0800c5b0 <rmw_uxrce_transport_init>:
 800c5b0:	b508      	push	{r3, lr}
 800c5b2:	b108      	cbz	r0, 800c5b8 <rmw_uxrce_transport_init+0x8>
 800c5b4:	f100 0210 	add.w	r2, r0, #16
 800c5b8:	b139      	cbz	r1, 800c5ca <rmw_uxrce_transport_init+0x1a>
 800c5ba:	6949      	ldr	r1, [r1, #20]
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f002 f83b 	bl	800e638 <uxr_init_custom_transport>
 800c5c2:	f080 0001 	eor.w	r0, r0, #1
 800c5c6:	b2c0      	uxtb	r0, r0
 800c5c8:	bd08      	pop	{r3, pc}
 800c5ca:	4b04      	ldr	r3, [pc, #16]	@ (800c5dc <rmw_uxrce_transport_init+0x2c>)
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	6859      	ldr	r1, [r3, #4]
 800c5d0:	f002 f832 	bl	800e638 <uxr_init_custom_transport>
 800c5d4:	f080 0001 	eor.w	r0, r0, #1
 800c5d8:	b2c0      	uxtb	r0, r0
 800c5da:	bd08      	pop	{r3, pc}
 800c5dc:	20008fd4 	.word	0x20008fd4

0800c5e0 <rmw_wait>:
 800c5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	b089      	sub	sp, #36	@ 0x24
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800c5ea:	460e      	mov	r6, r1
 800c5ec:	4698      	mov	r8, r3
 800c5ee:	4691      	mov	r9, r2
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	f000 810a 	beq.w	800c80a <rmw_wait+0x22a>
 800c5f6:	b16c      	cbz	r4, 800c614 <rmw_wait+0x34>
 800c5f8:	4bae      	ldr	r3, [pc, #696]	@ (800c8b4 <rmw_wait+0x2d4>)
 800c5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5fc:	af04      	add	r7, sp, #16
 800c5fe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800c602:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c60a:	f005 fbdd 	bl	8011dc8 <rmw_time_equal>
 800c60e:	2800      	cmp	r0, #0
 800c610:	f000 8127 	beq.w	800c862 <rmw_wait+0x282>
 800c614:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c618:	f000 fbd2 	bl	800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>
 800c61c:	4ba6      	ldr	r3, [pc, #664]	@ (800c8b8 <rmw_wait+0x2d8>)
 800c61e:	681c      	ldr	r4, [r3, #0]
 800c620:	b14c      	cbz	r4, 800c636 <rmw_wait+0x56>
 800c622:	4623      	mov	r3, r4
 800c624:	2100      	movs	r1, #0
 800c626:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800c62a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c62e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1f7      	bne.n	800c626 <rmw_wait+0x46>
 800c636:	f1b9 0f00 	cmp.w	r9, #0
 800c63a:	d011      	beq.n	800c660 <rmw_wait+0x80>
 800c63c:	f8d9 1000 	ldr.w	r1, [r9]
 800c640:	b171      	cbz	r1, 800c660 <rmw_wait+0x80>
 800c642:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800c646:	2300      	movs	r3, #0
 800c648:	2001      	movs	r0, #1
 800c64a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800c64e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800c650:	6912      	ldr	r2, [r2, #16]
 800c652:	3301      	adds	r3, #1
 800c654:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c658:	4299      	cmp	r1, r3
 800c65a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800c65e:	d1f4      	bne.n	800c64a <rmw_wait+0x6a>
 800c660:	f1b8 0f00 	cmp.w	r8, #0
 800c664:	d011      	beq.n	800c68a <rmw_wait+0xaa>
 800c666:	f8d8 1000 	ldr.w	r1, [r8]
 800c66a:	b171      	cbz	r1, 800c68a <rmw_wait+0xaa>
 800c66c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800c670:	2300      	movs	r3, #0
 800c672:	2001      	movs	r0, #1
 800c674:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800c678:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800c67a:	6912      	ldr	r2, [r2, #16]
 800c67c:	3301      	adds	r3, #1
 800c67e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c682:	4299      	cmp	r1, r3
 800c684:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800c688:	d1f4      	bne.n	800c674 <rmw_wait+0x94>
 800c68a:	b185      	cbz	r5, 800c6ae <rmw_wait+0xce>
 800c68c:	6829      	ldr	r1, [r5, #0]
 800c68e:	b171      	cbz	r1, 800c6ae <rmw_wait+0xce>
 800c690:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800c694:	2300      	movs	r3, #0
 800c696:	2001      	movs	r0, #1
 800c698:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800c69c:	6a12      	ldr	r2, [r2, #32]
 800c69e:	6912      	ldr	r2, [r2, #16]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c6a6:	4299      	cmp	r1, r3
 800c6a8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800c6ac:	d1f4      	bne.n	800c698 <rmw_wait+0xb8>
 800c6ae:	b34c      	cbz	r4, 800c704 <rmw_wait+0x124>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800c6b8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c6bc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 800c6c0:	440b      	add	r3, r1
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	d1f5      	bne.n	800c6b4 <rmw_wait+0xd4>
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 8084 	beq.w	800c7d6 <rmw_wait+0x1f6>
 800c6ce:	1c7a      	adds	r2, r7, #1
 800c6d0:	d00d      	beq.n	800c6ee <rmw_wait+0x10e>
 800c6d2:	ee07 7a90 	vmov	s15, r7
 800c6d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6e6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c6ea:	ee17 7a90 	vmov	r7, s15
 800c6ee:	68a0      	ldr	r0, [r4, #8]
 800c6f0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800c6f4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f040 8090 	bne.w	800c81e <rmw_wait+0x23e>
 800c6fe:	6864      	ldr	r4, [r4, #4]
 800c700:	2c00      	cmp	r4, #0
 800c702:	d1f4      	bne.n	800c6ee <rmw_wait+0x10e>
 800c704:	f1b9 0f00 	cmp.w	r9, #0
 800c708:	f000 80bc 	beq.w	800c884 <rmw_wait+0x2a4>
 800c70c:	f8d9 7000 	ldr.w	r7, [r9]
 800c710:	2f00      	cmp	r7, #0
 800c712:	f000 808e 	beq.w	800c832 <rmw_wait+0x252>
 800c716:	2400      	movs	r4, #0
 800c718:	4627      	mov	r7, r4
 800c71a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c71e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c722:	f000 fb25 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c726:	2800      	cmp	r0, #0
 800c728:	d05f      	beq.n	800c7ea <rmw_wait+0x20a>
 800c72a:	f8d9 3000 	ldr.w	r3, [r9]
 800c72e:	3401      	adds	r4, #1
 800c730:	42a3      	cmp	r3, r4
 800c732:	f04f 0701 	mov.w	r7, #1
 800c736:	d8f0      	bhi.n	800c71a <rmw_wait+0x13a>
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	d012      	beq.n	800c764 <rmw_wait+0x184>
 800c73e:	f8d8 3000 	ldr.w	r3, [r8]
 800c742:	b17b      	cbz	r3, 800c764 <rmw_wait+0x184>
 800c744:	2400      	movs	r4, #0
 800c746:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c74a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c74e:	f000 fb0f 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c752:	2800      	cmp	r0, #0
 800c754:	d051      	beq.n	800c7fa <rmw_wait+0x21a>
 800c756:	f8d8 3000 	ldr.w	r3, [r8]
 800c75a:	3401      	adds	r4, #1
 800c75c:	42a3      	cmp	r3, r4
 800c75e:	f04f 0701 	mov.w	r7, #1
 800c762:	d8f0      	bhi.n	800c746 <rmw_wait+0x166>
 800c764:	b1dd      	cbz	r5, 800c79e <rmw_wait+0x1be>
 800c766:	682b      	ldr	r3, [r5, #0]
 800c768:	b1cb      	cbz	r3, 800c79e <rmw_wait+0x1be>
 800c76a:	2400      	movs	r4, #0
 800c76c:	686b      	ldr	r3, [r5, #4]
 800c76e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c772:	f000 fafd 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c776:	b158      	cbz	r0, 800c790 <rmw_wait+0x1b0>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	3401      	adds	r4, #1
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	d969      	bls.n	800c854 <rmw_wait+0x274>
 800c780:	686b      	ldr	r3, [r5, #4]
 800c782:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c786:	2701      	movs	r7, #1
 800c788:	f000 faf2 	bl	800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d1f3      	bne.n	800c778 <rmw_wait+0x198>
 800c790:	e9d5 3200 	ldrd	r3, r2, [r5]
 800c794:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800c798:	3401      	adds	r4, #1
 800c79a:	42a3      	cmp	r3, r4
 800c79c:	d8e6      	bhi.n	800c76c <rmw_wait+0x18c>
 800c79e:	b1a6      	cbz	r6, 800c7ca <rmw_wait+0x1ea>
 800c7a0:	6834      	ldr	r4, [r6, #0]
 800c7a2:	b194      	cbz	r4, 800c7ca <rmw_wait+0x1ea>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	461d      	mov	r5, r3
 800c7a8:	e004      	b.n	800c7b4 <rmw_wait+0x1d4>
 800c7aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	42a3      	cmp	r3, r4
 800c7b2:	d00a      	beq.n	800c7ca <rmw_wait+0x1ea>
 800c7b4:	6870      	ldr	r0, [r6, #4]
 800c7b6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c7ba:	7c0a      	ldrb	r2, [r1, #16]
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	d0f4      	beq.n	800c7aa <rmw_wait+0x1ca>
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	42a3      	cmp	r3, r4
 800c7c4:	740d      	strb	r5, [r1, #16]
 800c7c6:	4617      	mov	r7, r2
 800c7c8:	d1f4      	bne.n	800c7b4 <rmw_wait+0x1d4>
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d03e      	beq.n	800c84c <rmw_wait+0x26c>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	b009      	add	sp, #36	@ 0x24
 800c7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7d6:	68a0      	ldr	r0, [r4, #8]
 800c7d8:	2100      	movs	r1, #0
 800c7da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c7de:	f002 fd69 	bl	800f2b4 <uxr_run_session_timeout>
 800c7e2:	6864      	ldr	r4, [r4, #4]
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d1f6      	bne.n	800c7d6 <rmw_wait+0x1f6>
 800c7e8:	e78c      	b.n	800c704 <rmw_wait+0x124>
 800c7ea:	e9d9 3200 	ldrd	r3, r2, [r9]
 800c7ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800c7f2:	3401      	adds	r4, #1
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	d890      	bhi.n	800c71a <rmw_wait+0x13a>
 800c7f8:	e79e      	b.n	800c738 <rmw_wait+0x158>
 800c7fa:	e9d8 3200 	ldrd	r3, r2, [r8]
 800c7fe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800c802:	3401      	adds	r4, #1
 800c804:	429c      	cmp	r4, r3
 800c806:	d39e      	bcc.n	800c746 <rmw_wait+0x166>
 800c808:	e7ac      	b.n	800c764 <rmw_wait+0x184>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f47f aef3 	bne.w	800c5f6 <rmw_wait+0x16>
 800c810:	2800      	cmp	r0, #0
 800c812:	f47f aef0 	bne.w	800c5f6 <rmw_wait+0x16>
 800c816:	2900      	cmp	r1, #0
 800c818:	f47f aeed 	bne.w	800c5f6 <rmw_wait+0x16>
 800c81c:	e7d7      	b.n	800c7ce <rmw_wait+0x1ee>
 800c81e:	4639      	mov	r1, r7
 800c820:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c824:	f002 fd60 	bl	800f2e8 <uxr_run_session_until_data>
 800c828:	6864      	ldr	r4, [r4, #4]
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	f47f af5f 	bne.w	800c6ee <rmw_wait+0x10e>
 800c830:	e768      	b.n	800c704 <rmw_wait+0x124>
 800c832:	f1b8 0f00 	cmp.w	r8, #0
 800c836:	d032      	beq.n	800c89e <rmw_wait+0x2be>
 800c838:	f8d8 3000 	ldr.w	r3, [r8]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d181      	bne.n	800c744 <rmw_wait+0x164>
 800c840:	461f      	mov	r7, r3
 800c842:	2d00      	cmp	r5, #0
 800c844:	d18f      	bne.n	800c766 <rmw_wait+0x186>
 800c846:	462f      	mov	r7, r5
 800c848:	2e00      	cmp	r6, #0
 800c84a:	d1a9      	bne.n	800c7a0 <rmw_wait+0x1c0>
 800c84c:	2002      	movs	r0, #2
 800c84e:	b009      	add	sp, #36	@ 0x24
 800c850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c854:	2e00      	cmp	r6, #0
 800c856:	d0ba      	beq.n	800c7ce <rmw_wait+0x1ee>
 800c858:	6834      	ldr	r4, [r6, #0]
 800c85a:	2701      	movs	r7, #1
 800c85c:	2c00      	cmp	r4, #0
 800c85e:	d1a1      	bne.n	800c7a4 <rmw_wait+0x1c4>
 800c860:	e7b5      	b.n	800c7ce <rmw_wait+0x1ee>
 800c862:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c866:	f005 fb03 	bl	8011e70 <rmw_time_total_nsec>
 800c86a:	2300      	movs	r3, #0
 800c86c:	4a13      	ldr	r2, [pc, #76]	@ (800c8bc <rmw_wait+0x2dc>)
 800c86e:	f7f3 fd6f 	bl	8000350 <__aeabi_uldivmod>
 800c872:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800c876:	f171 0300 	sbcs.w	r3, r1, #0
 800c87a:	4607      	mov	r7, r0
 800c87c:	bfa8      	it	ge
 800c87e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 800c882:	e6c9      	b.n	800c618 <rmw_wait+0x38>
 800c884:	f1b8 0f00 	cmp.w	r8, #0
 800c888:	d009      	beq.n	800c89e <rmw_wait+0x2be>
 800c88a:	f8d8 3000 	ldr.w	r3, [r8]
 800c88e:	464f      	mov	r7, r9
 800c890:	2b00      	cmp	r3, #0
 800c892:	f47f af57 	bne.w	800c744 <rmw_wait+0x164>
 800c896:	2d00      	cmp	r5, #0
 800c898:	f47f af65 	bne.w	800c766 <rmw_wait+0x186>
 800c89c:	e7d3      	b.n	800c846 <rmw_wait+0x266>
 800c89e:	b17d      	cbz	r5, 800c8c0 <rmw_wait+0x2e0>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	4647      	mov	r7, r8
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f47f af60 	bne.w	800c76a <rmw_wait+0x18a>
 800c8aa:	2e00      	cmp	r6, #0
 800c8ac:	f47f af78 	bne.w	800c7a0 <rmw_wait+0x1c0>
 800c8b0:	e7cc      	b.n	800c84c <rmw_wait+0x26c>
 800c8b2:	bf00      	nop
 800c8b4:	08014560 	.word	0x08014560
 800c8b8:	2000d9bc 	.word	0x2000d9bc
 800c8bc:	000f4240 	.word	0x000f4240
 800c8c0:	2e00      	cmp	r6, #0
 800c8c2:	d0c3      	beq.n	800c84c <rmw_wait+0x26c>
 800c8c4:	6834      	ldr	r4, [r6, #0]
 800c8c6:	462f      	mov	r7, r5
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	f47f af6b 	bne.w	800c7a4 <rmw_wait+0x1c4>
 800c8ce:	e7bd      	b.n	800c84c <rmw_wait+0x26c>

0800c8d0 <rmw_create_wait_set>:
 800c8d0:	b508      	push	{r3, lr}
 800c8d2:	4803      	ldr	r0, [pc, #12]	@ (800c8e0 <rmw_create_wait_set+0x10>)
 800c8d4:	f005 fbe4 	bl	80120a0 <get_memory>
 800c8d8:	b108      	cbz	r0, 800c8de <rmw_create_wait_set+0xe>
 800c8da:	6880      	ldr	r0, [r0, #8]
 800c8dc:	3010      	adds	r0, #16
 800c8de:	bd08      	pop	{r3, pc}
 800c8e0:	2000d9fc 	.word	0x2000d9fc

0800c8e4 <rmw_destroy_wait_set>:
 800c8e4:	b508      	push	{r3, lr}
 800c8e6:	4b08      	ldr	r3, [pc, #32]	@ (800c908 <rmw_destroy_wait_set+0x24>)
 800c8e8:	6819      	ldr	r1, [r3, #0]
 800c8ea:	b911      	cbnz	r1, 800c8f2 <rmw_destroy_wait_set+0xe>
 800c8ec:	e00a      	b.n	800c904 <rmw_destroy_wait_set+0x20>
 800c8ee:	6849      	ldr	r1, [r1, #4]
 800c8f0:	b141      	cbz	r1, 800c904 <rmw_destroy_wait_set+0x20>
 800c8f2:	688b      	ldr	r3, [r1, #8]
 800c8f4:	3310      	adds	r3, #16
 800c8f6:	4298      	cmp	r0, r3
 800c8f8:	d1f9      	bne.n	800c8ee <rmw_destroy_wait_set+0xa>
 800c8fa:	4803      	ldr	r0, [pc, #12]	@ (800c908 <rmw_destroy_wait_set+0x24>)
 800c8fc:	f005 fbe0 	bl	80120c0 <put_memory>
 800c900:	2000      	movs	r0, #0
 800c902:	bd08      	pop	{r3, pc}
 800c904:	2001      	movs	r0, #1
 800c906:	bd08      	pop	{r3, pc}
 800c908:	2000d9fc 	.word	0x2000d9fc

0800c90c <rmw_uxrce_init_service_memory>:
 800c90c:	b1e2      	cbz	r2, 800c948 <rmw_uxrce_init_service_memory+0x3c>
 800c90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c912:	7b05      	ldrb	r5, [r0, #12]
 800c914:	4606      	mov	r6, r0
 800c916:	b9ad      	cbnz	r5, 800c944 <rmw_uxrce_init_service_memory+0x38>
 800c918:	23c8      	movs	r3, #200	@ 0xc8
 800c91a:	e9c0 5500 	strd	r5, r5, [r0]
 800c91e:	6083      	str	r3, [r0, #8]
 800c920:	f240 1301 	movw	r3, #257	@ 0x101
 800c924:	4617      	mov	r7, r2
 800c926:	8183      	strh	r3, [r0, #12]
 800c928:	460c      	mov	r4, r1
 800c92a:	46a8      	mov	r8, r5
 800c92c:	4621      	mov	r1, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	3501      	adds	r5, #1
 800c932:	f005 fbc5 	bl	80120c0 <put_memory>
 800c936:	42af      	cmp	r7, r5
 800c938:	60a4      	str	r4, [r4, #8]
 800c93a:	f884 800c 	strb.w	r8, [r4, #12]
 800c93e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c942:	d1f3      	bne.n	800c92c <rmw_uxrce_init_service_memory+0x20>
 800c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop

0800c94c <rmw_uxrce_init_client_memory>:
 800c94c:	b1e2      	cbz	r2, 800c988 <rmw_uxrce_init_client_memory+0x3c>
 800c94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	7b05      	ldrb	r5, [r0, #12]
 800c954:	4606      	mov	r6, r0
 800c956:	b9ad      	cbnz	r5, 800c984 <rmw_uxrce_init_client_memory+0x38>
 800c958:	23c8      	movs	r3, #200	@ 0xc8
 800c95a:	e9c0 5500 	strd	r5, r5, [r0]
 800c95e:	6083      	str	r3, [r0, #8]
 800c960:	f240 1301 	movw	r3, #257	@ 0x101
 800c964:	4617      	mov	r7, r2
 800c966:	8183      	strh	r3, [r0, #12]
 800c968:	460c      	mov	r4, r1
 800c96a:	46a8      	mov	r8, r5
 800c96c:	4621      	mov	r1, r4
 800c96e:	4630      	mov	r0, r6
 800c970:	3501      	adds	r5, #1
 800c972:	f005 fba5 	bl	80120c0 <put_memory>
 800c976:	42af      	cmp	r7, r5
 800c978:	60a4      	str	r4, [r4, #8]
 800c97a:	f884 800c 	strb.w	r8, [r4, #12]
 800c97e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c982:	d1f3      	bne.n	800c96c <rmw_uxrce_init_client_memory+0x20>
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop

0800c98c <rmw_uxrce_init_publisher_memory>:
 800c98c:	b1e2      	cbz	r2, 800c9c8 <rmw_uxrce_init_publisher_memory+0x3c>
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	7b05      	ldrb	r5, [r0, #12]
 800c994:	4606      	mov	r6, r0
 800c996:	b9ad      	cbnz	r5, 800c9c4 <rmw_uxrce_init_publisher_memory+0x38>
 800c998:	23d8      	movs	r3, #216	@ 0xd8
 800c99a:	e9c0 5500 	strd	r5, r5, [r0]
 800c99e:	6083      	str	r3, [r0, #8]
 800c9a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9a4:	4617      	mov	r7, r2
 800c9a6:	8183      	strh	r3, [r0, #12]
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	46a8      	mov	r8, r5
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	3501      	adds	r5, #1
 800c9b2:	f005 fb85 	bl	80120c0 <put_memory>
 800c9b6:	42af      	cmp	r7, r5
 800c9b8:	60a4      	str	r4, [r4, #8]
 800c9ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c9be:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c9c2:	d1f3      	bne.n	800c9ac <rmw_uxrce_init_publisher_memory+0x20>
 800c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <rmw_uxrce_init_subscription_memory>:
 800c9cc:	b1e2      	cbz	r2, 800ca08 <rmw_uxrce_init_subscription_memory+0x3c>
 800c9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d2:	7b05      	ldrb	r5, [r0, #12]
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	b9ad      	cbnz	r5, 800ca04 <rmw_uxrce_init_subscription_memory+0x38>
 800c9d8:	23d8      	movs	r3, #216	@ 0xd8
 800c9da:	e9c0 5500 	strd	r5, r5, [r0]
 800c9de:	6083      	str	r3, [r0, #8]
 800c9e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c9e4:	4617      	mov	r7, r2
 800c9e6:	8183      	strh	r3, [r0, #12]
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	46a8      	mov	r8, r5
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	3501      	adds	r5, #1
 800c9f2:	f005 fb65 	bl	80120c0 <put_memory>
 800c9f6:	42af      	cmp	r7, r5
 800c9f8:	60a4      	str	r4, [r4, #8]
 800c9fa:	f884 800c 	strb.w	r8, [r4, #12]
 800c9fe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ca02:	d1f3      	bne.n	800c9ec <rmw_uxrce_init_subscription_memory+0x20>
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop

0800ca0c <rmw_uxrce_init_node_memory>:
 800ca0c:	b1e2      	cbz	r2, 800ca48 <rmw_uxrce_init_node_memory+0x3c>
 800ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca12:	7b05      	ldrb	r5, [r0, #12]
 800ca14:	4606      	mov	r6, r0
 800ca16:	b9ad      	cbnz	r5, 800ca44 <rmw_uxrce_init_node_memory+0x38>
 800ca18:	23a4      	movs	r3, #164	@ 0xa4
 800ca1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ca1e:	6083      	str	r3, [r0, #8]
 800ca20:	f240 1301 	movw	r3, #257	@ 0x101
 800ca24:	4617      	mov	r7, r2
 800ca26:	8183      	strh	r3, [r0, #12]
 800ca28:	460c      	mov	r4, r1
 800ca2a:	46a8      	mov	r8, r5
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4630      	mov	r0, r6
 800ca30:	3501      	adds	r5, #1
 800ca32:	f005 fb45 	bl	80120c0 <put_memory>
 800ca36:	42af      	cmp	r7, r5
 800ca38:	60a4      	str	r4, [r4, #8]
 800ca3a:	f884 800c 	strb.w	r8, [r4, #12]
 800ca3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ca42:	d1f3      	bne.n	800ca2c <rmw_uxrce_init_node_memory+0x20>
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop

0800ca4c <rmw_uxrce_init_session_memory>:
 800ca4c:	b1ea      	cbz	r2, 800ca8a <rmw_uxrce_init_session_memory+0x3e>
 800ca4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca52:	7b05      	ldrb	r5, [r0, #12]
 800ca54:	4606      	mov	r6, r0
 800ca56:	b9b5      	cbnz	r5, 800ca86 <rmw_uxrce_init_session_memory+0x3a>
 800ca58:	e9c0 5500 	strd	r5, r5, [r0]
 800ca5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ca60:	f240 1301 	movw	r3, #257	@ 0x101
 800ca64:	4617      	mov	r7, r2
 800ca66:	f8c0 8008 	str.w	r8, [r0, #8]
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	8183      	strh	r3, [r0, #12]
 800ca6e:	46a9      	mov	r9, r5
 800ca70:	4621      	mov	r1, r4
 800ca72:	4630      	mov	r0, r6
 800ca74:	3501      	adds	r5, #1
 800ca76:	f005 fb23 	bl	80120c0 <put_memory>
 800ca7a:	42af      	cmp	r7, r5
 800ca7c:	60a4      	str	r4, [r4, #8]
 800ca7e:	f884 900c 	strb.w	r9, [r4, #12]
 800ca82:	4444      	add	r4, r8
 800ca84:	d1f4      	bne.n	800ca70 <rmw_uxrce_init_session_memory+0x24>
 800ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8a:	4770      	bx	lr

0800ca8c <rmw_uxrce_init_topic_memory>:
 800ca8c:	b1e2      	cbz	r2, 800cac8 <rmw_uxrce_init_topic_memory+0x3c>
 800ca8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca92:	7b05      	ldrb	r5, [r0, #12]
 800ca94:	4606      	mov	r6, r0
 800ca96:	b9ad      	cbnz	r5, 800cac4 <rmw_uxrce_init_topic_memory+0x38>
 800ca98:	231c      	movs	r3, #28
 800ca9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ca9e:	6083      	str	r3, [r0, #8]
 800caa0:	f240 1301 	movw	r3, #257	@ 0x101
 800caa4:	4617      	mov	r7, r2
 800caa6:	8183      	strh	r3, [r0, #12]
 800caa8:	460c      	mov	r4, r1
 800caaa:	46a8      	mov	r8, r5
 800caac:	4621      	mov	r1, r4
 800caae:	4630      	mov	r0, r6
 800cab0:	3501      	adds	r5, #1
 800cab2:	f005 fb05 	bl	80120c0 <put_memory>
 800cab6:	42af      	cmp	r7, r5
 800cab8:	60a4      	str	r4, [r4, #8]
 800caba:	f884 800c 	strb.w	r8, [r4, #12]
 800cabe:	f104 041c 	add.w	r4, r4, #28
 800cac2:	d1f3      	bne.n	800caac <rmw_uxrce_init_topic_memory+0x20>
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop

0800cacc <rmw_uxrce_init_static_input_buffer_memory>:
 800cacc:	b1ea      	cbz	r2, 800cb0a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad2:	7b05      	ldrb	r5, [r0, #12]
 800cad4:	4606      	mov	r6, r0
 800cad6:	b9b5      	cbnz	r5, 800cb06 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cad8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800cadc:	e9c0 5500 	strd	r5, r5, [r0]
 800cae0:	6083      	str	r3, [r0, #8]
 800cae2:	f240 1301 	movw	r3, #257	@ 0x101
 800cae6:	4617      	mov	r7, r2
 800cae8:	8183      	strh	r3, [r0, #12]
 800caea:	460c      	mov	r4, r1
 800caec:	46a8      	mov	r8, r5
 800caee:	4621      	mov	r1, r4
 800caf0:	4630      	mov	r0, r6
 800caf2:	3501      	adds	r5, #1
 800caf4:	f005 fae4 	bl	80120c0 <put_memory>
 800caf8:	42af      	cmp	r7, r5
 800cafa:	60a4      	str	r4, [r4, #8]
 800cafc:	f884 800c 	strb.w	r8, [r4, #12]
 800cb00:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800cb04:	d1f3      	bne.n	800caee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0a:	4770      	bx	lr

0800cb0c <rmw_uxrce_init_init_options_impl_memory>:
 800cb0c:	b1e2      	cbz	r2, 800cb48 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	7b05      	ldrb	r5, [r0, #12]
 800cb14:	4606      	mov	r6, r0
 800cb16:	b9ad      	cbnz	r5, 800cb44 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cb18:	232c      	movs	r3, #44	@ 0x2c
 800cb1a:	e9c0 5500 	strd	r5, r5, [r0]
 800cb1e:	6083      	str	r3, [r0, #8]
 800cb20:	f240 1301 	movw	r3, #257	@ 0x101
 800cb24:	4617      	mov	r7, r2
 800cb26:	8183      	strh	r3, [r0, #12]
 800cb28:	460c      	mov	r4, r1
 800cb2a:	46a8      	mov	r8, r5
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4630      	mov	r0, r6
 800cb30:	3501      	adds	r5, #1
 800cb32:	f005 fac5 	bl	80120c0 <put_memory>
 800cb36:	42af      	cmp	r7, r5
 800cb38:	60a4      	str	r4, [r4, #8]
 800cb3a:	f884 800c 	strb.w	r8, [r4, #12]
 800cb3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cb42:	d1f3      	bne.n	800cb2c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop

0800cb4c <rmw_uxrce_init_wait_set_memory>:
 800cb4c:	b1e2      	cbz	r2, 800cb88 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb52:	7b05      	ldrb	r5, [r0, #12]
 800cb54:	4606      	mov	r6, r0
 800cb56:	b9ad      	cbnz	r5, 800cb84 <rmw_uxrce_init_wait_set_memory+0x38>
 800cb58:	231c      	movs	r3, #28
 800cb5a:	e9c0 5500 	strd	r5, r5, [r0]
 800cb5e:	6083      	str	r3, [r0, #8]
 800cb60:	f240 1301 	movw	r3, #257	@ 0x101
 800cb64:	4617      	mov	r7, r2
 800cb66:	8183      	strh	r3, [r0, #12]
 800cb68:	460c      	mov	r4, r1
 800cb6a:	46a8      	mov	r8, r5
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4630      	mov	r0, r6
 800cb70:	3501      	adds	r5, #1
 800cb72:	f005 faa5 	bl	80120c0 <put_memory>
 800cb76:	42af      	cmp	r7, r5
 800cb78:	60a4      	str	r4, [r4, #8]
 800cb7a:	f884 800c 	strb.w	r8, [r4, #12]
 800cb7e:	f104 041c 	add.w	r4, r4, #28
 800cb82:	d1f3      	bne.n	800cb6c <rmw_uxrce_init_wait_set_memory+0x20>
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop

0800cb8c <rmw_uxrce_init_guard_condition_memory>:
 800cb8c:	b1e2      	cbz	r2, 800cbc8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb92:	7b05      	ldrb	r5, [r0, #12]
 800cb94:	4606      	mov	r6, r0
 800cb96:	b9ad      	cbnz	r5, 800cbc4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cb98:	2320      	movs	r3, #32
 800cb9a:	e9c0 5500 	strd	r5, r5, [r0]
 800cb9e:	6083      	str	r3, [r0, #8]
 800cba0:	f240 1301 	movw	r3, #257	@ 0x101
 800cba4:	4617      	mov	r7, r2
 800cba6:	8183      	strh	r3, [r0, #12]
 800cba8:	460c      	mov	r4, r1
 800cbaa:	46a8      	mov	r8, r5
 800cbac:	4621      	mov	r1, r4
 800cbae:	4630      	mov	r0, r6
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	f005 fa85 	bl	80120c0 <put_memory>
 800cbb6:	42af      	cmp	r7, r5
 800cbb8:	60a4      	str	r4, [r4, #8]
 800cbba:	f884 800c 	strb.w	r8, [r4, #12]
 800cbbe:	f104 0420 	add.w	r4, r4, #32
 800cbc2:	d1f3      	bne.n	800cbac <rmw_uxrce_init_guard_condition_memory+0x20>
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop

0800cbcc <rmw_uxrce_fini_session_memory>:
 800cbcc:	4601      	mov	r1, r0
 800cbce:	4801      	ldr	r0, [pc, #4]	@ (800cbd4 <rmw_uxrce_fini_session_memory+0x8>)
 800cbd0:	f005 ba76 	b.w	80120c0 <put_memory>
 800cbd4:	2000d9bc 	.word	0x2000d9bc

0800cbd8 <rmw_uxrce_fini_node_memory>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	4604      	mov	r4, r0
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	b128      	cbz	r0, 800cbec <rmw_uxrce_fini_node_memory+0x14>
 800cbe0:	4b07      	ldr	r3, [pc, #28]	@ (800cc00 <rmw_uxrce_fini_node_memory+0x28>)
 800cbe2:	6819      	ldr	r1, [r3, #0]
 800cbe4:	f7f3 fafc 	bl	80001e0 <strcmp>
 800cbe8:	b940      	cbnz	r0, 800cbfc <rmw_uxrce_fini_node_memory+0x24>
 800cbea:	6020      	str	r0, [r4, #0]
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	b129      	cbz	r1, 800cbfc <rmw_uxrce_fini_node_memory+0x24>
 800cbf0:	2500      	movs	r5, #0
 800cbf2:	4804      	ldr	r0, [pc, #16]	@ (800cc04 <rmw_uxrce_fini_node_memory+0x2c>)
 800cbf4:	610d      	str	r5, [r1, #16]
 800cbf6:	f005 fa63 	bl	80120c0 <put_memory>
 800cbfa:	6065      	str	r5, [r4, #4]
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	bf00      	nop
 800cc00:	0801514c 	.word	0x0801514c
 800cc04:	2000d98c 	.word	0x2000d98c

0800cc08 <rmw_uxrce_fini_publisher_memory>:
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	6800      	ldr	r0, [r0, #0]
 800cc0e:	b128      	cbz	r0, 800cc1c <rmw_uxrce_fini_publisher_memory+0x14>
 800cc10:	4b06      	ldr	r3, [pc, #24]	@ (800cc2c <rmw_uxrce_fini_publisher_memory+0x24>)
 800cc12:	6819      	ldr	r1, [r3, #0]
 800cc14:	f7f3 fae4 	bl	80001e0 <strcmp>
 800cc18:	b938      	cbnz	r0, 800cc2a <rmw_uxrce_fini_publisher_memory+0x22>
 800cc1a:	6020      	str	r0, [r4, #0]
 800cc1c:	6861      	ldr	r1, [r4, #4]
 800cc1e:	b121      	cbz	r1, 800cc2a <rmw_uxrce_fini_publisher_memory+0x22>
 800cc20:	4803      	ldr	r0, [pc, #12]	@ (800cc30 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cc22:	f005 fa4d 	bl	80120c0 <put_memory>
 800cc26:	2300      	movs	r3, #0
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	bd10      	pop	{r4, pc}
 800cc2c:	0801514c 	.word	0x0801514c
 800cc30:	2000d99c 	.word	0x2000d99c

0800cc34 <rmw_uxrce_fini_subscription_memory>:
 800cc34:	b510      	push	{r4, lr}
 800cc36:	4604      	mov	r4, r0
 800cc38:	6800      	ldr	r0, [r0, #0]
 800cc3a:	b128      	cbz	r0, 800cc48 <rmw_uxrce_fini_subscription_memory+0x14>
 800cc3c:	4b06      	ldr	r3, [pc, #24]	@ (800cc58 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cc3e:	6819      	ldr	r1, [r3, #0]
 800cc40:	f7f3 face 	bl	80001e0 <strcmp>
 800cc44:	b938      	cbnz	r0, 800cc56 <rmw_uxrce_fini_subscription_memory+0x22>
 800cc46:	6020      	str	r0, [r4, #0]
 800cc48:	6861      	ldr	r1, [r4, #4]
 800cc4a:	b121      	cbz	r1, 800cc56 <rmw_uxrce_fini_subscription_memory+0x22>
 800cc4c:	4803      	ldr	r0, [pc, #12]	@ (800cc5c <rmw_uxrce_fini_subscription_memory+0x28>)
 800cc4e:	f005 fa37 	bl	80120c0 <put_memory>
 800cc52:	2300      	movs	r3, #0
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	0801514c 	.word	0x0801514c
 800cc5c:	2000d9dc 	.word	0x2000d9dc

0800cc60 <rmw_uxrce_fini_service_memory>:
 800cc60:	b510      	push	{r4, lr}
 800cc62:	4604      	mov	r4, r0
 800cc64:	6800      	ldr	r0, [r0, #0]
 800cc66:	b128      	cbz	r0, 800cc74 <rmw_uxrce_fini_service_memory+0x14>
 800cc68:	4b06      	ldr	r3, [pc, #24]	@ (800cc84 <rmw_uxrce_fini_service_memory+0x24>)
 800cc6a:	6819      	ldr	r1, [r3, #0]
 800cc6c:	f7f3 fab8 	bl	80001e0 <strcmp>
 800cc70:	b938      	cbnz	r0, 800cc82 <rmw_uxrce_fini_service_memory+0x22>
 800cc72:	6020      	str	r0, [r4, #0]
 800cc74:	6861      	ldr	r1, [r4, #4]
 800cc76:	b121      	cbz	r1, 800cc82 <rmw_uxrce_fini_service_memory+0x22>
 800cc78:	4803      	ldr	r0, [pc, #12]	@ (800cc88 <rmw_uxrce_fini_service_memory+0x28>)
 800cc7a:	f005 fa21 	bl	80120c0 <put_memory>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6063      	str	r3, [r4, #4]
 800cc82:	bd10      	pop	{r4, pc}
 800cc84:	0801514c 	.word	0x0801514c
 800cc88:	2000d9ac 	.word	0x2000d9ac

0800cc8c <rmw_uxrce_fini_client_memory>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	4604      	mov	r4, r0
 800cc90:	6800      	ldr	r0, [r0, #0]
 800cc92:	b128      	cbz	r0, 800cca0 <rmw_uxrce_fini_client_memory+0x14>
 800cc94:	4b06      	ldr	r3, [pc, #24]	@ (800ccb0 <rmw_uxrce_fini_client_memory+0x24>)
 800cc96:	6819      	ldr	r1, [r3, #0]
 800cc98:	f7f3 faa2 	bl	80001e0 <strcmp>
 800cc9c:	b938      	cbnz	r0, 800ccae <rmw_uxrce_fini_client_memory+0x22>
 800cc9e:	6020      	str	r0, [r4, #0]
 800cca0:	6861      	ldr	r1, [r4, #4]
 800cca2:	b121      	cbz	r1, 800ccae <rmw_uxrce_fini_client_memory+0x22>
 800cca4:	4803      	ldr	r0, [pc, #12]	@ (800ccb4 <rmw_uxrce_fini_client_memory+0x28>)
 800cca6:	f005 fa0b 	bl	80120c0 <put_memory>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6063      	str	r3, [r4, #4]
 800ccae:	bd10      	pop	{r4, pc}
 800ccb0:	0801514c 	.word	0x0801514c
 800ccb4:	200090c0 	.word	0x200090c0

0800ccb8 <rmw_uxrce_fini_topic_memory>:
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4803      	ldr	r0, [pc, #12]	@ (800cccc <rmw_uxrce_fini_topic_memory+0x14>)
 800ccc0:	f005 f9fe 	bl	80120c0 <put_memory>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	61a3      	str	r3, [r4, #24]
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	2000d9ec 	.word	0x2000d9ec

0800ccd0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	b530      	push	{r4, r5, lr}
 800ccd4:	4925      	ldr	r1, [pc, #148]	@ (800cd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ccd6:	680d      	ldr	r5, [r1, #0]
 800ccd8:	ac03      	add	r4, sp, #12
 800ccda:	e884 000c 	stmia.w	r4, {r2, r3}
 800ccde:	461c      	mov	r4, r3
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	d041      	beq.n	800cd68 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cce4:	462b      	mov	r3, r5
 800cce6:	2100      	movs	r1, #0
 800cce8:	689a      	ldr	r2, [r3, #8]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ccf0:	4290      	cmp	r0, r2
 800ccf2:	bf08      	it	eq
 800ccf4:	3101      	addeq	r1, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1f6      	bne.n	800cce8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ccfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	d029      	beq.n	800cd56 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cd02:	d907      	bls.n	800cd14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d005      	beq.n	800cd14 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cd08:	2100      	movs	r1, #0
 800cd0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd0e:	4608      	mov	r0, r1
 800cd10:	b002      	add	sp, #8
 800cd12:	4770      	bx	lr
 800cd14:	b314      	cbz	r4, 800cd5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cd16:	428c      	cmp	r4, r1
 800cd18:	d820      	bhi.n	800cd5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	d0f4      	beq.n	800cd08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cd1e:	2100      	movs	r1, #0
 800cd20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cd24:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cd28:	e002      	b.n	800cd30 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800cd2a:	686d      	ldr	r5, [r5, #4]
 800cd2c:	2d00      	cmp	r5, #0
 800cd2e:	d0ec      	beq.n	800cd0a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cd30:	68ab      	ldr	r3, [r5, #8]
 800cd32:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800cd36:	4290      	cmp	r0, r2
 800cd38:	d1f7      	bne.n	800cd2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cd3a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800cd3e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cd42:	4562      	cmp	r2, ip
 800cd44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cd48:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cd4c:	daed      	bge.n	800cd2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cd4e:	4694      	mov	ip, r2
 800cd50:	461c      	mov	r4, r3
 800cd52:	4629      	mov	r1, r5
 800cd54:	e7e9      	b.n	800cd2a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cd56:	b10c      	cbz	r4, 800cd5c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cd58:	428c      	cmp	r4, r1
 800cd5a:	d9d5      	bls.n	800cd08 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cd5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd60:	4802      	ldr	r0, [pc, #8]	@ (800cd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cd62:	b002      	add	sp, #8
 800cd64:	f005 b99c 	b.w	80120a0 <get_memory>
 800cd68:	4629      	mov	r1, r5
 800cd6a:	e7c6      	b.n	800ccfa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800cd6c:	2000d9cc 	.word	0x2000d9cc

0800cd70 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cd70:	4b11      	ldr	r3, [pc, #68]	@ (800cdb8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b530      	push	{r4, r5, lr}
 800cd76:	b1e3      	cbz	r3, 800cdb2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cd78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800cd7c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800cd80:	2400      	movs	r4, #0
 800cd82:	e001      	b.n	800cd88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	b193      	cbz	r3, 800cdae <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800cd88:	689a      	ldr	r2, [r3, #8]
 800cd8a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800cd8e:	4288      	cmp	r0, r1
 800cd90:	d1f8      	bne.n	800cd84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cd92:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800cd96:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800cd9a:	4571      	cmp	r1, lr
 800cd9c:	eb72 050c 	sbcs.w	r5, r2, ip
 800cda0:	daf0      	bge.n	800cd84 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cda2:	461c      	mov	r4, r3
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	468e      	mov	lr, r1
 800cda8:	4694      	mov	ip, r2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1ec      	bne.n	800cd88 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	bd30      	pop	{r4, r5, pc}
 800cdb2:	461c      	mov	r4, r3
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	bd30      	pop	{r4, r5, pc}
 800cdb8:	2000d9cc 	.word	0x2000d9cc
 800cdbc:	00000000 	.word	0x00000000

0800cdc0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc4:	4b3c      	ldr	r3, [pc, #240]	@ (800ceb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cdc6:	ed2d 8b06 	vpush	{d8-d10}
 800cdca:	681f      	ldr	r7, [r3, #0]
 800cdcc:	b08d      	sub	sp, #52	@ 0x34
 800cdce:	f005 fa25 	bl	801221c <rmw_uros_epoch_nanos>
 800cdd2:	2f00      	cmp	r7, #0
 800cdd4:	d05d      	beq.n	800ce92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cdd6:	46b8      	mov	r8, r7
 800cdd8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800cea0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800cddc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cde0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800cea8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800cdea:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ceb0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800cdee:	4681      	mov	r9, r0
 800cdf0:	468a      	mov	sl, r1
 800cdf2:	ac04      	add	r4, sp, #16
 800cdf4:	d03f      	beq.n	800ce76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	d044      	beq.n	800ce84 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cdfa:	2b03      	cmp	r3, #3
 800cdfc:	d03b      	beq.n	800ce76 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cdfe:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ce02:	ed8d ab06 	vstr	d10, [sp, #24]
 800ce06:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ce0a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ce0e:	ab08      	add	r3, sp, #32
 800ce10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ce16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ce1a:	f004 ffd5 	bl	8011dc8 <rmw_time_equal>
 800ce1e:	b118      	cbz	r0, 800ce28 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ce20:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ce24:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ce28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ce2c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ce30:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ce34:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ce38:	f005 f81a 	bl	8011e70 <rmw_time_total_nsec>
 800ce3c:	1830      	adds	r0, r6, r0
 800ce3e:	eb47 0101 	adc.w	r1, r7, r1
 800ce42:	4548      	cmp	r0, r9
 800ce44:	eb71 030a 	sbcs.w	r3, r1, sl
 800ce48:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ce4c:	db05      	blt.n	800ce5a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ce4e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ce52:	4591      	cmp	r9, r2
 800ce54:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ce58:	da03      	bge.n	800ce62 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ce5a:	4817      	ldr	r0, [pc, #92]	@ (800ceb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ce5c:	4641      	mov	r1, r8
 800ce5e:	f005 f92f 	bl	80120c0 <put_memory>
 800ce62:	f1bb 0f00 	cmp.w	fp, #0
 800ce66:	d014      	beq.n	800ce92 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ce68:	46d8      	mov	r8, fp
 800ce6a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ce6e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ce72:	2b04      	cmp	r3, #4
 800ce74:	d1bf      	bne.n	800cdf6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ce76:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ce7a:	3340      	adds	r3, #64	@ 0x40
 800ce7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce82:	e7c0      	b.n	800ce06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce84:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ce88:	3348      	adds	r3, #72	@ 0x48
 800ce8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce90:	e7b9      	b.n	800ce06 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ce92:	b00d      	add	sp, #52	@ 0x34
 800ce94:	ecbd 8b06 	vpop	{d8-d10}
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9c:	f3af 8000 	nop.w
	...
 800cea8:	00000001 	.word	0x00000001
 800ceac:	00000000 	.word	0x00000000
 800ceb0:	0000001e 	.word	0x0000001e
 800ceb4:	00000000 	.word	0x00000000
 800ceb8:	2000d9cc 	.word	0x2000d9cc

0800cebc <run_xrce_session>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	788c      	ldrb	r4, [r1, #2]
 800cec0:	b086      	sub	sp, #24
 800cec2:	2c01      	cmp	r4, #1
 800cec4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cec8:	d00c      	beq.n	800cee4 <run_xrce_session+0x28>
 800ceca:	4619      	mov	r1, r3
 800cecc:	2301      	movs	r3, #1
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	f10d 020e 	add.w	r2, sp, #14
 800ced4:	f10d 0317 	add.w	r3, sp, #23
 800ced8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cedc:	f002 fa4a 	bl	800f374 <uxr_run_session_until_all_status>
 800cee0:	b006      	add	sp, #24
 800cee2:	bd10      	pop	{r4, pc}
 800cee4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cee8:	f001 fe5e 	bl	800eba8 <uxr_flash_output_streams>
 800ceec:	4620      	mov	r0, r4
 800ceee:	b006      	add	sp, #24
 800cef0:	bd10      	pop	{r4, pc}
 800cef2:	bf00      	nop

0800cef4 <convert_qos_profile>:
 800cef4:	7a4a      	ldrb	r2, [r1, #9]
 800cef6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800cefa:	2a02      	cmp	r2, #2
 800cefc:	bf18      	it	ne
 800cefe:	2200      	movne	r2, #0
 800cf00:	7002      	strb	r2, [r0, #0]
 800cf02:	780a      	ldrb	r2, [r1, #0]
 800cf04:	8889      	ldrh	r1, [r1, #4]
 800cf06:	8081      	strh	r1, [r0, #4]
 800cf08:	f1ac 0c02 	sub.w	ip, ip, #2
 800cf0c:	f1a2 0202 	sub.w	r2, r2, #2
 800cf10:	fabc fc8c 	clz	ip, ip
 800cf14:	fab2 f282 	clz	r2, r2
 800cf18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800cf1c:	0952      	lsrs	r2, r2, #5
 800cf1e:	f880 c001 	strb.w	ip, [r0, #1]
 800cf22:	7082      	strb	r2, [r0, #2]
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop

0800cf28 <generate_type_name>:
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	700b      	strb	r3, [r1, #0]
 800cf2e:	6803      	ldr	r3, [r0, #0]
 800cf30:	b087      	sub	sp, #28
 800cf32:	4614      	mov	r4, r2
 800cf34:	b1d3      	cbz	r3, 800cf6c <generate_type_name+0x44>
 800cf36:	4a0f      	ldr	r2, [pc, #60]	@ (800cf74 <generate_type_name+0x4c>)
 800cf38:	4615      	mov	r5, r2
 800cf3a:	9203      	str	r2, [sp, #12]
 800cf3c:	9500      	str	r5, [sp, #0]
 800cf3e:	6842      	ldr	r2, [r0, #4]
 800cf40:	480d      	ldr	r0, [pc, #52]	@ (800cf78 <generate_type_name+0x50>)
 800cf42:	9001      	str	r0, [sp, #4]
 800cf44:	4608      	mov	r0, r1
 800cf46:	490d      	ldr	r1, [pc, #52]	@ (800cf7c <generate_type_name+0x54>)
 800cf48:	9204      	str	r2, [sp, #16]
 800cf4a:	9105      	str	r1, [sp, #20]
 800cf4c:	9102      	str	r1, [sp, #8]
 800cf4e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf80 <generate_type_name+0x58>)
 800cf50:	4621      	mov	r1, r4
 800cf52:	f006 fa4d 	bl	80133f0 <sniprintf>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	db05      	blt.n	800cf66 <generate_type_name+0x3e>
 800cf5a:	4284      	cmp	r4, r0
 800cf5c:	bfd4      	ite	le
 800cf5e:	2000      	movle	r0, #0
 800cf60:	2001      	movgt	r0, #1
 800cf62:	b007      	add	sp, #28
 800cf64:	bd30      	pop	{r4, r5, pc}
 800cf66:	2000      	movs	r0, #0
 800cf68:	b007      	add	sp, #28
 800cf6a:	bd30      	pop	{r4, r5, pc}
 800cf6c:	4b05      	ldr	r3, [pc, #20]	@ (800cf84 <generate_type_name+0x5c>)
 800cf6e:	4a01      	ldr	r2, [pc, #4]	@ (800cf74 <generate_type_name+0x4c>)
 800cf70:	461d      	mov	r5, r3
 800cf72:	e7e2      	b.n	800cf3a <generate_type_name+0x12>
 800cf74:	08014dcc 	.word	0x08014dcc
 800cf78:	08014de4 	.word	0x08014de4
 800cf7c:	08014de0 	.word	0x08014de0
 800cf80:	08014dd0 	.word	0x08014dd0
 800cf84:	08014e38 	.word	0x08014e38

0800cf88 <generate_topic_name>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	4614      	mov	r4, r2
 800cf8e:	9000      	str	r0, [sp, #0]
 800cf90:	4b08      	ldr	r3, [pc, #32]	@ (800cfb4 <generate_topic_name+0x2c>)
 800cf92:	4a09      	ldr	r2, [pc, #36]	@ (800cfb8 <generate_topic_name+0x30>)
 800cf94:	4608      	mov	r0, r1
 800cf96:	4621      	mov	r1, r4
 800cf98:	f006 fa2a 	bl	80133f0 <sniprintf>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	db05      	blt.n	800cfac <generate_topic_name+0x24>
 800cfa0:	4284      	cmp	r4, r0
 800cfa2:	bfd4      	ite	le
 800cfa4:	2000      	movle	r0, #0
 800cfa6:	2001      	movgt	r0, #1
 800cfa8:	b002      	add	sp, #8
 800cfaa:	bd10      	pop	{r4, pc}
 800cfac:	2000      	movs	r0, #0
 800cfae:	b002      	add	sp, #8
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	bf00      	nop
 800cfb4:	08014de8 	.word	0x08014de8
 800cfb8:	0801484c 	.word	0x0801484c

0800cfbc <is_uxrce_rmw_identifier_valid>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b140      	cbz	r0, 800cfd4 <is_uxrce_rmw_identifier_valid+0x18>
 800cfc2:	f7fe fbed 	bl	800b7a0 <rmw_get_implementation_identifier>
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f7f3 f909 	bl	80001e0 <strcmp>
 800cfce:	fab0 f080 	clz	r0, r0
 800cfd2:	0940      	lsrs	r0, r0, #5
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop

0800cfd8 <get_message_typesupport_handle>:
 800cfd8:	6883      	ldr	r3, [r0, #8]
 800cfda:	4718      	bx	r3

0800cfdc <get_message_typesupport_handle_function>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	6800      	ldr	r0, [r0, #0]
 800cfe2:	f7f3 f8fd 	bl	80001e0 <strcmp>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	bf0c      	ite	eq
 800cfea:	4620      	moveq	r0, r4
 800cfec:	2000      	movne	r0, #0
 800cfee:	bd10      	pop	{r4, pc}

0800cff0 <rosidl_runtime_c__String__init>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4604      	mov	r4, r0
 800cff4:	b086      	sub	sp, #24
 800cff6:	b170      	cbz	r0, 800d016 <rosidl_runtime_c__String__init+0x26>
 800cff8:	a801      	add	r0, sp, #4
 800cffa:	f7fa fec3 	bl	8007d84 <rcutils_get_default_allocator>
 800cffe:	9b01      	ldr	r3, [sp, #4]
 800d000:	9905      	ldr	r1, [sp, #20]
 800d002:	2001      	movs	r0, #1
 800d004:	4798      	blx	r3
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	b128      	cbz	r0, 800d016 <rosidl_runtime_c__String__init+0x26>
 800d00a:	2100      	movs	r1, #0
 800d00c:	2201      	movs	r2, #1
 800d00e:	7001      	strb	r1, [r0, #0]
 800d010:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d014:	4610      	mov	r0, r2
 800d016:	b006      	add	sp, #24
 800d018:	bd10      	pop	{r4, pc}
 800d01a:	bf00      	nop

0800d01c <rosidl_runtime_c__String__fini>:
 800d01c:	b320      	cbz	r0, 800d068 <rosidl_runtime_c__String__fini+0x4c>
 800d01e:	b510      	push	{r4, lr}
 800d020:	6803      	ldr	r3, [r0, #0]
 800d022:	b086      	sub	sp, #24
 800d024:	4604      	mov	r4, r0
 800d026:	b173      	cbz	r3, 800d046 <rosidl_runtime_c__String__fini+0x2a>
 800d028:	6883      	ldr	r3, [r0, #8]
 800d02a:	b1f3      	cbz	r3, 800d06a <rosidl_runtime_c__String__fini+0x4e>
 800d02c:	a801      	add	r0, sp, #4
 800d02e:	f7fa fea9 	bl	8007d84 <rcutils_get_default_allocator>
 800d032:	9b02      	ldr	r3, [sp, #8]
 800d034:	9905      	ldr	r1, [sp, #20]
 800d036:	6820      	ldr	r0, [r4, #0]
 800d038:	4798      	blx	r3
 800d03a:	2300      	movs	r3, #0
 800d03c:	e9c4 3300 	strd	r3, r3, [r4]
 800d040:	60a3      	str	r3, [r4, #8]
 800d042:	b006      	add	sp, #24
 800d044:	bd10      	pop	{r4, pc}
 800d046:	6843      	ldr	r3, [r0, #4]
 800d048:	b9db      	cbnz	r3, 800d082 <rosidl_runtime_c__String__fini+0x66>
 800d04a:	6883      	ldr	r3, [r0, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0f8      	beq.n	800d042 <rosidl_runtime_c__String__fini+0x26>
 800d050:	4b12      	ldr	r3, [pc, #72]	@ (800d09c <rosidl_runtime_c__String__fini+0x80>)
 800d052:	4813      	ldr	r0, [pc, #76]	@ (800d0a0 <rosidl_runtime_c__String__fini+0x84>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2251      	movs	r2, #81	@ 0x51
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	2101      	movs	r1, #1
 800d05c:	f006 f9a8 	bl	80133b0 <fwrite>
 800d060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d064:	f005 fe64 	bl	8012d30 <exit>
 800d068:	4770      	bx	lr
 800d06a:	4b0c      	ldr	r3, [pc, #48]	@ (800d09c <rosidl_runtime_c__String__fini+0x80>)
 800d06c:	480d      	ldr	r0, [pc, #52]	@ (800d0a4 <rosidl_runtime_c__String__fini+0x88>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	224c      	movs	r2, #76	@ 0x4c
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	2101      	movs	r1, #1
 800d076:	f006 f99b 	bl	80133b0 <fwrite>
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d07e:	f005 fe57 	bl	8012d30 <exit>
 800d082:	4b06      	ldr	r3, [pc, #24]	@ (800d09c <rosidl_runtime_c__String__fini+0x80>)
 800d084:	4808      	ldr	r0, [pc, #32]	@ (800d0a8 <rosidl_runtime_c__String__fini+0x8c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	224e      	movs	r2, #78	@ 0x4e
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	2101      	movs	r1, #1
 800d08e:	f006 f98f 	bl	80133b0 <fwrite>
 800d092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d096:	f005 fe4b 	bl	8012d30 <exit>
 800d09a:	bf00      	nop
 800d09c:	200000c0 	.word	0x200000c0
 800d0a0:	08014e8c 	.word	0x08014e8c
 800d0a4:	08014dec 	.word	0x08014dec
 800d0a8:	08014e3c 	.word	0x08014e3c

0800d0ac <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	6805      	ldr	r5, [r0, #0]
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	460e      	mov	r6, r1
 800d0b8:	f7f3 f892 	bl	80001e0 <strcmp>
 800d0bc:	b1c8      	cbz	r0, 800d0f2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d0be:	4b11      	ldr	r3, [pc, #68]	@ (800d104 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	429d      	cmp	r5, r3
 800d0c4:	d112      	bne.n	800d0ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d0c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d0ca:	f8d8 4000 	ldr.w	r4, [r8]
 800d0ce:	b16c      	cbz	r4, 800d0ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d0d0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d0d4:	2700      	movs	r7, #0
 800d0d6:	3d04      	subs	r5, #4
 800d0d8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d0dc:	4631      	mov	r1, r6
 800d0de:	f7f3 f87f 	bl	80001e0 <strcmp>
 800d0e2:	00bb      	lsls	r3, r7, #2
 800d0e4:	b140      	cbz	r0, 800d0f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d0e6:	3701      	adds	r7, #1
 800d0e8:	42bc      	cmp	r4, r7
 800d0ea:	d1f5      	bne.n	800d0d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d100:	58d3      	ldr	r3, [r2, r3]
 800d102:	4718      	bx	r3
 800d104:	200000ac 	.word	0x200000ac

0800d108 <ucdr_serialize_endian_array_char>:
 800d108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10c:	4619      	mov	r1, r3
 800d10e:	461f      	mov	r7, r3
 800d110:	4605      	mov	r5, r0
 800d112:	4690      	mov	r8, r2
 800d114:	f7fa ff90 	bl	8008038 <ucdr_check_buffer_available_for>
 800d118:	b9e0      	cbnz	r0, 800d154 <ucdr_serialize_endian_array_char+0x4c>
 800d11a:	463e      	mov	r6, r7
 800d11c:	e009      	b.n	800d132 <ucdr_serialize_endian_array_char+0x2a>
 800d11e:	68a8      	ldr	r0, [r5, #8]
 800d120:	f006 fb9d 	bl	801385e <memcpy>
 800d124:	68ab      	ldr	r3, [r5, #8]
 800d126:	6928      	ldr	r0, [r5, #16]
 800d128:	4423      	add	r3, r4
 800d12a:	4420      	add	r0, r4
 800d12c:	1b36      	subs	r6, r6, r4
 800d12e:	60ab      	str	r3, [r5, #8]
 800d130:	6128      	str	r0, [r5, #16]
 800d132:	4631      	mov	r1, r6
 800d134:	2201      	movs	r2, #1
 800d136:	4628      	mov	r0, r5
 800d138:	f7fb f806 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d13c:	1bb9      	subs	r1, r7, r6
 800d13e:	4441      	add	r1, r8
 800d140:	4604      	mov	r4, r0
 800d142:	4602      	mov	r2, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	d1ea      	bne.n	800d11e <ucdr_serialize_endian_array_char+0x16>
 800d148:	2301      	movs	r3, #1
 800d14a:	7da8      	ldrb	r0, [r5, #22]
 800d14c:	756b      	strb	r3, [r5, #21]
 800d14e:	4058      	eors	r0, r3
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d154:	463a      	mov	r2, r7
 800d156:	68a8      	ldr	r0, [r5, #8]
 800d158:	4641      	mov	r1, r8
 800d15a:	f006 fb80 	bl	801385e <memcpy>
 800d15e:	68aa      	ldr	r2, [r5, #8]
 800d160:	692b      	ldr	r3, [r5, #16]
 800d162:	443a      	add	r2, r7
 800d164:	443b      	add	r3, r7
 800d166:	60aa      	str	r2, [r5, #8]
 800d168:	612b      	str	r3, [r5, #16]
 800d16a:	e7ed      	b.n	800d148 <ucdr_serialize_endian_array_char+0x40>

0800d16c <ucdr_deserialize_endian_array_char>:
 800d16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d170:	4619      	mov	r1, r3
 800d172:	461f      	mov	r7, r3
 800d174:	4605      	mov	r5, r0
 800d176:	4690      	mov	r8, r2
 800d178:	f7fa ff5e 	bl	8008038 <ucdr_check_buffer_available_for>
 800d17c:	b9e0      	cbnz	r0, 800d1b8 <ucdr_deserialize_endian_array_char+0x4c>
 800d17e:	463e      	mov	r6, r7
 800d180:	e009      	b.n	800d196 <ucdr_deserialize_endian_array_char+0x2a>
 800d182:	68a9      	ldr	r1, [r5, #8]
 800d184:	f006 fb6b 	bl	801385e <memcpy>
 800d188:	68ab      	ldr	r3, [r5, #8]
 800d18a:	6928      	ldr	r0, [r5, #16]
 800d18c:	4423      	add	r3, r4
 800d18e:	4420      	add	r0, r4
 800d190:	1b36      	subs	r6, r6, r4
 800d192:	60ab      	str	r3, [r5, #8]
 800d194:	6128      	str	r0, [r5, #16]
 800d196:	2201      	movs	r2, #1
 800d198:	4631      	mov	r1, r6
 800d19a:	4628      	mov	r0, r5
 800d19c:	f7fa ffd4 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	1bb8      	subs	r0, r7, r6
 800d1a4:	4440      	add	r0, r8
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	2c00      	cmp	r4, #0
 800d1aa:	d1ea      	bne.n	800d182 <ucdr_deserialize_endian_array_char+0x16>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	7da8      	ldrb	r0, [r5, #22]
 800d1b0:	756b      	strb	r3, [r5, #21]
 800d1b2:	4058      	eors	r0, r3
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b8:	463a      	mov	r2, r7
 800d1ba:	68a9      	ldr	r1, [r5, #8]
 800d1bc:	4640      	mov	r0, r8
 800d1be:	f006 fb4e 	bl	801385e <memcpy>
 800d1c2:	68aa      	ldr	r2, [r5, #8]
 800d1c4:	692b      	ldr	r3, [r5, #16]
 800d1c6:	443a      	add	r2, r7
 800d1c8:	443b      	add	r3, r7
 800d1ca:	60aa      	str	r2, [r5, #8]
 800d1cc:	612b      	str	r3, [r5, #16]
 800d1ce:	e7ed      	b.n	800d1ac <ucdr_deserialize_endian_array_char+0x40>

0800d1d0 <ucdr_serialize_array_uint8_t>:
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	4688      	mov	r8, r1
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	4617      	mov	r7, r2
 800d1da:	4605      	mov	r5, r0
 800d1dc:	f7fa ff2c 	bl	8008038 <ucdr_check_buffer_available_for>
 800d1e0:	b9e0      	cbnz	r0, 800d21c <ucdr_serialize_array_uint8_t+0x4c>
 800d1e2:	463e      	mov	r6, r7
 800d1e4:	e009      	b.n	800d1fa <ucdr_serialize_array_uint8_t+0x2a>
 800d1e6:	68a8      	ldr	r0, [r5, #8]
 800d1e8:	f006 fb39 	bl	801385e <memcpy>
 800d1ec:	68aa      	ldr	r2, [r5, #8]
 800d1ee:	692b      	ldr	r3, [r5, #16]
 800d1f0:	4422      	add	r2, r4
 800d1f2:	4423      	add	r3, r4
 800d1f4:	1b36      	subs	r6, r6, r4
 800d1f6:	60aa      	str	r2, [r5, #8]
 800d1f8:	612b      	str	r3, [r5, #16]
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	4628      	mov	r0, r5
 800d200:	f7fa ffa2 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d204:	1bb9      	subs	r1, r7, r6
 800d206:	4441      	add	r1, r8
 800d208:	4604      	mov	r4, r0
 800d20a:	4602      	mov	r2, r0
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d1ea      	bne.n	800d1e6 <ucdr_serialize_array_uint8_t+0x16>
 800d210:	2301      	movs	r3, #1
 800d212:	7da8      	ldrb	r0, [r5, #22]
 800d214:	756b      	strb	r3, [r5, #21]
 800d216:	4058      	eors	r0, r3
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	463a      	mov	r2, r7
 800d21e:	68a8      	ldr	r0, [r5, #8]
 800d220:	4641      	mov	r1, r8
 800d222:	f006 fb1c 	bl	801385e <memcpy>
 800d226:	68aa      	ldr	r2, [r5, #8]
 800d228:	692b      	ldr	r3, [r5, #16]
 800d22a:	443a      	add	r2, r7
 800d22c:	443b      	add	r3, r7
 800d22e:	60aa      	str	r2, [r5, #8]
 800d230:	612b      	str	r3, [r5, #16]
 800d232:	e7ed      	b.n	800d210 <ucdr_serialize_array_uint8_t+0x40>

0800d234 <ucdr_serialize_endian_array_uint8_t>:
 800d234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d238:	4619      	mov	r1, r3
 800d23a:	461f      	mov	r7, r3
 800d23c:	4605      	mov	r5, r0
 800d23e:	4690      	mov	r8, r2
 800d240:	f7fa fefa 	bl	8008038 <ucdr_check_buffer_available_for>
 800d244:	b9e0      	cbnz	r0, 800d280 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d246:	463e      	mov	r6, r7
 800d248:	e009      	b.n	800d25e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d24a:	68a8      	ldr	r0, [r5, #8]
 800d24c:	f006 fb07 	bl	801385e <memcpy>
 800d250:	68ab      	ldr	r3, [r5, #8]
 800d252:	6928      	ldr	r0, [r5, #16]
 800d254:	4423      	add	r3, r4
 800d256:	4420      	add	r0, r4
 800d258:	1b36      	subs	r6, r6, r4
 800d25a:	60ab      	str	r3, [r5, #8]
 800d25c:	6128      	str	r0, [r5, #16]
 800d25e:	4631      	mov	r1, r6
 800d260:	2201      	movs	r2, #1
 800d262:	4628      	mov	r0, r5
 800d264:	f7fa ff70 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d268:	1bb9      	subs	r1, r7, r6
 800d26a:	4441      	add	r1, r8
 800d26c:	4604      	mov	r4, r0
 800d26e:	4602      	mov	r2, r0
 800d270:	2800      	cmp	r0, #0
 800d272:	d1ea      	bne.n	800d24a <ucdr_serialize_endian_array_uint8_t+0x16>
 800d274:	2301      	movs	r3, #1
 800d276:	7da8      	ldrb	r0, [r5, #22]
 800d278:	756b      	strb	r3, [r5, #21]
 800d27a:	4058      	eors	r0, r3
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	463a      	mov	r2, r7
 800d282:	68a8      	ldr	r0, [r5, #8]
 800d284:	4641      	mov	r1, r8
 800d286:	f006 faea 	bl	801385e <memcpy>
 800d28a:	68aa      	ldr	r2, [r5, #8]
 800d28c:	692b      	ldr	r3, [r5, #16]
 800d28e:	443a      	add	r2, r7
 800d290:	443b      	add	r3, r7
 800d292:	60aa      	str	r2, [r5, #8]
 800d294:	612b      	str	r3, [r5, #16]
 800d296:	e7ed      	b.n	800d274 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d298 <ucdr_deserialize_array_uint8_t>:
 800d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d29c:	4688      	mov	r8, r1
 800d29e:	4611      	mov	r1, r2
 800d2a0:	4617      	mov	r7, r2
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	f7fa fec8 	bl	8008038 <ucdr_check_buffer_available_for>
 800d2a8:	b9e0      	cbnz	r0, 800d2e4 <ucdr_deserialize_array_uint8_t+0x4c>
 800d2aa:	463e      	mov	r6, r7
 800d2ac:	e009      	b.n	800d2c2 <ucdr_deserialize_array_uint8_t+0x2a>
 800d2ae:	68a9      	ldr	r1, [r5, #8]
 800d2b0:	f006 fad5 	bl	801385e <memcpy>
 800d2b4:	68aa      	ldr	r2, [r5, #8]
 800d2b6:	692b      	ldr	r3, [r5, #16]
 800d2b8:	4422      	add	r2, r4
 800d2ba:	4423      	add	r3, r4
 800d2bc:	1b36      	subs	r6, r6, r4
 800d2be:	60aa      	str	r2, [r5, #8]
 800d2c0:	612b      	str	r3, [r5, #16]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7fa ff3e 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	1bb8      	subs	r0, r7, r6
 800d2d0:	4440      	add	r0, r8
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	2c00      	cmp	r4, #0
 800d2d6:	d1ea      	bne.n	800d2ae <ucdr_deserialize_array_uint8_t+0x16>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	7da8      	ldrb	r0, [r5, #22]
 800d2dc:	756b      	strb	r3, [r5, #21]
 800d2de:	4058      	eors	r0, r3
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e4:	463a      	mov	r2, r7
 800d2e6:	68a9      	ldr	r1, [r5, #8]
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	f006 fab8 	bl	801385e <memcpy>
 800d2ee:	68aa      	ldr	r2, [r5, #8]
 800d2f0:	692b      	ldr	r3, [r5, #16]
 800d2f2:	443a      	add	r2, r7
 800d2f4:	443b      	add	r3, r7
 800d2f6:	60aa      	str	r2, [r5, #8]
 800d2f8:	612b      	str	r3, [r5, #16]
 800d2fa:	e7ed      	b.n	800d2d8 <ucdr_deserialize_array_uint8_t+0x40>

0800d2fc <ucdr_deserialize_endian_array_uint8_t>:
 800d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d300:	4619      	mov	r1, r3
 800d302:	461f      	mov	r7, r3
 800d304:	4605      	mov	r5, r0
 800d306:	4690      	mov	r8, r2
 800d308:	f7fa fe96 	bl	8008038 <ucdr_check_buffer_available_for>
 800d30c:	b9e0      	cbnz	r0, 800d348 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d30e:	463e      	mov	r6, r7
 800d310:	e009      	b.n	800d326 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d312:	68a9      	ldr	r1, [r5, #8]
 800d314:	f006 faa3 	bl	801385e <memcpy>
 800d318:	68ab      	ldr	r3, [r5, #8]
 800d31a:	6928      	ldr	r0, [r5, #16]
 800d31c:	4423      	add	r3, r4
 800d31e:	4420      	add	r0, r4
 800d320:	1b36      	subs	r6, r6, r4
 800d322:	60ab      	str	r3, [r5, #8]
 800d324:	6128      	str	r0, [r5, #16]
 800d326:	2201      	movs	r2, #1
 800d328:	4631      	mov	r1, r6
 800d32a:	4628      	mov	r0, r5
 800d32c:	f7fa ff0c 	bl	8008148 <ucdr_check_final_buffer_behavior_array>
 800d330:	4604      	mov	r4, r0
 800d332:	1bb8      	subs	r0, r7, r6
 800d334:	4440      	add	r0, r8
 800d336:	4622      	mov	r2, r4
 800d338:	2c00      	cmp	r4, #0
 800d33a:	d1ea      	bne.n	800d312 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d33c:	2301      	movs	r3, #1
 800d33e:	7da8      	ldrb	r0, [r5, #22]
 800d340:	756b      	strb	r3, [r5, #21]
 800d342:	4058      	eors	r0, r3
 800d344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d348:	463a      	mov	r2, r7
 800d34a:	68a9      	ldr	r1, [r5, #8]
 800d34c:	4640      	mov	r0, r8
 800d34e:	f006 fa86 	bl	801385e <memcpy>
 800d352:	68aa      	ldr	r2, [r5, #8]
 800d354:	692b      	ldr	r3, [r5, #16]
 800d356:	443a      	add	r2, r7
 800d358:	443b      	add	r3, r7
 800d35a:	60aa      	str	r2, [r5, #8]
 800d35c:	612b      	str	r3, [r5, #16]
 800d35e:	e7ed      	b.n	800d33c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d360 <ucdr_serialize_bool>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	460d      	mov	r5, r1
 800d364:	2101      	movs	r1, #1
 800d366:	4604      	mov	r4, r0
 800d368:	f7fa fe72 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d36c:	b148      	cbz	r0, 800d382 <ucdr_serialize_bool+0x22>
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	701d      	strb	r5, [r3, #0]
 800d372:	68a2      	ldr	r2, [r4, #8]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	2101      	movs	r1, #1
 800d378:	440a      	add	r2, r1
 800d37a:	440b      	add	r3, r1
 800d37c:	60a2      	str	r2, [r4, #8]
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	7561      	strb	r1, [r4, #21]
 800d382:	7da0      	ldrb	r0, [r4, #22]
 800d384:	f080 0001 	eor.w	r0, r0, #1
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	bf00      	nop

0800d38c <ucdr_deserialize_bool>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	460d      	mov	r5, r1
 800d390:	2101      	movs	r1, #1
 800d392:	4604      	mov	r4, r0
 800d394:	f7fa fe5c 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d398:	b160      	cbz	r0, 800d3b4 <ucdr_deserialize_bool+0x28>
 800d39a:	68a2      	ldr	r2, [r4, #8]
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d3a2:	3900      	subs	r1, #0
 800d3a4:	bf18      	it	ne
 800d3a6:	2101      	movne	r1, #1
 800d3a8:	7029      	strb	r1, [r5, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	60a2      	str	r2, [r4, #8]
 800d3b0:	6123      	str	r3, [r4, #16]
 800d3b2:	7561      	strb	r1, [r4, #21]
 800d3b4:	7da0      	ldrb	r0, [r4, #22]
 800d3b6:	f080 0001 	eor.w	r0, r0, #1
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}

0800d3bc <ucdr_serialize_uint8_t>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	460d      	mov	r5, r1
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	f7fa fe44 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d3c8:	b148      	cbz	r0, 800d3de <ucdr_serialize_uint8_t+0x22>
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	701d      	strb	r5, [r3, #0]
 800d3ce:	68a2      	ldr	r2, [r4, #8]
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	440a      	add	r2, r1
 800d3d6:	440b      	add	r3, r1
 800d3d8:	60a2      	str	r2, [r4, #8]
 800d3da:	6123      	str	r3, [r4, #16]
 800d3dc:	7561      	strb	r1, [r4, #21]
 800d3de:	7da0      	ldrb	r0, [r4, #22]
 800d3e0:	f080 0001 	eor.w	r0, r0, #1
 800d3e4:	bd38      	pop	{r3, r4, r5, pc}
 800d3e6:	bf00      	nop

0800d3e8 <ucdr_deserialize_uint8_t>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	f7fa fe2e 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d3f4:	b150      	cbz	r0, 800d40c <ucdr_deserialize_uint8_t+0x24>
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	702b      	strb	r3, [r5, #0]
 800d3fc:	68a2      	ldr	r2, [r4, #8]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	2101      	movs	r1, #1
 800d402:	440a      	add	r2, r1
 800d404:	440b      	add	r3, r1
 800d406:	60a2      	str	r2, [r4, #8]
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	7561      	strb	r1, [r4, #21]
 800d40c:	7da0      	ldrb	r0, [r4, #22]
 800d40e:	f080 0001 	eor.w	r0, r0, #1
 800d412:	bd38      	pop	{r3, r4, r5, pc}

0800d414 <ucdr_serialize_uint16_t>:
 800d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d418:	b082      	sub	sp, #8
 800d41a:	460b      	mov	r3, r1
 800d41c:	2102      	movs	r1, #2
 800d41e:	4604      	mov	r4, r0
 800d420:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d424:	f7fa fe68 	bl	80080f8 <ucdr_buffer_alignment>
 800d428:	4601      	mov	r1, r0
 800d42a:	4620      	mov	r0, r4
 800d42c:	7d67      	ldrb	r7, [r4, #21]
 800d42e:	f7fa fea7 	bl	8008180 <ucdr_advance_buffer>
 800d432:	2102      	movs	r1, #2
 800d434:	4620      	mov	r0, r4
 800d436:	f7fa fdff 	bl	8008038 <ucdr_check_buffer_available_for>
 800d43a:	bb78      	cbnz	r0, 800d49c <ucdr_serialize_uint16_t+0x88>
 800d43c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d440:	42ab      	cmp	r3, r5
 800d442:	d926      	bls.n	800d492 <ucdr_serialize_uint16_t+0x7e>
 800d444:	1b5e      	subs	r6, r3, r5
 800d446:	60a3      	str	r3, [r4, #8]
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	f1c6 0802 	rsb	r8, r6, #2
 800d44e:	4433      	add	r3, r6
 800d450:	6123      	str	r3, [r4, #16]
 800d452:	4641      	mov	r1, r8
 800d454:	4620      	mov	r0, r4
 800d456:	f7fa fdfb 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d03b      	beq.n	800d4d6 <ucdr_serialize_uint16_t+0xc2>
 800d45e:	7d23      	ldrb	r3, [r4, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d04a      	beq.n	800d4fa <ucdr_serialize_uint16_t+0xe6>
 800d464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d468:	702b      	strb	r3, [r5, #0]
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	d040      	beq.n	800d4f0 <ucdr_serialize_uint16_t+0xdc>
 800d46e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d472:	706b      	strb	r3, [r5, #1]
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	68a2      	ldr	r2, [r4, #8]
 800d478:	7da0      	ldrb	r0, [r4, #22]
 800d47a:	3302      	adds	r3, #2
 800d47c:	1b9e      	subs	r6, r3, r6
 800d47e:	4442      	add	r2, r8
 800d480:	2302      	movs	r3, #2
 800d482:	f080 0001 	eor.w	r0, r0, #1
 800d486:	60a2      	str	r2, [r4, #8]
 800d488:	6126      	str	r6, [r4, #16]
 800d48a:	7563      	strb	r3, [r4, #21]
 800d48c:	b002      	add	sp, #8
 800d48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d492:	2102      	movs	r1, #2
 800d494:	4620      	mov	r0, r4
 800d496:	f7fa fddb 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d49a:	b190      	cbz	r0, 800d4c2 <ucdr_serialize_uint16_t+0xae>
 800d49c:	7d23      	ldrb	r3, [r4, #20]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	d014      	beq.n	800d4ce <ucdr_serialize_uint16_t+0xba>
 800d4a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4b0:	705a      	strb	r2, [r3, #1]
 800d4b2:	68a2      	ldr	r2, [r4, #8]
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	3202      	adds	r2, #2
 800d4b8:	3302      	adds	r3, #2
 800d4ba:	2102      	movs	r1, #2
 800d4bc:	60a2      	str	r2, [r4, #8]
 800d4be:	6123      	str	r3, [r4, #16]
 800d4c0:	7561      	strb	r1, [r4, #21]
 800d4c2:	7da0      	ldrb	r0, [r4, #22]
 800d4c4:	f080 0001 	eor.w	r0, r0, #1
 800d4c8:	b002      	add	sp, #8
 800d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4d2:	801a      	strh	r2, [r3, #0]
 800d4d4:	e7ed      	b.n	800d4b2 <ucdr_serialize_uint16_t+0x9e>
 800d4d6:	68a2      	ldr	r2, [r4, #8]
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	7da0      	ldrb	r0, [r4, #22]
 800d4dc:	7567      	strb	r7, [r4, #21]
 800d4de:	1b92      	subs	r2, r2, r6
 800d4e0:	1b9b      	subs	r3, r3, r6
 800d4e2:	f080 0001 	eor.w	r0, r0, #1
 800d4e6:	60a2      	str	r2, [r4, #8]
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	b002      	add	sp, #8
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f0:	68a3      	ldr	r3, [r4, #8]
 800d4f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	e7bc      	b.n	800d474 <ucdr_serialize_uint16_t+0x60>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f10d 0506 	add.w	r5, sp, #6
 800d500:	4629      	mov	r1, r5
 800d502:	4632      	mov	r2, r6
 800d504:	f006 f9ab 	bl	801385e <memcpy>
 800d508:	68a0      	ldr	r0, [r4, #8]
 800d50a:	4642      	mov	r2, r8
 800d50c:	19a9      	adds	r1, r5, r6
 800d50e:	f006 f9a6 	bl	801385e <memcpy>
 800d512:	e7af      	b.n	800d474 <ucdr_serialize_uint16_t+0x60>

0800d514 <ucdr_serialize_endian_uint16_t>:
 800d514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d518:	b083      	sub	sp, #12
 800d51a:	460d      	mov	r5, r1
 800d51c:	2102      	movs	r1, #2
 800d51e:	4604      	mov	r4, r0
 800d520:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d524:	f7fa fde8 	bl	80080f8 <ucdr_buffer_alignment>
 800d528:	4601      	mov	r1, r0
 800d52a:	4620      	mov	r0, r4
 800d52c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d530:	f7fa fe26 	bl	8008180 <ucdr_advance_buffer>
 800d534:	2102      	movs	r1, #2
 800d536:	4620      	mov	r0, r4
 800d538:	f7fa fd7e 	bl	8008038 <ucdr_check_buffer_available_for>
 800d53c:	bb70      	cbnz	r0, 800d59c <ucdr_serialize_endian_uint16_t+0x88>
 800d53e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d542:	42be      	cmp	r6, r7
 800d544:	d925      	bls.n	800d592 <ucdr_serialize_endian_uint16_t+0x7e>
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	60a6      	str	r6, [r4, #8]
 800d54a:	1bf6      	subs	r6, r6, r7
 800d54c:	4433      	add	r3, r6
 800d54e:	f1c6 0902 	rsb	r9, r6, #2
 800d552:	6123      	str	r3, [r4, #16]
 800d554:	4649      	mov	r1, r9
 800d556:	4620      	mov	r0, r4
 800d558:	f7fa fd7a 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d039      	beq.n	800d5d4 <ucdr_serialize_endian_uint16_t+0xc0>
 800d560:	2d01      	cmp	r5, #1
 800d562:	d04a      	beq.n	800d5fa <ucdr_serialize_endian_uint16_t+0xe6>
 800d564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d568:	703b      	strb	r3, [r7, #0]
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	d040      	beq.n	800d5f0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d56e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d572:	707b      	strb	r3, [r7, #1]
 800d574:	6923      	ldr	r3, [r4, #16]
 800d576:	68a2      	ldr	r2, [r4, #8]
 800d578:	7da0      	ldrb	r0, [r4, #22]
 800d57a:	3302      	adds	r3, #2
 800d57c:	444a      	add	r2, r9
 800d57e:	1b9b      	subs	r3, r3, r6
 800d580:	2102      	movs	r1, #2
 800d582:	f080 0001 	eor.w	r0, r0, #1
 800d586:	60a2      	str	r2, [r4, #8]
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	7561      	strb	r1, [r4, #21]
 800d58c:	b003      	add	sp, #12
 800d58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d592:	2102      	movs	r1, #2
 800d594:	4620      	mov	r0, r4
 800d596:	f7fa fd5b 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d59a:	b188      	cbz	r0, 800d5c0 <ucdr_serialize_endian_uint16_t+0xac>
 800d59c:	2d01      	cmp	r5, #1
 800d59e:	68a3      	ldr	r3, [r4, #8]
 800d5a0:	d014      	beq.n	800d5cc <ucdr_serialize_endian_uint16_t+0xb8>
 800d5a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d5a6:	701a      	strb	r2, [r3, #0]
 800d5a8:	68a3      	ldr	r3, [r4, #8]
 800d5aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5ae:	705a      	strb	r2, [r3, #1]
 800d5b0:	68a2      	ldr	r2, [r4, #8]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	3202      	adds	r2, #2
 800d5b6:	3302      	adds	r3, #2
 800d5b8:	2102      	movs	r1, #2
 800d5ba:	60a2      	str	r2, [r4, #8]
 800d5bc:	6123      	str	r3, [r4, #16]
 800d5be:	7561      	strb	r1, [r4, #21]
 800d5c0:	7da0      	ldrb	r0, [r4, #22]
 800d5c2:	f080 0001 	eor.w	r0, r0, #1
 800d5c6:	b003      	add	sp, #12
 800d5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5d0:	801a      	strh	r2, [r3, #0]
 800d5d2:	e7ed      	b.n	800d5b0 <ucdr_serialize_endian_uint16_t+0x9c>
 800d5d4:	68a2      	ldr	r2, [r4, #8]
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	7da0      	ldrb	r0, [r4, #22]
 800d5da:	f884 8015 	strb.w	r8, [r4, #21]
 800d5de:	1b92      	subs	r2, r2, r6
 800d5e0:	1b9b      	subs	r3, r3, r6
 800d5e2:	f080 0001 	eor.w	r0, r0, #1
 800d5e6:	60a2      	str	r2, [r4, #8]
 800d5e8:	6123      	str	r3, [r4, #16]
 800d5ea:	b003      	add	sp, #12
 800d5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f0:	68a3      	ldr	r3, [r4, #8]
 800d5f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5f6:	701a      	strb	r2, [r3, #0]
 800d5f8:	e7bc      	b.n	800d574 <ucdr_serialize_endian_uint16_t+0x60>
 800d5fa:	f10d 0506 	add.w	r5, sp, #6
 800d5fe:	4629      	mov	r1, r5
 800d600:	4632      	mov	r2, r6
 800d602:	4638      	mov	r0, r7
 800d604:	f006 f92b 	bl	801385e <memcpy>
 800d608:	68a0      	ldr	r0, [r4, #8]
 800d60a:	464a      	mov	r2, r9
 800d60c:	19a9      	adds	r1, r5, r6
 800d60e:	f006 f926 	bl	801385e <memcpy>
 800d612:	e7af      	b.n	800d574 <ucdr_serialize_endian_uint16_t+0x60>

0800d614 <ucdr_deserialize_uint16_t>:
 800d614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d618:	460d      	mov	r5, r1
 800d61a:	2102      	movs	r1, #2
 800d61c:	4604      	mov	r4, r0
 800d61e:	f7fa fd6b 	bl	80080f8 <ucdr_buffer_alignment>
 800d622:	4601      	mov	r1, r0
 800d624:	4620      	mov	r0, r4
 800d626:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d62a:	f7fa fda9 	bl	8008180 <ucdr_advance_buffer>
 800d62e:	2102      	movs	r1, #2
 800d630:	4620      	mov	r0, r4
 800d632:	f7fa fd01 	bl	8008038 <ucdr_check_buffer_available_for>
 800d636:	bb60      	cbnz	r0, 800d692 <ucdr_deserialize_uint16_t+0x7e>
 800d638:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d63c:	42be      	cmp	r6, r7
 800d63e:	d923      	bls.n	800d688 <ucdr_deserialize_uint16_t+0x74>
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	60a6      	str	r6, [r4, #8]
 800d644:	1bf6      	subs	r6, r6, r7
 800d646:	4433      	add	r3, r6
 800d648:	f1c6 0902 	rsb	r9, r6, #2
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	4649      	mov	r1, r9
 800d650:	4620      	mov	r0, r4
 800d652:	f7fa fcfd 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d656:	2800      	cmp	r0, #0
 800d658:	d034      	beq.n	800d6c4 <ucdr_deserialize_uint16_t+0xb0>
 800d65a:	7d23      	ldrb	r3, [r4, #20]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d042      	beq.n	800d6e6 <ucdr_deserialize_uint16_t+0xd2>
 800d660:	787b      	ldrb	r3, [r7, #1]
 800d662:	702b      	strb	r3, [r5, #0]
 800d664:	2e00      	cmp	r6, #0
 800d666:	d03a      	beq.n	800d6de <ucdr_deserialize_uint16_t+0xca>
 800d668:	783b      	ldrb	r3, [r7, #0]
 800d66a:	706b      	strb	r3, [r5, #1]
 800d66c:	6923      	ldr	r3, [r4, #16]
 800d66e:	68a2      	ldr	r2, [r4, #8]
 800d670:	7da0      	ldrb	r0, [r4, #22]
 800d672:	2102      	movs	r1, #2
 800d674:	3302      	adds	r3, #2
 800d676:	444a      	add	r2, r9
 800d678:	1b9b      	subs	r3, r3, r6
 800d67a:	7561      	strb	r1, [r4, #21]
 800d67c:	60a2      	str	r2, [r4, #8]
 800d67e:	6123      	str	r3, [r4, #16]
 800d680:	f080 0001 	eor.w	r0, r0, #1
 800d684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d688:	2102      	movs	r1, #2
 800d68a:	4620      	mov	r0, r4
 800d68c:	f7fa fce0 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d690:	b180      	cbz	r0, 800d6b4 <ucdr_deserialize_uint16_t+0xa0>
 800d692:	7d23      	ldrb	r3, [r4, #20]
 800d694:	2b01      	cmp	r3, #1
 800d696:	68a3      	ldr	r3, [r4, #8]
 800d698:	d011      	beq.n	800d6be <ucdr_deserialize_uint16_t+0xaa>
 800d69a:	785b      	ldrb	r3, [r3, #1]
 800d69c:	702b      	strb	r3, [r5, #0]
 800d69e:	68a3      	ldr	r3, [r4, #8]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	706b      	strb	r3, [r5, #1]
 800d6a4:	68a2      	ldr	r2, [r4, #8]
 800d6a6:	6923      	ldr	r3, [r4, #16]
 800d6a8:	3202      	adds	r2, #2
 800d6aa:	3302      	adds	r3, #2
 800d6ac:	2102      	movs	r1, #2
 800d6ae:	60a2      	str	r2, [r4, #8]
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	7561      	strb	r1, [r4, #21]
 800d6b4:	7da0      	ldrb	r0, [r4, #22]
 800d6b6:	f080 0001 	eor.w	r0, r0, #1
 800d6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	802b      	strh	r3, [r5, #0]
 800d6c2:	e7ef      	b.n	800d6a4 <ucdr_deserialize_uint16_t+0x90>
 800d6c4:	68a2      	ldr	r2, [r4, #8]
 800d6c6:	6923      	ldr	r3, [r4, #16]
 800d6c8:	7da0      	ldrb	r0, [r4, #22]
 800d6ca:	f884 8015 	strb.w	r8, [r4, #21]
 800d6ce:	1b92      	subs	r2, r2, r6
 800d6d0:	1b9b      	subs	r3, r3, r6
 800d6d2:	60a2      	str	r2, [r4, #8]
 800d6d4:	6123      	str	r3, [r4, #16]
 800d6d6:	f080 0001 	eor.w	r0, r0, #1
 800d6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	706b      	strb	r3, [r5, #1]
 800d6e4:	e7c2      	b.n	800d66c <ucdr_deserialize_uint16_t+0x58>
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	4632      	mov	r2, r6
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f006 f8b7 	bl	801385e <memcpy>
 800d6f0:	68a1      	ldr	r1, [r4, #8]
 800d6f2:	464a      	mov	r2, r9
 800d6f4:	19a8      	adds	r0, r5, r6
 800d6f6:	f006 f8b2 	bl	801385e <memcpy>
 800d6fa:	e7b7      	b.n	800d66c <ucdr_deserialize_uint16_t+0x58>

0800d6fc <ucdr_deserialize_endian_uint16_t>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	460e      	mov	r6, r1
 800d702:	2102      	movs	r1, #2
 800d704:	4604      	mov	r4, r0
 800d706:	4615      	mov	r5, r2
 800d708:	f7fa fcf6 	bl	80080f8 <ucdr_buffer_alignment>
 800d70c:	4601      	mov	r1, r0
 800d70e:	4620      	mov	r0, r4
 800d710:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d714:	f7fa fd34 	bl	8008180 <ucdr_advance_buffer>
 800d718:	2102      	movs	r1, #2
 800d71a:	4620      	mov	r0, r4
 800d71c:	f7fa fc8c 	bl	8008038 <ucdr_check_buffer_available_for>
 800d720:	bb70      	cbnz	r0, 800d780 <ucdr_deserialize_endian_uint16_t+0x84>
 800d722:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d726:	4547      	cmp	r7, r8
 800d728:	d925      	bls.n	800d776 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	60a7      	str	r7, [r4, #8]
 800d72e:	eba7 0708 	sub.w	r7, r7, r8
 800d732:	443b      	add	r3, r7
 800d734:	f1c7 0a02 	rsb	sl, r7, #2
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	4651      	mov	r1, sl
 800d73c:	4620      	mov	r0, r4
 800d73e:	f7fa fc87 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d742:	2800      	cmp	r0, #0
 800d744:	d034      	beq.n	800d7b0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d746:	2e01      	cmp	r6, #1
 800d748:	d043      	beq.n	800d7d2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d74a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d74e:	702b      	strb	r3, [r5, #0]
 800d750:	2f00      	cmp	r7, #0
 800d752:	d03a      	beq.n	800d7ca <ucdr_deserialize_endian_uint16_t+0xce>
 800d754:	f898 3000 	ldrb.w	r3, [r8]
 800d758:	706b      	strb	r3, [r5, #1]
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	68a2      	ldr	r2, [r4, #8]
 800d75e:	7da0      	ldrb	r0, [r4, #22]
 800d760:	2102      	movs	r1, #2
 800d762:	3302      	adds	r3, #2
 800d764:	4452      	add	r2, sl
 800d766:	1bdb      	subs	r3, r3, r7
 800d768:	7561      	strb	r1, [r4, #21]
 800d76a:	60a2      	str	r2, [r4, #8]
 800d76c:	6123      	str	r3, [r4, #16]
 800d76e:	f080 0001 	eor.w	r0, r0, #1
 800d772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d776:	2102      	movs	r1, #2
 800d778:	4620      	mov	r0, r4
 800d77a:	f7fa fc69 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d77e:	b178      	cbz	r0, 800d7a0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d780:	2e01      	cmp	r6, #1
 800d782:	68a3      	ldr	r3, [r4, #8]
 800d784:	d011      	beq.n	800d7aa <ucdr_deserialize_endian_uint16_t+0xae>
 800d786:	785b      	ldrb	r3, [r3, #1]
 800d788:	702b      	strb	r3, [r5, #0]
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	706b      	strb	r3, [r5, #1]
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	3202      	adds	r2, #2
 800d796:	3302      	adds	r3, #2
 800d798:	2102      	movs	r1, #2
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	7561      	strb	r1, [r4, #21]
 800d7a0:	7da0      	ldrb	r0, [r4, #22]
 800d7a2:	f080 0001 	eor.w	r0, r0, #1
 800d7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	802b      	strh	r3, [r5, #0]
 800d7ae:	e7ef      	b.n	800d790 <ucdr_deserialize_endian_uint16_t+0x94>
 800d7b0:	68a2      	ldr	r2, [r4, #8]
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	7da0      	ldrb	r0, [r4, #22]
 800d7b6:	f884 9015 	strb.w	r9, [r4, #21]
 800d7ba:	1bd2      	subs	r2, r2, r7
 800d7bc:	1bdb      	subs	r3, r3, r7
 800d7be:	60a2      	str	r2, [r4, #8]
 800d7c0:	6123      	str	r3, [r4, #16]
 800d7c2:	f080 0001 	eor.w	r0, r0, #1
 800d7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ca:	68a3      	ldr	r3, [r4, #8]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	706b      	strb	r3, [r5, #1]
 800d7d0:	e7c3      	b.n	800d75a <ucdr_deserialize_endian_uint16_t+0x5e>
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	463a      	mov	r2, r7
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f006 f841 	bl	801385e <memcpy>
 800d7dc:	68a1      	ldr	r1, [r4, #8]
 800d7de:	4652      	mov	r2, sl
 800d7e0:	19e8      	adds	r0, r5, r7
 800d7e2:	f006 f83c 	bl	801385e <memcpy>
 800d7e6:	e7b8      	b.n	800d75a <ucdr_deserialize_endian_uint16_t+0x5e>

0800d7e8 <ucdr_serialize_uint32_t>:
 800d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	9101      	str	r1, [sp, #4]
 800d7f2:	2104      	movs	r1, #4
 800d7f4:	f7fa fc80 	bl	80080f8 <ucdr_buffer_alignment>
 800d7f8:	4601      	mov	r1, r0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	7d67      	ldrb	r7, [r4, #21]
 800d7fe:	f7fa fcbf 	bl	8008180 <ucdr_advance_buffer>
 800d802:	2104      	movs	r1, #4
 800d804:	4620      	mov	r0, r4
 800d806:	f7fa fc17 	bl	8008038 <ucdr_check_buffer_available_for>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d139      	bne.n	800d882 <ucdr_serialize_uint32_t+0x9a>
 800d80e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d812:	42ab      	cmp	r3, r5
 800d814:	d930      	bls.n	800d878 <ucdr_serialize_uint32_t+0x90>
 800d816:	1b5e      	subs	r6, r3, r5
 800d818:	60a3      	str	r3, [r4, #8]
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	f1c6 0804 	rsb	r8, r6, #4
 800d820:	4433      	add	r3, r6
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	4641      	mov	r1, r8
 800d826:	4620      	mov	r0, r4
 800d828:	f7fa fc12 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d04c      	beq.n	800d8ca <ucdr_serialize_uint32_t+0xe2>
 800d830:	7d23      	ldrb	r3, [r4, #20]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d063      	beq.n	800d8fe <ucdr_serialize_uint32_t+0x116>
 800d836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d83a:	702b      	strb	r3, [r5, #0]
 800d83c:	2e00      	cmp	r6, #0
 800d83e:	d051      	beq.n	800d8e4 <ucdr_serialize_uint32_t+0xfc>
 800d840:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d844:	706b      	strb	r3, [r5, #1]
 800d846:	2e01      	cmp	r6, #1
 800d848:	d050      	beq.n	800d8ec <ucdr_serialize_uint32_t+0x104>
 800d84a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d84e:	70ab      	strb	r3, [r5, #2]
 800d850:	2e02      	cmp	r6, #2
 800d852:	d04f      	beq.n	800d8f4 <ucdr_serialize_uint32_t+0x10c>
 800d854:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d858:	70eb      	strb	r3, [r5, #3]
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	68a2      	ldr	r2, [r4, #8]
 800d85e:	7da0      	ldrb	r0, [r4, #22]
 800d860:	3304      	adds	r3, #4
 800d862:	1b9e      	subs	r6, r3, r6
 800d864:	4442      	add	r2, r8
 800d866:	2304      	movs	r3, #4
 800d868:	f080 0001 	eor.w	r0, r0, #1
 800d86c:	60a2      	str	r2, [r4, #8]
 800d86e:	6126      	str	r6, [r4, #16]
 800d870:	7563      	strb	r3, [r4, #21]
 800d872:	b002      	add	sp, #8
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	2104      	movs	r1, #4
 800d87a:	4620      	mov	r0, r4
 800d87c:	f7fa fbe8 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d880:	b1d0      	cbz	r0, 800d8b8 <ucdr_serialize_uint32_t+0xd0>
 800d882:	7d23      	ldrb	r3, [r4, #20]
 800d884:	2b01      	cmp	r3, #1
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	d01c      	beq.n	800d8c4 <ucdr_serialize_uint32_t+0xdc>
 800d88a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	68a3      	ldr	r3, [r4, #8]
 800d892:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d896:	705a      	strb	r2, [r3, #1]
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d89e:	709a      	strb	r2, [r3, #2]
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8a6:	70da      	strb	r2, [r3, #3]
 800d8a8:	68a2      	ldr	r2, [r4, #8]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	3204      	adds	r2, #4
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	60a2      	str	r2, [r4, #8]
 800d8b4:	6123      	str	r3, [r4, #16]
 800d8b6:	7561      	strb	r1, [r4, #21]
 800d8b8:	7da0      	ldrb	r0, [r4, #22]
 800d8ba:	f080 0001 	eor.w	r0, r0, #1
 800d8be:	b002      	add	sp, #8
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	9a01      	ldr	r2, [sp, #4]
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	e7ee      	b.n	800d8a8 <ucdr_serialize_uint32_t+0xc0>
 800d8ca:	68a2      	ldr	r2, [r4, #8]
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	7da0      	ldrb	r0, [r4, #22]
 800d8d0:	7567      	strb	r7, [r4, #21]
 800d8d2:	1b92      	subs	r2, r2, r6
 800d8d4:	1b9b      	subs	r3, r3, r6
 800d8d6:	f080 0001 	eor.w	r0, r0, #1
 800d8da:	60a2      	str	r2, [r4, #8]
 800d8dc:	6123      	str	r3, [r4, #16]
 800d8de:	b002      	add	sp, #8
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8ea:	701a      	strb	r2, [r3, #0]
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	68a3      	ldr	r3, [r4, #8]
 800d8f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8fa:	701a      	strb	r2, [r3, #0]
 800d8fc:	e7ad      	b.n	800d85a <ucdr_serialize_uint32_t+0x72>
 800d8fe:	4628      	mov	r0, r5
 800d900:	ad01      	add	r5, sp, #4
 800d902:	4629      	mov	r1, r5
 800d904:	4632      	mov	r2, r6
 800d906:	f005 ffaa 	bl	801385e <memcpy>
 800d90a:	68a0      	ldr	r0, [r4, #8]
 800d90c:	4642      	mov	r2, r8
 800d90e:	19a9      	adds	r1, r5, r6
 800d910:	f005 ffa5 	bl	801385e <memcpy>
 800d914:	e7a1      	b.n	800d85a <ucdr_serialize_uint32_t+0x72>
 800d916:	bf00      	nop

0800d918 <ucdr_serialize_endian_uint32_t>:
 800d918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d91c:	b083      	sub	sp, #12
 800d91e:	460d      	mov	r5, r1
 800d920:	2104      	movs	r1, #4
 800d922:	4604      	mov	r4, r0
 800d924:	9201      	str	r2, [sp, #4]
 800d926:	f7fa fbe7 	bl	80080f8 <ucdr_buffer_alignment>
 800d92a:	4601      	mov	r1, r0
 800d92c:	4620      	mov	r0, r4
 800d92e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d932:	f7fa fc25 	bl	8008180 <ucdr_advance_buffer>
 800d936:	2104      	movs	r1, #4
 800d938:	4620      	mov	r0, r4
 800d93a:	f7fa fb7d 	bl	8008038 <ucdr_check_buffer_available_for>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d138      	bne.n	800d9b4 <ucdr_serialize_endian_uint32_t+0x9c>
 800d942:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d946:	42b7      	cmp	r7, r6
 800d948:	d92f      	bls.n	800d9aa <ucdr_serialize_endian_uint32_t+0x92>
 800d94a:	6923      	ldr	r3, [r4, #16]
 800d94c:	60a7      	str	r7, [r4, #8]
 800d94e:	1bbf      	subs	r7, r7, r6
 800d950:	443b      	add	r3, r7
 800d952:	f1c7 0904 	rsb	r9, r7, #4
 800d956:	6123      	str	r3, [r4, #16]
 800d958:	4649      	mov	r1, r9
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7fa fb78 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d960:	2800      	cmp	r0, #0
 800d962:	d04a      	beq.n	800d9fa <ucdr_serialize_endian_uint32_t+0xe2>
 800d964:	2d01      	cmp	r5, #1
 800d966:	d063      	beq.n	800da30 <ucdr_serialize_endian_uint32_t+0x118>
 800d968:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d96c:	7033      	strb	r3, [r6, #0]
 800d96e:	2f00      	cmp	r7, #0
 800d970:	d051      	beq.n	800da16 <ucdr_serialize_endian_uint32_t+0xfe>
 800d972:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d976:	7073      	strb	r3, [r6, #1]
 800d978:	2f01      	cmp	r7, #1
 800d97a:	d050      	beq.n	800da1e <ucdr_serialize_endian_uint32_t+0x106>
 800d97c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d980:	70b3      	strb	r3, [r6, #2]
 800d982:	2f02      	cmp	r7, #2
 800d984:	d04f      	beq.n	800da26 <ucdr_serialize_endian_uint32_t+0x10e>
 800d986:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d98a:	70f3      	strb	r3, [r6, #3]
 800d98c:	6923      	ldr	r3, [r4, #16]
 800d98e:	68a2      	ldr	r2, [r4, #8]
 800d990:	7da0      	ldrb	r0, [r4, #22]
 800d992:	3304      	adds	r3, #4
 800d994:	444a      	add	r2, r9
 800d996:	1bdb      	subs	r3, r3, r7
 800d998:	2104      	movs	r1, #4
 800d99a:	f080 0001 	eor.w	r0, r0, #1
 800d99e:	60a2      	str	r2, [r4, #8]
 800d9a0:	6123      	str	r3, [r4, #16]
 800d9a2:	7561      	strb	r1, [r4, #21]
 800d9a4:	b003      	add	sp, #12
 800d9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9aa:	2104      	movs	r1, #4
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f7fa fb4f 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800d9b2:	b1c8      	cbz	r0, 800d9e8 <ucdr_serialize_endian_uint32_t+0xd0>
 800d9b4:	2d01      	cmp	r5, #1
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	d01c      	beq.n	800d9f4 <ucdr_serialize_endian_uint32_t+0xdc>
 800d9ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d9be:	701a      	strb	r2, [r3, #0]
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9c6:	705a      	strb	r2, [r3, #1]
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9ce:	709a      	strb	r2, [r3, #2]
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9d6:	70da      	strb	r2, [r3, #3]
 800d9d8:	68a2      	ldr	r2, [r4, #8]
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	3204      	adds	r2, #4
 800d9de:	3304      	adds	r3, #4
 800d9e0:	2104      	movs	r1, #4
 800d9e2:	60a2      	str	r2, [r4, #8]
 800d9e4:	6123      	str	r3, [r4, #16]
 800d9e6:	7561      	strb	r1, [r4, #21]
 800d9e8:	7da0      	ldrb	r0, [r4, #22]
 800d9ea:	f080 0001 	eor.w	r0, r0, #1
 800d9ee:	b003      	add	sp, #12
 800d9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f4:	9a01      	ldr	r2, [sp, #4]
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	e7ee      	b.n	800d9d8 <ucdr_serialize_endian_uint32_t+0xc0>
 800d9fa:	68a2      	ldr	r2, [r4, #8]
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	7da0      	ldrb	r0, [r4, #22]
 800da00:	f884 8015 	strb.w	r8, [r4, #21]
 800da04:	1bd2      	subs	r2, r2, r7
 800da06:	1bdb      	subs	r3, r3, r7
 800da08:	f080 0001 	eor.w	r0, r0, #1
 800da0c:	60a2      	str	r2, [r4, #8]
 800da0e:	6123      	str	r3, [r4, #16]
 800da10:	b003      	add	sp, #12
 800da12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da16:	68a3      	ldr	r3, [r4, #8]
 800da18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da1c:	701a      	strb	r2, [r3, #0]
 800da1e:	68a3      	ldr	r3, [r4, #8]
 800da20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	68a3      	ldr	r3, [r4, #8]
 800da28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da2c:	701a      	strb	r2, [r3, #0]
 800da2e:	e7ad      	b.n	800d98c <ucdr_serialize_endian_uint32_t+0x74>
 800da30:	ad01      	add	r5, sp, #4
 800da32:	4629      	mov	r1, r5
 800da34:	463a      	mov	r2, r7
 800da36:	4630      	mov	r0, r6
 800da38:	f005 ff11 	bl	801385e <memcpy>
 800da3c:	68a0      	ldr	r0, [r4, #8]
 800da3e:	464a      	mov	r2, r9
 800da40:	19e9      	adds	r1, r5, r7
 800da42:	f005 ff0c 	bl	801385e <memcpy>
 800da46:	e7a1      	b.n	800d98c <ucdr_serialize_endian_uint32_t+0x74>

0800da48 <ucdr_deserialize_uint32_t>:
 800da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da4c:	460d      	mov	r5, r1
 800da4e:	2104      	movs	r1, #4
 800da50:	4604      	mov	r4, r0
 800da52:	f7fa fb51 	bl	80080f8 <ucdr_buffer_alignment>
 800da56:	4601      	mov	r1, r0
 800da58:	4620      	mov	r0, r4
 800da5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da5e:	f7fa fb8f 	bl	8008180 <ucdr_advance_buffer>
 800da62:	2104      	movs	r1, #4
 800da64:	4620      	mov	r0, r4
 800da66:	f7fa fae7 	bl	8008038 <ucdr_check_buffer_available_for>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d138      	bne.n	800dae0 <ucdr_deserialize_uint32_t+0x98>
 800da6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800da72:	42b7      	cmp	r7, r6
 800da74:	d92f      	bls.n	800dad6 <ucdr_deserialize_uint32_t+0x8e>
 800da76:	6923      	ldr	r3, [r4, #16]
 800da78:	60a7      	str	r7, [r4, #8]
 800da7a:	1bbf      	subs	r7, r7, r6
 800da7c:	443b      	add	r3, r7
 800da7e:	f1c7 0904 	rsb	r9, r7, #4
 800da82:	6123      	str	r3, [r4, #16]
 800da84:	4649      	mov	r1, r9
 800da86:	4620      	mov	r0, r4
 800da88:	f7fa fae2 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d046      	beq.n	800db1e <ucdr_deserialize_uint32_t+0xd6>
 800da90:	7d23      	ldrb	r3, [r4, #20]
 800da92:	2b01      	cmp	r3, #1
 800da94:	d05c      	beq.n	800db50 <ucdr_deserialize_uint32_t+0x108>
 800da96:	78f3      	ldrb	r3, [r6, #3]
 800da98:	702b      	strb	r3, [r5, #0]
 800da9a:	2f00      	cmp	r7, #0
 800da9c:	d04c      	beq.n	800db38 <ucdr_deserialize_uint32_t+0xf0>
 800da9e:	78b3      	ldrb	r3, [r6, #2]
 800daa0:	706b      	strb	r3, [r5, #1]
 800daa2:	2f01      	cmp	r7, #1
 800daa4:	f105 0302 	add.w	r3, r5, #2
 800daa8:	d04a      	beq.n	800db40 <ucdr_deserialize_uint32_t+0xf8>
 800daaa:	7873      	ldrb	r3, [r6, #1]
 800daac:	70ab      	strb	r3, [r5, #2]
 800daae:	2f02      	cmp	r7, #2
 800dab0:	f105 0303 	add.w	r3, r5, #3
 800dab4:	d048      	beq.n	800db48 <ucdr_deserialize_uint32_t+0x100>
 800dab6:	7833      	ldrb	r3, [r6, #0]
 800dab8:	70eb      	strb	r3, [r5, #3]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	68a2      	ldr	r2, [r4, #8]
 800dabe:	7da0      	ldrb	r0, [r4, #22]
 800dac0:	2104      	movs	r1, #4
 800dac2:	3304      	adds	r3, #4
 800dac4:	444a      	add	r2, r9
 800dac6:	1bdb      	subs	r3, r3, r7
 800dac8:	7561      	strb	r1, [r4, #21]
 800daca:	60a2      	str	r2, [r4, #8]
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	f080 0001 	eor.w	r0, r0, #1
 800dad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad6:	2104      	movs	r1, #4
 800dad8:	4620      	mov	r0, r4
 800dada:	f7fa fab9 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dade:	b1b0      	cbz	r0, 800db0e <ucdr_deserialize_uint32_t+0xc6>
 800dae0:	7d23      	ldrb	r3, [r4, #20]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	d017      	beq.n	800db18 <ucdr_deserialize_uint32_t+0xd0>
 800dae8:	78db      	ldrb	r3, [r3, #3]
 800daea:	702b      	strb	r3, [r5, #0]
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	789b      	ldrb	r3, [r3, #2]
 800daf0:	706b      	strb	r3, [r5, #1]
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	70ab      	strb	r3, [r5, #2]
 800daf8:	68a3      	ldr	r3, [r4, #8]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	70eb      	strb	r3, [r5, #3]
 800dafe:	68a2      	ldr	r2, [r4, #8]
 800db00:	6923      	ldr	r3, [r4, #16]
 800db02:	3204      	adds	r2, #4
 800db04:	3304      	adds	r3, #4
 800db06:	2104      	movs	r1, #4
 800db08:	60a2      	str	r2, [r4, #8]
 800db0a:	6123      	str	r3, [r4, #16]
 800db0c:	7561      	strb	r1, [r4, #21]
 800db0e:	7da0      	ldrb	r0, [r4, #22]
 800db10:	f080 0001 	eor.w	r0, r0, #1
 800db14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	602b      	str	r3, [r5, #0]
 800db1c:	e7ef      	b.n	800dafe <ucdr_deserialize_uint32_t+0xb6>
 800db1e:	68a2      	ldr	r2, [r4, #8]
 800db20:	6923      	ldr	r3, [r4, #16]
 800db22:	7da0      	ldrb	r0, [r4, #22]
 800db24:	f884 8015 	strb.w	r8, [r4, #21]
 800db28:	1bd2      	subs	r2, r2, r7
 800db2a:	1bdb      	subs	r3, r3, r7
 800db2c:	60a2      	str	r2, [r4, #8]
 800db2e:	6123      	str	r3, [r4, #16]
 800db30:	f080 0001 	eor.w	r0, r0, #1
 800db34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	789b      	ldrb	r3, [r3, #2]
 800db3c:	706b      	strb	r3, [r5, #1]
 800db3e:	1cab      	adds	r3, r5, #2
 800db40:	68a2      	ldr	r2, [r4, #8]
 800db42:	7852      	ldrb	r2, [r2, #1]
 800db44:	f803 2b01 	strb.w	r2, [r3], #1
 800db48:	68a2      	ldr	r2, [r4, #8]
 800db4a:	7812      	ldrb	r2, [r2, #0]
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	e7b4      	b.n	800daba <ucdr_deserialize_uint32_t+0x72>
 800db50:	4631      	mov	r1, r6
 800db52:	463a      	mov	r2, r7
 800db54:	4628      	mov	r0, r5
 800db56:	f005 fe82 	bl	801385e <memcpy>
 800db5a:	68a1      	ldr	r1, [r4, #8]
 800db5c:	464a      	mov	r2, r9
 800db5e:	19e8      	adds	r0, r5, r7
 800db60:	f005 fe7d 	bl	801385e <memcpy>
 800db64:	e7a9      	b.n	800daba <ucdr_deserialize_uint32_t+0x72>
 800db66:	bf00      	nop

0800db68 <ucdr_deserialize_endian_uint32_t>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	460e      	mov	r6, r1
 800db6e:	2104      	movs	r1, #4
 800db70:	4604      	mov	r4, r0
 800db72:	4615      	mov	r5, r2
 800db74:	f7fa fac0 	bl	80080f8 <ucdr_buffer_alignment>
 800db78:	4601      	mov	r1, r0
 800db7a:	4620      	mov	r0, r4
 800db7c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db80:	f7fa fafe 	bl	8008180 <ucdr_advance_buffer>
 800db84:	2104      	movs	r1, #4
 800db86:	4620      	mov	r0, r4
 800db88:	f7fa fa56 	bl	8008038 <ucdr_check_buffer_available_for>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d13c      	bne.n	800dc0a <ucdr_deserialize_endian_uint32_t+0xa2>
 800db90:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800db94:	42bb      	cmp	r3, r7
 800db96:	d933      	bls.n	800dc00 <ucdr_deserialize_endian_uint32_t+0x98>
 800db98:	eba3 0807 	sub.w	r8, r3, r7
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6923      	ldr	r3, [r4, #16]
 800dba0:	f1c8 0a04 	rsb	sl, r8, #4
 800dba4:	4443      	add	r3, r8
 800dba6:	6123      	str	r3, [r4, #16]
 800dba8:	4651      	mov	r1, sl
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f7fa fa50 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d048      	beq.n	800dc46 <ucdr_deserialize_endian_uint32_t+0xde>
 800dbb4:	2e01      	cmp	r6, #1
 800dbb6:	d061      	beq.n	800dc7c <ucdr_deserialize_endian_uint32_t+0x114>
 800dbb8:	78fb      	ldrb	r3, [r7, #3]
 800dbba:	702b      	strb	r3, [r5, #0]
 800dbbc:	f1b8 0f00 	cmp.w	r8, #0
 800dbc0:	d050      	beq.n	800dc64 <ucdr_deserialize_endian_uint32_t+0xfc>
 800dbc2:	78bb      	ldrb	r3, [r7, #2]
 800dbc4:	706b      	strb	r3, [r5, #1]
 800dbc6:	f1b8 0f01 	cmp.w	r8, #1
 800dbca:	f105 0302 	add.w	r3, r5, #2
 800dbce:	d04d      	beq.n	800dc6c <ucdr_deserialize_endian_uint32_t+0x104>
 800dbd0:	787b      	ldrb	r3, [r7, #1]
 800dbd2:	70ab      	strb	r3, [r5, #2]
 800dbd4:	f1b8 0f02 	cmp.w	r8, #2
 800dbd8:	f105 0303 	add.w	r3, r5, #3
 800dbdc:	d04a      	beq.n	800dc74 <ucdr_deserialize_endian_uint32_t+0x10c>
 800dbde:	783b      	ldrb	r3, [r7, #0]
 800dbe0:	70eb      	strb	r3, [r5, #3]
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	68a2      	ldr	r2, [r4, #8]
 800dbe6:	7da0      	ldrb	r0, [r4, #22]
 800dbe8:	2104      	movs	r1, #4
 800dbea:	3304      	adds	r3, #4
 800dbec:	4452      	add	r2, sl
 800dbee:	eba3 0308 	sub.w	r3, r3, r8
 800dbf2:	7561      	strb	r1, [r4, #21]
 800dbf4:	60a2      	str	r2, [r4, #8]
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	f080 0001 	eor.w	r0, r0, #1
 800dbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc00:	2104      	movs	r1, #4
 800dc02:	4620      	mov	r0, r4
 800dc04:	f7fa fa24 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dc08:	b1a8      	cbz	r0, 800dc36 <ucdr_deserialize_endian_uint32_t+0xce>
 800dc0a:	2e01      	cmp	r6, #1
 800dc0c:	68a3      	ldr	r3, [r4, #8]
 800dc0e:	d017      	beq.n	800dc40 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dc10:	78db      	ldrb	r3, [r3, #3]
 800dc12:	702b      	strb	r3, [r5, #0]
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	789b      	ldrb	r3, [r3, #2]
 800dc18:	706b      	strb	r3, [r5, #1]
 800dc1a:	68a3      	ldr	r3, [r4, #8]
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	70ab      	strb	r3, [r5, #2]
 800dc20:	68a3      	ldr	r3, [r4, #8]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	70eb      	strb	r3, [r5, #3]
 800dc26:	68a2      	ldr	r2, [r4, #8]
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	3204      	adds	r2, #4
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	2104      	movs	r1, #4
 800dc30:	60a2      	str	r2, [r4, #8]
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	7561      	strb	r1, [r4, #21]
 800dc36:	7da0      	ldrb	r0, [r4, #22]
 800dc38:	f080 0001 	eor.w	r0, r0, #1
 800dc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	e7ef      	b.n	800dc26 <ucdr_deserialize_endian_uint32_t+0xbe>
 800dc46:	68a2      	ldr	r2, [r4, #8]
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	7da0      	ldrb	r0, [r4, #22]
 800dc4c:	f884 9015 	strb.w	r9, [r4, #21]
 800dc50:	eba2 0208 	sub.w	r2, r2, r8
 800dc54:	eba3 0308 	sub.w	r3, r3, r8
 800dc58:	60a2      	str	r2, [r4, #8]
 800dc5a:	6123      	str	r3, [r4, #16]
 800dc5c:	f080 0001 	eor.w	r0, r0, #1
 800dc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc64:	68a3      	ldr	r3, [r4, #8]
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	706b      	strb	r3, [r5, #1]
 800dc6a:	1cab      	adds	r3, r5, #2
 800dc6c:	68a2      	ldr	r2, [r4, #8]
 800dc6e:	7852      	ldrb	r2, [r2, #1]
 800dc70:	f803 2b01 	strb.w	r2, [r3], #1
 800dc74:	68a2      	ldr	r2, [r4, #8]
 800dc76:	7812      	ldrb	r2, [r2, #0]
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	e7b2      	b.n	800dbe2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	4642      	mov	r2, r8
 800dc80:	4628      	mov	r0, r5
 800dc82:	f005 fdec 	bl	801385e <memcpy>
 800dc86:	68a1      	ldr	r1, [r4, #8]
 800dc88:	4652      	mov	r2, sl
 800dc8a:	eb05 0008 	add.w	r0, r5, r8
 800dc8e:	f005 fde6 	bl	801385e <memcpy>
 800dc92:	e7a6      	b.n	800dbe2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800dc94 <ucdr_serialize_uint64_t>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	2108      	movs	r1, #8
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	e9cd 2300 	strd	r2, r3, [sp]
 800dca2:	f7fa fa29 	bl	80080f8 <ucdr_buffer_alignment>
 800dca6:	4601      	mov	r1, r0
 800dca8:	4620      	mov	r0, r4
 800dcaa:	7d67      	ldrb	r7, [r4, #21]
 800dcac:	f7fa fa68 	bl	8008180 <ucdr_advance_buffer>
 800dcb0:	2108      	movs	r1, #8
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f7fa f9c0 	bl	8008038 <ucdr_check_buffer_available_for>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d14e      	bne.n	800dd5a <ucdr_serialize_uint64_t+0xc6>
 800dcbc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	d945      	bls.n	800dd50 <ucdr_serialize_uint64_t+0xbc>
 800dcc4:	1b5e      	subs	r6, r3, r5
 800dcc6:	60a3      	str	r3, [r4, #8]
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	f1c6 0808 	rsb	r8, r6, #8
 800dcce:	4433      	add	r3, r6
 800dcd0:	6123      	str	r3, [r4, #16]
 800dcd2:	4641      	mov	r1, r8
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7fa f9bb 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d074      	beq.n	800ddc8 <ucdr_serialize_uint64_t+0x134>
 800dcde:	7d23      	ldrb	r3, [r4, #20]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	f000 809b 	beq.w	800de1c <ucdr_serialize_uint64_t+0x188>
 800dce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcea:	702b      	strb	r3, [r5, #0]
 800dcec:	2e00      	cmp	r6, #0
 800dcee:	d078      	beq.n	800dde2 <ucdr_serialize_uint64_t+0x14e>
 800dcf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcf4:	706b      	strb	r3, [r5, #1]
 800dcf6:	2e01      	cmp	r6, #1
 800dcf8:	d077      	beq.n	800ddea <ucdr_serialize_uint64_t+0x156>
 800dcfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcfe:	70ab      	strb	r3, [r5, #2]
 800dd00:	2e02      	cmp	r6, #2
 800dd02:	d076      	beq.n	800ddf2 <ucdr_serialize_uint64_t+0x15e>
 800dd04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd08:	70eb      	strb	r3, [r5, #3]
 800dd0a:	2e03      	cmp	r6, #3
 800dd0c:	d075      	beq.n	800ddfa <ucdr_serialize_uint64_t+0x166>
 800dd0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dd12:	712b      	strb	r3, [r5, #4]
 800dd14:	2e04      	cmp	r6, #4
 800dd16:	d074      	beq.n	800de02 <ucdr_serialize_uint64_t+0x16e>
 800dd18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dd1c:	716b      	strb	r3, [r5, #5]
 800dd1e:	2e05      	cmp	r6, #5
 800dd20:	d073      	beq.n	800de0a <ucdr_serialize_uint64_t+0x176>
 800dd22:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dd26:	71ab      	strb	r3, [r5, #6]
 800dd28:	2e06      	cmp	r6, #6
 800dd2a:	d072      	beq.n	800de12 <ucdr_serialize_uint64_t+0x17e>
 800dd2c:	f89d 3000 	ldrb.w	r3, [sp]
 800dd30:	71eb      	strb	r3, [r5, #7]
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	68a2      	ldr	r2, [r4, #8]
 800dd36:	7da0      	ldrb	r0, [r4, #22]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	1b9e      	subs	r6, r3, r6
 800dd3c:	4442      	add	r2, r8
 800dd3e:	2308      	movs	r3, #8
 800dd40:	f080 0001 	eor.w	r0, r0, #1
 800dd44:	60a2      	str	r2, [r4, #8]
 800dd46:	6126      	str	r6, [r4, #16]
 800dd48:	7563      	strb	r3, [r4, #21]
 800dd4a:	b002      	add	sp, #8
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd50:	2108      	movs	r1, #8
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7fa f97c 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dd58:	b350      	cbz	r0, 800ddb0 <ucdr_serialize_uint64_t+0x11c>
 800dd5a:	7d23      	ldrb	r3, [r4, #20]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d02d      	beq.n	800ddbc <ucdr_serialize_uint64_t+0x128>
 800dd60:	68a3      	ldr	r3, [r4, #8]
 800dd62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd66:	701a      	strb	r2, [r3, #0]
 800dd68:	68a3      	ldr	r3, [r4, #8]
 800dd6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd6e:	705a      	strb	r2, [r3, #1]
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd76:	709a      	strb	r2, [r3, #2]
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd7e:	70da      	strb	r2, [r3, #3]
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd86:	711a      	strb	r2, [r3, #4]
 800dd88:	68a3      	ldr	r3, [r4, #8]
 800dd8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd8e:	715a      	strb	r2, [r3, #5]
 800dd90:	68a3      	ldr	r3, [r4, #8]
 800dd92:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dd96:	719a      	strb	r2, [r3, #6]
 800dd98:	68a3      	ldr	r3, [r4, #8]
 800dd9a:	f89d 2000 	ldrb.w	r2, [sp]
 800dd9e:	71da      	strb	r2, [r3, #7]
 800dda0:	68a2      	ldr	r2, [r4, #8]
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	3208      	adds	r2, #8
 800dda6:	3308      	adds	r3, #8
 800dda8:	2108      	movs	r1, #8
 800ddaa:	60a2      	str	r2, [r4, #8]
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	7561      	strb	r1, [r4, #21]
 800ddb0:	7da0      	ldrb	r0, [r4, #22]
 800ddb2:	f080 0001 	eor.w	r0, r0, #1
 800ddb6:	b002      	add	sp, #8
 800ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddbc:	466b      	mov	r3, sp
 800ddbe:	cb03      	ldmia	r3!, {r0, r1}
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	6018      	str	r0, [r3, #0]
 800ddc4:	6059      	str	r1, [r3, #4]
 800ddc6:	e7eb      	b.n	800dda0 <ucdr_serialize_uint64_t+0x10c>
 800ddc8:	68a2      	ldr	r2, [r4, #8]
 800ddca:	6923      	ldr	r3, [r4, #16]
 800ddcc:	7da0      	ldrb	r0, [r4, #22]
 800ddce:	7567      	strb	r7, [r4, #21]
 800ddd0:	1b92      	subs	r2, r2, r6
 800ddd2:	1b9b      	subs	r3, r3, r6
 800ddd4:	f080 0001 	eor.w	r0, r0, #1
 800ddd8:	60a2      	str	r2, [r4, #8]
 800ddda:	6123      	str	r3, [r4, #16]
 800dddc:	b002      	add	sp, #8
 800ddde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde2:	68a3      	ldr	r3, [r4, #8]
 800dde4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	68a3      	ldr	r3, [r4, #8]
 800ddec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	68a3      	ldr	r3, [r4, #8]
 800ddf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	68a3      	ldr	r3, [r4, #8]
 800ddfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	68a3      	ldr	r3, [r4, #8]
 800de04:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	f89d 2000 	ldrb.w	r2, [sp]
 800de18:	701a      	strb	r2, [r3, #0]
 800de1a:	e78a      	b.n	800dd32 <ucdr_serialize_uint64_t+0x9e>
 800de1c:	4628      	mov	r0, r5
 800de1e:	466d      	mov	r5, sp
 800de20:	4629      	mov	r1, r5
 800de22:	4632      	mov	r2, r6
 800de24:	f005 fd1b 	bl	801385e <memcpy>
 800de28:	68a0      	ldr	r0, [r4, #8]
 800de2a:	4642      	mov	r2, r8
 800de2c:	19a9      	adds	r1, r5, r6
 800de2e:	f005 fd16 	bl	801385e <memcpy>
 800de32:	e77e      	b.n	800dd32 <ucdr_serialize_uint64_t+0x9e>

0800de34 <ucdr_serialize_int16_t>:
 800de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de38:	b082      	sub	sp, #8
 800de3a:	460b      	mov	r3, r1
 800de3c:	2102      	movs	r1, #2
 800de3e:	4604      	mov	r4, r0
 800de40:	f8ad 3006 	strh.w	r3, [sp, #6]
 800de44:	f7fa f958 	bl	80080f8 <ucdr_buffer_alignment>
 800de48:	4601      	mov	r1, r0
 800de4a:	4620      	mov	r0, r4
 800de4c:	7d67      	ldrb	r7, [r4, #21]
 800de4e:	f7fa f997 	bl	8008180 <ucdr_advance_buffer>
 800de52:	2102      	movs	r1, #2
 800de54:	4620      	mov	r0, r4
 800de56:	f7fa f8ef 	bl	8008038 <ucdr_check_buffer_available_for>
 800de5a:	bb78      	cbnz	r0, 800debc <ucdr_serialize_int16_t+0x88>
 800de5c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de60:	42ab      	cmp	r3, r5
 800de62:	d926      	bls.n	800deb2 <ucdr_serialize_int16_t+0x7e>
 800de64:	1b5e      	subs	r6, r3, r5
 800de66:	60a3      	str	r3, [r4, #8]
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	f1c6 0802 	rsb	r8, r6, #2
 800de6e:	4433      	add	r3, r6
 800de70:	6123      	str	r3, [r4, #16]
 800de72:	4641      	mov	r1, r8
 800de74:	4620      	mov	r0, r4
 800de76:	f7fa f8eb 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d03b      	beq.n	800def6 <ucdr_serialize_int16_t+0xc2>
 800de7e:	7d23      	ldrb	r3, [r4, #20]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d04a      	beq.n	800df1a <ucdr_serialize_int16_t+0xe6>
 800de84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de88:	702b      	strb	r3, [r5, #0]
 800de8a:	2e00      	cmp	r6, #0
 800de8c:	d040      	beq.n	800df10 <ucdr_serialize_int16_t+0xdc>
 800de8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de92:	706b      	strb	r3, [r5, #1]
 800de94:	6923      	ldr	r3, [r4, #16]
 800de96:	68a2      	ldr	r2, [r4, #8]
 800de98:	7da0      	ldrb	r0, [r4, #22]
 800de9a:	3302      	adds	r3, #2
 800de9c:	1b9e      	subs	r6, r3, r6
 800de9e:	4442      	add	r2, r8
 800dea0:	2302      	movs	r3, #2
 800dea2:	f080 0001 	eor.w	r0, r0, #1
 800dea6:	60a2      	str	r2, [r4, #8]
 800dea8:	6126      	str	r6, [r4, #16]
 800deaa:	7563      	strb	r3, [r4, #21]
 800deac:	b002      	add	sp, #8
 800deae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb2:	2102      	movs	r1, #2
 800deb4:	4620      	mov	r0, r4
 800deb6:	f7fa f8cb 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800deba:	b190      	cbz	r0, 800dee2 <ucdr_serialize_int16_t+0xae>
 800debc:	7d23      	ldrb	r3, [r4, #20]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	68a3      	ldr	r3, [r4, #8]
 800dec2:	d014      	beq.n	800deee <ucdr_serialize_int16_t+0xba>
 800dec4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	68a3      	ldr	r3, [r4, #8]
 800decc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ded0:	705a      	strb	r2, [r3, #1]
 800ded2:	68a2      	ldr	r2, [r4, #8]
 800ded4:	6923      	ldr	r3, [r4, #16]
 800ded6:	3202      	adds	r2, #2
 800ded8:	3302      	adds	r3, #2
 800deda:	2102      	movs	r1, #2
 800dedc:	60a2      	str	r2, [r4, #8]
 800dede:	6123      	str	r3, [r4, #16]
 800dee0:	7561      	strb	r1, [r4, #21]
 800dee2:	7da0      	ldrb	r0, [r4, #22]
 800dee4:	f080 0001 	eor.w	r0, r0, #1
 800dee8:	b002      	add	sp, #8
 800deea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800def2:	801a      	strh	r2, [r3, #0]
 800def4:	e7ed      	b.n	800ded2 <ucdr_serialize_int16_t+0x9e>
 800def6:	68a2      	ldr	r2, [r4, #8]
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	7da0      	ldrb	r0, [r4, #22]
 800defc:	7567      	strb	r7, [r4, #21]
 800defe:	1b92      	subs	r2, r2, r6
 800df00:	1b9b      	subs	r3, r3, r6
 800df02:	f080 0001 	eor.w	r0, r0, #1
 800df06:	60a2      	str	r2, [r4, #8]
 800df08:	6123      	str	r3, [r4, #16]
 800df0a:	b002      	add	sp, #8
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df16:	701a      	strb	r2, [r3, #0]
 800df18:	e7bc      	b.n	800de94 <ucdr_serialize_int16_t+0x60>
 800df1a:	4628      	mov	r0, r5
 800df1c:	f10d 0506 	add.w	r5, sp, #6
 800df20:	4629      	mov	r1, r5
 800df22:	4632      	mov	r2, r6
 800df24:	f005 fc9b 	bl	801385e <memcpy>
 800df28:	68a0      	ldr	r0, [r4, #8]
 800df2a:	4642      	mov	r2, r8
 800df2c:	19a9      	adds	r1, r5, r6
 800df2e:	f005 fc96 	bl	801385e <memcpy>
 800df32:	e7af      	b.n	800de94 <ucdr_serialize_int16_t+0x60>

0800df34 <ucdr_deserialize_int16_t>:
 800df34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df38:	460d      	mov	r5, r1
 800df3a:	2102      	movs	r1, #2
 800df3c:	4604      	mov	r4, r0
 800df3e:	f7fa f8db 	bl	80080f8 <ucdr_buffer_alignment>
 800df42:	4601      	mov	r1, r0
 800df44:	4620      	mov	r0, r4
 800df46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df4a:	f7fa f919 	bl	8008180 <ucdr_advance_buffer>
 800df4e:	2102      	movs	r1, #2
 800df50:	4620      	mov	r0, r4
 800df52:	f7fa f871 	bl	8008038 <ucdr_check_buffer_available_for>
 800df56:	bb60      	cbnz	r0, 800dfb2 <ucdr_deserialize_int16_t+0x7e>
 800df58:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800df5c:	42be      	cmp	r6, r7
 800df5e:	d923      	bls.n	800dfa8 <ucdr_deserialize_int16_t+0x74>
 800df60:	6923      	ldr	r3, [r4, #16]
 800df62:	60a6      	str	r6, [r4, #8]
 800df64:	1bf6      	subs	r6, r6, r7
 800df66:	4433      	add	r3, r6
 800df68:	f1c6 0902 	rsb	r9, r6, #2
 800df6c:	6123      	str	r3, [r4, #16]
 800df6e:	4649      	mov	r1, r9
 800df70:	4620      	mov	r0, r4
 800df72:	f7fa f86d 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800df76:	2800      	cmp	r0, #0
 800df78:	d034      	beq.n	800dfe4 <ucdr_deserialize_int16_t+0xb0>
 800df7a:	7d23      	ldrb	r3, [r4, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d042      	beq.n	800e006 <ucdr_deserialize_int16_t+0xd2>
 800df80:	787b      	ldrb	r3, [r7, #1]
 800df82:	702b      	strb	r3, [r5, #0]
 800df84:	2e00      	cmp	r6, #0
 800df86:	d03a      	beq.n	800dffe <ucdr_deserialize_int16_t+0xca>
 800df88:	783b      	ldrb	r3, [r7, #0]
 800df8a:	706b      	strb	r3, [r5, #1]
 800df8c:	6923      	ldr	r3, [r4, #16]
 800df8e:	68a2      	ldr	r2, [r4, #8]
 800df90:	7da0      	ldrb	r0, [r4, #22]
 800df92:	2102      	movs	r1, #2
 800df94:	3302      	adds	r3, #2
 800df96:	444a      	add	r2, r9
 800df98:	1b9b      	subs	r3, r3, r6
 800df9a:	7561      	strb	r1, [r4, #21]
 800df9c:	60a2      	str	r2, [r4, #8]
 800df9e:	6123      	str	r3, [r4, #16]
 800dfa0:	f080 0001 	eor.w	r0, r0, #1
 800dfa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa8:	2102      	movs	r1, #2
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7fa f850 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800dfb0:	b180      	cbz	r0, 800dfd4 <ucdr_deserialize_int16_t+0xa0>
 800dfb2:	7d23      	ldrb	r3, [r4, #20]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	68a3      	ldr	r3, [r4, #8]
 800dfb8:	d011      	beq.n	800dfde <ucdr_deserialize_int16_t+0xaa>
 800dfba:	785b      	ldrb	r3, [r3, #1]
 800dfbc:	702b      	strb	r3, [r5, #0]
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	706b      	strb	r3, [r5, #1]
 800dfc4:	68a2      	ldr	r2, [r4, #8]
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	3202      	adds	r2, #2
 800dfca:	3302      	adds	r3, #2
 800dfcc:	2102      	movs	r1, #2
 800dfce:	60a2      	str	r2, [r4, #8]
 800dfd0:	6123      	str	r3, [r4, #16]
 800dfd2:	7561      	strb	r1, [r4, #21]
 800dfd4:	7da0      	ldrb	r0, [r4, #22]
 800dfd6:	f080 0001 	eor.w	r0, r0, #1
 800dfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	802b      	strh	r3, [r5, #0]
 800dfe2:	e7ef      	b.n	800dfc4 <ucdr_deserialize_int16_t+0x90>
 800dfe4:	68a2      	ldr	r2, [r4, #8]
 800dfe6:	6923      	ldr	r3, [r4, #16]
 800dfe8:	7da0      	ldrb	r0, [r4, #22]
 800dfea:	f884 8015 	strb.w	r8, [r4, #21]
 800dfee:	1b92      	subs	r2, r2, r6
 800dff0:	1b9b      	subs	r3, r3, r6
 800dff2:	60a2      	str	r2, [r4, #8]
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	f080 0001 	eor.w	r0, r0, #1
 800dffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	706b      	strb	r3, [r5, #1]
 800e004:	e7c2      	b.n	800df8c <ucdr_deserialize_int16_t+0x58>
 800e006:	4639      	mov	r1, r7
 800e008:	4632      	mov	r2, r6
 800e00a:	4628      	mov	r0, r5
 800e00c:	f005 fc27 	bl	801385e <memcpy>
 800e010:	68a1      	ldr	r1, [r4, #8]
 800e012:	464a      	mov	r2, r9
 800e014:	19a8      	adds	r0, r5, r6
 800e016:	f005 fc22 	bl	801385e <memcpy>
 800e01a:	e7b7      	b.n	800df8c <ucdr_deserialize_int16_t+0x58>

0800e01c <ucdr_serialize_int32_t>:
 800e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	b082      	sub	sp, #8
 800e022:	4604      	mov	r4, r0
 800e024:	9101      	str	r1, [sp, #4]
 800e026:	2104      	movs	r1, #4
 800e028:	f7fa f866 	bl	80080f8 <ucdr_buffer_alignment>
 800e02c:	4601      	mov	r1, r0
 800e02e:	4620      	mov	r0, r4
 800e030:	7d67      	ldrb	r7, [r4, #21]
 800e032:	f7fa f8a5 	bl	8008180 <ucdr_advance_buffer>
 800e036:	2104      	movs	r1, #4
 800e038:	4620      	mov	r0, r4
 800e03a:	f7f9 fffd 	bl	8008038 <ucdr_check_buffer_available_for>
 800e03e:	2800      	cmp	r0, #0
 800e040:	d139      	bne.n	800e0b6 <ucdr_serialize_int32_t+0x9a>
 800e042:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e046:	42ab      	cmp	r3, r5
 800e048:	d930      	bls.n	800e0ac <ucdr_serialize_int32_t+0x90>
 800e04a:	1b5e      	subs	r6, r3, r5
 800e04c:	60a3      	str	r3, [r4, #8]
 800e04e:	6923      	ldr	r3, [r4, #16]
 800e050:	f1c6 0804 	rsb	r8, r6, #4
 800e054:	4433      	add	r3, r6
 800e056:	6123      	str	r3, [r4, #16]
 800e058:	4641      	mov	r1, r8
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7f9 fff8 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800e060:	2800      	cmp	r0, #0
 800e062:	d04c      	beq.n	800e0fe <ucdr_serialize_int32_t+0xe2>
 800e064:	7d23      	ldrb	r3, [r4, #20]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d063      	beq.n	800e132 <ucdr_serialize_int32_t+0x116>
 800e06a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e06e:	702b      	strb	r3, [r5, #0]
 800e070:	2e00      	cmp	r6, #0
 800e072:	d051      	beq.n	800e118 <ucdr_serialize_int32_t+0xfc>
 800e074:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e078:	706b      	strb	r3, [r5, #1]
 800e07a:	2e01      	cmp	r6, #1
 800e07c:	d050      	beq.n	800e120 <ucdr_serialize_int32_t+0x104>
 800e07e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e082:	70ab      	strb	r3, [r5, #2]
 800e084:	2e02      	cmp	r6, #2
 800e086:	d04f      	beq.n	800e128 <ucdr_serialize_int32_t+0x10c>
 800e088:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e08c:	70eb      	strb	r3, [r5, #3]
 800e08e:	6923      	ldr	r3, [r4, #16]
 800e090:	68a2      	ldr	r2, [r4, #8]
 800e092:	7da0      	ldrb	r0, [r4, #22]
 800e094:	3304      	adds	r3, #4
 800e096:	1b9e      	subs	r6, r3, r6
 800e098:	4442      	add	r2, r8
 800e09a:	2304      	movs	r3, #4
 800e09c:	f080 0001 	eor.w	r0, r0, #1
 800e0a0:	60a2      	str	r2, [r4, #8]
 800e0a2:	6126      	str	r6, [r4, #16]
 800e0a4:	7563      	strb	r3, [r4, #21]
 800e0a6:	b002      	add	sp, #8
 800e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ac:	2104      	movs	r1, #4
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f7f9 ffce 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800e0b4:	b1d0      	cbz	r0, 800e0ec <ucdr_serialize_int32_t+0xd0>
 800e0b6:	7d23      	ldrb	r3, [r4, #20]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	68a3      	ldr	r3, [r4, #8]
 800e0bc:	d01c      	beq.n	800e0f8 <ucdr_serialize_int32_t+0xdc>
 800e0be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0c2:	701a      	strb	r2, [r3, #0]
 800e0c4:	68a3      	ldr	r3, [r4, #8]
 800e0c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0ca:	705a      	strb	r2, [r3, #1]
 800e0cc:	68a3      	ldr	r3, [r4, #8]
 800e0ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0d2:	709a      	strb	r2, [r3, #2]
 800e0d4:	68a3      	ldr	r3, [r4, #8]
 800e0d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0da:	70da      	strb	r2, [r3, #3]
 800e0dc:	68a2      	ldr	r2, [r4, #8]
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	3204      	adds	r2, #4
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	2104      	movs	r1, #4
 800e0e6:	60a2      	str	r2, [r4, #8]
 800e0e8:	6123      	str	r3, [r4, #16]
 800e0ea:	7561      	strb	r1, [r4, #21]
 800e0ec:	7da0      	ldrb	r0, [r4, #22]
 800e0ee:	f080 0001 	eor.w	r0, r0, #1
 800e0f2:	b002      	add	sp, #8
 800e0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f8:	9a01      	ldr	r2, [sp, #4]
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	e7ee      	b.n	800e0dc <ucdr_serialize_int32_t+0xc0>
 800e0fe:	68a2      	ldr	r2, [r4, #8]
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	7da0      	ldrb	r0, [r4, #22]
 800e104:	7567      	strb	r7, [r4, #21]
 800e106:	1b92      	subs	r2, r2, r6
 800e108:	1b9b      	subs	r3, r3, r6
 800e10a:	f080 0001 	eor.w	r0, r0, #1
 800e10e:	60a2      	str	r2, [r4, #8]
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	b002      	add	sp, #8
 800e114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e118:	68a3      	ldr	r3, [r4, #8]
 800e11a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e11e:	701a      	strb	r2, [r3, #0]
 800e120:	68a3      	ldr	r3, [r4, #8]
 800e122:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e126:	701a      	strb	r2, [r3, #0]
 800e128:	68a3      	ldr	r3, [r4, #8]
 800e12a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e12e:	701a      	strb	r2, [r3, #0]
 800e130:	e7ad      	b.n	800e08e <ucdr_serialize_int32_t+0x72>
 800e132:	4628      	mov	r0, r5
 800e134:	ad01      	add	r5, sp, #4
 800e136:	4629      	mov	r1, r5
 800e138:	4632      	mov	r2, r6
 800e13a:	f005 fb90 	bl	801385e <memcpy>
 800e13e:	68a0      	ldr	r0, [r4, #8]
 800e140:	4642      	mov	r2, r8
 800e142:	19a9      	adds	r1, r5, r6
 800e144:	f005 fb8b 	bl	801385e <memcpy>
 800e148:	e7a1      	b.n	800e08e <ucdr_serialize_int32_t+0x72>
 800e14a:	bf00      	nop

0800e14c <ucdr_deserialize_int32_t>:
 800e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e150:	460d      	mov	r5, r1
 800e152:	2104      	movs	r1, #4
 800e154:	4604      	mov	r4, r0
 800e156:	f7f9 ffcf 	bl	80080f8 <ucdr_buffer_alignment>
 800e15a:	4601      	mov	r1, r0
 800e15c:	4620      	mov	r0, r4
 800e15e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e162:	f7fa f80d 	bl	8008180 <ucdr_advance_buffer>
 800e166:	2104      	movs	r1, #4
 800e168:	4620      	mov	r0, r4
 800e16a:	f7f9 ff65 	bl	8008038 <ucdr_check_buffer_available_for>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d138      	bne.n	800e1e4 <ucdr_deserialize_int32_t+0x98>
 800e172:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e176:	42b7      	cmp	r7, r6
 800e178:	d92f      	bls.n	800e1da <ucdr_deserialize_int32_t+0x8e>
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	60a7      	str	r7, [r4, #8]
 800e17e:	1bbf      	subs	r7, r7, r6
 800e180:	443b      	add	r3, r7
 800e182:	f1c7 0904 	rsb	r9, r7, #4
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	4649      	mov	r1, r9
 800e18a:	4620      	mov	r0, r4
 800e18c:	f7f9 ff60 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800e190:	2800      	cmp	r0, #0
 800e192:	d046      	beq.n	800e222 <ucdr_deserialize_int32_t+0xd6>
 800e194:	7d23      	ldrb	r3, [r4, #20]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d05c      	beq.n	800e254 <ucdr_deserialize_int32_t+0x108>
 800e19a:	78f3      	ldrb	r3, [r6, #3]
 800e19c:	702b      	strb	r3, [r5, #0]
 800e19e:	2f00      	cmp	r7, #0
 800e1a0:	d04c      	beq.n	800e23c <ucdr_deserialize_int32_t+0xf0>
 800e1a2:	78b3      	ldrb	r3, [r6, #2]
 800e1a4:	706b      	strb	r3, [r5, #1]
 800e1a6:	2f01      	cmp	r7, #1
 800e1a8:	f105 0302 	add.w	r3, r5, #2
 800e1ac:	d04a      	beq.n	800e244 <ucdr_deserialize_int32_t+0xf8>
 800e1ae:	7873      	ldrb	r3, [r6, #1]
 800e1b0:	70ab      	strb	r3, [r5, #2]
 800e1b2:	2f02      	cmp	r7, #2
 800e1b4:	f105 0303 	add.w	r3, r5, #3
 800e1b8:	d048      	beq.n	800e24c <ucdr_deserialize_int32_t+0x100>
 800e1ba:	7833      	ldrb	r3, [r6, #0]
 800e1bc:	70eb      	strb	r3, [r5, #3]
 800e1be:	6923      	ldr	r3, [r4, #16]
 800e1c0:	68a2      	ldr	r2, [r4, #8]
 800e1c2:	7da0      	ldrb	r0, [r4, #22]
 800e1c4:	2104      	movs	r1, #4
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	444a      	add	r2, r9
 800e1ca:	1bdb      	subs	r3, r3, r7
 800e1cc:	7561      	strb	r1, [r4, #21]
 800e1ce:	60a2      	str	r2, [r4, #8]
 800e1d0:	6123      	str	r3, [r4, #16]
 800e1d2:	f080 0001 	eor.w	r0, r0, #1
 800e1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1da:	2104      	movs	r1, #4
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f7f9 ff37 	bl	8008050 <ucdr_check_final_buffer_behavior>
 800e1e2:	b1b0      	cbz	r0, 800e212 <ucdr_deserialize_int32_t+0xc6>
 800e1e4:	7d23      	ldrb	r3, [r4, #20]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	68a3      	ldr	r3, [r4, #8]
 800e1ea:	d017      	beq.n	800e21c <ucdr_deserialize_int32_t+0xd0>
 800e1ec:	78db      	ldrb	r3, [r3, #3]
 800e1ee:	702b      	strb	r3, [r5, #0]
 800e1f0:	68a3      	ldr	r3, [r4, #8]
 800e1f2:	789b      	ldrb	r3, [r3, #2]
 800e1f4:	706b      	strb	r3, [r5, #1]
 800e1f6:	68a3      	ldr	r3, [r4, #8]
 800e1f8:	785b      	ldrb	r3, [r3, #1]
 800e1fa:	70ab      	strb	r3, [r5, #2]
 800e1fc:	68a3      	ldr	r3, [r4, #8]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	70eb      	strb	r3, [r5, #3]
 800e202:	68a2      	ldr	r2, [r4, #8]
 800e204:	6923      	ldr	r3, [r4, #16]
 800e206:	3204      	adds	r2, #4
 800e208:	3304      	adds	r3, #4
 800e20a:	2104      	movs	r1, #4
 800e20c:	60a2      	str	r2, [r4, #8]
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	7561      	strb	r1, [r4, #21]
 800e212:	7da0      	ldrb	r0, [r4, #22]
 800e214:	f080 0001 	eor.w	r0, r0, #1
 800e218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	602b      	str	r3, [r5, #0]
 800e220:	e7ef      	b.n	800e202 <ucdr_deserialize_int32_t+0xb6>
 800e222:	68a2      	ldr	r2, [r4, #8]
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	7da0      	ldrb	r0, [r4, #22]
 800e228:	f884 8015 	strb.w	r8, [r4, #21]
 800e22c:	1bd2      	subs	r2, r2, r7
 800e22e:	1bdb      	subs	r3, r3, r7
 800e230:	60a2      	str	r2, [r4, #8]
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	f080 0001 	eor.w	r0, r0, #1
 800e238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	789b      	ldrb	r3, [r3, #2]
 800e240:	706b      	strb	r3, [r5, #1]
 800e242:	1cab      	adds	r3, r5, #2
 800e244:	68a2      	ldr	r2, [r4, #8]
 800e246:	7852      	ldrb	r2, [r2, #1]
 800e248:	f803 2b01 	strb.w	r2, [r3], #1
 800e24c:	68a2      	ldr	r2, [r4, #8]
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	701a      	strb	r2, [r3, #0]
 800e252:	e7b4      	b.n	800e1be <ucdr_deserialize_int32_t+0x72>
 800e254:	4631      	mov	r1, r6
 800e256:	463a      	mov	r2, r7
 800e258:	4628      	mov	r0, r5
 800e25a:	f005 fb00 	bl	801385e <memcpy>
 800e25e:	68a1      	ldr	r1, [r4, #8]
 800e260:	464a      	mov	r2, r9
 800e262:	19e8      	adds	r0, r5, r7
 800e264:	f005 fafb 	bl	801385e <memcpy>
 800e268:	e7a9      	b.n	800e1be <ucdr_deserialize_int32_t+0x72>
 800e26a:	bf00      	nop

0800e26c <uxr_buffer_delete_entity>:
 800e26c:	b510      	push	{r4, lr}
 800e26e:	2300      	movs	r3, #0
 800e270:	b08e      	sub	sp, #56	@ 0x38
 800e272:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e276:	2303      	movs	r3, #3
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	2204      	movs	r2, #4
 800e27c:	ab06      	add	r3, sp, #24
 800e27e:	4604      	mov	r4, r0
 800e280:	9103      	str	r1, [sp, #12]
 800e282:	f001 fa9f 	bl	800f7c4 <uxr_prepare_stream_to_write_submessage>
 800e286:	b918      	cbnz	r0, 800e290 <uxr_buffer_delete_entity+0x24>
 800e288:	4604      	mov	r4, r0
 800e28a:	4620      	mov	r0, r4
 800e28c:	b00e      	add	sp, #56	@ 0x38
 800e28e:	bd10      	pop	{r4, pc}
 800e290:	9902      	ldr	r1, [sp, #8]
 800e292:	aa05      	add	r2, sp, #20
 800e294:	4620      	mov	r0, r4
 800e296:	f001 fbcb 	bl	800fa30 <uxr_init_base_object_request>
 800e29a:	a905      	add	r1, sp, #20
 800e29c:	4604      	mov	r4, r0
 800e29e:	a806      	add	r0, sp, #24
 800e2a0:	f003 f87e 	bl	80113a0 <uxr_serialize_DELETE_Payload>
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	b00e      	add	sp, #56	@ 0x38
 800e2a8:	bd10      	pop	{r4, pc}
 800e2aa:	bf00      	nop

0800e2ac <uxr_common_create_entity>:
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e2b2:	b08c      	sub	sp, #48	@ 0x30
 800e2b4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e2b8:	f1bc 0f01 	cmp.w	ip, #1
 800e2bc:	bf0c      	ite	eq
 800e2be:	f003 0201 	andeq.w	r2, r3, #1
 800e2c2:	2200      	movne	r2, #0
 800e2c4:	330e      	adds	r3, #14
 800e2c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e2ca:	9101      	str	r1, [sp, #4]
 800e2cc:	441a      	add	r2, r3
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	9903      	ldr	r1, [sp, #12]
 800e2d4:	ab04      	add	r3, sp, #16
 800e2d6:	b292      	uxth	r2, r2
 800e2d8:	4604      	mov	r4, r0
 800e2da:	f001 fa73 	bl	800f7c4 <uxr_prepare_stream_to_write_submessage>
 800e2de:	b918      	cbnz	r0, 800e2e8 <uxr_common_create_entity+0x3c>
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	b00c      	add	sp, #48	@ 0x30
 800e2e6:	bd10      	pop	{r4, pc}
 800e2e8:	9902      	ldr	r1, [sp, #8]
 800e2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f001 fb9f 	bl	800fa30 <uxr_init_base_object_request>
 800e2f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	a804      	add	r0, sp, #16
 800e2f8:	f002 ffae 	bl	8011258 <uxr_serialize_CREATE_Payload>
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	b00c      	add	sp, #48	@ 0x30
 800e300:	bd10      	pop	{r4, pc}
 800e302:	bf00      	nop

0800e304 <uxr_buffer_create_participant_bin>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e30a:	ac11      	add	r4, sp, #68	@ 0x44
 800e30c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e310:	2303      	movs	r3, #3
 800e312:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e316:	7223      	strb	r3, [r4, #8]
 800e318:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e31a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e31e:	2201      	movs	r2, #1
 800e320:	2100      	movs	r1, #0
 800e322:	4605      	mov	r5, r0
 800e324:	7122      	strb	r2, [r4, #4]
 800e326:	f88d 1014 	strb.w	r1, [sp, #20]
 800e32a:	b1cb      	cbz	r3, 800e360 <uxr_buffer_create_participant_bin+0x5c>
 800e32c:	f88d 201c 	strb.w	r2, [sp, #28]
 800e330:	9308      	str	r3, [sp, #32]
 800e332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e336:	a915      	add	r1, sp, #84	@ 0x54
 800e338:	a809      	add	r0, sp, #36	@ 0x24
 800e33a:	f7f9 fed1 	bl	80080e0 <ucdr_init_buffer>
 800e33e:	a905      	add	r1, sp, #20
 800e340:	a809      	add	r0, sp, #36	@ 0x24
 800e342:	f002 fc47 	bl	8010bd4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e348:	9600      	str	r6, [sp, #0]
 800e34a:	9401      	str	r4, [sp, #4]
 800e34c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e350:	60e3      	str	r3, [r4, #12]
 800e352:	4628      	mov	r0, r5
 800e354:	b29b      	uxth	r3, r3
 800e356:	f7ff ffa9 	bl	800e2ac <uxr_common_create_entity>
 800e35a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e35e:	bd70      	pop	{r4, r5, r6, pc}
 800e360:	f88d 301c 	strb.w	r3, [sp, #28]
 800e364:	e7e5      	b.n	800e332 <uxr_buffer_create_participant_bin+0x2e>
 800e366:	bf00      	nop

0800e368 <uxr_buffer_create_topic_bin>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e36e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e372:	9105      	str	r1, [sp, #20]
 800e374:	4605      	mov	r5, r0
 800e376:	a997      	add	r1, sp, #604	@ 0x25c
 800e378:	4618      	mov	r0, r3
 800e37a:	2302      	movs	r3, #2
 800e37c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e380:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e384:	f000 f9b2 	bl	800e6ec <uxr_object_id_to_raw>
 800e388:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e38a:	9306      	str	r3, [sp, #24]
 800e38c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e38e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e390:	2303      	movs	r3, #3
 800e392:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e396:	2301      	movs	r3, #1
 800e398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e39c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e3a0:	a917      	add	r1, sp, #92	@ 0x5c
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	a80b      	add	r0, sp, #44	@ 0x2c
 800e3a6:	f88d 301c 	strb.w	r3, [sp, #28]
 800e3aa:	f7f9 fe99 	bl	80080e0 <ucdr_init_buffer>
 800e3ae:	a906      	add	r1, sp, #24
 800e3b0:	a80b      	add	r0, sp, #44	@ 0x2c
 800e3b2:	f002 fc31 	bl	8010c18 <uxr_serialize_OBJK_Topic_Binary>
 800e3b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b8:	9316      	str	r3, [sp, #88]	@ 0x58
 800e3ba:	ac13      	add	r4, sp, #76	@ 0x4c
 800e3bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e3c0:	9600      	str	r6, [sp, #0]
 800e3c2:	9401      	str	r4, [sp, #4]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f7ff ff70 	bl	800e2ac <uxr_common_create_entity>
 800e3cc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e3d0:	bd70      	pop	{r4, r5, r6, pc}
 800e3d2:	bf00      	nop

0800e3d4 <uxr_buffer_create_subscriber_bin>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800e3da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e3de:	9105      	str	r1, [sp, #20]
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	a992      	add	r1, sp, #584	@ 0x248
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	2304      	movs	r3, #4
 800e3e8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800e3ec:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800e3f0:	f000 f97c 	bl	800e6ec <uxr_object_id_to_raw>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3fa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e3fe:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e402:	a912      	add	r1, sp, #72	@ 0x48
 800e404:	2303      	movs	r3, #3
 800e406:	a806      	add	r0, sp, #24
 800e408:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800e40c:	f7f9 fe68 	bl	80080e0 <ucdr_init_buffer>
 800e410:	a993      	add	r1, sp, #588	@ 0x24c
 800e412:	a806      	add	r0, sp, #24
 800e414:	f002 fcb4 	bl	8010d80 <uxr_serialize_OBJK_Subscriber_Binary>
 800e418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e41a:	9311      	str	r3, [sp, #68]	@ 0x44
 800e41c:	ac0e      	add	r4, sp, #56	@ 0x38
 800e41e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e422:	9600      	str	r6, [sp, #0]
 800e424:	9401      	str	r4, [sp, #4]
 800e426:	b29b      	uxth	r3, r3
 800e428:	4628      	mov	r0, r5
 800e42a:	f7ff ff3f 	bl	800e2ac <uxr_common_create_entity>
 800e42e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800e432:	bd70      	pop	{r4, r5, r6, pc}

0800e434 <uxr_buffer_create_datareader_bin>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e43c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e43e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e442:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800e446:	9105      	str	r1, [sp, #20]
 800e448:	4606      	mov	r6, r0
 800e44a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800e44c:	4618      	mov	r0, r3
 800e44e:	2306      	movs	r3, #6
 800e450:	7123      	strb	r3, [r4, #4]
 800e452:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800e456:	2703      	movs	r7, #3
 800e458:	f000 f948 	bl	800e6ec <uxr_object_id_to_raw>
 800e45c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800e45e:	7227      	strb	r7, [r4, #8]
 800e460:	a90e      	add	r1, sp, #56	@ 0x38
 800e462:	f000 f943 	bl	800e6ec <uxr_object_id_to_raw>
 800e466:	2300      	movs	r3, #0
 800e468:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e46c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800e470:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800e474:	3d00      	subs	r5, #0
 800e476:	bf18      	it	ne
 800e478:	2501      	movne	r5, #1
 800e47a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e47e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e482:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e486:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e48a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e48e:	2301      	movs	r3, #1
 800e490:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e494:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e498:	bb8a      	cbnz	r2, 800e4fe <uxr_buffer_create_datareader_bin+0xca>
 800e49a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e49e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e4a2:	f04f 0c13 	mov.w	ip, #19
 800e4a6:	250b      	movs	r5, #11
 800e4a8:	2221      	movs	r2, #33	@ 0x21
 800e4aa:	2111      	movs	r1, #17
 800e4ac:	2009      	movs	r0, #9
 800e4ae:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800e4b2:	b923      	cbnz	r3, 800e4be <uxr_buffer_create_datareader_bin+0x8a>
 800e4b4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e4b8:	4672      	mov	r2, lr
 800e4ba:	4661      	mov	r1, ip
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d025      	beq.n	800e512 <uxr_buffer_create_datareader_bin+0xde>
 800e4c6:	2b03      	cmp	r3, #3
 800e4c8:	d029      	beq.n	800e51e <uxr_buffer_create_datareader_bin+0xea>
 800e4ca:	b32b      	cbz	r3, 800e518 <uxr_buffer_create_datareader_bin+0xe4>
 800e4cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4d0:	a923      	add	r1, sp, #140	@ 0x8c
 800e4d2:	a806      	add	r0, sp, #24
 800e4d4:	f7f9 fe04 	bl	80080e0 <ucdr_init_buffer>
 800e4d8:	a90e      	add	r1, sp, #56	@ 0x38
 800e4da:	a806      	add	r0, sp, #24
 800e4dc:	f002 fcc6 	bl	8010e6c <uxr_serialize_OBJK_DataReader_Binary>
 800e4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4e2:	f8cd 8000 	str.w	r8, [sp]
 800e4e6:	9401      	str	r4, [sp, #4]
 800e4e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e4ec:	60e3      	str	r3, [r4, #12]
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	f7ff fedb 	bl	800e2ac <uxr_common_create_entity>
 800e4f6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4fe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e502:	f04f 0c12 	mov.w	ip, #18
 800e506:	250a      	movs	r5, #10
 800e508:	2220      	movs	r2, #32
 800e50a:	2110      	movs	r1, #16
 800e50c:	2008      	movs	r0, #8
 800e50e:	2702      	movs	r7, #2
 800e510:	e7cd      	b.n	800e4ae <uxr_buffer_create_datareader_bin+0x7a>
 800e512:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e516:	e7d9      	b.n	800e4cc <uxr_buffer_create_datareader_bin+0x98>
 800e518:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e51c:	e7d6      	b.n	800e4cc <uxr_buffer_create_datareader_bin+0x98>
 800e51e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e522:	e7d3      	b.n	800e4cc <uxr_buffer_create_datareader_bin+0x98>

0800e524 <get_custom_error>:
 800e524:	4b01      	ldr	r3, [pc, #4]	@ (800e52c <get_custom_error+0x8>)
 800e526:	7818      	ldrb	r0, [r3, #0]
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	2000da0c 	.word	0x2000da0c

0800e530 <recv_custom_msg>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	4693      	mov	fp, r2
 800e536:	b089      	sub	sp, #36	@ 0x24
 800e538:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	468a      	mov	sl, r1
 800e540:	2100      	movs	r1, #0
 800e542:	4604      	mov	r4, r0
 800e544:	f88d 101e 	strb.w	r1, [sp, #30]
 800e548:	b322      	cbz	r2, 800e594 <recv_custom_msg+0x64>
 800e54a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e54e:	f10d 081f 	add.w	r8, sp, #31
 800e552:	af05      	add	r7, sp, #20
 800e554:	f10d 061e 	add.w	r6, sp, #30
 800e558:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e55c:	e002      	b.n	800e564 <recv_custom_msg+0x34>
 800e55e:	9b05      	ldr	r3, [sp, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	dd0f      	ble.n	800e584 <recv_custom_msg+0x54>
 800e564:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e568:	4623      	mov	r3, r4
 800e56a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e56e:	e9cd 5600 	strd	r5, r6, [sp]
 800e572:	4622      	mov	r2, r4
 800e574:	4648      	mov	r0, r9
 800e576:	f001 fc89 	bl	800fe8c <uxr_read_framed_msg>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d0ef      	beq.n	800e55e <recv_custom_msg+0x2e>
 800e57e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e582:	b1b3      	cbz	r3, 800e5b2 <recv_custom_msg+0x82>
 800e584:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c4 <recv_custom_msg+0x94>)
 800e586:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	2000      	movs	r0, #0
 800e58e:	b009      	add	sp, #36	@ 0x24
 800e590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e594:	f10d 021f 	add.w	r2, sp, #31
 800e598:	9200      	str	r2, [sp, #0]
 800e59a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e59e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5a2:	4601      	mov	r1, r0
 800e5a4:	47a8      	blx	r5
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d0ec      	beq.n	800e584 <recv_custom_msg+0x54>
 800e5aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1e8      	bne.n	800e584 <recv_custom_msg+0x54>
 800e5b2:	f8cb 0000 	str.w	r0, [fp]
 800e5b6:	2001      	movs	r0, #1
 800e5b8:	f8ca 4000 	str.w	r4, [sl]
 800e5bc:	b009      	add	sp, #36	@ 0x24
 800e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c2:	bf00      	nop
 800e5c4:	2000da0c 	.word	0x2000da0c

0800e5c8 <send_custom_msg>:
 800e5c8:	b530      	push	{r4, r5, lr}
 800e5ca:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	4615      	mov	r5, r2
 800e5d2:	b974      	cbnz	r4, 800e5f2 <send_custom_msg+0x2a>
 800e5d4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e5d8:	f10d 0317 	add.w	r3, sp, #23
 800e5dc:	47a0      	blx	r4
 800e5de:	b108      	cbz	r0, 800e5e4 <send_custom_msg+0x1c>
 800e5e0:	42a8      	cmp	r0, r5
 800e5e2:	d015      	beq.n	800e610 <send_custom_msg+0x48>
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e618 <send_custom_msg+0x50>)
 800e5e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e5ea:	701a      	strb	r2, [r3, #0]
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	b007      	add	sp, #28
 800e5f0:	bd30      	pop	{r4, r5, pc}
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f10d 0117 	add.w	r1, sp, #23
 800e5fa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e5fe:	4602      	mov	r2, r0
 800e600:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e604:	9500      	str	r5, [sp, #0]
 800e606:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e60a:	f001 fa47 	bl	800fa9c <uxr_write_framed_msg>
 800e60e:	e7e6      	b.n	800e5de <send_custom_msg+0x16>
 800e610:	2001      	movs	r0, #1
 800e612:	b007      	add	sp, #28
 800e614:	bd30      	pop	{r4, r5, pc}
 800e616:	bf00      	nop
 800e618:	2000da0c 	.word	0x2000da0c

0800e61c <uxr_set_custom_transport_callbacks>:
 800e61c:	b410      	push	{r4}
 800e61e:	9c01      	ldr	r4, [sp, #4]
 800e620:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e624:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e628:	9b02      	ldr	r3, [sp, #8]
 800e62a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e632:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e636:	4770      	bx	lr

0800e638 <uxr_init_custom_transport>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e63e:	b303      	cbz	r3, 800e682 <uxr_init_custom_transport+0x4a>
 800e640:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e644:	4604      	mov	r4, r0
 800e646:	b1e2      	cbz	r2, 800e682 <uxr_init_custom_transport+0x4a>
 800e648:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e64c:	b1ca      	cbz	r2, 800e682 <uxr_init_custom_transport+0x4a>
 800e64e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e652:	b1b2      	cbz	r2, 800e682 <uxr_init_custom_transport+0x4a>
 800e654:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e658:	4798      	blx	r3
 800e65a:	4605      	mov	r5, r0
 800e65c:	b188      	cbz	r0, 800e682 <uxr_init_custom_transport+0x4a>
 800e65e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e662:	b98b      	cbnz	r3, 800e688 <uxr_init_custom_transport+0x50>
 800e664:	490b      	ldr	r1, [pc, #44]	@ (800e694 <uxr_init_custom_transport+0x5c>)
 800e666:	4b0c      	ldr	r3, [pc, #48]	@ (800e698 <uxr_init_custom_transport+0x60>)
 800e668:	4a0c      	ldr	r2, [pc, #48]	@ (800e69c <uxr_init_custom_transport+0x64>)
 800e66a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e672:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e676:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e67a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e67e:	4628      	mov	r0, r5
 800e680:	bd38      	pop	{r3, r4, r5, pc}
 800e682:	2500      	movs	r5, #0
 800e684:	4628      	mov	r0, r5
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	2100      	movs	r1, #0
 800e68a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e68e:	f001 f9ff 	bl	800fa90 <uxr_init_framing_io>
 800e692:	e7e7      	b.n	800e664 <uxr_init_custom_transport+0x2c>
 800e694:	0800e5c9 	.word	0x0800e5c9
 800e698:	0800e531 	.word	0x0800e531
 800e69c:	0800e525 	.word	0x0800e525

0800e6a0 <uxr_close_custom_transport>:
 800e6a0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e6a4:	4718      	bx	r3
 800e6a6:	bf00      	nop

0800e6a8 <uxr_object_id>:
 800e6a8:	b082      	sub	sp, #8
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	f88d 1006 	strb.w	r1, [sp, #6]
 800e6b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e6b4:	f360 030f 	bfi	r3, r0, #0, #16
 800e6b8:	f362 431f 	bfi	r3, r2, #16, #16
 800e6bc:	4618      	mov	r0, r3
 800e6be:	b002      	add	sp, #8
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop

0800e6c4 <uxr_object_id_from_raw>:
 800e6c4:	7843      	ldrb	r3, [r0, #1]
 800e6c6:	7801      	ldrb	r1, [r0, #0]
 800e6c8:	b082      	sub	sp, #8
 800e6ca:	f003 020f 	and.w	r2, r3, #15
 800e6ce:	f88d 2006 	strb.w	r2, [sp, #6]
 800e6d2:	091b      	lsrs	r3, r3, #4
 800e6d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e6d8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f363 000f 	bfi	r0, r3, #0, #16
 800e6e2:	f362 401f 	bfi	r0, r2, #16, #16
 800e6e6:	b002      	add	sp, #8
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop

0800e6ec <uxr_object_id_to_raw>:
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e6f8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e6fc:	f881 c000 	strb.w	ip, [r1]
 800e700:	7048      	strb	r0, [r1, #1]
 800e702:	b002      	add	sp, #8
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop

0800e708 <uxr_buffer_request_data>:
 800e708:	b530      	push	{r4, r5, lr}
 800e70a:	b095      	sub	sp, #84	@ 0x54
 800e70c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e710:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e712:	9303      	str	r3, [sp, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	2d00      	cmp	r5, #0
 800e718:	bf14      	ite	ne
 800e71a:	2101      	movne	r1, #1
 800e71c:	4611      	moveq	r1, r2
 800e71e:	4604      	mov	r4, r0
 800e720:	f88d 301c 	strb.w	r3, [sp, #28]
 800e724:	f88d 201d 	strb.w	r2, [sp, #29]
 800e728:	f88d 201e 	strb.w	r2, [sp, #30]
 800e72c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e730:	d021      	beq.n	800e776 <uxr_buffer_request_data+0x6e>
 800e732:	682a      	ldr	r2, [r5, #0]
 800e734:	686b      	ldr	r3, [r5, #4]
 800e736:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e73a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e73e:	2210      	movs	r2, #16
 800e740:	2308      	movs	r3, #8
 800e742:	2100      	movs	r1, #0
 800e744:	e9cd 3100 	strd	r3, r1, [sp]
 800e748:	4620      	mov	r0, r4
 800e74a:	9905      	ldr	r1, [sp, #20]
 800e74c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e74e:	f001 f839 	bl	800f7c4 <uxr_prepare_stream_to_write_submessage>
 800e752:	b918      	cbnz	r0, 800e75c <uxr_buffer_request_data+0x54>
 800e754:	4604      	mov	r4, r0
 800e756:	4620      	mov	r0, r4
 800e758:	b015      	add	sp, #84	@ 0x54
 800e75a:	bd30      	pop	{r4, r5, pc}
 800e75c:	9904      	ldr	r1, [sp, #16]
 800e75e:	aa06      	add	r2, sp, #24
 800e760:	4620      	mov	r0, r4
 800e762:	f001 f965 	bl	800fa30 <uxr_init_base_object_request>
 800e766:	a906      	add	r1, sp, #24
 800e768:	4604      	mov	r4, r0
 800e76a:	a80c      	add	r0, sp, #48	@ 0x30
 800e76c:	f002 fec2 	bl	80114f4 <uxr_serialize_READ_DATA_Payload>
 800e770:	4620      	mov	r0, r4
 800e772:	b015      	add	sp, #84	@ 0x54
 800e774:	bd30      	pop	{r4, r5, pc}
 800e776:	2208      	movs	r2, #8
 800e778:	e7e2      	b.n	800e740 <uxr_buffer_request_data+0x38>
 800e77a:	bf00      	nop

0800e77c <uxr_buffer_cancel_data>:
 800e77c:	b510      	push	{r4, lr}
 800e77e:	b094      	sub	sp, #80	@ 0x50
 800e780:	2300      	movs	r3, #0
 800e782:	9202      	str	r2, [sp, #8]
 800e784:	9205      	str	r2, [sp, #20]
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e78e:	f88d 301e 	strb.w	r3, [sp, #30]
 800e792:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e796:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e79a:	2308      	movs	r3, #8
 800e79c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	2210      	movs	r2, #16
 800e7a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	9103      	str	r1, [sp, #12]
 800e7aa:	f001 f80b 	bl	800f7c4 <uxr_prepare_stream_to_write_submessage>
 800e7ae:	b918      	cbnz	r0, 800e7b8 <uxr_buffer_cancel_data+0x3c>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	b014      	add	sp, #80	@ 0x50
 800e7b6:	bd10      	pop	{r4, pc}
 800e7b8:	9905      	ldr	r1, [sp, #20]
 800e7ba:	aa06      	add	r2, sp, #24
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f001 f937 	bl	800fa30 <uxr_init_base_object_request>
 800e7c2:	a906      	add	r1, sp, #24
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	a80c      	add	r0, sp, #48	@ 0x30
 800e7c8:	f002 fe94 	bl	80114f4 <uxr_serialize_READ_DATA_Payload>
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	b014      	add	sp, #80	@ 0x50
 800e7d0:	bd10      	pop	{r4, pc}
 800e7d2:	bf00      	nop

0800e7d4 <read_submessage_format>:
 800e7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7d8:	b095      	sub	sp, #84	@ 0x54
 800e7da:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e7de:	b113      	cbz	r3, 800e7e6 <read_submessage_format+0x12>
 800e7e0:	b015      	add	sp, #84	@ 0x54
 800e7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	4615      	mov	r5, r2
 800e7ea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e7f2:	9004      	str	r0, [sp, #16]
 800e7f4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e7f6:	9005      	str	r0, [sp, #20]
 800e7f8:	1a52      	subs	r2, r2, r1
 800e7fa:	a80c      	add	r0, sp, #48	@ 0x30
 800e7fc:	4699      	mov	r9, r3
 800e7fe:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e802:	f7f9 fc6d 	bl	80080e0 <ucdr_init_buffer>
 800e806:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e80a:	a80c      	add	r0, sp, #48	@ 0x30
 800e80c:	f7f9 fc3c 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 800e810:	69e2      	ldr	r2, [r4, #28]
 800e812:	b19a      	cbz	r2, 800e83c <read_submessage_format+0x68>
 800e814:	f1b8 0f07 	cmp.w	r8, #7
 800e818:	f882 9014 	strb.w	r9, [r2, #20]
 800e81c:	d040      	beq.n	800e8a0 <read_submessage_format+0xcc>
 800e81e:	f1b8 0f08 	cmp.w	r8, #8
 800e822:	d02e      	beq.n	800e882 <read_submessage_format+0xae>
 800e824:	f1b8 0f06 	cmp.w	r8, #6
 800e828:	d011      	beq.n	800e84e <read_submessage_format+0x7a>
 800e82a:	2301      	movs	r3, #1
 800e82c:	7513      	strb	r3, [r2, #20]
 800e82e:	4629      	mov	r1, r5
 800e830:	4620      	mov	r0, r4
 800e832:	f7f9 fca5 	bl	8008180 <ucdr_advance_buffer>
 800e836:	b015      	add	sp, #84	@ 0x54
 800e838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83c:	f1b8 0f07 	cmp.w	r8, #7
 800e840:	d02e      	beq.n	800e8a0 <read_submessage_format+0xcc>
 800e842:	f1b8 0f08 	cmp.w	r8, #8
 800e846:	d01c      	beq.n	800e882 <read_submessage_format+0xae>
 800e848:	f1b8 0f06 	cmp.w	r8, #6
 800e84c:	d1ef      	bne.n	800e82e <read_submessage_format+0x5a>
 800e84e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e852:	f1b8 0f00 	cmp.w	r8, #0
 800e856:	d011      	beq.n	800e87c <read_submessage_format+0xa8>
 800e858:	ab0c      	add	r3, sp, #48	@ 0x30
 800e85a:	e9cd 3500 	strd	r3, r5, [sp]
 800e85e:	2306      	movs	r3, #6
 800e860:	f88d 3016 	strb.w	r3, [sp, #22]
 800e864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e868:	9302      	str	r3, [sp, #8]
 800e86a:	4632      	mov	r2, r6
 800e86c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e870:	4638      	mov	r0, r7
 800e872:	47c0      	blx	r8
 800e874:	2301      	movs	r3, #1
 800e876:	69e2      	ldr	r2, [r4, #28]
 800e878:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e87c:	2a00      	cmp	r2, #0
 800e87e:	d1d4      	bne.n	800e82a <read_submessage_format+0x56>
 800e880:	e7d5      	b.n	800e82e <read_submessage_format+0x5a>
 800e882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0f8      	beq.n	800e87c <read_submessage_format+0xa8>
 800e88a:	a906      	add	r1, sp, #24
 800e88c:	a80c      	add	r0, sp, #48	@ 0x30
 800e88e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e892:	f002 fef5 	bl	8011680 <uxr_deserialize_SampleIdentity>
 800e896:	b9a0      	cbnz	r0, 800e8c2 <read_submessage_format+0xee>
 800e898:	69e2      	ldr	r2, [r4, #28]
 800e89a:	2a00      	cmp	r2, #0
 800e89c:	d1c5      	bne.n	800e82a <read_submessage_format+0x56>
 800e89e:	e7c6      	b.n	800e82e <read_submessage_format+0x5a>
 800e8a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e8a4:	b13b      	cbz	r3, 800e8b6 <read_submessage_format+0xe2>
 800e8a6:	a906      	add	r1, sp, #24
 800e8a8:	a80c      	add	r0, sp, #48	@ 0x30
 800e8aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e8ae:	f002 fbbb 	bl	8011028 <uxr_deserialize_BaseObjectRequest>
 800e8b2:	bb60      	cbnz	r0, 800e90e <read_submessage_format+0x13a>
 800e8b4:	69e2      	ldr	r2, [r4, #28]
 800e8b6:	68a3      	ldr	r3, [r4, #8]
 800e8b8:	442b      	add	r3, r5
 800e8ba:	60a3      	str	r3, [r4, #8]
 800e8bc:	2a00      	cmp	r2, #0
 800e8be:	d1b4      	bne.n	800e82a <read_submessage_format+0x56>
 800e8c0:	e7b5      	b.n	800e82e <read_submessage_format+0x5a>
 800e8c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e8c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8c8:	1a52      	subs	r2, r2, r1
 800e8ca:	eba8 0803 	sub.w	r8, r8, r3
 800e8ce:	a80c      	add	r0, sp, #48	@ 0x30
 800e8d0:	f7f9 fc06 	bl	80080e0 <ucdr_init_buffer>
 800e8d4:	44a8      	add	r8, r5
 800e8d6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e8da:	a80c      	add	r0, sp, #48	@ 0x30
 800e8dc:	f7f9 fbd4 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 800e8e0:	fa1f f888 	uxth.w	r8, r8
 800e8e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	f8cd 8004 	str.w	r8, [sp, #4]
 800e8ec:	2108      	movs	r1, #8
 800e8ee:	f88d 1016 	strb.w	r1, [sp, #22]
 800e8f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e8f6:	9102      	str	r1, [sp, #8]
 800e8f8:	ab06      	add	r3, sp, #24
 800e8fa:	4632      	mov	r2, r6
 800e8fc:	9905      	ldr	r1, [sp, #20]
 800e8fe:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e902:	4638      	mov	r0, r7
 800e904:	47b0      	blx	r6
 800e906:	2301      	movs	r3, #1
 800e908:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e90c:	e7c4      	b.n	800e898 <read_submessage_format+0xc4>
 800e90e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e912:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e914:	1a52      	subs	r2, r2, r1
 800e916:	a80c      	add	r0, sp, #48	@ 0x30
 800e918:	eba8 0803 	sub.w	r8, r8, r3
 800e91c:	f7f9 fbe0 	bl	80080e0 <ucdr_init_buffer>
 800e920:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e924:	a80c      	add	r0, sp, #48	@ 0x30
 800e926:	f7f9 fbaf 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 800e92a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e932:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e936:	44a8      	add	r8, r5
 800e938:	fa1f f888 	uxth.w	r8, r8
 800e93c:	f8cd 8004 	str.w	r8, [sp, #4]
 800e940:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e944:	2107      	movs	r1, #7
 800e946:	f88d 1016 	strb.w	r1, [sp, #22]
 800e94a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e94e:	9102      	str	r1, [sp, #8]
 800e950:	4632      	mov	r2, r6
 800e952:	b29b      	uxth	r3, r3
 800e954:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e958:	9905      	ldr	r1, [sp, #20]
 800e95a:	4638      	mov	r0, r7
 800e95c:	47b0      	blx	r6
 800e95e:	2301      	movs	r3, #1
 800e960:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e964:	e7a6      	b.n	800e8b4 <read_submessage_format+0xe0>
 800e966:	bf00      	nop

0800e968 <on_get_fragmentation_info>:
 800e968:	b500      	push	{lr}
 800e96a:	b08b      	sub	sp, #44	@ 0x2c
 800e96c:	4601      	mov	r1, r0
 800e96e:	2204      	movs	r2, #4
 800e970:	a802      	add	r0, sp, #8
 800e972:	f7f9 fbb5 	bl	80080e0 <ucdr_init_buffer>
 800e976:	f10d 0305 	add.w	r3, sp, #5
 800e97a:	f10d 0206 	add.w	r2, sp, #6
 800e97e:	a901      	add	r1, sp, #4
 800e980:	a802      	add	r0, sp, #8
 800e982:	f001 fe69 	bl	8010658 <uxr_read_submessage_header>
 800e986:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e98a:	2b0d      	cmp	r3, #13
 800e98c:	d003      	beq.n	800e996 <on_get_fragmentation_info+0x2e>
 800e98e:	2000      	movs	r0, #0
 800e990:	b00b      	add	sp, #44	@ 0x2c
 800e992:	f85d fb04 	ldr.w	pc, [sp], #4
 800e996:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e99a:	f013 0f02 	tst.w	r3, #2
 800e99e:	bf14      	ite	ne
 800e9a0:	2002      	movne	r0, #2
 800e9a2:	2001      	moveq	r0, #1
 800e9a4:	b00b      	add	sp, #44	@ 0x2c
 800e9a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9aa:	bf00      	nop

0800e9ac <read_submessage_get_info>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	2500      	movs	r5, #0
 800e9b0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e9ba:	460e      	mov	r6, r1
 800e9bc:	a810      	add	r0, sp, #64	@ 0x40
 800e9be:	4629      	mov	r1, r5
 800e9c0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e9c4:	f004 fe82 	bl	80136cc <memset>
 800e9c8:	a903      	add	r1, sp, #12
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f002 fcd4 	bl	8011378 <uxr_deserialize_GET_INFO_Payload>
 800e9d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e9d4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f001 f821 	bl	800fa20 <uxr_session_header_offset>
 800e9de:	462b      	mov	r3, r5
 800e9e0:	9000      	str	r0, [sp, #0]
 800e9e2:	220c      	movs	r2, #12
 800e9e4:	a905      	add	r1, sp, #20
 800e9e6:	a808      	add	r0, sp, #32
 800e9e8:	f7f9 fb68 	bl	80080bc <ucdr_init_buffer_origin_offset>
 800e9ec:	a910      	add	r1, sp, #64	@ 0x40
 800e9ee:	a808      	add	r0, sp, #32
 800e9f0:	f002 fd34 	bl	801145c <uxr_serialize_INFO_Payload>
 800e9f4:	9b08      	ldr	r3, [sp, #32]
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 ffba 	bl	800f974 <uxr_stamp_session_header>
 800ea00:	a808      	add	r0, sp, #32
 800ea02:	f7f9 fb99 	bl	8008138 <ucdr_buffer_length>
 800ea06:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea08:	4602      	mov	r2, r0
 800ea0a:	a905      	add	r1, sp, #20
 800ea0c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ea10:	47a0      	blx	r4
 800ea12:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ea16:	bd70      	pop	{r4, r5, r6, pc}

0800ea18 <write_submessage_acknack.isra.0>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	b092      	sub	sp, #72	@ 0x48
 800ea1c:	4605      	mov	r5, r0
 800ea1e:	460e      	mov	r6, r1
 800ea20:	4614      	mov	r4, r2
 800ea22:	f000 fffd 	bl	800fa20 <uxr_session_header_offset>
 800ea26:	a905      	add	r1, sp, #20
 800ea28:	9000      	str	r0, [sp, #0]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	a80a      	add	r0, sp, #40	@ 0x28
 800ea2e:	2211      	movs	r2, #17
 800ea30:	f7f9 fb44 	bl	80080bc <ucdr_init_buffer_origin_offset>
 800ea34:	2218      	movs	r2, #24
 800ea36:	fb02 5404 	mla	r4, r2, r4, r5
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2205      	movs	r2, #5
 800ea3e:	3450      	adds	r4, #80	@ 0x50
 800ea40:	210a      	movs	r1, #10
 800ea42:	a80a      	add	r0, sp, #40	@ 0x28
 800ea44:	f001 fdee 	bl	8010624 <uxr_buffer_submessage_header>
 800ea48:	a903      	add	r1, sp, #12
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f003 fdae 	bl	80125ac <uxr_compute_acknack>
 800ea50:	ba40      	rev16	r0, r0
 800ea52:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ea56:	a903      	add	r1, sp, #12
 800ea58:	a80a      	add	r0, sp, #40	@ 0x28
 800ea5a:	f88d 6010 	strb.w	r6, [sp, #16]
 800ea5e:	f002 fd6d 	bl	801153c <uxr_serialize_ACKNACK_Payload>
 800ea62:	2200      	movs	r2, #0
 800ea64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea66:	4611      	mov	r1, r2
 800ea68:	4628      	mov	r0, r5
 800ea6a:	f000 ff83 	bl	800f974 <uxr_stamp_session_header>
 800ea6e:	a80a      	add	r0, sp, #40	@ 0x28
 800ea70:	f7f9 fb62 	bl	8008138 <ucdr_buffer_length>
 800ea74:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ea76:	4602      	mov	r2, r0
 800ea78:	a905      	add	r1, sp, #20
 800ea7a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ea7e:	47a0      	blx	r4
 800ea80:	b012      	add	sp, #72	@ 0x48
 800ea82:	bd70      	pop	{r4, r5, r6, pc}
 800ea84:	0000      	movs	r0, r0
	...

0800ea88 <uxr_init_session>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800eac0 <uxr_init_session+0x38>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ea94:	4604      	mov	r4, r0
 800ea96:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ea9a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ea9e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800eaa2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800eaa6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800eaaa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800eaae:	2181      	movs	r1, #129	@ 0x81
 800eab0:	f000 fecc 	bl	800f84c <uxr_init_session_info>
 800eab4:	f104 0008 	add.w	r0, r4, #8
 800eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eabc:	f001 bcce 	b.w	801045c <uxr_init_stream_storage>
	...

0800eac8 <uxr_set_status_callback>:
 800eac8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop

0800ead0 <uxr_set_topic_callback>:
 800ead0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop

0800ead8 <uxr_set_request_callback>:
 800ead8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <uxr_set_reply_callback>:
 800eae0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop

0800eae8 <uxr_create_output_best_effort_stream>:
 800eae8:	b510      	push	{r4, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	e9cd 2100 	strd	r2, r1, [sp]
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	f000 ff95 	bl	800fa20 <uxr_session_header_offset>
 800eaf6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800eafa:	4603      	mov	r3, r0
 800eafc:	f104 0008 	add.w	r0, r4, #8
 800eb00:	b004      	add	sp, #16
 800eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb06:	f001 bcf3 	b.w	80104f0 <uxr_add_output_best_effort_buffer>
 800eb0a:	bf00      	nop

0800eb0c <uxr_create_output_reliable_stream>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800eb14:	4604      	mov	r4, r0
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	f000 ff82 	bl	800fa20 <uxr_session_header_offset>
 800eb1c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eb20:	9000      	str	r0, [sp, #0]
 800eb22:	9905      	ldr	r1, [sp, #20]
 800eb24:	f104 0008 	add.w	r0, r4, #8
 800eb28:	f001 fcf6 	bl	8010518 <uxr_add_output_reliable_buffer>
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	b2c3      	uxtb	r3, r0
 800eb30:	f363 0207 	bfi	r2, r3, #0, #8
 800eb34:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eb38:	f363 220f 	bfi	r2, r3, #8, #8
 800eb3c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eb40:	f363 4217 	bfi	r2, r3, #16, #8
 800eb44:	0e03      	lsrs	r3, r0, #24
 800eb46:	f363 621f 	bfi	r2, r3, #24, #8
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	b008      	add	sp, #32
 800eb4e:	bd10      	pop	{r4, pc}

0800eb50 <uxr_create_input_best_effort_stream>:
 800eb50:	b082      	sub	sp, #8
 800eb52:	3008      	adds	r0, #8
 800eb54:	b002      	add	sp, #8
 800eb56:	f001 bcf9 	b.w	801054c <uxr_add_input_best_effort_buffer>
 800eb5a:	bf00      	nop

0800eb5c <uxr_create_input_reliable_stream>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	4c0b      	ldr	r4, [pc, #44]	@ (800eb90 <uxr_create_input_reliable_stream+0x34>)
 800eb62:	9400      	str	r4, [sp, #0]
 800eb64:	3008      	adds	r0, #8
 800eb66:	f001 fd07 	bl	8010578 <uxr_add_input_reliable_buffer>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	b2c3      	uxtb	r3, r0
 800eb6e:	f363 0207 	bfi	r2, r3, #0, #8
 800eb72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eb76:	f363 220f 	bfi	r2, r3, #8, #8
 800eb7a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eb7e:	f363 4217 	bfi	r2, r3, #16, #8
 800eb82:	0e03      	lsrs	r3, r0, #24
 800eb84:	f363 621f 	bfi	r2, r3, #24, #8
 800eb88:	4610      	mov	r0, r2
 800eb8a:	b004      	add	sp, #16
 800eb8c:	bd10      	pop	{r4, pc}
 800eb8e:	bf00      	nop
 800eb90:	0800e969 	.word	0x0800e969

0800eb94 <uxr_epoch_nanos>:
 800eb94:	b510      	push	{r4, lr}
 800eb96:	4604      	mov	r4, r0
 800eb98:	f001 fda4 	bl	80106e4 <uxr_nanos>
 800eb9c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800eba0:	1ac0      	subs	r0, r0, r3
 800eba2:	eb61 0102 	sbc.w	r1, r1, r2
 800eba6:	bd10      	pop	{r4, pc}

0800eba8 <uxr_flash_output_streams>:
 800eba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebac:	7e03      	ldrb	r3, [r0, #24]
 800ebae:	b084      	sub	sp, #16
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d035      	beq.n	800ec22 <uxr_flash_output_streams+0x7a>
 800ebb6:	f04f 0900 	mov.w	r9, #0
 800ebba:	4648      	mov	r0, r9
 800ebbc:	f10d 0802 	add.w	r8, sp, #2
 800ebc0:	af03      	add	r7, sp, #12
 800ebc2:	ae02      	add	r6, sp, #8
 800ebc4:	e006      	b.n	800ebd4 <uxr_flash_output_streams+0x2c>
 800ebc6:	7e23      	ldrb	r3, [r4, #24]
 800ebc8:	f109 0901 	add.w	r9, r9, #1
 800ebcc:	fa5f f089 	uxtb.w	r0, r9
 800ebd0:	4283      	cmp	r3, r0
 800ebd2:	d926      	bls.n	800ec22 <uxr_flash_output_streams+0x7a>
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ebdc:	f001 fbea 	bl	80103b4 <uxr_stream_id>
 800ebe0:	3508      	adds	r5, #8
 800ebe2:	4684      	mov	ip, r0
 800ebe4:	4643      	mov	r3, r8
 800ebe6:	463a      	mov	r2, r7
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4628      	mov	r0, r5
 800ebec:	f8cd c004 	str.w	ip, [sp, #4]
 800ebf0:	f003 fd62 	bl	80126b8 <uxr_prepare_best_effort_buffer_to_send>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d0e6      	beq.n	800ebc6 <uxr_flash_output_streams+0x1e>
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ebfe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 feb6 	bl	800f974 <uxr_stamp_session_header>
 800ec08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec0a:	9a03      	ldr	r2, [sp, #12]
 800ec0c:	685d      	ldr	r5, [r3, #4]
 800ec0e:	6818      	ldr	r0, [r3, #0]
 800ec10:	9902      	ldr	r1, [sp, #8]
 800ec12:	47a8      	blx	r5
 800ec14:	f109 0901 	add.w	r9, r9, #1
 800ec18:	7e23      	ldrb	r3, [r4, #24]
 800ec1a:	fa5f f089 	uxtb.w	r0, r9
 800ec1e:	4283      	cmp	r3, r0
 800ec20:	d8d8      	bhi.n	800ebd4 <uxr_flash_output_streams+0x2c>
 800ec22:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ec26:	b38b      	cbz	r3, 800ec8c <uxr_flash_output_streams+0xe4>
 800ec28:	f04f 0900 	mov.w	r9, #0
 800ec2c:	f10d 0802 	add.w	r8, sp, #2
 800ec30:	af03      	add	r7, sp, #12
 800ec32:	ae02      	add	r6, sp, #8
 800ec34:	4648      	mov	r0, r9
 800ec36:	2201      	movs	r2, #1
 800ec38:	2102      	movs	r1, #2
 800ec3a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ec3e:	f001 fbb9 	bl	80103b4 <uxr_stream_id>
 800ec42:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ec46:	3520      	adds	r5, #32
 800ec48:	9001      	str	r0, [sp, #4]
 800ec4a:	e00d      	b.n	800ec68 <uxr_flash_output_streams+0xc0>
 800ec4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ec50:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec54:	9b02      	ldr	r3, [sp, #8]
 800ec56:	f000 fe8d 	bl	800f974 <uxr_stamp_session_header>
 800ec5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec5c:	9a03      	ldr	r2, [sp, #12]
 800ec5e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ec62:	9902      	ldr	r1, [sp, #8]
 800ec64:	6818      	ldr	r0, [r3, #0]
 800ec66:	47d0      	blx	sl
 800ec68:	4643      	mov	r3, r8
 800ec6a:	463a      	mov	r2, r7
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f003 ff40 	bl	8012af4 <uxr_prepare_next_reliable_buffer_to_send>
 800ec74:	4603      	mov	r3, r0
 800ec76:	4620      	mov	r0, r4
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1e7      	bne.n	800ec4c <uxr_flash_output_streams+0xa4>
 800ec7c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ec80:	f109 0901 	add.w	r9, r9, #1
 800ec84:	fa5f f089 	uxtb.w	r0, r9
 800ec88:	4283      	cmp	r3, r0
 800ec8a:	d8d4      	bhi.n	800ec36 <uxr_flash_output_streams+0x8e>
 800ec8c:	b004      	add	sp, #16
 800ec8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec92:	bf00      	nop

0800ec94 <read_submessage_info>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	460d      	mov	r5, r1
 800ec9a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ec9e:	4669      	mov	r1, sp
 800eca0:	4607      	mov	r7, r0
 800eca2:	4628      	mov	r0, r5
 800eca4:	f002 fa76 	bl	8011194 <uxr_deserialize_BaseObjectReply>
 800eca8:	a902      	add	r1, sp, #8
 800ecaa:	4604      	mov	r4, r0
 800ecac:	4628      	mov	r0, r5
 800ecae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ecb2:	f7fe fb6b 	bl	800d38c <ucdr_deserialize_bool>
 800ecb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ecba:	4004      	ands	r4, r0
 800ecbc:	b2e4      	uxtb	r4, r4
 800ecbe:	b95b      	cbnz	r3, 800ecd8 <read_submessage_info+0x44>
 800ecc0:	a987      	add	r1, sp, #540	@ 0x21c
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f7fe fb62 	bl	800d38c <ucdr_deserialize_bool>
 800ecc8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800eccc:	4606      	mov	r6, r0
 800ecce:	b94b      	cbnz	r3, 800ece4 <read_submessage_info+0x50>
 800ecd0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	a903      	add	r1, sp, #12
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f002 f902 	bl	8010ee4 <uxr_deserialize_ObjectVariant>
 800ece0:	4004      	ands	r4, r0
 800ece2:	e7ed      	b.n	800ecc0 <read_submessage_info+0x2c>
 800ece4:	a988      	add	r1, sp, #544	@ 0x220
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7fe fb7e 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 800ecec:	4234      	tst	r4, r6
 800ecee:	d0ef      	beq.n	800ecd0 <read_submessage_info+0x3c>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d0ed      	beq.n	800ecd0 <read_submessage_info+0x3c>
 800ecf4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ecf8:	2b0d      	cmp	r3, #13
 800ecfa:	d1e9      	bne.n	800ecd0 <read_submessage_info+0x3c>
 800ecfc:	a98a      	add	r1, sp, #552	@ 0x228
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f7ff f918 	bl	800df34 <ucdr_deserialize_int16_t>
 800ed04:	b140      	cbz	r0, 800ed18 <read_submessage_info+0x84>
 800ed06:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	dd07      	ble.n	800ed1e <read_submessage_info+0x8a>
 800ed0e:	f1b8 0f00 	cmp.w	r8, #0
 800ed12:	bf14      	ite	ne
 800ed14:	2001      	movne	r0, #1
 800ed16:	2002      	moveq	r0, #2
 800ed18:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ed1c:	e7d8      	b.n	800ecd0 <read_submessage_info+0x3c>
 800ed1e:	2000      	movs	r0, #0
 800ed20:	e7fa      	b.n	800ed18 <read_submessage_info+0x84>
 800ed22:	bf00      	nop

0800ed24 <read_submessage_list>:
 800ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	b097      	sub	sp, #92	@ 0x5c
 800ed2a:	4ec1      	ldr	r6, [pc, #772]	@ (800f030 <read_submessage_list+0x30c>)
 800ed2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed2e:	4604      	mov	r4, r0
 800ed30:	460d      	mov	r5, r1
 800ed32:	f04f 0801 	mov.w	r8, #1
 800ed36:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ed3a:	aa0c      	add	r2, sp, #48	@ 0x30
 800ed3c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ed40:	4628      	mov	r0, r5
 800ed42:	f001 fc89 	bl	8010658 <uxr_read_submessage_header>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	f000 813e 	beq.w	800efc8 <read_submessage_list+0x2a4>
 800ed4c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ed50:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ed54:	3b02      	subs	r3, #2
 800ed56:	2b0d      	cmp	r3, #13
 800ed58:	d8ed      	bhi.n	800ed36 <read_submessage_list+0x12>
 800ed5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ed60 <read_submessage_list+0x3c>)
 800ed5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed60:	0800efbf 	.word	0x0800efbf
 800ed64:	0800ed37 	.word	0x0800ed37
 800ed68:	0800efaf 	.word	0x0800efaf
 800ed6c:	0800ef4d 	.word	0x0800ef4d
 800ed70:	0800ef43 	.word	0x0800ef43
 800ed74:	0800ed37 	.word	0x0800ed37
 800ed78:	0800ed37 	.word	0x0800ed37
 800ed7c:	0800eea3 	.word	0x0800eea3
 800ed80:	0800ee33 	.word	0x0800ee33
 800ed84:	0800edf3 	.word	0x0800edf3
 800ed88:	0800ed37 	.word	0x0800ed37
 800ed8c:	0800ed37 	.word	0x0800ed37
 800ed90:	0800ed37 	.word	0x0800ed37
 800ed94:	0800ed99 	.word	0x0800ed99
 800ed98:	a910      	add	r1, sp, #64	@ 0x40
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f002 fc1e 	bl	80115dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800eda0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800eda4:	f1b9 0f00 	cmp.w	r9, #0
 800eda8:	f000 8116 	beq.w	800efd8 <read_submessage_list+0x2b4>
 800edac:	f001 fc9a 	bl	80106e4 <uxr_nanos>
 800edb0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800edb8:	2100      	movs	r1, #0
 800edba:	468c      	mov	ip, r1
 800edbc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800edc0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800edc4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800edc6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800edc8:	468c      	mov	ip, r1
 800edca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800edce:	46e2      	mov	sl, ip
 800edd0:	46bc      	mov	ip, r7
 800edd2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800edd6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800edda:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800edde:	e9cd 7100 	strd	r7, r1, [sp]
 800ede2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ede6:	9106      	str	r1, [sp, #24]
 800ede8:	4620      	mov	r0, r4
 800edea:	47c8      	blx	r9
 800edec:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800edf0:	e7a1      	b.n	800ed36 <read_submessage_list+0x12>
 800edf2:	a910      	add	r1, sp, #64	@ 0x40
 800edf4:	4628      	mov	r0, r5
 800edf6:	f002 fbdf 	bl	80115b8 <uxr_deserialize_HEARTBEAT_Payload>
 800edfa:	2100      	movs	r1, #0
 800edfc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ee00:	f001 fb02 	bl	8010408 <uxr_stream_id_from_raw>
 800ee04:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ee08:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	f104 0008 	add.w	r0, r4, #8
 800ee10:	f001 fbe8 	bl	80105e4 <uxr_get_input_reliable_stream>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d08e      	beq.n	800ed36 <read_submessage_list+0x12>
 800ee18:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ee1c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ee20:	f003 fbb8 	bl	8012594 <uxr_process_heartbeat>
 800ee24:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ee28:	463a      	mov	r2, r7
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f7ff fdf4 	bl	800ea18 <write_submessage_acknack.isra.0>
 800ee30:	e781      	b.n	800ed36 <read_submessage_list+0x12>
 800ee32:	a910      	add	r1, sp, #64	@ 0x40
 800ee34:	4628      	mov	r0, r5
 800ee36:	f002 fb97 	bl	8011568 <uxr_deserialize_ACKNACK_Payload>
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ee40:	f001 fae2 	bl	8010408 <uxr_stream_id_from_raw>
 800ee44:	900d      	str	r0, [sp, #52]	@ 0x34
 800ee46:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ee4a:	f104 0008 	add.w	r0, r4, #8
 800ee4e:	f001 fbb5 	bl	80105bc <uxr_get_output_reliable_stream>
 800ee52:	4607      	mov	r7, r0
 800ee54:	2800      	cmp	r0, #0
 800ee56:	f43f af6e 	beq.w	800ed36 <read_submessage_list+0x12>
 800ee5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ee5e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ee62:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ee66:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ee6a:	b289      	uxth	r1, r1
 800ee6c:	f003 feec 	bl	8012c48 <uxr_process_acknack>
 800ee70:	4638      	mov	r0, r7
 800ee72:	f003 fea9 	bl	8012bc8 <uxr_begin_output_nack_buffer_it>
 800ee76:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ee7a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ee7e:	e006      	b.n	800ee8e <read_submessage_list+0x16a>
 800ee80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ee82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ee84:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ee88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	47c8      	blx	r9
 800ee8e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ee92:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ee94:	4651      	mov	r1, sl
 800ee96:	4638      	mov	r0, r7
 800ee98:	f003 fe98 	bl	8012bcc <uxr_next_reliable_nack_buffer_to_send>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d1ef      	bne.n	800ee80 <read_submessage_list+0x15c>
 800eea0:	e749      	b.n	800ed36 <read_submessage_list+0x12>
 800eea2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800eea6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800eeaa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800eeae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800eeb2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800eeb6:	4651      	mov	r1, sl
 800eeb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800eebc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800eec0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800eec4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800eec8:	4628      	mov	r0, r5
 800eeca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800eece:	f002 f8ab 	bl	8011028 <uxr_deserialize_BaseObjectRequest>
 800eed2:	4650      	mov	r0, sl
 800eed4:	a90f      	add	r1, sp, #60	@ 0x3c
 800eed6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800eeda:	f000 fdc7 	bl	800fa6c <uxr_parse_base_object_request>
 800eede:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800eee2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eee4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800eee8:	9110      	str	r1, [sp, #64]	@ 0x40
 800eeea:	3f04      	subs	r7, #4
 800eeec:	f009 090e 	and.w	r9, r9, #14
 800eef0:	b2bf      	uxth	r7, r7
 800eef2:	f1bb 0f00 	cmp.w	fp, #0
 800eef6:	d006      	beq.n	800ef06 <read_submessage_list+0x1e2>
 800eef8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	4652      	mov	r2, sl
 800ef00:	2300      	movs	r3, #0
 800ef02:	4620      	mov	r0, r4
 800ef04:	47d8      	blx	fp
 800ef06:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ef08:	b16a      	cbz	r2, 800ef26 <read_submessage_list+0x202>
 800ef0a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	3802      	subs	r0, #2
 800ef10:	e002      	b.n	800ef18 <read_submessage_list+0x1f4>
 800ef12:	3101      	adds	r1, #1
 800ef14:	4291      	cmp	r1, r2
 800ef16:	d006      	beq.n	800ef26 <read_submessage_list+0x202>
 800ef18:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ef1c:	4553      	cmp	r3, sl
 800ef1e:	d1f8      	bne.n	800ef12 <read_submessage_list+0x1ee>
 800ef20:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ef22:	2200      	movs	r2, #0
 800ef24:	545a      	strb	r2, [r3, r1]
 800ef26:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ef2a:	9102      	str	r1, [sp, #8]
 800ef2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef2e:	9101      	str	r1, [sp, #4]
 800ef30:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ef32:	9100      	str	r1, [sp, #0]
 800ef34:	464b      	mov	r3, r9
 800ef36:	463a      	mov	r2, r7
 800ef38:	4629      	mov	r1, r5
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f7ff fc4a 	bl	800e7d4 <read_submessage_format>
 800ef40:	e6f9      	b.n	800ed36 <read_submessage_list+0x12>
 800ef42:	4629      	mov	r1, r5
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7ff fea5 	bl	800ec94 <read_submessage_info>
 800ef4a:	e6f4      	b.n	800ed36 <read_submessage_list+0x12>
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	d03e      	beq.n	800efce <read_submessage_list+0x2aa>
 800ef50:	a910      	add	r1, sp, #64	@ 0x40
 800ef52:	4628      	mov	r0, r5
 800ef54:	f002 fa64 	bl	8011420 <uxr_deserialize_STATUS_Payload>
 800ef58:	a90e      	add	r1, sp, #56	@ 0x38
 800ef5a:	aa0d      	add	r2, sp, #52	@ 0x34
 800ef5c:	a810      	add	r0, sp, #64	@ 0x40
 800ef5e:	f000 fd85 	bl	800fa6c <uxr_parse_base_object_request>
 800ef62:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ef66:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef68:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ef6c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ef70:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ef72:	f1ba 0f00 	cmp.w	sl, #0
 800ef76:	d006      	beq.n	800ef86 <read_submessage_list+0x262>
 800ef78:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	463a      	mov	r2, r7
 800ef80:	464b      	mov	r3, r9
 800ef82:	4620      	mov	r0, r4
 800ef84:	47d0      	blx	sl
 800ef86:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	f43f aed4 	beq.w	800ed36 <read_submessage_list+0x12>
 800ef8e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ef90:	2100      	movs	r1, #0
 800ef92:	3802      	subs	r0, #2
 800ef94:	e003      	b.n	800ef9e <read_submessage_list+0x27a>
 800ef96:	3101      	adds	r1, #1
 800ef98:	4291      	cmp	r1, r2
 800ef9a:	f43f aecc 	beq.w	800ed36 <read_submessage_list+0x12>
 800ef9e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800efa2:	42bb      	cmp	r3, r7
 800efa4:	d1f7      	bne.n	800ef96 <read_submessage_list+0x272>
 800efa6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800efa8:	f803 9001 	strb.w	r9, [r3, r1]
 800efac:	e6c3      	b.n	800ed36 <read_submessage_list+0x12>
 800efae:	2a00      	cmp	r2, #0
 800efb0:	f47f aec1 	bne.w	800ed36 <read_submessage_list+0x12>
 800efb4:	4629      	mov	r1, r5
 800efb6:	4620      	mov	r0, r4
 800efb8:	f000 fc9e 	bl	800f8f8 <uxr_read_create_session_status>
 800efbc:	e6bb      	b.n	800ed36 <read_submessage_list+0x12>
 800efbe:	4629      	mov	r1, r5
 800efc0:	4620      	mov	r0, r4
 800efc2:	f7ff fcf3 	bl	800e9ac <read_submessage_get_info>
 800efc6:	e6b6      	b.n	800ed36 <read_submessage_list+0x12>
 800efc8:	b017      	add	sp, #92	@ 0x5c
 800efca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efce:	4629      	mov	r1, r5
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 fc9d 	bl	800f910 <uxr_read_delete_session_status>
 800efd6:	e6ae      	b.n	800ed36 <read_submessage_list+0x12>
 800efd8:	f001 fb84 	bl	80106e4 <uxr_nanos>
 800efdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800efde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800efe0:	464f      	mov	r7, r9
 800efe2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800efe6:	1812      	adds	r2, r2, r0
 800efe8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800efec:	eb47 0101 	adc.w	r1, r7, r1
 800eff0:	464f      	mov	r7, r9
 800eff2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800eff6:	463b      	mov	r3, r7
 800eff8:	4684      	mov	ip, r0
 800effa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800effe:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f002:	eb1c 0c00 	adds.w	ip, ip, r0
 800f006:	464f      	mov	r7, r9
 800f008:	eb43 0307 	adc.w	r3, r3, r7
 800f00c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f010:	eb61 0303 	sbc.w	r3, r1, r3
 800f014:	0fda      	lsrs	r2, r3, #31
 800f016:	eb12 020c 	adds.w	r2, r2, ip
 800f01a:	f143 0300 	adc.w	r3, r3, #0
 800f01e:	0852      	lsrs	r2, r2, #1
 800f020:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f024:	105b      	asrs	r3, r3, #1
 800f026:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f02a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f02e:	e6dd      	b.n	800edec <read_submessage_list+0xc8>
 800f030:	3b9aca00 	.word	0x3b9aca00

0800f034 <listen_message_reliably>:
 800f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f038:	1e0b      	subs	r3, r1, #0
 800f03a:	b09d      	sub	sp, #116	@ 0x74
 800f03c:	bfb8      	it	lt
 800f03e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f042:	4680      	mov	r8, r0
 800f044:	9305      	str	r3, [sp, #20]
 800f046:	f001 fb33 	bl	80106b0 <uxr_millis>
 800f04a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f04e:	4681      	mov	r9, r0
 800f050:	2a00      	cmp	r2, #0
 800f052:	f000 80a1 	beq.w	800f198 <listen_message_reliably+0x164>
 800f056:	2600      	movs	r6, #0
 800f058:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f05c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f060:	9303      	str	r3, [sp, #12]
 800f062:	4630      	mov	r0, r6
 800f064:	460f      	mov	r7, r1
 800f066:	e00f      	b.n	800f088 <listen_message_reliably+0x54>
 800f068:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f06c:	9903      	ldr	r1, [sp, #12]
 800f06e:	455a      	cmp	r2, fp
 800f070:	f106 0601 	add.w	r6, r6, #1
 800f074:	eb73 0101 	sbcs.w	r1, r3, r1
 800f078:	b2f0      	uxtb	r0, r6
 800f07a:	da01      	bge.n	800f080 <listen_message_reliably+0x4c>
 800f07c:	4693      	mov	fp, r2
 800f07e:	9303      	str	r3, [sp, #12]
 800f080:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f084:	4283      	cmp	r3, r0
 800f086:	d960      	bls.n	800f14a <listen_message_reliably+0x116>
 800f088:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f08c:	2102      	movs	r1, #2
 800f08e:	2201      	movs	r2, #1
 800f090:	f001 f990 	bl	80103b4 <uxr_stream_id>
 800f094:	00e4      	lsls	r4, r4, #3
 800f096:	f104 0520 	add.w	r5, r4, #32
 800f09a:	4445      	add	r5, r8
 800f09c:	4601      	mov	r1, r0
 800f09e:	463b      	mov	r3, r7
 800f0a0:	464a      	mov	r2, r9
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0a6:	f003 fd65 	bl	8012b74 <uxr_update_output_stream_heartbeat_timestamp>
 800f0aa:	eb08 0304 	add.w	r3, r8, r4
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d0da      	beq.n	800f068 <listen_message_reliably+0x34>
 800f0b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f0b6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f0ba:	9304      	str	r3, [sp, #16]
 800f0bc:	4640      	mov	r0, r8
 800f0be:	f000 fcaf 	bl	800fa20 <uxr_session_header_offset>
 800f0c2:	3501      	adds	r5, #1
 800f0c4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f0c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f0cc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2211      	movs	r2, #17
 800f0d4:	9000      	str	r0, [sp, #0]
 800f0d6:	a90c      	add	r1, sp, #48	@ 0x30
 800f0d8:	4650      	mov	r0, sl
 800f0da:	f7f8 ffef 	bl	80080bc <ucdr_init_buffer_origin_offset>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	2205      	movs	r2, #5
 800f0e2:	210b      	movs	r1, #11
 800f0e4:	4650      	mov	r0, sl
 800f0e6:	f001 fa9d 	bl	8010624 <uxr_buffer_submessage_header>
 800f0ea:	8968      	ldrh	r0, [r5, #10]
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	f003 fde3 	bl	8012cb8 <uxr_seq_num_add>
 800f0f2:	892b      	ldrh	r3, [r5, #8]
 800f0f4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	9b04      	ldr	r3, [sp, #16]
 800f0fc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f100:	a90a      	add	r1, sp, #40	@ 0x28
 800f102:	4650      	mov	r0, sl
 800f104:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f108:	f002 fa42 	bl	8011590 <uxr_serialize_HEARTBEAT_Payload>
 800f10c:	2200      	movs	r2, #0
 800f10e:	4611      	mov	r1, r2
 800f110:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f112:	4640      	mov	r0, r8
 800f114:	f000 fc2e 	bl	800f974 <uxr_stamp_session_header>
 800f118:	4650      	mov	r0, sl
 800f11a:	f7f9 f80d 	bl	8008138 <ucdr_buffer_length>
 800f11e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f122:	4602      	mov	r2, r0
 800f124:	a90c      	add	r1, sp, #48	@ 0x30
 800f126:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f12a:	4444      	add	r4, r8
 800f12c:	47a8      	blx	r5
 800f12e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f132:	9903      	ldr	r1, [sp, #12]
 800f134:	455a      	cmp	r2, fp
 800f136:	f106 0601 	add.w	r6, r6, #1
 800f13a:	eb73 0101 	sbcs.w	r1, r3, r1
 800f13e:	b2f0      	uxtb	r0, r6
 800f140:	db9c      	blt.n	800f07c <listen_message_reliably+0x48>
 800f142:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f146:	4283      	cmp	r3, r0
 800f148:	d89e      	bhi.n	800f088 <listen_message_reliably+0x54>
 800f14a:	9a03      	ldr	r2, [sp, #12]
 800f14c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f150:	429a      	cmp	r2, r3
 800f152:	bf08      	it	eq
 800f154:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f158:	d01e      	beq.n	800f198 <listen_message_reliably+0x164>
 800f15a:	ebab 0309 	sub.w	r3, fp, r9
 800f15e:	9905      	ldr	r1, [sp, #20]
 800f160:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f164:	2b00      	cmp	r3, #0
 800f166:	bf08      	it	eq
 800f168:	2301      	moveq	r3, #1
 800f16a:	4299      	cmp	r1, r3
 800f16c:	bfa8      	it	ge
 800f16e:	4619      	movge	r1, r3
 800f170:	6894      	ldr	r4, [r2, #8]
 800f172:	6810      	ldr	r0, [r2, #0]
 800f174:	4689      	mov	r9, r1
 800f176:	460b      	mov	r3, r1
 800f178:	aa08      	add	r2, sp, #32
 800f17a:	a907      	add	r1, sp, #28
 800f17c:	47a0      	blx	r4
 800f17e:	b968      	cbnz	r0, 800f19c <listen_message_reliably+0x168>
 800f180:	9b05      	ldr	r3, [sp, #20]
 800f182:	eba3 0309 	sub.w	r3, r3, r9
 800f186:	2b00      	cmp	r3, #0
 800f188:	9305      	str	r3, [sp, #20]
 800f18a:	f73f af5c 	bgt.w	800f046 <listen_message_reliably+0x12>
 800f18e:	4604      	mov	r4, r0
 800f190:	4620      	mov	r0, r4
 800f192:	b01d      	add	sp, #116	@ 0x74
 800f194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f198:	9b05      	ldr	r3, [sp, #20]
 800f19a:	e7e0      	b.n	800f15e <listen_message_reliably+0x12a>
 800f19c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	a80c      	add	r0, sp, #48	@ 0x30
 800f1a4:	f7f8 ff9c 	bl	80080e0 <ucdr_init_buffer>
 800f1a8:	2500      	movs	r5, #0
 800f1aa:	f10d 031a 	add.w	r3, sp, #26
 800f1ae:	aa06      	add	r2, sp, #24
 800f1b0:	a90c      	add	r1, sp, #48	@ 0x30
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	f88d 5018 	strb.w	r5, [sp, #24]
 800f1b8:	f000 fbf0 	bl	800f99c <uxr_read_session_header>
 800f1bc:	b918      	cbnz	r0, 800f1c6 <listen_message_reliably+0x192>
 800f1be:	4620      	mov	r0, r4
 800f1c0:	b01d      	add	sp, #116	@ 0x74
 800f1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f1cc:	f001 f91c 	bl	8010408 <uxr_stream_id_from_raw>
 800f1d0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f1d4:	2d01      	cmp	r5, #1
 800f1d6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f1da:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f1de:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f1e2:	d04b      	beq.n	800f27c <listen_message_reliably+0x248>
 800f1e4:	2d02      	cmp	r5, #2
 800f1e6:	d00f      	beq.n	800f208 <listen_message_reliably+0x1d4>
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	d1e8      	bne.n	800f1be <listen_message_reliably+0x18a>
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f001 f90a 	bl	8010408 <uxr_stream_id_from_raw>
 800f1f4:	a90c      	add	r1, sp, #48	@ 0x30
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800f1fc:	f7ff fd92 	bl	800ed24 <read_submessage_list>
 800f200:	4620      	mov	r0, r4
 800f202:	b01d      	add	sp, #116	@ 0x74
 800f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f208:	4631      	mov	r1, r6
 800f20a:	f108 0008 	add.w	r0, r8, #8
 800f20e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f212:	f001 f9e7 	bl	80105e4 <uxr_get_input_reliable_stream>
 800f216:	4607      	mov	r7, r0
 800f218:	b338      	cbz	r0, 800f26a <listen_message_reliably+0x236>
 800f21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f21c:	9203      	str	r2, [sp, #12]
 800f21e:	a80c      	add	r0, sp, #48	@ 0x30
 800f220:	f7f8 ff8e 	bl	8008140 <ucdr_buffer_remaining>
 800f224:	4603      	mov	r3, r0
 800f226:	f10d 0019 	add.w	r0, sp, #25
 800f22a:	9000      	str	r0, [sp, #0]
 800f22c:	9a03      	ldr	r2, [sp, #12]
 800f22e:	4651      	mov	r1, sl
 800f230:	4638      	mov	r0, r7
 800f232:	f003 f8b5 	bl	80123a0 <uxr_receive_reliable_message>
 800f236:	b1c0      	cbz	r0, 800f26a <listen_message_reliably+0x236>
 800f238:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f23c:	b393      	cbz	r3, 800f2a4 <listen_message_reliably+0x270>
 800f23e:	ad14      	add	r5, sp, #80	@ 0x50
 800f240:	f04f 0a02 	mov.w	sl, #2
 800f244:	e00a      	b.n	800f25c <listen_message_reliably+0x228>
 800f246:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f24a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f24e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f252:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f254:	4629      	mov	r1, r5
 800f256:	4640      	mov	r0, r8
 800f258:	f7ff fd64 	bl	800ed24 <read_submessage_list>
 800f25c:	2204      	movs	r2, #4
 800f25e:	4629      	mov	r1, r5
 800f260:	4638      	mov	r0, r7
 800f262:	f003 f91d 	bl	80124a0 <uxr_next_input_reliable_buffer_available>
 800f266:	2800      	cmp	r0, #0
 800f268:	d1ed      	bne.n	800f246 <listen_message_reliably+0x212>
 800f26a:	4640      	mov	r0, r8
 800f26c:	4632      	mov	r2, r6
 800f26e:	4649      	mov	r1, r9
 800f270:	f7ff fbd2 	bl	800ea18 <write_submessage_acknack.isra.0>
 800f274:	4620      	mov	r0, r4
 800f276:	b01d      	add	sp, #116	@ 0x74
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27c:	4631      	mov	r1, r6
 800f27e:	f108 0008 	add.w	r0, r8, #8
 800f282:	f001 f9a5 	bl	80105d0 <uxr_get_input_best_effort_stream>
 800f286:	2800      	cmp	r0, #0
 800f288:	d099      	beq.n	800f1be <listen_message_reliably+0x18a>
 800f28a:	4651      	mov	r1, sl
 800f28c:	f002 fff4 	bl	8012278 <uxr_receive_best_effort_message>
 800f290:	2800      	cmp	r0, #0
 800f292:	d094      	beq.n	800f1be <listen_message_reliably+0x18a>
 800f294:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f298:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f29a:	a90c      	add	r1, sp, #48	@ 0x30
 800f29c:	4640      	mov	r0, r8
 800f29e:	f7ff fd41 	bl	800ed24 <read_submessage_list>
 800f2a2:	e78c      	b.n	800f1be <listen_message_reliably+0x18a>
 800f2a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f2a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2aa:	a90c      	add	r1, sp, #48	@ 0x30
 800f2ac:	4640      	mov	r0, r8
 800f2ae:	f7ff fd39 	bl	800ed24 <read_submessage_list>
 800f2b2:	e7c4      	b.n	800f23e <listen_message_reliably+0x20a>

0800f2b4 <uxr_run_session_timeout>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	460d      	mov	r5, r1
 800f2ba:	f001 f9f9 	bl	80106b0 <uxr_millis>
 800f2be:	4606      	mov	r6, r0
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f7ff fc71 	bl	800eba8 <uxr_flash_output_streams>
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7ff feb3 	bl	800f034 <listen_message_reliably>
 800f2ce:	f001 f9ef 	bl	80106b0 <uxr_millis>
 800f2d2:	1b83      	subs	r3, r0, r6
 800f2d4:	1ae9      	subs	r1, r5, r3
 800f2d6:	2900      	cmp	r1, #0
 800f2d8:	dcf6      	bgt.n	800f2c8 <uxr_run_session_timeout+0x14>
 800f2da:	f104 0008 	add.w	r0, r4, #8
 800f2de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2e2:	f001 b989 	b.w	80105f8 <uxr_output_streams_confirmed>
 800f2e6:	bf00      	nop

0800f2e8 <uxr_run_session_until_data>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	460d      	mov	r5, r1
 800f2ee:	f001 f9df 	bl	80106b0 <uxr_millis>
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7ff fc57 	bl	800eba8 <uxr_flash_output_streams>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f300:	4629      	mov	r1, r5
 800f302:	e005      	b.n	800f310 <uxr_run_session_until_data+0x28>
 800f304:	f001 f9d4 	bl	80106b0 <uxr_millis>
 800f308:	1b83      	subs	r3, r0, r6
 800f30a:	1ae9      	subs	r1, r5, r3
 800f30c:	2900      	cmp	r1, #0
 800f30e:	dd07      	ble.n	800f320 <uxr_run_session_until_data+0x38>
 800f310:	4620      	mov	r0, r4
 800f312:	f7ff fe8f 	bl	800f034 <listen_message_reliably>
 800f316:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d0f2      	beq.n	800f304 <uxr_run_session_until_data+0x1c>
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f324:	bd70      	pop	{r4, r5, r6, pc}
 800f326:	bf00      	nop

0800f328 <uxr_run_session_until_confirm_delivery>:
 800f328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32c:	4606      	mov	r6, r0
 800f32e:	460d      	mov	r5, r1
 800f330:	f001 f9be 	bl	80106b0 <uxr_millis>
 800f334:	4607      	mov	r7, r0
 800f336:	4630      	mov	r0, r6
 800f338:	f7ff fc36 	bl	800eba8 <uxr_flash_output_streams>
 800f33c:	2d00      	cmp	r5, #0
 800f33e:	f106 0808 	add.w	r8, r6, #8
 800f342:	bfa8      	it	ge
 800f344:	462c      	movge	r4, r5
 800f346:	da07      	bge.n	800f358 <uxr_run_session_until_confirm_delivery+0x30>
 800f348:	e00e      	b.n	800f368 <uxr_run_session_until_confirm_delivery+0x40>
 800f34a:	f7ff fe73 	bl	800f034 <listen_message_reliably>
 800f34e:	f001 f9af 	bl	80106b0 <uxr_millis>
 800f352:	1bc3      	subs	r3, r0, r7
 800f354:	1aec      	subs	r4, r5, r3
 800f356:	d407      	bmi.n	800f368 <uxr_run_session_until_confirm_delivery+0x40>
 800f358:	4640      	mov	r0, r8
 800f35a:	f001 f94d 	bl	80105f8 <uxr_output_streams_confirmed>
 800f35e:	4603      	mov	r3, r0
 800f360:	4621      	mov	r1, r4
 800f362:	4630      	mov	r0, r6
 800f364:	2b00      	cmp	r3, #0
 800f366:	d0f0      	beq.n	800f34a <uxr_run_session_until_confirm_delivery+0x22>
 800f368:	4640      	mov	r0, r8
 800f36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f36e:	f001 b943 	b.w	80105f8 <uxr_output_streams_confirmed>
 800f372:	bf00      	nop

0800f374 <uxr_run_session_until_all_status>:
 800f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f378:	9c08      	ldr	r4, [sp, #32]
 800f37a:	4606      	mov	r6, r0
 800f37c:	460f      	mov	r7, r1
 800f37e:	4691      	mov	r9, r2
 800f380:	461d      	mov	r5, r3
 800f382:	f7ff fc11 	bl	800eba8 <uxr_flash_output_streams>
 800f386:	b124      	cbz	r4, 800f392 <uxr_run_session_until_all_status+0x1e>
 800f388:	4622      	mov	r2, r4
 800f38a:	21ff      	movs	r1, #255	@ 0xff
 800f38c:	4628      	mov	r0, r5
 800f38e:	f004 f99d 	bl	80136cc <memset>
 800f392:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f396:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f398:	f001 f98a 	bl	80106b0 <uxr_millis>
 800f39c:	3d01      	subs	r5, #1
 800f39e:	f1a9 0902 	sub.w	r9, r9, #2
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4639      	mov	r1, r7
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f7ff fe44 	bl	800f034 <listen_message_reliably>
 800f3ac:	f001 f980 	bl	80106b0 <uxr_millis>
 800f3b0:	eba0 0008 	sub.w	r0, r0, r8
 800f3b4:	1a39      	subs	r1, r7, r0
 800f3b6:	b344      	cbz	r4, 800f40a <uxr_run_session_until_all_status+0x96>
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	46ac      	mov	ip, r5
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e002      	b.n	800f3c6 <uxr_run_session_until_all_status+0x52>
 800f3c0:	42a3      	cmp	r3, r4
 800f3c2:	d20d      	bcs.n	800f3e0 <uxr_run_session_until_all_status+0x6c>
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f3ca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f3ce:	d1f7      	bne.n	800f3c0 <uxr_run_session_until_all_status+0x4c>
 800f3d0:	42a3      	cmp	r3, r4
 800f3d2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f3d6:	d213      	bcs.n	800f400 <uxr_run_session_until_all_status+0x8c>
 800f3d8:	2a00      	cmp	r2, #0
 800f3da:	d0f3      	beq.n	800f3c4 <uxr_run_session_until_all_status+0x50>
 800f3dc:	2900      	cmp	r1, #0
 800f3de:	dce2      	bgt.n	800f3a6 <uxr_run_session_until_all_status+0x32>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f3e4:	442c      	add	r4, r5
 800f3e6:	e001      	b.n	800f3ec <uxr_run_session_until_all_status+0x78>
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d812      	bhi.n	800f412 <uxr_run_session_until_all_status+0x9e>
 800f3ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f3f0:	4284      	cmp	r4, r0
 800f3f2:	d1f9      	bne.n	800f3e8 <uxr_run_session_until_all_status+0x74>
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	bf8c      	ite	hi
 800f3f8:	2000      	movhi	r0, #0
 800f3fa:	2001      	movls	r0, #1
 800f3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f400:	2900      	cmp	r1, #0
 800f402:	dded      	ble.n	800f3e0 <uxr_run_session_until_all_status+0x6c>
 800f404:	2a00      	cmp	r2, #0
 800f406:	d1ce      	bne.n	800f3a6 <uxr_run_session_until_all_status+0x32>
 800f408:	e7ea      	b.n	800f3e0 <uxr_run_session_until_all_status+0x6c>
 800f40a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f40c:	2001      	movs	r0, #1
 800f40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f412:	2000      	movs	r0, #0
 800f414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f418 <wait_session_status>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	4604      	mov	r4, r0
 800f41e:	b09d      	sub	sp, #116	@ 0x74
 800f420:	20ff      	movs	r0, #255	@ 0xff
 800f422:	7160      	strb	r0, [r4, #5]
 800f424:	9303      	str	r3, [sp, #12]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 80b6 	beq.w	800f598 <wait_session_status+0x180>
 800f42c:	468a      	mov	sl, r1
 800f42e:	4691      	mov	r9, r2
 800f430:	f04f 0b00 	mov.w	fp, #0
 800f434:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f436:	464a      	mov	r2, r9
 800f438:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f43c:	4651      	mov	r1, sl
 800f43e:	47a8      	blx	r5
 800f440:	f001 f936 	bl	80106b0 <uxr_millis>
 800f444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f448:	4605      	mov	r5, r0
 800f44a:	e009      	b.n	800f460 <wait_session_status+0x48>
 800f44c:	f001 f930 	bl	80106b0 <uxr_millis>
 800f450:	1b40      	subs	r0, r0, r5
 800f452:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f456:	2b00      	cmp	r3, #0
 800f458:	dd40      	ble.n	800f4dc <wait_session_status+0xc4>
 800f45a:	7960      	ldrb	r0, [r4, #5]
 800f45c:	28ff      	cmp	r0, #255	@ 0xff
 800f45e:	d145      	bne.n	800f4ec <wait_session_status+0xd4>
 800f460:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f462:	a908      	add	r1, sp, #32
 800f464:	6896      	ldr	r6, [r2, #8]
 800f466:	6810      	ldr	r0, [r2, #0]
 800f468:	aa09      	add	r2, sp, #36	@ 0x24
 800f46a:	47b0      	blx	r6
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d0ed      	beq.n	800f44c <wait_session_status+0x34>
 800f470:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f474:	a80c      	add	r0, sp, #48	@ 0x30
 800f476:	f7f8 fe33 	bl	80080e0 <ucdr_init_buffer>
 800f47a:	2600      	movs	r6, #0
 800f47c:	f10d 031e 	add.w	r3, sp, #30
 800f480:	aa07      	add	r2, sp, #28
 800f482:	a90c      	add	r1, sp, #48	@ 0x30
 800f484:	4620      	mov	r0, r4
 800f486:	f88d 601c 	strb.w	r6, [sp, #28]
 800f48a:	f000 fa87 	bl	800f99c <uxr_read_session_header>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d0dc      	beq.n	800f44c <wait_session_status+0x34>
 800f492:	4631      	mov	r1, r6
 800f494:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f498:	f000 ffb6 	bl	8010408 <uxr_stream_id_from_raw>
 800f49c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f4a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f4a4:	9302      	str	r3, [sp, #8]
 800f4a6:	2f01      	cmp	r7, #1
 800f4a8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f4ac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f4b0:	d05c      	beq.n	800f56c <wait_session_status+0x154>
 800f4b2:	2f02      	cmp	r7, #2
 800f4b4:	d020      	beq.n	800f4f8 <wait_session_status+0xe0>
 800f4b6:	2f00      	cmp	r7, #0
 800f4b8:	d1c8      	bne.n	800f44c <wait_session_status+0x34>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4638      	mov	r0, r7
 800f4be:	f000 ffa3 	bl	8010408 <uxr_stream_id_from_raw>
 800f4c2:	a90c      	add	r1, sp, #48	@ 0x30
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f7ff fc2b 	bl	800ed24 <read_submessage_list>
 800f4ce:	f001 f8ef 	bl	80106b0 <uxr_millis>
 800f4d2:	1b40      	subs	r0, r0, r5
 800f4d4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dcbe      	bgt.n	800f45a <wait_session_status+0x42>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	7960      	ldrb	r0, [r4, #5]
 800f4e0:	f10b 0b01 	add.w	fp, fp, #1
 800f4e4:	455b      	cmp	r3, fp
 800f4e6:	d001      	beq.n	800f4ec <wait_session_status+0xd4>
 800f4e8:	28ff      	cmp	r0, #255	@ 0xff
 800f4ea:	d0a3      	beq.n	800f434 <wait_session_status+0x1c>
 800f4ec:	38ff      	subs	r0, #255	@ 0xff
 800f4ee:	bf18      	it	ne
 800f4f0:	2001      	movne	r0, #1
 800f4f2:	b01d      	add	sp, #116	@ 0x74
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f4fc:	9304      	str	r3, [sp, #16]
 800f4fe:	4631      	mov	r1, r6
 800f500:	f104 0008 	add.w	r0, r4, #8
 800f504:	f001 f86e 	bl	80105e4 <uxr_get_input_reliable_stream>
 800f508:	4680      	mov	r8, r0
 800f50a:	b348      	cbz	r0, 800f560 <wait_session_status+0x148>
 800f50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f50e:	9205      	str	r2, [sp, #20]
 800f510:	a80c      	add	r0, sp, #48	@ 0x30
 800f512:	f7f8 fe15 	bl	8008140 <ucdr_buffer_remaining>
 800f516:	4603      	mov	r3, r0
 800f518:	f10d 001d 	add.w	r0, sp, #29
 800f51c:	9000      	str	r0, [sp, #0]
 800f51e:	9a05      	ldr	r2, [sp, #20]
 800f520:	9902      	ldr	r1, [sp, #8]
 800f522:	4640      	mov	r0, r8
 800f524:	f002 ff3c 	bl	80123a0 <uxr_receive_reliable_message>
 800f528:	b1d0      	cbz	r0, 800f560 <wait_session_status+0x148>
 800f52a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d03a      	beq.n	800f5a8 <wait_session_status+0x190>
 800f532:	9f04      	ldr	r7, [sp, #16]
 800f534:	e00a      	b.n	800f54c <wait_session_status+0x134>
 800f536:	f04f 0302 	mov.w	r3, #2
 800f53a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f53e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f542:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f548:	f7ff fbec 	bl	800ed24 <read_submessage_list>
 800f54c:	a914      	add	r1, sp, #80	@ 0x50
 800f54e:	2204      	movs	r2, #4
 800f550:	4640      	mov	r0, r8
 800f552:	f002 ffa5 	bl	80124a0 <uxr_next_input_reliable_buffer_available>
 800f556:	4603      	mov	r3, r0
 800f558:	a914      	add	r1, sp, #80	@ 0x50
 800f55a:	4620      	mov	r0, r4
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1ea      	bne.n	800f536 <wait_session_status+0x11e>
 800f560:	9904      	ldr	r1, [sp, #16]
 800f562:	4632      	mov	r2, r6
 800f564:	4620      	mov	r0, r4
 800f566:	f7ff fa57 	bl	800ea18 <write_submessage_acknack.isra.0>
 800f56a:	e76f      	b.n	800f44c <wait_session_status+0x34>
 800f56c:	4631      	mov	r1, r6
 800f56e:	f104 0008 	add.w	r0, r4, #8
 800f572:	f001 f82d 	bl	80105d0 <uxr_get_input_best_effort_stream>
 800f576:	2800      	cmp	r0, #0
 800f578:	f43f af68 	beq.w	800f44c <wait_session_status+0x34>
 800f57c:	9902      	ldr	r1, [sp, #8]
 800f57e:	f002 fe7b 	bl	8012278 <uxr_receive_best_effort_message>
 800f582:	2800      	cmp	r0, #0
 800f584:	f43f af62 	beq.w	800f44c <wait_session_status+0x34>
 800f588:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f58c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f58e:	a90c      	add	r1, sp, #48	@ 0x30
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff fbc7 	bl	800ed24 <read_submessage_list>
 800f596:	e759      	b.n	800f44c <wait_session_status+0x34>
 800f598:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f59a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f59e:	47a0      	blx	r4
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	b01d      	add	sp, #116	@ 0x74
 800f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f5ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5ae:	a90c      	add	r1, sp, #48	@ 0x30
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7ff fbb7 	bl	800ed24 <read_submessage_list>
 800f5b6:	e7bc      	b.n	800f532 <wait_session_status+0x11a>

0800f5b8 <uxr_delete_session_retries>:
 800f5b8:	b530      	push	{r4, r5, lr}
 800f5ba:	b08f      	sub	sp, #60	@ 0x3c
 800f5bc:	4604      	mov	r4, r0
 800f5be:	460d      	mov	r5, r1
 800f5c0:	f000 fa2e 	bl	800fa20 <uxr_session_header_offset>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2210      	movs	r2, #16
 800f5c8:	9000      	str	r0, [sp, #0]
 800f5ca:	a902      	add	r1, sp, #8
 800f5cc:	a806      	add	r0, sp, #24
 800f5ce:	f7f8 fd75 	bl	80080bc <ucdr_init_buffer_origin_offset>
 800f5d2:	a906      	add	r1, sp, #24
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f000 f973 	bl	800f8c0 <uxr_buffer_delete_session>
 800f5da:	2200      	movs	r2, #0
 800f5dc:	4611      	mov	r1, r2
 800f5de:	9b06      	ldr	r3, [sp, #24]
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f000 f9c7 	bl	800f974 <uxr_stamp_session_header>
 800f5e6:	a806      	add	r0, sp, #24
 800f5e8:	f7f8 fda6 	bl	8008138 <ucdr_buffer_length>
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	a902      	add	r1, sp, #8
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f7ff ff10 	bl	800f418 <wait_session_status>
 800f5f8:	b118      	cbz	r0, 800f602 <uxr_delete_session_retries+0x4a>
 800f5fa:	7960      	ldrb	r0, [r4, #5]
 800f5fc:	fab0 f080 	clz	r0, r0
 800f600:	0940      	lsrs	r0, r0, #5
 800f602:	b00f      	add	sp, #60	@ 0x3c
 800f604:	bd30      	pop	{r4, r5, pc}
 800f606:	bf00      	nop

0800f608 <uxr_create_session>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	f100 0b08 	add.w	fp, r0, #8
 800f610:	b0ab      	sub	sp, #172	@ 0xac
 800f612:	4604      	mov	r4, r0
 800f614:	4658      	mov	r0, fp
 800f616:	f000 ff2b 	bl	8010470 <uxr_reset_stream_storage>
 800f61a:	4620      	mov	r0, r4
 800f61c:	f000 fa00 	bl	800fa20 <uxr_session_header_offset>
 800f620:	2300      	movs	r3, #0
 800f622:	9000      	str	r0, [sp, #0]
 800f624:	221c      	movs	r2, #28
 800f626:	a90b      	add	r1, sp, #44	@ 0x2c
 800f628:	a812      	add	r0, sp, #72	@ 0x48
 800f62a:	f7f8 fd47 	bl	80080bc <ucdr_init_buffer_origin_offset>
 800f62e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f630:	8a1a      	ldrh	r2, [r3, #16]
 800f632:	3a04      	subs	r2, #4
 800f634:	b292      	uxth	r2, r2
 800f636:	a912      	add	r1, sp, #72	@ 0x48
 800f638:	4620      	mov	r0, r4
 800f63a:	f000 f917 	bl	800f86c <uxr_buffer_create_session>
 800f63e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f640:	4620      	mov	r0, r4
 800f642:	f000 f983 	bl	800f94c <uxr_stamp_create_session_header>
 800f646:	a812      	add	r0, sp, #72	@ 0x48
 800f648:	f7f8 fd76 	bl	8008138 <ucdr_buffer_length>
 800f64c:	23ff      	movs	r3, #255	@ 0xff
 800f64e:	7163      	strb	r3, [r4, #5]
 800f650:	230a      	movs	r3, #10
 800f652:	46da      	mov	sl, fp
 800f654:	9303      	str	r3, [sp, #12]
 800f656:	4683      	mov	fp, r0
 800f658:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f65a:	465a      	mov	r2, fp
 800f65c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f660:	a90b      	add	r1, sp, #44	@ 0x2c
 800f662:	47a8      	blx	r5
 800f664:	f001 f824 	bl	80106b0 <uxr_millis>
 800f668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f66c:	4605      	mov	r5, r0
 800f66e:	e009      	b.n	800f684 <uxr_create_session+0x7c>
 800f670:	f001 f81e 	bl	80106b0 <uxr_millis>
 800f674:	1b40      	subs	r0, r0, r5
 800f676:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	7962      	ldrb	r2, [r4, #5]
 800f67e:	dd38      	ble.n	800f6f2 <uxr_create_session+0xea>
 800f680:	2aff      	cmp	r2, #255	@ 0xff
 800f682:	d13c      	bne.n	800f6fe <uxr_create_session+0xf6>
 800f684:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f686:	a907      	add	r1, sp, #28
 800f688:	6896      	ldr	r6, [r2, #8]
 800f68a:	6810      	ldr	r0, [r2, #0]
 800f68c:	aa08      	add	r2, sp, #32
 800f68e:	47b0      	blx	r6
 800f690:	2800      	cmp	r0, #0
 800f692:	d0ed      	beq.n	800f670 <uxr_create_session+0x68>
 800f694:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f698:	a81a      	add	r0, sp, #104	@ 0x68
 800f69a:	f7f8 fd21 	bl	80080e0 <ucdr_init_buffer>
 800f69e:	2600      	movs	r6, #0
 800f6a0:	f10d 031a 	add.w	r3, sp, #26
 800f6a4:	aa06      	add	r2, sp, #24
 800f6a6:	a91a      	add	r1, sp, #104	@ 0x68
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f88d 6018 	strb.w	r6, [sp, #24]
 800f6ae:	f000 f975 	bl	800f99c <uxr_read_session_header>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d0dc      	beq.n	800f670 <uxr_create_session+0x68>
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f6bc:	f000 fea4 	bl	8010408 <uxr_stream_id_from_raw>
 800f6c0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f6c4:	2e01      	cmp	r6, #1
 800f6c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f6ca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f6ce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f6d2:	d053      	beq.n	800f77c <uxr_create_session+0x174>
 800f6d4:	2e02      	cmp	r6, #2
 800f6d6:	d018      	beq.n	800f70a <uxr_create_session+0x102>
 800f6d8:	2e00      	cmp	r6, #0
 800f6da:	d1c9      	bne.n	800f670 <uxr_create_session+0x68>
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f000 fe92 	bl	8010408 <uxr_stream_id_from_raw>
 800f6e4:	a91a      	add	r1, sp, #104	@ 0x68
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f7ff fb1a 	bl	800ed24 <read_submessage_list>
 800f6f0:	e7be      	b.n	800f670 <uxr_create_session+0x68>
 800f6f2:	9b03      	ldr	r3, [sp, #12]
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	9303      	str	r3, [sp, #12]
 800f6f8:	d001      	beq.n	800f6fe <uxr_create_session+0xf6>
 800f6fa:	2aff      	cmp	r2, #255	@ 0xff
 800f6fc:	d0ac      	beq.n	800f658 <uxr_create_session+0x50>
 800f6fe:	2a00      	cmp	r2, #0
 800f700:	d051      	beq.n	800f7a6 <uxr_create_session+0x19e>
 800f702:	2000      	movs	r0, #0
 800f704:	b02b      	add	sp, #172	@ 0xac
 800f706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f70e:	9304      	str	r3, [sp, #16]
 800f710:	4639      	mov	r1, r7
 800f712:	4650      	mov	r0, sl
 800f714:	f000 ff66 	bl	80105e4 <uxr_get_input_reliable_stream>
 800f718:	4680      	mov	r8, r0
 800f71a:	b348      	cbz	r0, 800f770 <uxr_create_session+0x168>
 800f71c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f71e:	9205      	str	r2, [sp, #20]
 800f720:	a81a      	add	r0, sp, #104	@ 0x68
 800f722:	f7f8 fd0d 	bl	8008140 <ucdr_buffer_remaining>
 800f726:	4603      	mov	r3, r0
 800f728:	f10d 0019 	add.w	r0, sp, #25
 800f72c:	9000      	str	r0, [sp, #0]
 800f72e:	9a05      	ldr	r2, [sp, #20]
 800f730:	4649      	mov	r1, r9
 800f732:	4640      	mov	r0, r8
 800f734:	f002 fe34 	bl	80123a0 <uxr_receive_reliable_message>
 800f738:	b1d0      	cbz	r0, 800f770 <uxr_create_session+0x168>
 800f73a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d038      	beq.n	800f7b4 <uxr_create_session+0x1ac>
 800f742:	9e04      	ldr	r6, [sp, #16]
 800f744:	e00a      	b.n	800f75c <uxr_create_session+0x154>
 800f746:	f04f 0302 	mov.w	r3, #2
 800f74a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f74e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f752:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f758:	f7ff fae4 	bl	800ed24 <read_submessage_list>
 800f75c:	a922      	add	r1, sp, #136	@ 0x88
 800f75e:	2204      	movs	r2, #4
 800f760:	4640      	mov	r0, r8
 800f762:	f002 fe9d 	bl	80124a0 <uxr_next_input_reliable_buffer_available>
 800f766:	4603      	mov	r3, r0
 800f768:	a922      	add	r1, sp, #136	@ 0x88
 800f76a:	4620      	mov	r0, r4
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1ea      	bne.n	800f746 <uxr_create_session+0x13e>
 800f770:	9904      	ldr	r1, [sp, #16]
 800f772:	463a      	mov	r2, r7
 800f774:	4620      	mov	r0, r4
 800f776:	f7ff f94f 	bl	800ea18 <write_submessage_acknack.isra.0>
 800f77a:	e779      	b.n	800f670 <uxr_create_session+0x68>
 800f77c:	4639      	mov	r1, r7
 800f77e:	4650      	mov	r0, sl
 800f780:	f000 ff26 	bl	80105d0 <uxr_get_input_best_effort_stream>
 800f784:	2800      	cmp	r0, #0
 800f786:	f43f af73 	beq.w	800f670 <uxr_create_session+0x68>
 800f78a:	4649      	mov	r1, r9
 800f78c:	f002 fd74 	bl	8012278 <uxr_receive_best_effort_message>
 800f790:	2800      	cmp	r0, #0
 800f792:	f43f af6d 	beq.w	800f670 <uxr_create_session+0x68>
 800f796:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f79a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f79c:	a91a      	add	r1, sp, #104	@ 0x68
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f7ff fac0 	bl	800ed24 <read_submessage_list>
 800f7a4:	e764      	b.n	800f670 <uxr_create_session+0x68>
 800f7a6:	4650      	mov	r0, sl
 800f7a8:	f000 fe62 	bl	8010470 <uxr_reset_stream_storage>
 800f7ac:	2001      	movs	r0, #1
 800f7ae:	b02b      	add	sp, #172	@ 0xac
 800f7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f7b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7ba:	a91a      	add	r1, sp, #104	@ 0x68
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f7ff fab1 	bl	800ed24 <read_submessage_list>
 800f7c2:	e7be      	b.n	800f742 <uxr_create_session+0x13a>

0800f7c4 <uxr_prepare_stream_to_write_submessage>:
 800f7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	4682      	mov	sl, r0
 800f7cc:	4610      	mov	r0, r2
 800f7ce:	4615      	mov	r5, r2
 800f7d0:	461e      	mov	r6, r3
 800f7d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f7d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f7da:	9101      	str	r1, [sp, #4]
 800f7dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f7e0:	f000 ff60 	bl	80106a4 <uxr_submessage_padding>
 800f7e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7e8:	f105 0904 	add.w	r9, r5, #4
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	4481      	add	r9, r0
 800f7f0:	d01d      	beq.n	800f82e <uxr_prepare_stream_to_write_submessage+0x6a>
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	d116      	bne.n	800f824 <uxr_prepare_stream_to_write_submessage+0x60>
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	f10a 0008 	add.w	r0, sl, #8
 800f7fc:	f000 fede 	bl	80105bc <uxr_get_output_reliable_stream>
 800f800:	4604      	mov	r4, r0
 800f802:	b158      	cbz	r0, 800f81c <uxr_prepare_stream_to_write_submessage+0x58>
 800f804:	4649      	mov	r1, r9
 800f806:	4632      	mov	r2, r6
 800f808:	f003 f806 	bl	8012818 <uxr_prepare_reliable_buffer_to_write>
 800f80c:	4604      	mov	r4, r0
 800f80e:	b12c      	cbz	r4, 800f81c <uxr_prepare_stream_to_write_submessage+0x58>
 800f810:	4643      	mov	r3, r8
 800f812:	b2aa      	uxth	r2, r5
 800f814:	4639      	mov	r1, r7
 800f816:	4630      	mov	r0, r6
 800f818:	f000 ff04 	bl	8010624 <uxr_buffer_submessage_header>
 800f81c:	4620      	mov	r0, r4
 800f81e:	b002      	add	sp, #8
 800f820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f824:	2400      	movs	r4, #0
 800f826:	4620      	mov	r0, r4
 800f828:	b002      	add	sp, #8
 800f82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82e:	4621      	mov	r1, r4
 800f830:	f10a 0008 	add.w	r0, sl, #8
 800f834:	f000 feba 	bl	80105ac <uxr_get_output_best_effort_stream>
 800f838:	4604      	mov	r4, r0
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d0ee      	beq.n	800f81c <uxr_prepare_stream_to_write_submessage+0x58>
 800f83e:	4649      	mov	r1, r9
 800f840:	4632      	mov	r2, r6
 800f842:	f002 ff19 	bl	8012678 <uxr_prepare_best_effort_buffer_to_write>
 800f846:	4604      	mov	r4, r0
 800f848:	e7e1      	b.n	800f80e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f84a:	bf00      	nop

0800f84c <uxr_init_session_info>:
 800f84c:	0e13      	lsrs	r3, r2, #24
 800f84e:	7043      	strb	r3, [r0, #1]
 800f850:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f854:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f858:	7001      	strb	r1, [r0, #0]
 800f85a:	70c3      	strb	r3, [r0, #3]
 800f85c:	2109      	movs	r1, #9
 800f85e:	23ff      	movs	r3, #255	@ 0xff
 800f860:	f880 c002 	strb.w	ip, [r0, #2]
 800f864:	7102      	strb	r2, [r0, #4]
 800f866:	80c1      	strh	r1, [r0, #6]
 800f868:	7143      	strb	r3, [r0, #5]
 800f86a:	4770      	bx	lr

0800f86c <uxr_buffer_create_session>:
 800f86c:	b530      	push	{r4, r5, lr}
 800f86e:	b089      	sub	sp, #36	@ 0x24
 800f870:	2300      	movs	r3, #0
 800f872:	4d12      	ldr	r5, [pc, #72]	@ (800f8bc <uxr_buffer_create_session+0x50>)
 800f874:	9307      	str	r3, [sp, #28]
 800f876:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f87a:	2201      	movs	r2, #1
 800f87c:	9301      	str	r3, [sp, #4]
 800f87e:	80c2      	strh	r2, [r0, #6]
 800f880:	f88d 2004 	strb.w	r2, [sp, #4]
 800f884:	682a      	ldr	r2, [r5, #0]
 800f886:	9200      	str	r2, [sp, #0]
 800f888:	88aa      	ldrh	r2, [r5, #4]
 800f88a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f88e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f892:	9202      	str	r2, [sp, #8]
 800f894:	460c      	mov	r4, r1
 800f896:	7802      	ldrb	r2, [r0, #0]
 800f898:	9303      	str	r3, [sp, #12]
 800f89a:	4619      	mov	r1, r3
 800f89c:	f88d 200c 	strb.w	r2, [sp, #12]
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	2210      	movs	r2, #16
 800f8a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f8a8:	9306      	str	r3, [sp, #24]
 800f8aa:	f000 febb 	bl	8010624 <uxr_buffer_submessage_header>
 800f8ae:	4669      	mov	r1, sp
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f001 fccf 	bl	8011254 <uxr_serialize_CREATE_CLIENT_Payload>
 800f8b6:	b009      	add	sp, #36	@ 0x24
 800f8b8:	bd30      	pop	{r4, r5, pc}
 800f8ba:	bf00      	nop
 800f8bc:	08014570 	.word	0x08014570

0800f8c0 <uxr_buffer_delete_session>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f4 <uxr_buffer_delete_session+0x34>)
 800f8c4:	b082      	sub	sp, #8
 800f8c6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f8ca:	f8ad c006 	strh.w	ip, [sp, #6]
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	2202      	movs	r2, #2
 800f8d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f8d6:	80c2      	strh	r2, [r0, #6]
 800f8d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f8dc:	2204      	movs	r2, #4
 800f8de:	2300      	movs	r3, #0
 800f8e0:	2103      	movs	r1, #3
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 fe9e 	bl	8010624 <uxr_buffer_submessage_header>
 800f8e8:	a901      	add	r1, sp, #4
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f001 fd58 	bl	80113a0 <uxr_serialize_DELETE_Payload>
 800f8f0:	b002      	add	sp, #8
 800f8f2:	bd10      	pop	{r4, pc}
 800f8f4:	08014570 	.word	0x08014570

0800f8f8 <uxr_read_create_session_status>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	4608      	mov	r0, r1
 800f900:	a901      	add	r1, sp, #4
 800f902:	f001 fd5d 	bl	80113c0 <uxr_deserialize_STATUS_AGENT_Payload>
 800f906:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f90a:	7163      	strb	r3, [r4, #5]
 800f90c:	b008      	add	sp, #32
 800f90e:	bd10      	pop	{r4, pc}

0800f910 <uxr_read_delete_session_status>:
 800f910:	b510      	push	{r4, lr}
 800f912:	4604      	mov	r4, r0
 800f914:	b084      	sub	sp, #16
 800f916:	4608      	mov	r0, r1
 800f918:	a902      	add	r1, sp, #8
 800f91a:	f001 fd81 	bl	8011420 <uxr_deserialize_STATUS_Payload>
 800f91e:	88e3      	ldrh	r3, [r4, #6]
 800f920:	2b02      	cmp	r3, #2
 800f922:	d001      	beq.n	800f928 <uxr_read_delete_session_status+0x18>
 800f924:	b004      	add	sp, #16
 800f926:	bd10      	pop	{r4, pc}
 800f928:	f10d 000a 	add.w	r0, sp, #10
 800f92c:	f7fe feca 	bl	800e6c4 <uxr_object_id_from_raw>
 800f930:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f934:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f938:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	2b02      	cmp	r3, #2
 800f940:	bf04      	itt	eq
 800f942:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f946:	7163      	strbeq	r3, [r4, #5]
 800f948:	b004      	add	sp, #16
 800f94a:	bd10      	pop	{r4, pc}

0800f94c <uxr_stamp_create_session_header>:
 800f94c:	b510      	push	{r4, lr}
 800f94e:	2208      	movs	r2, #8
 800f950:	b08a      	sub	sp, #40	@ 0x28
 800f952:	4604      	mov	r4, r0
 800f954:	eb0d 0002 	add.w	r0, sp, r2
 800f958:	f7f8 fbc2 	bl	80080e0 <ucdr_init_buffer>
 800f95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f960:	9400      	str	r4, [sp, #0]
 800f962:	2300      	movs	r3, #0
 800f964:	461a      	mov	r2, r3
 800f966:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f96a:	a802      	add	r0, sp, #8
 800f96c:	f000 ff00 	bl	8010770 <uxr_serialize_message_header>
 800f970:	b00a      	add	sp, #40	@ 0x28
 800f972:	bd10      	pop	{r4, pc}

0800f974 <uxr_stamp_session_header>:
 800f974:	b530      	push	{r4, r5, lr}
 800f976:	b08d      	sub	sp, #52	@ 0x34
 800f978:	4604      	mov	r4, r0
 800f97a:	460d      	mov	r5, r1
 800f97c:	9203      	str	r2, [sp, #12]
 800f97e:	4619      	mov	r1, r3
 800f980:	a804      	add	r0, sp, #16
 800f982:	2208      	movs	r2, #8
 800f984:	f7f8 fbac 	bl	80080e0 <ucdr_init_buffer>
 800f988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f98c:	9b03      	ldr	r3, [sp, #12]
 800f98e:	9400      	str	r4, [sp, #0]
 800f990:	462a      	mov	r2, r5
 800f992:	a804      	add	r0, sp, #16
 800f994:	f000 feec 	bl	8010770 <uxr_serialize_message_header>
 800f998:	b00d      	add	sp, #52	@ 0x34
 800f99a:	bd30      	pop	{r4, r5, pc}

0800f99c <uxr_read_session_header>:
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	4608      	mov	r0, r1
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	4615      	mov	r5, r2
 800f9aa:	461e      	mov	r6, r3
 800f9ac:	f7f8 fbc8 	bl	8008140 <ucdr_buffer_remaining>
 800f9b0:	2808      	cmp	r0, #8
 800f9b2:	d803      	bhi.n	800f9bc <uxr_read_session_header+0x20>
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	b004      	add	sp, #16
 800f9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9bc:	f10d 080c 	add.w	r8, sp, #12
 800f9c0:	4633      	mov	r3, r6
 800f9c2:	462a      	mov	r2, r5
 800f9c4:	f8cd 8000 	str.w	r8, [sp]
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f10d 010b 	add.w	r1, sp, #11
 800f9ce:	f000 feed 	bl	80107ac <uxr_deserialize_message_header>
 800f9d2:	783a      	ldrb	r2, [r7, #0]
 800f9d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d1eb      	bne.n	800f9b4 <uxr_read_session_header+0x18>
 800f9dc:	061b      	lsls	r3, r3, #24
 800f9de:	d41c      	bmi.n	800fa1a <uxr_read_session_header+0x7e>
 800f9e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f9e4:	787b      	ldrb	r3, [r7, #1]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d003      	beq.n	800f9f2 <uxr_read_session_header+0x56>
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	f080 0001 	eor.w	r0, r0, #1
 800f9f0:	e7e1      	b.n	800f9b6 <uxr_read_session_header+0x1a>
 800f9f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f9f6:	78bb      	ldrb	r3, [r7, #2]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	f107 0102 	add.w	r1, r7, #2
 800f9fe:	d1f4      	bne.n	800f9ea <uxr_read_session_header+0x4e>
 800fa00:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fa04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d1ee      	bne.n	800f9ea <uxr_read_session_header+0x4e>
 800fa0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fa10:	784b      	ldrb	r3, [r1, #1]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d1e9      	bne.n	800f9ea <uxr_read_session_header+0x4e>
 800fa16:	2000      	movs	r0, #0
 800fa18:	e7e8      	b.n	800f9ec <uxr_read_session_header+0x50>
 800fa1a:	2001      	movs	r0, #1
 800fa1c:	e7cb      	b.n	800f9b6 <uxr_read_session_header+0x1a>
 800fa1e:	bf00      	nop

0800fa20 <uxr_session_header_offset>:
 800fa20:	f990 3000 	ldrsb.w	r3, [r0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	bfac      	ite	ge
 800fa28:	2008      	movge	r0, #8
 800fa2a:	2004      	movlt	r0, #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop

0800fa30 <uxr_init_base_object_request>:
 800fa30:	b510      	push	{r4, lr}
 800fa32:	88c3      	ldrh	r3, [r0, #6]
 800fa34:	b082      	sub	sp, #8
 800fa36:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800fa3a:	9101      	str	r1, [sp, #4]
 800fa3c:	f1a3 010a 	sub.w	r1, r3, #10
 800fa40:	b289      	uxth	r1, r1
 800fa42:	42a1      	cmp	r1, r4
 800fa44:	d80e      	bhi.n	800fa64 <uxr_init_base_object_request+0x34>
 800fa46:	3301      	adds	r3, #1
 800fa48:	b29c      	uxth	r4, r3
 800fa4a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	80c4      	strh	r4, [r0, #6]
 800fa52:	9801      	ldr	r0, [sp, #4]
 800fa54:	7011      	strb	r1, [r2, #0]
 800fa56:	7053      	strb	r3, [r2, #1]
 800fa58:	1c91      	adds	r1, r2, #2
 800fa5a:	f7fe fe47 	bl	800e6ec <uxr_object_id_to_raw>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	b002      	add	sp, #8
 800fa62:	bd10      	pop	{r4, pc}
 800fa64:	230a      	movs	r3, #10
 800fa66:	2100      	movs	r1, #0
 800fa68:	461c      	mov	r4, r3
 800fa6a:	e7f1      	b.n	800fa50 <uxr_init_base_object_request+0x20>

0800fa6c <uxr_parse_base_object_request>:
 800fa6c:	b570      	push	{r4, r5, r6, lr}
 800fa6e:	4604      	mov	r4, r0
 800fa70:	3002      	adds	r0, #2
 800fa72:	460d      	mov	r5, r1
 800fa74:	4616      	mov	r6, r2
 800fa76:	f7fe fe25 	bl	800e6c4 <uxr_object_id_from_raw>
 800fa7a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fa7e:	8028      	strh	r0, [r5, #0]
 800fa80:	806b      	strh	r3, [r5, #2]
 800fa82:	7822      	ldrb	r2, [r4, #0]
 800fa84:	7863      	ldrb	r3, [r4, #1]
 800fa86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fa8a:	8033      	strh	r3, [r6, #0]
 800fa8c:	bd70      	pop	{r4, r5, r6, pc}
 800fa8e:	bf00      	nop

0800fa90 <uxr_init_framing_io>:
 800fa90:	2300      	movs	r3, #0
 800fa92:	7041      	strb	r1, [r0, #1]
 800fa94:	7003      	strb	r3, [r0, #0]
 800fa96:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop

0800fa9c <uxr_write_framed_msg>:
 800fa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa0:	4617      	mov	r7, r2
 800faa2:	7842      	ldrb	r2, [r0, #1]
 800faa4:	b083      	sub	sp, #12
 800faa6:	460e      	mov	r6, r1
 800faa8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800faac:	469a      	mov	sl, r3
 800faae:	2901      	cmp	r1, #1
 800fab0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800fab4:	4604      	mov	r4, r0
 800fab6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800faba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fabe:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800fac2:	f240 8137 	bls.w	800fd34 <uxr_write_framed_msg+0x298>
 800fac6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800faca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800face:	2901      	cmp	r1, #1
 800fad0:	f04f 0202 	mov.w	r2, #2
 800fad4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fad8:	f240 808f 	bls.w	800fbfa <uxr_write_framed_msg+0x15e>
 800fadc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fade:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fae2:	b2dd      	uxtb	r5, r3
 800fae4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fae8:	2203      	movs	r2, #3
 800faea:	2901      	cmp	r1, #1
 800faec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800faf0:	f240 809a 	bls.w	800fc28 <uxr_write_framed_msg+0x18c>
 800faf4:	18a1      	adds	r1, r4, r2
 800faf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faf8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fafc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb00:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fb04:	3201      	adds	r2, #1
 800fb06:	2801      	cmp	r0, #1
 800fb08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb0c:	f240 80a0 	bls.w	800fc50 <uxr_write_framed_msg+0x1b4>
 800fb10:	18a0      	adds	r0, r4, r2
 800fb12:	3201      	adds	r2, #1
 800fb14:	b2d2      	uxtb	r2, r2
 800fb16:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fb1a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 80a9 	beq.w	800fc76 <uxr_write_framed_msg+0x1da>
 800fb24:	f04f 0900 	mov.w	r9, #0
 800fb28:	46c8      	mov	r8, r9
 800fb2a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fb2e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fb32:	2901      	cmp	r1, #1
 800fb34:	f240 80c3 	bls.w	800fcbe <uxr_write_framed_msg+0x222>
 800fb38:	2a29      	cmp	r2, #41	@ 0x29
 800fb3a:	f200 809f 	bhi.w	800fc7c <uxr_write_framed_msg+0x1e0>
 800fb3e:	18a1      	adds	r1, r4, r2
 800fb40:	3201      	adds	r2, #1
 800fb42:	b2d2      	uxtb	r2, r2
 800fb44:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fb48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb4c:	ea89 0303 	eor.w	r3, r9, r3
 800fb50:	498c      	ldr	r1, [pc, #560]	@ (800fd84 <uxr_write_framed_msg+0x2e8>)
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	f108 0801 	add.w	r8, r8, #1
 800fb58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb5c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fb60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb62:	4543      	cmp	r3, r8
 800fb64:	d8e1      	bhi.n	800fb2a <uxr_write_framed_msg+0x8e>
 800fb66:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fb6a:	fa5f f889 	uxtb.w	r8, r9
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	f04f 0900 	mov.w	r9, #0
 800fb74:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fb78:	fa5f f18a 	uxtb.w	r1, sl
 800fb7c:	2901      	cmp	r1, #1
 800fb7e:	d921      	bls.n	800fbc4 <uxr_write_framed_msg+0x128>
 800fb80:	2a29      	cmp	r2, #41	@ 0x29
 800fb82:	f240 80af 	bls.w	800fce4 <uxr_write_framed_msg+0x248>
 800fb86:	2500      	movs	r5, #0
 800fb88:	e000      	b.n	800fb8c <uxr_write_framed_msg+0xf0>
 800fb8a:	b160      	cbz	r0, 800fba6 <uxr_write_framed_msg+0x10a>
 800fb8c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fb90:	1b52      	subs	r2, r2, r5
 800fb92:	465b      	mov	r3, fp
 800fb94:	4421      	add	r1, r4
 800fb96:	4638      	mov	r0, r7
 800fb98:	47b0      	blx	r6
 800fb9a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fb9e:	4405      	add	r5, r0
 800fba0:	4295      	cmp	r5, r2
 800fba2:	d3f2      	bcc.n	800fb8a <uxr_write_framed_msg+0xee>
 800fba4:	d003      	beq.n	800fbae <uxr_write_framed_msg+0x112>
 800fba6:	2000      	movs	r0, #0
 800fba8:	b003      	add	sp, #12
 800fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbae:	fa5f f18a 	uxtb.w	r1, sl
 800fbb2:	f04f 0300 	mov.w	r3, #0
 800fbb6:	2901      	cmp	r1, #1
 800fbb8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fbbc:	f04f 0200 	mov.w	r2, #0
 800fbc0:	f200 8090 	bhi.w	800fce4 <uxr_write_framed_msg+0x248>
 800fbc4:	1c51      	adds	r1, r2, #1
 800fbc6:	b2c9      	uxtb	r1, r1
 800fbc8:	2929      	cmp	r1, #41	@ 0x29
 800fbca:	d8dc      	bhi.n	800fb86 <uxr_write_framed_msg+0xea>
 800fbcc:	18a5      	adds	r5, r4, r2
 800fbce:	4421      	add	r1, r4
 800fbd0:	3202      	adds	r2, #2
 800fbd2:	f088 0820 	eor.w	r8, r8, #32
 800fbd6:	4648      	mov	r0, r9
 800fbd8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fbdc:	b2d2      	uxtb	r2, r2
 800fbde:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800fbe2:	f04f 0901 	mov.w	r9, #1
 800fbe6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fbea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	f040 8085 	bne.w	800fcfe <uxr_write_framed_msg+0x262>
 800fbf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fbf8:	e7bc      	b.n	800fb74 <uxr_write_framed_msg+0xd8>
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	f04f 0c03 	mov.w	ip, #3
 800fc00:	2204      	movs	r2, #4
 800fc02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc04:	4421      	add	r1, r4
 800fc06:	b2dd      	uxtb	r5, r3
 800fc08:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800fc0c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800fc10:	44a4      	add	ip, r4
 800fc12:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fc16:	f080 0020 	eor.w	r0, r0, #32
 800fc1a:	2901      	cmp	r1, #1
 800fc1c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fc20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc24:	f63f af66 	bhi.w	800faf4 <uxr_write_framed_msg+0x58>
 800fc28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc2a:	18a0      	adds	r0, r4, r2
 800fc2c:	f085 0520 	eor.w	r5, r5, #32
 800fc30:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fc34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fc38:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fc3c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fc40:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fc44:	3202      	adds	r2, #2
 800fc46:	2801      	cmp	r0, #1
 800fc48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc4c:	f63f af60 	bhi.w	800fb10 <uxr_write_framed_msg+0x74>
 800fc50:	1c50      	adds	r0, r2, #1
 800fc52:	18a5      	adds	r5, r4, r2
 800fc54:	fa54 f080 	uxtab	r0, r4, r0
 800fc58:	3202      	adds	r2, #2
 800fc5a:	f081 0120 	eor.w	r1, r1, #32
 800fc5e:	b2d2      	uxtb	r2, r2
 800fc60:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fc64:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fc68:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fc6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f47f af57 	bne.w	800fb24 <uxr_write_framed_msg+0x88>
 800fc76:	9301      	str	r3, [sp, #4]
 800fc78:	4698      	mov	r8, r3
 800fc7a:	e779      	b.n	800fb70 <uxr_write_framed_msg+0xd4>
 800fc7c:	2500      	movs	r5, #0
 800fc7e:	e001      	b.n	800fc84 <uxr_write_framed_msg+0x1e8>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d090      	beq.n	800fba6 <uxr_write_framed_msg+0x10a>
 800fc84:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fc88:	1b52      	subs	r2, r2, r5
 800fc8a:	465b      	mov	r3, fp
 800fc8c:	4421      	add	r1, r4
 800fc8e:	4638      	mov	r0, r7
 800fc90:	47b0      	blx	r6
 800fc92:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fc96:	4405      	add	r5, r0
 800fc98:	4295      	cmp	r5, r2
 800fc9a:	d3f1      	bcc.n	800fc80 <uxr_write_framed_msg+0x1e4>
 800fc9c:	d183      	bne.n	800fba6 <uxr_write_framed_msg+0x10a>
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fca8:	4543      	cmp	r3, r8
 800fcaa:	d964      	bls.n	800fd76 <uxr_write_framed_msg+0x2da>
 800fcac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fcb0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fcb4:	2901      	cmp	r1, #1
 800fcb6:	f04f 0200 	mov.w	r2, #0
 800fcba:	f63f af3d 	bhi.w	800fb38 <uxr_write_framed_msg+0x9c>
 800fcbe:	1c51      	adds	r1, r2, #1
 800fcc0:	b2c9      	uxtb	r1, r1
 800fcc2:	2929      	cmp	r1, #41	@ 0x29
 800fcc4:	d8da      	bhi.n	800fc7c <uxr_write_framed_msg+0x1e0>
 800fcc6:	18a0      	adds	r0, r4, r2
 800fcc8:	4421      	add	r1, r4
 800fcca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fcce:	3202      	adds	r2, #2
 800fcd0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fcd4:	b2d2      	uxtb	r2, r2
 800fcd6:	f083 0020 	eor.w	r0, r3, #32
 800fcda:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fcde:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fce2:	e733      	b.n	800fb4c <uxr_write_framed_msg+0xb0>
 800fce4:	18a1      	adds	r1, r4, r2
 800fce6:	3201      	adds	r2, #1
 800fce8:	4648      	mov	r0, r9
 800fcea:	b2d2      	uxtb	r2, r2
 800fcec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fcf0:	f04f 0901 	mov.w	r9, #1
 800fcf4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	f43f af7b 	beq.w	800fbf4 <uxr_write_framed_msg+0x158>
 800fcfe:	2500      	movs	r5, #0
 800fd00:	e002      	b.n	800fd08 <uxr_write_framed_msg+0x26c>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	f43f af4f 	beq.w	800fba6 <uxr_write_framed_msg+0x10a>
 800fd08:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fd0c:	1b52      	subs	r2, r2, r5
 800fd0e:	465b      	mov	r3, fp
 800fd10:	4421      	add	r1, r4
 800fd12:	4638      	mov	r0, r7
 800fd14:	47b0      	blx	r6
 800fd16:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fd1a:	4405      	add	r5, r0
 800fd1c:	4295      	cmp	r5, r2
 800fd1e:	d3f0      	bcc.n	800fd02 <uxr_write_framed_msg+0x266>
 800fd20:	f47f af41 	bne.w	800fba6 <uxr_write_framed_msg+0x10a>
 800fd24:	2300      	movs	r3, #0
 800fd26:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fd2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd2c:	b298      	uxth	r0, r3
 800fd2e:	b003      	add	sp, #12
 800fd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd34:	217d      	movs	r1, #125	@ 0x7d
 800fd36:	f082 0220 	eor.w	r2, r2, #32
 800fd3a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fd3e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fd42:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fd46:	2901      	cmp	r1, #1
 800fd48:	f04f 0203 	mov.w	r2, #3
 800fd4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd50:	d804      	bhi.n	800fd5c <uxr_write_framed_msg+0x2c0>
 800fd52:	4611      	mov	r1, r2
 800fd54:	f04f 0c04 	mov.w	ip, #4
 800fd58:	2205      	movs	r2, #5
 800fd5a:	e752      	b.n	800fc02 <uxr_write_framed_msg+0x166>
 800fd5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd5e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fd62:	b2dd      	uxtb	r5, r3
 800fd64:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fd68:	2204      	movs	r2, #4
 800fd6a:	2901      	cmp	r1, #1
 800fd6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd70:	f63f aec0 	bhi.w	800faf4 <uxr_write_framed_msg+0x58>
 800fd74:	e758      	b.n	800fc28 <uxr_write_framed_msg+0x18c>
 800fd76:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fd7a:	fa5f f889 	uxtb.w	r8, r9
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	2200      	movs	r2, #0
 800fd82:	e6f5      	b.n	800fb70 <uxr_write_framed_msg+0xd4>
 800fd84:	08014ef8 	.word	0x08014ef8

0800fd88 <uxr_framing_read_transport>:
 800fd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	b083      	sub	sp, #12
 800fd90:	461f      	mov	r7, r3
 800fd92:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800fd96:	4689      	mov	r9, r1
 800fd98:	4692      	mov	sl, r2
 800fd9a:	f000 fc89 	bl	80106b0 <uxr_millis>
 800fd9e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fda2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fda6:	42b3      	cmp	r3, r6
 800fda8:	4680      	mov	r8, r0
 800fdaa:	d061      	beq.n	800fe70 <uxr_framing_read_transport+0xe8>
 800fdac:	d81c      	bhi.n	800fde8 <uxr_framing_read_transport+0x60>
 800fdae:	1e75      	subs	r5, r6, #1
 800fdb0:	1aed      	subs	r5, r5, r3
 800fdb2:	b2ed      	uxtb	r5, r5
 800fdb4:	2600      	movs	r6, #0
 800fdb6:	455d      	cmp	r5, fp
 800fdb8:	d81f      	bhi.n	800fdfa <uxr_framing_read_transport+0x72>
 800fdba:	19ab      	adds	r3, r5, r6
 800fdbc:	455b      	cmp	r3, fp
 800fdbe:	bf84      	itt	hi
 800fdc0:	ebab 0605 	subhi.w	r6, fp, r5
 800fdc4:	b2f6      	uxtbhi	r6, r6
 800fdc6:	b9ed      	cbnz	r5, 800fe04 <uxr_framing_read_transport+0x7c>
 800fdc8:	f04f 0b00 	mov.w	fp, #0
 800fdcc:	f000 fc70 	bl	80106b0 <uxr_millis>
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	eba0 0808 	sub.w	r8, r0, r8
 800fdd6:	eba3 0308 	sub.w	r3, r3, r8
 800fdda:	4658      	mov	r0, fp
 800fddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fde0:	603b      	str	r3, [r7, #0]
 800fde2:	b003      	add	sp, #12
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	d049      	beq.n	800fe80 <uxr_framing_read_transport+0xf8>
 800fdec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800fdf0:	b2ed      	uxtb	r5, r5
 800fdf2:	3e01      	subs	r6, #1
 800fdf4:	455d      	cmp	r5, fp
 800fdf6:	b2f6      	uxtb	r6, r6
 800fdf8:	d9df      	bls.n	800fdba <uxr_framing_read_transport+0x32>
 800fdfa:	fa5f f58b 	uxtb.w	r5, fp
 800fdfe:	2600      	movs	r6, #0
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	d0e1      	beq.n	800fdc8 <uxr_framing_read_transport+0x40>
 800fe04:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fe08:	3102      	adds	r1, #2
 800fe0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	4421      	add	r1, r4
 800fe12:	462a      	mov	r2, r5
 800fe14:	4650      	mov	r0, sl
 800fe16:	47c8      	blx	r9
 800fe18:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fe1c:	4a1a      	ldr	r2, [pc, #104]	@ (800fe88 <uxr_framing_read_transport+0x100>)
 800fe1e:	4403      	add	r3, r0
 800fe20:	0859      	lsrs	r1, r3, #1
 800fe22:	fba2 2101 	umull	r2, r1, r2, r1
 800fe26:	0889      	lsrs	r1, r1, #2
 800fe28:	222a      	movs	r2, #42	@ 0x2a
 800fe2a:	fb02 3111 	mls	r1, r2, r1, r3
 800fe2e:	4683      	mov	fp, r0
 800fe30:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d0c7      	beq.n	800fdc8 <uxr_framing_read_transport+0x40>
 800fe38:	42a8      	cmp	r0, r5
 800fe3a:	d1c7      	bne.n	800fdcc <uxr_framing_read_transport+0x44>
 800fe3c:	2e00      	cmp	r6, #0
 800fe3e:	d0c5      	beq.n	800fdcc <uxr_framing_read_transport+0x44>
 800fe40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	3102      	adds	r1, #2
 800fe46:	4632      	mov	r2, r6
 800fe48:	4421      	add	r1, r4
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	47c8      	blx	r9
 800fe50:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fe54:	4a0c      	ldr	r2, [pc, #48]	@ (800fe88 <uxr_framing_read_transport+0x100>)
 800fe56:	180b      	adds	r3, r1, r0
 800fe58:	0859      	lsrs	r1, r3, #1
 800fe5a:	fba2 1201 	umull	r1, r2, r2, r1
 800fe5e:	0892      	lsrs	r2, r2, #2
 800fe60:	212a      	movs	r1, #42	@ 0x2a
 800fe62:	fb01 3312 	mls	r3, r1, r2, r3
 800fe66:	eb00 0b05 	add.w	fp, r0, r5
 800fe6a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800fe6e:	e7ad      	b.n	800fdcc <uxr_framing_read_transport+0x44>
 800fe70:	2600      	movs	r6, #0
 800fe72:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800fe76:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800fe78:	d9bf      	bls.n	800fdfa <uxr_framing_read_transport+0x72>
 800fe7a:	2102      	movs	r1, #2
 800fe7c:	2529      	movs	r5, #41	@ 0x29
 800fe7e:	e7c4      	b.n	800fe0a <uxr_framing_read_transport+0x82>
 800fe80:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800fe84:	b2ed      	uxtb	r5, r5
 800fe86:	e796      	b.n	800fdb6 <uxr_framing_read_transport+0x2e>
 800fe88:	30c30c31 	.word	0x30c30c31

0800fe8c <uxr_read_framed_msg>:
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	461e      	mov	r6, r3
 800fe92:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fe96:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fe9a:	429d      	cmp	r5, r3
 800fe9c:	b083      	sub	sp, #12
 800fe9e:	4604      	mov	r4, r0
 800fea0:	4688      	mov	r8, r1
 800fea2:	4691      	mov	r9, r2
 800fea4:	f000 8188 	beq.w	80101b8 <uxr_read_framed_msg+0x32c>
 800fea8:	7823      	ldrb	r3, [r4, #0]
 800feaa:	4dc1      	ldr	r5, [pc, #772]	@ (80101b0 <uxr_read_framed_msg+0x324>)
 800feac:	4fc1      	ldr	r7, [pc, #772]	@ (80101b4 <uxr_read_framed_msg+0x328>)
 800feae:	2b07      	cmp	r3, #7
 800feb0:	d8fd      	bhi.n	800feae <uxr_read_framed_msg+0x22>
 800feb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800feb6:	0115      	.short	0x0115
 800feb8:	00d600f6 	.word	0x00d600f6
 800febc:	009000b9 	.word	0x009000b9
 800fec0:	0030004d 	.word	0x0030004d
 800fec4:	0008      	.short	0x0008
 800fec6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800feca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fece:	4299      	cmp	r1, r3
 800fed0:	f000 814a 	beq.w	8010168 <uxr_read_framed_msg+0x2dc>
 800fed4:	18e2      	adds	r2, r4, r3
 800fed6:	7892      	ldrb	r2, [r2, #2]
 800fed8:	2a7d      	cmp	r2, #125	@ 0x7d
 800feda:	f000 8199 	beq.w	8010210 <uxr_read_framed_msg+0x384>
 800fede:	3301      	adds	r3, #1
 800fee0:	0858      	lsrs	r0, r3, #1
 800fee2:	fba5 1000 	umull	r1, r0, r5, r0
 800fee6:	0880      	lsrs	r0, r0, #2
 800fee8:	212a      	movs	r1, #42	@ 0x2a
 800feea:	fb01 3310 	mls	r3, r1, r0, r3
 800feee:	2a7e      	cmp	r2, #126	@ 0x7e
 800fef0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fef4:	f000 8252 	beq.w	801039c <uxr_read_framed_msg+0x510>
 800fef8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800fefa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800fefc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	2200      	movs	r2, #0
 800ff04:	4299      	cmp	r1, r3
 800ff06:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ff08:	7022      	strb	r2, [r4, #0]
 800ff0a:	f000 8179 	beq.w	8010200 <uxr_read_framed_msg+0x374>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	b003      	add	sp, #12
 800ff12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff16:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff1e:	4299      	cmp	r1, r3
 800ff20:	f000 8131 	beq.w	8010186 <uxr_read_framed_msg+0x2fa>
 800ff24:	18e2      	adds	r2, r4, r3
 800ff26:	7890      	ldrb	r0, [r2, #2]
 800ff28:	287d      	cmp	r0, #125	@ 0x7d
 800ff2a:	f000 8190 	beq.w	801024e <uxr_read_framed_msg+0x3c2>
 800ff2e:	3301      	adds	r3, #1
 800ff30:	085a      	lsrs	r2, r3, #1
 800ff32:	fba5 1202 	umull	r1, r2, r5, r2
 800ff36:	0892      	lsrs	r2, r2, #2
 800ff38:	212a      	movs	r1, #42	@ 0x2a
 800ff3a:	fb01 3312 	mls	r3, r1, r2, r3
 800ff3e:	287e      	cmp	r0, #126	@ 0x7e
 800ff40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ff44:	f000 821a 	beq.w	801037c <uxr_read_framed_msg+0x4f0>
 800ff48:	2307      	movs	r3, #7
 800ff4a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ff4c:	7023      	strb	r3, [r4, #0]
 800ff4e:	e7ae      	b.n	800feae <uxr_read_framed_msg+0x22>
 800ff50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ff52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ff56:	459e      	cmp	lr, r3
 800ff58:	d938      	bls.n	800ffcc <uxr_read_framed_msg+0x140>
 800ff5a:	ee07 8a90 	vmov	s15, r8
 800ff5e:	212a      	movs	r1, #42	@ 0x2a
 800ff60:	e020      	b.n	800ffa4 <uxr_read_framed_msg+0x118>
 800ff62:	f89b c002 	ldrb.w	ip, [fp, #2]
 800ff66:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ff6a:	f000 80d4 	beq.w	8010116 <uxr_read_framed_msg+0x28a>
 800ff6e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ff72:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ff76:	f000 8219 	beq.w	80103ac <uxr_read_framed_msg+0x520>
 800ff7a:	f806 c003 	strb.w	ip, [r6, r3]
 800ff7e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800ff82:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ff84:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ff88:	ea8a 000c 	eor.w	r0, sl, ip
 800ff8c:	b2c0      	uxtb	r0, r0
 800ff8e:	3301      	adds	r3, #1
 800ff90:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800ff9a:	4573      	cmp	r3, lr
 800ff9c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800ff9e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ffa0:	f080 8120 	bcs.w	80101e4 <uxr_read_framed_msg+0x358>
 800ffa4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800ffa8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800ffac:	f100 0c01 	add.w	ip, r0, #1
 800ffb0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ffb4:	fba5 8202 	umull	r8, r2, r5, r2
 800ffb8:	0892      	lsrs	r2, r2, #2
 800ffba:	4582      	cmp	sl, r0
 800ffbc:	eb04 0b00 	add.w	fp, r4, r0
 800ffc0:	fb01 c212 	mls	r2, r1, r2, ip
 800ffc4:	d1cd      	bne.n	800ff62 <uxr_read_framed_msg+0xd6>
 800ffc6:	ee17 8a90 	vmov	r8, s15
 800ffca:	459e      	cmp	lr, r3
 800ffcc:	f040 8111 	bne.w	80101f2 <uxr_read_framed_msg+0x366>
 800ffd0:	2306      	movs	r3, #6
 800ffd2:	7023      	strb	r3, [r4, #0]
 800ffd4:	e76b      	b.n	800feae <uxr_read_framed_msg+0x22>
 800ffd6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ffda:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ffde:	4298      	cmp	r0, r3
 800ffe0:	f000 80c2 	beq.w	8010168 <uxr_read_framed_msg+0x2dc>
 800ffe4:	18e2      	adds	r2, r4, r3
 800ffe6:	7891      	ldrb	r1, [r2, #2]
 800ffe8:	297d      	cmp	r1, #125	@ 0x7d
 800ffea:	f000 814c 	beq.w	8010286 <uxr_read_framed_msg+0x3fa>
 800ffee:	3301      	adds	r3, #1
 800fff0:	085a      	lsrs	r2, r3, #1
 800fff2:	fba5 0202 	umull	r0, r2, r5, r2
 800fff6:	0892      	lsrs	r2, r2, #2
 800fff8:	202a      	movs	r0, #42	@ 0x2a
 800fffa:	fb00 3312 	mls	r3, r0, r2, r3
 800fffe:	297e      	cmp	r1, #126	@ 0x7e
 8010000:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010004:	f000 81ca 	beq.w	801039c <uxr_read_framed_msg+0x510>
 8010008:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801000a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801000e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010010:	b29b      	uxth	r3, r3
 8010012:	2000      	movs	r0, #0
 8010014:	428b      	cmp	r3, r1
 8010016:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010018:	8660      	strh	r0, [r4, #50]	@ 0x32
 801001a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801001c:	f240 80df 	bls.w	80101de <uxr_read_framed_msg+0x352>
 8010020:	7020      	strb	r0, [r4, #0]
 8010022:	b003      	add	sp, #12
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010028:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801002c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010030:	4299      	cmp	r1, r3
 8010032:	f000 80a8 	beq.w	8010186 <uxr_read_framed_msg+0x2fa>
 8010036:	18e2      	adds	r2, r4, r3
 8010038:	7890      	ldrb	r0, [r2, #2]
 801003a:	287d      	cmp	r0, #125	@ 0x7d
 801003c:	f000 8164 	beq.w	8010308 <uxr_read_framed_msg+0x47c>
 8010040:	3301      	adds	r3, #1
 8010042:	085a      	lsrs	r2, r3, #1
 8010044:	fba5 1202 	umull	r1, r2, r5, r2
 8010048:	0892      	lsrs	r2, r2, #2
 801004a:	212a      	movs	r1, #42	@ 0x2a
 801004c:	fb01 3312 	mls	r3, r1, r2, r3
 8010050:	287e      	cmp	r0, #126	@ 0x7e
 8010052:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010056:	f000 8191 	beq.w	801037c <uxr_read_framed_msg+0x4f0>
 801005a:	2304      	movs	r3, #4
 801005c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801005e:	7023      	strb	r3, [r4, #0]
 8010060:	e725      	b.n	800feae <uxr_read_framed_msg+0x22>
 8010062:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010066:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801006a:	4290      	cmp	r0, r2
 801006c:	f000 80b3 	beq.w	80101d6 <uxr_read_framed_msg+0x34a>
 8010070:	18a3      	adds	r3, r4, r2
 8010072:	7899      	ldrb	r1, [r3, #2]
 8010074:	297d      	cmp	r1, #125	@ 0x7d
 8010076:	f000 8164 	beq.w	8010342 <uxr_read_framed_msg+0x4b6>
 801007a:	3201      	adds	r2, #1
 801007c:	0850      	lsrs	r0, r2, #1
 801007e:	fba5 3000 	umull	r3, r0, r5, r0
 8010082:	0880      	lsrs	r0, r0, #2
 8010084:	232a      	movs	r3, #42	@ 0x2a
 8010086:	fb03 2210 	mls	r2, r3, r0, r2
 801008a:	297e      	cmp	r1, #126	@ 0x7e
 801008c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010090:	f000 8188 	beq.w	80103a4 <uxr_read_framed_msg+0x518>
 8010094:	7863      	ldrb	r3, [r4, #1]
 8010096:	428b      	cmp	r3, r1
 8010098:	bf0c      	ite	eq
 801009a:	2303      	moveq	r3, #3
 801009c:	2300      	movne	r3, #0
 801009e:	7023      	strb	r3, [r4, #0]
 80100a0:	e705      	b.n	800feae <uxr_read_framed_msg+0x22>
 80100a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80100a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80100aa:	2200      	movs	r2, #0
 80100ac:	4299      	cmp	r1, r3
 80100ae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80100b2:	d06c      	beq.n	801018e <uxr_read_framed_msg+0x302>
 80100b4:	18e2      	adds	r2, r4, r3
 80100b6:	7890      	ldrb	r0, [r2, #2]
 80100b8:	287d      	cmp	r0, #125	@ 0x7d
 80100ba:	f000 8101 	beq.w	80102c0 <uxr_read_framed_msg+0x434>
 80100be:	3301      	adds	r3, #1
 80100c0:	085a      	lsrs	r2, r3, #1
 80100c2:	fba5 1202 	umull	r1, r2, r5, r2
 80100c6:	0892      	lsrs	r2, r2, #2
 80100c8:	212a      	movs	r1, #42	@ 0x2a
 80100ca:	fb01 3312 	mls	r3, r1, r2, r3
 80100ce:	287e      	cmp	r0, #126	@ 0x7e
 80100d0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80100d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80100d8:	d059      	beq.n	801018e <uxr_read_framed_msg+0x302>
 80100da:	2302      	movs	r3, #2
 80100dc:	7023      	strb	r3, [r4, #0]
 80100de:	e6e6      	b.n	800feae <uxr_read_framed_msg+0x22>
 80100e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80100e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80100e8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80100ec:	1c51      	adds	r1, r2, #1
 80100ee:	084b      	lsrs	r3, r1, #1
 80100f0:	fba5 c303 	umull	ip, r3, r5, r3
 80100f4:	089b      	lsrs	r3, r3, #2
 80100f6:	fb0e 1313 	mls	r3, lr, r3, r1
 80100fa:	4592      	cmp	sl, r2
 80100fc:	eb04 0002 	add.w	r0, r4, r2
 8010100:	b2da      	uxtb	r2, r3
 8010102:	f43f af04 	beq.w	800ff0e <uxr_read_framed_msg+0x82>
 8010106:	7883      	ldrb	r3, [r0, #2]
 8010108:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801010c:	2b7e      	cmp	r3, #126	@ 0x7e
 801010e:	d1ed      	bne.n	80100ec <uxr_read_framed_msg+0x260>
 8010110:	2301      	movs	r3, #1
 8010112:	7023      	strb	r3, [r4, #0]
 8010114:	e6cb      	b.n	800feae <uxr_read_framed_msg+0x22>
 8010116:	f100 0c01 	add.w	ip, r0, #1
 801011a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801011e:	fba5 8202 	umull	r8, r2, r5, r2
 8010122:	0892      	lsrs	r2, r2, #2
 8010124:	fb01 c212 	mls	r2, r1, r2, ip
 8010128:	eb04 0c02 	add.w	ip, r4, r2
 801012c:	b2d2      	uxtb	r2, r2
 801012e:	4592      	cmp	sl, r2
 8010130:	f100 0002 	add.w	r0, r0, #2
 8010134:	f43f af47 	beq.w	800ffc6 <uxr_read_framed_msg+0x13a>
 8010138:	0842      	lsrs	r2, r0, #1
 801013a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801013e:	fba5 8202 	umull	r8, r2, r5, r2
 8010142:	0892      	lsrs	r2, r2, #2
 8010144:	fb01 0012 	mls	r0, r1, r2, r0
 8010148:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801014c:	f08a 0c20 	eor.w	ip, sl, #32
 8010150:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010154:	f47f af11 	bne.w	800ff7a <uxr_read_framed_msg+0xee>
 8010158:	459e      	cmp	lr, r3
 801015a:	ee17 8a90 	vmov	r8, s15
 801015e:	f43f af37 	beq.w	800ffd0 <uxr_read_framed_msg+0x144>
 8010162:	2301      	movs	r3, #1
 8010164:	7023      	strb	r3, [r4, #0]
 8010166:	e6a2      	b.n	800feae <uxr_read_framed_msg+0x22>
 8010168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	2301      	movs	r3, #1
 801016e:	9301      	str	r3, [sp, #4]
 8010170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010172:	464a      	mov	r2, r9
 8010174:	4641      	mov	r1, r8
 8010176:	4620      	mov	r0, r4
 8010178:	f7ff fe06 	bl	800fd88 <uxr_framing_read_transport>
 801017c:	2800      	cmp	r0, #0
 801017e:	f43f aec6 	beq.w	800ff0e <uxr_read_framed_msg+0x82>
 8010182:	7823      	ldrb	r3, [r4, #0]
 8010184:	e693      	b.n	800feae <uxr_read_framed_msg+0x22>
 8010186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	2302      	movs	r3, #2
 801018c:	e7ef      	b.n	801016e <uxr_read_framed_msg+0x2e2>
 801018e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	2304      	movs	r3, #4
 8010194:	9301      	str	r3, [sp, #4]
 8010196:	464a      	mov	r2, r9
 8010198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801019a:	4641      	mov	r1, r8
 801019c:	4620      	mov	r0, r4
 801019e:	f7ff fdf3 	bl	800fd88 <uxr_framing_read_transport>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d1ed      	bne.n	8010182 <uxr_read_framed_msg+0x2f6>
 80101a6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80101aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80101ac:	d0e9      	beq.n	8010182 <uxr_read_framed_msg+0x2f6>
 80101ae:	e6ae      	b.n	800ff0e <uxr_read_framed_msg+0x82>
 80101b0:	30c30c31 	.word	0x30c30c31
 80101b4:	08014ef8 	.word	0x08014ef8
 80101b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	2305      	movs	r3, #5
 80101be:	9301      	str	r3, [sp, #4]
 80101c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101c2:	f7ff fde1 	bl	800fd88 <uxr_framing_read_transport>
 80101c6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80101ca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80101ce:	429a      	cmp	r2, r3
 80101d0:	f43f ae9d 	beq.w	800ff0e <uxr_read_framed_msg+0x82>
 80101d4:	e668      	b.n	800fea8 <uxr_read_framed_msg+0x1c>
 80101d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	2303      	movs	r3, #3
 80101dc:	e7c7      	b.n	801016e <uxr_read_framed_msg+0x2e2>
 80101de:	2305      	movs	r3, #5
 80101e0:	7023      	strb	r3, [r4, #0]
 80101e2:	e664      	b.n	800feae <uxr_read_framed_msg+0x22>
 80101e4:	ee17 8a90 	vmov	r8, s15
 80101e8:	f43f aef2 	beq.w	800ffd0 <uxr_read_framed_msg+0x144>
 80101ec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80101f0:	d08e      	beq.n	8010110 <uxr_read_framed_msg+0x284>
 80101f2:	ebae 0303 	sub.w	r3, lr, r3
 80101f6:	3302      	adds	r3, #2
 80101f8:	9301      	str	r3, [sp, #4]
 80101fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	e7b7      	b.n	8010170 <uxr_read_framed_msg+0x2e4>
 8010200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010202:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010206:	7013      	strb	r3, [r2, #0]
 8010208:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801020a:	b003      	add	sp, #12
 801020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010210:	f103 0c01 	add.w	ip, r3, #1
 8010214:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010218:	fba5 0202 	umull	r0, r2, r5, r2
 801021c:	0892      	lsrs	r2, r2, #2
 801021e:	202a      	movs	r0, #42	@ 0x2a
 8010220:	fb00 c212 	mls	r2, r0, r2, ip
 8010224:	fa5f fc82 	uxtb.w	ip, r2
 8010228:	4561      	cmp	r1, ip
 801022a:	d09d      	beq.n	8010168 <uxr_read_framed_msg+0x2dc>
 801022c:	3302      	adds	r3, #2
 801022e:	4422      	add	r2, r4
 8010230:	0859      	lsrs	r1, r3, #1
 8010232:	7892      	ldrb	r2, [r2, #2]
 8010234:	fba5 c101 	umull	ip, r1, r5, r1
 8010238:	0889      	lsrs	r1, r1, #2
 801023a:	fb00 3311 	mls	r3, r0, r1, r3
 801023e:	2a7e      	cmp	r2, #126	@ 0x7e
 8010240:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010244:	f000 80aa 	beq.w	801039c <uxr_read_framed_msg+0x510>
 8010248:	f082 0220 	eor.w	r2, r2, #32
 801024c:	e654      	b.n	800fef8 <uxr_read_framed_msg+0x6c>
 801024e:	1c58      	adds	r0, r3, #1
 8010250:	0842      	lsrs	r2, r0, #1
 8010252:	fba5 c202 	umull	ip, r2, r5, r2
 8010256:	0892      	lsrs	r2, r2, #2
 8010258:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801025c:	fb0c 0212 	mls	r2, ip, r2, r0
 8010260:	b2d0      	uxtb	r0, r2
 8010262:	4281      	cmp	r1, r0
 8010264:	d08f      	beq.n	8010186 <uxr_read_framed_msg+0x2fa>
 8010266:	4422      	add	r2, r4
 8010268:	3302      	adds	r3, #2
 801026a:	7890      	ldrb	r0, [r2, #2]
 801026c:	085a      	lsrs	r2, r3, #1
 801026e:	fba5 1202 	umull	r1, r2, r5, r2
 8010272:	0892      	lsrs	r2, r2, #2
 8010274:	fb0c 3312 	mls	r3, ip, r2, r3
 8010278:	287e      	cmp	r0, #126	@ 0x7e
 801027a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801027e:	d07d      	beq.n	801037c <uxr_read_framed_msg+0x4f0>
 8010280:	f080 0020 	eor.w	r0, r0, #32
 8010284:	e660      	b.n	800ff48 <uxr_read_framed_msg+0xbc>
 8010286:	1c59      	adds	r1, r3, #1
 8010288:	084a      	lsrs	r2, r1, #1
 801028a:	fba5 c202 	umull	ip, r2, r5, r2
 801028e:	0892      	lsrs	r2, r2, #2
 8010290:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010294:	fb0c 1212 	mls	r2, ip, r2, r1
 8010298:	b2d1      	uxtb	r1, r2
 801029a:	4288      	cmp	r0, r1
 801029c:	f43f af64 	beq.w	8010168 <uxr_read_framed_msg+0x2dc>
 80102a0:	4422      	add	r2, r4
 80102a2:	3302      	adds	r3, #2
 80102a4:	7891      	ldrb	r1, [r2, #2]
 80102a6:	085a      	lsrs	r2, r3, #1
 80102a8:	fba5 0202 	umull	r0, r2, r5, r2
 80102ac:	0892      	lsrs	r2, r2, #2
 80102ae:	fb0c 3312 	mls	r3, ip, r2, r3
 80102b2:	297e      	cmp	r1, #126	@ 0x7e
 80102b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102b8:	d070      	beq.n	801039c <uxr_read_framed_msg+0x510>
 80102ba:	f081 0120 	eor.w	r1, r1, #32
 80102be:	e6a3      	b.n	8010008 <uxr_read_framed_msg+0x17c>
 80102c0:	f103 0c01 	add.w	ip, r3, #1
 80102c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80102c8:	fba5 0202 	umull	r0, r2, r5, r2
 80102cc:	0892      	lsrs	r2, r2, #2
 80102ce:	202a      	movs	r0, #42	@ 0x2a
 80102d0:	fb00 c212 	mls	r2, r0, r2, ip
 80102d4:	fa5f fc82 	uxtb.w	ip, r2
 80102d8:	4561      	cmp	r1, ip
 80102da:	f43f af58 	beq.w	801018e <uxr_read_framed_msg+0x302>
 80102de:	4422      	add	r2, r4
 80102e0:	3302      	adds	r3, #2
 80102e2:	7891      	ldrb	r1, [r2, #2]
 80102e4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80102e8:	085a      	lsrs	r2, r3, #1
 80102ea:	fba5 c202 	umull	ip, r2, r5, r2
 80102ee:	0892      	lsrs	r2, r2, #2
 80102f0:	fb00 3312 	mls	r3, r0, r2, r3
 80102f4:	297e      	cmp	r1, #126	@ 0x7e
 80102f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102fa:	f43f af48 	beq.w	801018e <uxr_read_framed_msg+0x302>
 80102fe:	f081 0120 	eor.w	r1, r1, #32
 8010302:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010306:	e6e8      	b.n	80100da <uxr_read_framed_msg+0x24e>
 8010308:	1c58      	adds	r0, r3, #1
 801030a:	0842      	lsrs	r2, r0, #1
 801030c:	fba5 c202 	umull	ip, r2, r5, r2
 8010310:	0892      	lsrs	r2, r2, #2
 8010312:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010316:	fb0c 0212 	mls	r2, ip, r2, r0
 801031a:	b2d0      	uxtb	r0, r2
 801031c:	4281      	cmp	r1, r0
 801031e:	f43f af32 	beq.w	8010186 <uxr_read_framed_msg+0x2fa>
 8010322:	4422      	add	r2, r4
 8010324:	3302      	adds	r3, #2
 8010326:	7890      	ldrb	r0, [r2, #2]
 8010328:	085a      	lsrs	r2, r3, #1
 801032a:	fba5 1202 	umull	r1, r2, r5, r2
 801032e:	0892      	lsrs	r2, r2, #2
 8010330:	fb0c 3312 	mls	r3, ip, r2, r3
 8010334:	287e      	cmp	r0, #126	@ 0x7e
 8010336:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801033a:	d01f      	beq.n	801037c <uxr_read_framed_msg+0x4f0>
 801033c:	f080 0020 	eor.w	r0, r0, #32
 8010340:	e68b      	b.n	801005a <uxr_read_framed_msg+0x1ce>
 8010342:	1c51      	adds	r1, r2, #1
 8010344:	084b      	lsrs	r3, r1, #1
 8010346:	fba5 c303 	umull	ip, r3, r5, r3
 801034a:	089b      	lsrs	r3, r3, #2
 801034c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010350:	fb0c 1313 	mls	r3, ip, r3, r1
 8010354:	b2d9      	uxtb	r1, r3
 8010356:	4288      	cmp	r0, r1
 8010358:	f43f af3d 	beq.w	80101d6 <uxr_read_framed_msg+0x34a>
 801035c:	3202      	adds	r2, #2
 801035e:	4423      	add	r3, r4
 8010360:	0850      	lsrs	r0, r2, #1
 8010362:	789b      	ldrb	r3, [r3, #2]
 8010364:	fba5 1000 	umull	r1, r0, r5, r0
 8010368:	0880      	lsrs	r0, r0, #2
 801036a:	fb0c 2210 	mls	r2, ip, r0, r2
 801036e:	2b7e      	cmp	r3, #126	@ 0x7e
 8010370:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010374:	d016      	beq.n	80103a4 <uxr_read_framed_msg+0x518>
 8010376:	f083 0120 	eor.w	r1, r3, #32
 801037a:	e68b      	b.n	8010094 <uxr_read_framed_msg+0x208>
 801037c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	2302      	movs	r3, #2
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	464a      	mov	r2, r9
 8010386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010388:	4641      	mov	r1, r8
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff fcfc 	bl	800fd88 <uxr_framing_read_transport>
 8010390:	2800      	cmp	r0, #0
 8010392:	f47f aef6 	bne.w	8010182 <uxr_read_framed_msg+0x2f6>
 8010396:	2301      	movs	r3, #1
 8010398:	7023      	strb	r3, [r4, #0]
 801039a:	e588      	b.n	800feae <uxr_read_framed_msg+0x22>
 801039c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	2301      	movs	r3, #1
 80103a2:	e7ee      	b.n	8010382 <uxr_read_framed_msg+0x4f6>
 80103a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	2303      	movs	r3, #3
 80103aa:	e7ea      	b.n	8010382 <uxr_read_framed_msg+0x4f6>
 80103ac:	ee17 8a90 	vmov	r8, s15
 80103b0:	e6ae      	b.n	8010110 <uxr_read_framed_msg+0x284>
 80103b2:	bf00      	nop

080103b4 <uxr_stream_id>:
 80103b4:	2901      	cmp	r1, #1
 80103b6:	b082      	sub	sp, #8
 80103b8:	d01d      	beq.n	80103f6 <uxr_stream_id+0x42>
 80103ba:	2902      	cmp	r1, #2
 80103bc:	f04f 0c00 	mov.w	ip, #0
 80103c0:	d01e      	beq.n	8010400 <uxr_stream_id+0x4c>
 80103c2:	2300      	movs	r3, #0
 80103c4:	f36c 0307 	bfi	r3, ip, #0, #8
 80103c8:	f360 230f 	bfi	r3, r0, #8, #8
 80103cc:	f361 4317 	bfi	r3, r1, #16, #8
 80103d0:	f362 631f 	bfi	r3, r2, #24, #8
 80103d4:	b2da      	uxtb	r2, r3
 80103d6:	2000      	movs	r0, #0
 80103d8:	f362 0007 	bfi	r0, r2, #0, #8
 80103dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80103e0:	f362 200f 	bfi	r0, r2, #8, #8
 80103e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80103e8:	f362 4017 	bfi	r0, r2, #16, #8
 80103ec:	0e1b      	lsrs	r3, r3, #24
 80103ee:	f363 601f 	bfi	r0, r3, #24, #8
 80103f2:	b002      	add	sp, #8
 80103f4:	4770      	bx	lr
 80103f6:	f100 0c01 	add.w	ip, r0, #1
 80103fa:	fa5f fc8c 	uxtb.w	ip, ip
 80103fe:	e7e0      	b.n	80103c2 <uxr_stream_id+0xe>
 8010400:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010404:	e7dd      	b.n	80103c2 <uxr_stream_id+0xe>
 8010406:	bf00      	nop

08010408 <uxr_stream_id_from_raw>:
 8010408:	b082      	sub	sp, #8
 801040a:	b130      	cbz	r0, 801041a <uxr_stream_id_from_raw+0x12>
 801040c:	0603      	lsls	r3, r0, #24
 801040e:	d420      	bmi.n	8010452 <uxr_stream_id_from_raw+0x4a>
 8010410:	1e42      	subs	r2, r0, #1
 8010412:	b2d2      	uxtb	r2, r2
 8010414:	f04f 0c01 	mov.w	ip, #1
 8010418:	e001      	b.n	801041e <uxr_stream_id_from_raw+0x16>
 801041a:	4684      	mov	ip, r0
 801041c:	4602      	mov	r2, r0
 801041e:	2300      	movs	r3, #0
 8010420:	f360 0307 	bfi	r3, r0, #0, #8
 8010424:	f362 230f 	bfi	r3, r2, #8, #8
 8010428:	f36c 4317 	bfi	r3, ip, #16, #8
 801042c:	f361 631f 	bfi	r3, r1, #24, #8
 8010430:	b2da      	uxtb	r2, r3
 8010432:	2000      	movs	r0, #0
 8010434:	f362 0007 	bfi	r0, r2, #0, #8
 8010438:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801043c:	f362 200f 	bfi	r0, r2, #8, #8
 8010440:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010444:	f362 4017 	bfi	r0, r2, #16, #8
 8010448:	0e1b      	lsrs	r3, r3, #24
 801044a:	f363 601f 	bfi	r0, r3, #24, #8
 801044e:	b002      	add	sp, #8
 8010450:	4770      	bx	lr
 8010452:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010456:	f04f 0c02 	mov.w	ip, #2
 801045a:	e7e0      	b.n	801041e <uxr_stream_id_from_raw+0x16>

0801045c <uxr_init_stream_storage>:
 801045c:	2300      	movs	r3, #0
 801045e:	7403      	strb	r3, [r0, #16]
 8010460:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010464:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010468:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop

08010470 <uxr_reset_stream_storage>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	7c03      	ldrb	r3, [r0, #16]
 8010474:	4604      	mov	r4, r0
 8010476:	b153      	cbz	r3, 801048e <uxr_reset_stream_storage+0x1e>
 8010478:	4606      	mov	r6, r0
 801047a:	2500      	movs	r5, #0
 801047c:	4630      	mov	r0, r6
 801047e:	f002 f8f5 	bl	801266c <uxr_reset_output_best_effort_stream>
 8010482:	7c23      	ldrb	r3, [r4, #16]
 8010484:	3501      	adds	r5, #1
 8010486:	42ab      	cmp	r3, r5
 8010488:	f106 0610 	add.w	r6, r6, #16
 801048c:	d8f6      	bhi.n	801047c <uxr_reset_stream_storage+0xc>
 801048e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010492:	b163      	cbz	r3, 80104ae <uxr_reset_stream_storage+0x3e>
 8010494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010498:	2500      	movs	r5, #0
 801049a:	4630      	mov	r0, r6
 801049c:	f001 fee8 	bl	8012270 <uxr_reset_input_best_effort_stream>
 80104a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80104a4:	3501      	adds	r5, #1
 80104a6:	42ab      	cmp	r3, r5
 80104a8:	f106 0602 	add.w	r6, r6, #2
 80104ac:	d8f5      	bhi.n	801049a <uxr_reset_stream_storage+0x2a>
 80104ae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80104b2:	b163      	cbz	r3, 80104ce <uxr_reset_stream_storage+0x5e>
 80104b4:	f104 0618 	add.w	r6, r4, #24
 80104b8:	2500      	movs	r5, #0
 80104ba:	4630      	mov	r0, r6
 80104bc:	f002 f982 	bl	80127c4 <uxr_reset_output_reliable_stream>
 80104c0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80104c4:	3501      	adds	r5, #1
 80104c6:	42ab      	cmp	r3, r5
 80104c8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80104cc:	d8f5      	bhi.n	80104ba <uxr_reset_stream_storage+0x4a>
 80104ce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80104d2:	b163      	cbz	r3, 80104ee <uxr_reset_stream_storage+0x7e>
 80104d4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80104d8:	2500      	movs	r5, #0
 80104da:	4630      	mov	r0, r6
 80104dc:	f001 ff3c 	bl	8012358 <uxr_reset_input_reliable_stream>
 80104e0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80104e4:	3501      	adds	r5, #1
 80104e6:	42ab      	cmp	r3, r5
 80104e8:	f106 0618 	add.w	r6, r6, #24
 80104ec:	d8f5      	bhi.n	80104da <uxr_reset_stream_storage+0x6a>
 80104ee:	bd70      	pop	{r4, r5, r6, pc}

080104f0 <uxr_add_output_best_effort_buffer>:
 80104f0:	b510      	push	{r4, lr}
 80104f2:	7c04      	ldrb	r4, [r0, #16]
 80104f4:	f104 0c01 	add.w	ip, r4, #1
 80104f8:	b082      	sub	sp, #8
 80104fa:	f880 c010 	strb.w	ip, [r0, #16]
 80104fe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010502:	f002 f8a9 	bl	8012658 <uxr_init_output_best_effort_stream>
 8010506:	2201      	movs	r2, #1
 8010508:	4611      	mov	r1, r2
 801050a:	4620      	mov	r0, r4
 801050c:	b002      	add	sp, #8
 801050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010512:	f7ff bf4f 	b.w	80103b4 <uxr_stream_id>
 8010516:	bf00      	nop

08010518 <uxr_add_output_reliable_buffer>:
 8010518:	b510      	push	{r4, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	4684      	mov	ip, r0
 801051e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010522:	9000      	str	r0, [sp, #0]
 8010524:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010528:	2028      	movs	r0, #40	@ 0x28
 801052a:	fb00 c004 	mla	r0, r0, r4, ip
 801052e:	f104 0e01 	add.w	lr, r4, #1
 8010532:	3018      	adds	r0, #24
 8010534:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010538:	f002 f90c 	bl	8012754 <uxr_init_output_reliable_stream>
 801053c:	2201      	movs	r2, #1
 801053e:	2102      	movs	r1, #2
 8010540:	4620      	mov	r0, r4
 8010542:	b004      	add	sp, #16
 8010544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010548:	f7ff bf34 	b.w	80103b4 <uxr_stream_id>

0801054c <uxr_add_input_best_effort_buffer>:
 801054c:	b510      	push	{r4, lr}
 801054e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010552:	4603      	mov	r3, r0
 8010554:	1c62      	adds	r2, r4, #1
 8010556:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801055a:	b082      	sub	sp, #8
 801055c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010564:	f001 fe80 	bl	8012268 <uxr_init_input_best_effort_stream>
 8010568:	2200      	movs	r2, #0
 801056a:	2101      	movs	r1, #1
 801056c:	4620      	mov	r0, r4
 801056e:	b002      	add	sp, #8
 8010570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010574:	f7ff bf1e 	b.w	80103b4 <uxr_stream_id>

08010578 <uxr_add_input_reliable_buffer>:
 8010578:	b510      	push	{r4, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	4684      	mov	ip, r0
 801057e:	9806      	ldr	r0, [sp, #24]
 8010580:	9000      	str	r0, [sp, #0]
 8010582:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010586:	2018      	movs	r0, #24
 8010588:	fb00 c004 	mla	r0, r0, r4, ip
 801058c:	f104 0e01 	add.w	lr, r4, #1
 8010590:	3048      	adds	r0, #72	@ 0x48
 8010592:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010596:	f001 feb3 	bl	8012300 <uxr_init_input_reliable_stream>
 801059a:	2200      	movs	r2, #0
 801059c:	2102      	movs	r1, #2
 801059e:	4620      	mov	r0, r4
 80105a0:	b004      	add	sp, #16
 80105a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a6:	f7ff bf05 	b.w	80103b4 <uxr_stream_id>
 80105aa:	bf00      	nop

080105ac <uxr_get_output_best_effort_stream>:
 80105ac:	7c03      	ldrb	r3, [r0, #16]
 80105ae:	428b      	cmp	r3, r1
 80105b0:	bf8c      	ite	hi
 80105b2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80105b6:	2000      	movls	r0, #0
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop

080105bc <uxr_get_output_reliable_stream>:
 80105bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80105c0:	428b      	cmp	r3, r1
 80105c2:	bf83      	ittte	hi
 80105c4:	2328      	movhi	r3, #40	@ 0x28
 80105c6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80105ca:	3018      	addhi	r0, #24
 80105cc:	2000      	movls	r0, #0
 80105ce:	4770      	bx	lr

080105d0 <uxr_get_input_best_effort_stream>:
 80105d0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80105d4:	428b      	cmp	r3, r1
 80105d6:	bf86      	itte	hi
 80105d8:	3121      	addhi	r1, #33	@ 0x21
 80105da:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80105de:	2000      	movls	r0, #0
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <uxr_get_input_reliable_stream>:
 80105e4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80105e8:	428b      	cmp	r3, r1
 80105ea:	bf83      	ittte	hi
 80105ec:	2318      	movhi	r3, #24
 80105ee:	fb03 0001 	mlahi	r0, r3, r1, r0
 80105f2:	3048      	addhi	r0, #72	@ 0x48
 80105f4:	2000      	movls	r0, #0
 80105f6:	4770      	bx	lr

080105f8 <uxr_output_streams_confirmed>:
 80105f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80105fc:	b183      	cbz	r3, 8010620 <uxr_output_streams_confirmed+0x28>
 80105fe:	b570      	push	{r4, r5, r6, lr}
 8010600:	4606      	mov	r6, r0
 8010602:	f100 0518 	add.w	r5, r0, #24
 8010606:	2400      	movs	r4, #0
 8010608:	e001      	b.n	801060e <uxr_output_streams_confirmed+0x16>
 801060a:	3528      	adds	r5, #40	@ 0x28
 801060c:	b138      	cbz	r0, 801061e <uxr_output_streams_confirmed+0x26>
 801060e:	4628      	mov	r0, r5
 8010610:	f002 fb48 	bl	8012ca4 <uxr_is_output_up_to_date>
 8010614:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010618:	3401      	adds	r4, #1
 801061a:	42a3      	cmp	r3, r4
 801061c:	d8f5      	bhi.n	801060a <uxr_output_streams_confirmed+0x12>
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	2001      	movs	r0, #1
 8010622:	4770      	bx	lr

08010624 <uxr_buffer_submessage_header>:
 8010624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010626:	4604      	mov	r4, r0
 8010628:	460e      	mov	r6, r1
 801062a:	2104      	movs	r1, #4
 801062c:	4615      	mov	r5, r2
 801062e:	461f      	mov	r7, r3
 8010630:	f7f7 fd70 	bl	8008114 <ucdr_align_to>
 8010634:	2301      	movs	r3, #1
 8010636:	ea47 0203 	orr.w	r2, r7, r3
 801063a:	4631      	mov	r1, r6
 801063c:	7523      	strb	r3, [r4, #20]
 801063e:	4620      	mov	r0, r4
 8010640:	462b      	mov	r3, r5
 8010642:	f000 f8d3 	bl	80107ec <uxr_serialize_submessage_header>
 8010646:	4620      	mov	r0, r4
 8010648:	f7f7 fd7a 	bl	8008140 <ucdr_buffer_remaining>
 801064c:	42a8      	cmp	r0, r5
 801064e:	bf34      	ite	cc
 8010650:	2000      	movcc	r0, #0
 8010652:	2001      	movcs	r0, #1
 8010654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010656:	bf00      	nop

08010658 <uxr_read_submessage_header>:
 8010658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065c:	4604      	mov	r4, r0
 801065e:	460d      	mov	r5, r1
 8010660:	2104      	movs	r1, #4
 8010662:	4616      	mov	r6, r2
 8010664:	4698      	mov	r8, r3
 8010666:	f7f7 fd55 	bl	8008114 <ucdr_align_to>
 801066a:	4620      	mov	r0, r4
 801066c:	f7f7 fd68 	bl	8008140 <ucdr_buffer_remaining>
 8010670:	2803      	cmp	r0, #3
 8010672:	bf8c      	ite	hi
 8010674:	2701      	movhi	r7, #1
 8010676:	2700      	movls	r7, #0
 8010678:	d802      	bhi.n	8010680 <uxr_read_submessage_header+0x28>
 801067a:	4638      	mov	r0, r7
 801067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010680:	4633      	mov	r3, r6
 8010682:	4642      	mov	r2, r8
 8010684:	4620      	mov	r0, r4
 8010686:	4629      	mov	r1, r5
 8010688:	f000 f8c4 	bl	8010814 <uxr_deserialize_submessage_header>
 801068c:	f898 3000 	ldrb.w	r3, [r8]
 8010690:	f003 0201 	and.w	r2, r3, #1
 8010694:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010698:	f888 3000 	strb.w	r3, [r8]
 801069c:	7522      	strb	r2, [r4, #20]
 801069e:	4638      	mov	r0, r7
 80106a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106a4 <uxr_submessage_padding>:
 80106a4:	f010 0003 	ands.w	r0, r0, #3
 80106a8:	bf18      	it	ne
 80106aa:	f1c0 0004 	rsbne	r0, r0, #4
 80106ae:	4770      	bx	lr

080106b0 <uxr_millis>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	4669      	mov	r1, sp
 80106b6:	2001      	movs	r0, #1
 80106b8:	f7f0 fd0e 	bl	80010d8 <clock_gettime>
 80106bc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80106c0:	4906      	ldr	r1, [pc, #24]	@ (80106dc <uxr_millis+0x2c>)
 80106c2:	fba0 0301 	umull	r0, r3, r0, r1
 80106c6:	1900      	adds	r0, r0, r4
 80106c8:	fb01 3102 	mla	r1, r1, r2, r3
 80106cc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80106d0:	4a03      	ldr	r2, [pc, #12]	@ (80106e0 <uxr_millis+0x30>)
 80106d2:	2300      	movs	r3, #0
 80106d4:	f7ef fdec 	bl	80002b0 <__aeabi_ldivmod>
 80106d8:	b004      	add	sp, #16
 80106da:	bd10      	pop	{r4, pc}
 80106dc:	3b9aca00 	.word	0x3b9aca00
 80106e0:	000f4240 	.word	0x000f4240

080106e4 <uxr_nanos>:
 80106e4:	b510      	push	{r4, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	4669      	mov	r1, sp
 80106ea:	2001      	movs	r0, #1
 80106ec:	f7f0 fcf4 	bl	80010d8 <clock_gettime>
 80106f0:	4a06      	ldr	r2, [pc, #24]	@ (801070c <uxr_nanos+0x28>)
 80106f2:	9800      	ldr	r0, [sp, #0]
 80106f4:	9902      	ldr	r1, [sp, #8]
 80106f6:	9c01      	ldr	r4, [sp, #4]
 80106f8:	fba0 0302 	umull	r0, r3, r0, r2
 80106fc:	1840      	adds	r0, r0, r1
 80106fe:	fb02 3304 	mla	r3, r2, r4, r3
 8010702:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010706:	b004      	add	sp, #16
 8010708:	bd10      	pop	{r4, pc}
 801070a:	bf00      	nop
 801070c:	3b9aca00 	.word	0x3b9aca00

08010710 <uxr_prepare_output_stream>:
 8010710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010712:	b087      	sub	sp, #28
 8010714:	2707      	movs	r7, #7
 8010716:	9202      	str	r2, [sp, #8]
 8010718:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801071a:	9103      	str	r1, [sp, #12]
 801071c:	2500      	movs	r5, #0
 801071e:	3204      	adds	r2, #4
 8010720:	e9cd 7500 	strd	r7, r5, [sp]
 8010724:	461c      	mov	r4, r3
 8010726:	4606      	mov	r6, r0
 8010728:	f7ff f84c 	bl	800f7c4 <uxr_prepare_stream_to_write_submessage>
 801072c:	f080 0201 	eor.w	r2, r0, #1
 8010730:	b2d2      	uxtb	r2, r2
 8010732:	75a2      	strb	r2, [r4, #22]
 8010734:	b112      	cbz	r2, 801073c <uxr_prepare_output_stream+0x2c>
 8010736:	4628      	mov	r0, r5
 8010738:	b007      	add	sp, #28
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073c:	aa05      	add	r2, sp, #20
 801073e:	9902      	ldr	r1, [sp, #8]
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff f975 	bl	800fa30 <uxr_init_base_object_request>
 8010746:	a905      	add	r1, sp, #20
 8010748:	4605      	mov	r5, r0
 801074a:	4620      	mov	r0, r4
 801074c:	f000 fee6 	bl	801151c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010750:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010754:	69a6      	ldr	r6, [r4, #24]
 8010756:	69e7      	ldr	r7, [r4, #28]
 8010758:	1a52      	subs	r2, r2, r1
 801075a:	4620      	mov	r0, r4
 801075c:	f7f7 fcc0 	bl	80080e0 <ucdr_init_buffer>
 8010760:	4620      	mov	r0, r4
 8010762:	463a      	mov	r2, r7
 8010764:	4631      	mov	r1, r6
 8010766:	f7f7 fc8f 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 801076a:	4628      	mov	r0, r5
 801076c:	b007      	add	sp, #28
 801076e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010770 <uxr_serialize_message_header>:
 8010770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010772:	b083      	sub	sp, #12
 8010774:	4616      	mov	r6, r2
 8010776:	4604      	mov	r4, r0
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	460d      	mov	r5, r1
 801077c:	9f08      	ldr	r7, [sp, #32]
 801077e:	f7fc fe1d 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010782:	4631      	mov	r1, r6
 8010784:	4620      	mov	r0, r4
 8010786:	f7fc fe19 	bl	800d3bc <ucdr_serialize_uint8_t>
 801078a:	9a01      	ldr	r2, [sp, #4]
 801078c:	2101      	movs	r1, #1
 801078e:	4620      	mov	r0, r4
 8010790:	f7fc fec0 	bl	800d514 <ucdr_serialize_endian_uint16_t>
 8010794:	062b      	lsls	r3, r5, #24
 8010796:	d501      	bpl.n	801079c <uxr_serialize_message_header+0x2c>
 8010798:	b003      	add	sp, #12
 801079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079c:	2204      	movs	r2, #4
 801079e:	4639      	mov	r1, r7
 80107a0:	4620      	mov	r0, r4
 80107a2:	b003      	add	sp, #12
 80107a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107a8:	f7fc bd12 	b.w	800d1d0 <ucdr_serialize_array_uint8_t>

080107ac <uxr_deserialize_message_header>:
 80107ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ae:	b083      	sub	sp, #12
 80107b0:	4616      	mov	r6, r2
 80107b2:	4604      	mov	r4, r0
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	460d      	mov	r5, r1
 80107b8:	9f08      	ldr	r7, [sp, #32]
 80107ba:	f7fc fe15 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80107be:	4631      	mov	r1, r6
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7fc fe11 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80107c6:	9a01      	ldr	r2, [sp, #4]
 80107c8:	2101      	movs	r1, #1
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7fc ff96 	bl	800d6fc <ucdr_deserialize_endian_uint16_t>
 80107d0:	f995 3000 	ldrsb.w	r3, [r5]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	da01      	bge.n	80107dc <uxr_deserialize_message_header+0x30>
 80107d8:	b003      	add	sp, #12
 80107da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107dc:	2204      	movs	r2, #4
 80107de:	4639      	mov	r1, r7
 80107e0:	4620      	mov	r0, r4
 80107e2:	b003      	add	sp, #12
 80107e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107e8:	f7fc bd56 	b.w	800d298 <ucdr_deserialize_array_uint8_t>

080107ec <uxr_serialize_submessage_header>:
 80107ec:	b530      	push	{r4, r5, lr}
 80107ee:	b083      	sub	sp, #12
 80107f0:	4615      	mov	r5, r2
 80107f2:	4604      	mov	r4, r0
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	f7fc fde1 	bl	800d3bc <ucdr_serialize_uint8_t>
 80107fa:	4629      	mov	r1, r5
 80107fc:	4620      	mov	r0, r4
 80107fe:	f7fc fddd 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010802:	9a01      	ldr	r2, [sp, #4]
 8010804:	2101      	movs	r1, #1
 8010806:	4620      	mov	r0, r4
 8010808:	b003      	add	sp, #12
 801080a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801080e:	f7fc be81 	b.w	800d514 <ucdr_serialize_endian_uint16_t>
 8010812:	bf00      	nop

08010814 <uxr_deserialize_submessage_header>:
 8010814:	b530      	push	{r4, r5, lr}
 8010816:	b083      	sub	sp, #12
 8010818:	4615      	mov	r5, r2
 801081a:	4604      	mov	r4, r0
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	f7fc fde3 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010822:	4629      	mov	r1, r5
 8010824:	4620      	mov	r0, r4
 8010826:	f7fc fddf 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 801082a:	9a01      	ldr	r2, [sp, #4]
 801082c:	2101      	movs	r1, #1
 801082e:	4620      	mov	r0, r4
 8010830:	b003      	add	sp, #12
 8010832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010836:	f7fc bf61 	b.w	800d6fc <ucdr_deserialize_endian_uint16_t>
 801083a:	bf00      	nop

0801083c <uxr_serialize_CLIENT_Representation>:
 801083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010840:	2204      	movs	r2, #4
 8010842:	460e      	mov	r6, r1
 8010844:	4605      	mov	r5, r0
 8010846:	f7fc fcc3 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 801084a:	2202      	movs	r2, #2
 801084c:	4607      	mov	r7, r0
 801084e:	1d31      	adds	r1, r6, #4
 8010850:	4628      	mov	r0, r5
 8010852:	f7fc fcbd 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010856:	4038      	ands	r0, r7
 8010858:	2202      	movs	r2, #2
 801085a:	1db1      	adds	r1, r6, #6
 801085c:	b2c7      	uxtb	r7, r0
 801085e:	4628      	mov	r0, r5
 8010860:	f7fc fcb6 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010864:	2204      	movs	r2, #4
 8010866:	4007      	ands	r7, r0
 8010868:	f106 0108 	add.w	r1, r6, #8
 801086c:	4628      	mov	r0, r5
 801086e:	f7fc fcaf 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010872:	7b31      	ldrb	r1, [r6, #12]
 8010874:	4007      	ands	r7, r0
 8010876:	4628      	mov	r0, r5
 8010878:	f7fc fda0 	bl	800d3bc <ucdr_serialize_uint8_t>
 801087c:	7b71      	ldrb	r1, [r6, #13]
 801087e:	4007      	ands	r7, r0
 8010880:	4628      	mov	r0, r5
 8010882:	f7fc fd6d 	bl	800d360 <ucdr_serialize_bool>
 8010886:	7b73      	ldrb	r3, [r6, #13]
 8010888:	ea07 0800 	and.w	r8, r7, r0
 801088c:	b93b      	cbnz	r3, 801089e <uxr_serialize_CLIENT_Representation+0x62>
 801088e:	8bb1      	ldrh	r1, [r6, #28]
 8010890:	4628      	mov	r0, r5
 8010892:	f7fc fdbf 	bl	800d414 <ucdr_serialize_uint16_t>
 8010896:	ea08 0000 	and.w	r0, r8, r0
 801089a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801089e:	6931      	ldr	r1, [r6, #16]
 80108a0:	4628      	mov	r0, r5
 80108a2:	f7fc ffa1 	bl	800d7e8 <ucdr_serialize_uint32_t>
 80108a6:	6933      	ldr	r3, [r6, #16]
 80108a8:	b1e3      	cbz	r3, 80108e4 <uxr_serialize_CLIENT_Representation+0xa8>
 80108aa:	b1c0      	cbz	r0, 80108de <uxr_serialize_CLIENT_Representation+0xa2>
 80108ac:	4637      	mov	r7, r6
 80108ae:	f04f 0900 	mov.w	r9, #0
 80108b2:	e001      	b.n	80108b8 <uxr_serialize_CLIENT_Representation+0x7c>
 80108b4:	3708      	adds	r7, #8
 80108b6:	b194      	cbz	r4, 80108de <uxr_serialize_CLIENT_Representation+0xa2>
 80108b8:	6979      	ldr	r1, [r7, #20]
 80108ba:	4628      	mov	r0, r5
 80108bc:	f001 fcbc 	bl	8012238 <ucdr_serialize_string>
 80108c0:	69b9      	ldr	r1, [r7, #24]
 80108c2:	4604      	mov	r4, r0
 80108c4:	4628      	mov	r0, r5
 80108c6:	f001 fcb7 	bl	8012238 <ucdr_serialize_string>
 80108ca:	6933      	ldr	r3, [r6, #16]
 80108cc:	f109 0901 	add.w	r9, r9, #1
 80108d0:	4004      	ands	r4, r0
 80108d2:	4599      	cmp	r9, r3
 80108d4:	b2e4      	uxtb	r4, r4
 80108d6:	d3ed      	bcc.n	80108b4 <uxr_serialize_CLIENT_Representation+0x78>
 80108d8:	ea08 0804 	and.w	r8, r8, r4
 80108dc:	e7d7      	b.n	801088e <uxr_serialize_CLIENT_Representation+0x52>
 80108de:	f04f 0800 	mov.w	r8, #0
 80108e2:	e7d4      	b.n	801088e <uxr_serialize_CLIENT_Representation+0x52>
 80108e4:	ea08 0800 	and.w	r8, r8, r0
 80108e8:	e7d1      	b.n	801088e <uxr_serialize_CLIENT_Representation+0x52>
 80108ea:	bf00      	nop

080108ec <uxr_deserialize_CLIENT_Representation>:
 80108ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f0:	2204      	movs	r2, #4
 80108f2:	460c      	mov	r4, r1
 80108f4:	4605      	mov	r5, r0
 80108f6:	f7fc fccf 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 80108fa:	2202      	movs	r2, #2
 80108fc:	4607      	mov	r7, r0
 80108fe:	1d21      	adds	r1, r4, #4
 8010900:	4628      	mov	r0, r5
 8010902:	f7fc fcc9 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010906:	4038      	ands	r0, r7
 8010908:	2202      	movs	r2, #2
 801090a:	1da1      	adds	r1, r4, #6
 801090c:	b2c6      	uxtb	r6, r0
 801090e:	4628      	mov	r0, r5
 8010910:	f7fc fcc2 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010914:	2204      	movs	r2, #4
 8010916:	4006      	ands	r6, r0
 8010918:	f104 0108 	add.w	r1, r4, #8
 801091c:	4628      	mov	r0, r5
 801091e:	f7fc fcbb 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010922:	f104 010c 	add.w	r1, r4, #12
 8010926:	4006      	ands	r6, r0
 8010928:	4628      	mov	r0, r5
 801092a:	f7fc fd5d 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 801092e:	f104 010d 	add.w	r1, r4, #13
 8010932:	ea06 0700 	and.w	r7, r6, r0
 8010936:	4628      	mov	r0, r5
 8010938:	f7fc fd28 	bl	800d38c <ucdr_deserialize_bool>
 801093c:	7b63      	ldrb	r3, [r4, #13]
 801093e:	4007      	ands	r7, r0
 8010940:	b93b      	cbnz	r3, 8010952 <uxr_deserialize_CLIENT_Representation+0x66>
 8010942:	f104 011c 	add.w	r1, r4, #28
 8010946:	4628      	mov	r0, r5
 8010948:	f7fc fe64 	bl	800d614 <ucdr_deserialize_uint16_t>
 801094c:	4038      	ands	r0, r7
 801094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010952:	f104 0110 	add.w	r1, r4, #16
 8010956:	4628      	mov	r0, r5
 8010958:	f7fd f876 	bl	800da48 <ucdr_deserialize_uint32_t>
 801095c:	6923      	ldr	r3, [r4, #16]
 801095e:	2b01      	cmp	r3, #1
 8010960:	d903      	bls.n	801096a <uxr_deserialize_CLIENT_Representation+0x7e>
 8010962:	2301      	movs	r3, #1
 8010964:	75ab      	strb	r3, [r5, #22]
 8010966:	2700      	movs	r7, #0
 8010968:	e7eb      	b.n	8010942 <uxr_deserialize_CLIENT_Representation+0x56>
 801096a:	b30b      	cbz	r3, 80109b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801096c:	2800      	cmp	r0, #0
 801096e:	d0fa      	beq.n	8010966 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010970:	46a0      	mov	r8, r4
 8010972:	f04f 0900 	mov.w	r9, #0
 8010976:	e001      	b.n	801097c <uxr_deserialize_CLIENT_Representation+0x90>
 8010978:	2e00      	cmp	r6, #0
 801097a:	d0f4      	beq.n	8010966 <uxr_deserialize_CLIENT_Representation+0x7a>
 801097c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010984:	4628      	mov	r0, r5
 8010986:	f001 fc67 	bl	8012258 <ucdr_deserialize_string>
 801098a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801098e:	4606      	mov	r6, r0
 8010990:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010994:	4628      	mov	r0, r5
 8010996:	f001 fc5f 	bl	8012258 <ucdr_deserialize_string>
 801099a:	6923      	ldr	r3, [r4, #16]
 801099c:	f109 0901 	add.w	r9, r9, #1
 80109a0:	4006      	ands	r6, r0
 80109a2:	4599      	cmp	r9, r3
 80109a4:	f108 0808 	add.w	r8, r8, #8
 80109a8:	b2f6      	uxtb	r6, r6
 80109aa:	d3e5      	bcc.n	8010978 <uxr_deserialize_CLIENT_Representation+0x8c>
 80109ac:	4037      	ands	r7, r6
 80109ae:	e7c8      	b.n	8010942 <uxr_deserialize_CLIENT_Representation+0x56>
 80109b0:	4007      	ands	r7, r0
 80109b2:	e7c6      	b.n	8010942 <uxr_deserialize_CLIENT_Representation+0x56>

080109b4 <uxr_serialize_AGENT_Representation>:
 80109b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b8:	2204      	movs	r2, #4
 80109ba:	460f      	mov	r7, r1
 80109bc:	4605      	mov	r5, r0
 80109be:	f7fc fc07 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 80109c2:	2202      	movs	r2, #2
 80109c4:	4604      	mov	r4, r0
 80109c6:	1d39      	adds	r1, r7, #4
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7fc fc01 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 80109ce:	4020      	ands	r0, r4
 80109d0:	2202      	movs	r2, #2
 80109d2:	1db9      	adds	r1, r7, #6
 80109d4:	b2c4      	uxtb	r4, r0
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7fc fbfa 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 80109dc:	7a39      	ldrb	r1, [r7, #8]
 80109de:	4004      	ands	r4, r0
 80109e0:	4628      	mov	r0, r5
 80109e2:	f7fc fcbd 	bl	800d360 <ucdr_serialize_bool>
 80109e6:	7a3b      	ldrb	r3, [r7, #8]
 80109e8:	ea00 0804 	and.w	r8, r0, r4
 80109ec:	b913      	cbnz	r3, 80109f4 <uxr_serialize_AGENT_Representation+0x40>
 80109ee:	4640      	mov	r0, r8
 80109f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109f4:	68f9      	ldr	r1, [r7, #12]
 80109f6:	4628      	mov	r0, r5
 80109f8:	f7fc fef6 	bl	800d7e8 <ucdr_serialize_uint32_t>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	b303      	cbz	r3, 8010a42 <uxr_serialize_AGENT_Representation+0x8e>
 8010a00:	b1d0      	cbz	r0, 8010a38 <uxr_serialize_AGENT_Representation+0x84>
 8010a02:	463e      	mov	r6, r7
 8010a04:	f04f 0900 	mov.w	r9, #0
 8010a08:	e001      	b.n	8010a0e <uxr_serialize_AGENT_Representation+0x5a>
 8010a0a:	3608      	adds	r6, #8
 8010a0c:	b1a4      	cbz	r4, 8010a38 <uxr_serialize_AGENT_Representation+0x84>
 8010a0e:	6931      	ldr	r1, [r6, #16]
 8010a10:	4628      	mov	r0, r5
 8010a12:	f001 fc11 	bl	8012238 <ucdr_serialize_string>
 8010a16:	6971      	ldr	r1, [r6, #20]
 8010a18:	4604      	mov	r4, r0
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f001 fc0c 	bl	8012238 <ucdr_serialize_string>
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f109 0901 	add.w	r9, r9, #1
 8010a26:	4004      	ands	r4, r0
 8010a28:	4599      	cmp	r9, r3
 8010a2a:	b2e4      	uxtb	r4, r4
 8010a2c:	d3ed      	bcc.n	8010a0a <uxr_serialize_AGENT_Representation+0x56>
 8010a2e:	ea08 0804 	and.w	r8, r8, r4
 8010a32:	4640      	mov	r0, r8
 8010a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a38:	f04f 0800 	mov.w	r8, #0
 8010a3c:	4640      	mov	r0, r8
 8010a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a42:	ea08 0800 	and.w	r8, r8, r0
 8010a46:	e7d2      	b.n	80109ee <uxr_serialize_AGENT_Representation+0x3a>

08010a48 <uxr_serialize_DATAWRITER_Representation>:
 8010a48:	b570      	push	{r4, r5, r6, lr}
 8010a4a:	460d      	mov	r5, r1
 8010a4c:	7809      	ldrb	r1, [r1, #0]
 8010a4e:	4606      	mov	r6, r0
 8010a50:	f7fc fcb4 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010a54:	4604      	mov	r4, r0
 8010a56:	b130      	cbz	r0, 8010a66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010a58:	782b      	ldrb	r3, [r5, #0]
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d00c      	beq.n	8010a78 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010a5e:	2b03      	cmp	r3, #3
 8010a60:	d010      	beq.n	8010a84 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d008      	beq.n	8010a78 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010a66:	2202      	movs	r2, #2
 8010a68:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f7fc fbaf 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010a72:	4020      	ands	r0, r4
 8010a74:	b2c0      	uxtb	r0, r0
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	6869      	ldr	r1, [r5, #4]
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f001 fbdc 	bl	8012238 <ucdr_serialize_string>
 8010a80:	4604      	mov	r4, r0
 8010a82:	e7f0      	b.n	8010a66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010a84:	4629      	mov	r1, r5
 8010a86:	4630      	mov	r0, r6
 8010a88:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010a8c:	3104      	adds	r1, #4
 8010a8e:	f7f7 fbc3 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8010a92:	4604      	mov	r4, r0
 8010a94:	e7e7      	b.n	8010a66 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010a96:	bf00      	nop

08010a98 <uxr_serialize_ObjectVariant.part.0>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	780b      	ldrb	r3, [r1, #0]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	2b0d      	cmp	r3, #13
 8010aa4:	d854      	bhi.n	8010b50 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010aa6:	e8df f003 	tbb	[pc, r3]
 8010aaa:	0730      	.short	0x0730
 8010aac:	07071b1b 	.word	0x07071b1b
 8010ab0:	0c530707 	.word	0x0c530707
 8010ab4:	494e0c0c 	.word	0x494e0c0c
 8010ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010abc:	3104      	adds	r1, #4
 8010abe:	f7ff bfc3 	b.w	8010a48 <uxr_serialize_DATAWRITER_Representation>
 8010ac2:	7909      	ldrb	r1, [r1, #4]
 8010ac4:	f7fc fc7a 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010ac8:	b1e8      	cbz	r0, 8010b06 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010aca:	7923      	ldrb	r3, [r4, #4]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d001      	beq.n	8010ad4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d13d      	bne.n	8010b50 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010ad4:	68a1      	ldr	r1, [r4, #8]
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010adc:	f001 bbac 	b.w	8012238 <ucdr_serialize_string>
 8010ae0:	7909      	ldrb	r1, [r1, #4]
 8010ae2:	f7fc fc6b 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	b120      	cbz	r0, 8010af4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010aea:	7923      	ldrb	r3, [r4, #4]
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d039      	beq.n	8010b64 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010af0:	2b03      	cmp	r3, #3
 8010af2:	d02f      	beq.n	8010b54 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010af4:	2202      	movs	r2, #2
 8010af6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010afa:	4628      	mov	r0, r5
 8010afc:	f7fc fb68 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010b00:	4030      	ands	r0, r6
 8010b02:	b2c0      	uxtb	r0, r0
 8010b04:	bd70      	pop	{r4, r5, r6, pc}
 8010b06:	2000      	movs	r0, #0
 8010b08:	bd70      	pop	{r4, r5, r6, pc}
 8010b0a:	7909      	ldrb	r1, [r1, #4]
 8010b0c:	f7fc fc56 	bl	800d3bc <ucdr_serialize_uint8_t>
 8010b10:	4606      	mov	r6, r0
 8010b12:	b158      	cbz	r0, 8010b2c <uxr_serialize_ObjectVariant.part.0+0x94>
 8010b14:	7923      	ldrb	r3, [r4, #4]
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	d003      	beq.n	8010b22 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010b1a:	2b03      	cmp	r3, #3
 8010b1c:	d028      	beq.n	8010b70 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d104      	bne.n	8010b2c <uxr_serialize_ObjectVariant.part.0+0x94>
 8010b22:	68a1      	ldr	r1, [r4, #8]
 8010b24:	4628      	mov	r0, r5
 8010b26:	f001 fb87 	bl	8012238 <ucdr_serialize_string>
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010b30:	4628      	mov	r0, r5
 8010b32:	f7fd f97f 	bl	800de34 <ucdr_serialize_int16_t>
 8010b36:	4030      	ands	r0, r6
 8010b38:	b2c0      	uxtb	r0, r0
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b40:	3104      	adds	r1, #4
 8010b42:	f7ff be7b 	b.w	801083c <uxr_serialize_CLIENT_Representation>
 8010b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b4a:	3104      	adds	r1, #4
 8010b4c:	f7ff bf32 	b.w	80109b4 <uxr_serialize_AGENT_Representation>
 8010b50:	2001      	movs	r0, #1
 8010b52:	bd70      	pop	{r4, r5, r6, pc}
 8010b54:	68a2      	ldr	r2, [r4, #8]
 8010b56:	f104 010c 	add.w	r1, r4, #12
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f7f7 fb5c 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8010b60:	4606      	mov	r6, r0
 8010b62:	e7c7      	b.n	8010af4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010b64:	68a1      	ldr	r1, [r4, #8]
 8010b66:	4628      	mov	r0, r5
 8010b68:	f001 fb66 	bl	8012238 <ucdr_serialize_string>
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	e7c1      	b.n	8010af4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010b70:	68a2      	ldr	r2, [r4, #8]
 8010b72:	f104 010c 	add.w	r1, r4, #12
 8010b76:	4628      	mov	r0, r5
 8010b78:	f7f7 fb4e 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	e7d5      	b.n	8010b2c <uxr_serialize_ObjectVariant.part.0+0x94>

08010b80 <uxr_deserialize_DATAWRITER_Representation>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	4606      	mov	r6, r0
 8010b84:	460d      	mov	r5, r1
 8010b86:	f7fc fc2f 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	b130      	cbz	r0, 8010b9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010b8e:	782b      	ldrb	r3, [r5, #0]
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	d00c      	beq.n	8010bae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010b94:	2b03      	cmp	r3, #3
 8010b96:	d012      	beq.n	8010bbe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d008      	beq.n	8010bae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010b9c:	2202      	movs	r2, #2
 8010b9e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7fc fb78 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010ba8:	4020      	ands	r0, r4
 8010baa:	b2c0      	uxtb	r0, r0
 8010bac:	bd70      	pop	{r4, r5, r6, pc}
 8010bae:	6869      	ldr	r1, [r5, #4]
 8010bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f001 fb4f 	bl	8012258 <ucdr_deserialize_string>
 8010bba:	4604      	mov	r4, r0
 8010bbc:	e7ee      	b.n	8010b9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010bbe:	1d2b      	adds	r3, r5, #4
 8010bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bc4:	f105 0108 	add.w	r1, r5, #8
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f7f7 fb37 	bl	800823c <ucdr_deserialize_sequence_uint8_t>
 8010bce:	4604      	mov	r4, r0
 8010bd0:	e7e4      	b.n	8010b9c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010bd2:	bf00      	nop

08010bd4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	460d      	mov	r5, r1
 8010bd8:	7809      	ldrb	r1, [r1, #0]
 8010bda:	4606      	mov	r6, r0
 8010bdc:	f7fc fbc0 	bl	800d360 <ucdr_serialize_bool>
 8010be0:	782b      	ldrb	r3, [r5, #0]
 8010be2:	4604      	mov	r4, r0
 8010be4:	b94b      	cbnz	r3, 8010bfa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010be6:	7a29      	ldrb	r1, [r5, #8]
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7fc fbb9 	bl	800d360 <ucdr_serialize_bool>
 8010bee:	7a2b      	ldrb	r3, [r5, #8]
 8010bf0:	4004      	ands	r4, r0
 8010bf2:	b2e4      	uxtb	r4, r4
 8010bf4:	b943      	cbnz	r3, 8010c08 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	bd70      	pop	{r4, r5, r6, pc}
 8010bfa:	6869      	ldr	r1, [r5, #4]
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f001 fb1b 	bl	8012238 <ucdr_serialize_string>
 8010c02:	4004      	ands	r4, r0
 8010c04:	b2e4      	uxtb	r4, r4
 8010c06:	e7ee      	b.n	8010be6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010c08:	68e9      	ldr	r1, [r5, #12]
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f001 fb14 	bl	8012238 <ucdr_serialize_string>
 8010c10:	4004      	ands	r4, r0
 8010c12:	4620      	mov	r0, r4
 8010c14:	bd70      	pop	{r4, r5, r6, pc}
 8010c16:	bf00      	nop

08010c18 <uxr_serialize_OBJK_Topic_Binary>:
 8010c18:	b570      	push	{r4, r5, r6, lr}
 8010c1a:	460d      	mov	r5, r1
 8010c1c:	6809      	ldr	r1, [r1, #0]
 8010c1e:	4606      	mov	r6, r0
 8010c20:	f001 fb0a 	bl	8012238 <ucdr_serialize_string>
 8010c24:	7929      	ldrb	r1, [r5, #4]
 8010c26:	4604      	mov	r4, r0
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f7fc fb99 	bl	800d360 <ucdr_serialize_bool>
 8010c2e:	792b      	ldrb	r3, [r5, #4]
 8010c30:	4004      	ands	r4, r0
 8010c32:	b2e4      	uxtb	r4, r4
 8010c34:	b943      	cbnz	r3, 8010c48 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010c36:	7b29      	ldrb	r1, [r5, #12]
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f7fc fb91 	bl	800d360 <ucdr_serialize_bool>
 8010c3e:	7b2b      	ldrb	r3, [r5, #12]
 8010c40:	4004      	ands	r4, r0
 8010c42:	b93b      	cbnz	r3, 8010c54 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010c44:	4620      	mov	r0, r4
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
 8010c48:	68a9      	ldr	r1, [r5, #8]
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f001 faf4 	bl	8012238 <ucdr_serialize_string>
 8010c50:	4004      	ands	r4, r0
 8010c52:	e7f0      	b.n	8010c36 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010c54:	6929      	ldr	r1, [r5, #16]
 8010c56:	4630      	mov	r0, r6
 8010c58:	f001 faee 	bl	8012238 <ucdr_serialize_string>
 8010c5c:	4004      	ands	r4, r0
 8010c5e:	b2e4      	uxtb	r4, r4
 8010c60:	4620      	mov	r0, r4
 8010c62:	bd70      	pop	{r4, r5, r6, pc}

08010c64 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c68:	460c      	mov	r4, r1
 8010c6a:	7809      	ldrb	r1, [r1, #0]
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	f7fc fb77 	bl	800d360 <ucdr_serialize_bool>
 8010c72:	7823      	ldrb	r3, [r4, #0]
 8010c74:	4605      	mov	r5, r0
 8010c76:	b96b      	cbnz	r3, 8010c94 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010c78:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f7fc fb6f 	bl	800d360 <ucdr_serialize_bool>
 8010c82:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010c86:	4005      	ands	r5, r0
 8010c88:	b2ed      	uxtb	r5, r5
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d169      	bne.n	8010d62 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010c8e:	4628      	mov	r0, r5
 8010c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c94:	6861      	ldr	r1, [r4, #4]
 8010c96:	4630      	mov	r0, r6
 8010c98:	f7fc fda6 	bl	800d7e8 <ucdr_serialize_uint32_t>
 8010c9c:	6863      	ldr	r3, [r4, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d06b      	beq.n	8010d7a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d067      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010ca6:	68a1      	ldr	r1, [r4, #8]
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f001 fac5 	bl	8012238 <ucdr_serialize_string>
 8010cae:	6863      	ldr	r3, [r4, #4]
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d953      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d05e      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cb8:	68e1      	ldr	r1, [r4, #12]
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f001 fabc 	bl	8012238 <ucdr_serialize_string>
 8010cc0:	6863      	ldr	r3, [r4, #4]
 8010cc2:	2b02      	cmp	r3, #2
 8010cc4:	d94a      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d055      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cca:	6921      	ldr	r1, [r4, #16]
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f001 fab3 	bl	8012238 <ucdr_serialize_string>
 8010cd2:	6863      	ldr	r3, [r4, #4]
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	d941      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d04c      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cdc:	6961      	ldr	r1, [r4, #20]
 8010cde:	4630      	mov	r0, r6
 8010ce0:	f001 faaa 	bl	8012238 <ucdr_serialize_string>
 8010ce4:	6863      	ldr	r3, [r4, #4]
 8010ce6:	2b04      	cmp	r3, #4
 8010ce8:	d938      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d043      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010cee:	69a1      	ldr	r1, [r4, #24]
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f001 faa1 	bl	8012238 <ucdr_serialize_string>
 8010cf6:	6863      	ldr	r3, [r4, #4]
 8010cf8:	2b05      	cmp	r3, #5
 8010cfa:	d92f      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d03a      	beq.n	8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d00:	69e1      	ldr	r1, [r4, #28]
 8010d02:	4630      	mov	r0, r6
 8010d04:	f001 fa98 	bl	8012238 <ucdr_serialize_string>
 8010d08:	6863      	ldr	r3, [r4, #4]
 8010d0a:	2b06      	cmp	r3, #6
 8010d0c:	d926      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d0e:	b390      	cbz	r0, 8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d10:	6a21      	ldr	r1, [r4, #32]
 8010d12:	4630      	mov	r0, r6
 8010d14:	f001 fa90 	bl	8012238 <ucdr_serialize_string>
 8010d18:	6863      	ldr	r3, [r4, #4]
 8010d1a:	2b07      	cmp	r3, #7
 8010d1c:	d91e      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d1e:	b350      	cbz	r0, 8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010d22:	4630      	mov	r0, r6
 8010d24:	f001 fa88 	bl	8012238 <ucdr_serialize_string>
 8010d28:	6863      	ldr	r3, [r4, #4]
 8010d2a:	2b08      	cmp	r3, #8
 8010d2c:	d916      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d2e:	b310      	cbz	r0, 8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d30:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010d32:	4630      	mov	r0, r6
 8010d34:	f001 fa80 	bl	8012238 <ucdr_serialize_string>
 8010d38:	6863      	ldr	r3, [r4, #4]
 8010d3a:	2b09      	cmp	r3, #9
 8010d3c:	d90e      	bls.n	8010d5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010d3e:	b1d0      	cbz	r0, 8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d40:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010d44:	2709      	movs	r7, #9
 8010d46:	e000      	b.n	8010d4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010d48:	b1a8      	cbz	r0, 8010d76 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010d4a:	f858 1b04 	ldr.w	r1, [r8], #4
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f001 fa72 	bl	8012238 <ucdr_serialize_string>
 8010d54:	6862      	ldr	r2, [r4, #4]
 8010d56:	3701      	adds	r7, #1
 8010d58:	4297      	cmp	r7, r2
 8010d5a:	d3f5      	bcc.n	8010d48 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010d5c:	4005      	ands	r5, r0
 8010d5e:	b2ed      	uxtb	r5, r5
 8010d60:	e78a      	b.n	8010c78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010d62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010d64:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7f7 fa55 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8010d6e:	4005      	ands	r5, r0
 8010d70:	4628      	mov	r0, r5
 8010d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d76:	2500      	movs	r5, #0
 8010d78:	e77e      	b.n	8010c78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010d7a:	4028      	ands	r0, r5
 8010d7c:	b2c5      	uxtb	r5, r0
 8010d7e:	e77b      	b.n	8010c78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08010d80 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	460d      	mov	r5, r1
 8010d84:	7809      	ldrb	r1, [r1, #0]
 8010d86:	4606      	mov	r6, r0
 8010d88:	f7fc faea 	bl	800d360 <ucdr_serialize_bool>
 8010d8c:	782b      	ldrb	r3, [r5, #0]
 8010d8e:	4604      	mov	r4, r0
 8010d90:	b94b      	cbnz	r3, 8010da6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8010d92:	7a29      	ldrb	r1, [r5, #8]
 8010d94:	4630      	mov	r0, r6
 8010d96:	f7fc fae3 	bl	800d360 <ucdr_serialize_bool>
 8010d9a:	7a2b      	ldrb	r3, [r5, #8]
 8010d9c:	4004      	ands	r4, r0
 8010d9e:	b2e4      	uxtb	r4, r4
 8010da0:	b943      	cbnz	r3, 8010db4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8010da2:	4620      	mov	r0, r4
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
 8010da6:	6869      	ldr	r1, [r5, #4]
 8010da8:	4630      	mov	r0, r6
 8010daa:	f001 fa45 	bl	8012238 <ucdr_serialize_string>
 8010dae:	4004      	ands	r4, r0
 8010db0:	b2e4      	uxtb	r4, r4
 8010db2:	e7ee      	b.n	8010d92 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8010db4:	f105 010c 	add.w	r1, r5, #12
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7ff ff53 	bl	8010c64 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8010dbe:	4004      	ands	r4, r0
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	bd70      	pop	{r4, r5, r6, pc}

08010dc4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010dc4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010dc8:	4688      	mov	r8, r1
 8010dca:	8809      	ldrh	r1, [r1, #0]
 8010dcc:	4681      	mov	r9, r0
 8010dce:	f7fc fb21 	bl	800d414 <ucdr_serialize_uint16_t>
 8010dd2:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	4648      	mov	r0, r9
 8010dda:	f7fc fac1 	bl	800d360 <ucdr_serialize_bool>
 8010dde:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010de2:	4006      	ands	r6, r0
 8010de4:	b2f5      	uxtb	r5, r6
 8010de6:	b9eb      	cbnz	r3, 8010e24 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010de8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010dec:	4648      	mov	r0, r9
 8010dee:	f7fc fab7 	bl	800d360 <ucdr_serialize_bool>
 8010df2:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010df6:	4005      	ands	r5, r0
 8010df8:	bb7b      	cbnz	r3, 8010e5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010dfa:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010dfe:	4648      	mov	r0, r9
 8010e00:	f7fc faae 	bl	800d360 <ucdr_serialize_bool>
 8010e04:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010e08:	4005      	ands	r5, r0
 8010e0a:	b9f3      	cbnz	r3, 8010e4a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010e0c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010e10:	4648      	mov	r0, r9
 8010e12:	f7fc faa5 	bl	800d360 <ucdr_serialize_bool>
 8010e16:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010e1a:	4005      	ands	r5, r0
 8010e1c:	b94b      	cbnz	r3, 8010e32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010e1e:	4628      	mov	r0, r5
 8010e20:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010e24:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010e28:	4648      	mov	r0, r9
 8010e2a:	f7fc faf3 	bl	800d414 <ucdr_serialize_uint16_t>
 8010e2e:	4005      	ands	r5, r0
 8010e30:	e7da      	b.n	8010de8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010e32:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010e36:	f108 011c 	add.w	r1, r8, #28
 8010e3a:	4648      	mov	r0, r9
 8010e3c:	f7f7 f9ec 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8010e40:	4028      	ands	r0, r5
 8010e42:	b2c5      	uxtb	r5, r0
 8010e44:	4628      	mov	r0, r5
 8010e46:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010e4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010e4e:	4648      	mov	r0, r9
 8010e50:	f7fc fcca 	bl	800d7e8 <ucdr_serialize_uint32_t>
 8010e54:	4028      	ands	r0, r5
 8010e56:	b2c5      	uxtb	r5, r0
 8010e58:	e7d8      	b.n	8010e0c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010e5a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010e5e:	4648      	mov	r0, r9
 8010e60:	f7fc fcc2 	bl	800d7e8 <ucdr_serialize_uint32_t>
 8010e64:	4028      	ands	r0, r5
 8010e66:	b2c5      	uxtb	r5, r0
 8010e68:	e7c7      	b.n	8010dfa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010e6a:	bf00      	nop

08010e6c <uxr_serialize_OBJK_DataReader_Binary>:
 8010e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6e:	2202      	movs	r2, #2
 8010e70:	460c      	mov	r4, r1
 8010e72:	4606      	mov	r6, r0
 8010e74:	f7fc f9ac 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8010e78:	78a1      	ldrb	r1, [r4, #2]
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	f7fc fa6f 	bl	800d360 <ucdr_serialize_bool>
 8010e82:	78a3      	ldrb	r3, [r4, #2]
 8010e84:	4005      	ands	r5, r0
 8010e86:	b2ed      	uxtb	r5, r5
 8010e88:	b90b      	cbnz	r3, 8010e8e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e8e:	f104 0108 	add.w	r1, r4, #8
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff ff96 	bl	8010dc4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010e98:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010e9c:	4607      	mov	r7, r0
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	f7fc fa5e 	bl	800d360 <ucdr_serialize_bool>
 8010ea4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010ea8:	4038      	ands	r0, r7
 8010eaa:	b2c7      	uxtb	r7, r0
 8010eac:	b95b      	cbnz	r3, 8010ec6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010eae:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7fc fa54 	bl	800d360 <ucdr_serialize_bool>
 8010eb8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010ebc:	4007      	ands	r7, r0
 8010ebe:	b94b      	cbnz	r3, 8010ed4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8010ec0:	403d      	ands	r5, r7
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7fc fee2 	bl	800dc94 <ucdr_serialize_uint64_t>
 8010ed0:	4007      	ands	r7, r0
 8010ed2:	e7ec      	b.n	8010eae <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8010ed4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f001 f9ae 	bl	8012238 <ucdr_serialize_string>
 8010edc:	4007      	ands	r7, r0
 8010ede:	b2ff      	uxtb	r7, r7
 8010ee0:	e7ee      	b.n	8010ec0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010ee2:	bf00      	nop

08010ee4 <uxr_deserialize_ObjectVariant>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	460e      	mov	r6, r1
 8010eea:	f7fc fa7d 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010eee:	b168      	cbz	r0, 8010f0c <uxr_deserialize_ObjectVariant+0x28>
 8010ef0:	7833      	ldrb	r3, [r6, #0]
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	2b0d      	cmp	r3, #13
 8010ef8:	d809      	bhi.n	8010f0e <uxr_deserialize_ObjectVariant+0x2a>
 8010efa:	e8df f003 	tbb	[pc, r3]
 8010efe:	0a41      	.short	0x0a41
 8010f00:	0a0a2323 	.word	0x0a0a2323
 8010f04:	10080a0a 	.word	0x10080a0a
 8010f08:	565c1010 	.word	0x565c1010
 8010f0c:	2400      	movs	r4, #0
 8010f0e:	4620      	mov	r0, r4
 8010f10:	bd70      	pop	{r4, r5, r6, pc}
 8010f12:	1d31      	adds	r1, r6, #4
 8010f14:	4628      	mov	r0, r5
 8010f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f1a:	f7ff be31 	b.w	8010b80 <uxr_deserialize_DATAWRITER_Representation>
 8010f1e:	1d31      	adds	r1, r6, #4
 8010f20:	4628      	mov	r0, r5
 8010f22:	f7fc fa61 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d0f0      	beq.n	8010f0c <uxr_deserialize_ObjectVariant+0x28>
 8010f2a:	7933      	ldrb	r3, [r6, #4]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d001      	beq.n	8010f34 <uxr_deserialize_ObjectVariant+0x50>
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d1ec      	bne.n	8010f0e <uxr_deserialize_ObjectVariant+0x2a>
 8010f34:	68b1      	ldr	r1, [r6, #8]
 8010f36:	4628      	mov	r0, r5
 8010f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f40:	f001 b98a 	b.w	8012258 <ucdr_deserialize_string>
 8010f44:	1d31      	adds	r1, r6, #4
 8010f46:	4628      	mov	r0, r5
 8010f48:	f7fc fa4e 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	b170      	cbz	r0, 8010f6e <uxr_deserialize_ObjectVariant+0x8a>
 8010f50:	7933      	ldrb	r3, [r6, #4]
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d04c      	beq.n	8010ff0 <uxr_deserialize_ObjectVariant+0x10c>
 8010f56:	2b03      	cmp	r3, #3
 8010f58:	d109      	bne.n	8010f6e <uxr_deserialize_ObjectVariant+0x8a>
 8010f5a:	f106 0308 	add.w	r3, r6, #8
 8010f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f62:	f106 010c 	add.w	r1, r6, #12
 8010f66:	4628      	mov	r0, r5
 8010f68:	f7f7 f968 	bl	800823c <ucdr_deserialize_sequence_uint8_t>
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	2202      	movs	r2, #2
 8010f70:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010f74:	4628      	mov	r0, r5
 8010f76:	f7fc f98f 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010f7a:	4020      	ands	r0, r4
 8010f7c:	b2c4      	uxtb	r4, r0
 8010f7e:	e7c6      	b.n	8010f0e <uxr_deserialize_ObjectVariant+0x2a>
 8010f80:	1d31      	adds	r1, r6, #4
 8010f82:	4628      	mov	r0, r5
 8010f84:	f7fc fa30 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	b130      	cbz	r0, 8010f9a <uxr_deserialize_ObjectVariant+0xb6>
 8010f8c:	7933      	ldrb	r3, [r6, #4]
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d036      	beq.n	8011000 <uxr_deserialize_ObjectVariant+0x11c>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d03c      	beq.n	8011010 <uxr_deserialize_ObjectVariant+0x12c>
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d032      	beq.n	8011000 <uxr_deserialize_ObjectVariant+0x11c>
 8010f9a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	f7fc ffc8 	bl	800df34 <ucdr_deserialize_int16_t>
 8010fa4:	4020      	ands	r0, r4
 8010fa6:	b2c4      	uxtb	r4, r0
 8010fa8:	e7b1      	b.n	8010f0e <uxr_deserialize_ObjectVariant+0x2a>
 8010faa:	1d31      	adds	r1, r6, #4
 8010fac:	4628      	mov	r0, r5
 8010fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fb2:	f7ff bc9b 	b.w	80108ec <uxr_deserialize_CLIENT_Representation>
 8010fb6:	2204      	movs	r2, #4
 8010fb8:	18b1      	adds	r1, r6, r2
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f7fc f96c 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010fc0:	2202      	movs	r2, #2
 8010fc2:	f106 0108 	add.w	r1, r6, #8
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f7fc f965 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010fce:	2202      	movs	r2, #2
 8010fd0:	4004      	ands	r4, r0
 8010fd2:	f106 010a 	add.w	r1, r6, #10
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7fc f95e 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8010fdc:	b2e4      	uxtb	r4, r4
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f106 010c 	add.w	r1, r6, #12
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	401c      	ands	r4, r3
 8010fe8:	f7fc f9d0 	bl	800d38c <ucdr_deserialize_bool>
 8010fec:	4004      	ands	r4, r0
 8010fee:	e78e      	b.n	8010f0e <uxr_deserialize_ObjectVariant+0x2a>
 8010ff0:	68b1      	ldr	r1, [r6, #8]
 8010ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f001 f92e 	bl	8012258 <ucdr_deserialize_string>
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	e7b6      	b.n	8010f6e <uxr_deserialize_ObjectVariant+0x8a>
 8011000:	68b1      	ldr	r1, [r6, #8]
 8011002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011006:	4628      	mov	r0, r5
 8011008:	f001 f926 	bl	8012258 <ucdr_deserialize_string>
 801100c:	4604      	mov	r4, r0
 801100e:	e7c4      	b.n	8010f9a <uxr_deserialize_ObjectVariant+0xb6>
 8011010:	f106 0308 	add.w	r3, r6, #8
 8011014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011018:	f106 010c 	add.w	r1, r6, #12
 801101c:	4628      	mov	r0, r5
 801101e:	f7f7 f90d 	bl	800823c <ucdr_deserialize_sequence_uint8_t>
 8011022:	4604      	mov	r4, r0
 8011024:	e7b9      	b.n	8010f9a <uxr_deserialize_ObjectVariant+0xb6>
 8011026:	bf00      	nop

08011028 <uxr_deserialize_BaseObjectRequest>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	2202      	movs	r2, #2
 801102c:	4605      	mov	r5, r0
 801102e:	460e      	mov	r6, r1
 8011030:	f7fc f932 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011034:	2202      	movs	r2, #2
 8011036:	4604      	mov	r4, r0
 8011038:	18b1      	adds	r1, r6, r2
 801103a:	4628      	mov	r0, r5
 801103c:	f7fc f92c 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011040:	4020      	ands	r0, r4
 8011042:	b2c0      	uxtb	r0, r0
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	bf00      	nop

08011048 <uxr_serialize_ActivityInfoVariant>:
 8011048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801104c:	460d      	mov	r5, r1
 801104e:	7809      	ldrb	r1, [r1, #0]
 8011050:	4607      	mov	r7, r0
 8011052:	f7fc f9b3 	bl	800d3bc <ucdr_serialize_uint8_t>
 8011056:	4681      	mov	r9, r0
 8011058:	b138      	cbz	r0, 801106a <uxr_serialize_ActivityInfoVariant+0x22>
 801105a:	782b      	ldrb	r3, [r5, #0]
 801105c:	2b06      	cmp	r3, #6
 801105e:	f000 8082 	beq.w	8011166 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011062:	2b0d      	cmp	r3, #13
 8011064:	d016      	beq.n	8011094 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011066:	2b05      	cmp	r3, #5
 8011068:	d002      	beq.n	8011070 <uxr_serialize_ActivityInfoVariant+0x28>
 801106a:	4648      	mov	r0, r9
 801106c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011070:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011074:	4638      	mov	r0, r7
 8011076:	f7fc fedd 	bl	800de34 <ucdr_serialize_int16_t>
 801107a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801107e:	4681      	mov	r9, r0
 8011080:	4638      	mov	r0, r7
 8011082:	f7fc fe07 	bl	800dc94 <ucdr_serialize_uint64_t>
 8011086:	ea09 0000 	and.w	r0, r9, r0
 801108a:	fa5f f980 	uxtb.w	r9, r0
 801108e:	4648      	mov	r0, r9
 8011090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011094:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011098:	4638      	mov	r0, r7
 801109a:	f7fc fecb 	bl	800de34 <ucdr_serialize_int16_t>
 801109e:	68e9      	ldr	r1, [r5, #12]
 80110a0:	4681      	mov	r9, r0
 80110a2:	4638      	mov	r0, r7
 80110a4:	f7fc fba0 	bl	800d7e8 <ucdr_serialize_uint32_t>
 80110a8:	68eb      	ldr	r3, [r5, #12]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0eb      	beq.n	8011086 <uxr_serialize_ActivityInfoVariant+0x3e>
 80110ae:	b320      	cbz	r0, 80110fa <uxr_serialize_ActivityInfoVariant+0xb2>
 80110b0:	f105 080c 	add.w	r8, r5, #12
 80110b4:	2600      	movs	r6, #0
 80110b6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80110ba:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80110be:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80110c2:	4638      	mov	r0, r7
 80110c4:	f7fc f97a 	bl	800d3bc <ucdr_serialize_uint8_t>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d053      	beq.n	8011174 <uxr_serialize_ActivityInfoVariant+0x12c>
 80110cc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80110d0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80110d4:	0074      	lsls	r4, r6, #1
 80110d6:	00c9      	lsls	r1, r1, #3
 80110d8:	2b03      	cmp	r3, #3
 80110da:	d854      	bhi.n	8011186 <uxr_serialize_ActivityInfoVariant+0x13e>
 80110dc:	e8df f003 	tbb	[pc, r3]
 80110e0:	02102132 	.word	0x02102132
 80110e4:	4441      	add	r1, r8
 80110e6:	4638      	mov	r0, r7
 80110e8:	6889      	ldr	r1, [r1, #8]
 80110ea:	f001 f8a5 	bl	8012238 <ucdr_serialize_string>
 80110ee:	68ea      	ldr	r2, [r5, #12]
 80110f0:	3601      	adds	r6, #1
 80110f2:	4296      	cmp	r6, r2
 80110f4:	d242      	bcs.n	801117c <uxr_serialize_ActivityInfoVariant+0x134>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d1dd      	bne.n	80110b6 <uxr_serialize_ActivityInfoVariant+0x6e>
 80110fa:	f04f 0900 	mov.w	r9, #0
 80110fe:	e7b4      	b.n	801106a <uxr_serialize_ActivityInfoVariant+0x22>
 8011100:	3108      	adds	r1, #8
 8011102:	4441      	add	r1, r8
 8011104:	2210      	movs	r2, #16
 8011106:	4638      	mov	r0, r7
 8011108:	f7fc f862 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 801110c:	4434      	add	r4, r6
 801110e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011112:	4604      	mov	r4, r0
 8011114:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011116:	4638      	mov	r0, r7
 8011118:	f7fc fb66 	bl	800d7e8 <ucdr_serialize_uint32_t>
 801111c:	4020      	ands	r0, r4
 801111e:	b2c0      	uxtb	r0, r0
 8011120:	e7e5      	b.n	80110ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8011122:	3108      	adds	r1, #8
 8011124:	4441      	add	r1, r8
 8011126:	2204      	movs	r2, #4
 8011128:	4638      	mov	r0, r7
 801112a:	f7fc f851 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 801112e:	4434      	add	r4, r6
 8011130:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011134:	4604      	mov	r4, r0
 8011136:	8b19      	ldrh	r1, [r3, #24]
 8011138:	4638      	mov	r0, r7
 801113a:	f7fc f96b 	bl	800d414 <ucdr_serialize_uint16_t>
 801113e:	4020      	ands	r0, r4
 8011140:	b2c0      	uxtb	r0, r0
 8011142:	e7d4      	b.n	80110ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8011144:	3108      	adds	r1, #8
 8011146:	4441      	add	r1, r8
 8011148:	2202      	movs	r2, #2
 801114a:	4638      	mov	r0, r7
 801114c:	f7fc f840 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011150:	4434      	add	r4, r6
 8011152:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011156:	4604      	mov	r4, r0
 8011158:	7d99      	ldrb	r1, [r3, #22]
 801115a:	4638      	mov	r0, r7
 801115c:	f7fc f92e 	bl	800d3bc <ucdr_serialize_uint8_t>
 8011160:	4020      	ands	r0, r4
 8011162:	b2c0      	uxtb	r0, r0
 8011164:	e7c3      	b.n	80110ee <uxr_serialize_ActivityInfoVariant+0xa6>
 8011166:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801116a:	4638      	mov	r0, r7
 801116c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011170:	f7fc be60 	b.w	800de34 <ucdr_serialize_int16_t>
 8011174:	68ea      	ldr	r2, [r5, #12]
 8011176:	3601      	adds	r6, #1
 8011178:	42b2      	cmp	r2, r6
 801117a:	d8be      	bhi.n	80110fa <uxr_serialize_ActivityInfoVariant+0xb2>
 801117c:	ea09 0900 	and.w	r9, r9, r0
 8011180:	fa5f f989 	uxtb.w	r9, r9
 8011184:	e771      	b.n	801106a <uxr_serialize_ActivityInfoVariant+0x22>
 8011186:	68eb      	ldr	r3, [r5, #12]
 8011188:	3601      	adds	r6, #1
 801118a:	429e      	cmp	r6, r3
 801118c:	f10a 0a18 	add.w	sl, sl, #24
 8011190:	d395      	bcc.n	80110be <uxr_serialize_ActivityInfoVariant+0x76>
 8011192:	e76a      	b.n	801106a <uxr_serialize_ActivityInfoVariant+0x22>

08011194 <uxr_deserialize_BaseObjectReply>:
 8011194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	2202      	movs	r2, #2
 801119a:	4606      	mov	r6, r0
 801119c:	460f      	mov	r7, r1
 801119e:	f7fc f87b 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 80111a2:	2202      	movs	r2, #2
 80111a4:	18b9      	adds	r1, r7, r2
 80111a6:	4605      	mov	r5, r0
 80111a8:	4630      	mov	r0, r6
 80111aa:	f7fc f875 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 80111ae:	1d39      	adds	r1, r7, #4
 80111b0:	4680      	mov	r8, r0
 80111b2:	4630      	mov	r0, r6
 80111b4:	f7fc f918 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80111b8:	1d79      	adds	r1, r7, #5
 80111ba:	4604      	mov	r4, r0
 80111bc:	4630      	mov	r0, r6
 80111be:	f7fc f913 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80111c2:	ea05 0508 	and.w	r5, r5, r8
 80111c6:	402c      	ands	r4, r5
 80111c8:	4020      	ands	r0, r4
 80111ca:	b2c0      	uxtb	r0, r0
 80111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111d0 <uxr_serialize_ReadSpecification>:
 80111d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d4:	460e      	mov	r6, r1
 80111d6:	7809      	ldrb	r1, [r1, #0]
 80111d8:	4607      	mov	r7, r0
 80111da:	f7fc f8ef 	bl	800d3bc <ucdr_serialize_uint8_t>
 80111de:	7871      	ldrb	r1, [r6, #1]
 80111e0:	4604      	mov	r4, r0
 80111e2:	4638      	mov	r0, r7
 80111e4:	f7fc f8ea 	bl	800d3bc <ucdr_serialize_uint8_t>
 80111e8:	78b1      	ldrb	r1, [r6, #2]
 80111ea:	4004      	ands	r4, r0
 80111ec:	4638      	mov	r0, r7
 80111ee:	f7fc f8b7 	bl	800d360 <ucdr_serialize_bool>
 80111f2:	78b3      	ldrb	r3, [r6, #2]
 80111f4:	b2e4      	uxtb	r4, r4
 80111f6:	4004      	ands	r4, r0
 80111f8:	b94b      	cbnz	r3, 801120e <uxr_serialize_ReadSpecification+0x3e>
 80111fa:	7a31      	ldrb	r1, [r6, #8]
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7fc f8af 	bl	800d360 <ucdr_serialize_bool>
 8011202:	7a33      	ldrb	r3, [r6, #8]
 8011204:	4004      	ands	r4, r0
 8011206:	b943      	cbnz	r3, 801121a <uxr_serialize_ReadSpecification+0x4a>
 8011208:	4620      	mov	r0, r4
 801120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120e:	6871      	ldr	r1, [r6, #4]
 8011210:	4638      	mov	r0, r7
 8011212:	f001 f811 	bl	8012238 <ucdr_serialize_string>
 8011216:	4004      	ands	r4, r0
 8011218:	e7ef      	b.n	80111fa <uxr_serialize_ReadSpecification+0x2a>
 801121a:	8971      	ldrh	r1, [r6, #10]
 801121c:	4638      	mov	r0, r7
 801121e:	f7fc f8f9 	bl	800d414 <ucdr_serialize_uint16_t>
 8011222:	89b1      	ldrh	r1, [r6, #12]
 8011224:	4605      	mov	r5, r0
 8011226:	4638      	mov	r0, r7
 8011228:	f7fc f8f4 	bl	800d414 <ucdr_serialize_uint16_t>
 801122c:	89f1      	ldrh	r1, [r6, #14]
 801122e:	4005      	ands	r5, r0
 8011230:	4638      	mov	r0, r7
 8011232:	f7fc f8ef 	bl	800d414 <ucdr_serialize_uint16_t>
 8011236:	8a31      	ldrh	r1, [r6, #16]
 8011238:	4680      	mov	r8, r0
 801123a:	4638      	mov	r0, r7
 801123c:	f7fc f8ea 	bl	800d414 <ucdr_serialize_uint16_t>
 8011240:	b2ed      	uxtb	r5, r5
 8011242:	4025      	ands	r5, r4
 8011244:	ea08 0505 	and.w	r5, r8, r5
 8011248:	ea00 0405 	and.w	r4, r0, r5
 801124c:	4620      	mov	r0, r4
 801124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011252:	bf00      	nop

08011254 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011254:	f7ff baf2 	b.w	801083c <uxr_serialize_CLIENT_Representation>

08011258 <uxr_serialize_CREATE_Payload>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	2202      	movs	r2, #2
 801125c:	4607      	mov	r7, r0
 801125e:	460e      	mov	r6, r1
 8011260:	f7fb ffb6 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011264:	2202      	movs	r2, #2
 8011266:	18b1      	adds	r1, r6, r2
 8011268:	4605      	mov	r5, r0
 801126a:	4638      	mov	r0, r7
 801126c:	f7fb ffb0 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011270:	7931      	ldrb	r1, [r6, #4]
 8011272:	4604      	mov	r4, r0
 8011274:	4638      	mov	r0, r7
 8011276:	f7fc f8a1 	bl	800d3bc <ucdr_serialize_uint8_t>
 801127a:	b170      	cbz	r0, 801129a <uxr_serialize_CREATE_Payload+0x42>
 801127c:	7933      	ldrb	r3, [r6, #4]
 801127e:	402c      	ands	r4, r5
 8011280:	3b01      	subs	r3, #1
 8011282:	b2e4      	uxtb	r4, r4
 8011284:	2b0d      	cmp	r3, #13
 8011286:	d809      	bhi.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 8011288:	e8df f003 	tbb	[pc, r3]
 801128c:	23230a4c 	.word	0x23230a4c
 8011290:	0a0a0a0a 	.word	0x0a0a0a0a
 8011294:	12121208 	.word	0x12121208
 8011298:	3e45      	.short	0x3e45
 801129a:	2400      	movs	r4, #0
 801129c:	4620      	mov	r0, r4
 801129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a0:	f106 0108 	add.w	r1, r6, #8
 80112a4:	4638      	mov	r0, r7
 80112a6:	f7ff fbcf 	bl	8010a48 <uxr_serialize_DATAWRITER_Representation>
 80112aa:	4004      	ands	r4, r0
 80112ac:	4620      	mov	r0, r4
 80112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b0:	7a31      	ldrb	r1, [r6, #8]
 80112b2:	4638      	mov	r0, r7
 80112b4:	f7fc f882 	bl	800d3bc <ucdr_serialize_uint8_t>
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d0ee      	beq.n	801129a <uxr_serialize_CREATE_Payload+0x42>
 80112bc:	7a33      	ldrb	r3, [r6, #8]
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d001      	beq.n	80112c6 <uxr_serialize_CREATE_Payload+0x6e>
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d1ea      	bne.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 80112c6:	68f1      	ldr	r1, [r6, #12]
 80112c8:	4638      	mov	r0, r7
 80112ca:	f000 ffb5 	bl	8012238 <ucdr_serialize_string>
 80112ce:	4004      	ands	r4, r0
 80112d0:	e7e4      	b.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 80112d2:	7a31      	ldrb	r1, [r6, #8]
 80112d4:	4638      	mov	r0, r7
 80112d6:	f7fc f871 	bl	800d3bc <ucdr_serialize_uint8_t>
 80112da:	4605      	mov	r5, r0
 80112dc:	b158      	cbz	r0, 80112f6 <uxr_serialize_CREATE_Payload+0x9e>
 80112de:	7a33      	ldrb	r3, [r6, #8]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d034      	beq.n	801134e <uxr_serialize_CREATE_Payload+0xf6>
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d106      	bne.n	80112f6 <uxr_serialize_CREATE_Payload+0x9e>
 80112e8:	68f2      	ldr	r2, [r6, #12]
 80112ea:	f106 0110 	add.w	r1, r6, #16
 80112ee:	4638      	mov	r0, r7
 80112f0:	f7f6 ff92 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 80112f4:	4605      	mov	r5, r0
 80112f6:	2202      	movs	r2, #2
 80112f8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80112fc:	4638      	mov	r0, r7
 80112fe:	f7fb ff67 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011302:	4028      	ands	r0, r5
 8011304:	4004      	ands	r4, r0
 8011306:	e7c9      	b.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 8011308:	f106 0108 	add.w	r1, r6, #8
 801130c:	4638      	mov	r0, r7
 801130e:	f7ff fa95 	bl	801083c <uxr_serialize_CLIENT_Representation>
 8011312:	4004      	ands	r4, r0
 8011314:	e7c2      	b.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 8011316:	f106 0108 	add.w	r1, r6, #8
 801131a:	4638      	mov	r0, r7
 801131c:	f7ff fb4a 	bl	80109b4 <uxr_serialize_AGENT_Representation>
 8011320:	4004      	ands	r4, r0
 8011322:	e7bb      	b.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 8011324:	7a31      	ldrb	r1, [r6, #8]
 8011326:	4638      	mov	r0, r7
 8011328:	f7fc f848 	bl	800d3bc <ucdr_serialize_uint8_t>
 801132c:	4605      	mov	r5, r0
 801132e:	b130      	cbz	r0, 801133e <uxr_serialize_CREATE_Payload+0xe6>
 8011330:	7a33      	ldrb	r3, [r6, #8]
 8011332:	2b02      	cmp	r3, #2
 8011334:	d011      	beq.n	801135a <uxr_serialize_CREATE_Payload+0x102>
 8011336:	2b03      	cmp	r3, #3
 8011338:	d015      	beq.n	8011366 <uxr_serialize_CREATE_Payload+0x10e>
 801133a:	2b01      	cmp	r3, #1
 801133c:	d00d      	beq.n	801135a <uxr_serialize_CREATE_Payload+0x102>
 801133e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011342:	4638      	mov	r0, r7
 8011344:	f7fc fd76 	bl	800de34 <ucdr_serialize_int16_t>
 8011348:	4028      	ands	r0, r5
 801134a:	4004      	ands	r4, r0
 801134c:	e7a6      	b.n	801129c <uxr_serialize_CREATE_Payload+0x44>
 801134e:	68f1      	ldr	r1, [r6, #12]
 8011350:	4638      	mov	r0, r7
 8011352:	f000 ff71 	bl	8012238 <ucdr_serialize_string>
 8011356:	4605      	mov	r5, r0
 8011358:	e7cd      	b.n	80112f6 <uxr_serialize_CREATE_Payload+0x9e>
 801135a:	68f1      	ldr	r1, [r6, #12]
 801135c:	4638      	mov	r0, r7
 801135e:	f000 ff6b 	bl	8012238 <ucdr_serialize_string>
 8011362:	4605      	mov	r5, r0
 8011364:	e7eb      	b.n	801133e <uxr_serialize_CREATE_Payload+0xe6>
 8011366:	68f2      	ldr	r2, [r6, #12]
 8011368:	f106 0110 	add.w	r1, r6, #16
 801136c:	4638      	mov	r0, r7
 801136e:	f7f6 ff53 	bl	8008218 <ucdr_serialize_sequence_uint8_t>
 8011372:	4605      	mov	r5, r0
 8011374:	e7e3      	b.n	801133e <uxr_serialize_CREATE_Payload+0xe6>
 8011376:	bf00      	nop

08011378 <uxr_deserialize_GET_INFO_Payload>:
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	2202      	movs	r2, #2
 801137c:	4605      	mov	r5, r0
 801137e:	460e      	mov	r6, r1
 8011380:	f7fb ff8a 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011384:	2202      	movs	r2, #2
 8011386:	18b1      	adds	r1, r6, r2
 8011388:	4604      	mov	r4, r0
 801138a:	4628      	mov	r0, r5
 801138c:	f7fb ff84 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011390:	1d31      	adds	r1, r6, #4
 8011392:	4004      	ands	r4, r0
 8011394:	4628      	mov	r0, r5
 8011396:	f7fc fb57 	bl	800da48 <ucdr_deserialize_uint32_t>
 801139a:	b2e4      	uxtb	r4, r4
 801139c:	4020      	ands	r0, r4
 801139e:	bd70      	pop	{r4, r5, r6, pc}

080113a0 <uxr_serialize_DELETE_Payload>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	2202      	movs	r2, #2
 80113a4:	4605      	mov	r5, r0
 80113a6:	460e      	mov	r6, r1
 80113a8:	f7fb ff12 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 80113ac:	2202      	movs	r2, #2
 80113ae:	4604      	mov	r4, r0
 80113b0:	18b1      	adds	r1, r6, r2
 80113b2:	4628      	mov	r0, r5
 80113b4:	f7fb ff0c 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 80113b8:	4020      	ands	r0, r4
 80113ba:	b2c0      	uxtb	r0, r0
 80113bc:	bd70      	pop	{r4, r5, r6, pc}
 80113be:	bf00      	nop

080113c0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80113c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c4:	4605      	mov	r5, r0
 80113c6:	460e      	mov	r6, r1
 80113c8:	f7fc f80e 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80113cc:	1c71      	adds	r1, r6, #1
 80113ce:	4604      	mov	r4, r0
 80113d0:	4628      	mov	r0, r5
 80113d2:	f7fc f809 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80113d6:	2204      	movs	r2, #4
 80113d8:	18b1      	adds	r1, r6, r2
 80113da:	4680      	mov	r8, r0
 80113dc:	4628      	mov	r0, r5
 80113de:	f7fb ff5b 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 80113e2:	f106 0108 	add.w	r1, r6, #8
 80113e6:	4607      	mov	r7, r0
 80113e8:	2202      	movs	r2, #2
 80113ea:	4628      	mov	r0, r5
 80113ec:	f7fb ff54 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 80113f0:	ea04 0308 	and.w	r3, r4, r8
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	ea03 0407 	and.w	r4, r3, r7
 80113fa:	2202      	movs	r2, #2
 80113fc:	4607      	mov	r7, r0
 80113fe:	f106 010a 	add.w	r1, r6, #10
 8011402:	4628      	mov	r0, r5
 8011404:	f7fb ff48 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011408:	f106 010c 	add.w	r1, r6, #12
 801140c:	4603      	mov	r3, r0
 801140e:	4628      	mov	r0, r5
 8011410:	461d      	mov	r5, r3
 8011412:	f7fb ffbb 	bl	800d38c <ucdr_deserialize_bool>
 8011416:	403c      	ands	r4, r7
 8011418:	4025      	ands	r5, r4
 801141a:	4028      	ands	r0, r5
 801141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011420 <uxr_deserialize_STATUS_Payload>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	2202      	movs	r2, #2
 8011426:	4606      	mov	r6, r0
 8011428:	460f      	mov	r7, r1
 801142a:	f7fb ff35 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801142e:	2202      	movs	r2, #2
 8011430:	18b9      	adds	r1, r7, r2
 8011432:	4605      	mov	r5, r0
 8011434:	4630      	mov	r0, r6
 8011436:	f7fb ff2f 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801143a:	1d39      	adds	r1, r7, #4
 801143c:	4680      	mov	r8, r0
 801143e:	4630      	mov	r0, r6
 8011440:	f7fb ffd2 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8011444:	1d79      	adds	r1, r7, #5
 8011446:	4604      	mov	r4, r0
 8011448:	4630      	mov	r0, r6
 801144a:	f7fb ffcd 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 801144e:	ea05 0508 	and.w	r5, r5, r8
 8011452:	402c      	ands	r4, r5
 8011454:	4020      	ands	r0, r4
 8011456:	b2c0      	uxtb	r0, r0
 8011458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801145c <uxr_serialize_INFO_Payload>:
 801145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011460:	2202      	movs	r2, #2
 8011462:	460c      	mov	r4, r1
 8011464:	4605      	mov	r5, r0
 8011466:	f7fb feb3 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 801146a:	2202      	movs	r2, #2
 801146c:	18a1      	adds	r1, r4, r2
 801146e:	4680      	mov	r8, r0
 8011470:	4628      	mov	r0, r5
 8011472:	f7fb fead 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011476:	7921      	ldrb	r1, [r4, #4]
 8011478:	4607      	mov	r7, r0
 801147a:	4628      	mov	r0, r5
 801147c:	f7fb ff9e 	bl	800d3bc <ucdr_serialize_uint8_t>
 8011480:	7961      	ldrb	r1, [r4, #5]
 8011482:	4606      	mov	r6, r0
 8011484:	4628      	mov	r0, r5
 8011486:	f7fb ff99 	bl	800d3bc <ucdr_serialize_uint8_t>
 801148a:	ea08 0807 	and.w	r8, r8, r7
 801148e:	ea06 0608 	and.w	r6, r6, r8
 8011492:	4006      	ands	r6, r0
 8011494:	7a21      	ldrb	r1, [r4, #8]
 8011496:	4628      	mov	r0, r5
 8011498:	f7fb ff62 	bl	800d360 <ucdr_serialize_bool>
 801149c:	7a23      	ldrb	r3, [r4, #8]
 801149e:	b2f7      	uxtb	r7, r6
 80114a0:	4606      	mov	r6, r0
 80114a2:	b96b      	cbnz	r3, 80114c0 <uxr_serialize_INFO_Payload+0x64>
 80114a4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80114a8:	4628      	mov	r0, r5
 80114aa:	f7fb ff59 	bl	800d360 <ucdr_serialize_bool>
 80114ae:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80114b2:	4030      	ands	r0, r6
 80114b4:	b2c6      	uxtb	r6, r0
 80114b6:	b983      	cbnz	r3, 80114da <uxr_serialize_INFO_Payload+0x7e>
 80114b8:	ea06 0007 	and.w	r0, r6, r7
 80114bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c0:	7b21      	ldrb	r1, [r4, #12]
 80114c2:	4628      	mov	r0, r5
 80114c4:	f7fb ff7a 	bl	800d3bc <ucdr_serialize_uint8_t>
 80114c8:	b188      	cbz	r0, 80114ee <uxr_serialize_INFO_Payload+0x92>
 80114ca:	f104 010c 	add.w	r1, r4, #12
 80114ce:	4628      	mov	r0, r5
 80114d0:	f7ff fae2 	bl	8010a98 <uxr_serialize_ObjectVariant.part.0>
 80114d4:	4030      	ands	r0, r6
 80114d6:	b2c6      	uxtb	r6, r0
 80114d8:	e7e4      	b.n	80114a4 <uxr_serialize_INFO_Payload+0x48>
 80114da:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80114de:	4628      	mov	r0, r5
 80114e0:	f7ff fdb2 	bl	8011048 <uxr_serialize_ActivityInfoVariant>
 80114e4:	4006      	ands	r6, r0
 80114e6:	ea06 0007 	and.w	r0, r6, r7
 80114ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ee:	4606      	mov	r6, r0
 80114f0:	e7d8      	b.n	80114a4 <uxr_serialize_INFO_Payload+0x48>
 80114f2:	bf00      	nop

080114f4 <uxr_serialize_READ_DATA_Payload>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	2202      	movs	r2, #2
 80114f8:	4605      	mov	r5, r0
 80114fa:	460e      	mov	r6, r1
 80114fc:	f7fb fe68 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011500:	2202      	movs	r2, #2
 8011502:	18b1      	adds	r1, r6, r2
 8011504:	4604      	mov	r4, r0
 8011506:	4628      	mov	r0, r5
 8011508:	f7fb fe62 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 801150c:	1d31      	adds	r1, r6, #4
 801150e:	4004      	ands	r4, r0
 8011510:	4628      	mov	r0, r5
 8011512:	f7ff fe5d 	bl	80111d0 <uxr_serialize_ReadSpecification>
 8011516:	b2e4      	uxtb	r4, r4
 8011518:	4020      	ands	r0, r4
 801151a:	bd70      	pop	{r4, r5, r6, pc}

0801151c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	2202      	movs	r2, #2
 8011520:	4605      	mov	r5, r0
 8011522:	460e      	mov	r6, r1
 8011524:	f7fb fe54 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011528:	2202      	movs	r2, #2
 801152a:	4604      	mov	r4, r0
 801152c:	18b1      	adds	r1, r6, r2
 801152e:	4628      	mov	r0, r5
 8011530:	f7fb fe4e 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011534:	4020      	ands	r0, r4
 8011536:	b2c0      	uxtb	r0, r0
 8011538:	bd70      	pop	{r4, r5, r6, pc}
 801153a:	bf00      	nop

0801153c <uxr_serialize_ACKNACK_Payload>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	460c      	mov	r4, r1
 8011540:	460e      	mov	r6, r1
 8011542:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011546:	4605      	mov	r5, r0
 8011548:	f7fb ff64 	bl	800d414 <ucdr_serialize_uint16_t>
 801154c:	2202      	movs	r2, #2
 801154e:	4621      	mov	r1, r4
 8011550:	4604      	mov	r4, r0
 8011552:	4628      	mov	r0, r5
 8011554:	f7fb fe3c 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011558:	7931      	ldrb	r1, [r6, #4]
 801155a:	4004      	ands	r4, r0
 801155c:	4628      	mov	r0, r5
 801155e:	f7fb ff2d 	bl	800d3bc <ucdr_serialize_uint8_t>
 8011562:	b2e4      	uxtb	r4, r4
 8011564:	4020      	ands	r0, r4
 8011566:	bd70      	pop	{r4, r5, r6, pc}

08011568 <uxr_deserialize_ACKNACK_Payload>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	4605      	mov	r5, r0
 801156c:	460e      	mov	r6, r1
 801156e:	f7fc f851 	bl	800d614 <ucdr_deserialize_uint16_t>
 8011572:	2202      	movs	r2, #2
 8011574:	18b1      	adds	r1, r6, r2
 8011576:	4604      	mov	r4, r0
 8011578:	4628      	mov	r0, r5
 801157a:	f7fb fe8d 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801157e:	1d31      	adds	r1, r6, #4
 8011580:	4004      	ands	r4, r0
 8011582:	4628      	mov	r0, r5
 8011584:	f7fb ff30 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 8011588:	b2e4      	uxtb	r4, r4
 801158a:	4020      	ands	r0, r4
 801158c:	bd70      	pop	{r4, r5, r6, pc}
 801158e:	bf00      	nop

08011590 <uxr_serialize_HEARTBEAT_Payload>:
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	460d      	mov	r5, r1
 8011594:	8809      	ldrh	r1, [r1, #0]
 8011596:	4606      	mov	r6, r0
 8011598:	f7fb ff3c 	bl	800d414 <ucdr_serialize_uint16_t>
 801159c:	8869      	ldrh	r1, [r5, #2]
 801159e:	4604      	mov	r4, r0
 80115a0:	4630      	mov	r0, r6
 80115a2:	f7fb ff37 	bl	800d414 <ucdr_serialize_uint16_t>
 80115a6:	7929      	ldrb	r1, [r5, #4]
 80115a8:	4004      	ands	r4, r0
 80115aa:	4630      	mov	r0, r6
 80115ac:	f7fb ff06 	bl	800d3bc <ucdr_serialize_uint8_t>
 80115b0:	b2e4      	uxtb	r4, r4
 80115b2:	4020      	ands	r0, r4
 80115b4:	bd70      	pop	{r4, r5, r6, pc}
 80115b6:	bf00      	nop

080115b8 <uxr_deserialize_HEARTBEAT_Payload>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	4605      	mov	r5, r0
 80115bc:	460e      	mov	r6, r1
 80115be:	f7fc f829 	bl	800d614 <ucdr_deserialize_uint16_t>
 80115c2:	1cb1      	adds	r1, r6, #2
 80115c4:	4604      	mov	r4, r0
 80115c6:	4628      	mov	r0, r5
 80115c8:	f7fc f824 	bl	800d614 <ucdr_deserialize_uint16_t>
 80115cc:	1d31      	adds	r1, r6, #4
 80115ce:	4004      	ands	r4, r0
 80115d0:	4628      	mov	r0, r5
 80115d2:	f7fb ff09 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80115d6:	b2e4      	uxtb	r4, r4
 80115d8:	4020      	ands	r0, r4
 80115da:	bd70      	pop	{r4, r5, r6, pc}

080115dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80115dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e0:	4605      	mov	r5, r0
 80115e2:	460e      	mov	r6, r1
 80115e4:	f7fc fdb2 	bl	800e14c <ucdr_deserialize_int32_t>
 80115e8:	1d31      	adds	r1, r6, #4
 80115ea:	4607      	mov	r7, r0
 80115ec:	4628      	mov	r0, r5
 80115ee:	f7fc fa2b 	bl	800da48 <ucdr_deserialize_uint32_t>
 80115f2:	f106 0108 	add.w	r1, r6, #8
 80115f6:	4680      	mov	r8, r0
 80115f8:	4628      	mov	r0, r5
 80115fa:	f7fc fda7 	bl	800e14c <ucdr_deserialize_int32_t>
 80115fe:	f106 010c 	add.w	r1, r6, #12
 8011602:	4604      	mov	r4, r0
 8011604:	4628      	mov	r0, r5
 8011606:	f7fc fa1f 	bl	800da48 <ucdr_deserialize_uint32_t>
 801160a:	ea07 0708 	and.w	r7, r7, r8
 801160e:	403c      	ands	r4, r7
 8011610:	f106 0110 	add.w	r1, r6, #16
 8011614:	4004      	ands	r4, r0
 8011616:	4628      	mov	r0, r5
 8011618:	f7fc fd98 	bl	800e14c <ucdr_deserialize_int32_t>
 801161c:	f106 0114 	add.w	r1, r6, #20
 8011620:	4607      	mov	r7, r0
 8011622:	4628      	mov	r0, r5
 8011624:	f7fc fa10 	bl	800da48 <ucdr_deserialize_uint32_t>
 8011628:	b2e4      	uxtb	r4, r4
 801162a:	403c      	ands	r4, r7
 801162c:	4020      	ands	r0, r4
 801162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011632:	bf00      	nop

08011634 <uxr_serialize_SampleIdentity>:
 8011634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011638:	220c      	movs	r2, #12
 801163a:	4604      	mov	r4, r0
 801163c:	460d      	mov	r5, r1
 801163e:	f7fb fdc7 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011642:	2203      	movs	r2, #3
 8011644:	f105 010c 	add.w	r1, r5, #12
 8011648:	4607      	mov	r7, r0
 801164a:	4620      	mov	r0, r4
 801164c:	f7fb fdc0 	bl	800d1d0 <ucdr_serialize_array_uint8_t>
 8011650:	7be9      	ldrb	r1, [r5, #15]
 8011652:	4680      	mov	r8, r0
 8011654:	4620      	mov	r0, r4
 8011656:	f7fb feb1 	bl	800d3bc <ucdr_serialize_uint8_t>
 801165a:	6929      	ldr	r1, [r5, #16]
 801165c:	4606      	mov	r6, r0
 801165e:	4620      	mov	r0, r4
 8011660:	f7fc fcdc 	bl	800e01c <ucdr_serialize_int32_t>
 8011664:	6969      	ldr	r1, [r5, #20]
 8011666:	4603      	mov	r3, r0
 8011668:	4620      	mov	r0, r4
 801166a:	ea07 0708 	and.w	r7, r7, r8
 801166e:	461c      	mov	r4, r3
 8011670:	f7fc f8ba 	bl	800d7e8 <ucdr_serialize_uint32_t>
 8011674:	403e      	ands	r6, r7
 8011676:	4034      	ands	r4, r6
 8011678:	4020      	ands	r0, r4
 801167a:	b2c0      	uxtb	r0, r0
 801167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011680 <uxr_deserialize_SampleIdentity>:
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	220c      	movs	r2, #12
 8011686:	4604      	mov	r4, r0
 8011688:	460d      	mov	r5, r1
 801168a:	f7fb fe05 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801168e:	2203      	movs	r2, #3
 8011690:	f105 010c 	add.w	r1, r5, #12
 8011694:	4607      	mov	r7, r0
 8011696:	4620      	mov	r0, r4
 8011698:	f7fb fdfe 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801169c:	f105 010f 	add.w	r1, r5, #15
 80116a0:	4680      	mov	r8, r0
 80116a2:	4620      	mov	r0, r4
 80116a4:	f7fb fea0 	bl	800d3e8 <ucdr_deserialize_uint8_t>
 80116a8:	f105 0110 	add.w	r1, r5, #16
 80116ac:	4606      	mov	r6, r0
 80116ae:	4620      	mov	r0, r4
 80116b0:	f7fc fd4c 	bl	800e14c <ucdr_deserialize_int32_t>
 80116b4:	f105 0114 	add.w	r1, r5, #20
 80116b8:	4603      	mov	r3, r0
 80116ba:	4620      	mov	r0, r4
 80116bc:	ea07 0708 	and.w	r7, r7, r8
 80116c0:	461c      	mov	r4, r3
 80116c2:	f7fc f9c1 	bl	800da48 <ucdr_deserialize_uint32_t>
 80116c6:	403e      	ands	r6, r7
 80116c8:	4034      	ands	r4, r6
 80116ca:	4020      	ands	r0, r4
 80116cc:	b2c0      	uxtb	r0, r0
 80116ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d2:	bf00      	nop

080116d4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80116d4:	280b      	cmp	r0, #11
 80116d6:	dc0d      	bgt.n	80116f4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80116d8:	2800      	cmp	r0, #0
 80116da:	db09      	blt.n	80116f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80116dc:	280b      	cmp	r0, #11
 80116de:	d807      	bhi.n	80116f0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80116e0:	e8df f000 	tbb	[pc, r0]
 80116e4:	07060607 	.word	0x07060607
 80116e8:	06060606 	.word	0x06060606
 80116ec:	07070606 	.word	0x07070606
 80116f0:	2001      	movs	r0, #1
 80116f2:	4770      	bx	lr
 80116f4:	28cb      	cmp	r0, #203	@ 0xcb
 80116f6:	bf18      	it	ne
 80116f8:	2001      	movne	r0, #1
 80116fa:	4770      	bx	lr

080116fc <rcl_get_default_domain_id>:
 80116fc:	b530      	push	{r4, r5, lr}
 80116fe:	b083      	sub	sp, #12
 8011700:	2300      	movs	r3, #0
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	b1d0      	cbz	r0, 801173c <rcl_get_default_domain_id+0x40>
 8011706:	4604      	mov	r4, r0
 8011708:	4669      	mov	r1, sp
 801170a:	4815      	ldr	r0, [pc, #84]	@ (8011760 <rcl_get_default_domain_id+0x64>)
 801170c:	f7f9 fbcc 	bl	800aea8 <rcutils_get_env>
 8011710:	4602      	mov	r2, r0
 8011712:	b110      	cbz	r0, 801171a <rcl_get_default_domain_id+0x1e>
 8011714:	2001      	movs	r0, #1
 8011716:	b003      	add	sp, #12
 8011718:	bd30      	pop	{r4, r5, pc}
 801171a:	9b00      	ldr	r3, [sp, #0]
 801171c:	b18b      	cbz	r3, 8011742 <rcl_get_default_domain_id+0x46>
 801171e:	7818      	ldrb	r0, [r3, #0]
 8011720:	2800      	cmp	r0, #0
 8011722:	d0f8      	beq.n	8011716 <rcl_get_default_domain_id+0x1a>
 8011724:	a901      	add	r1, sp, #4
 8011726:	4618      	mov	r0, r3
 8011728:	9201      	str	r2, [sp, #4]
 801172a:	f001 fd29 	bl	8013180 <strtoul>
 801172e:	4605      	mov	r5, r0
 8011730:	b150      	cbz	r0, 8011748 <rcl_get_default_domain_id+0x4c>
 8011732:	1c43      	adds	r3, r0, #1
 8011734:	d00d      	beq.n	8011752 <rcl_get_default_domain_id+0x56>
 8011736:	6025      	str	r5, [r4, #0]
 8011738:	2000      	movs	r0, #0
 801173a:	e7ec      	b.n	8011716 <rcl_get_default_domain_id+0x1a>
 801173c:	200b      	movs	r0, #11
 801173e:	b003      	add	sp, #12
 8011740:	bd30      	pop	{r4, r5, pc}
 8011742:	4618      	mov	r0, r3
 8011744:	b003      	add	sp, #12
 8011746:	bd30      	pop	{r4, r5, pc}
 8011748:	9b01      	ldr	r3, [sp, #4]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0f2      	beq.n	8011736 <rcl_get_default_domain_id+0x3a>
 8011750:	e7e0      	b.n	8011714 <rcl_get_default_domain_id+0x18>
 8011752:	f002 f84f 	bl	80137f4 <__errno>
 8011756:	6803      	ldr	r3, [r0, #0]
 8011758:	2b22      	cmp	r3, #34	@ 0x22
 801175a:	d1ec      	bne.n	8011736 <rcl_get_default_domain_id+0x3a>
 801175c:	e7da      	b.n	8011714 <rcl_get_default_domain_id+0x18>
 801175e:	bf00      	nop
 8011760:	080150f8 	.word	0x080150f8

08011764 <rcl_expand_topic_name>:
 8011764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011768:	b08b      	sub	sp, #44	@ 0x2c
 801176a:	9306      	str	r3, [sp, #24]
 801176c:	2800      	cmp	r0, #0
 801176e:	f000 80ad 	beq.w	80118cc <rcl_expand_topic_name+0x168>
 8011772:	460e      	mov	r6, r1
 8011774:	2900      	cmp	r1, #0
 8011776:	f000 80a9 	beq.w	80118cc <rcl_expand_topic_name+0x168>
 801177a:	4617      	mov	r7, r2
 801177c:	2a00      	cmp	r2, #0
 801177e:	f000 80a5 	beq.w	80118cc <rcl_expand_topic_name+0x168>
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 80a2 	beq.w	80118cc <rcl_expand_topic_name+0x168>
 8011788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801178a:	2b00      	cmp	r3, #0
 801178c:	f000 809e 	beq.w	80118cc <rcl_expand_topic_name+0x168>
 8011790:	2200      	movs	r2, #0
 8011792:	a909      	add	r1, sp, #36	@ 0x24
 8011794:	4680      	mov	r8, r0
 8011796:	f000 fa1d 	bl	8011bd4 <rcl_validate_topic_name>
 801179a:	4604      	mov	r4, r0
 801179c:	2800      	cmp	r0, #0
 801179e:	f040 8096 	bne.w	80118ce <rcl_expand_topic_name+0x16a>
 80117a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f040 809a 	bne.w	80118de <rcl_expand_topic_name+0x17a>
 80117aa:	4602      	mov	r2, r0
 80117ac:	a909      	add	r1, sp, #36	@ 0x24
 80117ae:	4630      	mov	r0, r6
 80117b0:	f7f9 ff54 	bl	800b65c <rmw_validate_node_name>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f040 808e 	bne.w	80118d6 <rcl_expand_topic_name+0x172>
 80117ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117bc:	2a00      	cmp	r2, #0
 80117be:	f040 8093 	bne.w	80118e8 <rcl_expand_topic_name+0x184>
 80117c2:	a909      	add	r1, sp, #36	@ 0x24
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7f9 ff2b 	bl	800b620 <rmw_validate_namespace>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	f040 8083 	bne.w	80118d6 <rcl_expand_topic_name+0x172>
 80117d0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80117d2:	2c00      	cmp	r4, #0
 80117d4:	f040 80ed 	bne.w	80119b2 <rcl_expand_topic_name+0x24e>
 80117d8:	217b      	movs	r1, #123	@ 0x7b
 80117da:	4640      	mov	r0, r8
 80117dc:	f001 ff7e 	bl	80136dc <strchr>
 80117e0:	f898 3000 	ldrb.w	r3, [r8]
 80117e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80117e6:	4605      	mov	r5, r0
 80117e8:	f000 809e 	beq.w	8011928 <rcl_expand_topic_name+0x1c4>
 80117ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80117ee:	f040 80a2 	bne.w	8011936 <rcl_expand_topic_name+0x1d2>
 80117f2:	4638      	mov	r0, r7
 80117f4:	f7ee fcfe 	bl	80001f4 <strlen>
 80117f8:	4a82      	ldr	r2, [pc, #520]	@ (8011a04 <rcl_expand_topic_name+0x2a0>)
 80117fa:	4b83      	ldr	r3, [pc, #524]	@ (8011a08 <rcl_expand_topic_name+0x2a4>)
 80117fc:	2801      	cmp	r0, #1
 80117fe:	bf18      	it	ne
 8011800:	4613      	movne	r3, r2
 8011802:	9302      	str	r3, [sp, #8]
 8011804:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801180c:	f108 0301 	add.w	r3, r8, #1
 8011810:	9305      	str	r3, [sp, #20]
 8011812:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	ab14      	add	r3, sp, #80	@ 0x50
 801181a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801181c:	f7f9 fb6c 	bl	800aef8 <rcutils_format_string_limit>
 8011820:	4682      	mov	sl, r0
 8011822:	2800      	cmp	r0, #0
 8011824:	f000 80c7 	beq.w	80119b6 <rcl_expand_topic_name+0x252>
 8011828:	2d00      	cmp	r5, #0
 801182a:	f000 80a2 	beq.w	8011972 <rcl_expand_topic_name+0x20e>
 801182e:	217b      	movs	r1, #123	@ 0x7b
 8011830:	f001 ff54 	bl	80136dc <strchr>
 8011834:	46d1      	mov	r9, sl
 8011836:	4605      	mov	r5, r0
 8011838:	9407      	str	r4, [sp, #28]
 801183a:	46d3      	mov	fp, sl
 801183c:	464c      	mov	r4, r9
 801183e:	2d00      	cmp	r5, #0
 8011840:	f000 80be 	beq.w	80119c0 <rcl_expand_topic_name+0x25c>
 8011844:	217d      	movs	r1, #125	@ 0x7d
 8011846:	4620      	mov	r0, r4
 8011848:	f001 ff48 	bl	80136dc <strchr>
 801184c:	eba0 0905 	sub.w	r9, r0, r5
 8011850:	f109 0a01 	add.w	sl, r9, #1
 8011854:	486d      	ldr	r0, [pc, #436]	@ (8011a0c <rcl_expand_topic_name+0x2a8>)
 8011856:	4652      	mov	r2, sl
 8011858:	4629      	mov	r1, r5
 801185a:	f001 ff4c 	bl	80136f6 <strncmp>
 801185e:	2800      	cmp	r0, #0
 8011860:	d067      	beq.n	8011932 <rcl_expand_topic_name+0x1ce>
 8011862:	486b      	ldr	r0, [pc, #428]	@ (8011a10 <rcl_expand_topic_name+0x2ac>)
 8011864:	4652      	mov	r2, sl
 8011866:	4629      	mov	r1, r5
 8011868:	f001 ff45 	bl	80136f6 <strncmp>
 801186c:	b130      	cbz	r0, 801187c <rcl_expand_topic_name+0x118>
 801186e:	4869      	ldr	r0, [pc, #420]	@ (8011a14 <rcl_expand_topic_name+0x2b0>)
 8011870:	4652      	mov	r2, sl
 8011872:	4629      	mov	r1, r5
 8011874:	f001 ff3f 	bl	80136f6 <strncmp>
 8011878:	2800      	cmp	r0, #0
 801187a:	d137      	bne.n	80118ec <rcl_expand_topic_name+0x188>
 801187c:	46b9      	mov	r9, r7
 801187e:	ab16      	add	r3, sp, #88	@ 0x58
 8011880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011884:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011888:	ab14      	add	r3, sp, #80	@ 0x50
 801188a:	4628      	mov	r0, r5
 801188c:	cb0c      	ldmia	r3, {r2, r3}
 801188e:	4651      	mov	r1, sl
 8011890:	f7f9 fc6e 	bl	800b170 <rcutils_strndup>
 8011894:	4605      	mov	r5, r0
 8011896:	2800      	cmp	r0, #0
 8011898:	f000 809c 	beq.w	80119d4 <rcl_expand_topic_name+0x270>
 801189c:	464a      	mov	r2, r9
 801189e:	4620      	mov	r0, r4
 80118a0:	ab14      	add	r3, sp, #80	@ 0x50
 80118a2:	4629      	mov	r1, r5
 80118a4:	f7f9 fb62 	bl	800af6c <rcutils_repl_str>
 80118a8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80118aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80118ac:	4604      	mov	r4, r0
 80118ae:	4628      	mov	r0, r5
 80118b0:	4798      	blx	r3
 80118b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80118b4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80118b6:	4658      	mov	r0, fp
 80118b8:	4798      	blx	r3
 80118ba:	2c00      	cmp	r4, #0
 80118bc:	d07b      	beq.n	80119b6 <rcl_expand_topic_name+0x252>
 80118be:	217b      	movs	r1, #123	@ 0x7b
 80118c0:	4620      	mov	r0, r4
 80118c2:	f001 ff0b 	bl	80136dc <strchr>
 80118c6:	46a3      	mov	fp, r4
 80118c8:	4605      	mov	r5, r0
 80118ca:	e7b8      	b.n	801183e <rcl_expand_topic_name+0xda>
 80118cc:	240b      	movs	r4, #11
 80118ce:	4620      	mov	r0, r4
 80118d0:	b00b      	add	sp, #44	@ 0x2c
 80118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d6:	f7ff fefd 	bl	80116d4 <rcl_convert_rmw_ret_to_rcl_ret>
 80118da:	4604      	mov	r4, r0
 80118dc:	e7f7      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 80118de:	2467      	movs	r4, #103	@ 0x67
 80118e0:	4620      	mov	r0, r4
 80118e2:	b00b      	add	sp, #44	@ 0x2c
 80118e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e8:	24c9      	movs	r4, #201	@ 0xc9
 80118ea:	e7f0      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 80118ec:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80118f0:	9806      	ldr	r0, [sp, #24]
 80118f2:	1c69      	adds	r1, r5, #1
 80118f4:	f7f9 fd56 	bl	800b3a4 <rcutils_string_map_getn>
 80118f8:	4681      	mov	r9, r0
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d1bf      	bne.n	801187e <rcl_expand_topic_name+0x11a>
 80118fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011900:	aa16      	add	r2, sp, #88	@ 0x58
 8011902:	6018      	str	r0, [r3, #0]
 8011904:	ca07      	ldmia	r2, {r0, r1, r2}
 8011906:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801190a:	ab14      	add	r3, sp, #80	@ 0x50
 801190c:	cb0c      	ldmia	r3, {r2, r3}
 801190e:	4651      	mov	r1, sl
 8011910:	4628      	mov	r0, r5
 8011912:	f7f9 fc2d 	bl	800b170 <rcutils_strndup>
 8011916:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011918:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801191a:	4798      	blx	r3
 801191c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801191e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011920:	4658      	mov	r0, fp
 8011922:	2469      	movs	r4, #105	@ 0x69
 8011924:	4798      	blx	r3
 8011926:	e7d2      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 8011928:	2800      	cmp	r0, #0
 801192a:	d05b      	beq.n	80119e4 <rcl_expand_topic_name+0x280>
 801192c:	46c1      	mov	r9, r8
 801192e:	46a2      	mov	sl, r4
 8011930:	e782      	b.n	8011838 <rcl_expand_topic_name+0xd4>
 8011932:	46b1      	mov	r9, r6
 8011934:	e7a3      	b.n	801187e <rcl_expand_topic_name+0x11a>
 8011936:	2800      	cmp	r0, #0
 8011938:	d1f8      	bne.n	801192c <rcl_expand_topic_name+0x1c8>
 801193a:	4638      	mov	r0, r7
 801193c:	f7ee fc5a 	bl	80001f4 <strlen>
 8011940:	4a35      	ldr	r2, [pc, #212]	@ (8011a18 <rcl_expand_topic_name+0x2b4>)
 8011942:	4b36      	ldr	r3, [pc, #216]	@ (8011a1c <rcl_expand_topic_name+0x2b8>)
 8011944:	f8cd 8010 	str.w	r8, [sp, #16]
 8011948:	2801      	cmp	r0, #1
 801194a:	bf18      	it	ne
 801194c:	4613      	movne	r3, r2
 801194e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011952:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011956:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011958:	9703      	str	r7, [sp, #12]
 801195a:	9200      	str	r2, [sp, #0]
 801195c:	ab14      	add	r3, sp, #80	@ 0x50
 801195e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011960:	f7f9 faca 	bl	800aef8 <rcutils_format_string_limit>
 8011964:	4682      	mov	sl, r0
 8011966:	4653      	mov	r3, sl
 8011968:	b32b      	cbz	r3, 80119b6 <rcl_expand_topic_name+0x252>
 801196a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801196c:	f8c3 a000 	str.w	sl, [r3]
 8011970:	e7ad      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 8011972:	f89a 3000 	ldrb.w	r3, [sl]
 8011976:	2b2f      	cmp	r3, #47	@ 0x2f
 8011978:	d0f7      	beq.n	801196a <rcl_expand_topic_name+0x206>
 801197a:	4638      	mov	r0, r7
 801197c:	f7ee fc3a 	bl	80001f4 <strlen>
 8011980:	4a25      	ldr	r2, [pc, #148]	@ (8011a18 <rcl_expand_topic_name+0x2b4>)
 8011982:	4b26      	ldr	r3, [pc, #152]	@ (8011a1c <rcl_expand_topic_name+0x2b8>)
 8011984:	f8cd a010 	str.w	sl, [sp, #16]
 8011988:	2801      	cmp	r0, #1
 801198a:	bf18      	it	ne
 801198c:	4613      	movne	r3, r2
 801198e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011992:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011996:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011998:	9703      	str	r7, [sp, #12]
 801199a:	9200      	str	r2, [sp, #0]
 801199c:	ab14      	add	r3, sp, #80	@ 0x50
 801199e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119a0:	f7f9 faaa 	bl	800aef8 <rcutils_format_string_limit>
 80119a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80119a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80119a8:	4605      	mov	r5, r0
 80119aa:	4650      	mov	r0, sl
 80119ac:	4798      	blx	r3
 80119ae:	46aa      	mov	sl, r5
 80119b0:	e7d9      	b.n	8011966 <rcl_expand_topic_name+0x202>
 80119b2:	24ca      	movs	r4, #202	@ 0xca
 80119b4:	e78b      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 80119b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80119b8:	2300      	movs	r3, #0
 80119ba:	6013      	str	r3, [r2, #0]
 80119bc:	240a      	movs	r4, #10
 80119be:	e786      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 80119c0:	465b      	mov	r3, fp
 80119c2:	9c07      	ldr	r4, [sp, #28]
 80119c4:	46da      	mov	sl, fp
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1d3      	bne.n	8011972 <rcl_expand_topic_name+0x20e>
 80119ca:	f898 3000 	ldrb.w	r3, [r8]
 80119ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80119d0:	d0cb      	beq.n	801196a <rcl_expand_topic_name+0x206>
 80119d2:	e7b2      	b.n	801193a <rcl_expand_topic_name+0x1d6>
 80119d4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80119d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80119da:	6015      	str	r5, [r2, #0]
 80119dc:	4658      	mov	r0, fp
 80119de:	4798      	blx	r3
 80119e0:	240a      	movs	r4, #10
 80119e2:	e774      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 80119e4:	ab17      	add	r3, sp, #92	@ 0x5c
 80119e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80119ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119ee:	ab14      	add	r3, sp, #80	@ 0x50
 80119f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80119f2:	4640      	mov	r0, r8
 80119f4:	f7f9 fb9a 	bl	800b12c <rcutils_strdup>
 80119f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119fa:	2800      	cmp	r0, #0
 80119fc:	6018      	str	r0, [r3, #0]
 80119fe:	bf08      	it	eq
 8011a00:	240a      	moveq	r4, #10
 8011a02:	e764      	b.n	80118ce <rcl_expand_topic_name+0x16a>
 8011a04:	08015108 	.word	0x08015108
 8011a08:	08014dd8 	.word	0x08014dd8
 8011a0c:	08015110 	.word	0x08015110
 8011a10:	08015118 	.word	0x08015118
 8011a14:	08015120 	.word	0x08015120
 8011a18:	08014854 	.word	0x08014854
 8011a1c:	0801484c 	.word	0x0801484c

08011a20 <rcl_get_default_topic_name_substitutions>:
 8011a20:	2800      	cmp	r0, #0
 8011a22:	bf0c      	ite	eq
 8011a24:	200b      	moveq	r0, #11
 8011a26:	2000      	movne	r0, #0
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop

08011a2c <rcl_get_zero_initialized_guard_condition>:
 8011a2c:	4a03      	ldr	r2, [pc, #12]	@ (8011a3c <rcl_get_zero_initialized_guard_condition+0x10>)
 8011a2e:	4603      	mov	r3, r0
 8011a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a34:	e883 0003 	stmia.w	r3, {r0, r1}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	4770      	bx	lr
 8011a3c:	0801512c 	.word	0x0801512c

08011a40 <rcl_guard_condition_init_from_rmw>:
 8011a40:	b082      	sub	sp, #8
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	b086      	sub	sp, #24
 8011a48:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8011a52:	460e      	mov	r6, r1
 8011a54:	4617      	mov	r7, r2
 8011a56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a5a:	f10d 0e04 	add.w	lr, sp, #4
 8011a5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a62:	f8dc 3000 	ldr.w	r3, [ip]
 8011a66:	f8ce 3000 	str.w	r3, [lr]
 8011a6a:	a801      	add	r0, sp, #4
 8011a6c:	f7f6 f998 	bl	8007da0 <rcutils_allocator_is_valid>
 8011a70:	b350      	cbz	r0, 8011ac8 <rcl_guard_condition_init_from_rmw+0x88>
 8011a72:	b34c      	cbz	r4, 8011ac8 <rcl_guard_condition_init_from_rmw+0x88>
 8011a74:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011a78:	f1b8 0f00 	cmp.w	r8, #0
 8011a7c:	d11e      	bne.n	8011abc <rcl_guard_condition_init_from_rmw+0x7c>
 8011a7e:	b31f      	cbz	r7, 8011ac8 <rcl_guard_condition_init_from_rmw+0x88>
 8011a80:	4638      	mov	r0, r7
 8011a82:	f7f6 fc8d 	bl	80083a0 <rcl_context_is_valid>
 8011a86:	b328      	cbz	r0, 8011ad4 <rcl_guard_condition_init_from_rmw+0x94>
 8011a88:	9b01      	ldr	r3, [sp, #4]
 8011a8a:	9905      	ldr	r1, [sp, #20]
 8011a8c:	201c      	movs	r0, #28
 8011a8e:	4798      	blx	r3
 8011a90:	4605      	mov	r5, r0
 8011a92:	6060      	str	r0, [r4, #4]
 8011a94:	b358      	cbz	r0, 8011aee <rcl_guard_condition_init_from_rmw+0xae>
 8011a96:	b1fe      	cbz	r6, 8011ad8 <rcl_guard_condition_init_from_rmw+0x98>
 8011a98:	6006      	str	r6, [r0, #0]
 8011a9a:	f880 8004 	strb.w	r8, [r0, #4]
 8011a9e:	ac01      	add	r4, sp, #4
 8011aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011aa2:	f105 0c08 	add.w	ip, r5, #8
 8011aa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	f8cc 3000 	str.w	r3, [ip]
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	b006      	add	sp, #24
 8011ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab8:	b002      	add	sp, #8
 8011aba:	4770      	bx	lr
 8011abc:	2064      	movs	r0, #100	@ 0x64
 8011abe:	b006      	add	sp, #24
 8011ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac4:	b002      	add	sp, #8
 8011ac6:	4770      	bx	lr
 8011ac8:	200b      	movs	r0, #11
 8011aca:	b006      	add	sp, #24
 8011acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad0:	b002      	add	sp, #8
 8011ad2:	4770      	bx	lr
 8011ad4:	2065      	movs	r0, #101	@ 0x65
 8011ad6:	e7f2      	b.n	8011abe <rcl_guard_condition_init_from_rmw+0x7e>
 8011ad8:	6838      	ldr	r0, [r7, #0]
 8011ada:	3028      	adds	r0, #40	@ 0x28
 8011adc:	f000 fb04 	bl	80120e8 <rmw_create_guard_condition>
 8011ae0:	6028      	str	r0, [r5, #0]
 8011ae2:	6865      	ldr	r5, [r4, #4]
 8011ae4:	682e      	ldr	r6, [r5, #0]
 8011ae6:	b126      	cbz	r6, 8011af2 <rcl_guard_condition_init_from_rmw+0xb2>
 8011ae8:	2301      	movs	r3, #1
 8011aea:	712b      	strb	r3, [r5, #4]
 8011aec:	e7d7      	b.n	8011a9e <rcl_guard_condition_init_from_rmw+0x5e>
 8011aee:	200a      	movs	r0, #10
 8011af0:	e7e5      	b.n	8011abe <rcl_guard_condition_init_from_rmw+0x7e>
 8011af2:	4628      	mov	r0, r5
 8011af4:	9b02      	ldr	r3, [sp, #8]
 8011af6:	9905      	ldr	r1, [sp, #20]
 8011af8:	4798      	blx	r3
 8011afa:	6066      	str	r6, [r4, #4]
 8011afc:	2001      	movs	r0, #1
 8011afe:	e7de      	b.n	8011abe <rcl_guard_condition_init_from_rmw+0x7e>

08011b00 <rcl_guard_condition_fini>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	b1f0      	cbz	r0, 8011b44 <rcl_guard_condition_fini+0x44>
 8011b06:	6843      	ldr	r3, [r0, #4]
 8011b08:	4604      	mov	r4, r0
 8011b0a:	b163      	cbz	r3, 8011b26 <rcl_guard_condition_fini+0x26>
 8011b0c:	6818      	ldr	r0, [r3, #0]
 8011b0e:	68de      	ldr	r6, [r3, #12]
 8011b10:	6999      	ldr	r1, [r3, #24]
 8011b12:	b160      	cbz	r0, 8011b2e <rcl_guard_condition_fini+0x2e>
 8011b14:	791d      	ldrb	r5, [r3, #4]
 8011b16:	b965      	cbnz	r5, 8011b32 <rcl_guard_condition_fini+0x32>
 8011b18:	4618      	mov	r0, r3
 8011b1a:	47b0      	blx	r6
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4628      	mov	r0, r5
 8011b20:	6063      	str	r3, [r4, #4]
 8011b22:	b002      	add	sp, #8
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	461d      	mov	r5, r3
 8011b28:	4628      	mov	r0, r5
 8011b2a:	b002      	add	sp, #8
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
 8011b2e:	4605      	mov	r5, r0
 8011b30:	e7f2      	b.n	8011b18 <rcl_guard_condition_fini+0x18>
 8011b32:	9101      	str	r1, [sp, #4]
 8011b34:	f000 faec 	bl	8012110 <rmw_destroy_guard_condition>
 8011b38:	1e05      	subs	r5, r0, #0
 8011b3a:	6863      	ldr	r3, [r4, #4]
 8011b3c:	9901      	ldr	r1, [sp, #4]
 8011b3e:	bf18      	it	ne
 8011b40:	2501      	movne	r5, #1
 8011b42:	e7e9      	b.n	8011b18 <rcl_guard_condition_fini+0x18>
 8011b44:	250b      	movs	r5, #11
 8011b46:	4628      	mov	r0, r5
 8011b48:	b002      	add	sp, #8
 8011b4a:	bd70      	pop	{r4, r5, r6, pc}

08011b4c <rcl_guard_condition_get_default_options>:
 8011b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b4e:	b087      	sub	sp, #28
 8011b50:	4606      	mov	r6, r0
 8011b52:	4668      	mov	r0, sp
 8011b54:	f7f6 f916 	bl	8007d84 <rcutils_get_default_allocator>
 8011b58:	4b09      	ldr	r3, [pc, #36]	@ (8011b80 <rcl_guard_condition_get_default_options+0x34>)
 8011b5a:	46ee      	mov	lr, sp
 8011b5c:	469c      	mov	ip, r3
 8011b5e:	461d      	mov	r5, r3
 8011b60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b6a:	4634      	mov	r4, r6
 8011b6c:	f8de 7000 	ldr.w	r7, [lr]
 8011b70:	f8cc 7000 	str.w	r7, [ip]
 8011b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b76:	4630      	mov	r0, r6
 8011b78:	6027      	str	r7, [r4, #0]
 8011b7a:	b007      	add	sp, #28
 8011b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	2000da10 	.word	0x2000da10

08011b84 <rcl_guard_condition_get_rmw_handle>:
 8011b84:	b110      	cbz	r0, 8011b8c <rcl_guard_condition_get_rmw_handle+0x8>
 8011b86:	6840      	ldr	r0, [r0, #4]
 8011b88:	b100      	cbz	r0, 8011b8c <rcl_guard_condition_get_rmw_handle+0x8>
 8011b8a:	6800      	ldr	r0, [r0, #0]
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop

08011b90 <rcl_publisher_is_valid>:
 8011b90:	b1a0      	cbz	r0, 8011bbc <rcl_publisher_is_valid+0x2c>
 8011b92:	6803      	ldr	r3, [r0, #0]
 8011b94:	b510      	push	{r4, lr}
 8011b96:	4604      	mov	r4, r0
 8011b98:	b173      	cbz	r3, 8011bb8 <rcl_publisher_is_valid+0x28>
 8011b9a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8011b9e:	b15a      	cbz	r2, 8011bb8 <rcl_publisher_is_valid+0x28>
 8011ba0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8011ba4:	f7f6 fbfc 	bl	80083a0 <rcl_context_is_valid>
 8011ba8:	b130      	cbz	r0, 8011bb8 <rcl_publisher_is_valid+0x28>
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8011bb0:	3800      	subs	r0, #0
 8011bb2:	bf18      	it	ne
 8011bb4:	2001      	movne	r0, #1
 8011bb6:	bd10      	pop	{r4, pc}
 8011bb8:	2000      	movs	r0, #0
 8011bba:	bd10      	pop	{r4, pc}
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	4770      	bx	lr

08011bc0 <rcl_publisher_is_valid_except_context>:
 8011bc0:	b130      	cbz	r0, 8011bd0 <rcl_publisher_is_valid_except_context+0x10>
 8011bc2:	6800      	ldr	r0, [r0, #0]
 8011bc4:	b120      	cbz	r0, 8011bd0 <rcl_publisher_is_valid_except_context+0x10>
 8011bc6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8011bca:	3800      	subs	r0, #0
 8011bcc:	bf18      	it	ne
 8011bce:	2001      	movne	r0, #1
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop

08011bd4 <rcl_validate_topic_name>:
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d07a      	beq.n	8011cce <rcl_validate_topic_name+0xfa>
 8011bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bdc:	460e      	mov	r6, r1
 8011bde:	2900      	cmp	r1, #0
 8011be0:	d07c      	beq.n	8011cdc <rcl_validate_topic_name+0x108>
 8011be2:	4617      	mov	r7, r2
 8011be4:	4605      	mov	r5, r0
 8011be6:	f7ee fb05 	bl	80001f4 <strlen>
 8011bea:	b1b0      	cbz	r0, 8011c1a <rcl_validate_topic_name+0x46>
 8011bec:	f895 9000 	ldrb.w	r9, [r5]
 8011bf0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8011d74 <rcl_validate_topic_name+0x1a0>
 8011bf4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011bf8:	f013 0304 	ands.w	r3, r3, #4
 8011bfc:	d169      	bne.n	8011cd2 <rcl_validate_topic_name+0xfe>
 8011bfe:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8011c02:	f815 2008 	ldrb.w	r2, [r5, r8]
 8011c06:	2a2f      	cmp	r2, #47	@ 0x2f
 8011c08:	d10e      	bne.n	8011c28 <rcl_validate_topic_name+0x54>
 8011c0a:	2202      	movs	r2, #2
 8011c0c:	6032      	str	r2, [r6, #0]
 8011c0e:	b36f      	cbz	r7, 8011c6c <rcl_validate_topic_name+0x98>
 8011c10:	f8c7 8000 	str.w	r8, [r7]
 8011c14:	4618      	mov	r0, r3
 8011c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	6033      	str	r3, [r6, #0]
 8011c1e:	b32f      	cbz	r7, 8011c6c <rcl_validate_topic_name+0x98>
 8011c20:	2000      	movs	r0, #0
 8011c22:	6038      	str	r0, [r7, #0]
 8011c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c28:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8011c2c:	461c      	mov	r4, r3
 8011c2e:	4619      	mov	r1, r3
 8011c30:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8011c34:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011c38:	f1be 0f09 	cmp.w	lr, #9
 8011c3c:	d919      	bls.n	8011c72 <rcl_validate_topic_name+0x9e>
 8011c3e:	f022 0e20 	bic.w	lr, r2, #32
 8011c42:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8011c46:	f1be 0f19 	cmp.w	lr, #25
 8011c4a:	d912      	bls.n	8011c72 <rcl_validate_topic_name+0x9e>
 8011c4c:	2a5f      	cmp	r2, #95	@ 0x5f
 8011c4e:	d019      	beq.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011c50:	2a2f      	cmp	r2, #47	@ 0x2f
 8011c52:	d051      	beq.n	8011cf8 <rcl_validate_topic_name+0x124>
 8011c54:	2a7e      	cmp	r2, #126	@ 0x7e
 8011c56:	d048      	beq.n	8011cea <rcl_validate_topic_name+0x116>
 8011c58:	2a7b      	cmp	r2, #123	@ 0x7b
 8011c5a:	d054      	beq.n	8011d06 <rcl_validate_topic_name+0x132>
 8011c5c:	2a7d      	cmp	r2, #125	@ 0x7d
 8011c5e:	d161      	bne.n	8011d24 <rcl_validate_topic_name+0x150>
 8011c60:	2c00      	cmp	r4, #0
 8011c62:	d155      	bne.n	8011d10 <rcl_validate_topic_name+0x13c>
 8011c64:	2305      	movs	r3, #5
 8011c66:	6033      	str	r3, [r6, #0]
 8011c68:	b107      	cbz	r7, 8011c6c <rcl_validate_topic_name+0x98>
 8011c6a:	6039      	str	r1, [r7, #0]
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c72:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011c76:	0752      	lsls	r2, r2, #29
 8011c78:	d504      	bpl.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011c7a:	b11c      	cbz	r4, 8011c84 <rcl_validate_topic_name+0xb0>
 8011c7c:	b111      	cbz	r1, 8011c84 <rcl_validate_topic_name+0xb0>
 8011c7e:	1e4a      	subs	r2, r1, #1
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d02d      	beq.n	8011ce0 <rcl_validate_topic_name+0x10c>
 8011c84:	3101      	adds	r1, #1
 8011c86:	4288      	cmp	r0, r1
 8011c88:	d1d2      	bne.n	8011c30 <rcl_validate_topic_name+0x5c>
 8011c8a:	2c00      	cmp	r4, #0
 8011c8c:	d145      	bne.n	8011d1a <rcl_validate_topic_name+0x146>
 8011c8e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8011c92:	d04f      	beq.n	8011d34 <rcl_validate_topic_name+0x160>
 8011c94:	4620      	mov	r0, r4
 8011c96:	2301      	movs	r3, #1
 8011c98:	e006      	b.n	8011ca8 <rcl_validate_topic_name+0xd4>
 8011c9a:	428b      	cmp	r3, r1
 8011c9c:	f105 0501 	add.w	r5, r5, #1
 8011ca0:	f103 0201 	add.w	r2, r3, #1
 8011ca4:	d236      	bcs.n	8011d14 <rcl_validate_topic_name+0x140>
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	4580      	cmp	r8, r0
 8011caa:	f100 0001 	add.w	r0, r0, #1
 8011cae:	d0f4      	beq.n	8011c9a <rcl_validate_topic_name+0xc6>
 8011cb0:	782a      	ldrb	r2, [r5, #0]
 8011cb2:	2a2f      	cmp	r2, #47	@ 0x2f
 8011cb4:	d1f1      	bne.n	8011c9a <rcl_validate_topic_name+0xc6>
 8011cb6:	786a      	ldrb	r2, [r5, #1]
 8011cb8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011cbc:	0754      	lsls	r4, r2, #29
 8011cbe:	d5ec      	bpl.n	8011c9a <rcl_validate_topic_name+0xc6>
 8011cc0:	2204      	movs	r2, #4
 8011cc2:	6032      	str	r2, [r6, #0]
 8011cc4:	2f00      	cmp	r7, #0
 8011cc6:	d0d1      	beq.n	8011c6c <rcl_validate_topic_name+0x98>
 8011cc8:	603b      	str	r3, [r7, #0]
 8011cca:	2000      	movs	r0, #0
 8011ccc:	e7aa      	b.n	8011c24 <rcl_validate_topic_name+0x50>
 8011cce:	200b      	movs	r0, #11
 8011cd0:	4770      	bx	lr
 8011cd2:	2304      	movs	r3, #4
 8011cd4:	6033      	str	r3, [r6, #0]
 8011cd6:	2f00      	cmp	r7, #0
 8011cd8:	d1a2      	bne.n	8011c20 <rcl_validate_topic_name+0x4c>
 8011cda:	e7c7      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011cdc:	200b      	movs	r0, #11
 8011cde:	e7a1      	b.n	8011c24 <rcl_validate_topic_name+0x50>
 8011ce0:	2309      	movs	r3, #9
 8011ce2:	6033      	str	r3, [r6, #0]
 8011ce4:	2f00      	cmp	r7, #0
 8011ce6:	d1c0      	bne.n	8011c6a <rcl_validate_topic_name+0x96>
 8011ce8:	e7c0      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011cea:	2900      	cmp	r1, #0
 8011cec:	d0ca      	beq.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011cee:	2306      	movs	r3, #6
 8011cf0:	6033      	str	r3, [r6, #0]
 8011cf2:	2f00      	cmp	r7, #0
 8011cf4:	d1b9      	bne.n	8011c6a <rcl_validate_topic_name+0x96>
 8011cf6:	e7b9      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011cf8:	2c00      	cmp	r4, #0
 8011cfa:	d0c3      	beq.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011cfc:	2308      	movs	r3, #8
 8011cfe:	6033      	str	r3, [r6, #0]
 8011d00:	2f00      	cmp	r7, #0
 8011d02:	d1b2      	bne.n	8011c6a <rcl_validate_topic_name+0x96>
 8011d04:	e7b2      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011d06:	2c00      	cmp	r4, #0
 8011d08:	d1f8      	bne.n	8011cfc <rcl_validate_topic_name+0x128>
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	2401      	movs	r4, #1
 8011d0e:	e7b9      	b.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011d10:	2400      	movs	r4, #0
 8011d12:	e7b7      	b.n	8011c84 <rcl_validate_topic_name+0xb0>
 8011d14:	2000      	movs	r0, #0
 8011d16:	6030      	str	r0, [r6, #0]
 8011d18:	e784      	b.n	8011c24 <rcl_validate_topic_name+0x50>
 8011d1a:	2205      	movs	r2, #5
 8011d1c:	6032      	str	r2, [r6, #0]
 8011d1e:	2f00      	cmp	r7, #0
 8011d20:	d1d2      	bne.n	8011cc8 <rcl_validate_topic_name+0xf4>
 8011d22:	e7a3      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011d24:	2c00      	cmp	r4, #0
 8011d26:	bf14      	ite	ne
 8011d28:	2308      	movne	r3, #8
 8011d2a:	2303      	moveq	r3, #3
 8011d2c:	6033      	str	r3, [r6, #0]
 8011d2e:	2f00      	cmp	r7, #0
 8011d30:	d19b      	bne.n	8011c6a <rcl_validate_topic_name+0x96>
 8011d32:	e79b      	b.n	8011c6c <rcl_validate_topic_name+0x98>
 8011d34:	2301      	movs	r3, #1
 8011d36:	e00a      	b.n	8011d4e <rcl_validate_topic_name+0x17a>
 8011d38:	2c01      	cmp	r4, #1
 8011d3a:	d013      	beq.n	8011d64 <rcl_validate_topic_name+0x190>
 8011d3c:	4299      	cmp	r1, r3
 8011d3e:	f104 0401 	add.w	r4, r4, #1
 8011d42:	f105 0501 	add.w	r5, r5, #1
 8011d46:	f103 0201 	add.w	r2, r3, #1
 8011d4a:	d9e3      	bls.n	8011d14 <rcl_validate_topic_name+0x140>
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	45a0      	cmp	r8, r4
 8011d50:	d0f4      	beq.n	8011d3c <rcl_validate_topic_name+0x168>
 8011d52:	782a      	ldrb	r2, [r5, #0]
 8011d54:	2a2f      	cmp	r2, #47	@ 0x2f
 8011d56:	d1ef      	bne.n	8011d38 <rcl_validate_topic_name+0x164>
 8011d58:	786a      	ldrb	r2, [r5, #1]
 8011d5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011d5e:	0752      	lsls	r2, r2, #29
 8011d60:	d5ec      	bpl.n	8011d3c <rcl_validate_topic_name+0x168>
 8011d62:	e7ad      	b.n	8011cc0 <rcl_validate_topic_name+0xec>
 8011d64:	2307      	movs	r3, #7
 8011d66:	6033      	str	r3, [r6, #0]
 8011d68:	2f00      	cmp	r7, #0
 8011d6a:	f43f af7f 	beq.w	8011c6c <rcl_validate_topic_name+0x98>
 8011d6e:	603c      	str	r4, [r7, #0]
 8011d70:	2000      	movs	r0, #0
 8011d72:	e757      	b.n	8011c24 <rcl_validate_topic_name+0x50>
 8011d74:	080151c0 	.word	0x080151c0

08011d78 <rcutils_string_array_fini>:
 8011d78:	b320      	cbz	r0, 8011dc4 <rcutils_string_array_fini+0x4c>
 8011d7a:	b570      	push	{r4, r5, r6, lr}
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	6840      	ldr	r0, [r0, #4]
 8011d80:	b1d8      	cbz	r0, 8011dba <rcutils_string_array_fini+0x42>
 8011d82:	f104 0008 	add.w	r0, r4, #8
 8011d86:	f7f6 f80b 	bl	8007da0 <rcutils_allocator_is_valid>
 8011d8a:	b1b8      	cbz	r0, 8011dbc <rcutils_string_array_fini+0x44>
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	b1bb      	cbz	r3, 8011dc0 <rcutils_string_array_fini+0x48>
 8011d90:	2500      	movs	r5, #0
 8011d92:	6860      	ldr	r0, [r4, #4]
 8011d94:	462e      	mov	r6, r5
 8011d96:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011d9a:	68e3      	ldr	r3, [r4, #12]
 8011d9c:	69a1      	ldr	r1, [r4, #24]
 8011d9e:	4798      	blx	r3
 8011da0:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011da4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011da8:	3501      	adds	r5, #1
 8011daa:	429d      	cmp	r5, r3
 8011dac:	d3f3      	bcc.n	8011d96 <rcutils_string_array_fini+0x1e>
 8011dae:	68e3      	ldr	r3, [r4, #12]
 8011db0:	69a1      	ldr	r1, [r4, #24]
 8011db2:	4798      	blx	r3
 8011db4:	2000      	movs	r0, #0
 8011db6:	e9c4 0000 	strd	r0, r0, [r4]
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	200b      	movs	r0, #11
 8011dbe:	bd70      	pop	{r4, r5, r6, pc}
 8011dc0:	6860      	ldr	r0, [r4, #4]
 8011dc2:	e7f4      	b.n	8011dae <rcutils_string_array_fini+0x36>
 8011dc4:	200b      	movs	r0, #11
 8011dc6:	4770      	bx	lr

08011dc8 <rmw_time_equal>:
 8011dc8:	b4f0      	push	{r4, r5, r6, r7}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	ac04      	add	r4, sp, #16
 8011dce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	4924      	ldr	r1, [pc, #144]	@ (8011e68 <rmw_time_equal+0xa0>)
 8011dd6:	9e03      	ldr	r6, [sp, #12]
 8011dd8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011ddc:	2202      	movs	r2, #2
 8011dde:	4299      	cmp	r1, r3
 8011de0:	41aa      	sbcs	r2, r5
 8011de2:	d330      	bcc.n	8011e46 <rmw_time_equal+0x7e>
 8011de4:	4c21      	ldr	r4, [pc, #132]	@ (8011e6c <rmw_time_equal+0xa4>)
 8011de6:	fba3 3204 	umull	r3, r2, r3, r4
 8011dea:	fb04 2205 	mla	r2, r4, r5, r2
 8011dee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011df2:	43dd      	mvns	r5, r3
 8011df4:	1a8c      	subs	r4, r1, r2
 8011df6:	4285      	cmp	r5, r0
 8011df8:	41b4      	sbcs	r4, r6
 8011dfa:	d332      	bcc.n	8011e62 <rmw_time_equal+0x9a>
 8011dfc:	eb10 0c03 	adds.w	ip, r0, r3
 8011e00:	eb42 0106 	adc.w	r1, r2, r6
 8011e04:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011e08:	4817      	ldr	r0, [pc, #92]	@ (8011e68 <rmw_time_equal+0xa0>)
 8011e0a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011e0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011e0e:	2202      	movs	r2, #2
 8011e10:	4298      	cmp	r0, r3
 8011e12:	41b2      	sbcs	r2, r6
 8011e14:	d31c      	bcc.n	8011e50 <rmw_time_equal+0x88>
 8011e16:	4c15      	ldr	r4, [pc, #84]	@ (8011e6c <rmw_time_equal+0xa4>)
 8011e18:	fba3 3204 	umull	r3, r2, r3, r4
 8011e1c:	fb04 2206 	mla	r2, r4, r6, r2
 8011e20:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011e24:	43de      	mvns	r6, r3
 8011e26:	1a84      	subs	r4, r0, r2
 8011e28:	42ae      	cmp	r6, r5
 8011e2a:	41bc      	sbcs	r4, r7
 8011e2c:	d315      	bcc.n	8011e5a <rmw_time_equal+0x92>
 8011e2e:	195b      	adds	r3, r3, r5
 8011e30:	eb42 0207 	adc.w	r2, r2, r7
 8011e34:	428a      	cmp	r2, r1
 8011e36:	bf08      	it	eq
 8011e38:	4563      	cmpeq	r3, ip
 8011e3a:	bf0c      	ite	eq
 8011e3c:	2001      	moveq	r0, #1
 8011e3e:	2000      	movne	r0, #0
 8011e40:	b004      	add	sp, #16
 8011e42:	bcf0      	pop	{r4, r5, r6, r7}
 8011e44:	4770      	bx	lr
 8011e46:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011e4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011e4e:	e7d9      	b.n	8011e04 <rmw_time_equal+0x3c>
 8011e50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e54:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011e58:	e7ec      	b.n	8011e34 <rmw_time_equal+0x6c>
 8011e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011e5e:	4602      	mov	r2, r0
 8011e60:	e7e8      	b.n	8011e34 <rmw_time_equal+0x6c>
 8011e62:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011e66:	e7cd      	b.n	8011e04 <rmw_time_equal+0x3c>
 8011e68:	25c17d04 	.word	0x25c17d04
 8011e6c:	3b9aca00 	.word	0x3b9aca00

08011e70 <rmw_time_total_nsec>:
 8011e70:	b470      	push	{r4, r5, r6}
 8011e72:	b085      	sub	sp, #20
 8011e74:	ac04      	add	r4, sp, #16
 8011e76:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4912      	ldr	r1, [pc, #72]	@ (8011ec8 <rmw_time_total_nsec+0x58>)
 8011e7e:	9e03      	ldr	r6, [sp, #12]
 8011e80:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011e84:	2202      	movs	r2, #2
 8011e86:	4299      	cmp	r1, r3
 8011e88:	41aa      	sbcs	r2, r5
 8011e8a:	d311      	bcc.n	8011eb0 <rmw_time_total_nsec+0x40>
 8011e8c:	4c0f      	ldr	r4, [pc, #60]	@ (8011ecc <rmw_time_total_nsec+0x5c>)
 8011e8e:	fba3 3204 	umull	r3, r2, r3, r4
 8011e92:	fb04 2205 	mla	r2, r4, r5, r2
 8011e96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011e9a:	43dd      	mvns	r5, r3
 8011e9c:	1a8c      	subs	r4, r1, r2
 8011e9e:	4285      	cmp	r5, r0
 8011ea0:	41b4      	sbcs	r4, r6
 8011ea2:	d30c      	bcc.n	8011ebe <rmw_time_total_nsec+0x4e>
 8011ea4:	1818      	adds	r0, r3, r0
 8011ea6:	eb42 0106 	adc.w	r1, r2, r6
 8011eaa:	b005      	add	sp, #20
 8011eac:	bc70      	pop	{r4, r5, r6}
 8011eae:	4770      	bx	lr
 8011eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011eb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011eb8:	b005      	add	sp, #20
 8011eba:	bc70      	pop	{r4, r5, r6}
 8011ebc:	4770      	bx	lr
 8011ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ec2:	b005      	add	sp, #20
 8011ec4:	bc70      	pop	{r4, r5, r6}
 8011ec6:	4770      	bx	lr
 8011ec8:	25c17d04 	.word	0x25c17d04
 8011ecc:	3b9aca00 	.word	0x3b9aca00

08011ed0 <on_status>:
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	b002      	add	sp, #8
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop

08011ed8 <on_topic>:
 8011ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011edc:	4a22      	ldr	r2, [pc, #136]	@ (8011f68 <on_topic+0x90>)
 8011ede:	b094      	sub	sp, #80	@ 0x50
 8011ee0:	6812      	ldr	r2, [r2, #0]
 8011ee2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011ee4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011ee8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8011eec:	b3c2      	cbz	r2, 8011f60 <on_topic+0x88>
 8011eee:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8011ef2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8011ef6:	e001      	b.n	8011efc <on_topic+0x24>
 8011ef8:	6852      	ldr	r2, [r2, #4]
 8011efa:	b38a      	cbz	r2, 8011f60 <on_topic+0x88>
 8011efc:	6894      	ldr	r4, [r2, #8]
 8011efe:	8aa3      	ldrh	r3, [r4, #20]
 8011f00:	428b      	cmp	r3, r1
 8011f02:	d1f9      	bne.n	8011ef8 <on_topic+0x20>
 8011f04:	7da3      	ldrb	r3, [r4, #22]
 8011f06:	4283      	cmp	r3, r0
 8011f08:	d1f6      	bne.n	8011ef8 <on_topic+0x20>
 8011f0a:	2248      	movs	r2, #72	@ 0x48
 8011f0c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011f10:	4668      	mov	r0, sp
 8011f12:	f001 fca4 	bl	801385e <memcpy>
 8011f16:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8011f1a:	cb0c      	ldmia	r3, {r2, r3}
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7fa fed7 	bl	800ccd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011f22:	4607      	mov	r7, r0
 8011f24:	b1e0      	cbz	r0, 8011f60 <on_topic+0x88>
 8011f26:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011f2a:	4632      	mov	r2, r6
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f108 0110 	add.w	r1, r8, #16
 8011f32:	f7fb f9b1 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011f36:	b930      	cbnz	r0, 8011f46 <on_topic+0x6e>
 8011f38:	480c      	ldr	r0, [pc, #48]	@ (8011f6c <on_topic+0x94>)
 8011f3a:	4639      	mov	r1, r7
 8011f3c:	b014      	add	sp, #80	@ 0x50
 8011f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f42:	f000 b8bd 	b.w	80120c0 <put_memory>
 8011f46:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8011f4a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8011f4e:	f000 f965 	bl	801221c <rmw_uros_epoch_nanos>
 8011f52:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8011f56:	2305      	movs	r3, #5
 8011f58:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011f5c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8011f60:	b014      	add	sp, #80	@ 0x50
 8011f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f66:	bf00      	nop
 8011f68:	2000d9dc 	.word	0x2000d9dc
 8011f6c:	2000d9cc 	.word	0x2000d9cc

08011f70 <on_request>:
 8011f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f74:	4823      	ldr	r0, [pc, #140]	@ (8012004 <on_request+0x94>)
 8011f76:	b094      	sub	sp, #80	@ 0x50
 8011f78:	6800      	ldr	r0, [r0, #0]
 8011f7a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8011f7c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011f80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d03b      	beq.n	8011ffe <on_request+0x8e>
 8011f86:	461d      	mov	r5, r3
 8011f88:	e001      	b.n	8011f8e <on_request+0x1e>
 8011f8a:	6840      	ldr	r0, [r0, #4]
 8011f8c:	b3b8      	cbz	r0, 8011ffe <on_request+0x8e>
 8011f8e:	6884      	ldr	r4, [r0, #8]
 8011f90:	8b21      	ldrh	r1, [r4, #24]
 8011f92:	4291      	cmp	r1, r2
 8011f94:	d1f9      	bne.n	8011f8a <on_request+0x1a>
 8011f96:	2248      	movs	r2, #72	@ 0x48
 8011f98:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011f9c:	4668      	mov	r0, sp
 8011f9e:	f001 fc5e 	bl	801385e <memcpy>
 8011fa2:	f104 0320 	add.w	r3, r4, #32
 8011fa6:	cb0c      	ldmia	r3, {r2, r3}
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7fa fe91 	bl	800ccd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011fae:	4680      	mov	r8, r0
 8011fb0:	b328      	cbz	r0, 8011ffe <on_request+0x8e>
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011fb8:	4632      	mov	r2, r6
 8011fba:	f107 0110 	add.w	r1, r7, #16
 8011fbe:	f7fb f96b 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 8011fc2:	b930      	cbnz	r0, 8011fd2 <on_request+0x62>
 8011fc4:	4810      	ldr	r0, [pc, #64]	@ (8012008 <on_request+0x98>)
 8011fc6:	4641      	mov	r1, r8
 8011fc8:	b014      	add	sp, #80	@ 0x50
 8011fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fce:	f000 b877 	b.w	80120c0 <put_memory>
 8011fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fd4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8011fd8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8011fdc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8011fe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fe4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011fe8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011fec:	f000 f916 	bl	801221c <rmw_uros_epoch_nanos>
 8011ff0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	e942 0102 	strd	r0, r1, [r2, #-8]
 8011ffa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8011ffe:	b014      	add	sp, #80	@ 0x50
 8012000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012004:	2000d9ac 	.word	0x2000d9ac
 8012008:	2000d9cc 	.word	0x2000d9cc

0801200c <on_reply>:
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	4821      	ldr	r0, [pc, #132]	@ (8012098 <on_reply+0x8c>)
 8012012:	b094      	sub	sp, #80	@ 0x50
 8012014:	6800      	ldr	r0, [r0, #0]
 8012016:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012018:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801201c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801201e:	b3b8      	cbz	r0, 8012090 <on_reply+0x84>
 8012020:	461d      	mov	r5, r3
 8012022:	e001      	b.n	8012028 <on_reply+0x1c>
 8012024:	6840      	ldr	r0, [r0, #4]
 8012026:	b398      	cbz	r0, 8012090 <on_reply+0x84>
 8012028:	6884      	ldr	r4, [r0, #8]
 801202a:	8b21      	ldrh	r1, [r4, #24]
 801202c:	4291      	cmp	r1, r2
 801202e:	d1f9      	bne.n	8012024 <on_reply+0x18>
 8012030:	2248      	movs	r2, #72	@ 0x48
 8012032:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012036:	4668      	mov	r0, sp
 8012038:	f001 fc11 	bl	801385e <memcpy>
 801203c:	f104 0320 	add.w	r3, r4, #32
 8012040:	cb0c      	ldmia	r3, {r2, r3}
 8012042:	4620      	mov	r0, r4
 8012044:	f7fa fe44 	bl	800ccd0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012048:	4680      	mov	r8, r0
 801204a:	b308      	cbz	r0, 8012090 <on_reply+0x84>
 801204c:	4638      	mov	r0, r7
 801204e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012052:	4632      	mov	r2, r6
 8012054:	f107 0110 	add.w	r1, r7, #16
 8012058:	f7fb f91e 	bl	800d298 <ucdr_deserialize_array_uint8_t>
 801205c:	b930      	cbnz	r0, 801206c <on_reply+0x60>
 801205e:	480f      	ldr	r0, [pc, #60]	@ (801209c <on_reply+0x90>)
 8012060:	4641      	mov	r1, r8
 8012062:	b014      	add	sp, #80	@ 0x50
 8012064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012068:	f000 b82a 	b.w	80120c0 <put_memory>
 801206c:	2200      	movs	r2, #0
 801206e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8012072:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012076:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801207a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801207e:	f000 f8cd 	bl	801221c <rmw_uros_epoch_nanos>
 8012082:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012086:	2304      	movs	r3, #4
 8012088:	e942 0102 	strd	r0, r1, [r2, #-8]
 801208c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012090:	b014      	add	sp, #80	@ 0x50
 8012092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012096:	bf00      	nop
 8012098:	200090c0 	.word	0x200090c0
 801209c:	2000d9cc 	.word	0x2000d9cc

080120a0 <get_memory>:
 80120a0:	4603      	mov	r3, r0
 80120a2:	6840      	ldr	r0, [r0, #4]
 80120a4:	b158      	cbz	r0, 80120be <get_memory+0x1e>
 80120a6:	6842      	ldr	r2, [r0, #4]
 80120a8:	605a      	str	r2, [r3, #4]
 80120aa:	b10a      	cbz	r2, 80120b0 <get_memory+0x10>
 80120ac:	2100      	movs	r1, #0
 80120ae:	6011      	str	r1, [r2, #0]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	6042      	str	r2, [r0, #4]
 80120b4:	b102      	cbz	r2, 80120b8 <get_memory+0x18>
 80120b6:	6010      	str	r0, [r2, #0]
 80120b8:	2200      	movs	r2, #0
 80120ba:	6002      	str	r2, [r0, #0]
 80120bc:	6018      	str	r0, [r3, #0]
 80120be:	4770      	bx	lr

080120c0 <put_memory>:
 80120c0:	680b      	ldr	r3, [r1, #0]
 80120c2:	b10b      	cbz	r3, 80120c8 <put_memory+0x8>
 80120c4:	684a      	ldr	r2, [r1, #4]
 80120c6:	605a      	str	r2, [r3, #4]
 80120c8:	684a      	ldr	r2, [r1, #4]
 80120ca:	b102      	cbz	r2, 80120ce <put_memory+0xe>
 80120cc:	6013      	str	r3, [r2, #0]
 80120ce:	6803      	ldr	r3, [r0, #0]
 80120d0:	428b      	cmp	r3, r1
 80120d2:	6843      	ldr	r3, [r0, #4]
 80120d4:	bf08      	it	eq
 80120d6:	6002      	streq	r2, [r0, #0]
 80120d8:	604b      	str	r3, [r1, #4]
 80120da:	b103      	cbz	r3, 80120de <put_memory+0x1e>
 80120dc:	6019      	str	r1, [r3, #0]
 80120de:	2300      	movs	r3, #0
 80120e0:	600b      	str	r3, [r1, #0]
 80120e2:	6041      	str	r1, [r0, #4]
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop

080120e8 <rmw_create_guard_condition>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4605      	mov	r5, r0
 80120ec:	4807      	ldr	r0, [pc, #28]	@ (801210c <rmw_create_guard_condition+0x24>)
 80120ee:	f7ff ffd7 	bl	80120a0 <get_memory>
 80120f2:	b148      	cbz	r0, 8012108 <rmw_create_guard_condition+0x20>
 80120f4:	6884      	ldr	r4, [r0, #8]
 80120f6:	2300      	movs	r3, #0
 80120f8:	7423      	strb	r3, [r4, #16]
 80120fa:	61e5      	str	r5, [r4, #28]
 80120fc:	f7f9 fb50 	bl	800b7a0 <rmw_get_implementation_identifier>
 8012100:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012104:	f104 0014 	add.w	r0, r4, #20
 8012108:	bd38      	pop	{r3, r4, r5, pc}
 801210a:	bf00      	nop
 801210c:	2000d96c 	.word	0x2000d96c

08012110 <rmw_destroy_guard_condition>:
 8012110:	b508      	push	{r3, lr}
 8012112:	4b08      	ldr	r3, [pc, #32]	@ (8012134 <rmw_destroy_guard_condition+0x24>)
 8012114:	6819      	ldr	r1, [r3, #0]
 8012116:	b911      	cbnz	r1, 801211e <rmw_destroy_guard_condition+0xe>
 8012118:	e00a      	b.n	8012130 <rmw_destroy_guard_condition+0x20>
 801211a:	6849      	ldr	r1, [r1, #4]
 801211c:	b141      	cbz	r1, 8012130 <rmw_destroy_guard_condition+0x20>
 801211e:	688b      	ldr	r3, [r1, #8]
 8012120:	3314      	adds	r3, #20
 8012122:	4298      	cmp	r0, r3
 8012124:	d1f9      	bne.n	801211a <rmw_destroy_guard_condition+0xa>
 8012126:	4803      	ldr	r0, [pc, #12]	@ (8012134 <rmw_destroy_guard_condition+0x24>)
 8012128:	f7ff ffca 	bl	80120c0 <put_memory>
 801212c:	2000      	movs	r0, #0
 801212e:	bd08      	pop	{r3, pc}
 8012130:	2001      	movs	r0, #1
 8012132:	bd08      	pop	{r3, pc}
 8012134:	2000d96c 	.word	0x2000d96c

08012138 <create_topic>:
 8012138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213c:	4605      	mov	r5, r0
 801213e:	b084      	sub	sp, #16
 8012140:	4822      	ldr	r0, [pc, #136]	@ (80121cc <create_topic+0x94>)
 8012142:	460f      	mov	r7, r1
 8012144:	4616      	mov	r6, r2
 8012146:	f7ff ffab 	bl	80120a0 <get_memory>
 801214a:	4604      	mov	r4, r0
 801214c:	2800      	cmp	r0, #0
 801214e:	d039      	beq.n	80121c4 <create_topic+0x8c>
 8012150:	692b      	ldr	r3, [r5, #16]
 8012152:	6884      	ldr	r4, [r0, #8]
 8012154:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80121d4 <create_topic+0x9c>
 8012158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801215c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012160:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8012164:	1c42      	adds	r2, r0, #1
 8012166:	2102      	movs	r1, #2
 8012168:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801216c:	f7fc fa9c 	bl	800e6a8 <uxr_object_id>
 8012170:	223c      	movs	r2, #60	@ 0x3c
 8012172:	6120      	str	r0, [r4, #16]
 8012174:	4641      	mov	r1, r8
 8012176:	4638      	mov	r0, r7
 8012178:	f7fa ff06 	bl	800cf88 <generate_topic_name>
 801217c:	b1f0      	cbz	r0, 80121bc <create_topic+0x84>
 801217e:	4f14      	ldr	r7, [pc, #80]	@ (80121d0 <create_topic+0x98>)
 8012180:	4630      	mov	r0, r6
 8012182:	2264      	movs	r2, #100	@ 0x64
 8012184:	4639      	mov	r1, r7
 8012186:	f7fa fecf 	bl	800cf28 <generate_type_name>
 801218a:	b1b8      	cbz	r0, 80121bc <create_topic+0x84>
 801218c:	6928      	ldr	r0, [r5, #16]
 801218e:	2306      	movs	r3, #6
 8012190:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012194:	f8cd 8000 	str.w	r8, [sp]
 8012198:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801219c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121a0:	6811      	ldr	r1, [r2, #0]
 80121a2:	696b      	ldr	r3, [r5, #20]
 80121a4:	6922      	ldr	r2, [r4, #16]
 80121a6:	f7fc f8df 	bl	800e368 <uxr_buffer_create_topic_bin>
 80121aa:	4602      	mov	r2, r0
 80121ac:	6928      	ldr	r0, [r5, #16]
 80121ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80121b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80121b6:	f7fa fe81 	bl	800cebc <run_xrce_session>
 80121ba:	b918      	cbnz	r0, 80121c4 <create_topic+0x8c>
 80121bc:	4620      	mov	r0, r4
 80121be:	f7fa fd7b 	bl	800ccb8 <rmw_uxrce_fini_topic_memory>
 80121c2:	2400      	movs	r4, #0
 80121c4:	4620      	mov	r0, r4
 80121c6:	b004      	add	sp, #16
 80121c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121cc:	2000d9ec 	.word	0x2000d9ec
 80121d0:	2000da60 	.word	0x2000da60
 80121d4:	2000da24 	.word	0x2000da24

080121d8 <destroy_topic>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	6985      	ldr	r5, [r0, #24]
 80121dc:	b1d5      	cbz	r5, 8012214 <destroy_topic+0x3c>
 80121de:	4604      	mov	r4, r0
 80121e0:	6928      	ldr	r0, [r5, #16]
 80121e2:	6922      	ldr	r2, [r4, #16]
 80121e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80121e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121ec:	6819      	ldr	r1, [r3, #0]
 80121ee:	f7fc f83d 	bl	800e26c <uxr_buffer_delete_entity>
 80121f2:	4602      	mov	r2, r0
 80121f4:	6928      	ldr	r0, [r5, #16]
 80121f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80121fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80121fe:	f7fa fe5d 	bl	800cebc <run_xrce_session>
 8012202:	2800      	cmp	r0, #0
 8012204:	4620      	mov	r0, r4
 8012206:	bf14      	ite	ne
 8012208:	2400      	movne	r4, #0
 801220a:	2402      	moveq	r4, #2
 801220c:	f7fa fd54 	bl	800ccb8 <rmw_uxrce_fini_topic_memory>
 8012210:	4620      	mov	r0, r4
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	2401      	movs	r4, #1
 8012216:	4620      	mov	r0, r4
 8012218:	bd38      	pop	{r3, r4, r5, pc}
 801221a:	bf00      	nop

0801221c <rmw_uros_epoch_nanos>:
 801221c:	4b05      	ldr	r3, [pc, #20]	@ (8012234 <rmw_uros_epoch_nanos+0x18>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	b123      	cbz	r3, 801222c <rmw_uros_epoch_nanos+0x10>
 8012222:	6898      	ldr	r0, [r3, #8]
 8012224:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012228:	f7fc bcb4 	b.w	800eb94 <uxr_epoch_nanos>
 801222c:	2000      	movs	r0, #0
 801222e:	2100      	movs	r1, #0
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	2000d9bc 	.word	0x2000d9bc

08012238 <ucdr_serialize_string>:
 8012238:	b510      	push	{r4, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	4604      	mov	r4, r0
 801223e:	4608      	mov	r0, r1
 8012240:	9101      	str	r1, [sp, #4]
 8012242:	f7ed ffd7 	bl	80001f4 <strlen>
 8012246:	9901      	ldr	r1, [sp, #4]
 8012248:	1c42      	adds	r2, r0, #1
 801224a:	4620      	mov	r0, r4
 801224c:	b002      	add	sp, #8
 801224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012252:	f7f5 bfb5 	b.w	80081c0 <ucdr_serialize_sequence_char>
 8012256:	bf00      	nop

08012258 <ucdr_deserialize_string>:
 8012258:	b500      	push	{lr}
 801225a:	b083      	sub	sp, #12
 801225c:	ab01      	add	r3, sp, #4
 801225e:	f7f5 ffc1 	bl	80081e4 <ucdr_deserialize_sequence_char>
 8012262:	b003      	add	sp, #12
 8012264:	f85d fb04 	ldr.w	pc, [sp], #4

08012268 <uxr_init_input_best_effort_stream>:
 8012268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801226c:	8003      	strh	r3, [r0, #0]
 801226e:	4770      	bx	lr

08012270 <uxr_reset_input_best_effort_stream>:
 8012270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012274:	8003      	strh	r3, [r0, #0]
 8012276:	4770      	bx	lr

08012278 <uxr_receive_best_effort_message>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4604      	mov	r4, r0
 801227c:	8800      	ldrh	r0, [r0, #0]
 801227e:	460d      	mov	r5, r1
 8012280:	f000 fd22 	bl	8012cc8 <uxr_seq_num_cmp>
 8012284:	4603      	mov	r3, r0
 8012286:	2b00      	cmp	r3, #0
 8012288:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801228c:	bfb8      	it	lt
 801228e:	8025      	strhlt	r5, [r4, #0]
 8012290:	bd38      	pop	{r3, r4, r5, pc}
 8012292:	bf00      	nop

08012294 <on_full_input_buffer>:
 8012294:	b570      	push	{r4, r5, r6, lr}
 8012296:	4605      	mov	r5, r0
 8012298:	460c      	mov	r4, r1
 801229a:	682b      	ldr	r3, [r5, #0]
 801229c:	6809      	ldr	r1, [r1, #0]
 801229e:	8920      	ldrh	r0, [r4, #8]
 80122a0:	6862      	ldr	r2, [r4, #4]
 80122a2:	fbb2 f2f0 	udiv	r2, r2, r0
 80122a6:	eba3 0c01 	sub.w	ip, r3, r1
 80122aa:	fbbc fcf2 	udiv	ip, ip, r2
 80122ae:	f10c 0c01 	add.w	ip, ip, #1
 80122b2:	fa1f f38c 	uxth.w	r3, ip
 80122b6:	fbb3 f6f0 	udiv	r6, r3, r0
 80122ba:	fb00 3316 	mls	r3, r0, r6, r3
 80122be:	b29b      	uxth	r3, r3
 80122c0:	fb02 f303 	mul.w	r3, r2, r3
 80122c4:	1d18      	adds	r0, r3, #4
 80122c6:	4408      	add	r0, r1
 80122c8:	7d26      	ldrb	r6, [r4, #20]
 80122ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80122ce:	b116      	cbz	r6, 80122d6 <on_full_input_buffer+0x42>
 80122d0:	2600      	movs	r6, #0
 80122d2:	f840 6c04 	str.w	r6, [r0, #-4]
 80122d6:	2a03      	cmp	r2, #3
 80122d8:	d801      	bhi.n	80122de <on_full_input_buffer+0x4a>
 80122da:	2001      	movs	r0, #1
 80122dc:	bd70      	pop	{r4, r5, r6, pc}
 80122de:	3308      	adds	r3, #8
 80122e0:	4419      	add	r1, r3
 80122e2:	4628      	mov	r0, r5
 80122e4:	692b      	ldr	r3, [r5, #16]
 80122e6:	3a04      	subs	r2, #4
 80122e8:	f7f5 fef2 	bl	80080d0 <ucdr_init_buffer_origin>
 80122ec:	4628      	mov	r0, r5
 80122ee:	4903      	ldr	r1, [pc, #12]	@ (80122fc <on_full_input_buffer+0x68>)
 80122f0:	4622      	mov	r2, r4
 80122f2:	f7f5 fec9 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 80122f6:	2000      	movs	r0, #0
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	bf00      	nop
 80122fc:	08012295 	.word	0x08012295

08012300 <uxr_init_input_reliable_stream>:
 8012300:	b500      	push	{lr}
 8012302:	e9c0 1200 	strd	r1, r2, [r0]
 8012306:	f04f 0e00 	mov.w	lr, #0
 801230a:	9a01      	ldr	r2, [sp, #4]
 801230c:	8103      	strh	r3, [r0, #8]
 801230e:	6102      	str	r2, [r0, #16]
 8012310:	f880 e014 	strb.w	lr, [r0, #20]
 8012314:	b1d3      	cbz	r3, 801234c <uxr_init_input_reliable_stream+0x4c>
 8012316:	f8c1 e000 	str.w	lr, [r1]
 801231a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801231e:	f1bc 0f01 	cmp.w	ip, #1
 8012322:	d913      	bls.n	801234c <uxr_init_input_reliable_stream+0x4c>
 8012324:	2301      	movs	r3, #1
 8012326:	fbb3 f1fc 	udiv	r1, r3, ip
 801232a:	fb0c 3111 	mls	r1, ip, r1, r3
 801232e:	b289      	uxth	r1, r1
 8012330:	6842      	ldr	r2, [r0, #4]
 8012332:	fbb2 f2fc 	udiv	r2, r2, ip
 8012336:	fb01 f202 	mul.w	r2, r1, r2
 801233a:	6801      	ldr	r1, [r0, #0]
 801233c:	f841 e002 	str.w	lr, [r1, r2]
 8012340:	3301      	adds	r3, #1
 8012342:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012346:	b29b      	uxth	r3, r3
 8012348:	459c      	cmp	ip, r3
 801234a:	d8ec      	bhi.n	8012326 <uxr_init_input_reliable_stream+0x26>
 801234c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012350:	60c3      	str	r3, [r0, #12]
 8012352:	f85d fb04 	ldr.w	pc, [sp], #4
 8012356:	bf00      	nop

08012358 <uxr_reset_input_reliable_stream>:
 8012358:	8901      	ldrh	r1, [r0, #8]
 801235a:	b1e9      	cbz	r1, 8012398 <uxr_reset_input_reliable_stream+0x40>
 801235c:	f04f 0c00 	mov.w	ip, #0
 8012360:	b500      	push	{lr}
 8012362:	4663      	mov	r3, ip
 8012364:	46e6      	mov	lr, ip
 8012366:	fbb3 f2f1 	udiv	r2, r3, r1
 801236a:	fb01 3312 	mls	r3, r1, r2, r3
 801236e:	b29b      	uxth	r3, r3
 8012370:	6842      	ldr	r2, [r0, #4]
 8012372:	fbb2 f2f1 	udiv	r2, r2, r1
 8012376:	fb02 f303 	mul.w	r3, r2, r3
 801237a:	6802      	ldr	r2, [r0, #0]
 801237c:	f842 e003 	str.w	lr, [r2, r3]
 8012380:	f10c 0c01 	add.w	ip, ip, #1
 8012384:	8901      	ldrh	r1, [r0, #8]
 8012386:	fa1f f38c 	uxth.w	r3, ip
 801238a:	4299      	cmp	r1, r3
 801238c:	d8eb      	bhi.n	8012366 <uxr_reset_input_reliable_stream+0xe>
 801238e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012392:	60c3      	str	r3, [r0, #12]
 8012394:	f85d fb04 	ldr.w	pc, [sp], #4
 8012398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801239c:	60c3      	str	r3, [r0, #12]
 801239e:	4770      	bx	lr

080123a0 <uxr_receive_reliable_message>:
 80123a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123a4:	4604      	mov	r4, r0
 80123a6:	460d      	mov	r5, r1
 80123a8:	8901      	ldrh	r1, [r0, #8]
 80123aa:	8980      	ldrh	r0, [r0, #12]
 80123ac:	4690      	mov	r8, r2
 80123ae:	461f      	mov	r7, r3
 80123b0:	f000 fc82 	bl	8012cb8 <uxr_seq_num_add>
 80123b4:	4629      	mov	r1, r5
 80123b6:	4606      	mov	r6, r0
 80123b8:	89a0      	ldrh	r0, [r4, #12]
 80123ba:	f000 fc85 	bl	8012cc8 <uxr_seq_num_cmp>
 80123be:	2800      	cmp	r0, #0
 80123c0:	db0a      	blt.n	80123d8 <uxr_receive_reliable_message+0x38>
 80123c2:	2600      	movs	r6, #0
 80123c4:	89e0      	ldrh	r0, [r4, #14]
 80123c6:	4629      	mov	r1, r5
 80123c8:	f000 fc7e 	bl	8012cc8 <uxr_seq_num_cmp>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	da00      	bge.n	80123d2 <uxr_receive_reliable_message+0x32>
 80123d0:	81e5      	strh	r5, [r4, #14]
 80123d2:	4630      	mov	r0, r6
 80123d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123d8:	4630      	mov	r0, r6
 80123da:	4629      	mov	r1, r5
 80123dc:	f000 fc74 	bl	8012cc8 <uxr_seq_num_cmp>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	dbee      	blt.n	80123c2 <uxr_receive_reliable_message+0x22>
 80123e4:	6923      	ldr	r3, [r4, #16]
 80123e6:	4640      	mov	r0, r8
 80123e8:	4798      	blx	r3
 80123ea:	2101      	movs	r1, #1
 80123ec:	4681      	mov	r9, r0
 80123ee:	89a0      	ldrh	r0, [r4, #12]
 80123f0:	f000 fc62 	bl	8012cb8 <uxr_seq_num_add>
 80123f4:	f1b9 0f00 	cmp.w	r9, #0
 80123f8:	d101      	bne.n	80123fe <uxr_receive_reliable_message+0x5e>
 80123fa:	4285      	cmp	r5, r0
 80123fc:	d047      	beq.n	801248e <uxr_receive_reliable_message+0xee>
 80123fe:	8922      	ldrh	r2, [r4, #8]
 8012400:	fbb5 f0f2 	udiv	r0, r5, r2
 8012404:	fb02 5010 	mls	r0, r2, r0, r5
 8012408:	b280      	uxth	r0, r0
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012410:	fb00 f303 	mul.w	r3, r0, r3
 8012414:	6820      	ldr	r0, [r4, #0]
 8012416:	3304      	adds	r3, #4
 8012418:	4418      	add	r0, r3
 801241a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1cf      	bne.n	80123c2 <uxr_receive_reliable_message+0x22>
 8012422:	4641      	mov	r1, r8
 8012424:	463a      	mov	r2, r7
 8012426:	f001 fa1a 	bl	801385e <memcpy>
 801242a:	8921      	ldrh	r1, [r4, #8]
 801242c:	fbb5 f2f1 	udiv	r2, r5, r1
 8012430:	fb01 5212 	mls	r2, r1, r2, r5
 8012434:	b292      	uxth	r2, r2
 8012436:	6863      	ldr	r3, [r4, #4]
 8012438:	fbb3 f3f1 	udiv	r3, r3, r1
 801243c:	fb02 f303 	mul.w	r3, r2, r3
 8012440:	6822      	ldr	r2, [r4, #0]
 8012442:	50d7      	str	r7, [r2, r3]
 8012444:	9a08      	ldr	r2, [sp, #32]
 8012446:	2301      	movs	r3, #1
 8012448:	7013      	strb	r3, [r2, #0]
 801244a:	f1b9 0f00 	cmp.w	r9, #0
 801244e:	d0b8      	beq.n	80123c2 <uxr_receive_reliable_message+0x22>
 8012450:	89a6      	ldrh	r6, [r4, #12]
 8012452:	4630      	mov	r0, r6
 8012454:	2101      	movs	r1, #1
 8012456:	f000 fc2f 	bl	8012cb8 <uxr_seq_num_add>
 801245a:	8922      	ldrh	r2, [r4, #8]
 801245c:	6863      	ldr	r3, [r4, #4]
 801245e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012462:	4606      	mov	r6, r0
 8012464:	fbb0 f0f2 	udiv	r0, r0, r2
 8012468:	fb02 6010 	mls	r0, r2, r0, r6
 801246c:	b280      	uxth	r0, r0
 801246e:	fb00 f303 	mul.w	r3, r0, r3
 8012472:	6820      	ldr	r0, [r4, #0]
 8012474:	3304      	adds	r3, #4
 8012476:	4418      	add	r0, r3
 8012478:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d0a0      	beq.n	80123c2 <uxr_receive_reliable_message+0x22>
 8012480:	6923      	ldr	r3, [r4, #16]
 8012482:	4798      	blx	r3
 8012484:	2802      	cmp	r0, #2
 8012486:	d008      	beq.n	801249a <uxr_receive_reliable_message+0xfa>
 8012488:	2801      	cmp	r0, #1
 801248a:	d0e2      	beq.n	8012452 <uxr_receive_reliable_message+0xb2>
 801248c:	e799      	b.n	80123c2 <uxr_receive_reliable_message+0x22>
 801248e:	9b08      	ldr	r3, [sp, #32]
 8012490:	81a5      	strh	r5, [r4, #12]
 8012492:	2601      	movs	r6, #1
 8012494:	f883 9000 	strb.w	r9, [r3]
 8012498:	e794      	b.n	80123c4 <uxr_receive_reliable_message+0x24>
 801249a:	2601      	movs	r6, #1
 801249c:	e792      	b.n	80123c4 <uxr_receive_reliable_message+0x24>
 801249e:	bf00      	nop

080124a0 <uxr_next_input_reliable_buffer_available>:
 80124a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a4:	4604      	mov	r4, r0
 80124a6:	460f      	mov	r7, r1
 80124a8:	8980      	ldrh	r0, [r0, #12]
 80124aa:	2101      	movs	r1, #1
 80124ac:	4690      	mov	r8, r2
 80124ae:	f000 fc03 	bl	8012cb8 <uxr_seq_num_add>
 80124b2:	8922      	ldrh	r2, [r4, #8]
 80124b4:	fbb0 f6f2 	udiv	r6, r0, r2
 80124b8:	fb02 0616 	mls	r6, r2, r6, r0
 80124bc:	b2b6      	uxth	r6, r6
 80124be:	6863      	ldr	r3, [r4, #4]
 80124c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80124c4:	fb06 f303 	mul.w	r3, r6, r3
 80124c8:	6826      	ldr	r6, [r4, #0]
 80124ca:	3304      	adds	r3, #4
 80124cc:	441e      	add	r6, r3
 80124ce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80124d2:	f1b9 0f00 	cmp.w	r9, #0
 80124d6:	d023      	beq.n	8012520 <uxr_next_input_reliable_buffer_available+0x80>
 80124d8:	6923      	ldr	r3, [r4, #16]
 80124da:	4605      	mov	r5, r0
 80124dc:	4630      	mov	r0, r6
 80124de:	4798      	blx	r3
 80124e0:	4682      	mov	sl, r0
 80124e2:	b300      	cbz	r0, 8012526 <uxr_next_input_reliable_buffer_available+0x86>
 80124e4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80124e8:	2101      	movs	r1, #1
 80124ea:	4650      	mov	r0, sl
 80124ec:	f000 fbe4 	bl	8012cb8 <uxr_seq_num_add>
 80124f0:	8921      	ldrh	r1, [r4, #8]
 80124f2:	fbb0 f2f1 	udiv	r2, r0, r1
 80124f6:	4682      	mov	sl, r0
 80124f8:	fb01 0212 	mls	r2, r1, r2, r0
 80124fc:	e9d4 0300 	ldrd	r0, r3, [r4]
 8012500:	b292      	uxth	r2, r2
 8012502:	fbb3 f3f1 	udiv	r3, r3, r1
 8012506:	fb02 f303 	mul.w	r3, r2, r3
 801250a:	3304      	adds	r3, #4
 801250c:	4418      	add	r0, r3
 801250e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012512:	b12b      	cbz	r3, 8012520 <uxr_next_input_reliable_buffer_available+0x80>
 8012514:	6923      	ldr	r3, [r4, #16]
 8012516:	4798      	blx	r3
 8012518:	2802      	cmp	r0, #2
 801251a:	d01b      	beq.n	8012554 <uxr_next_input_reliable_buffer_available+0xb4>
 801251c:	2801      	cmp	r0, #1
 801251e:	d0e3      	beq.n	80124e8 <uxr_next_input_reliable_buffer_available+0x48>
 8012520:	2000      	movs	r0, #0
 8012522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012526:	464a      	mov	r2, r9
 8012528:	4631      	mov	r1, r6
 801252a:	4638      	mov	r0, r7
 801252c:	f7f5 fdd8 	bl	80080e0 <ucdr_init_buffer>
 8012530:	8921      	ldrh	r1, [r4, #8]
 8012532:	fbb5 f2f1 	udiv	r2, r5, r1
 8012536:	fb01 5212 	mls	r2, r1, r2, r5
 801253a:	b292      	uxth	r2, r2
 801253c:	6863      	ldr	r3, [r4, #4]
 801253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012542:	fb02 f303 	mul.w	r3, r2, r3
 8012546:	6822      	ldr	r2, [r4, #0]
 8012548:	f842 a003 	str.w	sl, [r2, r3]
 801254c:	2001      	movs	r0, #1
 801254e:	81a5      	strh	r5, [r4, #12]
 8012550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012554:	8920      	ldrh	r0, [r4, #8]
 8012556:	fbb5 f3f0 	udiv	r3, r5, r0
 801255a:	fb00 5513 	mls	r5, r0, r3, r5
 801255e:	b2ad      	uxth	r5, r5
 8012560:	6863      	ldr	r3, [r4, #4]
 8012562:	fbb3 f3f0 	udiv	r3, r3, r0
 8012566:	fb03 f505 	mul.w	r5, r3, r5
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	2000      	movs	r0, #0
 801256e:	5158      	str	r0, [r3, r5]
 8012570:	eb06 0108 	add.w	r1, r6, r8
 8012574:	eba9 0208 	sub.w	r2, r9, r8
 8012578:	4638      	mov	r0, r7
 801257a:	f7f5 fdb1 	bl	80080e0 <ucdr_init_buffer>
 801257e:	4638      	mov	r0, r7
 8012580:	4903      	ldr	r1, [pc, #12]	@ (8012590 <uxr_next_input_reliable_buffer_available+0xf0>)
 8012582:	4622      	mov	r2, r4
 8012584:	f7f5 fd80 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 8012588:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801258c:	2001      	movs	r0, #1
 801258e:	e7c8      	b.n	8012522 <uxr_next_input_reliable_buffer_available+0x82>
 8012590:	08012295 	.word	0x08012295

08012594 <uxr_process_heartbeat>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4611      	mov	r1, r2
 8012598:	4604      	mov	r4, r0
 801259a:	89c0      	ldrh	r0, [r0, #14]
 801259c:	4615      	mov	r5, r2
 801259e:	f000 fb93 	bl	8012cc8 <uxr_seq_num_cmp>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	bfb8      	it	lt
 80125a6:	81e5      	strhlt	r5, [r4, #14]
 80125a8:	bd38      	pop	{r3, r4, r5, pc}
 80125aa:	bf00      	nop

080125ac <uxr_compute_acknack>:
 80125ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125b0:	8903      	ldrh	r3, [r0, #8]
 80125b2:	8985      	ldrh	r5, [r0, #12]
 80125b4:	4604      	mov	r4, r0
 80125b6:	460e      	mov	r6, r1
 80125b8:	b1d3      	cbz	r3, 80125f0 <uxr_compute_acknack+0x44>
 80125ba:	4628      	mov	r0, r5
 80125bc:	2701      	movs	r7, #1
 80125be:	e003      	b.n	80125c8 <uxr_compute_acknack+0x1c>
 80125c0:	4567      	cmp	r7, ip
 80125c2:	d215      	bcs.n	80125f0 <uxr_compute_acknack+0x44>
 80125c4:	89a0      	ldrh	r0, [r4, #12]
 80125c6:	3701      	adds	r7, #1
 80125c8:	b2b9      	uxth	r1, r7
 80125ca:	f000 fb75 	bl	8012cb8 <uxr_seq_num_add>
 80125ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80125d2:	fbb0 f3fc 	udiv	r3, r0, ip
 80125d6:	fb0c 0313 	mls	r3, ip, r3, r0
 80125da:	b29a      	uxth	r2, r3
 80125dc:	e9d4 1300 	ldrd	r1, r3, [r4]
 80125e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80125e4:	fb02 f303 	mul.w	r3, r2, r3
 80125e8:	58cb      	ldr	r3, [r1, r3]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d1e8      	bne.n	80125c0 <uxr_compute_acknack+0x14>
 80125ee:	4605      	mov	r5, r0
 80125f0:	8035      	strh	r5, [r6, #0]
 80125f2:	2101      	movs	r1, #1
 80125f4:	4628      	mov	r0, r5
 80125f6:	89e7      	ldrh	r7, [r4, #14]
 80125f8:	f000 fb62 	bl	8012cc0 <uxr_seq_num_sub>
 80125fc:	4601      	mov	r1, r0
 80125fe:	4638      	mov	r0, r7
 8012600:	f000 fb5e 	bl	8012cc0 <uxr_seq_num_sub>
 8012604:	4605      	mov	r5, r0
 8012606:	b318      	cbz	r0, 8012650 <uxr_compute_acknack+0xa4>
 8012608:	f04f 0900 	mov.w	r9, #0
 801260c:	464f      	mov	r7, r9
 801260e:	f04f 0801 	mov.w	r8, #1
 8012612:	fa1f f189 	uxth.w	r1, r9
 8012616:	8830      	ldrh	r0, [r6, #0]
 8012618:	f000 fb4e 	bl	8012cb8 <uxr_seq_num_add>
 801261c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012620:	fbb0 f3fc 	udiv	r3, r0, ip
 8012624:	e9d4 1200 	ldrd	r1, r2, [r4]
 8012628:	fb03 001c 	mls	r0, r3, ip, r0
 801262c:	b283      	uxth	r3, r0
 801262e:	fbb2 f2fc 	udiv	r2, r2, ip
 8012632:	fb02 f303 	mul.w	r3, r2, r3
 8012636:	fa08 f209 	lsl.w	r2, r8, r9
 801263a:	58cb      	ldr	r3, [r1, r3]
 801263c:	f109 0901 	add.w	r9, r9, #1
 8012640:	b90b      	cbnz	r3, 8012646 <uxr_compute_acknack+0x9a>
 8012642:	4317      	orrs	r7, r2
 8012644:	b2bf      	uxth	r7, r7
 8012646:	454d      	cmp	r5, r9
 8012648:	d1e3      	bne.n	8012612 <uxr_compute_acknack+0x66>
 801264a:	4638      	mov	r0, r7
 801264c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012650:	4607      	mov	r7, r0
 8012652:	4638      	mov	r0, r7
 8012654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012658 <uxr_init_output_best_effort_stream>:
 8012658:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801265c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8012660:	6001      	str	r1, [r0, #0]
 8012662:	7303      	strb	r3, [r0, #12]
 8012664:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop

0801266c <uxr_reset_output_best_effort_stream>:
 801266c:	7b02      	ldrb	r2, [r0, #12]
 801266e:	6042      	str	r2, [r0, #4]
 8012670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012674:	81c3      	strh	r3, [r0, #14]
 8012676:	4770      	bx	lr

08012678 <uxr_prepare_best_effort_buffer_to_write>:
 8012678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801267a:	4604      	mov	r4, r0
 801267c:	b083      	sub	sp, #12
 801267e:	6840      	ldr	r0, [r0, #4]
 8012680:	460d      	mov	r5, r1
 8012682:	4616      	mov	r6, r2
 8012684:	f7fe f80e 	bl	80106a4 <uxr_submessage_padding>
 8012688:	6863      	ldr	r3, [r4, #4]
 801268a:	4418      	add	r0, r3
 801268c:	68a3      	ldr	r3, [r4, #8]
 801268e:	1942      	adds	r2, r0, r5
 8012690:	4293      	cmp	r3, r2
 8012692:	bf2c      	ite	cs
 8012694:	2701      	movcs	r7, #1
 8012696:	2700      	movcc	r7, #0
 8012698:	d202      	bcs.n	80126a0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801269a:	4638      	mov	r0, r7
 801269c:	b003      	add	sp, #12
 801269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126a0:	9000      	str	r0, [sp, #0]
 80126a2:	6821      	ldr	r1, [r4, #0]
 80126a4:	4630      	mov	r0, r6
 80126a6:	2300      	movs	r3, #0
 80126a8:	f7f5 fd08 	bl	80080bc <ucdr_init_buffer_origin_offset>
 80126ac:	6861      	ldr	r1, [r4, #4]
 80126ae:	4638      	mov	r0, r7
 80126b0:	4429      	add	r1, r5
 80126b2:	6061      	str	r1, [r4, #4]
 80126b4:	b003      	add	sp, #12
 80126b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126b8 <uxr_prepare_best_effort_buffer_to_send>:
 80126b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	461d      	mov	r5, r3
 80126c0:	6840      	ldr	r0, [r0, #4]
 80126c2:	7b23      	ldrb	r3, [r4, #12]
 80126c4:	4298      	cmp	r0, r3
 80126c6:	bf8c      	ite	hi
 80126c8:	2601      	movhi	r6, #1
 80126ca:	2600      	movls	r6, #0
 80126cc:	d802      	bhi.n	80126d4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80126ce:	4630      	mov	r0, r6
 80126d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d4:	4688      	mov	r8, r1
 80126d6:	89e0      	ldrh	r0, [r4, #14]
 80126d8:	2101      	movs	r1, #1
 80126da:	4617      	mov	r7, r2
 80126dc:	f000 faec 	bl	8012cb8 <uxr_seq_num_add>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	81e0      	strh	r0, [r4, #14]
 80126e4:	8028      	strh	r0, [r5, #0]
 80126e6:	f8c8 3000 	str.w	r3, [r8]
 80126ea:	6863      	ldr	r3, [r4, #4]
 80126ec:	603b      	str	r3, [r7, #0]
 80126ee:	7b23      	ldrb	r3, [r4, #12]
 80126f0:	6063      	str	r3, [r4, #4]
 80126f2:	4630      	mov	r0, r6
 80126f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080126f8 <on_full_output_buffer>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	6802      	ldr	r2, [r0, #0]
 80126fc:	460c      	mov	r4, r1
 80126fe:	6809      	ldr	r1, [r1, #0]
 8012700:	8923      	ldrh	r3, [r4, #8]
 8012702:	eba2 0c01 	sub.w	ip, r2, r1
 8012706:	6862      	ldr	r2, [r4, #4]
 8012708:	fbb2 f2f3 	udiv	r2, r2, r3
 801270c:	fbbc fcf2 	udiv	ip, ip, r2
 8012710:	f10c 0c01 	add.w	ip, ip, #1
 8012714:	fa1f fc8c 	uxth.w	ip, ip
 8012718:	fbbc fef3 	udiv	lr, ip, r3
 801271c:	fb03 c31e 	mls	r3, r3, lr, ip
 8012720:	b29b      	uxth	r3, r3
 8012722:	fb02 f303 	mul.w	r3, r2, r3
 8012726:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801272a:	58ca      	ldr	r2, [r1, r3]
 801272c:	4463      	add	r3, ip
 801272e:	eba2 020c 	sub.w	r2, r2, ip
 8012732:	3308      	adds	r3, #8
 8012734:	4605      	mov	r5, r0
 8012736:	4419      	add	r1, r3
 8012738:	3a04      	subs	r2, #4
 801273a:	6903      	ldr	r3, [r0, #16]
 801273c:	f7f5 fcc8 	bl	80080d0 <ucdr_init_buffer_origin>
 8012740:	4628      	mov	r0, r5
 8012742:	4903      	ldr	r1, [pc, #12]	@ (8012750 <on_full_output_buffer+0x58>)
 8012744:	4622      	mov	r2, r4
 8012746:	f7f5 fc9f 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 801274a:	2000      	movs	r0, #0
 801274c:	bd38      	pop	{r3, r4, r5, pc}
 801274e:	bf00      	nop
 8012750:	080126f9 	.word	0x080126f9

08012754 <uxr_init_output_reliable_stream>:
 8012754:	b410      	push	{r4}
 8012756:	f89d c004 	ldrb.w	ip, [sp, #4]
 801275a:	8103      	strh	r3, [r0, #8]
 801275c:	e9c0 1200 	strd	r1, r2, [r0]
 8012760:	f880 c00c 	strb.w	ip, [r0, #12]
 8012764:	b1d3      	cbz	r3, 801279c <uxr_init_output_reliable_stream+0x48>
 8012766:	f8c1 c000 	str.w	ip, [r1]
 801276a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801276e:	f1bc 0f01 	cmp.w	ip, #1
 8012772:	d913      	bls.n	801279c <uxr_init_output_reliable_stream+0x48>
 8012774:	2301      	movs	r3, #1
 8012776:	fbb3 f1fc 	udiv	r1, r3, ip
 801277a:	fb0c 3111 	mls	r1, ip, r1, r3
 801277e:	b289      	uxth	r1, r1
 8012780:	6842      	ldr	r2, [r0, #4]
 8012782:	6804      	ldr	r4, [r0, #0]
 8012784:	fbb2 f2fc 	udiv	r2, r2, ip
 8012788:	fb01 f202 	mul.w	r2, r1, r2
 801278c:	7b01      	ldrb	r1, [r0, #12]
 801278e:	50a1      	str	r1, [r4, r2]
 8012790:	3301      	adds	r3, #1
 8012792:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012796:	b29b      	uxth	r3, r3
 8012798:	459c      	cmp	ip, r3
 801279a:	d8ec      	bhi.n	8012776 <uxr_init_output_reliable_stream+0x22>
 801279c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80127a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80127a4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80127a8:	4905      	ldr	r1, [pc, #20]	@ (80127c0 <uxr_init_output_reliable_stream+0x6c>)
 80127aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127ae:	f8c0 100e 	str.w	r1, [r0, #14]
 80127b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80127b6:	2300      	movs	r3, #0
 80127b8:	8242      	strh	r2, [r0, #18]
 80127ba:	8403      	strh	r3, [r0, #32]
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	ffff0000 	.word	0xffff0000

080127c4 <uxr_reset_output_reliable_stream>:
 80127c4:	8901      	ldrh	r1, [r0, #8]
 80127c6:	b1b1      	cbz	r1, 80127f6 <uxr_reset_output_reliable_stream+0x32>
 80127c8:	f04f 0c00 	mov.w	ip, #0
 80127cc:	4663      	mov	r3, ip
 80127ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80127d2:	fb01 3312 	mls	r3, r1, r2, r3
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	6842      	ldr	r2, [r0, #4]
 80127da:	fbb2 f2f1 	udiv	r2, r2, r1
 80127de:	6801      	ldr	r1, [r0, #0]
 80127e0:	fb02 f303 	mul.w	r3, r2, r3
 80127e4:	7b02      	ldrb	r2, [r0, #12]
 80127e6:	50ca      	str	r2, [r1, r3]
 80127e8:	f10c 0c01 	add.w	ip, ip, #1
 80127ec:	8901      	ldrh	r1, [r0, #8]
 80127ee:	fa1f f38c 	uxth.w	r3, ip
 80127f2:	4299      	cmp	r1, r3
 80127f4:	d8eb      	bhi.n	80127ce <uxr_reset_output_reliable_stream+0xa>
 80127f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80127fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80127fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012802:	4904      	ldr	r1, [pc, #16]	@ (8012814 <uxr_reset_output_reliable_stream+0x50>)
 8012804:	f8c0 100e 	str.w	r1, [r0, #14]
 8012808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801280c:	2300      	movs	r3, #0
 801280e:	8242      	strh	r2, [r0, #18]
 8012810:	8403      	strh	r3, [r0, #32]
 8012812:	4770      	bx	lr
 8012814:	ffff0000 	.word	0xffff0000

08012818 <uxr_prepare_reliable_buffer_to_write>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	4604      	mov	r4, r0
 801281e:	b091      	sub	sp, #68	@ 0x44
 8012820:	8900      	ldrh	r0, [r0, #8]
 8012822:	89e6      	ldrh	r6, [r4, #14]
 8012824:	6823      	ldr	r3, [r4, #0]
 8012826:	9204      	str	r2, [sp, #16]
 8012828:	fbb6 f2f0 	udiv	r2, r6, r0
 801282c:	fb00 6212 	mls	r2, r0, r2, r6
 8012830:	b292      	uxth	r2, r2
 8012832:	6865      	ldr	r5, [r4, #4]
 8012834:	fbb5 f5f0 	udiv	r5, r5, r0
 8012838:	fb05 3202 	mla	r2, r5, r2, r3
 801283c:	3204      	adds	r2, #4
 801283e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8012842:	f894 900c 	ldrb.w	r9, [r4, #12]
 8012846:	9203      	str	r2, [sp, #12]
 8012848:	468b      	mov	fp, r1
 801284a:	1f2f      	subs	r7, r5, #4
 801284c:	2800      	cmp	r0, #0
 801284e:	f000 814c 	beq.w	8012aea <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8012852:	f04f 0c00 	mov.w	ip, #0
 8012856:	46e2      	mov	sl, ip
 8012858:	4661      	mov	r1, ip
 801285a:	fbb1 f2f0 	udiv	r2, r1, r0
 801285e:	fb00 1212 	mls	r2, r0, r2, r1
 8012862:	b292      	uxth	r2, r2
 8012864:	fb05 f202 	mul.w	r2, r5, r2
 8012868:	f10c 0c01 	add.w	ip, ip, #1
 801286c:	589a      	ldr	r2, [r3, r2]
 801286e:	454a      	cmp	r2, r9
 8012870:	bf08      	it	eq
 8012872:	f10a 0a01 	addeq.w	sl, sl, #1
 8012876:	fa1f f18c 	uxth.w	r1, ip
 801287a:	bf08      	it	eq
 801287c:	fa1f fa8a 	uxtheq.w	sl, sl
 8012880:	4281      	cmp	r1, r0
 8012882:	d3ea      	bcc.n	801285a <uxr_prepare_reliable_buffer_to_write+0x42>
 8012884:	4640      	mov	r0, r8
 8012886:	2104      	movs	r1, #4
 8012888:	f8cd a014 	str.w	sl, [sp, #20]
 801288c:	f7f5 fc2c 	bl	80080e8 <ucdr_alignment>
 8012890:	4480      	add	r8, r0
 8012892:	eb08 020b 	add.w	r2, r8, fp
 8012896:	42ba      	cmp	r2, r7
 8012898:	f240 80cd 	bls.w	8012a36 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801289c:	7b22      	ldrb	r2, [r4, #12]
 801289e:	445a      	add	r2, fp
 80128a0:	42ba      	cmp	r2, r7
 80128a2:	f240 80b5 	bls.w	8012a10 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80128a6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80128aa:	33fc      	adds	r3, #252	@ 0xfc
 80128ac:	b2ba      	uxth	r2, r7
 80128ae:	4413      	add	r3, r2
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	fb0a f903 	mul.w	r9, sl, r3
 80128b6:	45d9      	cmp	r9, fp
 80128b8:	9305      	str	r3, [sp, #20]
 80128ba:	9306      	str	r3, [sp, #24]
 80128bc:	f0c0 80b7 	bcc.w	8012a2e <uxr_prepare_reliable_buffer_to_write+0x216>
 80128c0:	f108 0304 	add.w	r3, r8, #4
 80128c4:	42bb      	cmp	r3, r7
 80128c6:	f080 80db 	bcs.w	8012a80 <uxr_prepare_reliable_buffer_to_write+0x268>
 80128ca:	f1a2 0904 	sub.w	r9, r2, #4
 80128ce:	eba9 0908 	sub.w	r9, r9, r8
 80128d2:	9b05      	ldr	r3, [sp, #20]
 80128d4:	fa1f f989 	uxth.w	r9, r9
 80128d8:	ebab 0b09 	sub.w	fp, fp, r9
 80128dc:	fbbb f2f3 	udiv	r2, fp, r3
 80128e0:	fb03 b312 	mls	r3, r3, r2, fp
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f000 80c8 	beq.w	8012a7a <uxr_prepare_reliable_buffer_to_write+0x262>
 80128ea:	3201      	adds	r2, #1
 80128ec:	b292      	uxth	r2, r2
 80128ee:	9306      	str	r3, [sp, #24]
 80128f0:	4552      	cmp	r2, sl
 80128f2:	f200 809c 	bhi.w	8012a2e <uxr_prepare_reliable_buffer_to_write+0x216>
 80128f6:	f10d 0b20 	add.w	fp, sp, #32
 80128fa:	2a00      	cmp	r2, #0
 80128fc:	d042      	beq.n	8012984 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80128fe:	f8cd 801c 	str.w	r8, [sp, #28]
 8012902:	f04f 0a00 	mov.w	sl, #0
 8012906:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801290a:	9505      	str	r5, [sp, #20]
 801290c:	f10d 0b20 	add.w	fp, sp, #32
 8012910:	4615      	mov	r5, r2
 8012912:	e000      	b.n	8012916 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8012914:	46c1      	mov	r9, r8
 8012916:	8920      	ldrh	r0, [r4, #8]
 8012918:	fbb6 f2f0 	udiv	r2, r6, r0
 801291c:	fb00 6112 	mls	r1, r0, r2, r6
 8012920:	b28a      	uxth	r2, r1
 8012922:	6863      	ldr	r3, [r4, #4]
 8012924:	fbb3 f1f0 	udiv	r1, r3, r0
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	fb02 f101 	mul.w	r1, r2, r1
 801292e:	3104      	adds	r1, #4
 8012930:	4419      	add	r1, r3
 8012932:	4658      	mov	r0, fp
 8012934:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012938:	9200      	str	r2, [sp, #0]
 801293a:	2300      	movs	r3, #0
 801293c:	463a      	mov	r2, r7
 801293e:	f7f5 fbbd 	bl	80080bc <ucdr_init_buffer_origin_offset>
 8012942:	464a      	mov	r2, r9
 8012944:	2300      	movs	r3, #0
 8012946:	210d      	movs	r1, #13
 8012948:	4658      	mov	r0, fp
 801294a:	f7fd fe6b 	bl	8010624 <uxr_buffer_submessage_header>
 801294e:	8921      	ldrh	r1, [r4, #8]
 8012950:	fbb6 f2f1 	udiv	r2, r6, r1
 8012954:	fb01 6212 	mls	r2, r1, r2, r6
 8012958:	b292      	uxth	r2, r2
 801295a:	6863      	ldr	r3, [r4, #4]
 801295c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012960:	fb02 f303 	mul.w	r3, r2, r3
 8012964:	6822      	ldr	r2, [r4, #0]
 8012966:	4630      	mov	r0, r6
 8012968:	50d7      	str	r7, [r2, r3]
 801296a:	2101      	movs	r1, #1
 801296c:	f000 f9a4 	bl	8012cb8 <uxr_seq_num_add>
 8012970:	f10a 0a01 	add.w	sl, sl, #1
 8012974:	fa1f f38a 	uxth.w	r3, sl
 8012978:	429d      	cmp	r5, r3
 801297a:	4606      	mov	r6, r0
 801297c:	d8ca      	bhi.n	8012914 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801297e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012982:	9d05      	ldr	r5, [sp, #20]
 8012984:	8920      	ldrh	r0, [r4, #8]
 8012986:	fbb6 f3f0 	udiv	r3, r6, r0
 801298a:	fb00 6313 	mls	r3, r0, r3, r6
 801298e:	b299      	uxth	r1, r3
 8012990:	6863      	ldr	r3, [r4, #4]
 8012992:	fbb3 f3f0 	udiv	r3, r3, r0
 8012996:	fb01 f303 	mul.w	r3, r1, r3
 801299a:	6821      	ldr	r1, [r4, #0]
 801299c:	3304      	adds	r3, #4
 801299e:	4419      	add	r1, r3
 80129a0:	463a      	mov	r2, r7
 80129a2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80129a6:	9000      	str	r0, [sp, #0]
 80129a8:	2300      	movs	r3, #0
 80129aa:	4658      	mov	r0, fp
 80129ac:	f7f5 fb86 	bl	80080bc <ucdr_init_buffer_origin_offset>
 80129b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80129b4:	4658      	mov	r0, fp
 80129b6:	fa1f f289 	uxth.w	r2, r9
 80129ba:	2302      	movs	r3, #2
 80129bc:	210d      	movs	r1, #13
 80129be:	f7fd fe31 	bl	8010624 <uxr_buffer_submessage_header>
 80129c2:	9b03      	ldr	r3, [sp, #12]
 80129c4:	8927      	ldrh	r7, [r4, #8]
 80129c6:	7b20      	ldrb	r0, [r4, #12]
 80129c8:	f108 0104 	add.w	r1, r8, #4
 80129cc:	440b      	add	r3, r1
 80129ce:	4619      	mov	r1, r3
 80129d0:	fbb6 f3f7 	udiv	r3, r6, r7
 80129d4:	fb07 6313 	mls	r3, r7, r3, r6
 80129d8:	f1a5 0208 	sub.w	r2, r5, #8
 80129dc:	b29d      	uxth	r5, r3
 80129de:	3004      	adds	r0, #4
 80129e0:	6863      	ldr	r3, [r4, #4]
 80129e2:	fbb3 f3f7 	udiv	r3, r3, r7
 80129e6:	fb05 f303 	mul.w	r3, r5, r3
 80129ea:	6825      	ldr	r5, [r4, #0]
 80129ec:	4448      	add	r0, r9
 80129ee:	50e8      	str	r0, [r5, r3]
 80129f0:	9d04      	ldr	r5, [sp, #16]
 80129f2:	eba2 0208 	sub.w	r2, r2, r8
 80129f6:	4628      	mov	r0, r5
 80129f8:	f7f5 fb72 	bl	80080e0 <ucdr_init_buffer>
 80129fc:	4628      	mov	r0, r5
 80129fe:	493c      	ldr	r1, [pc, #240]	@ (8012af0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8012a00:	4622      	mov	r2, r4
 8012a02:	f7f5 fb41 	bl	8008088 <ucdr_set_on_full_buffer_callback>
 8012a06:	2001      	movs	r0, #1
 8012a08:	81e6      	strh	r6, [r4, #14]
 8012a0a:	b011      	add	sp, #68	@ 0x44
 8012a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a10:	2101      	movs	r1, #1
 8012a12:	89e0      	ldrh	r0, [r4, #14]
 8012a14:	f000 f950 	bl	8012cb8 <uxr_seq_num_add>
 8012a18:	8921      	ldrh	r1, [r4, #8]
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	8a60      	ldrh	r0, [r4, #18]
 8012a1e:	f000 f94b 	bl	8012cb8 <uxr_seq_num_add>
 8012a22:	4601      	mov	r1, r0
 8012a24:	4628      	mov	r0, r5
 8012a26:	f000 f94f 	bl	8012cc8 <uxr_seq_num_cmp>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	dd42      	ble.n	8012ab4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8012a2e:	2000      	movs	r0, #0
 8012a30:	b011      	add	sp, #68	@ 0x44
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	8921      	ldrh	r1, [r4, #8]
 8012a38:	8a60      	ldrh	r0, [r4, #18]
 8012a3a:	9205      	str	r2, [sp, #20]
 8012a3c:	f000 f93c 	bl	8012cb8 <uxr_seq_num_add>
 8012a40:	4601      	mov	r1, r0
 8012a42:	4630      	mov	r0, r6
 8012a44:	f000 f940 	bl	8012cc8 <uxr_seq_num_cmp>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	9a05      	ldr	r2, [sp, #20]
 8012a4c:	dcef      	bgt.n	8012a2e <uxr_prepare_reliable_buffer_to_write+0x216>
 8012a4e:	8927      	ldrh	r7, [r4, #8]
 8012a50:	fbb6 f3f7 	udiv	r3, r6, r7
 8012a54:	fb07 6313 	mls	r3, r7, r3, r6
 8012a58:	b29d      	uxth	r5, r3
 8012a5a:	6863      	ldr	r3, [r4, #4]
 8012a5c:	6824      	ldr	r4, [r4, #0]
 8012a5e:	fbb3 f3f7 	udiv	r3, r3, r7
 8012a62:	fb05 f303 	mul.w	r3, r5, r3
 8012a66:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8012a6a:	50e2      	str	r2, [r4, r3]
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	f8cd 8000 	str.w	r8, [sp]
 8012a72:	f7f5 fb23 	bl	80080bc <ucdr_init_buffer_origin_offset>
 8012a76:	2001      	movs	r0, #1
 8012a78:	e7da      	b.n	8012a30 <uxr_prepare_reliable_buffer_to_write+0x218>
 8012a7a:	b293      	uxth	r3, r2
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	e737      	b.n	80128f0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8012a80:	4630      	mov	r0, r6
 8012a82:	2101      	movs	r1, #1
 8012a84:	9207      	str	r2, [sp, #28]
 8012a86:	f000 f917 	bl	8012cb8 <uxr_seq_num_add>
 8012a8a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012a8e:	fbb0 f1fc 	udiv	r1, r0, ip
 8012a92:	fb0c 0111 	mls	r1, ip, r1, r0
 8012a96:	4606      	mov	r6, r0
 8012a98:	b288      	uxth	r0, r1
 8012a9a:	6863      	ldr	r3, [r4, #4]
 8012a9c:	fbb3 f1fc 	udiv	r1, r3, ip
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	9a07      	ldr	r2, [sp, #28]
 8012aa4:	fb00 f101 	mul.w	r1, r0, r1
 8012aa8:	3104      	adds	r1, #4
 8012aaa:	440b      	add	r3, r1
 8012aac:	9303      	str	r3, [sp, #12]
 8012aae:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8012ab2:	e70a      	b.n	80128ca <uxr_prepare_reliable_buffer_to_write+0xb2>
 8012ab4:	8921      	ldrh	r1, [r4, #8]
 8012ab6:	fbb5 f3f1 	udiv	r3, r5, r1
 8012aba:	fb01 5313 	mls	r3, r1, r3, r5
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	6863      	ldr	r3, [r4, #4]
 8012ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ac6:	6821      	ldr	r1, [r4, #0]
 8012ac8:	9804      	ldr	r0, [sp, #16]
 8012aca:	fb02 f303 	mul.w	r3, r2, r3
 8012ace:	3304      	adds	r3, #4
 8012ad0:	7b22      	ldrb	r2, [r4, #12]
 8012ad2:	4419      	add	r1, r3
 8012ad4:	445a      	add	r2, fp
 8012ad6:	f841 2c04 	str.w	r2, [r1, #-4]
 8012ada:	7b23      	ldrb	r3, [r4, #12]
 8012adc:	9300      	str	r3, [sp, #0]
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f7f5 faec 	bl	80080bc <ucdr_init_buffer_origin_offset>
 8012ae4:	81e5      	strh	r5, [r4, #14]
 8012ae6:	2001      	movs	r0, #1
 8012ae8:	e7a2      	b.n	8012a30 <uxr_prepare_reliable_buffer_to_write+0x218>
 8012aea:	4682      	mov	sl, r0
 8012aec:	e6ca      	b.n	8012884 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8012aee:	bf00      	nop
 8012af0:	080126f9 	.word	0x080126f9

08012af4 <uxr_prepare_next_reliable_buffer_to_send>:
 8012af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012af6:	4604      	mov	r4, r0
 8012af8:	460f      	mov	r7, r1
 8012afa:	8a00      	ldrh	r0, [r0, #16]
 8012afc:	2101      	movs	r1, #1
 8012afe:	4616      	mov	r6, r2
 8012b00:	461d      	mov	r5, r3
 8012b02:	f000 f8d9 	bl	8012cb8 <uxr_seq_num_add>
 8012b06:	8028      	strh	r0, [r5, #0]
 8012b08:	8922      	ldrh	r2, [r4, #8]
 8012b0a:	fbb0 f3f2 	udiv	r3, r0, r2
 8012b0e:	fb02 0c13 	mls	ip, r2, r3, r0
 8012b12:	fa1f fc8c 	uxth.w	ip, ip
 8012b16:	6863      	ldr	r3, [r4, #4]
 8012b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b1c:	fb0c fc03 	mul.w	ip, ip, r3
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	89e1      	ldrh	r1, [r4, #14]
 8012b24:	f10c 0c04 	add.w	ip, ip, #4
 8012b28:	4463      	add	r3, ip
 8012b2a:	603b      	str	r3, [r7, #0]
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	449c      	add	ip, r3
 8012b30:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8012b34:	6033      	str	r3, [r6, #0]
 8012b36:	f000 f8c7 	bl	8012cc8 <uxr_seq_num_cmp>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	dd01      	ble.n	8012b42 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8012b3e:	2000      	movs	r0, #0
 8012b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b42:	7b23      	ldrb	r3, [r4, #12]
 8012b44:	6832      	ldr	r2, [r6, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d9f9      	bls.n	8012b3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012b4a:	8a61      	ldrh	r1, [r4, #18]
 8012b4c:	8a20      	ldrh	r0, [r4, #16]
 8012b4e:	f000 f8b7 	bl	8012cc0 <uxr_seq_num_sub>
 8012b52:	8923      	ldrh	r3, [r4, #8]
 8012b54:	4283      	cmp	r3, r0
 8012b56:	d0f2      	beq.n	8012b3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012b58:	8828      	ldrh	r0, [r5, #0]
 8012b5a:	89e3      	ldrh	r3, [r4, #14]
 8012b5c:	8220      	strh	r0, [r4, #16]
 8012b5e:	4298      	cmp	r0, r3
 8012b60:	d001      	beq.n	8012b66 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8012b62:	2001      	movs	r0, #1
 8012b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b66:	2101      	movs	r1, #1
 8012b68:	f000 f8a6 	bl	8012cb8 <uxr_seq_num_add>
 8012b6c:	81e0      	strh	r0, [r4, #14]
 8012b6e:	2001      	movs	r0, #1
 8012b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b72:	bf00      	nop

08012b74 <uxr_update_output_stream_heartbeat_timestamp>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	8a01      	ldrh	r1, [r0, #16]
 8012b78:	4604      	mov	r4, r0
 8012b7a:	8a40      	ldrh	r0, [r0, #18]
 8012b7c:	4615      	mov	r5, r2
 8012b7e:	461e      	mov	r6, r3
 8012b80:	f000 f8a2 	bl	8012cc8 <uxr_seq_num_cmp>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	db07      	blt.n	8012b98 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b90:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012b94:	2000      	movs	r0, #0
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012b9c:	b940      	cbnz	r0, 8012bb0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	f884 3020 	strb.w	r3, [r4, #32]
 8012ba4:	3564      	adds	r5, #100	@ 0x64
 8012ba6:	f146 0600 	adc.w	r6, r6, #0
 8012baa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8012bb4:	4295      	cmp	r5, r2
 8012bb6:	eb76 0303 	sbcs.w	r3, r6, r3
 8012bba:	bfa5      	ittet	ge
 8012bbc:	3001      	addge	r0, #1
 8012bbe:	f884 0020 	strbge.w	r0, [r4, #32]
 8012bc2:	2000      	movlt	r0, #0
 8012bc4:	2001      	movge	r0, #1
 8012bc6:	e7ed      	b.n	8012ba4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08012bc8 <uxr_begin_output_nack_buffer_it>:
 8012bc8:	8a40      	ldrh	r0, [r0, #18]
 8012bca:	4770      	bx	lr

08012bcc <uxr_next_reliable_nack_buffer_to_send>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8012bd4:	b082      	sub	sp, #8
 8012bd6:	f1b8 0f00 	cmp.w	r8, #0
 8012bda:	d011      	beq.n	8012c00 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8012bdc:	4604      	mov	r4, r0
 8012bde:	8818      	ldrh	r0, [r3, #0]
 8012be0:	460e      	mov	r6, r1
 8012be2:	4617      	mov	r7, r2
 8012be4:	461d      	mov	r5, r3
 8012be6:	2101      	movs	r1, #1
 8012be8:	f000 f866 	bl	8012cb8 <uxr_seq_num_add>
 8012bec:	8028      	strh	r0, [r5, #0]
 8012bee:	8a21      	ldrh	r1, [r4, #16]
 8012bf0:	f000 f86a 	bl	8012cc8 <uxr_seq_num_cmp>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	dd07      	ble.n	8012c08 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8012bf8:	f04f 0800 	mov.w	r8, #0
 8012bfc:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8012c00:	4640      	mov	r0, r8
 8012c02:	b002      	add	sp, #8
 8012c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c08:	8921      	ldrh	r1, [r4, #8]
 8012c0a:	8828      	ldrh	r0, [r5, #0]
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012c12:	fb01 0c12 	mls	ip, r1, r2, r0
 8012c16:	fa1f f28c 	uxth.w	r2, ip
 8012c1a:	9301      	str	r3, [sp, #4]
 8012c1c:	6863      	ldr	r3, [r4, #4]
 8012c1e:	fbb3 fcf1 	udiv	ip, r3, r1
 8012c22:	9b01      	ldr	r3, [sp, #4]
 8012c24:	fb02 fc0c 	mul.w	ip, r2, ip
 8012c28:	f10c 0c04 	add.w	ip, ip, #4
 8012c2c:	4463      	add	r3, ip
 8012c2e:	6033      	str	r3, [r6, #0]
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	4463      	add	r3, ip
 8012c34:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012c38:	603b      	str	r3, [r7, #0]
 8012c3a:	7b22      	ldrb	r2, [r4, #12]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d0d2      	beq.n	8012be6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8012c40:	4640      	mov	r0, r8
 8012c42:	b002      	add	sp, #8
 8012c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c48 <uxr_process_acknack>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	460e      	mov	r6, r1
 8012c4e:	4610      	mov	r0, r2
 8012c50:	2101      	movs	r1, #1
 8012c52:	f000 f835 	bl	8012cc0 <uxr_seq_num_sub>
 8012c56:	8a61      	ldrh	r1, [r4, #18]
 8012c58:	f000 f832 	bl	8012cc0 <uxr_seq_num_sub>
 8012c5c:	b1c0      	cbz	r0, 8012c90 <uxr_process_acknack+0x48>
 8012c5e:	4605      	mov	r5, r0
 8012c60:	2700      	movs	r7, #0
 8012c62:	2101      	movs	r1, #1
 8012c64:	8a60      	ldrh	r0, [r4, #18]
 8012c66:	f000 f827 	bl	8012cb8 <uxr_seq_num_add>
 8012c6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012c6e:	fbb0 f1fc 	udiv	r1, r0, ip
 8012c72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c76:	fb0c 0111 	mls	r1, ip, r1, r0
 8012c7a:	b289      	uxth	r1, r1
 8012c7c:	3701      	adds	r7, #1
 8012c7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8012c82:	fb01 f303 	mul.w	r3, r1, r3
 8012c86:	42bd      	cmp	r5, r7
 8012c88:	7b21      	ldrb	r1, [r4, #12]
 8012c8a:	8260      	strh	r0, [r4, #18]
 8012c8c:	50d1      	str	r1, [r2, r3]
 8012c8e:	d1e8      	bne.n	8012c62 <uxr_process_acknack+0x1a>
 8012c90:	3e00      	subs	r6, #0
 8012c92:	f04f 0300 	mov.w	r3, #0
 8012c96:	bf18      	it	ne
 8012c98:	2601      	movne	r6, #1
 8012c9a:	f884 3020 	strb.w	r3, [r4, #32]
 8012c9e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8012ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ca4 <uxr_is_output_up_to_date>:
 8012ca4:	8a01      	ldrh	r1, [r0, #16]
 8012ca6:	8a40      	ldrh	r0, [r0, #18]
 8012ca8:	b508      	push	{r3, lr}
 8012caa:	f000 f80d 	bl	8012cc8 <uxr_seq_num_cmp>
 8012cae:	fab0 f080 	clz	r0, r0
 8012cb2:	0940      	lsrs	r0, r0, #5
 8012cb4:	bd08      	pop	{r3, pc}
 8012cb6:	bf00      	nop

08012cb8 <uxr_seq_num_add>:
 8012cb8:	4408      	add	r0, r1
 8012cba:	b280      	uxth	r0, r0
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop

08012cc0 <uxr_seq_num_sub>:
 8012cc0:	1a40      	subs	r0, r0, r1
 8012cc2:	b280      	uxth	r0, r0
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop

08012cc8 <uxr_seq_num_cmp>:
 8012cc8:	4288      	cmp	r0, r1
 8012cca:	d011      	beq.n	8012cf0 <uxr_seq_num_cmp+0x28>
 8012ccc:	d309      	bcc.n	8012ce2 <uxr_seq_num_cmp+0x1a>
 8012cce:	4288      	cmp	r0, r1
 8012cd0:	d910      	bls.n	8012cf4 <uxr_seq_num_cmp+0x2c>
 8012cd2:	1a40      	subs	r0, r0, r1
 8012cd4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8012cd8:	bfd4      	ite	le
 8012cda:	2001      	movle	r0, #1
 8012cdc:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8012ce0:	4770      	bx	lr
 8012ce2:	1a0b      	subs	r3, r1, r0
 8012ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012ce8:	daf1      	bge.n	8012cce <uxr_seq_num_cmp+0x6>
 8012cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cee:	4770      	bx	lr
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	4770      	bx	lr
 8012cf4:	2001      	movs	r0, #1
 8012cf6:	4770      	bx	lr

08012cf8 <calloc>:
 8012cf8:	4b02      	ldr	r3, [pc, #8]	@ (8012d04 <calloc+0xc>)
 8012cfa:	460a      	mov	r2, r1
 8012cfc:	4601      	mov	r1, r0
 8012cfe:	6818      	ldr	r0, [r3, #0]
 8012d00:	f000 b802 	b.w	8012d08 <_calloc_r>
 8012d04:	200000c0 	.word	0x200000c0

08012d08 <_calloc_r>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	fba1 5402 	umull	r5, r4, r1, r2
 8012d0e:	b93c      	cbnz	r4, 8012d20 <_calloc_r+0x18>
 8012d10:	4629      	mov	r1, r5
 8012d12:	f000 f899 	bl	8012e48 <_malloc_r>
 8012d16:	4606      	mov	r6, r0
 8012d18:	b928      	cbnz	r0, 8012d26 <_calloc_r+0x1e>
 8012d1a:	2600      	movs	r6, #0
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	220c      	movs	r2, #12
 8012d22:	6002      	str	r2, [r0, #0]
 8012d24:	e7f9      	b.n	8012d1a <_calloc_r+0x12>
 8012d26:	462a      	mov	r2, r5
 8012d28:	4621      	mov	r1, r4
 8012d2a:	f000 fccf 	bl	80136cc <memset>
 8012d2e:	e7f5      	b.n	8012d1c <_calloc_r+0x14>

08012d30 <exit>:
 8012d30:	b508      	push	{r3, lr}
 8012d32:	4b06      	ldr	r3, [pc, #24]	@ (8012d4c <exit+0x1c>)
 8012d34:	4604      	mov	r4, r0
 8012d36:	b113      	cbz	r3, 8012d3e <exit+0xe>
 8012d38:	2100      	movs	r1, #0
 8012d3a:	f3af 8000 	nop.w
 8012d3e:	4b04      	ldr	r3, [pc, #16]	@ (8012d50 <exit+0x20>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	b103      	cbz	r3, 8012d46 <exit+0x16>
 8012d44:	4798      	blx	r3
 8012d46:	4620      	mov	r0, r4
 8012d48:	f7ee fb80 	bl	800144c <_exit>
 8012d4c:	00000000 	.word	0x00000000
 8012d50:	2000dc04 	.word	0x2000dc04

08012d54 <getenv>:
 8012d54:	b507      	push	{r0, r1, r2, lr}
 8012d56:	4b04      	ldr	r3, [pc, #16]	@ (8012d68 <getenv+0x14>)
 8012d58:	4601      	mov	r1, r0
 8012d5a:	aa01      	add	r2, sp, #4
 8012d5c:	6818      	ldr	r0, [r3, #0]
 8012d5e:	f000 f805 	bl	8012d6c <_findenv_r>
 8012d62:	b003      	add	sp, #12
 8012d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d68:	200000c0 	.word	0x200000c0

08012d6c <_findenv_r>:
 8012d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d70:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012de0 <_findenv_r+0x74>
 8012d74:	4606      	mov	r6, r0
 8012d76:	4689      	mov	r9, r1
 8012d78:	4617      	mov	r7, r2
 8012d7a:	f000 fd9d 	bl	80138b8 <__env_lock>
 8012d7e:	f8da 4000 	ldr.w	r4, [sl]
 8012d82:	b134      	cbz	r4, 8012d92 <_findenv_r+0x26>
 8012d84:	464b      	mov	r3, r9
 8012d86:	4698      	mov	r8, r3
 8012d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d8c:	b13a      	cbz	r2, 8012d9e <_findenv_r+0x32>
 8012d8e:	2a3d      	cmp	r2, #61	@ 0x3d
 8012d90:	d1f9      	bne.n	8012d86 <_findenv_r+0x1a>
 8012d92:	4630      	mov	r0, r6
 8012d94:	f000 fd96 	bl	80138c4 <__env_unlock>
 8012d98:	2000      	movs	r0, #0
 8012d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d9e:	eba8 0809 	sub.w	r8, r8, r9
 8012da2:	46a3      	mov	fp, r4
 8012da4:	f854 0b04 	ldr.w	r0, [r4], #4
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d0f2      	beq.n	8012d92 <_findenv_r+0x26>
 8012dac:	4642      	mov	r2, r8
 8012dae:	4649      	mov	r1, r9
 8012db0:	f000 fca1 	bl	80136f6 <strncmp>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d1f4      	bne.n	8012da2 <_findenv_r+0x36>
 8012db8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012dbc:	eb03 0508 	add.w	r5, r3, r8
 8012dc0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012dc4:	2b3d      	cmp	r3, #61	@ 0x3d
 8012dc6:	d1ec      	bne.n	8012da2 <_findenv_r+0x36>
 8012dc8:	f8da 3000 	ldr.w	r3, [sl]
 8012dcc:	ebab 0303 	sub.w	r3, fp, r3
 8012dd0:	109b      	asrs	r3, r3, #2
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	603b      	str	r3, [r7, #0]
 8012dd6:	f000 fd75 	bl	80138c4 <__env_unlock>
 8012dda:	1c68      	adds	r0, r5, #1
 8012ddc:	e7dd      	b.n	8012d9a <_findenv_r+0x2e>
 8012dde:	bf00      	nop
 8012de0:	20000000 	.word	0x20000000

08012de4 <malloc>:
 8012de4:	4b02      	ldr	r3, [pc, #8]	@ (8012df0 <malloc+0xc>)
 8012de6:	4601      	mov	r1, r0
 8012de8:	6818      	ldr	r0, [r3, #0]
 8012dea:	f000 b82d 	b.w	8012e48 <_malloc_r>
 8012dee:	bf00      	nop
 8012df0:	200000c0 	.word	0x200000c0

08012df4 <free>:
 8012df4:	4b02      	ldr	r3, [pc, #8]	@ (8012e00 <free+0xc>)
 8012df6:	4601      	mov	r1, r0
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	f000 bd69 	b.w	80138d0 <_free_r>
 8012dfe:	bf00      	nop
 8012e00:	200000c0 	.word	0x200000c0

08012e04 <sbrk_aligned>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	4e0f      	ldr	r6, [pc, #60]	@ (8012e44 <sbrk_aligned+0x40>)
 8012e08:	460c      	mov	r4, r1
 8012e0a:	6831      	ldr	r1, [r6, #0]
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	b911      	cbnz	r1, 8012e16 <sbrk_aligned+0x12>
 8012e10:	f000 fcce 	bl	80137b0 <_sbrk_r>
 8012e14:	6030      	str	r0, [r6, #0]
 8012e16:	4621      	mov	r1, r4
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f000 fcc9 	bl	80137b0 <_sbrk_r>
 8012e1e:	1c43      	adds	r3, r0, #1
 8012e20:	d103      	bne.n	8012e2a <sbrk_aligned+0x26>
 8012e22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012e26:	4620      	mov	r0, r4
 8012e28:	bd70      	pop	{r4, r5, r6, pc}
 8012e2a:	1cc4      	adds	r4, r0, #3
 8012e2c:	f024 0403 	bic.w	r4, r4, #3
 8012e30:	42a0      	cmp	r0, r4
 8012e32:	d0f8      	beq.n	8012e26 <sbrk_aligned+0x22>
 8012e34:	1a21      	subs	r1, r4, r0
 8012e36:	4628      	mov	r0, r5
 8012e38:	f000 fcba 	bl	80137b0 <_sbrk_r>
 8012e3c:	3001      	adds	r0, #1
 8012e3e:	d1f2      	bne.n	8012e26 <sbrk_aligned+0x22>
 8012e40:	e7ef      	b.n	8012e22 <sbrk_aligned+0x1e>
 8012e42:	bf00      	nop
 8012e44:	2000dac4 	.word	0x2000dac4

08012e48 <_malloc_r>:
 8012e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e4c:	1ccd      	adds	r5, r1, #3
 8012e4e:	f025 0503 	bic.w	r5, r5, #3
 8012e52:	3508      	adds	r5, #8
 8012e54:	2d0c      	cmp	r5, #12
 8012e56:	bf38      	it	cc
 8012e58:	250c      	movcc	r5, #12
 8012e5a:	2d00      	cmp	r5, #0
 8012e5c:	4606      	mov	r6, r0
 8012e5e:	db01      	blt.n	8012e64 <_malloc_r+0x1c>
 8012e60:	42a9      	cmp	r1, r5
 8012e62:	d904      	bls.n	8012e6e <_malloc_r+0x26>
 8012e64:	230c      	movs	r3, #12
 8012e66:	6033      	str	r3, [r6, #0]
 8012e68:	2000      	movs	r0, #0
 8012e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012f44 <_malloc_r+0xfc>
 8012e72:	f000 f869 	bl	8012f48 <__malloc_lock>
 8012e76:	f8d8 3000 	ldr.w	r3, [r8]
 8012e7a:	461c      	mov	r4, r3
 8012e7c:	bb44      	cbnz	r4, 8012ed0 <_malloc_r+0x88>
 8012e7e:	4629      	mov	r1, r5
 8012e80:	4630      	mov	r0, r6
 8012e82:	f7ff ffbf 	bl	8012e04 <sbrk_aligned>
 8012e86:	1c43      	adds	r3, r0, #1
 8012e88:	4604      	mov	r4, r0
 8012e8a:	d158      	bne.n	8012f3e <_malloc_r+0xf6>
 8012e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8012e90:	4627      	mov	r7, r4
 8012e92:	2f00      	cmp	r7, #0
 8012e94:	d143      	bne.n	8012f1e <_malloc_r+0xd6>
 8012e96:	2c00      	cmp	r4, #0
 8012e98:	d04b      	beq.n	8012f32 <_malloc_r+0xea>
 8012e9a:	6823      	ldr	r3, [r4, #0]
 8012e9c:	4639      	mov	r1, r7
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	eb04 0903 	add.w	r9, r4, r3
 8012ea4:	f000 fc84 	bl	80137b0 <_sbrk_r>
 8012ea8:	4581      	cmp	r9, r0
 8012eaa:	d142      	bne.n	8012f32 <_malloc_r+0xea>
 8012eac:	6821      	ldr	r1, [r4, #0]
 8012eae:	1a6d      	subs	r5, r5, r1
 8012eb0:	4629      	mov	r1, r5
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	f7ff ffa6 	bl	8012e04 <sbrk_aligned>
 8012eb8:	3001      	adds	r0, #1
 8012eba:	d03a      	beq.n	8012f32 <_malloc_r+0xea>
 8012ebc:	6823      	ldr	r3, [r4, #0]
 8012ebe:	442b      	add	r3, r5
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ec6:	685a      	ldr	r2, [r3, #4]
 8012ec8:	bb62      	cbnz	r2, 8012f24 <_malloc_r+0xdc>
 8012eca:	f8c8 7000 	str.w	r7, [r8]
 8012ece:	e00f      	b.n	8012ef0 <_malloc_r+0xa8>
 8012ed0:	6822      	ldr	r2, [r4, #0]
 8012ed2:	1b52      	subs	r2, r2, r5
 8012ed4:	d420      	bmi.n	8012f18 <_malloc_r+0xd0>
 8012ed6:	2a0b      	cmp	r2, #11
 8012ed8:	d917      	bls.n	8012f0a <_malloc_r+0xc2>
 8012eda:	1961      	adds	r1, r4, r5
 8012edc:	42a3      	cmp	r3, r4
 8012ede:	6025      	str	r5, [r4, #0]
 8012ee0:	bf18      	it	ne
 8012ee2:	6059      	strne	r1, [r3, #4]
 8012ee4:	6863      	ldr	r3, [r4, #4]
 8012ee6:	bf08      	it	eq
 8012ee8:	f8c8 1000 	streq.w	r1, [r8]
 8012eec:	5162      	str	r2, [r4, r5]
 8012eee:	604b      	str	r3, [r1, #4]
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	f000 f82f 	bl	8012f54 <__malloc_unlock>
 8012ef6:	f104 000b 	add.w	r0, r4, #11
 8012efa:	1d23      	adds	r3, r4, #4
 8012efc:	f020 0007 	bic.w	r0, r0, #7
 8012f00:	1ac2      	subs	r2, r0, r3
 8012f02:	bf1c      	itt	ne
 8012f04:	1a1b      	subne	r3, r3, r0
 8012f06:	50a3      	strne	r3, [r4, r2]
 8012f08:	e7af      	b.n	8012e6a <_malloc_r+0x22>
 8012f0a:	6862      	ldr	r2, [r4, #4]
 8012f0c:	42a3      	cmp	r3, r4
 8012f0e:	bf0c      	ite	eq
 8012f10:	f8c8 2000 	streq.w	r2, [r8]
 8012f14:	605a      	strne	r2, [r3, #4]
 8012f16:	e7eb      	b.n	8012ef0 <_malloc_r+0xa8>
 8012f18:	4623      	mov	r3, r4
 8012f1a:	6864      	ldr	r4, [r4, #4]
 8012f1c:	e7ae      	b.n	8012e7c <_malloc_r+0x34>
 8012f1e:	463c      	mov	r4, r7
 8012f20:	687f      	ldr	r7, [r7, #4]
 8012f22:	e7b6      	b.n	8012e92 <_malloc_r+0x4a>
 8012f24:	461a      	mov	r2, r3
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	42a3      	cmp	r3, r4
 8012f2a:	d1fb      	bne.n	8012f24 <_malloc_r+0xdc>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	6053      	str	r3, [r2, #4]
 8012f30:	e7de      	b.n	8012ef0 <_malloc_r+0xa8>
 8012f32:	230c      	movs	r3, #12
 8012f34:	6033      	str	r3, [r6, #0]
 8012f36:	4630      	mov	r0, r6
 8012f38:	f000 f80c 	bl	8012f54 <__malloc_unlock>
 8012f3c:	e794      	b.n	8012e68 <_malloc_r+0x20>
 8012f3e:	6005      	str	r5, [r0, #0]
 8012f40:	e7d6      	b.n	8012ef0 <_malloc_r+0xa8>
 8012f42:	bf00      	nop
 8012f44:	2000dac8 	.word	0x2000dac8

08012f48 <__malloc_lock>:
 8012f48:	4801      	ldr	r0, [pc, #4]	@ (8012f50 <__malloc_lock+0x8>)
 8012f4a:	f000 bc7e 	b.w	801384a <__retarget_lock_acquire_recursive>
 8012f4e:	bf00      	nop
 8012f50:	2000dc0d 	.word	0x2000dc0d

08012f54 <__malloc_unlock>:
 8012f54:	4801      	ldr	r0, [pc, #4]	@ (8012f5c <__malloc_unlock+0x8>)
 8012f56:	f000 bc79 	b.w	801384c <__retarget_lock_release_recursive>
 8012f5a:	bf00      	nop
 8012f5c:	2000dc0d 	.word	0x2000dc0d

08012f60 <srand>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4b10      	ldr	r3, [pc, #64]	@ (8012fa4 <srand+0x44>)
 8012f64:	681d      	ldr	r5, [r3, #0]
 8012f66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012f68:	4604      	mov	r4, r0
 8012f6a:	b9b3      	cbnz	r3, 8012f9a <srand+0x3a>
 8012f6c:	2018      	movs	r0, #24
 8012f6e:	f7ff ff39 	bl	8012de4 <malloc>
 8012f72:	4602      	mov	r2, r0
 8012f74:	6328      	str	r0, [r5, #48]	@ 0x30
 8012f76:	b920      	cbnz	r0, 8012f82 <srand+0x22>
 8012f78:	4b0b      	ldr	r3, [pc, #44]	@ (8012fa8 <srand+0x48>)
 8012f7a:	480c      	ldr	r0, [pc, #48]	@ (8012fac <srand+0x4c>)
 8012f7c:	2146      	movs	r1, #70	@ 0x46
 8012f7e:	f000 fc7d 	bl	801387c <__assert_func>
 8012f82:	490b      	ldr	r1, [pc, #44]	@ (8012fb0 <srand+0x50>)
 8012f84:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb4 <srand+0x54>)
 8012f86:	e9c0 1300 	strd	r1, r3, [r0]
 8012f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb8 <srand+0x58>)
 8012f8c:	6083      	str	r3, [r0, #8]
 8012f8e:	230b      	movs	r3, #11
 8012f90:	8183      	strh	r3, [r0, #12]
 8012f92:	2100      	movs	r1, #0
 8012f94:	2001      	movs	r0, #1
 8012f96:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f9a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	611c      	str	r4, [r3, #16]
 8012fa0:	615a      	str	r2, [r3, #20]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	200000c0 	.word	0x200000c0
 8012fa8:	08015150 	.word	0x08015150
 8012fac:	08015167 	.word	0x08015167
 8012fb0:	abcd330e 	.word	0xabcd330e
 8012fb4:	e66d1234 	.word	0xe66d1234
 8012fb8:	0005deec 	.word	0x0005deec

08012fbc <rand>:
 8012fbc:	4b16      	ldr	r3, [pc, #88]	@ (8013018 <rand+0x5c>)
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	681c      	ldr	r4, [r3, #0]
 8012fc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012fc4:	b9b3      	cbnz	r3, 8012ff4 <rand+0x38>
 8012fc6:	2018      	movs	r0, #24
 8012fc8:	f7ff ff0c 	bl	8012de4 <malloc>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	6320      	str	r0, [r4, #48]	@ 0x30
 8012fd0:	b920      	cbnz	r0, 8012fdc <rand+0x20>
 8012fd2:	4b12      	ldr	r3, [pc, #72]	@ (801301c <rand+0x60>)
 8012fd4:	4812      	ldr	r0, [pc, #72]	@ (8013020 <rand+0x64>)
 8012fd6:	2152      	movs	r1, #82	@ 0x52
 8012fd8:	f000 fc50 	bl	801387c <__assert_func>
 8012fdc:	4911      	ldr	r1, [pc, #68]	@ (8013024 <rand+0x68>)
 8012fde:	4b12      	ldr	r3, [pc, #72]	@ (8013028 <rand+0x6c>)
 8012fe0:	e9c0 1300 	strd	r1, r3, [r0]
 8012fe4:	4b11      	ldr	r3, [pc, #68]	@ (801302c <rand+0x70>)
 8012fe6:	6083      	str	r3, [r0, #8]
 8012fe8:	230b      	movs	r3, #11
 8012fea:	8183      	strh	r3, [r0, #12]
 8012fec:	2100      	movs	r1, #0
 8012fee:	2001      	movs	r0, #1
 8012ff0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012ff4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012ff6:	480e      	ldr	r0, [pc, #56]	@ (8013030 <rand+0x74>)
 8012ff8:	690b      	ldr	r3, [r1, #16]
 8012ffa:	694c      	ldr	r4, [r1, #20]
 8012ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8013034 <rand+0x78>)
 8012ffe:	4358      	muls	r0, r3
 8013000:	fb02 0004 	mla	r0, r2, r4, r0
 8013004:	fba3 3202 	umull	r3, r2, r3, r2
 8013008:	3301      	adds	r3, #1
 801300a:	eb40 0002 	adc.w	r0, r0, r2
 801300e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013012:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013016:	bd10      	pop	{r4, pc}
 8013018:	200000c0 	.word	0x200000c0
 801301c:	08015150 	.word	0x08015150
 8013020:	08015167 	.word	0x08015167
 8013024:	abcd330e 	.word	0xabcd330e
 8013028:	e66d1234 	.word	0xe66d1234
 801302c:	0005deec 	.word	0x0005deec
 8013030:	5851f42d 	.word	0x5851f42d
 8013034:	4c957f2d 	.word	0x4c957f2d

08013038 <realloc>:
 8013038:	4b02      	ldr	r3, [pc, #8]	@ (8013044 <realloc+0xc>)
 801303a:	460a      	mov	r2, r1
 801303c:	4601      	mov	r1, r0
 801303e:	6818      	ldr	r0, [r3, #0]
 8013040:	f000 b802 	b.w	8013048 <_realloc_r>
 8013044:	200000c0 	.word	0x200000c0

08013048 <_realloc_r>:
 8013048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801304c:	4680      	mov	r8, r0
 801304e:	4615      	mov	r5, r2
 8013050:	460c      	mov	r4, r1
 8013052:	b921      	cbnz	r1, 801305e <_realloc_r+0x16>
 8013054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013058:	4611      	mov	r1, r2
 801305a:	f7ff bef5 	b.w	8012e48 <_malloc_r>
 801305e:	b92a      	cbnz	r2, 801306c <_realloc_r+0x24>
 8013060:	f000 fc36 	bl	80138d0 <_free_r>
 8013064:	2400      	movs	r4, #0
 8013066:	4620      	mov	r0, r4
 8013068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306c:	f000 fc7a 	bl	8013964 <_malloc_usable_size_r>
 8013070:	4285      	cmp	r5, r0
 8013072:	4606      	mov	r6, r0
 8013074:	d802      	bhi.n	801307c <_realloc_r+0x34>
 8013076:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801307a:	d8f4      	bhi.n	8013066 <_realloc_r+0x1e>
 801307c:	4629      	mov	r1, r5
 801307e:	4640      	mov	r0, r8
 8013080:	f7ff fee2 	bl	8012e48 <_malloc_r>
 8013084:	4607      	mov	r7, r0
 8013086:	2800      	cmp	r0, #0
 8013088:	d0ec      	beq.n	8013064 <_realloc_r+0x1c>
 801308a:	42b5      	cmp	r5, r6
 801308c:	462a      	mov	r2, r5
 801308e:	4621      	mov	r1, r4
 8013090:	bf28      	it	cs
 8013092:	4632      	movcs	r2, r6
 8013094:	f000 fbe3 	bl	801385e <memcpy>
 8013098:	4621      	mov	r1, r4
 801309a:	4640      	mov	r0, r8
 801309c:	f000 fc18 	bl	80138d0 <_free_r>
 80130a0:	463c      	mov	r4, r7
 80130a2:	e7e0      	b.n	8013066 <_realloc_r+0x1e>

080130a4 <_strtoul_l.constprop.0>:
 80130a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130a8:	4e34      	ldr	r6, [pc, #208]	@ (801317c <_strtoul_l.constprop.0+0xd8>)
 80130aa:	4686      	mov	lr, r0
 80130ac:	460d      	mov	r5, r1
 80130ae:	4628      	mov	r0, r5
 80130b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130b4:	5d37      	ldrb	r7, [r6, r4]
 80130b6:	f017 0708 	ands.w	r7, r7, #8
 80130ba:	d1f8      	bne.n	80130ae <_strtoul_l.constprop.0+0xa>
 80130bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80130be:	d12f      	bne.n	8013120 <_strtoul_l.constprop.0+0x7c>
 80130c0:	782c      	ldrb	r4, [r5, #0]
 80130c2:	2701      	movs	r7, #1
 80130c4:	1c85      	adds	r5, r0, #2
 80130c6:	f033 0010 	bics.w	r0, r3, #16
 80130ca:	d109      	bne.n	80130e0 <_strtoul_l.constprop.0+0x3c>
 80130cc:	2c30      	cmp	r4, #48	@ 0x30
 80130ce:	d12c      	bne.n	801312a <_strtoul_l.constprop.0+0x86>
 80130d0:	7828      	ldrb	r0, [r5, #0]
 80130d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80130d6:	2858      	cmp	r0, #88	@ 0x58
 80130d8:	d127      	bne.n	801312a <_strtoul_l.constprop.0+0x86>
 80130da:	786c      	ldrb	r4, [r5, #1]
 80130dc:	2310      	movs	r3, #16
 80130de:	3502      	adds	r5, #2
 80130e0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80130e4:	2600      	movs	r6, #0
 80130e6:	fbb8 f8f3 	udiv	r8, r8, r3
 80130ea:	fb03 f908 	mul.w	r9, r3, r8
 80130ee:	ea6f 0909 	mvn.w	r9, r9
 80130f2:	4630      	mov	r0, r6
 80130f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80130f8:	f1bc 0f09 	cmp.w	ip, #9
 80130fc:	d81c      	bhi.n	8013138 <_strtoul_l.constprop.0+0x94>
 80130fe:	4664      	mov	r4, ip
 8013100:	42a3      	cmp	r3, r4
 8013102:	dd2a      	ble.n	801315a <_strtoul_l.constprop.0+0xb6>
 8013104:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8013108:	d007      	beq.n	801311a <_strtoul_l.constprop.0+0x76>
 801310a:	4580      	cmp	r8, r0
 801310c:	d322      	bcc.n	8013154 <_strtoul_l.constprop.0+0xb0>
 801310e:	d101      	bne.n	8013114 <_strtoul_l.constprop.0+0x70>
 8013110:	45a1      	cmp	r9, r4
 8013112:	db1f      	blt.n	8013154 <_strtoul_l.constprop.0+0xb0>
 8013114:	fb00 4003 	mla	r0, r0, r3, r4
 8013118:	2601      	movs	r6, #1
 801311a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801311e:	e7e9      	b.n	80130f4 <_strtoul_l.constprop.0+0x50>
 8013120:	2c2b      	cmp	r4, #43	@ 0x2b
 8013122:	bf04      	itt	eq
 8013124:	782c      	ldrbeq	r4, [r5, #0]
 8013126:	1c85      	addeq	r5, r0, #2
 8013128:	e7cd      	b.n	80130c6 <_strtoul_l.constprop.0+0x22>
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1d8      	bne.n	80130e0 <_strtoul_l.constprop.0+0x3c>
 801312e:	2c30      	cmp	r4, #48	@ 0x30
 8013130:	bf0c      	ite	eq
 8013132:	2308      	moveq	r3, #8
 8013134:	230a      	movne	r3, #10
 8013136:	e7d3      	b.n	80130e0 <_strtoul_l.constprop.0+0x3c>
 8013138:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801313c:	f1bc 0f19 	cmp.w	ip, #25
 8013140:	d801      	bhi.n	8013146 <_strtoul_l.constprop.0+0xa2>
 8013142:	3c37      	subs	r4, #55	@ 0x37
 8013144:	e7dc      	b.n	8013100 <_strtoul_l.constprop.0+0x5c>
 8013146:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801314a:	f1bc 0f19 	cmp.w	ip, #25
 801314e:	d804      	bhi.n	801315a <_strtoul_l.constprop.0+0xb6>
 8013150:	3c57      	subs	r4, #87	@ 0x57
 8013152:	e7d5      	b.n	8013100 <_strtoul_l.constprop.0+0x5c>
 8013154:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8013158:	e7df      	b.n	801311a <_strtoul_l.constprop.0+0x76>
 801315a:	1c73      	adds	r3, r6, #1
 801315c:	d106      	bne.n	801316c <_strtoul_l.constprop.0+0xc8>
 801315e:	2322      	movs	r3, #34	@ 0x22
 8013160:	f8ce 3000 	str.w	r3, [lr]
 8013164:	4630      	mov	r0, r6
 8013166:	b932      	cbnz	r2, 8013176 <_strtoul_l.constprop.0+0xd2>
 8013168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801316c:	b107      	cbz	r7, 8013170 <_strtoul_l.constprop.0+0xcc>
 801316e:	4240      	negs	r0, r0
 8013170:	2a00      	cmp	r2, #0
 8013172:	d0f9      	beq.n	8013168 <_strtoul_l.constprop.0+0xc4>
 8013174:	b106      	cbz	r6, 8013178 <_strtoul_l.constprop.0+0xd4>
 8013176:	1e69      	subs	r1, r5, #1
 8013178:	6011      	str	r1, [r2, #0]
 801317a:	e7f5      	b.n	8013168 <_strtoul_l.constprop.0+0xc4>
 801317c:	080151c0 	.word	0x080151c0

08013180 <strtoul>:
 8013180:	4613      	mov	r3, r2
 8013182:	460a      	mov	r2, r1
 8013184:	4601      	mov	r1, r0
 8013186:	4802      	ldr	r0, [pc, #8]	@ (8013190 <strtoul+0x10>)
 8013188:	6800      	ldr	r0, [r0, #0]
 801318a:	f7ff bf8b 	b.w	80130a4 <_strtoul_l.constprop.0>
 801318e:	bf00      	nop
 8013190:	200000c0 	.word	0x200000c0

08013194 <std>:
 8013194:	2300      	movs	r3, #0
 8013196:	b510      	push	{r4, lr}
 8013198:	4604      	mov	r4, r0
 801319a:	e9c0 3300 	strd	r3, r3, [r0]
 801319e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131a2:	6083      	str	r3, [r0, #8]
 80131a4:	8181      	strh	r1, [r0, #12]
 80131a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80131a8:	81c2      	strh	r2, [r0, #14]
 80131aa:	6183      	str	r3, [r0, #24]
 80131ac:	4619      	mov	r1, r3
 80131ae:	2208      	movs	r2, #8
 80131b0:	305c      	adds	r0, #92	@ 0x5c
 80131b2:	f000 fa8b 	bl	80136cc <memset>
 80131b6:	4b0d      	ldr	r3, [pc, #52]	@ (80131ec <std+0x58>)
 80131b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80131ba:	4b0d      	ldr	r3, [pc, #52]	@ (80131f0 <std+0x5c>)
 80131bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80131be:	4b0d      	ldr	r3, [pc, #52]	@ (80131f4 <std+0x60>)
 80131c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80131c2:	4b0d      	ldr	r3, [pc, #52]	@ (80131f8 <std+0x64>)
 80131c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80131c6:	4b0d      	ldr	r3, [pc, #52]	@ (80131fc <std+0x68>)
 80131c8:	6224      	str	r4, [r4, #32]
 80131ca:	429c      	cmp	r4, r3
 80131cc:	d006      	beq.n	80131dc <std+0x48>
 80131ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80131d2:	4294      	cmp	r4, r2
 80131d4:	d002      	beq.n	80131dc <std+0x48>
 80131d6:	33d0      	adds	r3, #208	@ 0xd0
 80131d8:	429c      	cmp	r4, r3
 80131da:	d105      	bne.n	80131e8 <std+0x54>
 80131dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80131e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e4:	f000 bb30 	b.w	8013848 <__retarget_lock_init_recursive>
 80131e8:	bd10      	pop	{r4, pc}
 80131ea:	bf00      	nop
 80131ec:	08013459 	.word	0x08013459
 80131f0:	0801347b 	.word	0x0801347b
 80131f4:	080134b3 	.word	0x080134b3
 80131f8:	080134d7 	.word	0x080134d7
 80131fc:	2000dacc 	.word	0x2000dacc

08013200 <stdio_exit_handler>:
 8013200:	4a02      	ldr	r2, [pc, #8]	@ (801320c <stdio_exit_handler+0xc>)
 8013202:	4903      	ldr	r1, [pc, #12]	@ (8013210 <stdio_exit_handler+0x10>)
 8013204:	4803      	ldr	r0, [pc, #12]	@ (8013214 <stdio_exit_handler+0x14>)
 8013206:	f000 b869 	b.w	80132dc <_fwalk_sglue>
 801320a:	bf00      	nop
 801320c:	200000b4 	.word	0x200000b4
 8013210:	080142cd 	.word	0x080142cd
 8013214:	200000c4 	.word	0x200000c4

08013218 <cleanup_stdio>:
 8013218:	6841      	ldr	r1, [r0, #4]
 801321a:	4b0c      	ldr	r3, [pc, #48]	@ (801324c <cleanup_stdio+0x34>)
 801321c:	4299      	cmp	r1, r3
 801321e:	b510      	push	{r4, lr}
 8013220:	4604      	mov	r4, r0
 8013222:	d001      	beq.n	8013228 <cleanup_stdio+0x10>
 8013224:	f001 f852 	bl	80142cc <_fflush_r>
 8013228:	68a1      	ldr	r1, [r4, #8]
 801322a:	4b09      	ldr	r3, [pc, #36]	@ (8013250 <cleanup_stdio+0x38>)
 801322c:	4299      	cmp	r1, r3
 801322e:	d002      	beq.n	8013236 <cleanup_stdio+0x1e>
 8013230:	4620      	mov	r0, r4
 8013232:	f001 f84b 	bl	80142cc <_fflush_r>
 8013236:	68e1      	ldr	r1, [r4, #12]
 8013238:	4b06      	ldr	r3, [pc, #24]	@ (8013254 <cleanup_stdio+0x3c>)
 801323a:	4299      	cmp	r1, r3
 801323c:	d004      	beq.n	8013248 <cleanup_stdio+0x30>
 801323e:	4620      	mov	r0, r4
 8013240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013244:	f001 b842 	b.w	80142cc <_fflush_r>
 8013248:	bd10      	pop	{r4, pc}
 801324a:	bf00      	nop
 801324c:	2000dacc 	.word	0x2000dacc
 8013250:	2000db34 	.word	0x2000db34
 8013254:	2000db9c 	.word	0x2000db9c

08013258 <global_stdio_init.part.0>:
 8013258:	b510      	push	{r4, lr}
 801325a:	4b0b      	ldr	r3, [pc, #44]	@ (8013288 <global_stdio_init.part.0+0x30>)
 801325c:	4c0b      	ldr	r4, [pc, #44]	@ (801328c <global_stdio_init.part.0+0x34>)
 801325e:	4a0c      	ldr	r2, [pc, #48]	@ (8013290 <global_stdio_init.part.0+0x38>)
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	4620      	mov	r0, r4
 8013264:	2200      	movs	r2, #0
 8013266:	2104      	movs	r1, #4
 8013268:	f7ff ff94 	bl	8013194 <std>
 801326c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013270:	2201      	movs	r2, #1
 8013272:	2109      	movs	r1, #9
 8013274:	f7ff ff8e 	bl	8013194 <std>
 8013278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801327c:	2202      	movs	r2, #2
 801327e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013282:	2112      	movs	r1, #18
 8013284:	f7ff bf86 	b.w	8013194 <std>
 8013288:	2000dc04 	.word	0x2000dc04
 801328c:	2000dacc 	.word	0x2000dacc
 8013290:	08013201 	.word	0x08013201

08013294 <__sfp_lock_acquire>:
 8013294:	4801      	ldr	r0, [pc, #4]	@ (801329c <__sfp_lock_acquire+0x8>)
 8013296:	f000 bad8 	b.w	801384a <__retarget_lock_acquire_recursive>
 801329a:	bf00      	nop
 801329c:	2000dc0e 	.word	0x2000dc0e

080132a0 <__sfp_lock_release>:
 80132a0:	4801      	ldr	r0, [pc, #4]	@ (80132a8 <__sfp_lock_release+0x8>)
 80132a2:	f000 bad3 	b.w	801384c <__retarget_lock_release_recursive>
 80132a6:	bf00      	nop
 80132a8:	2000dc0e 	.word	0x2000dc0e

080132ac <__sinit>:
 80132ac:	b510      	push	{r4, lr}
 80132ae:	4604      	mov	r4, r0
 80132b0:	f7ff fff0 	bl	8013294 <__sfp_lock_acquire>
 80132b4:	6a23      	ldr	r3, [r4, #32]
 80132b6:	b11b      	cbz	r3, 80132c0 <__sinit+0x14>
 80132b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132bc:	f7ff bff0 	b.w	80132a0 <__sfp_lock_release>
 80132c0:	4b04      	ldr	r3, [pc, #16]	@ (80132d4 <__sinit+0x28>)
 80132c2:	6223      	str	r3, [r4, #32]
 80132c4:	4b04      	ldr	r3, [pc, #16]	@ (80132d8 <__sinit+0x2c>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d1f5      	bne.n	80132b8 <__sinit+0xc>
 80132cc:	f7ff ffc4 	bl	8013258 <global_stdio_init.part.0>
 80132d0:	e7f2      	b.n	80132b8 <__sinit+0xc>
 80132d2:	bf00      	nop
 80132d4:	08013219 	.word	0x08013219
 80132d8:	2000dc04 	.word	0x2000dc04

080132dc <_fwalk_sglue>:
 80132dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132e0:	4607      	mov	r7, r0
 80132e2:	4688      	mov	r8, r1
 80132e4:	4614      	mov	r4, r2
 80132e6:	2600      	movs	r6, #0
 80132e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132ec:	f1b9 0901 	subs.w	r9, r9, #1
 80132f0:	d505      	bpl.n	80132fe <_fwalk_sglue+0x22>
 80132f2:	6824      	ldr	r4, [r4, #0]
 80132f4:	2c00      	cmp	r4, #0
 80132f6:	d1f7      	bne.n	80132e8 <_fwalk_sglue+0xc>
 80132f8:	4630      	mov	r0, r6
 80132fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132fe:	89ab      	ldrh	r3, [r5, #12]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d907      	bls.n	8013314 <_fwalk_sglue+0x38>
 8013304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013308:	3301      	adds	r3, #1
 801330a:	d003      	beq.n	8013314 <_fwalk_sglue+0x38>
 801330c:	4629      	mov	r1, r5
 801330e:	4638      	mov	r0, r7
 8013310:	47c0      	blx	r8
 8013312:	4306      	orrs	r6, r0
 8013314:	3568      	adds	r5, #104	@ 0x68
 8013316:	e7e9      	b.n	80132ec <_fwalk_sglue+0x10>

08013318 <_fwrite_r>:
 8013318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801331c:	9c08      	ldr	r4, [sp, #32]
 801331e:	468a      	mov	sl, r1
 8013320:	4690      	mov	r8, r2
 8013322:	fb02 f903 	mul.w	r9, r2, r3
 8013326:	4606      	mov	r6, r0
 8013328:	b118      	cbz	r0, 8013332 <_fwrite_r+0x1a>
 801332a:	6a03      	ldr	r3, [r0, #32]
 801332c:	b90b      	cbnz	r3, 8013332 <_fwrite_r+0x1a>
 801332e:	f7ff ffbd 	bl	80132ac <__sinit>
 8013332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013334:	07dd      	lsls	r5, r3, #31
 8013336:	d405      	bmi.n	8013344 <_fwrite_r+0x2c>
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	0598      	lsls	r0, r3, #22
 801333c:	d402      	bmi.n	8013344 <_fwrite_r+0x2c>
 801333e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013340:	f000 fa83 	bl	801384a <__retarget_lock_acquire_recursive>
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	0719      	lsls	r1, r3, #28
 8013348:	d516      	bpl.n	8013378 <_fwrite_r+0x60>
 801334a:	6923      	ldr	r3, [r4, #16]
 801334c:	b1a3      	cbz	r3, 8013378 <_fwrite_r+0x60>
 801334e:	2500      	movs	r5, #0
 8013350:	454d      	cmp	r5, r9
 8013352:	d01f      	beq.n	8013394 <_fwrite_r+0x7c>
 8013354:	68a7      	ldr	r7, [r4, #8]
 8013356:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801335a:	3f01      	subs	r7, #1
 801335c:	2f00      	cmp	r7, #0
 801335e:	60a7      	str	r7, [r4, #8]
 8013360:	da04      	bge.n	801336c <_fwrite_r+0x54>
 8013362:	69a3      	ldr	r3, [r4, #24]
 8013364:	429f      	cmp	r7, r3
 8013366:	db0f      	blt.n	8013388 <_fwrite_r+0x70>
 8013368:	290a      	cmp	r1, #10
 801336a:	d00d      	beq.n	8013388 <_fwrite_r+0x70>
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	1c5a      	adds	r2, r3, #1
 8013370:	6022      	str	r2, [r4, #0]
 8013372:	7019      	strb	r1, [r3, #0]
 8013374:	3501      	adds	r5, #1
 8013376:	e7eb      	b.n	8013350 <_fwrite_r+0x38>
 8013378:	4621      	mov	r1, r4
 801337a:	4630      	mov	r0, r6
 801337c:	f000 f926 	bl	80135cc <__swsetup_r>
 8013380:	2800      	cmp	r0, #0
 8013382:	d0e4      	beq.n	801334e <_fwrite_r+0x36>
 8013384:	2500      	movs	r5, #0
 8013386:	e005      	b.n	8013394 <_fwrite_r+0x7c>
 8013388:	4622      	mov	r2, r4
 801338a:	4630      	mov	r0, r6
 801338c:	f000 f8e0 	bl	8013550 <__swbuf_r>
 8013390:	3001      	adds	r0, #1
 8013392:	d1ef      	bne.n	8013374 <_fwrite_r+0x5c>
 8013394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013396:	07da      	lsls	r2, r3, #31
 8013398:	d405      	bmi.n	80133a6 <_fwrite_r+0x8e>
 801339a:	89a3      	ldrh	r3, [r4, #12]
 801339c:	059b      	lsls	r3, r3, #22
 801339e:	d402      	bmi.n	80133a6 <_fwrite_r+0x8e>
 80133a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133a2:	f000 fa53 	bl	801384c <__retarget_lock_release_recursive>
 80133a6:	fbb5 f0f8 	udiv	r0, r5, r8
 80133aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080133b0 <fwrite>:
 80133b0:	b507      	push	{r0, r1, r2, lr}
 80133b2:	9300      	str	r3, [sp, #0]
 80133b4:	4613      	mov	r3, r2
 80133b6:	460a      	mov	r2, r1
 80133b8:	4601      	mov	r1, r0
 80133ba:	4803      	ldr	r0, [pc, #12]	@ (80133c8 <fwrite+0x18>)
 80133bc:	6800      	ldr	r0, [r0, #0]
 80133be:	f7ff ffab 	bl	8013318 <_fwrite_r>
 80133c2:	b003      	add	sp, #12
 80133c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80133c8:	200000c0 	.word	0x200000c0

080133cc <iprintf>:
 80133cc:	b40f      	push	{r0, r1, r2, r3}
 80133ce:	b507      	push	{r0, r1, r2, lr}
 80133d0:	4906      	ldr	r1, [pc, #24]	@ (80133ec <iprintf+0x20>)
 80133d2:	ab04      	add	r3, sp, #16
 80133d4:	6808      	ldr	r0, [r1, #0]
 80133d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80133da:	6881      	ldr	r1, [r0, #8]
 80133dc:	9301      	str	r3, [sp, #4]
 80133de:	f000 fc4b 	bl	8013c78 <_vfiprintf_r>
 80133e2:	b003      	add	sp, #12
 80133e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80133e8:	b004      	add	sp, #16
 80133ea:	4770      	bx	lr
 80133ec:	200000c0 	.word	0x200000c0

080133f0 <sniprintf>:
 80133f0:	b40c      	push	{r2, r3}
 80133f2:	b530      	push	{r4, r5, lr}
 80133f4:	4b17      	ldr	r3, [pc, #92]	@ (8013454 <sniprintf+0x64>)
 80133f6:	1e0c      	subs	r4, r1, #0
 80133f8:	681d      	ldr	r5, [r3, #0]
 80133fa:	b09d      	sub	sp, #116	@ 0x74
 80133fc:	da08      	bge.n	8013410 <sniprintf+0x20>
 80133fe:	238b      	movs	r3, #139	@ 0x8b
 8013400:	602b      	str	r3, [r5, #0]
 8013402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013406:	b01d      	add	sp, #116	@ 0x74
 8013408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801340c:	b002      	add	sp, #8
 801340e:	4770      	bx	lr
 8013410:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013418:	bf14      	ite	ne
 801341a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801341e:	4623      	moveq	r3, r4
 8013420:	9304      	str	r3, [sp, #16]
 8013422:	9307      	str	r3, [sp, #28]
 8013424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013428:	9002      	str	r0, [sp, #8]
 801342a:	9006      	str	r0, [sp, #24]
 801342c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013430:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013432:	ab21      	add	r3, sp, #132	@ 0x84
 8013434:	a902      	add	r1, sp, #8
 8013436:	4628      	mov	r0, r5
 8013438:	9301      	str	r3, [sp, #4]
 801343a:	f000 faf7 	bl	8013a2c <_svfiprintf_r>
 801343e:	1c43      	adds	r3, r0, #1
 8013440:	bfbc      	itt	lt
 8013442:	238b      	movlt	r3, #139	@ 0x8b
 8013444:	602b      	strlt	r3, [r5, #0]
 8013446:	2c00      	cmp	r4, #0
 8013448:	d0dd      	beq.n	8013406 <sniprintf+0x16>
 801344a:	9b02      	ldr	r3, [sp, #8]
 801344c:	2200      	movs	r2, #0
 801344e:	701a      	strb	r2, [r3, #0]
 8013450:	e7d9      	b.n	8013406 <sniprintf+0x16>
 8013452:	bf00      	nop
 8013454:	200000c0 	.word	0x200000c0

08013458 <__sread>:
 8013458:	b510      	push	{r4, lr}
 801345a:	460c      	mov	r4, r1
 801345c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013460:	f000 f994 	bl	801378c <_read_r>
 8013464:	2800      	cmp	r0, #0
 8013466:	bfab      	itete	ge
 8013468:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801346a:	89a3      	ldrhlt	r3, [r4, #12]
 801346c:	181b      	addge	r3, r3, r0
 801346e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013472:	bfac      	ite	ge
 8013474:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013476:	81a3      	strhlt	r3, [r4, #12]
 8013478:	bd10      	pop	{r4, pc}

0801347a <__swrite>:
 801347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801347e:	461f      	mov	r7, r3
 8013480:	898b      	ldrh	r3, [r1, #12]
 8013482:	05db      	lsls	r3, r3, #23
 8013484:	4605      	mov	r5, r0
 8013486:	460c      	mov	r4, r1
 8013488:	4616      	mov	r6, r2
 801348a:	d505      	bpl.n	8013498 <__swrite+0x1e>
 801348c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013490:	2302      	movs	r3, #2
 8013492:	2200      	movs	r2, #0
 8013494:	f000 f968 	bl	8013768 <_lseek_r>
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801349e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80134a2:	81a3      	strh	r3, [r4, #12]
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4628      	mov	r0, r5
 80134aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134ae:	f000 b98f 	b.w	80137d0 <_write_r>

080134b2 <__sseek>:
 80134b2:	b510      	push	{r4, lr}
 80134b4:	460c      	mov	r4, r1
 80134b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ba:	f000 f955 	bl	8013768 <_lseek_r>
 80134be:	1c43      	adds	r3, r0, #1
 80134c0:	89a3      	ldrh	r3, [r4, #12]
 80134c2:	bf15      	itete	ne
 80134c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80134c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80134ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80134ce:	81a3      	strheq	r3, [r4, #12]
 80134d0:	bf18      	it	ne
 80134d2:	81a3      	strhne	r3, [r4, #12]
 80134d4:	bd10      	pop	{r4, pc}

080134d6 <__sclose>:
 80134d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134da:	f000 b935 	b.w	8013748 <_close_r>

080134de <_vsniprintf_r>:
 80134de:	b530      	push	{r4, r5, lr}
 80134e0:	4614      	mov	r4, r2
 80134e2:	2c00      	cmp	r4, #0
 80134e4:	b09b      	sub	sp, #108	@ 0x6c
 80134e6:	4605      	mov	r5, r0
 80134e8:	461a      	mov	r2, r3
 80134ea:	da05      	bge.n	80134f8 <_vsniprintf_r+0x1a>
 80134ec:	238b      	movs	r3, #139	@ 0x8b
 80134ee:	6003      	str	r3, [r0, #0]
 80134f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134f4:	b01b      	add	sp, #108	@ 0x6c
 80134f6:	bd30      	pop	{r4, r5, pc}
 80134f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80134fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013500:	bf14      	ite	ne
 8013502:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8013506:	4623      	moveq	r3, r4
 8013508:	9302      	str	r3, [sp, #8]
 801350a:	9305      	str	r3, [sp, #20]
 801350c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013510:	9100      	str	r1, [sp, #0]
 8013512:	9104      	str	r1, [sp, #16]
 8013514:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013518:	4669      	mov	r1, sp
 801351a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801351c:	f000 fa86 	bl	8013a2c <_svfiprintf_r>
 8013520:	1c43      	adds	r3, r0, #1
 8013522:	bfbc      	itt	lt
 8013524:	238b      	movlt	r3, #139	@ 0x8b
 8013526:	602b      	strlt	r3, [r5, #0]
 8013528:	2c00      	cmp	r4, #0
 801352a:	d0e3      	beq.n	80134f4 <_vsniprintf_r+0x16>
 801352c:	9b00      	ldr	r3, [sp, #0]
 801352e:	2200      	movs	r2, #0
 8013530:	701a      	strb	r2, [r3, #0]
 8013532:	e7df      	b.n	80134f4 <_vsniprintf_r+0x16>

08013534 <vsniprintf>:
 8013534:	b507      	push	{r0, r1, r2, lr}
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4613      	mov	r3, r2
 801353a:	460a      	mov	r2, r1
 801353c:	4601      	mov	r1, r0
 801353e:	4803      	ldr	r0, [pc, #12]	@ (801354c <vsniprintf+0x18>)
 8013540:	6800      	ldr	r0, [r0, #0]
 8013542:	f7ff ffcc 	bl	80134de <_vsniprintf_r>
 8013546:	b003      	add	sp, #12
 8013548:	f85d fb04 	ldr.w	pc, [sp], #4
 801354c:	200000c0 	.word	0x200000c0

08013550 <__swbuf_r>:
 8013550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013552:	460e      	mov	r6, r1
 8013554:	4614      	mov	r4, r2
 8013556:	4605      	mov	r5, r0
 8013558:	b118      	cbz	r0, 8013562 <__swbuf_r+0x12>
 801355a:	6a03      	ldr	r3, [r0, #32]
 801355c:	b90b      	cbnz	r3, 8013562 <__swbuf_r+0x12>
 801355e:	f7ff fea5 	bl	80132ac <__sinit>
 8013562:	69a3      	ldr	r3, [r4, #24]
 8013564:	60a3      	str	r3, [r4, #8]
 8013566:	89a3      	ldrh	r3, [r4, #12]
 8013568:	071a      	lsls	r2, r3, #28
 801356a:	d501      	bpl.n	8013570 <__swbuf_r+0x20>
 801356c:	6923      	ldr	r3, [r4, #16]
 801356e:	b943      	cbnz	r3, 8013582 <__swbuf_r+0x32>
 8013570:	4621      	mov	r1, r4
 8013572:	4628      	mov	r0, r5
 8013574:	f000 f82a 	bl	80135cc <__swsetup_r>
 8013578:	b118      	cbz	r0, 8013582 <__swbuf_r+0x32>
 801357a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801357e:	4638      	mov	r0, r7
 8013580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	6922      	ldr	r2, [r4, #16]
 8013586:	1a98      	subs	r0, r3, r2
 8013588:	6963      	ldr	r3, [r4, #20]
 801358a:	b2f6      	uxtb	r6, r6
 801358c:	4283      	cmp	r3, r0
 801358e:	4637      	mov	r7, r6
 8013590:	dc05      	bgt.n	801359e <__swbuf_r+0x4e>
 8013592:	4621      	mov	r1, r4
 8013594:	4628      	mov	r0, r5
 8013596:	f000 fe99 	bl	80142cc <_fflush_r>
 801359a:	2800      	cmp	r0, #0
 801359c:	d1ed      	bne.n	801357a <__swbuf_r+0x2a>
 801359e:	68a3      	ldr	r3, [r4, #8]
 80135a0:	3b01      	subs	r3, #1
 80135a2:	60a3      	str	r3, [r4, #8]
 80135a4:	6823      	ldr	r3, [r4, #0]
 80135a6:	1c5a      	adds	r2, r3, #1
 80135a8:	6022      	str	r2, [r4, #0]
 80135aa:	701e      	strb	r6, [r3, #0]
 80135ac:	6962      	ldr	r2, [r4, #20]
 80135ae:	1c43      	adds	r3, r0, #1
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d004      	beq.n	80135be <__swbuf_r+0x6e>
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	07db      	lsls	r3, r3, #31
 80135b8:	d5e1      	bpl.n	801357e <__swbuf_r+0x2e>
 80135ba:	2e0a      	cmp	r6, #10
 80135bc:	d1df      	bne.n	801357e <__swbuf_r+0x2e>
 80135be:	4621      	mov	r1, r4
 80135c0:	4628      	mov	r0, r5
 80135c2:	f000 fe83 	bl	80142cc <_fflush_r>
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d0d9      	beq.n	801357e <__swbuf_r+0x2e>
 80135ca:	e7d6      	b.n	801357a <__swbuf_r+0x2a>

080135cc <__swsetup_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4b29      	ldr	r3, [pc, #164]	@ (8013674 <__swsetup_r+0xa8>)
 80135d0:	4605      	mov	r5, r0
 80135d2:	6818      	ldr	r0, [r3, #0]
 80135d4:	460c      	mov	r4, r1
 80135d6:	b118      	cbz	r0, 80135e0 <__swsetup_r+0x14>
 80135d8:	6a03      	ldr	r3, [r0, #32]
 80135da:	b90b      	cbnz	r3, 80135e0 <__swsetup_r+0x14>
 80135dc:	f7ff fe66 	bl	80132ac <__sinit>
 80135e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135e4:	0719      	lsls	r1, r3, #28
 80135e6:	d422      	bmi.n	801362e <__swsetup_r+0x62>
 80135e8:	06da      	lsls	r2, r3, #27
 80135ea:	d407      	bmi.n	80135fc <__swsetup_r+0x30>
 80135ec:	2209      	movs	r2, #9
 80135ee:	602a      	str	r2, [r5, #0]
 80135f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135f4:	81a3      	strh	r3, [r4, #12]
 80135f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80135fa:	e033      	b.n	8013664 <__swsetup_r+0x98>
 80135fc:	0758      	lsls	r0, r3, #29
 80135fe:	d512      	bpl.n	8013626 <__swsetup_r+0x5a>
 8013600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013602:	b141      	cbz	r1, 8013616 <__swsetup_r+0x4a>
 8013604:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013608:	4299      	cmp	r1, r3
 801360a:	d002      	beq.n	8013612 <__swsetup_r+0x46>
 801360c:	4628      	mov	r0, r5
 801360e:	f000 f95f 	bl	80138d0 <_free_r>
 8013612:	2300      	movs	r3, #0
 8013614:	6363      	str	r3, [r4, #52]	@ 0x34
 8013616:	89a3      	ldrh	r3, [r4, #12]
 8013618:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801361c:	81a3      	strh	r3, [r4, #12]
 801361e:	2300      	movs	r3, #0
 8013620:	6063      	str	r3, [r4, #4]
 8013622:	6923      	ldr	r3, [r4, #16]
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	89a3      	ldrh	r3, [r4, #12]
 8013628:	f043 0308 	orr.w	r3, r3, #8
 801362c:	81a3      	strh	r3, [r4, #12]
 801362e:	6923      	ldr	r3, [r4, #16]
 8013630:	b94b      	cbnz	r3, 8013646 <__swsetup_r+0x7a>
 8013632:	89a3      	ldrh	r3, [r4, #12]
 8013634:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801363c:	d003      	beq.n	8013646 <__swsetup_r+0x7a>
 801363e:	4621      	mov	r1, r4
 8013640:	4628      	mov	r0, r5
 8013642:	f000 fea3 	bl	801438c <__smakebuf_r>
 8013646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801364a:	f013 0201 	ands.w	r2, r3, #1
 801364e:	d00a      	beq.n	8013666 <__swsetup_r+0x9a>
 8013650:	2200      	movs	r2, #0
 8013652:	60a2      	str	r2, [r4, #8]
 8013654:	6962      	ldr	r2, [r4, #20]
 8013656:	4252      	negs	r2, r2
 8013658:	61a2      	str	r2, [r4, #24]
 801365a:	6922      	ldr	r2, [r4, #16]
 801365c:	b942      	cbnz	r2, 8013670 <__swsetup_r+0xa4>
 801365e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013662:	d1c5      	bne.n	80135f0 <__swsetup_r+0x24>
 8013664:	bd38      	pop	{r3, r4, r5, pc}
 8013666:	0799      	lsls	r1, r3, #30
 8013668:	bf58      	it	pl
 801366a:	6962      	ldrpl	r2, [r4, #20]
 801366c:	60a2      	str	r2, [r4, #8]
 801366e:	e7f4      	b.n	801365a <__swsetup_r+0x8e>
 8013670:	2000      	movs	r0, #0
 8013672:	e7f7      	b.n	8013664 <__swsetup_r+0x98>
 8013674:	200000c0 	.word	0x200000c0

08013678 <memcmp>:
 8013678:	b510      	push	{r4, lr}
 801367a:	3901      	subs	r1, #1
 801367c:	4402      	add	r2, r0
 801367e:	4290      	cmp	r0, r2
 8013680:	d101      	bne.n	8013686 <memcmp+0xe>
 8013682:	2000      	movs	r0, #0
 8013684:	e005      	b.n	8013692 <memcmp+0x1a>
 8013686:	7803      	ldrb	r3, [r0, #0]
 8013688:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801368c:	42a3      	cmp	r3, r4
 801368e:	d001      	beq.n	8013694 <memcmp+0x1c>
 8013690:	1b18      	subs	r0, r3, r4
 8013692:	bd10      	pop	{r4, pc}
 8013694:	3001      	adds	r0, #1
 8013696:	e7f2      	b.n	801367e <memcmp+0x6>

08013698 <memmove>:
 8013698:	4288      	cmp	r0, r1
 801369a:	b510      	push	{r4, lr}
 801369c:	eb01 0402 	add.w	r4, r1, r2
 80136a0:	d902      	bls.n	80136a8 <memmove+0x10>
 80136a2:	4284      	cmp	r4, r0
 80136a4:	4623      	mov	r3, r4
 80136a6:	d807      	bhi.n	80136b8 <memmove+0x20>
 80136a8:	1e43      	subs	r3, r0, #1
 80136aa:	42a1      	cmp	r1, r4
 80136ac:	d008      	beq.n	80136c0 <memmove+0x28>
 80136ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136b6:	e7f8      	b.n	80136aa <memmove+0x12>
 80136b8:	4402      	add	r2, r0
 80136ba:	4601      	mov	r1, r0
 80136bc:	428a      	cmp	r2, r1
 80136be:	d100      	bne.n	80136c2 <memmove+0x2a>
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136ca:	e7f7      	b.n	80136bc <memmove+0x24>

080136cc <memset>:
 80136cc:	4402      	add	r2, r0
 80136ce:	4603      	mov	r3, r0
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d100      	bne.n	80136d6 <memset+0xa>
 80136d4:	4770      	bx	lr
 80136d6:	f803 1b01 	strb.w	r1, [r3], #1
 80136da:	e7f9      	b.n	80136d0 <memset+0x4>

080136dc <strchr>:
 80136dc:	b2c9      	uxtb	r1, r1
 80136de:	4603      	mov	r3, r0
 80136e0:	4618      	mov	r0, r3
 80136e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136e6:	b112      	cbz	r2, 80136ee <strchr+0x12>
 80136e8:	428a      	cmp	r2, r1
 80136ea:	d1f9      	bne.n	80136e0 <strchr+0x4>
 80136ec:	4770      	bx	lr
 80136ee:	2900      	cmp	r1, #0
 80136f0:	bf18      	it	ne
 80136f2:	2000      	movne	r0, #0
 80136f4:	4770      	bx	lr

080136f6 <strncmp>:
 80136f6:	b510      	push	{r4, lr}
 80136f8:	b16a      	cbz	r2, 8013716 <strncmp+0x20>
 80136fa:	3901      	subs	r1, #1
 80136fc:	1884      	adds	r4, r0, r2
 80136fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013702:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013706:	429a      	cmp	r2, r3
 8013708:	d103      	bne.n	8013712 <strncmp+0x1c>
 801370a:	42a0      	cmp	r0, r4
 801370c:	d001      	beq.n	8013712 <strncmp+0x1c>
 801370e:	2a00      	cmp	r2, #0
 8013710:	d1f5      	bne.n	80136fe <strncmp+0x8>
 8013712:	1ad0      	subs	r0, r2, r3
 8013714:	bd10      	pop	{r4, pc}
 8013716:	4610      	mov	r0, r2
 8013718:	e7fc      	b.n	8013714 <strncmp+0x1e>

0801371a <strstr>:
 801371a:	780a      	ldrb	r2, [r1, #0]
 801371c:	b570      	push	{r4, r5, r6, lr}
 801371e:	b96a      	cbnz	r2, 801373c <strstr+0x22>
 8013720:	bd70      	pop	{r4, r5, r6, pc}
 8013722:	429a      	cmp	r2, r3
 8013724:	d109      	bne.n	801373a <strstr+0x20>
 8013726:	460c      	mov	r4, r1
 8013728:	4605      	mov	r5, r0
 801372a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801372e:	2b00      	cmp	r3, #0
 8013730:	d0f6      	beq.n	8013720 <strstr+0x6>
 8013732:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013736:	429e      	cmp	r6, r3
 8013738:	d0f7      	beq.n	801372a <strstr+0x10>
 801373a:	3001      	adds	r0, #1
 801373c:	7803      	ldrb	r3, [r0, #0]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1ef      	bne.n	8013722 <strstr+0x8>
 8013742:	4618      	mov	r0, r3
 8013744:	e7ec      	b.n	8013720 <strstr+0x6>
	...

08013748 <_close_r>:
 8013748:	b538      	push	{r3, r4, r5, lr}
 801374a:	4d06      	ldr	r5, [pc, #24]	@ (8013764 <_close_r+0x1c>)
 801374c:	2300      	movs	r3, #0
 801374e:	4604      	mov	r4, r0
 8013750:	4608      	mov	r0, r1
 8013752:	602b      	str	r3, [r5, #0]
 8013754:	f7ed febe 	bl	80014d4 <_close>
 8013758:	1c43      	adds	r3, r0, #1
 801375a:	d102      	bne.n	8013762 <_close_r+0x1a>
 801375c:	682b      	ldr	r3, [r5, #0]
 801375e:	b103      	cbz	r3, 8013762 <_close_r+0x1a>
 8013760:	6023      	str	r3, [r4, #0]
 8013762:	bd38      	pop	{r3, r4, r5, pc}
 8013764:	2000dc08 	.word	0x2000dc08

08013768 <_lseek_r>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4d07      	ldr	r5, [pc, #28]	@ (8013788 <_lseek_r+0x20>)
 801376c:	4604      	mov	r4, r0
 801376e:	4608      	mov	r0, r1
 8013770:	4611      	mov	r1, r2
 8013772:	2200      	movs	r2, #0
 8013774:	602a      	str	r2, [r5, #0]
 8013776:	461a      	mov	r2, r3
 8013778:	f7ed fed3 	bl	8001522 <_lseek>
 801377c:	1c43      	adds	r3, r0, #1
 801377e:	d102      	bne.n	8013786 <_lseek_r+0x1e>
 8013780:	682b      	ldr	r3, [r5, #0]
 8013782:	b103      	cbz	r3, 8013786 <_lseek_r+0x1e>
 8013784:	6023      	str	r3, [r4, #0]
 8013786:	bd38      	pop	{r3, r4, r5, pc}
 8013788:	2000dc08 	.word	0x2000dc08

0801378c <_read_r>:
 801378c:	b538      	push	{r3, r4, r5, lr}
 801378e:	4d07      	ldr	r5, [pc, #28]	@ (80137ac <_read_r+0x20>)
 8013790:	4604      	mov	r4, r0
 8013792:	4608      	mov	r0, r1
 8013794:	4611      	mov	r1, r2
 8013796:	2200      	movs	r2, #0
 8013798:	602a      	str	r2, [r5, #0]
 801379a:	461a      	mov	r2, r3
 801379c:	f7ed fe61 	bl	8001462 <_read>
 80137a0:	1c43      	adds	r3, r0, #1
 80137a2:	d102      	bne.n	80137aa <_read_r+0x1e>
 80137a4:	682b      	ldr	r3, [r5, #0]
 80137a6:	b103      	cbz	r3, 80137aa <_read_r+0x1e>
 80137a8:	6023      	str	r3, [r4, #0]
 80137aa:	bd38      	pop	{r3, r4, r5, pc}
 80137ac:	2000dc08 	.word	0x2000dc08

080137b0 <_sbrk_r>:
 80137b0:	b538      	push	{r3, r4, r5, lr}
 80137b2:	4d06      	ldr	r5, [pc, #24]	@ (80137cc <_sbrk_r+0x1c>)
 80137b4:	2300      	movs	r3, #0
 80137b6:	4604      	mov	r4, r0
 80137b8:	4608      	mov	r0, r1
 80137ba:	602b      	str	r3, [r5, #0]
 80137bc:	f7ed febe 	bl	800153c <_sbrk>
 80137c0:	1c43      	adds	r3, r0, #1
 80137c2:	d102      	bne.n	80137ca <_sbrk_r+0x1a>
 80137c4:	682b      	ldr	r3, [r5, #0]
 80137c6:	b103      	cbz	r3, 80137ca <_sbrk_r+0x1a>
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	bd38      	pop	{r3, r4, r5, pc}
 80137cc:	2000dc08 	.word	0x2000dc08

080137d0 <_write_r>:
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4d07      	ldr	r5, [pc, #28]	@ (80137f0 <_write_r+0x20>)
 80137d4:	4604      	mov	r4, r0
 80137d6:	4608      	mov	r0, r1
 80137d8:	4611      	mov	r1, r2
 80137da:	2200      	movs	r2, #0
 80137dc:	602a      	str	r2, [r5, #0]
 80137de:	461a      	mov	r2, r3
 80137e0:	f7ed fe5c 	bl	800149c <_write>
 80137e4:	1c43      	adds	r3, r0, #1
 80137e6:	d102      	bne.n	80137ee <_write_r+0x1e>
 80137e8:	682b      	ldr	r3, [r5, #0]
 80137ea:	b103      	cbz	r3, 80137ee <_write_r+0x1e>
 80137ec:	6023      	str	r3, [r4, #0]
 80137ee:	bd38      	pop	{r3, r4, r5, pc}
 80137f0:	2000dc08 	.word	0x2000dc08

080137f4 <__errno>:
 80137f4:	4b01      	ldr	r3, [pc, #4]	@ (80137fc <__errno+0x8>)
 80137f6:	6818      	ldr	r0, [r3, #0]
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop
 80137fc:	200000c0 	.word	0x200000c0

08013800 <__libc_init_array>:
 8013800:	b570      	push	{r4, r5, r6, lr}
 8013802:	4d0d      	ldr	r5, [pc, #52]	@ (8013838 <__libc_init_array+0x38>)
 8013804:	4c0d      	ldr	r4, [pc, #52]	@ (801383c <__libc_init_array+0x3c>)
 8013806:	1b64      	subs	r4, r4, r5
 8013808:	10a4      	asrs	r4, r4, #2
 801380a:	2600      	movs	r6, #0
 801380c:	42a6      	cmp	r6, r4
 801380e:	d109      	bne.n	8013824 <__libc_init_array+0x24>
 8013810:	4d0b      	ldr	r5, [pc, #44]	@ (8013840 <__libc_init_array+0x40>)
 8013812:	4c0c      	ldr	r4, [pc, #48]	@ (8013844 <__libc_init_array+0x44>)
 8013814:	f000 fe64 	bl	80144e0 <_init>
 8013818:	1b64      	subs	r4, r4, r5
 801381a:	10a4      	asrs	r4, r4, #2
 801381c:	2600      	movs	r6, #0
 801381e:	42a6      	cmp	r6, r4
 8013820:	d105      	bne.n	801382e <__libc_init_array+0x2e>
 8013822:	bd70      	pop	{r4, r5, r6, pc}
 8013824:	f855 3b04 	ldr.w	r3, [r5], #4
 8013828:	4798      	blx	r3
 801382a:	3601      	adds	r6, #1
 801382c:	e7ee      	b.n	801380c <__libc_init_array+0xc>
 801382e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013832:	4798      	blx	r3
 8013834:	3601      	adds	r6, #1
 8013836:	e7f2      	b.n	801381e <__libc_init_array+0x1e>
 8013838:	08015338 	.word	0x08015338
 801383c:	08015338 	.word	0x08015338
 8013840:	08015338 	.word	0x08015338
 8013844:	08015340 	.word	0x08015340

08013848 <__retarget_lock_init_recursive>:
 8013848:	4770      	bx	lr

0801384a <__retarget_lock_acquire_recursive>:
 801384a:	4770      	bx	lr

0801384c <__retarget_lock_release_recursive>:
 801384c:	4770      	bx	lr

0801384e <strcpy>:
 801384e:	4603      	mov	r3, r0
 8013850:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013854:	f803 2b01 	strb.w	r2, [r3], #1
 8013858:	2a00      	cmp	r2, #0
 801385a:	d1f9      	bne.n	8013850 <strcpy+0x2>
 801385c:	4770      	bx	lr

0801385e <memcpy>:
 801385e:	440a      	add	r2, r1
 8013860:	4291      	cmp	r1, r2
 8013862:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013866:	d100      	bne.n	801386a <memcpy+0xc>
 8013868:	4770      	bx	lr
 801386a:	b510      	push	{r4, lr}
 801386c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013874:	4291      	cmp	r1, r2
 8013876:	d1f9      	bne.n	801386c <memcpy+0xe>
 8013878:	bd10      	pop	{r4, pc}
	...

0801387c <__assert_func>:
 801387c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801387e:	4614      	mov	r4, r2
 8013880:	461a      	mov	r2, r3
 8013882:	4b09      	ldr	r3, [pc, #36]	@ (80138a8 <__assert_func+0x2c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	4605      	mov	r5, r0
 8013888:	68d8      	ldr	r0, [r3, #12]
 801388a:	b954      	cbnz	r4, 80138a2 <__assert_func+0x26>
 801388c:	4b07      	ldr	r3, [pc, #28]	@ (80138ac <__assert_func+0x30>)
 801388e:	461c      	mov	r4, r3
 8013890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013894:	9100      	str	r1, [sp, #0]
 8013896:	462b      	mov	r3, r5
 8013898:	4905      	ldr	r1, [pc, #20]	@ (80138b0 <__assert_func+0x34>)
 801389a:	f000 fd3f 	bl	801431c <fiprintf>
 801389e:	f000 fdd3 	bl	8014448 <abort>
 80138a2:	4b04      	ldr	r3, [pc, #16]	@ (80138b4 <__assert_func+0x38>)
 80138a4:	e7f4      	b.n	8013890 <__assert_func+0x14>
 80138a6:	bf00      	nop
 80138a8:	200000c0 	.word	0x200000c0
 80138ac:	080152fb 	.word	0x080152fb
 80138b0:	080152cd 	.word	0x080152cd
 80138b4:	080152c0 	.word	0x080152c0

080138b8 <__env_lock>:
 80138b8:	4801      	ldr	r0, [pc, #4]	@ (80138c0 <__env_lock+0x8>)
 80138ba:	f7ff bfc6 	b.w	801384a <__retarget_lock_acquire_recursive>
 80138be:	bf00      	nop
 80138c0:	2000dc0c 	.word	0x2000dc0c

080138c4 <__env_unlock>:
 80138c4:	4801      	ldr	r0, [pc, #4]	@ (80138cc <__env_unlock+0x8>)
 80138c6:	f7ff bfc1 	b.w	801384c <__retarget_lock_release_recursive>
 80138ca:	bf00      	nop
 80138cc:	2000dc0c 	.word	0x2000dc0c

080138d0 <_free_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4605      	mov	r5, r0
 80138d4:	2900      	cmp	r1, #0
 80138d6:	d041      	beq.n	801395c <_free_r+0x8c>
 80138d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138dc:	1f0c      	subs	r4, r1, #4
 80138de:	2b00      	cmp	r3, #0
 80138e0:	bfb8      	it	lt
 80138e2:	18e4      	addlt	r4, r4, r3
 80138e4:	f7ff fb30 	bl	8012f48 <__malloc_lock>
 80138e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013960 <_free_r+0x90>)
 80138ea:	6813      	ldr	r3, [r2, #0]
 80138ec:	b933      	cbnz	r3, 80138fc <_free_r+0x2c>
 80138ee:	6063      	str	r3, [r4, #4]
 80138f0:	6014      	str	r4, [r2, #0]
 80138f2:	4628      	mov	r0, r5
 80138f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138f8:	f7ff bb2c 	b.w	8012f54 <__malloc_unlock>
 80138fc:	42a3      	cmp	r3, r4
 80138fe:	d908      	bls.n	8013912 <_free_r+0x42>
 8013900:	6820      	ldr	r0, [r4, #0]
 8013902:	1821      	adds	r1, r4, r0
 8013904:	428b      	cmp	r3, r1
 8013906:	bf01      	itttt	eq
 8013908:	6819      	ldreq	r1, [r3, #0]
 801390a:	685b      	ldreq	r3, [r3, #4]
 801390c:	1809      	addeq	r1, r1, r0
 801390e:	6021      	streq	r1, [r4, #0]
 8013910:	e7ed      	b.n	80138ee <_free_r+0x1e>
 8013912:	461a      	mov	r2, r3
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	b10b      	cbz	r3, 801391c <_free_r+0x4c>
 8013918:	42a3      	cmp	r3, r4
 801391a:	d9fa      	bls.n	8013912 <_free_r+0x42>
 801391c:	6811      	ldr	r1, [r2, #0]
 801391e:	1850      	adds	r0, r2, r1
 8013920:	42a0      	cmp	r0, r4
 8013922:	d10b      	bne.n	801393c <_free_r+0x6c>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	4401      	add	r1, r0
 8013928:	1850      	adds	r0, r2, r1
 801392a:	4283      	cmp	r3, r0
 801392c:	6011      	str	r1, [r2, #0]
 801392e:	d1e0      	bne.n	80138f2 <_free_r+0x22>
 8013930:	6818      	ldr	r0, [r3, #0]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	6053      	str	r3, [r2, #4]
 8013936:	4408      	add	r0, r1
 8013938:	6010      	str	r0, [r2, #0]
 801393a:	e7da      	b.n	80138f2 <_free_r+0x22>
 801393c:	d902      	bls.n	8013944 <_free_r+0x74>
 801393e:	230c      	movs	r3, #12
 8013940:	602b      	str	r3, [r5, #0]
 8013942:	e7d6      	b.n	80138f2 <_free_r+0x22>
 8013944:	6820      	ldr	r0, [r4, #0]
 8013946:	1821      	adds	r1, r4, r0
 8013948:	428b      	cmp	r3, r1
 801394a:	bf04      	itt	eq
 801394c:	6819      	ldreq	r1, [r3, #0]
 801394e:	685b      	ldreq	r3, [r3, #4]
 8013950:	6063      	str	r3, [r4, #4]
 8013952:	bf04      	itt	eq
 8013954:	1809      	addeq	r1, r1, r0
 8013956:	6021      	streq	r1, [r4, #0]
 8013958:	6054      	str	r4, [r2, #4]
 801395a:	e7ca      	b.n	80138f2 <_free_r+0x22>
 801395c:	bd38      	pop	{r3, r4, r5, pc}
 801395e:	bf00      	nop
 8013960:	2000dac8 	.word	0x2000dac8

08013964 <_malloc_usable_size_r>:
 8013964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013968:	1f18      	subs	r0, r3, #4
 801396a:	2b00      	cmp	r3, #0
 801396c:	bfbc      	itt	lt
 801396e:	580b      	ldrlt	r3, [r1, r0]
 8013970:	18c0      	addlt	r0, r0, r3
 8013972:	4770      	bx	lr

08013974 <__ssputs_r>:
 8013974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013978:	688e      	ldr	r6, [r1, #8]
 801397a:	461f      	mov	r7, r3
 801397c:	42be      	cmp	r6, r7
 801397e:	680b      	ldr	r3, [r1, #0]
 8013980:	4682      	mov	sl, r0
 8013982:	460c      	mov	r4, r1
 8013984:	4690      	mov	r8, r2
 8013986:	d82d      	bhi.n	80139e4 <__ssputs_r+0x70>
 8013988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801398c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013990:	d026      	beq.n	80139e0 <__ssputs_r+0x6c>
 8013992:	6965      	ldr	r5, [r4, #20]
 8013994:	6909      	ldr	r1, [r1, #16]
 8013996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801399a:	eba3 0901 	sub.w	r9, r3, r1
 801399e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139a2:	1c7b      	adds	r3, r7, #1
 80139a4:	444b      	add	r3, r9
 80139a6:	106d      	asrs	r5, r5, #1
 80139a8:	429d      	cmp	r5, r3
 80139aa:	bf38      	it	cc
 80139ac:	461d      	movcc	r5, r3
 80139ae:	0553      	lsls	r3, r2, #21
 80139b0:	d527      	bpl.n	8013a02 <__ssputs_r+0x8e>
 80139b2:	4629      	mov	r1, r5
 80139b4:	f7ff fa48 	bl	8012e48 <_malloc_r>
 80139b8:	4606      	mov	r6, r0
 80139ba:	b360      	cbz	r0, 8013a16 <__ssputs_r+0xa2>
 80139bc:	6921      	ldr	r1, [r4, #16]
 80139be:	464a      	mov	r2, r9
 80139c0:	f7ff ff4d 	bl	801385e <memcpy>
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80139ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80139ce:	81a3      	strh	r3, [r4, #12]
 80139d0:	6126      	str	r6, [r4, #16]
 80139d2:	6165      	str	r5, [r4, #20]
 80139d4:	444e      	add	r6, r9
 80139d6:	eba5 0509 	sub.w	r5, r5, r9
 80139da:	6026      	str	r6, [r4, #0]
 80139dc:	60a5      	str	r5, [r4, #8]
 80139de:	463e      	mov	r6, r7
 80139e0:	42be      	cmp	r6, r7
 80139e2:	d900      	bls.n	80139e6 <__ssputs_r+0x72>
 80139e4:	463e      	mov	r6, r7
 80139e6:	6820      	ldr	r0, [r4, #0]
 80139e8:	4632      	mov	r2, r6
 80139ea:	4641      	mov	r1, r8
 80139ec:	f7ff fe54 	bl	8013698 <memmove>
 80139f0:	68a3      	ldr	r3, [r4, #8]
 80139f2:	1b9b      	subs	r3, r3, r6
 80139f4:	60a3      	str	r3, [r4, #8]
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	4433      	add	r3, r6
 80139fa:	6023      	str	r3, [r4, #0]
 80139fc:	2000      	movs	r0, #0
 80139fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a02:	462a      	mov	r2, r5
 8013a04:	f7ff fb20 	bl	8013048 <_realloc_r>
 8013a08:	4606      	mov	r6, r0
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	d1e0      	bne.n	80139d0 <__ssputs_r+0x5c>
 8013a0e:	6921      	ldr	r1, [r4, #16]
 8013a10:	4650      	mov	r0, sl
 8013a12:	f7ff ff5d 	bl	80138d0 <_free_r>
 8013a16:	230c      	movs	r3, #12
 8013a18:	f8ca 3000 	str.w	r3, [sl]
 8013a1c:	89a3      	ldrh	r3, [r4, #12]
 8013a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a22:	81a3      	strh	r3, [r4, #12]
 8013a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a28:	e7e9      	b.n	80139fe <__ssputs_r+0x8a>
	...

08013a2c <_svfiprintf_r>:
 8013a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a30:	4698      	mov	r8, r3
 8013a32:	898b      	ldrh	r3, [r1, #12]
 8013a34:	061b      	lsls	r3, r3, #24
 8013a36:	b09d      	sub	sp, #116	@ 0x74
 8013a38:	4607      	mov	r7, r0
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	4614      	mov	r4, r2
 8013a3e:	d510      	bpl.n	8013a62 <_svfiprintf_r+0x36>
 8013a40:	690b      	ldr	r3, [r1, #16]
 8013a42:	b973      	cbnz	r3, 8013a62 <_svfiprintf_r+0x36>
 8013a44:	2140      	movs	r1, #64	@ 0x40
 8013a46:	f7ff f9ff 	bl	8012e48 <_malloc_r>
 8013a4a:	6028      	str	r0, [r5, #0]
 8013a4c:	6128      	str	r0, [r5, #16]
 8013a4e:	b930      	cbnz	r0, 8013a5e <_svfiprintf_r+0x32>
 8013a50:	230c      	movs	r3, #12
 8013a52:	603b      	str	r3, [r7, #0]
 8013a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a58:	b01d      	add	sp, #116	@ 0x74
 8013a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a5e:	2340      	movs	r3, #64	@ 0x40
 8013a60:	616b      	str	r3, [r5, #20]
 8013a62:	2300      	movs	r3, #0
 8013a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a66:	2320      	movs	r3, #32
 8013a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a70:	2330      	movs	r3, #48	@ 0x30
 8013a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013c10 <_svfiprintf_r+0x1e4>
 8013a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a7a:	f04f 0901 	mov.w	r9, #1
 8013a7e:	4623      	mov	r3, r4
 8013a80:	469a      	mov	sl, r3
 8013a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a86:	b10a      	cbz	r2, 8013a8c <_svfiprintf_r+0x60>
 8013a88:	2a25      	cmp	r2, #37	@ 0x25
 8013a8a:	d1f9      	bne.n	8013a80 <_svfiprintf_r+0x54>
 8013a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8013a90:	d00b      	beq.n	8013aaa <_svfiprintf_r+0x7e>
 8013a92:	465b      	mov	r3, fp
 8013a94:	4622      	mov	r2, r4
 8013a96:	4629      	mov	r1, r5
 8013a98:	4638      	mov	r0, r7
 8013a9a:	f7ff ff6b 	bl	8013974 <__ssputs_r>
 8013a9e:	3001      	adds	r0, #1
 8013aa0:	f000 80a7 	beq.w	8013bf2 <_svfiprintf_r+0x1c6>
 8013aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013aa6:	445a      	add	r2, fp
 8013aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 809f 	beq.w	8013bf2 <_svfiprintf_r+0x1c6>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013abe:	f10a 0a01 	add.w	sl, sl, #1
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	9307      	str	r3, [sp, #28]
 8013ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8013acc:	4654      	mov	r4, sl
 8013ace:	2205      	movs	r2, #5
 8013ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ad4:	484e      	ldr	r0, [pc, #312]	@ (8013c10 <_svfiprintf_r+0x1e4>)
 8013ad6:	f7ec fb9b 	bl	8000210 <memchr>
 8013ada:	9a04      	ldr	r2, [sp, #16]
 8013adc:	b9d8      	cbnz	r0, 8013b16 <_svfiprintf_r+0xea>
 8013ade:	06d0      	lsls	r0, r2, #27
 8013ae0:	bf44      	itt	mi
 8013ae2:	2320      	movmi	r3, #32
 8013ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ae8:	0711      	lsls	r1, r2, #28
 8013aea:	bf44      	itt	mi
 8013aec:	232b      	movmi	r3, #43	@ 0x2b
 8013aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013af2:	f89a 3000 	ldrb.w	r3, [sl]
 8013af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013af8:	d015      	beq.n	8013b26 <_svfiprintf_r+0xfa>
 8013afa:	9a07      	ldr	r2, [sp, #28]
 8013afc:	4654      	mov	r4, sl
 8013afe:	2000      	movs	r0, #0
 8013b00:	f04f 0c0a 	mov.w	ip, #10
 8013b04:	4621      	mov	r1, r4
 8013b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b0a:	3b30      	subs	r3, #48	@ 0x30
 8013b0c:	2b09      	cmp	r3, #9
 8013b0e:	d94b      	bls.n	8013ba8 <_svfiprintf_r+0x17c>
 8013b10:	b1b0      	cbz	r0, 8013b40 <_svfiprintf_r+0x114>
 8013b12:	9207      	str	r2, [sp, #28]
 8013b14:	e014      	b.n	8013b40 <_svfiprintf_r+0x114>
 8013b16:	eba0 0308 	sub.w	r3, r0, r8
 8013b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8013b1e:	4313      	orrs	r3, r2
 8013b20:	9304      	str	r3, [sp, #16]
 8013b22:	46a2      	mov	sl, r4
 8013b24:	e7d2      	b.n	8013acc <_svfiprintf_r+0xa0>
 8013b26:	9b03      	ldr	r3, [sp, #12]
 8013b28:	1d19      	adds	r1, r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	9103      	str	r1, [sp, #12]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	bfbb      	ittet	lt
 8013b32:	425b      	neglt	r3, r3
 8013b34:	f042 0202 	orrlt.w	r2, r2, #2
 8013b38:	9307      	strge	r3, [sp, #28]
 8013b3a:	9307      	strlt	r3, [sp, #28]
 8013b3c:	bfb8      	it	lt
 8013b3e:	9204      	strlt	r2, [sp, #16]
 8013b40:	7823      	ldrb	r3, [r4, #0]
 8013b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b44:	d10a      	bne.n	8013b5c <_svfiprintf_r+0x130>
 8013b46:	7863      	ldrb	r3, [r4, #1]
 8013b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b4a:	d132      	bne.n	8013bb2 <_svfiprintf_r+0x186>
 8013b4c:	9b03      	ldr	r3, [sp, #12]
 8013b4e:	1d1a      	adds	r2, r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	9203      	str	r2, [sp, #12]
 8013b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b58:	3402      	adds	r4, #2
 8013b5a:	9305      	str	r3, [sp, #20]
 8013b5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013c20 <_svfiprintf_r+0x1f4>
 8013b60:	7821      	ldrb	r1, [r4, #0]
 8013b62:	2203      	movs	r2, #3
 8013b64:	4650      	mov	r0, sl
 8013b66:	f7ec fb53 	bl	8000210 <memchr>
 8013b6a:	b138      	cbz	r0, 8013b7c <_svfiprintf_r+0x150>
 8013b6c:	9b04      	ldr	r3, [sp, #16]
 8013b6e:	eba0 000a 	sub.w	r0, r0, sl
 8013b72:	2240      	movs	r2, #64	@ 0x40
 8013b74:	4082      	lsls	r2, r0
 8013b76:	4313      	orrs	r3, r2
 8013b78:	3401      	adds	r4, #1
 8013b7a:	9304      	str	r3, [sp, #16]
 8013b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b80:	4824      	ldr	r0, [pc, #144]	@ (8013c14 <_svfiprintf_r+0x1e8>)
 8013b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b86:	2206      	movs	r2, #6
 8013b88:	f7ec fb42 	bl	8000210 <memchr>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d036      	beq.n	8013bfe <_svfiprintf_r+0x1d2>
 8013b90:	4b21      	ldr	r3, [pc, #132]	@ (8013c18 <_svfiprintf_r+0x1ec>)
 8013b92:	bb1b      	cbnz	r3, 8013bdc <_svfiprintf_r+0x1b0>
 8013b94:	9b03      	ldr	r3, [sp, #12]
 8013b96:	3307      	adds	r3, #7
 8013b98:	f023 0307 	bic.w	r3, r3, #7
 8013b9c:	3308      	adds	r3, #8
 8013b9e:	9303      	str	r3, [sp, #12]
 8013ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ba2:	4433      	add	r3, r6
 8013ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ba6:	e76a      	b.n	8013a7e <_svfiprintf_r+0x52>
 8013ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bac:	460c      	mov	r4, r1
 8013bae:	2001      	movs	r0, #1
 8013bb0:	e7a8      	b.n	8013b04 <_svfiprintf_r+0xd8>
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	3401      	adds	r4, #1
 8013bb6:	9305      	str	r3, [sp, #20]
 8013bb8:	4619      	mov	r1, r3
 8013bba:	f04f 0c0a 	mov.w	ip, #10
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bc4:	3a30      	subs	r2, #48	@ 0x30
 8013bc6:	2a09      	cmp	r2, #9
 8013bc8:	d903      	bls.n	8013bd2 <_svfiprintf_r+0x1a6>
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d0c6      	beq.n	8013b5c <_svfiprintf_r+0x130>
 8013bce:	9105      	str	r1, [sp, #20]
 8013bd0:	e7c4      	b.n	8013b5c <_svfiprintf_r+0x130>
 8013bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	2301      	movs	r3, #1
 8013bda:	e7f0      	b.n	8013bbe <_svfiprintf_r+0x192>
 8013bdc:	ab03      	add	r3, sp, #12
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	462a      	mov	r2, r5
 8013be2:	4b0e      	ldr	r3, [pc, #56]	@ (8013c1c <_svfiprintf_r+0x1f0>)
 8013be4:	a904      	add	r1, sp, #16
 8013be6:	4638      	mov	r0, r7
 8013be8:	f3af 8000 	nop.w
 8013bec:	1c42      	adds	r2, r0, #1
 8013bee:	4606      	mov	r6, r0
 8013bf0:	d1d6      	bne.n	8013ba0 <_svfiprintf_r+0x174>
 8013bf2:	89ab      	ldrh	r3, [r5, #12]
 8013bf4:	065b      	lsls	r3, r3, #25
 8013bf6:	f53f af2d 	bmi.w	8013a54 <_svfiprintf_r+0x28>
 8013bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bfc:	e72c      	b.n	8013a58 <_svfiprintf_r+0x2c>
 8013bfe:	ab03      	add	r3, sp, #12
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	462a      	mov	r2, r5
 8013c04:	4b05      	ldr	r3, [pc, #20]	@ (8013c1c <_svfiprintf_r+0x1f0>)
 8013c06:	a904      	add	r1, sp, #16
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f000 f9bb 	bl	8013f84 <_printf_i>
 8013c0e:	e7ed      	b.n	8013bec <_svfiprintf_r+0x1c0>
 8013c10:	080152fc 	.word	0x080152fc
 8013c14:	08015306 	.word	0x08015306
 8013c18:	00000000 	.word	0x00000000
 8013c1c:	08013975 	.word	0x08013975
 8013c20:	08015302 	.word	0x08015302

08013c24 <__sfputc_r>:
 8013c24:	6893      	ldr	r3, [r2, #8]
 8013c26:	3b01      	subs	r3, #1
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	b410      	push	{r4}
 8013c2c:	6093      	str	r3, [r2, #8]
 8013c2e:	da08      	bge.n	8013c42 <__sfputc_r+0x1e>
 8013c30:	6994      	ldr	r4, [r2, #24]
 8013c32:	42a3      	cmp	r3, r4
 8013c34:	db01      	blt.n	8013c3a <__sfputc_r+0x16>
 8013c36:	290a      	cmp	r1, #10
 8013c38:	d103      	bne.n	8013c42 <__sfputc_r+0x1e>
 8013c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c3e:	f7ff bc87 	b.w	8013550 <__swbuf_r>
 8013c42:	6813      	ldr	r3, [r2, #0]
 8013c44:	1c58      	adds	r0, r3, #1
 8013c46:	6010      	str	r0, [r2, #0]
 8013c48:	7019      	strb	r1, [r3, #0]
 8013c4a:	4608      	mov	r0, r1
 8013c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c50:	4770      	bx	lr

08013c52 <__sfputs_r>:
 8013c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c54:	4606      	mov	r6, r0
 8013c56:	460f      	mov	r7, r1
 8013c58:	4614      	mov	r4, r2
 8013c5a:	18d5      	adds	r5, r2, r3
 8013c5c:	42ac      	cmp	r4, r5
 8013c5e:	d101      	bne.n	8013c64 <__sfputs_r+0x12>
 8013c60:	2000      	movs	r0, #0
 8013c62:	e007      	b.n	8013c74 <__sfputs_r+0x22>
 8013c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c68:	463a      	mov	r2, r7
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f7ff ffda 	bl	8013c24 <__sfputc_r>
 8013c70:	1c43      	adds	r3, r0, #1
 8013c72:	d1f3      	bne.n	8013c5c <__sfputs_r+0xa>
 8013c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c78 <_vfiprintf_r>:
 8013c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c7c:	460d      	mov	r5, r1
 8013c7e:	b09d      	sub	sp, #116	@ 0x74
 8013c80:	4614      	mov	r4, r2
 8013c82:	4698      	mov	r8, r3
 8013c84:	4606      	mov	r6, r0
 8013c86:	b118      	cbz	r0, 8013c90 <_vfiprintf_r+0x18>
 8013c88:	6a03      	ldr	r3, [r0, #32]
 8013c8a:	b90b      	cbnz	r3, 8013c90 <_vfiprintf_r+0x18>
 8013c8c:	f7ff fb0e 	bl	80132ac <__sinit>
 8013c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c92:	07d9      	lsls	r1, r3, #31
 8013c94:	d405      	bmi.n	8013ca2 <_vfiprintf_r+0x2a>
 8013c96:	89ab      	ldrh	r3, [r5, #12]
 8013c98:	059a      	lsls	r2, r3, #22
 8013c9a:	d402      	bmi.n	8013ca2 <_vfiprintf_r+0x2a>
 8013c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c9e:	f7ff fdd4 	bl	801384a <__retarget_lock_acquire_recursive>
 8013ca2:	89ab      	ldrh	r3, [r5, #12]
 8013ca4:	071b      	lsls	r3, r3, #28
 8013ca6:	d501      	bpl.n	8013cac <_vfiprintf_r+0x34>
 8013ca8:	692b      	ldr	r3, [r5, #16]
 8013caa:	b99b      	cbnz	r3, 8013cd4 <_vfiprintf_r+0x5c>
 8013cac:	4629      	mov	r1, r5
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f7ff fc8c 	bl	80135cc <__swsetup_r>
 8013cb4:	b170      	cbz	r0, 8013cd4 <_vfiprintf_r+0x5c>
 8013cb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cb8:	07dc      	lsls	r4, r3, #31
 8013cba:	d504      	bpl.n	8013cc6 <_vfiprintf_r+0x4e>
 8013cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cc0:	b01d      	add	sp, #116	@ 0x74
 8013cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc6:	89ab      	ldrh	r3, [r5, #12]
 8013cc8:	0598      	lsls	r0, r3, #22
 8013cca:	d4f7      	bmi.n	8013cbc <_vfiprintf_r+0x44>
 8013ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cce:	f7ff fdbd 	bl	801384c <__retarget_lock_release_recursive>
 8013cd2:	e7f3      	b.n	8013cbc <_vfiprintf_r+0x44>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cd8:	2320      	movs	r3, #32
 8013cda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ce2:	2330      	movs	r3, #48	@ 0x30
 8013ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013e94 <_vfiprintf_r+0x21c>
 8013ce8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013cec:	f04f 0901 	mov.w	r9, #1
 8013cf0:	4623      	mov	r3, r4
 8013cf2:	469a      	mov	sl, r3
 8013cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013cf8:	b10a      	cbz	r2, 8013cfe <_vfiprintf_r+0x86>
 8013cfa:	2a25      	cmp	r2, #37	@ 0x25
 8013cfc:	d1f9      	bne.n	8013cf2 <_vfiprintf_r+0x7a>
 8013cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8013d02:	d00b      	beq.n	8013d1c <_vfiprintf_r+0xa4>
 8013d04:	465b      	mov	r3, fp
 8013d06:	4622      	mov	r2, r4
 8013d08:	4629      	mov	r1, r5
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f7ff ffa1 	bl	8013c52 <__sfputs_r>
 8013d10:	3001      	adds	r0, #1
 8013d12:	f000 80a7 	beq.w	8013e64 <_vfiprintf_r+0x1ec>
 8013d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d18:	445a      	add	r2, fp
 8013d1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 809f 	beq.w	8013e64 <_vfiprintf_r+0x1ec>
 8013d26:	2300      	movs	r3, #0
 8013d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d30:	f10a 0a01 	add.w	sl, sl, #1
 8013d34:	9304      	str	r3, [sp, #16]
 8013d36:	9307      	str	r3, [sp, #28]
 8013d38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d3e:	4654      	mov	r4, sl
 8013d40:	2205      	movs	r2, #5
 8013d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d46:	4853      	ldr	r0, [pc, #332]	@ (8013e94 <_vfiprintf_r+0x21c>)
 8013d48:	f7ec fa62 	bl	8000210 <memchr>
 8013d4c:	9a04      	ldr	r2, [sp, #16]
 8013d4e:	b9d8      	cbnz	r0, 8013d88 <_vfiprintf_r+0x110>
 8013d50:	06d1      	lsls	r1, r2, #27
 8013d52:	bf44      	itt	mi
 8013d54:	2320      	movmi	r3, #32
 8013d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d5a:	0713      	lsls	r3, r2, #28
 8013d5c:	bf44      	itt	mi
 8013d5e:	232b      	movmi	r3, #43	@ 0x2b
 8013d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d64:	f89a 3000 	ldrb.w	r3, [sl]
 8013d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d6a:	d015      	beq.n	8013d98 <_vfiprintf_r+0x120>
 8013d6c:	9a07      	ldr	r2, [sp, #28]
 8013d6e:	4654      	mov	r4, sl
 8013d70:	2000      	movs	r0, #0
 8013d72:	f04f 0c0a 	mov.w	ip, #10
 8013d76:	4621      	mov	r1, r4
 8013d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d7c:	3b30      	subs	r3, #48	@ 0x30
 8013d7e:	2b09      	cmp	r3, #9
 8013d80:	d94b      	bls.n	8013e1a <_vfiprintf_r+0x1a2>
 8013d82:	b1b0      	cbz	r0, 8013db2 <_vfiprintf_r+0x13a>
 8013d84:	9207      	str	r2, [sp, #28]
 8013d86:	e014      	b.n	8013db2 <_vfiprintf_r+0x13a>
 8013d88:	eba0 0308 	sub.w	r3, r0, r8
 8013d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8013d90:	4313      	orrs	r3, r2
 8013d92:	9304      	str	r3, [sp, #16]
 8013d94:	46a2      	mov	sl, r4
 8013d96:	e7d2      	b.n	8013d3e <_vfiprintf_r+0xc6>
 8013d98:	9b03      	ldr	r3, [sp, #12]
 8013d9a:	1d19      	adds	r1, r3, #4
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	9103      	str	r1, [sp, #12]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	bfbb      	ittet	lt
 8013da4:	425b      	neglt	r3, r3
 8013da6:	f042 0202 	orrlt.w	r2, r2, #2
 8013daa:	9307      	strge	r3, [sp, #28]
 8013dac:	9307      	strlt	r3, [sp, #28]
 8013dae:	bfb8      	it	lt
 8013db0:	9204      	strlt	r2, [sp, #16]
 8013db2:	7823      	ldrb	r3, [r4, #0]
 8013db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8013db6:	d10a      	bne.n	8013dce <_vfiprintf_r+0x156>
 8013db8:	7863      	ldrb	r3, [r4, #1]
 8013dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dbc:	d132      	bne.n	8013e24 <_vfiprintf_r+0x1ac>
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	1d1a      	adds	r2, r3, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	9203      	str	r2, [sp, #12]
 8013dc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013dca:	3402      	adds	r4, #2
 8013dcc:	9305      	str	r3, [sp, #20]
 8013dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ea4 <_vfiprintf_r+0x22c>
 8013dd2:	7821      	ldrb	r1, [r4, #0]
 8013dd4:	2203      	movs	r2, #3
 8013dd6:	4650      	mov	r0, sl
 8013dd8:	f7ec fa1a 	bl	8000210 <memchr>
 8013ddc:	b138      	cbz	r0, 8013dee <_vfiprintf_r+0x176>
 8013dde:	9b04      	ldr	r3, [sp, #16]
 8013de0:	eba0 000a 	sub.w	r0, r0, sl
 8013de4:	2240      	movs	r2, #64	@ 0x40
 8013de6:	4082      	lsls	r2, r0
 8013de8:	4313      	orrs	r3, r2
 8013dea:	3401      	adds	r4, #1
 8013dec:	9304      	str	r3, [sp, #16]
 8013dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013df2:	4829      	ldr	r0, [pc, #164]	@ (8013e98 <_vfiprintf_r+0x220>)
 8013df4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013df8:	2206      	movs	r2, #6
 8013dfa:	f7ec fa09 	bl	8000210 <memchr>
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d03f      	beq.n	8013e82 <_vfiprintf_r+0x20a>
 8013e02:	4b26      	ldr	r3, [pc, #152]	@ (8013e9c <_vfiprintf_r+0x224>)
 8013e04:	bb1b      	cbnz	r3, 8013e4e <_vfiprintf_r+0x1d6>
 8013e06:	9b03      	ldr	r3, [sp, #12]
 8013e08:	3307      	adds	r3, #7
 8013e0a:	f023 0307 	bic.w	r3, r3, #7
 8013e0e:	3308      	adds	r3, #8
 8013e10:	9303      	str	r3, [sp, #12]
 8013e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e14:	443b      	add	r3, r7
 8013e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e18:	e76a      	b.n	8013cf0 <_vfiprintf_r+0x78>
 8013e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e1e:	460c      	mov	r4, r1
 8013e20:	2001      	movs	r0, #1
 8013e22:	e7a8      	b.n	8013d76 <_vfiprintf_r+0xfe>
 8013e24:	2300      	movs	r3, #0
 8013e26:	3401      	adds	r4, #1
 8013e28:	9305      	str	r3, [sp, #20]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	f04f 0c0a 	mov.w	ip, #10
 8013e30:	4620      	mov	r0, r4
 8013e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e36:	3a30      	subs	r2, #48	@ 0x30
 8013e38:	2a09      	cmp	r2, #9
 8013e3a:	d903      	bls.n	8013e44 <_vfiprintf_r+0x1cc>
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d0c6      	beq.n	8013dce <_vfiprintf_r+0x156>
 8013e40:	9105      	str	r1, [sp, #20]
 8013e42:	e7c4      	b.n	8013dce <_vfiprintf_r+0x156>
 8013e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e48:	4604      	mov	r4, r0
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e7f0      	b.n	8013e30 <_vfiprintf_r+0x1b8>
 8013e4e:	ab03      	add	r3, sp, #12
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	462a      	mov	r2, r5
 8013e54:	4b12      	ldr	r3, [pc, #72]	@ (8013ea0 <_vfiprintf_r+0x228>)
 8013e56:	a904      	add	r1, sp, #16
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f3af 8000 	nop.w
 8013e5e:	4607      	mov	r7, r0
 8013e60:	1c78      	adds	r0, r7, #1
 8013e62:	d1d6      	bne.n	8013e12 <_vfiprintf_r+0x19a>
 8013e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e66:	07d9      	lsls	r1, r3, #31
 8013e68:	d405      	bmi.n	8013e76 <_vfiprintf_r+0x1fe>
 8013e6a:	89ab      	ldrh	r3, [r5, #12]
 8013e6c:	059a      	lsls	r2, r3, #22
 8013e6e:	d402      	bmi.n	8013e76 <_vfiprintf_r+0x1fe>
 8013e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e72:	f7ff fceb 	bl	801384c <__retarget_lock_release_recursive>
 8013e76:	89ab      	ldrh	r3, [r5, #12]
 8013e78:	065b      	lsls	r3, r3, #25
 8013e7a:	f53f af1f 	bmi.w	8013cbc <_vfiprintf_r+0x44>
 8013e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e80:	e71e      	b.n	8013cc0 <_vfiprintf_r+0x48>
 8013e82:	ab03      	add	r3, sp, #12
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	462a      	mov	r2, r5
 8013e88:	4b05      	ldr	r3, [pc, #20]	@ (8013ea0 <_vfiprintf_r+0x228>)
 8013e8a:	a904      	add	r1, sp, #16
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	f000 f879 	bl	8013f84 <_printf_i>
 8013e92:	e7e4      	b.n	8013e5e <_vfiprintf_r+0x1e6>
 8013e94:	080152fc 	.word	0x080152fc
 8013e98:	08015306 	.word	0x08015306
 8013e9c:	00000000 	.word	0x00000000
 8013ea0:	08013c53 	.word	0x08013c53
 8013ea4:	08015302 	.word	0x08015302

08013ea8 <_printf_common>:
 8013ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013eac:	4616      	mov	r6, r2
 8013eae:	4698      	mov	r8, r3
 8013eb0:	688a      	ldr	r2, [r1, #8]
 8013eb2:	690b      	ldr	r3, [r1, #16]
 8013eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	bfb8      	it	lt
 8013ebc:	4613      	movlt	r3, r2
 8013ebe:	6033      	str	r3, [r6, #0]
 8013ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013ec4:	4607      	mov	r7, r0
 8013ec6:	460c      	mov	r4, r1
 8013ec8:	b10a      	cbz	r2, 8013ece <_printf_common+0x26>
 8013eca:	3301      	adds	r3, #1
 8013ecc:	6033      	str	r3, [r6, #0]
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	0699      	lsls	r1, r3, #26
 8013ed2:	bf42      	ittt	mi
 8013ed4:	6833      	ldrmi	r3, [r6, #0]
 8013ed6:	3302      	addmi	r3, #2
 8013ed8:	6033      	strmi	r3, [r6, #0]
 8013eda:	6825      	ldr	r5, [r4, #0]
 8013edc:	f015 0506 	ands.w	r5, r5, #6
 8013ee0:	d106      	bne.n	8013ef0 <_printf_common+0x48>
 8013ee2:	f104 0a19 	add.w	sl, r4, #25
 8013ee6:	68e3      	ldr	r3, [r4, #12]
 8013ee8:	6832      	ldr	r2, [r6, #0]
 8013eea:	1a9b      	subs	r3, r3, r2
 8013eec:	42ab      	cmp	r3, r5
 8013eee:	dc26      	bgt.n	8013f3e <_printf_common+0x96>
 8013ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013ef4:	6822      	ldr	r2, [r4, #0]
 8013ef6:	3b00      	subs	r3, #0
 8013ef8:	bf18      	it	ne
 8013efa:	2301      	movne	r3, #1
 8013efc:	0692      	lsls	r2, r2, #26
 8013efe:	d42b      	bmi.n	8013f58 <_printf_common+0xb0>
 8013f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013f04:	4641      	mov	r1, r8
 8013f06:	4638      	mov	r0, r7
 8013f08:	47c8      	blx	r9
 8013f0a:	3001      	adds	r0, #1
 8013f0c:	d01e      	beq.n	8013f4c <_printf_common+0xa4>
 8013f0e:	6823      	ldr	r3, [r4, #0]
 8013f10:	6922      	ldr	r2, [r4, #16]
 8013f12:	f003 0306 	and.w	r3, r3, #6
 8013f16:	2b04      	cmp	r3, #4
 8013f18:	bf02      	ittt	eq
 8013f1a:	68e5      	ldreq	r5, [r4, #12]
 8013f1c:	6833      	ldreq	r3, [r6, #0]
 8013f1e:	1aed      	subeq	r5, r5, r3
 8013f20:	68a3      	ldr	r3, [r4, #8]
 8013f22:	bf0c      	ite	eq
 8013f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f28:	2500      	movne	r5, #0
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	bfc4      	itt	gt
 8013f2e:	1a9b      	subgt	r3, r3, r2
 8013f30:	18ed      	addgt	r5, r5, r3
 8013f32:	2600      	movs	r6, #0
 8013f34:	341a      	adds	r4, #26
 8013f36:	42b5      	cmp	r5, r6
 8013f38:	d11a      	bne.n	8013f70 <_printf_common+0xc8>
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	e008      	b.n	8013f50 <_printf_common+0xa8>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4652      	mov	r2, sl
 8013f42:	4641      	mov	r1, r8
 8013f44:	4638      	mov	r0, r7
 8013f46:	47c8      	blx	r9
 8013f48:	3001      	adds	r0, #1
 8013f4a:	d103      	bne.n	8013f54 <_printf_common+0xac>
 8013f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f54:	3501      	adds	r5, #1
 8013f56:	e7c6      	b.n	8013ee6 <_printf_common+0x3e>
 8013f58:	18e1      	adds	r1, r4, r3
 8013f5a:	1c5a      	adds	r2, r3, #1
 8013f5c:	2030      	movs	r0, #48	@ 0x30
 8013f5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013f62:	4422      	add	r2, r4
 8013f64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013f68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013f6c:	3302      	adds	r3, #2
 8013f6e:	e7c7      	b.n	8013f00 <_printf_common+0x58>
 8013f70:	2301      	movs	r3, #1
 8013f72:	4622      	mov	r2, r4
 8013f74:	4641      	mov	r1, r8
 8013f76:	4638      	mov	r0, r7
 8013f78:	47c8      	blx	r9
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	d0e6      	beq.n	8013f4c <_printf_common+0xa4>
 8013f7e:	3601      	adds	r6, #1
 8013f80:	e7d9      	b.n	8013f36 <_printf_common+0x8e>
	...

08013f84 <_printf_i>:
 8013f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f88:	7e0f      	ldrb	r7, [r1, #24]
 8013f8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013f8c:	2f78      	cmp	r7, #120	@ 0x78
 8013f8e:	4691      	mov	r9, r2
 8013f90:	4680      	mov	r8, r0
 8013f92:	460c      	mov	r4, r1
 8013f94:	469a      	mov	sl, r3
 8013f96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013f9a:	d807      	bhi.n	8013fac <_printf_i+0x28>
 8013f9c:	2f62      	cmp	r7, #98	@ 0x62
 8013f9e:	d80a      	bhi.n	8013fb6 <_printf_i+0x32>
 8013fa0:	2f00      	cmp	r7, #0
 8013fa2:	f000 80d2 	beq.w	801414a <_printf_i+0x1c6>
 8013fa6:	2f58      	cmp	r7, #88	@ 0x58
 8013fa8:	f000 80b9 	beq.w	801411e <_printf_i+0x19a>
 8013fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013fb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013fb4:	e03a      	b.n	801402c <_printf_i+0xa8>
 8013fb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013fba:	2b15      	cmp	r3, #21
 8013fbc:	d8f6      	bhi.n	8013fac <_printf_i+0x28>
 8013fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8013fc4 <_printf_i+0x40>)
 8013fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fc4:	0801401d 	.word	0x0801401d
 8013fc8:	08014031 	.word	0x08014031
 8013fcc:	08013fad 	.word	0x08013fad
 8013fd0:	08013fad 	.word	0x08013fad
 8013fd4:	08013fad 	.word	0x08013fad
 8013fd8:	08013fad 	.word	0x08013fad
 8013fdc:	08014031 	.word	0x08014031
 8013fe0:	08013fad 	.word	0x08013fad
 8013fe4:	08013fad 	.word	0x08013fad
 8013fe8:	08013fad 	.word	0x08013fad
 8013fec:	08013fad 	.word	0x08013fad
 8013ff0:	08014131 	.word	0x08014131
 8013ff4:	0801405b 	.word	0x0801405b
 8013ff8:	080140eb 	.word	0x080140eb
 8013ffc:	08013fad 	.word	0x08013fad
 8014000:	08013fad 	.word	0x08013fad
 8014004:	08014153 	.word	0x08014153
 8014008:	08013fad 	.word	0x08013fad
 801400c:	0801405b 	.word	0x0801405b
 8014010:	08013fad 	.word	0x08013fad
 8014014:	08013fad 	.word	0x08013fad
 8014018:	080140f3 	.word	0x080140f3
 801401c:	6833      	ldr	r3, [r6, #0]
 801401e:	1d1a      	adds	r2, r3, #4
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	6032      	str	r2, [r6, #0]
 8014024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801402c:	2301      	movs	r3, #1
 801402e:	e09d      	b.n	801416c <_printf_i+0x1e8>
 8014030:	6833      	ldr	r3, [r6, #0]
 8014032:	6820      	ldr	r0, [r4, #0]
 8014034:	1d19      	adds	r1, r3, #4
 8014036:	6031      	str	r1, [r6, #0]
 8014038:	0606      	lsls	r6, r0, #24
 801403a:	d501      	bpl.n	8014040 <_printf_i+0xbc>
 801403c:	681d      	ldr	r5, [r3, #0]
 801403e:	e003      	b.n	8014048 <_printf_i+0xc4>
 8014040:	0645      	lsls	r5, r0, #25
 8014042:	d5fb      	bpl.n	801403c <_printf_i+0xb8>
 8014044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014048:	2d00      	cmp	r5, #0
 801404a:	da03      	bge.n	8014054 <_printf_i+0xd0>
 801404c:	232d      	movs	r3, #45	@ 0x2d
 801404e:	426d      	negs	r5, r5
 8014050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014054:	4859      	ldr	r0, [pc, #356]	@ (80141bc <_printf_i+0x238>)
 8014056:	230a      	movs	r3, #10
 8014058:	e011      	b.n	801407e <_printf_i+0xfa>
 801405a:	6821      	ldr	r1, [r4, #0]
 801405c:	6833      	ldr	r3, [r6, #0]
 801405e:	0608      	lsls	r0, r1, #24
 8014060:	f853 5b04 	ldr.w	r5, [r3], #4
 8014064:	d402      	bmi.n	801406c <_printf_i+0xe8>
 8014066:	0649      	lsls	r1, r1, #25
 8014068:	bf48      	it	mi
 801406a:	b2ad      	uxthmi	r5, r5
 801406c:	2f6f      	cmp	r7, #111	@ 0x6f
 801406e:	4853      	ldr	r0, [pc, #332]	@ (80141bc <_printf_i+0x238>)
 8014070:	6033      	str	r3, [r6, #0]
 8014072:	bf14      	ite	ne
 8014074:	230a      	movne	r3, #10
 8014076:	2308      	moveq	r3, #8
 8014078:	2100      	movs	r1, #0
 801407a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801407e:	6866      	ldr	r6, [r4, #4]
 8014080:	60a6      	str	r6, [r4, #8]
 8014082:	2e00      	cmp	r6, #0
 8014084:	bfa2      	ittt	ge
 8014086:	6821      	ldrge	r1, [r4, #0]
 8014088:	f021 0104 	bicge.w	r1, r1, #4
 801408c:	6021      	strge	r1, [r4, #0]
 801408e:	b90d      	cbnz	r5, 8014094 <_printf_i+0x110>
 8014090:	2e00      	cmp	r6, #0
 8014092:	d04b      	beq.n	801412c <_printf_i+0x1a8>
 8014094:	4616      	mov	r6, r2
 8014096:	fbb5 f1f3 	udiv	r1, r5, r3
 801409a:	fb03 5711 	mls	r7, r3, r1, r5
 801409e:	5dc7      	ldrb	r7, [r0, r7]
 80140a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80140a4:	462f      	mov	r7, r5
 80140a6:	42bb      	cmp	r3, r7
 80140a8:	460d      	mov	r5, r1
 80140aa:	d9f4      	bls.n	8014096 <_printf_i+0x112>
 80140ac:	2b08      	cmp	r3, #8
 80140ae:	d10b      	bne.n	80140c8 <_printf_i+0x144>
 80140b0:	6823      	ldr	r3, [r4, #0]
 80140b2:	07df      	lsls	r7, r3, #31
 80140b4:	d508      	bpl.n	80140c8 <_printf_i+0x144>
 80140b6:	6923      	ldr	r3, [r4, #16]
 80140b8:	6861      	ldr	r1, [r4, #4]
 80140ba:	4299      	cmp	r1, r3
 80140bc:	bfde      	ittt	le
 80140be:	2330      	movle	r3, #48	@ 0x30
 80140c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80140c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80140c8:	1b92      	subs	r2, r2, r6
 80140ca:	6122      	str	r2, [r4, #16]
 80140cc:	f8cd a000 	str.w	sl, [sp]
 80140d0:	464b      	mov	r3, r9
 80140d2:	aa03      	add	r2, sp, #12
 80140d4:	4621      	mov	r1, r4
 80140d6:	4640      	mov	r0, r8
 80140d8:	f7ff fee6 	bl	8013ea8 <_printf_common>
 80140dc:	3001      	adds	r0, #1
 80140de:	d14a      	bne.n	8014176 <_printf_i+0x1f2>
 80140e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80140e4:	b004      	add	sp, #16
 80140e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ea:	6823      	ldr	r3, [r4, #0]
 80140ec:	f043 0320 	orr.w	r3, r3, #32
 80140f0:	6023      	str	r3, [r4, #0]
 80140f2:	4833      	ldr	r0, [pc, #204]	@ (80141c0 <_printf_i+0x23c>)
 80140f4:	2778      	movs	r7, #120	@ 0x78
 80140f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80140fa:	6823      	ldr	r3, [r4, #0]
 80140fc:	6831      	ldr	r1, [r6, #0]
 80140fe:	061f      	lsls	r7, r3, #24
 8014100:	f851 5b04 	ldr.w	r5, [r1], #4
 8014104:	d402      	bmi.n	801410c <_printf_i+0x188>
 8014106:	065f      	lsls	r7, r3, #25
 8014108:	bf48      	it	mi
 801410a:	b2ad      	uxthmi	r5, r5
 801410c:	6031      	str	r1, [r6, #0]
 801410e:	07d9      	lsls	r1, r3, #31
 8014110:	bf44      	itt	mi
 8014112:	f043 0320 	orrmi.w	r3, r3, #32
 8014116:	6023      	strmi	r3, [r4, #0]
 8014118:	b11d      	cbz	r5, 8014122 <_printf_i+0x19e>
 801411a:	2310      	movs	r3, #16
 801411c:	e7ac      	b.n	8014078 <_printf_i+0xf4>
 801411e:	4827      	ldr	r0, [pc, #156]	@ (80141bc <_printf_i+0x238>)
 8014120:	e7e9      	b.n	80140f6 <_printf_i+0x172>
 8014122:	6823      	ldr	r3, [r4, #0]
 8014124:	f023 0320 	bic.w	r3, r3, #32
 8014128:	6023      	str	r3, [r4, #0]
 801412a:	e7f6      	b.n	801411a <_printf_i+0x196>
 801412c:	4616      	mov	r6, r2
 801412e:	e7bd      	b.n	80140ac <_printf_i+0x128>
 8014130:	6833      	ldr	r3, [r6, #0]
 8014132:	6825      	ldr	r5, [r4, #0]
 8014134:	6961      	ldr	r1, [r4, #20]
 8014136:	1d18      	adds	r0, r3, #4
 8014138:	6030      	str	r0, [r6, #0]
 801413a:	062e      	lsls	r6, r5, #24
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	d501      	bpl.n	8014144 <_printf_i+0x1c0>
 8014140:	6019      	str	r1, [r3, #0]
 8014142:	e002      	b.n	801414a <_printf_i+0x1c6>
 8014144:	0668      	lsls	r0, r5, #25
 8014146:	d5fb      	bpl.n	8014140 <_printf_i+0x1bc>
 8014148:	8019      	strh	r1, [r3, #0]
 801414a:	2300      	movs	r3, #0
 801414c:	6123      	str	r3, [r4, #16]
 801414e:	4616      	mov	r6, r2
 8014150:	e7bc      	b.n	80140cc <_printf_i+0x148>
 8014152:	6833      	ldr	r3, [r6, #0]
 8014154:	1d1a      	adds	r2, r3, #4
 8014156:	6032      	str	r2, [r6, #0]
 8014158:	681e      	ldr	r6, [r3, #0]
 801415a:	6862      	ldr	r2, [r4, #4]
 801415c:	2100      	movs	r1, #0
 801415e:	4630      	mov	r0, r6
 8014160:	f7ec f856 	bl	8000210 <memchr>
 8014164:	b108      	cbz	r0, 801416a <_printf_i+0x1e6>
 8014166:	1b80      	subs	r0, r0, r6
 8014168:	6060      	str	r0, [r4, #4]
 801416a:	6863      	ldr	r3, [r4, #4]
 801416c:	6123      	str	r3, [r4, #16]
 801416e:	2300      	movs	r3, #0
 8014170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014174:	e7aa      	b.n	80140cc <_printf_i+0x148>
 8014176:	6923      	ldr	r3, [r4, #16]
 8014178:	4632      	mov	r2, r6
 801417a:	4649      	mov	r1, r9
 801417c:	4640      	mov	r0, r8
 801417e:	47d0      	blx	sl
 8014180:	3001      	adds	r0, #1
 8014182:	d0ad      	beq.n	80140e0 <_printf_i+0x15c>
 8014184:	6823      	ldr	r3, [r4, #0]
 8014186:	079b      	lsls	r3, r3, #30
 8014188:	d413      	bmi.n	80141b2 <_printf_i+0x22e>
 801418a:	68e0      	ldr	r0, [r4, #12]
 801418c:	9b03      	ldr	r3, [sp, #12]
 801418e:	4298      	cmp	r0, r3
 8014190:	bfb8      	it	lt
 8014192:	4618      	movlt	r0, r3
 8014194:	e7a6      	b.n	80140e4 <_printf_i+0x160>
 8014196:	2301      	movs	r3, #1
 8014198:	4632      	mov	r2, r6
 801419a:	4649      	mov	r1, r9
 801419c:	4640      	mov	r0, r8
 801419e:	47d0      	blx	sl
 80141a0:	3001      	adds	r0, #1
 80141a2:	d09d      	beq.n	80140e0 <_printf_i+0x15c>
 80141a4:	3501      	adds	r5, #1
 80141a6:	68e3      	ldr	r3, [r4, #12]
 80141a8:	9903      	ldr	r1, [sp, #12]
 80141aa:	1a5b      	subs	r3, r3, r1
 80141ac:	42ab      	cmp	r3, r5
 80141ae:	dcf2      	bgt.n	8014196 <_printf_i+0x212>
 80141b0:	e7eb      	b.n	801418a <_printf_i+0x206>
 80141b2:	2500      	movs	r5, #0
 80141b4:	f104 0619 	add.w	r6, r4, #25
 80141b8:	e7f5      	b.n	80141a6 <_printf_i+0x222>
 80141ba:	bf00      	nop
 80141bc:	0801530d 	.word	0x0801530d
 80141c0:	0801531e 	.word	0x0801531e

080141c4 <__sflush_r>:
 80141c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80141c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141cc:	0716      	lsls	r6, r2, #28
 80141ce:	4605      	mov	r5, r0
 80141d0:	460c      	mov	r4, r1
 80141d2:	d454      	bmi.n	801427e <__sflush_r+0xba>
 80141d4:	684b      	ldr	r3, [r1, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	dc02      	bgt.n	80141e0 <__sflush_r+0x1c>
 80141da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80141dc:	2b00      	cmp	r3, #0
 80141de:	dd48      	ble.n	8014272 <__sflush_r+0xae>
 80141e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80141e2:	2e00      	cmp	r6, #0
 80141e4:	d045      	beq.n	8014272 <__sflush_r+0xae>
 80141e6:	2300      	movs	r3, #0
 80141e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80141ec:	682f      	ldr	r7, [r5, #0]
 80141ee:	6a21      	ldr	r1, [r4, #32]
 80141f0:	602b      	str	r3, [r5, #0]
 80141f2:	d030      	beq.n	8014256 <__sflush_r+0x92>
 80141f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80141f6:	89a3      	ldrh	r3, [r4, #12]
 80141f8:	0759      	lsls	r1, r3, #29
 80141fa:	d505      	bpl.n	8014208 <__sflush_r+0x44>
 80141fc:	6863      	ldr	r3, [r4, #4]
 80141fe:	1ad2      	subs	r2, r2, r3
 8014200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014202:	b10b      	cbz	r3, 8014208 <__sflush_r+0x44>
 8014204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014206:	1ad2      	subs	r2, r2, r3
 8014208:	2300      	movs	r3, #0
 801420a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801420c:	6a21      	ldr	r1, [r4, #32]
 801420e:	4628      	mov	r0, r5
 8014210:	47b0      	blx	r6
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	d106      	bne.n	8014226 <__sflush_r+0x62>
 8014218:	6829      	ldr	r1, [r5, #0]
 801421a:	291d      	cmp	r1, #29
 801421c:	d82b      	bhi.n	8014276 <__sflush_r+0xb2>
 801421e:	4a2a      	ldr	r2, [pc, #168]	@ (80142c8 <__sflush_r+0x104>)
 8014220:	410a      	asrs	r2, r1
 8014222:	07d6      	lsls	r6, r2, #31
 8014224:	d427      	bmi.n	8014276 <__sflush_r+0xb2>
 8014226:	2200      	movs	r2, #0
 8014228:	6062      	str	r2, [r4, #4]
 801422a:	04d9      	lsls	r1, r3, #19
 801422c:	6922      	ldr	r2, [r4, #16]
 801422e:	6022      	str	r2, [r4, #0]
 8014230:	d504      	bpl.n	801423c <__sflush_r+0x78>
 8014232:	1c42      	adds	r2, r0, #1
 8014234:	d101      	bne.n	801423a <__sflush_r+0x76>
 8014236:	682b      	ldr	r3, [r5, #0]
 8014238:	b903      	cbnz	r3, 801423c <__sflush_r+0x78>
 801423a:	6560      	str	r0, [r4, #84]	@ 0x54
 801423c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801423e:	602f      	str	r7, [r5, #0]
 8014240:	b1b9      	cbz	r1, 8014272 <__sflush_r+0xae>
 8014242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014246:	4299      	cmp	r1, r3
 8014248:	d002      	beq.n	8014250 <__sflush_r+0x8c>
 801424a:	4628      	mov	r0, r5
 801424c:	f7ff fb40 	bl	80138d0 <_free_r>
 8014250:	2300      	movs	r3, #0
 8014252:	6363      	str	r3, [r4, #52]	@ 0x34
 8014254:	e00d      	b.n	8014272 <__sflush_r+0xae>
 8014256:	2301      	movs	r3, #1
 8014258:	4628      	mov	r0, r5
 801425a:	47b0      	blx	r6
 801425c:	4602      	mov	r2, r0
 801425e:	1c50      	adds	r0, r2, #1
 8014260:	d1c9      	bne.n	80141f6 <__sflush_r+0x32>
 8014262:	682b      	ldr	r3, [r5, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d0c6      	beq.n	80141f6 <__sflush_r+0x32>
 8014268:	2b1d      	cmp	r3, #29
 801426a:	d001      	beq.n	8014270 <__sflush_r+0xac>
 801426c:	2b16      	cmp	r3, #22
 801426e:	d11e      	bne.n	80142ae <__sflush_r+0xea>
 8014270:	602f      	str	r7, [r5, #0]
 8014272:	2000      	movs	r0, #0
 8014274:	e022      	b.n	80142bc <__sflush_r+0xf8>
 8014276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801427a:	b21b      	sxth	r3, r3
 801427c:	e01b      	b.n	80142b6 <__sflush_r+0xf2>
 801427e:	690f      	ldr	r7, [r1, #16]
 8014280:	2f00      	cmp	r7, #0
 8014282:	d0f6      	beq.n	8014272 <__sflush_r+0xae>
 8014284:	0793      	lsls	r3, r2, #30
 8014286:	680e      	ldr	r6, [r1, #0]
 8014288:	bf08      	it	eq
 801428a:	694b      	ldreq	r3, [r1, #20]
 801428c:	600f      	str	r7, [r1, #0]
 801428e:	bf18      	it	ne
 8014290:	2300      	movne	r3, #0
 8014292:	eba6 0807 	sub.w	r8, r6, r7
 8014296:	608b      	str	r3, [r1, #8]
 8014298:	f1b8 0f00 	cmp.w	r8, #0
 801429c:	dde9      	ble.n	8014272 <__sflush_r+0xae>
 801429e:	6a21      	ldr	r1, [r4, #32]
 80142a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80142a2:	4643      	mov	r3, r8
 80142a4:	463a      	mov	r2, r7
 80142a6:	4628      	mov	r0, r5
 80142a8:	47b0      	blx	r6
 80142aa:	2800      	cmp	r0, #0
 80142ac:	dc08      	bgt.n	80142c0 <__sflush_r+0xfc>
 80142ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142b6:	81a3      	strh	r3, [r4, #12]
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c0:	4407      	add	r7, r0
 80142c2:	eba8 0800 	sub.w	r8, r8, r0
 80142c6:	e7e7      	b.n	8014298 <__sflush_r+0xd4>
 80142c8:	dfbffffe 	.word	0xdfbffffe

080142cc <_fflush_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	690b      	ldr	r3, [r1, #16]
 80142d0:	4605      	mov	r5, r0
 80142d2:	460c      	mov	r4, r1
 80142d4:	b913      	cbnz	r3, 80142dc <_fflush_r+0x10>
 80142d6:	2500      	movs	r5, #0
 80142d8:	4628      	mov	r0, r5
 80142da:	bd38      	pop	{r3, r4, r5, pc}
 80142dc:	b118      	cbz	r0, 80142e6 <_fflush_r+0x1a>
 80142de:	6a03      	ldr	r3, [r0, #32]
 80142e0:	b90b      	cbnz	r3, 80142e6 <_fflush_r+0x1a>
 80142e2:	f7fe ffe3 	bl	80132ac <__sinit>
 80142e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d0f3      	beq.n	80142d6 <_fflush_r+0xa>
 80142ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80142f0:	07d0      	lsls	r0, r2, #31
 80142f2:	d404      	bmi.n	80142fe <_fflush_r+0x32>
 80142f4:	0599      	lsls	r1, r3, #22
 80142f6:	d402      	bmi.n	80142fe <_fflush_r+0x32>
 80142f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142fa:	f7ff faa6 	bl	801384a <__retarget_lock_acquire_recursive>
 80142fe:	4628      	mov	r0, r5
 8014300:	4621      	mov	r1, r4
 8014302:	f7ff ff5f 	bl	80141c4 <__sflush_r>
 8014306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014308:	07da      	lsls	r2, r3, #31
 801430a:	4605      	mov	r5, r0
 801430c:	d4e4      	bmi.n	80142d8 <_fflush_r+0xc>
 801430e:	89a3      	ldrh	r3, [r4, #12]
 8014310:	059b      	lsls	r3, r3, #22
 8014312:	d4e1      	bmi.n	80142d8 <_fflush_r+0xc>
 8014314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014316:	f7ff fa99 	bl	801384c <__retarget_lock_release_recursive>
 801431a:	e7dd      	b.n	80142d8 <_fflush_r+0xc>

0801431c <fiprintf>:
 801431c:	b40e      	push	{r1, r2, r3}
 801431e:	b503      	push	{r0, r1, lr}
 8014320:	4601      	mov	r1, r0
 8014322:	ab03      	add	r3, sp, #12
 8014324:	4805      	ldr	r0, [pc, #20]	@ (801433c <fiprintf+0x20>)
 8014326:	f853 2b04 	ldr.w	r2, [r3], #4
 801432a:	6800      	ldr	r0, [r0, #0]
 801432c:	9301      	str	r3, [sp, #4]
 801432e:	f7ff fca3 	bl	8013c78 <_vfiprintf_r>
 8014332:	b002      	add	sp, #8
 8014334:	f85d eb04 	ldr.w	lr, [sp], #4
 8014338:	b003      	add	sp, #12
 801433a:	4770      	bx	lr
 801433c:	200000c0 	.word	0x200000c0

08014340 <__swhatbuf_r>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	460c      	mov	r4, r1
 8014344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014348:	2900      	cmp	r1, #0
 801434a:	b096      	sub	sp, #88	@ 0x58
 801434c:	4615      	mov	r5, r2
 801434e:	461e      	mov	r6, r3
 8014350:	da0d      	bge.n	801436e <__swhatbuf_r+0x2e>
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014358:	f04f 0100 	mov.w	r1, #0
 801435c:	bf14      	ite	ne
 801435e:	2340      	movne	r3, #64	@ 0x40
 8014360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014364:	2000      	movs	r0, #0
 8014366:	6031      	str	r1, [r6, #0]
 8014368:	602b      	str	r3, [r5, #0]
 801436a:	b016      	add	sp, #88	@ 0x58
 801436c:	bd70      	pop	{r4, r5, r6, pc}
 801436e:	466a      	mov	r2, sp
 8014370:	f000 f848 	bl	8014404 <_fstat_r>
 8014374:	2800      	cmp	r0, #0
 8014376:	dbec      	blt.n	8014352 <__swhatbuf_r+0x12>
 8014378:	9901      	ldr	r1, [sp, #4]
 801437a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801437e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014382:	4259      	negs	r1, r3
 8014384:	4159      	adcs	r1, r3
 8014386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801438a:	e7eb      	b.n	8014364 <__swhatbuf_r+0x24>

0801438c <__smakebuf_r>:
 801438c:	898b      	ldrh	r3, [r1, #12]
 801438e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014390:	079d      	lsls	r5, r3, #30
 8014392:	4606      	mov	r6, r0
 8014394:	460c      	mov	r4, r1
 8014396:	d507      	bpl.n	80143a8 <__smakebuf_r+0x1c>
 8014398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801439c:	6023      	str	r3, [r4, #0]
 801439e:	6123      	str	r3, [r4, #16]
 80143a0:	2301      	movs	r3, #1
 80143a2:	6163      	str	r3, [r4, #20]
 80143a4:	b003      	add	sp, #12
 80143a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143a8:	ab01      	add	r3, sp, #4
 80143aa:	466a      	mov	r2, sp
 80143ac:	f7ff ffc8 	bl	8014340 <__swhatbuf_r>
 80143b0:	9f00      	ldr	r7, [sp, #0]
 80143b2:	4605      	mov	r5, r0
 80143b4:	4639      	mov	r1, r7
 80143b6:	4630      	mov	r0, r6
 80143b8:	f7fe fd46 	bl	8012e48 <_malloc_r>
 80143bc:	b948      	cbnz	r0, 80143d2 <__smakebuf_r+0x46>
 80143be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143c2:	059a      	lsls	r2, r3, #22
 80143c4:	d4ee      	bmi.n	80143a4 <__smakebuf_r+0x18>
 80143c6:	f023 0303 	bic.w	r3, r3, #3
 80143ca:	f043 0302 	orr.w	r3, r3, #2
 80143ce:	81a3      	strh	r3, [r4, #12]
 80143d0:	e7e2      	b.n	8014398 <__smakebuf_r+0xc>
 80143d2:	89a3      	ldrh	r3, [r4, #12]
 80143d4:	6020      	str	r0, [r4, #0]
 80143d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143da:	81a3      	strh	r3, [r4, #12]
 80143dc:	9b01      	ldr	r3, [sp, #4]
 80143de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80143e2:	b15b      	cbz	r3, 80143fc <__smakebuf_r+0x70>
 80143e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143e8:	4630      	mov	r0, r6
 80143ea:	f000 f81d 	bl	8014428 <_isatty_r>
 80143ee:	b128      	cbz	r0, 80143fc <__smakebuf_r+0x70>
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	f023 0303 	bic.w	r3, r3, #3
 80143f6:	f043 0301 	orr.w	r3, r3, #1
 80143fa:	81a3      	strh	r3, [r4, #12]
 80143fc:	89a3      	ldrh	r3, [r4, #12]
 80143fe:	431d      	orrs	r5, r3
 8014400:	81a5      	strh	r5, [r4, #12]
 8014402:	e7cf      	b.n	80143a4 <__smakebuf_r+0x18>

08014404 <_fstat_r>:
 8014404:	b538      	push	{r3, r4, r5, lr}
 8014406:	4d07      	ldr	r5, [pc, #28]	@ (8014424 <_fstat_r+0x20>)
 8014408:	2300      	movs	r3, #0
 801440a:	4604      	mov	r4, r0
 801440c:	4608      	mov	r0, r1
 801440e:	4611      	mov	r1, r2
 8014410:	602b      	str	r3, [r5, #0]
 8014412:	f7ed f86b 	bl	80014ec <_fstat>
 8014416:	1c43      	adds	r3, r0, #1
 8014418:	d102      	bne.n	8014420 <_fstat_r+0x1c>
 801441a:	682b      	ldr	r3, [r5, #0]
 801441c:	b103      	cbz	r3, 8014420 <_fstat_r+0x1c>
 801441e:	6023      	str	r3, [r4, #0]
 8014420:	bd38      	pop	{r3, r4, r5, pc}
 8014422:	bf00      	nop
 8014424:	2000dc08 	.word	0x2000dc08

08014428 <_isatty_r>:
 8014428:	b538      	push	{r3, r4, r5, lr}
 801442a:	4d06      	ldr	r5, [pc, #24]	@ (8014444 <_isatty_r+0x1c>)
 801442c:	2300      	movs	r3, #0
 801442e:	4604      	mov	r4, r0
 8014430:	4608      	mov	r0, r1
 8014432:	602b      	str	r3, [r5, #0]
 8014434:	f7ed f86a 	bl	800150c <_isatty>
 8014438:	1c43      	adds	r3, r0, #1
 801443a:	d102      	bne.n	8014442 <_isatty_r+0x1a>
 801443c:	682b      	ldr	r3, [r5, #0]
 801443e:	b103      	cbz	r3, 8014442 <_isatty_r+0x1a>
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	bd38      	pop	{r3, r4, r5, pc}
 8014444:	2000dc08 	.word	0x2000dc08

08014448 <abort>:
 8014448:	b508      	push	{r3, lr}
 801444a:	2006      	movs	r0, #6
 801444c:	f000 f82c 	bl	80144a8 <raise>
 8014450:	2001      	movs	r0, #1
 8014452:	f7ec fffb 	bl	800144c <_exit>

08014456 <_raise_r>:
 8014456:	291f      	cmp	r1, #31
 8014458:	b538      	push	{r3, r4, r5, lr}
 801445a:	4605      	mov	r5, r0
 801445c:	460c      	mov	r4, r1
 801445e:	d904      	bls.n	801446a <_raise_r+0x14>
 8014460:	2316      	movs	r3, #22
 8014462:	6003      	str	r3, [r0, #0]
 8014464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014468:	bd38      	pop	{r3, r4, r5, pc}
 801446a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801446c:	b112      	cbz	r2, 8014474 <_raise_r+0x1e>
 801446e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014472:	b94b      	cbnz	r3, 8014488 <_raise_r+0x32>
 8014474:	4628      	mov	r0, r5
 8014476:	f000 f831 	bl	80144dc <_getpid_r>
 801447a:	4622      	mov	r2, r4
 801447c:	4601      	mov	r1, r0
 801447e:	4628      	mov	r0, r5
 8014480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014484:	f000 b818 	b.w	80144b8 <_kill_r>
 8014488:	2b01      	cmp	r3, #1
 801448a:	d00a      	beq.n	80144a2 <_raise_r+0x4c>
 801448c:	1c59      	adds	r1, r3, #1
 801448e:	d103      	bne.n	8014498 <_raise_r+0x42>
 8014490:	2316      	movs	r3, #22
 8014492:	6003      	str	r3, [r0, #0]
 8014494:	2001      	movs	r0, #1
 8014496:	e7e7      	b.n	8014468 <_raise_r+0x12>
 8014498:	2100      	movs	r1, #0
 801449a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801449e:	4620      	mov	r0, r4
 80144a0:	4798      	blx	r3
 80144a2:	2000      	movs	r0, #0
 80144a4:	e7e0      	b.n	8014468 <_raise_r+0x12>
	...

080144a8 <raise>:
 80144a8:	4b02      	ldr	r3, [pc, #8]	@ (80144b4 <raise+0xc>)
 80144aa:	4601      	mov	r1, r0
 80144ac:	6818      	ldr	r0, [r3, #0]
 80144ae:	f7ff bfd2 	b.w	8014456 <_raise_r>
 80144b2:	bf00      	nop
 80144b4:	200000c0 	.word	0x200000c0

080144b8 <_kill_r>:
 80144b8:	b538      	push	{r3, r4, r5, lr}
 80144ba:	4d07      	ldr	r5, [pc, #28]	@ (80144d8 <_kill_r+0x20>)
 80144bc:	2300      	movs	r3, #0
 80144be:	4604      	mov	r4, r0
 80144c0:	4608      	mov	r0, r1
 80144c2:	4611      	mov	r1, r2
 80144c4:	602b      	str	r3, [r5, #0]
 80144c6:	f7ec ffb1 	bl	800142c <_kill>
 80144ca:	1c43      	adds	r3, r0, #1
 80144cc:	d102      	bne.n	80144d4 <_kill_r+0x1c>
 80144ce:	682b      	ldr	r3, [r5, #0]
 80144d0:	b103      	cbz	r3, 80144d4 <_kill_r+0x1c>
 80144d2:	6023      	str	r3, [r4, #0]
 80144d4:	bd38      	pop	{r3, r4, r5, pc}
 80144d6:	bf00      	nop
 80144d8:	2000dc08 	.word	0x2000dc08

080144dc <_getpid_r>:
 80144dc:	f7ec bf9e 	b.w	800141c <_getpid>

080144e0 <_init>:
 80144e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e2:	bf00      	nop
 80144e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144e6:	bc08      	pop	{r3}
 80144e8:	469e      	mov	lr, r3
 80144ea:	4770      	bx	lr

080144ec <_fini>:
 80144ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ee:	bf00      	nop
 80144f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144f2:	bc08      	pop	{r3}
 80144f4:	469e      	mov	lr, r3
 80144f6:	4770      	bx	lr
